{
    "HumanEval/0": [
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.5855"
        },
        {
            "id": "145",
            "prompt": "Write a python function to find the maximum difference between any two elements in a given array.",
            "draft_plan": "# If the array is empty, return None\n# Initialize the maximum difference to zero\n\n# Iterate through each element in the array\n    # Iterate through each element after the current element\n        # Calculate the difference between the current element and the subsequent element\n        # Update the maximum difference if the calculated difference is greater than the current maximum difference\n\n# Return the maximum difference",
            "requirements": "",
            "final_plan": "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ",
            "code": "function max_difference(arr)\n    if #arr == 0 then\n        return nil\n    end\n\n    local max_diff = 0\n\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            local diff = math.abs(arr[i] - arr[j])\n            if diff > max_diff then\n                max_diff = diff\n            end\n        end\n    end\n\n    return max_diff\nend",
            "gen_tc": "",
            "sim_score": "0.5410"
        },
        {
            "id": "472",
            "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.",
            "draft_plan": "# Sort the input list in ascending order\n\n# Iterate through each number in the sorted list, starting from the second number\n    # Check if the current number is consecutive to the previous number\n        # If not, return False\n\n# If all numbers are consecutive, return True",
            "requirements": "",
            "final_plan": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ",
            "code": "function checkConsecutive(lst)\n    table.sort(lst)\n    \n    for i = 2, #lst do\n        if lst[i] ~= lst[i-1] + 1 then\n            return false\n        end\n    end\n    \n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.5397"
        },
        {
            "id": "404",
            "prompt": "Write a python function to find the minimum of two numbers.",
            "draft_plan": "# Define a function to find the minimum of two numbers\n    # Check if the first number is less than the second number\n        # If true, return the first number\n        # If false, return the second number\n\n# Call the function and pass two numbers as arguments",
            "requirements": "",
            "final_plan": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ",
            "code": "function find_minimum(a, b)\n    if a < b then\n        return a\n    else\n        return b\n    end\nend\n\n-- Example usage\nlocal num1 = 10\nlocal num2 = 5\nlocal min = find_minimum(num1, num2)\nprint(min)  -- Output: 5",
            "gen_tc": "",
            "sim_score": "0.5334"
        },
        {
            "id": "283",
            "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
            "draft_plan": "# Convert the input integer to a string\n# Initialize a dictionary to store the frequency of each digit\n\n# Iterate through each digit in the string\n    # Increment the frequency of the digit in the dictionary\n\n# Iterate through each digit in the string\n    # Check if the frequency of the digit is greater than the digit itself\n        # If yes, return False\n\n# If all frequencies are less than or equal to their respective digits, return True",
            "requirements": "",
            "final_plan": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
            "code": "function check_frequency(num)\n    local str_num = tostring(num)\n    local freq_dict = {}\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        freq_dict[digit] = (freq_dict[digit] or 0) + 1\n    end\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        if freq_dict[digit] > tonumber(digit) then\n            return false\n        end\n    end\n\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.5241"
        },
        {
            "id": "89",
            "prompt": "Write a function to find the closest smaller number than n.",
            "draft_plan": "# Initialize a variable to store the closest smaller number\n# Iterate from n-1 to 1 in descending order\n    # Check if the current number is smaller than n\n        # If yes, update the closest smaller number and break the loop\n\n# Return the closest smaller number",
            "requirements": "",
            "final_plan": "def closest_num(N):\n  return (N - 1)",
            "code": "function findClosestSmallerNumber(n)\n    local closestSmaller = nil\n\n    for i = n-1, 1, -1 do\n        if i < n then\n            closestSmaller = i\n            break\n        end\n    end\n\n    return closestSmaller\nend",
            "gen_tc": "",
            "sim_score": "0.5145"
        },
        {
            "id": "63",
            "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.",
            "draft_plan": "# Initialize the maximum difference variable to 0\n\n# Iterate through each pair in the list\n    # Calculate the difference between the second element and the first element of the current pair\n    # Check if the current difference is greater than the maximum difference\n        # If it is, update the maximum difference\n\n# Return the maximum difference",
            "requirements": "",
            "final_plan": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ",
            "code": "function find_max_difference(tuple_list)\n    local max_difference = 0\n\n    for _, tuple in ipairs(tuple_list) do\n        local difference = tuple[2] - tuple[1]\n        if difference > max_difference then\n            max_difference = difference\n        end\n    end\n\n    return max_difference\nend",
            "gen_tc": "",
            "sim_score": "0.5068"
        },
        {
            "id": "436",
            "prompt": "Write a python function to return the negative numbers in a list.",
            "draft_plan": "# Initialize an empty list to store the negative numbers\n\n# Iterate through each element in the input list\n    # Check if the current element is less than 0\n        # If the element is negative, append it to the list of negative numbers\n\n# Return the list of negative numbers",
            "requirements": "",
            "final_plan": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ",
            "code": "function getNegativeNumbers(numbers)\n    local negativeNumbers = {}\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            table.insert(negativeNumbers, num)\n        end\n    end\n\n    return negativeNumbers\nend",
            "gen_tc": "",
            "sim_score": "0.4837"
        },
        {
            "id": "94",
            "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
            "draft_plan": "# Initialize the minimum second value as positive infinity\n# Initialize the first value of the tuple with minimum second value as None\n\n# Iterate through each tuple in the list\n    # Check if the second value of the current tuple is smaller than the current minimum second value\n        # If yes, update the minimum second value and the first value of the tuple\n\n# Return the first value of the tuple with the smallest second value",
            "requirements": "",
            "final_plan": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ",
            "code": "function get_first_smallest_value(test_list)\n    local min_second = math.huge\n    local first_value = nil\n    \n    for _, tup in ipairs(test_list) do\n        local second_value = tup[2]\n        \n        if second_value < min_second then\n            min_second = second_value\n            first_value = tup[1]\n        end\n    end\n    \n    return first_value\nend",
            "gen_tc": "",
            "sim_score": "0.4778"
        },
        {
            "id": "414",
            "prompt": "Write a python function to check whether any value in a sequence exists in a sequence or not.",
            "draft_plan": "# Iterate through each value in the first sequence\n    # Check if the value exists in the second sequence\n        # If the value exists, return True\n\n# If no matching value is found, return False",
            "requirements": "",
            "final_plan": "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False",
            "code": "function checkValueExistence(seq1, seq2)\n    for _, value1 in ipairs(seq1) do\n        for _, value2 in ipairs(seq2) do\n            if value1 == value2 then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4770"
        }
    ],
    "HumanEval/1": [
        {
            "id": "118",
            "prompt": "Write a function to convert a string to a list of strings split on the space character.",
            "draft_plan": "# Initialize an empty list to store the split strings\n\n# Split the input string on the space character and store the result in a variable\n\n# Iterate through each element in the split result\n    # Append the element to the list\n\n# Return the list of split strings",
            "requirements": "",
            "final_plan": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst",
            "code": "function split_string(str)\n    local split_result = {}\n    for word in string.gmatch(str, \"%S+\") do\n        table.insert(split_result, word)\n    end\n    return split_result\nend",
            "gen_tc": "",
            "sim_score": "0.5223"
        },
        {
            "id": "421",
            "prompt": "Write a function to concatenate each element of tuple by the delimiter.",
            "draft_plan": "# Initialize an empty string to store the concatenated elements\n\n# Iterate through each tuple in the input list\n    # Iterate through each element in the tuple\n        # Concatenate the element to the output string\n        # If the current element is not the last element in the tuple, append the delimiter\n\n# Return the concatenated string",
            "requirements": "",
            "final_plan": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ",
            "code": "function concatenate_tuple_elements(tuple_list, delimiter)\n    local concatenated_string = \"\"\n\n    for _, tuple in ipairs(tuple_list) do\n        for i, element in ipairs(tuple) do\n            concatenated_string = concatenated_string .. element\n            if i ~= #tuple then\n                concatenated_string = concatenated_string .. delimiter\n            end\n        end\n    end\n\n    return concatenated_string\nend",
            "gen_tc": "",
            "sim_score": "0.4762"
        },
        {
            "id": "424",
            "prompt": "Write a function to extract only the rear index element of each string in the given tuple.",
            "draft_plan": "# Create an empty list to store the rear index elements\n# Iterate through each string in the given tuple\n    # Get the rear index element of the current string using indexing\n    # Append the rear index element to the list\n\n# Return the list of rear index elements",
            "requirements": "",
            "final_plan": "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) ",
            "code": "function extract_rear_index_elements(tuple)\n    local rear_index_elements = {}\n\n    for _, str in ipairs(tuple) do\n        local rear_index_element = string.sub(str, -1)\n        table.insert(rear_index_elements, rear_index_element)\n    end\n\n    return rear_index_elements\nend",
            "gen_tc": "",
            "sim_score": "0.4325"
        },
        {
            "id": "450",
            "prompt": "Write a function to extract specified size of strings from a given list of string values.",
            "draft_plan": "# Initialize an empty list to store the extracted strings\n\n# Iterate through each string in the given list\n    # Check if the length of the current string is equal to the specified size\n        # If it matches, append the string to the result list\n\n# Return the list of extracted strings",
            "requirements": "",
            "final_plan": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result",
            "code": "function extract_strings(strings, size)\n    local extracted_strings = {}\n\n    for _, str in ipairs(strings) do\n        if string.len(str) == size then\n            table.insert(extracted_strings, str)\n        end\n    end\n\n    return extracted_strings\nend",
            "gen_tc": "",
            "sim_score": "0.4313"
        },
        {
            "id": "265",
            "prompt": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
            "draft_plan": "# Create an empty list to store the resulting lists\n\n# Iterate through the range from 0 to the length of the input list with step size n\n    # Append a sublist that starts from the current index and ends at the current index + n to the resulting list\n\n# Return the resulting list",
            "requirements": "",
            "final_plan": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]",
            "code": "function split_list(list, n)\n    local result = {}\n    for i = 1, #list, n do\n        local sublist = {}\n        for j = i, math.min(i + n - 1, #list) do\n            table.insert(sublist, list[j])\n        end\n        table.insert(result, sublist)\n    end\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4124"
        },
        {
            "id": "262",
            "prompt": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.",
            "draft_plan": "# Check if the given list has enough elements to split into two parts\n    # If not, return the original list as the first part and an empty list as the second part\n\n# Split the list into two parts at index L\n    # First part is from index 0 to index L-1\n    # Second part is from index L to the end of the list\n\n# Return the resulting lists as a tuple",
            "requirements": "",
            "final_plan": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]",
            "code": "function split_list(lst, L)\n    if #lst < L then\n        return lst, {}\n    end\n\n    local first_part = {}\n    local second_part = {}\n\n    for i = 1, #lst do\n        if i <= L then\n            table.insert(first_part, lst[i])\n        else\n            table.insert(second_part, lst[i])\n        end\n    end\n\n    return first_part, second_part\nend",
            "gen_tc": "",
            "sim_score": "0.4028"
        },
        {
            "id": "11",
            "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
            "draft_plan": "# Find the index of the first occurrence of the given character in the string\n# Find the index of the last occurrence of the given character in the string\n\n# If both indices are valid\n    # Remove the first occurrence of the character from the string\n    # Decrement the index of the last occurrence by 1 to account for the removal\n    # Remove the last occurrence of the character from the string\n\n# Return the modified string",
            "requirements": "",
            "final_plan": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ",
            "code": "function removeFirstAndLastOccurrence(str, char)\n    local firstIndex = string.find(str, char)\n    local lastIndex = string.find(str:reverse(), char)\n\n    if firstIndex and lastIndex then\n        str = string.sub(str, 1, firstIndex - 1) .. string.sub(str, firstIndex + 1)\n        lastIndex = string.len(str) - lastIndex + 1\n        str = string.sub(str, 1, lastIndex - 1) .. string.sub(str, lastIndex + 1)\n    end\n\n    return str\nend",
            "gen_tc": "",
            "sim_score": "0.4023"
        },
        {
            "id": "132",
            "prompt": "Write a function to convert a tuple to a string.",
            "draft_plan": "# Initialize an empty string\n\n# Iterate through each element in the tuple\n    # Convert the element to a string and append it to the result string\n    # Add a comma after each element except for the last element\n\n# Return the result string",
            "requirements": "",
            "final_plan": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str",
            "code": "function tupleToString(tuple)\n    local result = \"\"\n\n    for i, element in ipairs(tuple) do\n        result = result .. tostring(element)\n\n        if i < #tuple then\n            result = result .. \",\"\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.3987"
        },
        {
            "id": "478",
            "prompt": "Write a function to remove lowercase substrings from a given string.",
            "draft_plan": "# Initialize an empty string to store the final result\n\n# Iterate through each character in the given string\n    # Check if the character is uppercase\n        # If the character is uppercase, append it to the final result string\n\n# Return the final result string",
            "requirements": "",
            "final_plan": "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)",
            "code": "function removeLowercaseSubstrings(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        if string.upper(c) == c then\n            result = result .. c\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.3906"
        },
        {
            "id": "297",
            "prompt": "Write a function to flatten a given nested list structure.",
            "draft_plan": "# Initialize an empty list to store the flattened elements\n\n# Iterate through each element in the given list\n    # If the element is a list, recursively flatten it and append each element to the flattened list\n    # If the element is not a list, append it directly to the flattened list\n\n# Return the flattened list",
            "requirements": "",
            "final_plan": "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list ",
            "code": "function flatten(nested_list)\n    local flattened = {}\n\n    for _, element in ipairs(nested_list) do\n        if type(element) == \"table\" then\n            local nested_flattened = flatten(element)\n            for _, nested_element in ipairs(nested_flattened) do\n                table.insert(flattened, nested_element)\n            end\n        else\n            table.insert(flattened, element)\n        end\n    end\n\n    return flattened\nend",
            "gen_tc": "",
            "sim_score": "0.3889"
        }
    ],
    "HumanEval/2": [
        {
            "id": "292",
            "prompt": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
            "draft_plan": "To find the quotient of two numbers rounded down to the nearest integer, you can use the floor division operator `//` in Python.\n\nHere is the code logic:\n\n```python\ndef quotient(a, b):\n    return a // b\n```\n\nIn this code, the function `quotient` takes two parameters `a` and `b`, representing the numbers for which we want to find the quotient. The floor division `a // b` divides `a` by `b` and returns the quotient rounded down to the nearest integer.\n\nYou can call this function with your desired values to find the quotient. For example:\n\n```python\nresult = quotient(10, 3)\nprint(result)  # Output: 3\n```",
            "requirements": "",
            "final_plan": "def find(n,m):  \n    q = n//m \n    return (q)",
            "code": "function quotient(a, b)\n    return math.floor(a / b)\nend\n\n-- Example usage\nlocal result = quotient(10, 3)\nprint(result) -- Output: 3",
            "gen_tc": "",
            "sim_score": "0.5454"
        },
        {
            "id": "435",
            "prompt": "Write a python function to find the last digit of a given number.",
            "draft_plan": "To find the last digit of a given number, you can use the modulo operator (`%`) to get the remainder when dividing the number by 10. The remainder will be the last digit of the number.\n\nHere's the code logic:\n\n1. Define a function `find_last_digit` that takes a number as input.\n2. Inside the function, calculate the remainder of the number when divided by 10 using the modulo operator: `last_digit = number % 10`.\n3. Return the value of `last_digit`.\n\nHere's the code implementation in Python:\n\n```python\ndef find_last_digit(number):\n    last_digit = number % 10\n    return last_digit\n```\n\nYou can then call this function by passing a number as an argument to get the last digit. For example:\n\n```python\nprint(find_last_digit(12345))  # Output: 5\nprint(find_last_digit(987654321))  # Output: 1\nprint(find_last_digit(0))  # Output: 0\n```",
            "requirements": "",
            "final_plan": "def last_Digit(n) :\n    return (n % 10) ",
            "code": "function find_last_digit(number)\n    local last_digit = number % 10\n    return last_digit\nend\n\nprint(find_last_digit(12345))  -- Output: 5\nprint(find_last_digit(987654321))  -- Output: 1\nprint(find_last_digit(0))  -- Output: 0",
            "gen_tc": "",
            "sim_score": "0.4933"
        },
        {
            "id": "99",
            "prompt": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
            "draft_plan": "# Initialize an empty string to store the binary representation\n# Check if the input number is 0, if so return '0' as the binary representation\n# Iterate until the input number becomes 0\n    # Append the remainder of the input number divided by 2 to the binary representation string\n    # Update the input number by dividing it by 2, discarding the remainder\n\n# Reverse the binary representation string\n\n# Return the binary representation string",
            "requirements": "",
            "final_plan": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") ",
            "code": "function decimalToBinary(decimal)\n    local binary = \"\"\n\n    if decimal == 0 then\n        return \"0\"\n    end\n\n    while decimal > 0 do\n        binary = tostring(decimal % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n\n    return binary\nend",
            "gen_tc": "",
            "sim_score": "0.4861"
        },
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.4856"
        },
        {
            "id": "419",
            "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
            "draft_plan": "# Initialize a variable to store the total sum\n# Iterate through each number in the list\n    # Round the number to the nearest integer\n    # Add the rounded number to the total sum\n\n# Calculate the total sum multiplied by the length of the list\n# Print the result",
            "requirements": "",
            "final_plan": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum",
            "code": "function round_and_multiply(numbers)\n    local total_sum = 0\n\n    for _, num in ipairs(numbers) do\n        total_sum = total_sum + math.round(num)\n    end\n\n    local result = total_sum * #numbers\n    print(result)\nend\n\nfunction math.round(num)\n    return math.floor(num + 0.5)\nend",
            "gen_tc": "",
            "sim_score": "0.4746"
        },
        {
            "id": "479",
            "prompt": "Write a python function to find the first digit of a given number.",
            "draft_plan": "# Convert the given number to a string\n\n# Iterate through each character in the string\n    # Check if the character is a digit\n        # If it is, return the character as the first digit\n\n# If no digit is found, return \"None\"",
            "requirements": "",
            "final_plan": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ",
            "code": "function firstDigit(number)\n    local numberStr = tostring(number)\n\n    for i = 1, string.len(numberStr) do\n        local char = string.sub(numberStr, i, i)\n        if string.match(char, \"%d\") then\n            return char\n        end\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.4605"
        },
        {
            "id": "477",
            "prompt": "Write a python function to convert the given string to lower case.",
            "draft_plan": "# Convert the input string to lower case using the lower() method\n# Return the lower case string",
            "requirements": "",
            "final_plan": "def is_lower(string):\n  return (string.lower())",
            "code": "function convert_to_lower(str)\n    return string.lower(str)\nend",
            "gen_tc": "",
            "sim_score": "0.4185"
        },
        {
            "id": "404",
            "prompt": "Write a python function to find the minimum of two numbers.",
            "draft_plan": "# Define a function to find the minimum of two numbers\n    # Check if the first number is less than the second number\n        # If true, return the first number\n        # If false, return the second number\n\n# Call the function and pass two numbers as arguments",
            "requirements": "",
            "final_plan": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ",
            "code": "function find_minimum(a, b)\n    if a < b then\n        return a\n    else\n        return b\n    end\nend\n\n-- Example usage\nlocal num1 = 10\nlocal num2 = 5\nlocal min = find_minimum(num1, num2)\nprint(min)  -- Output: 5",
            "gen_tc": "",
            "sim_score": "0.4173"
        },
        {
            "id": "444",
            "prompt": "Write a function to trim each tuple by k in the given tuple list.",
            "draft_plan": "# Create an empty list to store the trimmed tuples\n\n# Iterate through each tuple in the given list\n    # Check if the length of the current tuple is greater than k\n        # If yes, trim the tuple by removing the first k elements\n        # Append the trimmed tuple to the new list\n\n# Return the new list containing the trimmed tuples",
            "requirements": "",
            "final_plan": "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) ",
            "code": "function trim_tuples(tuple_list, k)\n    local trimmed_list = {}\n\n    for _, tuple in ipairs(tuple_list) do\n        if #tuple > k then\n            local trimmed_tuple = {}\n            for i = k+1, #tuple do\n                table.insert(trimmed_tuple, tuple[i])\n            end\n            table.insert(trimmed_list, trimmed_tuple)\n        end\n    end\n\n    return trimmed_list\nend",
            "gen_tc": "",
            "sim_score": "0.4167"
        },
        {
            "id": "11",
            "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
            "draft_plan": "# Find the index of the first occurrence of the given character in the string\n# Find the index of the last occurrence of the given character in the string\n\n# If both indices are valid\n    # Remove the first occurrence of the character from the string\n    # Decrement the index of the last occurrence by 1 to account for the removal\n    # Remove the last occurrence of the character from the string\n\n# Return the modified string",
            "requirements": "",
            "final_plan": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ",
            "code": "function removeFirstAndLastOccurrence(str, char)\n    local firstIndex = string.find(str, char)\n    local lastIndex = string.find(str:reverse(), char)\n\n    if firstIndex and lastIndex then\n        str = string.sub(str, 1, firstIndex - 1) .. string.sub(str, firstIndex + 1)\n        lastIndex = string.len(str) - lastIndex + 1\n        str = string.sub(str, 1, lastIndex - 1) .. string.sub(str, lastIndex + 1)\n    end\n\n    return str\nend",
            "gen_tc": "",
            "sim_score": "0.4091"
        }
    ],
    "HumanEval/3": [
        {
            "id": "436",
            "prompt": "Write a python function to return the negative numbers in a list.",
            "draft_plan": "# Initialize an empty list to store the negative numbers\n\n# Iterate through each element in the input list\n    # Check if the current element is less than 0\n        # If the element is negative, append it to the list of negative numbers\n\n# Return the list of negative numbers",
            "requirements": "",
            "final_plan": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ",
            "code": "function getNegativeNumbers(numbers)\n    local negativeNumbers = {}\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            table.insert(negativeNumbers, num)\n        end\n    end\n\n    return negativeNumbers\nend",
            "gen_tc": "",
            "sim_score": "0.6140"
        },
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.5972"
        },
        {
            "id": "133",
            "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
            "draft_plan": "# Initialize the sum of negative numbers to 0\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If it is negative, add it to the sum\n\n# Return the sum of negative numbers",
            "requirements": "",
            "final_plan": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)",
            "code": "function sum_of_negative_numbers(numbers)\n    local sum = 0\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            sum = sum + num\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5596"
        },
        {
            "id": "56",
            "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
            "draft_plan": "# Convert the given number to a string and reverse it\n# Convert the reversed string back to an integer\n# Check if the given number is equal to twice the reversed number plus 1\n# If the condition is true, return True. Otherwise, return False.",
            "requirements": "",
            "final_plan": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
            "code": "function is_one_less_twice_reverse(number)\n    local reverse = tonumber(string.reverse(tostring(number)))\n    if number == (2 * reverse + 1) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5564"
        },
        {
            "id": "404",
            "prompt": "Write a python function to find the minimum of two numbers.",
            "draft_plan": "# Define a function to find the minimum of two numbers\n    # Check if the first number is less than the second number\n        # If true, return the first number\n        # If false, return the second number\n\n# Call the function and pass two numbers as arguments",
            "requirements": "",
            "final_plan": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ",
            "code": "function find_minimum(a, b)\n    if a < b then\n        return a\n    else\n        return b\n    end\nend\n\n-- Example usage\nlocal num1 = 10\nlocal num2 = 5\nlocal min = find_minimum(num1, num2)\nprint(min)  -- Output: 5",
            "gen_tc": "",
            "sim_score": "0.5478"
        },
        {
            "id": "58",
            "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
            "draft_plan": "# Check if the product of the two integers is negative\n    # If the product is negative, it means the two integers have opposite signs\n        # Return True\n\n# If the product is not negative, it means the two integers have the same sign\n    # Return False",
            "requirements": "",
            "final_plan": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ",
            "code": "function haveOppositeSigns(a, b)\n    if a * b < 0 then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5431"
        },
        {
            "id": "66",
            "prompt": "Write a python function to count the number of positive numbers in a list.",
            "draft_plan": "# Initialize a variable count to 0\n\n# Iterate through each number in the list\n    # Check if the number is greater than 0\n        # If it is, increment the count\n\n# Return the count",
            "requirements": "",
            "final_plan": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ",
            "code": "function count_positive_numbers(lst)\n    local count = 0\n\n    for _, num in ipairs(lst) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5248"
        },
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.5097"
        },
        {
            "id": "443",
            "prompt": "Write a python function to find the largest negative number from the given list.",
            "draft_plan": "# Initialize a variable 'largest_negative' to None\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If 'largest_negative' is None or the current number is greater than 'largest_negative', update 'largest_negative' to the current number\n\n# Return 'largest_negative'",
            "requirements": "",
            "final_plan": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
            "code": "function find_largest_negative(numbers)\n    local largest_negative = nil\n\n    for _, number in ipairs(numbers) do\n        if number < 0 then\n            if largest_negative == nil or number > largest_negative then\n                largest_negative = number\n            end\n        end\n    end\n\n    return largest_negative\nend",
            "gen_tc": "",
            "sim_score": "0.5067"
        },
        {
            "id": "452",
            "prompt": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.",
            "draft_plan": "# Define a function that takes the given amount as input\n    # Check if the given amount is less than the selling price\n        # If it is less, calculate the loss amount by subtracting the given amount from the selling price\n        # Return the loss amount\n    # If the given amount is not less than the selling price, return 0",
            "requirements": "",
            "final_plan": "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0",
            "code": "function calculate_loss(given_amount, selling_price)\n    if given_amount < selling_price then\n        local loss_amount = selling_price - given_amount\n        return loss_amount\n    else\n        return 0\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5044"
        }
    ],
    "HumanEval/4": [
        {
            "id": "145",
            "prompt": "Write a python function to find the maximum difference between any two elements in a given array.",
            "draft_plan": "# If the array is empty, return None\n# Initialize the maximum difference to zero\n\n# Iterate through each element in the array\n    # Iterate through each element after the current element\n        # Calculate the difference between the current element and the subsequent element\n        # Update the maximum difference if the calculated difference is greater than the current maximum difference\n\n# Return the maximum difference",
            "requirements": "",
            "final_plan": "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ",
            "code": "function max_difference(arr)\n    if #arr == 0 then\n        return nil\n    end\n\n    local max_diff = 0\n\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            local diff = math.abs(arr[i] - arr[j])\n            if diff > max_diff then\n                max_diff = diff\n            end\n        end\n    end\n\n    return max_diff\nend",
            "gen_tc": "",
            "sim_score": "0.4854"
        },
        {
            "id": "397",
            "prompt": "Write a function to find the median of three numbers.",
            "draft_plan": "# Sort the three numbers in ascending order\n\n# If the middle number is an integer, return it as the median\n# Otherwise, calculate the average of the two middle numbers and return it as the median",
            "requirements": "",
            "final_plan": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median",
            "code": "function findMedian(a, b, c)\n    local sorted = {a, b, c}\n    table.sort(sorted)\n\n    local middleIndex = math.floor(#sorted / 2)\n    \n    if #sorted % 2 == 0 then\n        local median = (sorted[middleIndex] + sorted[middleIndex + 1]) / 2\n        return median\n    else\n        return sorted[middleIndex + 1]\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4852"
        },
        {
            "id": "419",
            "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
            "draft_plan": "# Initialize a variable to store the total sum\n# Iterate through each number in the list\n    # Round the number to the nearest integer\n    # Add the rounded number to the total sum\n\n# Calculate the total sum multiplied by the length of the list\n# Print the result",
            "requirements": "",
            "final_plan": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum",
            "code": "function round_and_multiply(numbers)\n    local total_sum = 0\n\n    for _, num in ipairs(numbers) do\n        total_sum = total_sum + math.round(num)\n    end\n\n    local result = total_sum * #numbers\n    print(result)\nend\n\nfunction math.round(num)\n    return math.floor(num + 0.5)\nend",
            "gen_tc": "",
            "sim_score": "0.4408"
        },
        {
            "id": "120",
            "prompt": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.",
            "draft_plan": "# Initialize the maximum product to 0\n\n# Iterate through each pair of tuples in the given list\n    # Calculate the product of the absolute values of the numbers in the current pair\n    # If the calculated product is greater than the maximum product, update the maximum product\n\n# Return the maximum product",
            "requirements": "",
            "final_plan": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max",
            "code": "function maxAbsoluteProduct(list)\n    local maxProduct = 0\n\n    for _, pair in ipairs(list) do\n        local product = math.abs(pair[1]) * math.abs(pair[2])\n        if product > maxProduct then\n            maxProduct = product\n        end\n    end\n\n    return maxProduct\nend",
            "gen_tc": "",
            "sim_score": "0.4290"
        },
        {
            "id": "432",
            "prompt": "Write a function to find the median length of a trapezium.",
            "draft_plan": "# Define a function to calculate the median length of a trapezium\n    # Calculate the sum of the lengths of the two parallel sides of the trapezium\n    # Divide the sum by 2 to get the average length\n    # Return the average length as the median length of the trapezium",
            "requirements": "",
            "final_plan": "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median",
            "code": "function calculateMedianLength(base1, base2, height)\n    local medianLength = (base1 + base2) / 2\n    return medianLength\nend",
            "gen_tc": "",
            "sim_score": "0.4280"
        },
        {
            "id": "436",
            "prompt": "Write a python function to return the negative numbers in a list.",
            "draft_plan": "# Initialize an empty list to store the negative numbers\n\n# Iterate through each element in the input list\n    # Check if the current element is less than 0\n        # If the element is negative, append it to the list of negative numbers\n\n# Return the list of negative numbers",
            "requirements": "",
            "final_plan": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ",
            "code": "function getNegativeNumbers(numbers)\n    local negativeNumbers = {}\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            table.insert(negativeNumbers, num)\n        end\n    end\n\n    return negativeNumbers\nend",
            "gen_tc": "",
            "sim_score": "0.4165"
        },
        {
            "id": "443",
            "prompt": "Write a python function to find the largest negative number from the given list.",
            "draft_plan": "# Initialize a variable 'largest_negative' to None\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If 'largest_negative' is None or the current number is greater than 'largest_negative', update 'largest_negative' to the current number\n\n# Return 'largest_negative'",
            "requirements": "",
            "final_plan": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
            "code": "function find_largest_negative(numbers)\n    local largest_negative = nil\n\n    for _, number in ipairs(numbers) do\n        if number < 0 then\n            if largest_negative == nil or number > largest_negative then\n                largest_negative = number\n            end\n        end\n    end\n\n    return largest_negative\nend",
            "gen_tc": "",
            "sim_score": "0.4080"
        },
        {
            "id": "261",
            "prompt": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
            "draft_plan": "# Create an empty list to store the result of the division operation\n\n# Iterate through the elements of the tuples\n    # Perform the division operation on the corresponding elements of the tuples\n    # Append the result to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
            "code": "function tuple_division(t1, t2)\n    local result = {}\n\n    for i = 1, #t1 do\n        local div = t1[i] / t2[i]\n        table.insert(result, div)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4028"
        },
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.3949"
        },
        {
            "id": "410",
            "prompt": "Write a function to find the minimum value in a given heterogeneous list.",
            "draft_plan": "# Initialize the minimum value to the first element in the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the minimum value\n        # If it is, update the minimum value\n\n# Return the minimum value",
            "requirements": "",
            "final_plan": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val",
            "code": "function find_minimum_value(lst)\n    local min_value = lst[1]\n    \n    for i = 2, #lst do\n        if lst[i] < min_value then\n            min_value = lst[i]\n        end\n    end\n    \n    return min_value\nend",
            "gen_tc": "",
            "sim_score": "0.3919"
        }
    ],
    "HumanEval/5": [
        {
            "id": "472",
            "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.",
            "draft_plan": "# Sort the input list in ascending order\n\n# Iterate through each number in the sorted list, starting from the second number\n    # Check if the current number is consecutive to the previous number\n        # If not, return False\n\n# If all numbers are consecutive, return True",
            "requirements": "",
            "final_plan": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ",
            "code": "function checkConsecutive(lst)\n    table.sort(lst)\n    \n    for i = 2, #lst do\n        if lst[i] ~= lst[i-1] + 1 then\n            return false\n        end\n    end\n    \n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.5881"
        },
        {
            "id": "273",
            "prompt": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
            "draft_plan": "# Define a function that takes in two tuples as arguments\n    # Create an empty list to store the result of the subtraction\n\n    # Iterate through the indices of the tuples\n        # Subtract the element at the current index of the first tuple from the element at the current index of the second tuple\n        # Append the result to the list\n\n    # Return the resulting list",
            "requirements": "",
            "final_plan": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) ",
            "code": "function subtract_tuples(tuple1, tuple2)\n    local result = {}\n\n    for i = 1, #tuple1 do\n        local subtracted_value = tuple1[i] - tuple2[i]\n        table.insert(result, subtracted_value)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4767"
        },
        {
            "id": "265",
            "prompt": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
            "draft_plan": "# Create an empty list to store the resulting lists\n\n# Iterate through the range from 0 to the length of the input list with step size n\n    # Append a sublist that starts from the current index and ends at the current index + n to the resulting list\n\n# Return the resulting list",
            "requirements": "",
            "final_plan": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]",
            "code": "function split_list(list, n)\n    local result = {}\n    for i = 1, #list, n do\n        local sublist = {}\n        for j = i, math.min(i + n - 1, #list) do\n            table.insert(sublist, list[j])\n        end\n        table.insert(result, sublist)\n    end\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4717"
        },
        {
            "id": "251",
            "prompt": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.",
            "draft_plan": "# Initialize an empty list to store the modified elements\n# Iterate through each element in the original list\n    # Add the given element to the modified list\n    # Add the current element from the original list to the modified list\n\n# Return the modified list",
            "requirements": "",
            "final_plan": "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list",
            "code": "function insert_before_each(lst, element)\n    local modified_lst = {}\n\n    for _, item in ipairs(lst) do\n        table.insert(modified_lst, element)\n        table.insert(modified_lst, item)\n    end\n\n    return modified_lst\nend",
            "gen_tc": "",
            "sim_score": "0.4712"
        },
        {
            "id": "240",
            "prompt": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
            "draft_plan": "# Define a function that takes two lists as input\ndef replace_last_element(list1, list2):\n    # Replace the last element of list1 with the elements of list2\n    list1[-1:] = list2\n    # Return the modified list1\n    return list1",
            "requirements": "",
            "final_plan": "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n",
            "code": "function replaceLastElement(list1, list2)\n    -- Replace the last element of list1 with the elements of list2\n    for _, element in ipairs(list2) do\n        table.insert(list1, #list1, element)\n    end\n    -- Return the modified list1\n    return list1\nend",
            "gen_tc": "",
            "sim_score": "0.4664"
        },
        {
            "id": "92",
            "prompt": "Write a function to check whether the given number is undulating or not.",
            "draft_plan": "To check whether a given number is undulating or not, we can follow these steps:\n\n1. Convert the given number into a string.\n2. Check if the length of the string is less than or equal to 2. If it is, return False since a number with length less than or equal to 2 cannot be undulating.\n3. Iterate through each digit in the string starting from the second digit.\n    - Check if the current digit is equal to the previous digit. If it is, return False since an undulating number cannot have consecutive same digits.\n    - Check if the current digit is greater than the previous digit. If it is, check if the previous digit is greater than the digit before it. If it is not, return False since an undulating number should have a decreasing trend after an increasing trend.\n    - Check if the current digit is less than the previous digit. If it is, check if the previous digit is less than the digit before it. If it is not, return False since an undulating number should have an increasing trend after a decreasing trend.\n4. If all the checks pass, return True since the number is undulating.\n\nHere is the code implementation of the logic:\n\n```python\ndef is_undulating_number(num):\n    num_str = str(num)\n    if len(num_str) <= 2:\n        return False\n    for i in range(1, len(num_str)):\n        if num_str[i] == num_str[i-1]:\n            return False\n        if num_str[i] > num_str[i-1] and num_str[i-1] <= num_str[i-2]:\n            return False\n        if num_str[i] < num_str[i-1] and num_str[i-1] >= num_str[i-2]:\n            return False\n    return True\n```\n\nYou can use the above function to check if a given number is undulating or not by passing the number as an argument to the function `is_undulating_number()`. The function will return `True` if the number is undulating, and `False` otherwise.",
            "requirements": "",
            "final_plan": "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True",
            "code": "function is_undulating_number(num)\n    local num_str = tostring(num)\n    if #num_str <= 2 then\n        return false\n    end\n    for i = 2, #num_str do\n        if num_str:sub(i, i) == num_str:sub(i-1, i-1) then\n            return false\n        end\n        if num_str:sub(i, i) > num_str:sub(i-1, i-1) and num_str:sub(i-1, i-1) <= num_str:sub(i-2, i-2) then\n            return false\n        end\n        if num_str:sub(i, i) < num_str:sub(i-1, i-1) and num_str:sub(i-1, i-1) >= num_str:sub(i-2, i-2) then\n            return false\n        end\n    end\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.4557"
        },
        {
            "id": "421",
            "prompt": "Write a function to concatenate each element of tuple by the delimiter.",
            "draft_plan": "# Initialize an empty string to store the concatenated elements\n\n# Iterate through each tuple in the input list\n    # Iterate through each element in the tuple\n        # Concatenate the element to the output string\n        # If the current element is not the last element in the tuple, append the delimiter\n\n# Return the concatenated string",
            "requirements": "",
            "final_plan": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ",
            "code": "function concatenate_tuple_elements(tuple_list, delimiter)\n    local concatenated_string = \"\"\n\n    for _, tuple in ipairs(tuple_list) do\n        for i, element in ipairs(tuple) do\n            concatenated_string = concatenated_string .. element\n            if i ~= #tuple then\n                concatenated_string = concatenated_string .. delimiter\n            end\n        end\n    end\n\n    return concatenated_string\nend",
            "gen_tc": "",
            "sim_score": "0.4537"
        },
        {
            "id": "283",
            "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
            "draft_plan": "# Convert the input integer to a string\n# Initialize a dictionary to store the frequency of each digit\n\n# Iterate through each digit in the string\n    # Increment the frequency of the digit in the dictionary\n\n# Iterate through each digit in the string\n    # Check if the frequency of the digit is greater than the digit itself\n        # If yes, return False\n\n# If all frequencies are less than or equal to their respective digits, return True",
            "requirements": "",
            "final_plan": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
            "code": "function check_frequency(num)\n    local str_num = tostring(num)\n    local freq_dict = {}\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        freq_dict[digit] = (freq_dict[digit] or 0) + 1\n    end\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        if freq_dict[digit] > tonumber(digit) then\n            return false\n        end\n    end\n\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.4531"
        },
        {
            "id": "462",
            "prompt": "Write a function to find all possible combinations of the elements of a given list.",
            "draft_plan": "# Import the combinations function from the itertools module\n\n# Define the function to find all possible combinations\n    # Initialize an empty list to store the combinations\n    \n    # Use a for loop to iterate through different combination lengths\n        # Generate all combinations of the given list for the current combination length\n        # Append the combinations to the result list\n    \n    # Return the list of all possible combinations",
            "requirements": "",
            "final_plan": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result",
            "code": "Sorry, I can't generate Lua code at the moment. However, here's the Python code to find all possible combinations of elements in a given list using the `combinations` function from the `itertools` module:\n\n```python\nfrom itertools import combinations\n\ndef find_combinations(input_list):\n    result = []\n    n = len(input_list)\n\n    for r in range(1, n + 1):\n        combinations_list = list(combinations(input_list, r))\n        result.extend(combinations_list)\n\n    return result\n```\n\nYou can call this function by passing the input list as an argument, and it will return a list containing all possible combinations of the elements.",
            "gen_tc": "",
            "sim_score": "0.4508"
        },
        {
            "id": "106",
            "prompt": "Write a function to append the given list to the given tuples.",
            "draft_plan": "# Create an empty list to store the modified tuples\n\n# Iterate through each tuple in the given list\n    # Convert the tuple to a list\n    # Append the given list to the current tuple\n    # Convert the modified tuple back to a tuple\n    # Append the modified tuple to the list of modified tuples\n\n# Return the list of modified tuples",
            "requirements": "",
            "final_plan": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) ",
            "code": "def append_list_to_tuples(given_list, tuples):\n    \"\"\"Function to append the given list to the given tuples.\n    \"\"\"\n    modified_tuples = []\n\n    for tup in tuples:\n        modified_tuple = list(tup)\n        modified_tuple.extend(given_list)\n        modified_tuples.append(tuple(modified_tuple))\n\n    return modified_tuples",
            "gen_tc": "",
            "sim_score": "0.4479"
        }
    ],
    "HumanEval/6": [
        {
            "id": "297",
            "prompt": "Write a function to flatten a given nested list structure.",
            "draft_plan": "# Initialize an empty list to store the flattened elements\n\n# Iterate through each element in the given list\n    # If the element is a list, recursively flatten it and append each element to the flattened list\n    # If the element is not a list, append it directly to the flattened list\n\n# Return the flattened list",
            "requirements": "",
            "final_plan": "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list ",
            "code": "function flatten(nested_list)\n    local flattened = {}\n\n    for _, element in ipairs(nested_list) do\n        if type(element) == \"table\" then\n            local nested_flattened = flatten(element)\n            for _, nested_element in ipairs(nested_flattened) do\n                table.insert(flattened, nested_element)\n            end\n        else\n            table.insert(flattened, element)\n        end\n    end\n\n    return flattened\nend",
            "gen_tc": "",
            "sim_score": "0.4671"
        },
        {
            "id": "421",
            "prompt": "Write a function to concatenate each element of tuple by the delimiter.",
            "draft_plan": "# Initialize an empty string to store the concatenated elements\n\n# Iterate through each tuple in the input list\n    # Iterate through each element in the tuple\n        # Concatenate the element to the output string\n        # If the current element is not the last element in the tuple, append the delimiter\n\n# Return the concatenated string",
            "requirements": "",
            "final_plan": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ",
            "code": "function concatenate_tuple_elements(tuple_list, delimiter)\n    local concatenated_string = \"\"\n\n    for _, tuple in ipairs(tuple_list) do\n        for i, element in ipairs(tuple) do\n            concatenated_string = concatenated_string .. element\n            if i ~= #tuple then\n                concatenated_string = concatenated_string .. delimiter\n            end\n        end\n    end\n\n    return concatenated_string\nend",
            "gen_tc": "",
            "sim_score": "0.4489"
        },
        {
            "id": "391",
            "prompt": "Write a function to convert more than one list to nested dictionary.",
            "draft_plan": "# Initialize an empty dictionary\n\n# Iterate through each list in the input lists\n    # Get the first element of the list as the key for the nested dictionary\n    # Get the remaining elements of the list as the values for the nested dictionary\n    # Create a nested dictionary using the key and values\n\n# Return the nested dictionary",
            "requirements": "",
            "final_plan": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result",
            "code": "function convert_lists_to_nested_dict(lists)\n    local nested_dict = {}\n\n    for _, list in ipairs(lists) do\n        local key = list[1]\n        local values = {}\n        \n        for i = 2, #list do\n            values[i-1] = list[i]\n        end\n\n        nested_dict[key] = values\n    end\n\n    return nested_dict\nend",
            "gen_tc": "",
            "sim_score": "0.4256"
        },
        {
            "id": "461",
            "prompt": "Write a python function to count the upper case characters in a given string.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of uppercase characters\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter variable\n\n# Return the counter variable, which represents the number of uppercase characters in the string",
            "requirements": "",
            "final_plan": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
            "code": "function count_uppercase_chars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= 'A' and char <= 'Z' then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4126"
        },
        {
            "id": "118",
            "prompt": "Write a function to convert a string to a list of strings split on the space character.",
            "draft_plan": "# Initialize an empty list to store the split strings\n\n# Split the input string on the space character and store the result in a variable\n\n# Iterate through each element in the split result\n    # Append the element to the list\n\n# Return the list of split strings",
            "requirements": "",
            "final_plan": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst",
            "code": "function split_string(str)\n    local split_result = {}\n    for word in string.gmatch(str, \"%S+\") do\n        table.insert(split_result, word)\n    end\n    return split_result\nend",
            "gen_tc": "",
            "sim_score": "0.4077"
        },
        {
            "id": "132",
            "prompt": "Write a function to convert a tuple to a string.",
            "draft_plan": "# Initialize an empty string\n\n# Iterate through each element in the tuple\n    # Convert the element to a string and append it to the result string\n    # Add a comma after each element except for the last element\n\n# Return the result string",
            "requirements": "",
            "final_plan": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str",
            "code": "function tupleToString(tuple)\n    local result = \"\"\n\n    for i, element in ipairs(tuple) do\n        result = result .. tostring(element)\n\n        if i < #tuple then\n            result = result .. \",\"\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.3995"
        },
        {
            "id": "459",
            "prompt": "Write a function to remove uppercase substrings from a given string.",
            "draft_plan": "# Initialize an empty string to store the result\n\n# Iterate through each character in the input string\n    # Check if the current character is lowercase\n        # If it is lowercase, append it to the result string\n\n# Return the result string",
            "requirements": "",
            "final_plan": "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)",
            "code": "function removeUppercaseSubstrings(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= \"a\" and char <= \"z\" then\n            result = result .. char\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.3973"
        },
        {
            "id": "478",
            "prompt": "Write a function to remove lowercase substrings from a given string.",
            "draft_plan": "# Initialize an empty string to store the final result\n\n# Iterate through each character in the given string\n    # Check if the character is uppercase\n        # If the character is uppercase, append it to the final result string\n\n# Return the final result string",
            "requirements": "",
            "final_plan": "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)",
            "code": "function removeLowercaseSubstrings(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        if string.upper(c) == c then\n            result = result .. c\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.3952"
        },
        {
            "id": "301",
            "prompt": "Write a function to find the depth of a dictionary.",
            "draft_plan": "# Initialize the depth to 1\n\n# Iterate through each key-value pair in the dictionary\n    # Check if the value is a dictionary\n        # If it is, recursively find the depth of the nested dictionary and increment it by 1\n\n# Return the maximum depth",
            "requirements": "",
            "final_plan": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0",
            "code": "function find_depth(dict)\n    local max_depth = 1\n    \n    for key, value in pairs(dict) do\n        if type(value) == \"table\" then\n            local nested_depth = find_depth(value) + 1\n            if nested_depth > max_depth then\n                max_depth = nested_depth\n            end\n        end\n    end\n    \n    return max_depth\nend",
            "gen_tc": "",
            "sim_score": "0.3805"
        },
        {
            "id": "111",
            "prompt": "Write a function to find the common elements in given nested lists.",
            "draft_plan": "# Initialize a set to store the common elements\n\n# Iterate through each sublist in the nested list\n    # If it's the first sublist, add all elements to the set\n    # For subsequent sublists, update the set with the intersection of the current set and the sublist\n    \n# Return the set containing the common elements",
            "requirements": "",
            "final_plan": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result",
            "code": "function find_common_elements(nested_list)\n    local common_elements = {}\n\n    for i, sublist in ipairs(nested_list) do\n        if i == 1 then\n            for _, element in ipairs(sublist) do\n                common_elements[element] = true\n            end\n        else\n            local current_set = {}\n\n            for _, element in ipairs(sublist) do\n                current_set[element] = true\n            end\n\n            for element, _ in pairs(common_elements) do\n                if not current_set[element] then\n                    common_elements[element] = nil\n                end\n            end\n        end\n    end\n\n    return common_elements\nend",
            "gen_tc": "",
            "sim_score": "0.3783"
        }
    ],
    "HumanEval/7": [
        {
            "id": "91",
            "prompt": "Write a function to check if a string is present as a substring in a given list of string values.",
            "draft_plan": "# Iterate through each string in the list\n    # Check if the given substring is present in the current string\n        # If found, return True\n\n# If the substring is not found in any string, return False",
            "requirements": "",
            "final_plan": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False",
            "code": "function isSubstringPresent(substring, stringList)\n    for _, str in ipairs(stringList) do\n        if string.find(str, substring) then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.6681"
        },
        {
            "id": "104",
            "prompt": "Write a function to sort each sublist of strings in a given list of lists.",
            "draft_plan": "# Iterate through each sublist in the given list\n    # Sort the sublist using the sorted() function and assign the sorted sublist back to the original sublist\n\n# Return the modified list with sorted sublists",
            "requirements": "",
            "final_plan": "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n",
            "code": "function sort_sublists(list_of_lists)\n    for i = 1, #list_of_lists do\n        list_of_lists[i] = table.sort(list_of_lists[i])\n    end\n    return list_of_lists\nend",
            "gen_tc": "",
            "sim_score": "0.5603"
        },
        {
            "id": "69",
            "prompt": "Write a function to check whether a list contains the given sublist or not.",
            "draft_plan": "# Iterate through each index in the main list\n    # Check if the current index and the sublist length is less than or equal to the main list length\n        # Check if the sublist matches the elements starting from the current index in the main list\n\n# If the sublist is found, return True\n# Otherwise, return False",
            "requirements": "",
            "final_plan": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set",
            "code": "function contains_sublist(main_list, sublist)\n    for i = 1, #main_list do\n        if (i + #sublist - 1) <= #main_list then\n            local match = true\n            for j = 1, #sublist do\n                if main_list[i + j - 1] ~= sublist[j] then\n                    match = false\n                    break\n                end\n            end\n            if match then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5572"
        },
        {
            "id": "238",
            "prompt": "Write a python function to count the number of non-empty substrings of a given string.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each character and its index in the input string\n    # Iterate through each substring starting from the current character\n        # Increment the counter variable by 1 for each non-empty substring\n\n# Return the counter variable",
            "requirements": "",
            "final_plan": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ",
            "code": "function count_substrings(str)\n    local count = 0\n    for i = 1, #str do\n        for j = i, #str do\n            local substring = string.sub(str, i, j)\n            if substring ~= \"\" then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5398"
        },
        {
            "id": "460",
            "prompt": "Write a python function to get the first element of each sublist.",
            "draft_plan": "# Create an empty list to store the first elements of each sublist\n\n# Iterate through each sublist in the input list\n    # Append the first element of the current sublist to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def Extract(lst): \n    return [item[0] for item in lst] ",
            "code": "function get_first_elements(sublists)\n    local first_elements = {}\n\n    for _, sublist in ipairs(sublists) do\n        table.insert(first_elements, sublist[1])\n    end\n\n    return first_elements\nend",
            "gen_tc": "",
            "sim_score": "0.5109"
        },
        {
            "id": "478",
            "prompt": "Write a function to remove lowercase substrings from a given string.",
            "draft_plan": "# Initialize an empty string to store the final result\n\n# Iterate through each character in the given string\n    # Check if the character is uppercase\n        # If the character is uppercase, append it to the final result string\n\n# Return the final result string",
            "requirements": "",
            "final_plan": "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)",
            "code": "function removeLowercaseSubstrings(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        if string.upper(c) == c then\n            result = result .. c\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5032"
        },
        {
            "id": "61",
            "prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of substrings\n\n# Iterate through each starting index of the substring\n    # Iterate through each ending index of the substring\n        # Get the substring from the starting index to the ending index\n        # Compute the sum of the digits in the substring\n        # Check if the sum of the digits is equal to the length of the substring\n            # If true, increment the counter variable\n\n# Return the counter variable with the total number of substrings",
            "requirements": "",
            "final_plan": "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count",
            "code": "function count_substrings(string)\n    local count = 0\n\n    for i = 1, string.len(string) do\n        for j = i, string.len(string) do\n            local substring = string.sub(string, i, j)\n            local sum = compute_sum(substring)\n            \n            if sum == string.len(substring) then\n                count = count + 1\n            end\n        end\n    end\n\n    return count\nend\n\nfunction compute_sum(substring)\n    local sum = 0\n\n    for i = 1, string.len(substring) do\n        local digit = tonumber(string.sub(substring, i, i))\n        sum = sum + digit\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4845"
        },
        {
            "id": "459",
            "prompt": "Write a function to remove uppercase substrings from a given string.",
            "draft_plan": "# Initialize an empty string to store the result\n\n# Iterate through each character in the input string\n    # Check if the current character is lowercase\n        # If it is lowercase, append it to the result string\n\n# Return the result string",
            "requirements": "",
            "final_plan": "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)",
            "code": "function removeUppercaseSubstrings(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= \"a\" and char <= \"z\" then\n            result = result .. char\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4833"
        },
        {
            "id": "434",
            "prompt": "Write a function that matches a string that has an a followed by one or more b's.",
            "draft_plan": "import re\n\ndef match_string(string):\n    pattern = r'a+b+'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n",
            "code": "function match_string(str)\n    local pattern = \"a+b+\"\n    if string.match(str, pattern) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4790"
        },
        {
            "id": "454",
            "prompt": "Write a function that matches a word containing 'z'.",
            "draft_plan": "# Iterate through each word in the given list\n    # Check if the character 'z' is present in the word\n        # If 'z' is found, add the word to a new list\n\n# Return the new list containing words with 'z'",
            "requirements": "",
            "final_plan": "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function match_word_with_z(word_list)\n    local z_words = {}\n\n    for _, word in ipairs(word_list) do\n        if string.find(word, 'z') ~= nil then\n            table.insert(z_words, word)\n        end\n    end\n\n    return z_words\nend",
            "gen_tc": "",
            "sim_score": "0.4783"
        }
    ],
    "HumanEval/8": [
        {
            "id": "445",
            "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
            "draft_plan": "# Create an empty list to store the result of multiplication\n\n# Iterate through the indexes of the tuples using the range of the length of the tuples\n    # Multiply the elements at the current index of both tuples\n    # Append the result to the list\n\n# Return the list",
            "requirements": "",
            "final_plan": "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
            "code": "function multiply_tuples(tuple1, tuple2)\n    local result = {}\n\n    for i = 1, #tuple1 do\n        local multiplication = tuple1[i] * tuple2[i]\n        table.insert(result, multiplication)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.6341"
        },
        {
            "id": "409",
            "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.",
            "draft_plan": "# Initialize the minimum product to positive infinity\n\n# Iterate through each pair of tuples in the list\n    # Calculate the product of the two tuples\n    # Check if the product is less than the current minimum product\n        # If yes, update the minimum product\n\n# Return the minimum product",
            "requirements": "",
            "final_plan": "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min",
            "code": "function find_minimum_product(list)\n    local min_product = math.huge\n\n    for i = 1, #list-1 do\n        local tuple1 = list[i]\n        for j = i+1, #list do\n            local tuple2 = list[j]\n            local product = calculate_product(tuple1, tuple2)\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n\n    return min_product\nend\n\nfunction calculate_product(tuple1, tuple2)\n    local product = 1\n    for _, num in ipairs(tuple1) do\n        product = product * num\n    end\n    for _, num in ipairs(tuple2) do\n        product = product * num\n    end\n    return product\nend",
            "gen_tc": "",
            "sim_score": "0.6269"
        },
        {
            "id": "98",
            "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
            "draft_plan": "# Initialize the product variable to 1\n\n# Iterate through each number in the list\n    # Multiply the product by the current number\n\n# Divide the product by the length of the list\n\n# Return the result",
            "requirements": "",
            "final_plan": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ",
            "code": "function multiply_and_divide(numbers)\n    local product = 1\n\n    for _, num in ipairs(numbers) do\n        product = product * num\n    end\n\n    local result = product / #numbers\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.6213"
        },
        {
            "id": "398",
            "prompt": "Write a function to compute the sum of digits of each number of a given list.",
            "draft_plan": "# Initialize an empty list to store the sum of digits for each number\n\n# Iterate through each number in the given list\n    # Convert the number to a string\n    # Initialize a variable to store the sum of digits\n    # Iterate through each digit in the string representation of the number\n        # Convert the digit back to an integer and add it to the sum of digits\n    # Append the sum of digits to the list\n\n# Return the list of sum of digits for each number",
            "requirements": "",
            "final_plan": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
            "code": "function compute_sum_of_digits(numbers)\n    local sum_of_digits = {}\n\n    for _, num in ipairs(numbers) do\n        local num_str = tostring(num)\n        local digits_sum = 0\n\n        for i = 1, string.len(num_str) do\n            digits_sum = digits_sum + tonumber(string.sub(num_str, i, i))\n        end\n\n        table.insert(sum_of_digits, digits_sum)\n    end\n\n    return sum_of_digits\nend",
            "gen_tc": "",
            "sim_score": "0.5998"
        },
        {
            "id": "116",
            "prompt": "Write a function to convert a given tuple of positive integers into a single integer.",
            "draft_plan": "# Initialize an empty string to store the converted integer\n\n# Iterate through each element in the tuple\n    # Convert each element to a string and concatenate it to the existing string\n\n# Convert the string to an integer and return it",
            "requirements": "",
            "final_plan": "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result",
            "code": "function convert_tuple_to_integer(tuple)\n    local str = \"\"\n    for _, num in ipairs(tuple) do\n        str = str .. tostring(num)\n    end\n    return tonumber(str)\nend",
            "gen_tc": "",
            "sim_score": "0.5850"
        },
        {
            "id": "126",
            "prompt": "Write a python function to find the sum of common divisors of two given numbers.",
            "draft_plan": "# Find the common divisors of the two given numbers\n    # Find the smaller number among the two\n    # Initialize an empty list to store the common divisors\n    # Iterate from 1 to the smaller number\n        # Check if the current number is a divisor of both given numbers\n            # If yes, add it to the list of common divisors\n\n# Find the sum of the common divisors\n    # Initialize a variable to store the sum\n    # Iterate through the list of common divisors\n        # Add each divisor to the sum\n\n# Return the sum of the common divisors",
            "requirements": "",
            "final_plan": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum",
            "code": "function sumCommonDivisors(a, b)\n    local smaller = math.min(a, b)\n    local divisors = {}\n\n    for i = 1, smaller do\n        if a % i == 0 and b % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n\n    local sum = 0\n    for _, divisor in ipairs(divisors) do\n        sum = sum + divisor\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5836"
        },
        {
            "id": "65",
            "prompt": "Write a function to flatten a list and sum all of its elements.",
            "draft_plan": "# Initialize a variable to store the sum of all elements\n\n# Iterate through each element in the list\n    # Check if the current element is a list\n        # If it is a list, recursively call the flatten_and_sum function on the current element and add the result to the sum\n    # If it is not a list, add the current element to the sum\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total",
            "code": "function flatten_and_sum(lst)\n    local sum = 0\n\n    for _, element in ipairs(lst) do\n        if type(element) == \"table\" then\n            sum = sum + flatten_and_sum(element)\n        else\n            sum = sum + element\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5834"
        },
        {
            "id": "401",
            "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
            "draft_plan": "# Create an empty result tuple\n\n# Iterate through the nested tuples, getting each inner tuple\n    # Iterate through the inner tuples, getting each element and its index\n        # Check if the index is within the range of the result tuple\n            # If it is, add the element at the corresponding index to the current element\n            # Create a new tuple with the updated element and append it to the result tuple\n        # If the index is not within the range of the result tuple\n            # Create a new tuple with only the current element and append it to the result tuple\n\n# Return the result tuple",
            "requirements": "",
            "final_plan": "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
            "code": "function add_tuples(t1, t2)\n    local result = {}\n\n    for i, inner_tuple in ipairs(t1) do\n        local new_tuple = {}\n\n        for j, element in ipairs(inner_tuple) do\n            if j <= #result then\n                new_tuple[j] = element + result[j]\n            else\n                new_tuple[j] = element\n            end\n        end\n\n        table.insert(result, new_tuple)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5789"
        },
        {
            "id": "257",
            "prompt": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.",
            "draft_plan": "# Define the function that takes in two numbers as input\n    # Create a tuple with the second number followed by the first number\n    # Return the tuple\n\n# Call the function with the desired numbers and store the returned tuple",
            "requirements": "",
            "final_plan": "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)",
            "code": "function swap_numbers(num1, num2)\n    return num2, num1\nend\n\nlocal result = swap_numbers(3, 5)\nprint(result)  -- Output: 5   3",
            "gen_tc": "",
            "sim_score": "0.5747"
        },
        {
            "id": "261",
            "prompt": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
            "draft_plan": "# Create an empty list to store the result of the division operation\n\n# Iterate through the elements of the tuples\n    # Perform the division operation on the corresponding elements of the tuples\n    # Append the result to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
            "code": "function tuple_division(t1, t2)\n    local result = {}\n\n    for i = 1, #t1 do\n        local div = t1[i] / t2[i]\n        table.insert(result, div)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5738"
        }
    ],
    "HumanEval/9": [
        {
            "id": "299",
            "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.",
            "draft_plan": "# Sort the list of tuples in descending order based on the second element\n\n# Initialize the maximum aggregate to 0\n\n# Iterate through each tuple in the sorted list\n    # Calculate the current aggregate by adding the second element of the tuple to the maximum aggregate\n    # Update the maximum aggregate if the current aggregate is greater\n\n# Return the maximum aggregate",
            "requirements": "",
            "final_plan": "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])",
            "code": "function calculate_maximum_aggregate(tuples)\n    table.sort(tuples, function(a, b)\n        return a[2] > b[2]\n    end)\n\n    local maximum_aggregate = 0\n\n    for _, tuple in ipairs(tuples) do\n        local current_aggregate = maximum_aggregate + tuple[2]\n        if current_aggregate > maximum_aggregate then\n            maximum_aggregate = current_aggregate\n        end\n    end\n\n    return maximum_aggregate\nend",
            "gen_tc": "",
            "sim_score": "0.6302"
        },
        {
            "id": "294",
            "prompt": "Write a function to find the maximum value in a given heterogeneous list.",
            "draft_plan": "# Initialize the maximum value with the first element in the list\n\n# Iterate through each element in the list starting from the second element\n    # Compare the current element with the maximum value\n        # If the current element is greater than the maximum value, update the maximum value\n\n# Return the maximum value",
            "requirements": "",
            "final_plan": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)",
            "code": "function find_max_value(heterogeneous_list)\n    local max_value = heterogeneous_list[1]\n\n    for i = 2, #heterogeneous_list do\n        if heterogeneous_list[i] > max_value then\n            max_value = heterogeneous_list[i]\n        end\n    end\n\n    return max_value\nend",
            "gen_tc": "",
            "sim_score": "0.6195"
        },
        {
            "id": "306",
            "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .",
            "draft_plan": "# Initialize a list to store the maximum sum of increasing subsequences for each index\n# Initialize the maximum sum to be 0\n\n# Iterate through each index i in the given list\n    # Initialize a variable to store the maximum sum of increasing subsequence until index i, including the kth element\n    # Iterate through each index k starting from i+1 to the end of the list\n        # Check if the element at index k is greater than the element at index i\n            # Update the maximum sum of increasing subsequence until index i, including the kth element\n    # Update the maximum sum if the maximum sum of increasing subsequence until index i, including the kth element, is greater than the current maximum sum\n\n# Return the maximum sum",
            "requirements": "",
            "final_plan": "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]",
            "code": "function findMaxSum(nums)\n    local maxSums = {}\n    local maxSum = 0\n\n    for i = 1, #nums do\n        local currMaxSum = 0\n\n        for k = i+1, #nums do\n            if nums[k] > nums[i] then\n                currMaxSum = math.max(currMaxSum, maxSums[i] + nums[k])\n            end\n        end\n\n        maxSums[i] = currMaxSum\n        maxSum = math.max(maxSum, currMaxSum)\n    end\n\n    return maxSum\nend",
            "gen_tc": "",
            "sim_score": "0.6107"
        },
        {
            "id": "468",
            "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
            "draft_plan": "# Initialize the maximum product as 1\n# Initialize an empty list to store the increasing subsequence\n\n# Iterate through each number in the array\n    # Initialize a temporary list to store the current increasing subsequence\n    # Iterate through each number before the current number\n        # Check if the current number is greater than the previous number and if the product of the current number and the previous maximum product is greater than the current maximum product\n            # If the condition is satisfied, update the maximum product and the temporary list with the current increasing subsequence\n    # Append the current number to the temporary list\n\n# Return the maximum product and the increasing subsequence list",
            "requirements": "",
            "final_plan": "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)",
            "code": "function findMaxProduct(nums)\n    local maxProduct = 1\n    local subsequence = {}\n    \n    for i = 1, #nums do\n        local temp = {nums[i]}\n        \n        for j = 1, i-1 do\n            if nums[i] > nums[j] and nums[i] * maxProduct > maxProduct then\n                maxProduct = nums[i] * maxProduct\n                temp = table.copy(subsequence)\n            end\n        end\n        \n        table.insert(temp, nums[i])\n        subsequence = table.copy(temp)\n    end\n    \n    return maxProduct, subsequence\nend\n\n-- Helper function to copy a table\nfunction table.copy(t)\n    local copy = {}\n    for key, value in pairs(t) do\n        copy[key] = value\n    end\n    return copy\nend",
            "gen_tc": "",
            "sim_score": "0.6102"
        },
        {
            "id": "145",
            "prompt": "Write a python function to find the maximum difference between any two elements in a given array.",
            "draft_plan": "# If the array is empty, return None\n# Initialize the maximum difference to zero\n\n# Iterate through each element in the array\n    # Iterate through each element after the current element\n        # Calculate the difference between the current element and the subsequent element\n        # Update the maximum difference if the calculated difference is greater than the current maximum difference\n\n# Return the maximum difference",
            "requirements": "",
            "final_plan": "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ",
            "code": "function max_difference(arr)\n    if #arr == 0 then\n        return nil\n    end\n\n    local max_diff = 0\n\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            local diff = math.abs(arr[i] - arr[j])\n            if diff > max_diff then\n                max_diff = diff\n            end\n        end\n    end\n\n    return max_diff\nend",
            "gen_tc": "",
            "sim_score": "0.6083"
        },
        {
            "id": "418",
            "prompt": "Write a python function to find the element of a list having maximum length.",
            "draft_plan": "# Initialize a variable to store the index of the element with maximum length\n# Initialize a variable to store the maximum length, initially set to 0\n\n# Iterate through each element in the list\n    # Check if the length of the current element is greater than the maximum length\n        # If so, update the maximum length and the index of the element\n\n# Return the element at the index with maximum length",
            "requirements": "",
            "final_plan": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList",
            "code": "function findMaxElementLength(lst)\n    local maxIndex = 1\n    local maxLength = 0\n\n    for i, element in ipairs(lst) do\n        local length = string.len(element)\n        if length > maxLength then\n            maxLength = length\n            maxIndex = i\n        end\n    end\n\n    return lst[maxIndex]\nend",
            "gen_tc": "",
            "sim_score": "0.6080"
        },
        {
            "id": "443",
            "prompt": "Write a python function to find the largest negative number from the given list.",
            "draft_plan": "# Initialize a variable 'largest_negative' to None\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If 'largest_negative' is None or the current number is greater than 'largest_negative', update 'largest_negative' to the current number\n\n# Return 'largest_negative'",
            "requirements": "",
            "final_plan": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
            "code": "function find_largest_negative(numbers)\n    local largest_negative = nil\n\n    for _, number in ipairs(numbers) do\n        if number < 0 then\n            if largest_negative == nil or number > largest_negative then\n                largest_negative = number\n            end\n        end\n    end\n\n    return largest_negative\nend",
            "gen_tc": "",
            "sim_score": "0.6059"
        },
        {
            "id": "392",
            "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
            "draft_plan": "# Create a dictionary to store the maximum sum for each number\n# Set the base cases for f(0) and f(1) as 0 and 1 respectively\n\n# Define a recursive function to calculate the maximum sum for a given number\n    # Check if the maximum sum for the current number has already been calculated\n        # If yes, return the stored value\n        # If no, calculate the maximum sum using the given equation\n\n# Call the recursive function to calculate the maximum sum for the given number",
            "requirements": "",
            "final_plan": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]",
            "code": "function max_sum(n)\n    local memo = {}  -- dictionary to store the maximum sum for each number\n\n    -- base cases\n    memo[0] = 0\n    memo[1] = 1\n\n    -- recursive function to calculate maximum sum\n    local function calculate_sum(num)\n        if memo[num] ~= nil then  -- check if maximum sum is already calculated\n            return memo[num]\n        end\n\n        -- calculate maximum sum using the given equation\n        memo[num] = math.max(calculate_sum(math.floor(num/2)) + calculate_sum(math.floor(num/3)) + calculate_sum(math.floor(num/4)) + calculate_sum(math.floor(num/5)), num)\n        return memo[num]\n    end\n\n    return calculate_sum(n)  -- call the recursive function to calculate maximum sum for given number\nend",
            "gen_tc": "",
            "sim_score": "0.6025"
        },
        {
            "id": "57",
            "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.",
            "draft_plan": "# Sort the list of digits in descending order\n\n# Concatenate all the digits in the sorted list\n\n# Convert the concatenated string to an integer and return it",
            "requirements": "",
            "final_plan": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ",
            "code": "function largest_number(digits)\n    table.sort(digits, function(a, b) return a > b end)\n    return tonumber(table.concat(digits))\nend",
            "gen_tc": "",
            "sim_score": "0.5976"
        },
        {
            "id": "63",
            "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.",
            "draft_plan": "# Initialize the maximum difference variable to 0\n\n# Iterate through each pair in the list\n    # Calculate the difference between the second element and the first element of the current pair\n    # Check if the current difference is greater than the maximum difference\n        # If it is, update the maximum difference\n\n# Return the maximum difference",
            "requirements": "",
            "final_plan": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ",
            "code": "function find_max_difference(tuple_list)\n    local max_difference = 0\n\n    for _, tuple in ipairs(tuple_list) do\n        local difference = tuple[2] - tuple[1]\n        if difference > max_difference then\n            max_difference = difference\n        end\n    end\n\n    return max_difference\nend",
            "gen_tc": "",
            "sim_score": "0.5767"
        }
    ],
    "HumanEval/10": [
        {
            "id": "100",
            "prompt": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
            "draft_plan": "# Define a helper function to check if a number is palindrome\n    # Convert the number to a string\n    # Check if the string is equal to its reversed string representation\n\n# Start a loop from the next number after the specified integer\n    # Check if the current number is a palindrome\n        # If yes, return the current number\n\n# If no palindrome is found in the loop, return None",
            "requirements": "",
            "final_plan": "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i",
            "code": "function isPalindrome(num)\n    local str = tostring(num)\n    return str == string.reverse(str)\nend\n\nfunction nextSmallestPalindrome(num)\n    num = num + 1\n\n    while true do\n        if isPalindrome(num) then\n            return num\n        end\n        num = num + 1\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.6841"
        },
        {
            "id": "247",
            "prompt": "Write a function to find the length of the longest palindromic subsequence in the given string.",
            "draft_plan": "# Create a 2D array of size n x n, where n is the length of the input string\n# Fill the diagonal with 1, as each character is a palindrome of length 1\n\n# Iterate through the remaining elements of the array in a bottom-up manner\n    # If the characters at the current indices match\n        # Set the value of the current cell as 2 plus the value in the cell diagonally below and to the right (i+1, j+1)\n    # Otherwise, set the value of the current cell as the maximum of the value in the cell to the left (i, j-1) and the value in the cell below (i+1, j)\n\n# Return the value in the top-right cell of the array, which represents the length of the longest palindromic subsequence",
            "requirements": "",
            "final_plan": "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]",
            "code": "function longestPalindromicSubsequence(str)\n    local n = string.len(str)\n    local dp = {}\n    \n    -- Initialize diagonal with 1\n    for i = 1, n do\n        dp[i] = {}\n        dp[i][i] = 1\n    end\n    \n    -- Fill the array in a bottom-up manner\n    for i = n-1, 1, -1 do\n        for j = i+1, n do\n            if string.sub(str, i, i) == string.sub(str, j, j) then\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else\n                dp[i][j] = math.max(dp[i][j-1], dp[i+1][j])\n            end\n        end\n    end\n    \n    return dp[1][n]\nend",
            "gen_tc": "",
            "sim_score": "0.5992"
        },
        {
            "id": "131",
            "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
            "draft_plan": "# Create a list of vowels (including both lowercase and uppercase)\n# Convert the input string into a list of characters\n\n# Initialize two pointers: one at the start of the string and one at the end\n# Iterate while the pointers don't overlap\n    # Check if the character at the start pointer is a vowel\n        # If it is, then check if the character at the end pointer is also a vowel\n            # If it is, swap the characters at the start and end pointers\n            # Move the start pointer to the next character\n            # Move the end pointer to the previous character\n        # If the character at the end pointer is not a vowel, move the end pointer to the previous character\n    \n# Convert the modified list of characters back into a string and return it",
            "requirements": "",
            "final_plan": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string",
            "code": "function reverse_vowels(str)\n    local vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }\n    local chars = {}\n    for i = 1, string.len(str) do\n        table.insert(chars, string.sub(str, i, i))\n    end\n    \n    local start = 1\n    local finish = string.len(str)\n    \n    while start < finish do\n        if is_vowel(chars[start], vowels) then\n            while not is_vowel(chars[finish], vowels) and finish > start do\n                finish = finish - 1\n            end\n            if finish > start then\n                chars[start], chars[finish] = chars[finish], chars[start]\n                start = start + 1\n                finish = finish - 1\n            end\n        else\n            start = start + 1\n        end\n    end\n    \n    return table.concat(chars)\nend\n\nfunction is_vowel(char, vowels)\n    for _, vowel in ipairs(vowels) do\n        if char == vowel then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5751"
        },
        {
            "id": "456",
            "prompt": "Write a function to reverse each string in a given list of string values.",
            "draft_plan": "# Iterate through each string in the given list\n    # Reverse the current string using string slicing\n    # Update the current string in the list with the reversed string\n\n# Return the modified list",
            "requirements": "",
            "final_plan": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result",
            "code": "function reverse_strings(str_list)\n    for i = 1, #str_list do\n        str_list[i] = string.reverse(str_list[i])\n    end\n    return str_list\nend",
            "gen_tc": "",
            "sim_score": "0.5023"
        },
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.4871"
        },
        {
            "id": "396",
            "prompt": "Write a function to check whether the given string starts and ends with the same character or not.",
            "draft_plan": "# Check if the first character of the string is equal to the last character\n    # If they are equal, return True\n    # If they are not equal, return False",
            "requirements": "",
            "final_plan": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ",
            "code": "function starts_ends_same(str)\n    local first_char = string.sub(str, 1, 1)\n    local last_char = string.sub(str, -1)\n    \n    if first_char == last_char then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4854"
        },
        {
            "id": "11",
            "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
            "draft_plan": "# Find the index of the first occurrence of the given character in the string\n# Find the index of the last occurrence of the given character in the string\n\n# If both indices are valid\n    # Remove the first occurrence of the character from the string\n    # Decrement the index of the last occurrence by 1 to account for the removal\n    # Remove the last occurrence of the character from the string\n\n# Return the modified string",
            "requirements": "",
            "final_plan": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ",
            "code": "function removeFirstAndLastOccurrence(str, char)\n    local firstIndex = string.find(str, char)\n    local lastIndex = string.find(str:reverse(), char)\n\n    if firstIndex and lastIndex then\n        str = string.sub(str, 1, firstIndex - 1) .. string.sub(str, firstIndex + 1)\n        lastIndex = string.len(str) - lastIndex + 1\n        str = string.sub(str, 1, lastIndex - 1) .. string.sub(str, lastIndex + 1)\n    end\n\n    return str\nend",
            "gen_tc": "",
            "sim_score": "0.4792"
        },
        {
            "id": "56",
            "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
            "draft_plan": "# Convert the given number to a string and reverse it\n# Convert the reversed string back to an integer\n# Check if the given number is equal to twice the reversed number plus 1\n# If the condition is true, return True. Otherwise, return False.",
            "requirements": "",
            "final_plan": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
            "code": "function is_one_less_twice_reverse(number)\n    local reverse = tonumber(string.reverse(tostring(number)))\n    if number == (2 * reverse + 1) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4639"
        },
        {
            "id": "230",
            "prompt": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
            "draft_plan": "# Define a function that takes in a string and a character as arguments\n    # Convert the string into a list of characters\n    # Iterate through each character in the list\n        # Check if the character is a blank space\n            # If it is, replace it with the given character\n    # Join the list of characters back into a string\n    # Return the modified string\n\n# Example usage:\n# string = \"Hello World\"\n# character = \"-\"\n# modified_string = replace_spaces(string, character)\n# print(modified_string) --> \"Hello-World\"",
            "requirements": "",
            "final_plan": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2",
            "code": "function replace_spaces(str, char)\n    local chars = {}\n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        if c == \" \" then\n            c = char\n        end\n        table.insert(chars, c)\n    end\n    return table.concat(chars)\nend\n\nlocal string = \"Hello World\"\nlocal character = \"-\"\nlocal modified_string = replace_spaces(string, character)\nprint(modified_string) --> \"Hello-World\"",
            "gen_tc": "",
            "sim_score": "0.4338"
        },
        {
            "id": "437",
            "prompt": "Write a function to remove odd characters in a string.",
            "draft_plan": "# Initialize an empty string to store the result\n\n# Iterate through each character in the input string\n    # Check if the index of the current character is even\n        # If the index is even, append the character to the result string\n\n# Return the result string",
            "requirements": "",
            "final_plan": "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2",
            "code": "function removeOddCharacters(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        if i % 2 == 0 then\n            result = result .. string.sub(str, i, i)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4275"
        }
    ],
    "HumanEval/11": [
        {
            "id": "399",
            "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
            "draft_plan": "# Initialize an empty list to store the result of bitwise XOR operation on each tuple\n\n# Iterate through each tuple in the input list\n    # Initialize a variable to store the result of XOR operation\n    # Iterate through each element in the tuple\n        # Perform bitwise XOR operation with the current element and the result variable\n    # Append the result of XOR operation to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
            "code": "function bitwise_xor(tuples)\n    local result = {}\n\n    for _, tuple in ipairs(tuples) do\n        local xor_result = 0\n\n        for _, element in ipairs(tuple) do\n            xor_result = bit.bxor(xor_result, element)\n        end\n\n        table.insert(result, xor_result)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.6470"
        },
        {
            "id": "99",
            "prompt": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
            "draft_plan": "# Initialize an empty string to store the binary representation\n# Check if the input number is 0, if so return '0' as the binary representation\n# Iterate until the input number becomes 0\n    # Append the remainder of the input number divided by 2 to the binary representation string\n    # Update the input number by dividing it by 2, discarding the remainder\n\n# Reverse the binary representation string\n\n# Return the binary representation string",
            "requirements": "",
            "final_plan": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") ",
            "code": "function decimalToBinary(decimal)\n    local binary = \"\"\n\n    if decimal == 0 then\n        return \"0\"\n    end\n\n    while decimal > 0 do\n        binary = tostring(decimal % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n\n    return binary\nend",
            "gen_tc": "",
            "sim_score": "0.5346"
        },
        {
            "id": "166",
            "prompt": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
            "draft_plan": "# Initialize a variable to keep track of the count of pairs\n# Iterate through each element in the list\n    # Iterate through each element after the current element\n        # Check if the xor of the current pair is an even number\n            # If it is, increment the count of pairs\n\n# Return the count of pairs",
            "requirements": "",
            "final_plan": "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count",
            "code": "function count_even_xor_pairs(list)\n    local pair_count = 0\n\n    for i = 1, #list do\n        for j = i+1, #list do\n            if (list[i] ~ list[j]) % 2 == 0 then\n                pair_count = pair_count + 1\n            end\n        end\n    end\n\n    return pair_count\nend",
            "gen_tc": "",
            "sim_score": "0.5248"
        },
        {
            "id": "109",
            "prompt": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
            "draft_plan": "# Convert the binary string to a list of characters\n# Initialize a counter variable to keep track of the number of odd numbers\n\n# Rotate the binary string the given number of times\n    # Remove the last character from the binary string and prepend it to the front\n\n# Convert the rotated binary string back to a string\n# Iterate through each character in the rotated binary string\n    # Convert the character to an integer\n    # Check if the integer value is odd\n        # If so, increment the counter\n\n# Return the counter value",
            "requirements": "",
            "final_plan": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ",
            "code": "function count_odd_numbers(binary_str, rotations)\n    local binary_list = {}\n    local counter = 0\n\n    -- Convert the binary string to a list of characters\n    for char in string.gmatch(binary_str, \".\") do\n        table.insert(binary_list, char)\n    end\n\n    -- Rotate the binary string the given number of times\n    for i = 1, rotations do\n        local last_char = table.remove(binary_list)\n        table.insert(binary_list, 1, last_char)\n    end\n\n    -- Convert the rotated binary string back to a string\n    local rotated_binary_str = table.concat(binary_list)\n\n    -- Iterate through each character in the rotated binary string\n    for i = 1, string.len(rotated_binary_str) do\n        local char = string.sub(rotated_binary_str, i, i)\n        local num = tonumber(char)\n        \n        -- Check if the integer value is odd\n        if num % 2 == 1 then\n            counter = counter + 1\n        end\n    end\n\n    return counter\nend",
            "gen_tc": "",
            "sim_score": "0.4950"
        },
        {
            "id": "125",
            "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
            "draft_plan": "# Initialize the maximum difference as 0\n\n# Iterate through each character in the binary string\n    # If the current character is '0', increment a count variable by 1\n    # If the current character is '1', decrement the count variable by 1\n\n    # Check if the count variable is greater than the maximum difference\n        # If so, update the maximum difference to the count variable\n\n# Return the maximum difference as the result",
            "requirements": "",
            "final_plan": "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0",
            "code": "function maxDifference(str)\n    local count = 0\n    local max_diff = 0\n\n    for i = 1, string.len(str) do\n        if string.sub(str, i, i) == '0' then\n            count = count + 1\n        else\n            count = count - 1\n        end\n\n        if count > max_diff then\n            max_diff = count\n        end\n    end\n\n    return max_diff\nend",
            "gen_tc": "",
            "sim_score": "0.4755"
        },
        {
            "id": "224",
            "prompt": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each bit in the binary representation of the number\n    # Check if the current bit is set (equal to 1)\n        # If yes, increment the counter variable\n\n# Return the counter variable, which represents the number of set bits",
            "requirements": "",
            "final_plan": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ",
            "code": "function count_set_bits(number)\n    local count = 0\n\n    while number > 0 do\n        if number % 2 == 1 then\n            count = count + 1\n        end\n        number = math.floor(number / 2)\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4631"
        },
        {
            "id": "235",
            "prompt": "Write a python function to set all even bits of a given number.",
            "draft_plan": "# Create a mask with all even bits set to 1 and odd bits set to 0\n# Perform bitwise OR operation between the given number and the mask\n# Return the updated number",
            "requirements": "",
            "final_plan": "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) ",
            "code": "function set_even_bits(n)\n    local mask = 0xAAAAAAAA -- Mask with all even bits set to 1 and odd bits set to 0\n    return bit.bor(n, mask)\nend",
            "gen_tc": "",
            "sim_score": "0.4601"
        },
        {
            "id": "310",
            "prompt": "Write a function to convert a given string to a tuple of characters.",
            "draft_plan": "# Initialize an empty tuple\n\n# Iterate through each character in the input string\n    # Append the character to the tuple\n\n# Return the tuple",
            "requirements": "",
            "final_plan": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result",
            "code": "function string_to_tuple(string)\n    local tuple = {}\n    \n    for i = 1, string.len(string) do\n        local char = string.sub(string, i, i)\n        table.insert(tuple, char)\n    end\n    \n    return tuple\nend",
            "gen_tc": "",
            "sim_score": "0.4579"
        },
        {
            "id": "479",
            "prompt": "Write a python function to find the first digit of a given number.",
            "draft_plan": "# Convert the given number to a string\n\n# Iterate through each character in the string\n    # Check if the character is a digit\n        # If it is, return the character as the first digit\n\n# If no digit is found, return \"None\"",
            "requirements": "",
            "final_plan": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ",
            "code": "function firstDigit(number)\n    local numberStr = tostring(number)\n\n    for i = 1, string.len(numberStr) do\n        local char = string.sub(numberStr, i, i)\n        if string.match(char, \"%d\") then\n            return char\n        end\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.4554"
        },
        {
            "id": "77",
            "prompt": "Write a python function to find whether a number is divisible by 11.",
            "draft_plan": "To determine whether a number is divisible by 11, we can use the following logic:\n\n1. Convert the number to a string.\n2. Iterate through the digits of the number.\n3. Add the digits in odd positions (starting from the rightmost digit) and subtract the sum of the digits in even positions.\n4. If the result is divisible by 11, the original number is also divisible by 11.\n\nHere is the code implementing this logic:\n\n```python\ndef is_divisible_by_11(number):\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Iterate through the digits of the number\n    sum_odd = 0\n    sum_even = 0\n    for i in range(len(number_str)):\n        digit = int(number_str[i])\n        \n        # Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0:\n            sum_odd += digit\n        else:\n            sum_even += digit\n    \n    # Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0:\n        return True\n    else:\n        return False\n```\n\nYou can use this function to check if a number is divisible by 11. For example:\n\n```python\nprint(is_divisible_by_11(121))  # Output: True\nprint(is_divisible_by_11(123))  # Output: False\n```",
            "requirements": "",
            "final_plan": "def is_Diff(n): \n    return (n % 11 == 0) ",
            "code": "function is_divisible_by_11(number)\n    -- Convert the number to a string\n    local number_str = tostring(number)\n    \n    -- Iterate through the digits of the number\n    local sum_odd = 0\n    local sum_even = 0\n    for i = 1, string.len(number_str) do\n        local digit = tonumber(string.sub(number_str, i, i))\n        \n        -- Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0 then\n            sum_even = sum_even + digit\n        else\n            sum_odd = sum_odd + digit\n        end\n    end\n    \n    -- Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0 then\n        return true\n    else\n        return false\n    end\nend\n\nprint(is_divisible_by_11(121))  -- Output: true\nprint(is_divisible_by_11(123))  -- Output: false",
            "gen_tc": "",
            "sim_score": "0.4549"
        }
    ],
    "HumanEval/12": [
        {
            "id": "290",
            "prompt": "Write a function to find the list of maximum length in a list of lists.",
            "draft_plan": "# Initialize a variable to store the maximum length and an empty list to store the list with maximum length\n\n# Iterate through each list in the input list of lists\n    # Check if the length of the current list is greater than the maximum length\n        # If so, update the maximum length and the list with maximum length\n\n# Return the list with maximum length",
            "requirements": "",
            "final_plan": "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)",
            "code": "function find_max_length_list(lists)\n    local max_length = 0\n    local max_length_list = {}\n\n    for _, list in ipairs(lists) do\n        if #list > max_length then\n            max_length = #list\n            max_length_list = list\n        end\n    end\n\n    return max_length_list\nend",
            "gen_tc": "",
            "sim_score": "0.6967"
        },
        {
            "id": "418",
            "prompt": "Write a python function to find the element of a list having maximum length.",
            "draft_plan": "# Initialize a variable to store the index of the element with maximum length\n# Initialize a variable to store the maximum length, initially set to 0\n\n# Iterate through each element in the list\n    # Check if the length of the current element is greater than the maximum length\n        # If so, update the maximum length and the index of the element\n\n# Return the element at the index with maximum length",
            "requirements": "",
            "final_plan": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList",
            "code": "function findMaxElementLength(lst)\n    local maxIndex = 1\n    local maxLength = 0\n\n    for i, element in ipairs(lst) do\n        local length = string.len(element)\n        if length > maxLength then\n            maxLength = length\n            maxIndex = i\n        end\n    end\n\n    return lst[maxIndex]\nend",
            "gen_tc": "",
            "sim_score": "0.6937"
        },
        {
            "id": "393",
            "prompt": "Write a function to find the list with maximum length.",
            "draft_plan": "# Initialize the maximum length and the list with maximum length to empty values\n\n# Iterate through each list in the input list of lists\n    # Check if the length of the current list is greater than the maximum length\n        # If so, update the maximum length and the list with maximum length\n\n# Return the list with maximum length",
            "requirements": "",
            "final_plan": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)",
            "code": "function findListWithMaxLength(lists)\n    local maxLength = 0\n    local listWithMaxLength = {}\n\n    for _, list in ipairs(lists) do\n        local length = #list\n\n        if length > maxLength then\n            maxLength = length\n            listWithMaxLength = list\n        end\n    end\n\n    return listWithMaxLength\nend",
            "gen_tc": "",
            "sim_score": "0.6916"
        },
        {
            "id": "90",
            "prompt": "Write a python function to find the length of the longest word.",
            "draft_plan": "# Split the input sentence into words using the split() function\n# Initialize a variable maxLength to 0\n\n# Iterate through each word in the list of words\n    # Check if the length of the current word is greater than maxLength\n        # If it is, update maxLength with the length of the current word\n\n# Return maxLength",
            "requirements": "",
            "final_plan": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max",
            "code": "function find_longest_word(sentence)\n    local words = split_sentence(sentence)\n    local max_length = 0\n\n    for _, word in ipairs(words) do\n        local length = string.len(word)\n        if length > max_length then\n            max_length = length\n        end\n    end\n\n    return max_length\nend\n\nfunction split_sentence(sentence)\n    local words = {}\n    for word in string.gmatch(sentence, \"%S+\") do\n        table.insert(words, word)\n    end\n    return words\nend",
            "gen_tc": "",
            "sim_score": "0.6866"
        },
        {
            "id": "128",
            "prompt": "Write a function to find words that are longer than n characters from a given list of words.",
            "draft_plan": "# Create an empty list to store the result\n\n# Iterate through each word in the given list\n    # Check if the length of the current word is greater than n\n        # If the condition is satisfied, append the word to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t",
            "code": "function find_longer_words(word_list, n)\n    local result = {}\n\n    for _, word in ipairs(word_list) do\n        if string.len(word) > n then\n            table.insert(result, word)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5447"
        },
        {
            "id": "57",
            "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.",
            "draft_plan": "# Sort the list of digits in descending order\n\n# Concatenate all the digits in the sorted list\n\n# Convert the concatenated string to an integer and return it",
            "requirements": "",
            "final_plan": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ",
            "code": "function largest_number(digits)\n    table.sort(digits, function(a, b) return a > b end)\n    return tonumber(table.concat(digits))\nend",
            "gen_tc": "",
            "sim_score": "0.5438"
        },
        {
            "id": "95",
            "prompt": "Write a python function to find the length of the smallest list in a list of lists.",
            "draft_plan": "# Initialize the minimum length to a large number\n\n# Iterate through each list in the input list\n    # Check the length of the current list\n        # If the length is smaller than the current minimum length, update the minimum length\n\n# Return the minimum length",
            "requirements": "",
            "final_plan": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength ",
            "code": "function find_smallest_list_length(list_of_lists)\n    local min_length = math.huge\n\n    for _, list in ipairs(list_of_lists) do\n        local length = #list\n        if length < min_length then\n            min_length = length\n        end\n    end\n\n    return min_length\nend",
            "gen_tc": "",
            "sim_score": "0.5040"
        },
        {
            "id": "421",
            "prompt": "Write a function to concatenate each element of tuple by the delimiter.",
            "draft_plan": "# Initialize an empty string to store the concatenated elements\n\n# Iterate through each tuple in the input list\n    # Iterate through each element in the tuple\n        # Concatenate the element to the output string\n        # If the current element is not the last element in the tuple, append the delimiter\n\n# Return the concatenated string",
            "requirements": "",
            "final_plan": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ",
            "code": "function concatenate_tuple_elements(tuple_list, delimiter)\n    local concatenated_string = \"\"\n\n    for _, tuple in ipairs(tuple_list) do\n        for i, element in ipairs(tuple) do\n            concatenated_string = concatenated_string .. element\n            if i ~= #tuple then\n                concatenated_string = concatenated_string .. delimiter\n            end\n        end\n    end\n\n    return concatenated_string\nend",
            "gen_tc": "",
            "sim_score": "0.5013"
        },
        {
            "id": "70",
            "prompt": "Write a function to find whether all the given tuples have equal length or not.",
            "draft_plan": "# Get the length of the first tuple in the list\n\n# Iterate through each tuple in the list\n    # Check if the length of the current tuple is not equal to the length of the first tuple\n        # If lengths are not equal, return False\n\n# If all tuples have equal lengths, return True",
            "requirements": "",
            "final_plan": "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1",
            "code": "function check_tuple_lengths(tuples)\n    local first_length = #tuples[1]\n\n    for _, tuple in ipairs(tuples) do\n        if #tuple ~= first_length then\n            return false\n        end\n    end\n\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.4995"
        },
        {
            "id": "443",
            "prompt": "Write a python function to find the largest negative number from the given list.",
            "draft_plan": "# Initialize a variable 'largest_negative' to None\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If 'largest_negative' is None or the current number is greater than 'largest_negative', update 'largest_negative' to the current number\n\n# Return 'largest_negative'",
            "requirements": "",
            "final_plan": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
            "code": "function find_largest_negative(numbers)\n    local largest_negative = nil\n\n    for _, number in ipairs(numbers) do\n        if number < 0 then\n            if largest_negative == nil or number > largest_negative then\n                largest_negative = number\n            end\n        end\n    end\n\n    return largest_negative\nend",
            "gen_tc": "",
            "sim_score": "0.4913"
        }
    ],
    "HumanEval/13": [
        {
            "id": "126",
            "prompt": "Write a python function to find the sum of common divisors of two given numbers.",
            "draft_plan": "# Find the common divisors of the two given numbers\n    # Find the smaller number among the two\n    # Initialize an empty list to store the common divisors\n    # Iterate from 1 to the smaller number\n        # Check if the current number is a divisor of both given numbers\n            # If yes, add it to the list of common divisors\n\n# Find the sum of the common divisors\n    # Initialize a variable to store the sum\n    # Iterate through the list of common divisors\n        # Add each divisor to the sum\n\n# Return the sum of the common divisors",
            "requirements": "",
            "final_plan": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum",
            "code": "function sumCommonDivisors(a, b)\n    local smaller = math.min(a, b)\n    local divisors = {}\n\n    for i = 1, smaller do\n        if a % i == 0 and b % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n\n    local sum = 0\n    for _, divisor in ipairs(divisors) do\n        sum = sum + divisor\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6807"
        },
        {
            "id": "96",
            "prompt": "Write a python function to find the number of divisors of a given integer.",
            "draft_plan": "# Initialize a count variable to 0\n\n# Iterate through each number from 1 to the given integer\n    # Check if the current number is a divisor of the given integer\n        # If yes, increment the count variable\n\n# Return the count variable",
            "requirements": "",
            "final_plan": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x",
            "code": "function countDivisors(num)\n    local count = 0\n\n    for i = 1, num do\n        if num % i == 0 then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5635"
        },
        {
            "id": "127",
            "prompt": "Write a function to multiply two integers.",
            "draft_plan": "# Initialize the result to 0\n\n# If either of the integers is 0, return 0\n\n# If both integers are negative, convert them to positive\n    # Multiply the positive integers and change the sign of the result to negative\n\n# If only one integer is negative, convert it to positive\n    # Multiply the positive integers and change the sign of the result to negative\n\n# If both integers are positive, multiply them normally\n\n# Return the result",
            "requirements": "",
            "final_plan": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)",
            "code": "function multiply(a, b)\n    local result = 0\n    \n    if a == 0 or b == 0 then\n        return 0\n    end\n    \n    if a < 0 and b < 0 then\n        a = -a\n        b = -b\n    elseif a < 0 then\n        a = -a\n        result = -result\n    elseif b < 0 then\n        b = -b\n        result = -result\n    end\n    \n    while b > 0 do\n        if b % 2 == 1 then\n            result = result + a\n        end\n        a = a * 2\n        b = math.floor(b / 2)\n    end\n    \n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5588"
        },
        {
            "id": "292",
            "prompt": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
            "draft_plan": "To find the quotient of two numbers rounded down to the nearest integer, you can use the floor division operator `//` in Python.\n\nHere is the code logic:\n\n```python\ndef quotient(a, b):\n    return a // b\n```\n\nIn this code, the function `quotient` takes two parameters `a` and `b`, representing the numbers for which we want to find the quotient. The floor division `a // b` divides `a` by `b` and returns the quotient rounded down to the nearest integer.\n\nYou can call this function with your desired values to find the quotient. For example:\n\n```python\nresult = quotient(10, 3)\nprint(result)  # Output: 3\n```",
            "requirements": "",
            "final_plan": "def find(n,m):  \n    q = n//m \n    return (q)",
            "code": "function quotient(a, b)\n    return math.floor(a / b)\nend\n\n-- Example usage\nlocal result = quotient(10, 3)\nprint(result) -- Output: 3",
            "gen_tc": "",
            "sim_score": "0.5568"
        },
        {
            "id": "261",
            "prompt": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
            "draft_plan": "# Create an empty list to store the result of the division operation\n\n# Iterate through the elements of the tuples\n    # Perform the division operation on the corresponding elements of the tuples\n    # Append the result to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
            "code": "function tuple_division(t1, t2)\n    local result = {}\n\n    for i = 1, #t1 do\n        local div = t1[i] / t2[i]\n        table.insert(result, div)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5508"
        },
        {
            "id": "164",
            "prompt": "Write a function to determine if the sum of the divisors of two integers are the same.",
            "draft_plan": "# Define a function to calculate the sum of divisors for a given number\n    # Initialize the sum to 0\n    # Iterate through each number from 1 to the given number\n        # Check if the current number is a divisor of the given number\n            # If it is, add it to the sum\n\n# Define a function to determine if the sum of divisors for two numbers are the same\n    # Calculate the sum of divisors for both numbers\n    # Check if the sums are equal\n        # If they are, return True\n        # Otherwise, return False",
            "requirements": "",
            "final_plan": "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); ",
            "code": "function sumOfDivisors(n)\n    local sum = 0\n    for i = 1, n do\n        if n % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\n\nfunction sameSumOfDivisors(num1, num2)\n    local sum1 = sumOfDivisors(num1)\n    local sum2 = sumOfDivisors(num2)\n    return sum1 == sum2\nend",
            "gen_tc": "",
            "sim_score": "0.5466"
        },
        {
            "id": "98",
            "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
            "draft_plan": "# Initialize the product variable to 1\n\n# Iterate through each number in the list\n    # Multiply the product by the current number\n\n# Divide the product by the length of the list\n\n# Return the result",
            "requirements": "",
            "final_plan": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ",
            "code": "function multiply_and_divide(numbers)\n    local product = 1\n\n    for _, num in ipairs(numbers) do\n        product = product * num\n    end\n\n    local result = product / #numbers\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5365"
        },
        {
            "id": "295",
            "prompt": "Write a function to return the sum of all divisors of a number.",
            "draft_plan": "# Initialize the sum of divisors to 0\n\n# Iterate from 1 to the given number\n    # Check if the current number is a divisor of the given number\n        # If it is, add it to the sum of divisors\n\n# Return the sum of divisors",
            "requirements": "",
            "final_plan": "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)",
            "code": "function sum_of_divisors(num)\n    local sum = 0\n\n    for i = 1, num do\n        if num % i == 0 then\n            sum = sum + i\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5260"
        },
        {
            "id": "160",
            "prompt": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
            "draft_plan": "# Iterate through all possible values of x from 0 to n\n    # Calculate the value of y using the equation y = (n - ax) / b\n    # Check if y is an integer\n        # If y is an integer, return the values of x and y as a tuple\n\n# If no solution is found, return None",
            "requirements": "",
            "final_plan": "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None",
            "code": "function find_solution(a, b, n)\n    for x = 0, n do\n        local y = (n - a * x) / b\n        if y == math.floor(y) then\n            return x, y\n        end\n    end\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.5111"
        },
        {
            "id": "471",
            "prompt": "Write a python function to find the product of the array multiplication modulo n.",
            "draft_plan": "# Initialize the product to 1\n\n# Iterate through each element in the array\n    # Multiply the current element with the product\n    # Take the modulo of the product with n\n\n# Return the final product modulo n",
            "requirements": "",
            "final_plan": "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ",
            "code": "function arrayProductModuloN(arr, n)\n    local product = 1\n\n    for _, num in ipairs(arr) do\n        product = (product * num) % n\n    end\n\n    return product\nend",
            "gen_tc": "",
            "sim_score": "0.5068"
        }
    ],
    "HumanEval/14": [
        {
            "id": "11",
            "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
            "draft_plan": "# Find the index of the first occurrence of the given character in the string\n# Find the index of the last occurrence of the given character in the string\n\n# If both indices are valid\n    # Remove the first occurrence of the character from the string\n    # Decrement the index of the last occurrence by 1 to account for the removal\n    # Remove the last occurrence of the character from the string\n\n# Return the modified string",
            "requirements": "",
            "final_plan": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ",
            "code": "function removeFirstAndLastOccurrence(str, char)\n    local firstIndex = string.find(str, char)\n    local lastIndex = string.find(str:reverse(), char)\n\n    if firstIndex and lastIndex then\n        str = string.sub(str, 1, firstIndex - 1) .. string.sub(str, firstIndex + 1)\n        lastIndex = string.len(str) - lastIndex + 1\n        str = string.sub(str, 1, lastIndex - 1) .. string.sub(str, lastIndex + 1)\n    end\n\n    return str\nend",
            "gen_tc": "",
            "sim_score": "0.5277"
        },
        {
            "id": "424",
            "prompt": "Write a function to extract only the rear index element of each string in the given tuple.",
            "draft_plan": "# Create an empty list to store the rear index elements\n# Iterate through each string in the given tuple\n    # Get the rear index element of the current string using indexing\n    # Append the rear index element to the list\n\n# Return the list of rear index elements",
            "requirements": "",
            "final_plan": "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) ",
            "code": "function extract_rear_index_elements(tuple)\n    local rear_index_elements = {}\n\n    for _, str in ipairs(tuple) do\n        local rear_index_element = string.sub(str, -1)\n        table.insert(rear_index_elements, rear_index_element)\n    end\n\n    return rear_index_elements\nend",
            "gen_tc": "",
            "sim_score": "0.5158"
        },
        {
            "id": "421",
            "prompt": "Write a function to concatenate each element of tuple by the delimiter.",
            "draft_plan": "# Initialize an empty string to store the concatenated elements\n\n# Iterate through each tuple in the input list\n    # Iterate through each element in the tuple\n        # Concatenate the element to the output string\n        # If the current element is not the last element in the tuple, append the delimiter\n\n# Return the concatenated string",
            "requirements": "",
            "final_plan": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ",
            "code": "function concatenate_tuple_elements(tuple_list, delimiter)\n    local concatenated_string = \"\"\n\n    for _, tuple in ipairs(tuple_list) do\n        for i, element in ipairs(tuple) do\n            concatenated_string = concatenated_string .. element\n            if i ~= #tuple then\n                concatenated_string = concatenated_string .. delimiter\n            end\n        end\n    end\n\n    return concatenated_string\nend",
            "gen_tc": "",
            "sim_score": "0.5024"
        },
        {
            "id": "460",
            "prompt": "Write a python function to get the first element of each sublist.",
            "draft_plan": "# Create an empty list to store the first elements of each sublist\n\n# Iterate through each sublist in the input list\n    # Append the first element of the current sublist to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def Extract(lst): \n    return [item[0] for item in lst] ",
            "code": "function get_first_elements(sublists)\n    local first_elements = {}\n\n    for _, sublist in ipairs(sublists) do\n        table.insert(first_elements, sublist[1])\n    end\n\n    return first_elements\nend",
            "gen_tc": "",
            "sim_score": "0.4922"
        },
        {
            "id": "238",
            "prompt": "Write a python function to count the number of non-empty substrings of a given string.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each character and its index in the input string\n    # Iterate through each substring starting from the current character\n        # Increment the counter variable by 1 for each non-empty substring\n\n# Return the counter variable",
            "requirements": "",
            "final_plan": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ",
            "code": "function count_substrings(str)\n    local count = 0\n    for i = 1, #str do\n        for j = i, #str do\n            local substring = string.sub(str, i, j)\n            if substring ~= \"\" then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4917"
        },
        {
            "id": "462",
            "prompt": "Write a function to find all possible combinations of the elements of a given list.",
            "draft_plan": "# Import the combinations function from the itertools module\n\n# Define the function to find all possible combinations\n    # Initialize an empty list to store the combinations\n    \n    # Use a for loop to iterate through different combination lengths\n        # Generate all combinations of the given list for the current combination length\n        # Append the combinations to the result list\n    \n    # Return the list of all possible combinations",
            "requirements": "",
            "final_plan": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result",
            "code": "Sorry, I can't generate Lua code at the moment. However, here's the Python code to find all possible combinations of elements in a given list using the `combinations` function from the `itertools` module:\n\n```python\nfrom itertools import combinations\n\ndef find_combinations(input_list):\n    result = []\n    n = len(input_list)\n\n    for r in range(1, n + 1):\n        combinations_list = list(combinations(input_list, r))\n        result.extend(combinations_list)\n\n    return result\n```\n\nYou can call this function by passing the input list as an argument, and it will return a list containing all possible combinations of the elements.",
            "gen_tc": "",
            "sim_score": "0.4912"
        },
        {
            "id": "434",
            "prompt": "Write a function that matches a string that has an a followed by one or more b's.",
            "draft_plan": "import re\n\ndef match_string(string):\n    pattern = r'a+b+'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n",
            "code": "function match_string(str)\n    local pattern = \"a+b+\"\n    if string.match(str, pattern) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4865"
        },
        {
            "id": "91",
            "prompt": "Write a function to check if a string is present as a substring in a given list of string values.",
            "draft_plan": "# Iterate through each string in the list\n    # Check if the given substring is present in the current string\n        # If found, return True\n\n# If the substring is not found in any string, return False",
            "requirements": "",
            "final_plan": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False",
            "code": "function isSubstringPresent(substring, stringList)\n    for _, str in ipairs(stringList) do\n        if string.find(str, substring) then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4778"
        },
        {
            "id": "456",
            "prompt": "Write a function to reverse each string in a given list of string values.",
            "draft_plan": "# Iterate through each string in the given list\n    # Reverse the current string using string slicing\n    # Update the current string in the list with the reversed string\n\n# Return the modified list",
            "requirements": "",
            "final_plan": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result",
            "code": "function reverse_strings(str_list)\n    for i = 1, #str_list do\n        str_list[i] = string.reverse(str_list[i])\n    end\n    return str_list\nend",
            "gen_tc": "",
            "sim_score": "0.4690"
        },
        {
            "id": "128",
            "prompt": "Write a function to find words that are longer than n characters from a given list of words.",
            "draft_plan": "# Create an empty list to store the result\n\n# Iterate through each word in the given list\n    # Check if the length of the current word is greater than n\n        # If the condition is satisfied, append the word to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t",
            "code": "function find_longer_words(word_list, n)\n    local result = {}\n\n    for _, word in ipairs(word_list) do\n        if string.len(word) > n then\n            table.insert(result, word)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4678"
        }
    ],
    "HumanEval/15": [
        {
            "id": "118",
            "prompt": "Write a function to convert a string to a list of strings split on the space character.",
            "draft_plan": "# Initialize an empty list to store the split strings\n\n# Split the input string on the space character and store the result in a variable\n\n# Iterate through each element in the split result\n    # Append the element to the list\n\n# Return the list of split strings",
            "requirements": "",
            "final_plan": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst",
            "code": "function split_string(str)\n    local split_result = {}\n    for word in string.gmatch(str, \"%S+\") do\n        table.insert(split_result, word)\n    end\n    return split_result\nend",
            "gen_tc": "",
            "sim_score": "0.5439"
        },
        {
            "id": "132",
            "prompt": "Write a function to convert a tuple to a string.",
            "draft_plan": "# Initialize an empty string\n\n# Iterate through each element in the tuple\n    # Convert the element to a string and append it to the result string\n    # Add a comma after each element except for the last element\n\n# Return the result string",
            "requirements": "",
            "final_plan": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str",
            "code": "function tupleToString(tuple)\n    local result = \"\"\n\n    for i, element in ipairs(tuple) do\n        result = result .. tostring(element)\n\n        if i < #tuple then\n            result = result .. \",\"\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5387"
        },
        {
            "id": "230",
            "prompt": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
            "draft_plan": "# Define a function that takes in a string and a character as arguments\n    # Convert the string into a list of characters\n    # Iterate through each character in the list\n        # Check if the character is a blank space\n            # If it is, replace it with the given character\n    # Join the list of characters back into a string\n    # Return the modified string\n\n# Example usage:\n# string = \"Hello World\"\n# character = \"-\"\n# modified_string = replace_spaces(string, character)\n# print(modified_string) --> \"Hello-World\"",
            "requirements": "",
            "final_plan": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2",
            "code": "function replace_spaces(str, char)\n    local chars = {}\n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        if c == \" \" then\n            c = char\n        end\n        table.insert(chars, c)\n    end\n    return table.concat(chars)\nend\n\nlocal string = \"Hello World\"\nlocal character = \"-\"\nlocal modified_string = replace_spaces(string, character)\nprint(modified_string) --> \"Hello-World\"",
            "gen_tc": "",
            "sim_score": "0.5066"
        },
        {
            "id": "421",
            "prompt": "Write a function to concatenate each element of tuple by the delimiter.",
            "draft_plan": "# Initialize an empty string to store the concatenated elements\n\n# Iterate through each tuple in the input list\n    # Iterate through each element in the tuple\n        # Concatenate the element to the output string\n        # If the current element is not the last element in the tuple, append the delimiter\n\n# Return the concatenated string",
            "requirements": "",
            "final_plan": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ",
            "code": "function concatenate_tuple_elements(tuple_list, delimiter)\n    local concatenated_string = \"\"\n\n    for _, tuple in ipairs(tuple_list) do\n        for i, element in ipairs(tuple) do\n            concatenated_string = concatenated_string .. element\n            if i ~= #tuple then\n                concatenated_string = concatenated_string .. delimiter\n            end\n        end\n    end\n\n    return concatenated_string\nend",
            "gen_tc": "",
            "sim_score": "0.5055"
        },
        {
            "id": "310",
            "prompt": "Write a function to convert a given string to a tuple of characters.",
            "draft_plan": "# Initialize an empty tuple\n\n# Iterate through each character in the input string\n    # Append the character to the tuple\n\n# Return the tuple",
            "requirements": "",
            "final_plan": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result",
            "code": "function string_to_tuple(string)\n    local tuple = {}\n    \n    for i = 1, string.len(string) do\n        local char = string.sub(string, i, i)\n        table.insert(tuple, char)\n    end\n    \n    return tuple\nend",
            "gen_tc": "",
            "sim_score": "0.5048"
        },
        {
            "id": "238",
            "prompt": "Write a python function to count the number of non-empty substrings of a given string.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each character and its index in the input string\n    # Iterate through each substring starting from the current character\n        # Increment the counter variable by 1 for each non-empty substring\n\n# Return the counter variable",
            "requirements": "",
            "final_plan": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ",
            "code": "function count_substrings(str)\n    local count = 0\n    for i = 1, #str do\n        for j = i, #str do\n            local substring = string.sub(str, i, j)\n            if substring ~= \"\" then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4915"
        },
        {
            "id": "242",
            "prompt": "Write a function to count the total number of characters in a string.",
            "draft_plan": "# Initialize a variable to keep track of the character count, set it to 0\n\n# Iterate through each character in the string\n    # Increment the character count by 1\n\n# Return the character count",
            "requirements": "",
            "final_plan": "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total",
            "code": "function countCharacters(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        count = count + 1\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4484"
        },
        {
            "id": "59",
            "prompt": "Write a function to find the nth octagonal number.",
            "draft_plan": "# Function to find the nth octagonal number\ndef find_octagonal_number(n):\n    # Calculate the nth octagonal number using the formula\n    octagonal_number = 3 * n * (n - 1) + 1\n    \n    # Return the result\n    return octagonal_number\n\n# Test the function\nn = 5\nresult = find_octagonal_number(n)\nprint(f\"The {n}th octagonal number is: {result}\")",
            "requirements": "",
            "final_plan": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ",
            "code": "-- Function to find the nth octagonal number\nfunction find_octagonal_number(n)\n    -- Calculate the nth octagonal number using the formula\n    local octagonal_number = 3 * n * (n - 1) + 1\n    \n    -- Return the result\n    return octagonal_number\nend\n\n-- Test the function\nlocal n = 5\nlocal result = find_octagonal_number(n)\nprint(\"The \"..n..\"th octagonal number is: \"..result)",
            "gen_tc": "",
            "sim_score": "0.4469"
        },
        {
            "id": "439",
            "prompt": "Write a function to join a list of multiple integers into a single integer.",
            "draft_plan": "# Convert each integer in the list to a string\n# Join the list of strings into a single string\n# Convert the resulting string back to an integer and return it",
            "requirements": "",
            "final_plan": "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x",
            "code": "function join_integers(int_list)\n    local str_list = {}\n    for _, num in ipairs(int_list) do\n        table.insert(str_list, tostring(num))\n    end\n    local joined_str = table.concat(str_list)\n    return tonumber(joined_str)\nend",
            "gen_tc": "",
            "sim_score": "0.4435"
        },
        {
            "id": "84",
            "prompt": "Write a function to find the nth number in the newman conway sequence.",
            "draft_plan": "# Create a list to store the Newman-Conway sequence\n# Initialize the first two elements of the sequence\n# Iterate from index 3 up to the given number n\n    # Calculate the next element of the sequence using the previous elements\n# Return the nth element of the sequence",
            "requirements": "",
            "final_plan": "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))",
            "code": "function newmanConway(n)\n    if n <= 0 then\n        return nil\n    elseif n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        local sequence = {1, 1}\n        for i = 3, n do\n            sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n        end\n        return sequence[n]\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4403"
        }
    ],
    "HumanEval/16": [
        {
            "id": "461",
            "prompt": "Write a python function to count the upper case characters in a given string.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of uppercase characters\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter variable\n\n# Return the counter variable, which represents the number of uppercase characters in the string",
            "requirements": "",
            "final_plan": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
            "code": "function count_uppercase_chars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= 'A' and char <= 'Z' then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.6740"
        },
        {
            "id": "165",
            "prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
            "draft_plan": "# Initialize a variable to keep track of the count of characters at the same position in the English alphabet\n# Iterate through each character in the input string\n    # Convert the character to lowercase\n    # Check if the character is an alphabet character\n        # Get the position of the character in the English alphabet by subtracting the ASCII value of 'a' or 'A'\n        # Check if the position is equal to the index of the character in the string\n            # If the condition is true, increment the count\n\n# Return the count of characters at the same position in the English alphabet",
            "requirements": "",
            "final_plan": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ",
            "code": "function countSamePositionChars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local c = string.lower(string.sub(str, i, i))\n        if c >= \"a\" and c <= \"z\" then\n            local position = string.byte(c) - string.byte(\"a\") + 1\n            if position == i then\n                count = count + 1\n            end\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.6719"
        },
        {
            "id": "395",
            "prompt": "Write a python function to find the first non-repeated character in a given string.",
            "draft_plan": "# Create an empty dictionary to store the count of each character\n# Iterate through each character in the given string\n    # If the character is already in the dictionary, increase its count by 1\n    # If the character is not in the dictionary, add it with a count of 1\n\n# Iterate through each character in the given string again\n    # Check if the count of the current character in the dictionary is 1\n        # If it is, return the current character as the first non-repeated character\n\n# If no non-repeated character is found, return \"None\"",
            "requirements": "",
            "final_plan": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None",
            "code": "function firstNonRepeatedChar(str)\n    local charCount = {}\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if charCount[char] then\n            charCount[char] = charCount[char] + 1\n        else\n            charCount[char] = 1\n        end\n    end\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if charCount[char] == 1 then\n            return char\n        end\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.6661"
        },
        {
            "id": "400",
            "prompt": "Write a function to extract the number of unique tuples in the given list.",
            "draft_plan": "# Create an empty set to store unique tuples\n\n# Iterate through each tuple in the given list\n    # Convert the tuple to a frozenset and add it to the set of unique tuples\n\n# Return the length of the set of unique tuples",
            "requirements": "",
            "final_plan": "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)",
            "code": "function count_unique_tuples(tuple_list)\n    local unique_tuples = {}\n    \n    for _, tup in ipairs(tuple_list) do\n        local frozen_tup = frozenset(tup)\n        unique_tuples[frozen_tup] = true\n    end\n    \n    return len(unique_tuples)\nend",
            "gen_tc": "",
            "sim_score": "0.6192"
        },
        {
            "id": "238",
            "prompt": "Write a python function to count the number of non-empty substrings of a given string.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each character and its index in the input string\n    # Iterate through each substring starting from the current character\n        # Increment the counter variable by 1 for each non-empty substring\n\n# Return the counter variable",
            "requirements": "",
            "final_plan": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ",
            "code": "function count_substrings(str)\n    local count = 0\n    for i = 1, #str do\n        for j = i, #str do\n            local substring = string.sub(str, i, j)\n            if substring ~= \"\" then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5999"
        },
        {
            "id": "242",
            "prompt": "Write a function to count the total number of characters in a string.",
            "draft_plan": "# Initialize a variable to keep track of the character count, set it to 0\n\n# Iterate through each character in the string\n    # Increment the character count by 1\n\n# Return the character count",
            "requirements": "",
            "final_plan": "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total",
            "code": "function countCharacters(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        count = count + 1\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5973"
        },
        {
            "id": "172",
            "prompt": "Write a function to count the number of occurence of the string 'std' in a given string.",
            "draft_plan": "# Initialize a count variable to 0\n\n# Iterate through each character and its index in the input string\n    # Check if the current character and the next two characters form the string 'std'\n        # If the condition is satisfied, increment the count variable\n\n# Return the count variable",
            "requirements": "",
            "final_plan": "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count",
            "code": "function count_occurrence(string)\n    local count = 0\n\n    for i = 1, string.len(string) - 2 do\n        if string.sub(string, i, i + 2) == \"std\" then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5904"
        },
        {
            "id": "281",
            "prompt": "Write a python function to check if the elements of a given list are unique or not.",
            "draft_plan": "# Convert the input list into a set\n# Compare the length of the input list with the length of the set\n    # If they are equal, return True (all elements are unique)\n    # If they are not equal, return False (there are duplicate elements)",
            "requirements": "",
            "final_plan": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True",
            "code": "function are_elements_unique(lst)\n    local unique_set = {}\n    for _, elem in ipairs(lst) do\n        if unique_set[elem] then\n            return false\n        else\n            unique_set[elem] = true\n        end\n    end\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.5893"
        },
        {
            "id": "446",
            "prompt": "Write a python function to count the occurence of all elements of list in a tuple.",
            "draft_plan": "# Initialize an empty dictionary to store the element counts\n\n# Iterate through each element in the list\n    # Check if the element exists in the tuple\n        # If it exists, increment the count in the dictionary by 1\n        # If it doesn't exist, add the element to the dictionary with a count of 1\n\n# Return the dictionary with the element counts",
            "requirements": "",
            "final_plan": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ",
            "code": "function count_occurrence(list, tuple)\n    local counts = {}\n    \n    for _, element in ipairs(list) do\n        if contains(tuple, element) then\n            counts[element] = (counts[element] or 0) + 1\n        end\n    end\n    \n    return counts\nend\n\nfunction contains(tuple, element)\n    for _, value in ipairs(tuple) do\n        if value == element then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5676"
        },
        {
            "id": "250",
            "prompt": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the tuple\n    # Check if the current element is equal to the target element\n        # If it is, increment the counter by 1\n\n# Return the value of the counter variable",
            "requirements": "",
            "final_plan": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ",
            "code": "function count_occurrences(t, element)\n    local count = 0\n    \n    for i = 1, #t do\n        if t[i] == element then\n            count = count + 1\n        end\n    end\n    \n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5652"
        }
    ],
    "HumanEval/17": [
        {
            "id": "283",
            "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
            "draft_plan": "# Convert the input integer to a string\n# Initialize a dictionary to store the frequency of each digit\n\n# Iterate through each digit in the string\n    # Increment the frequency of the digit in the dictionary\n\n# Iterate through each digit in the string\n    # Check if the frequency of the digit is greater than the digit itself\n        # If yes, return False\n\n# If all frequencies are less than or equal to their respective digits, return True",
            "requirements": "",
            "final_plan": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
            "code": "function check_frequency(num)\n    local str_num = tostring(num)\n    local freq_dict = {}\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        freq_dict[digit] = (freq_dict[digit] or 0) + 1\n    end\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        if freq_dict[digit] > tonumber(digit) then\n            return false\n        end\n    end\n\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.5506"
        },
        {
            "id": "128",
            "prompt": "Write a function to find words that are longer than n characters from a given list of words.",
            "draft_plan": "# Create an empty list to store the result\n\n# Iterate through each word in the given list\n    # Check if the length of the current word is greater than n\n        # If the condition is satisfied, append the word to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t",
            "code": "function find_longer_words(word_list, n)\n    local result = {}\n\n    for _, word in ipairs(word_list) do\n        if string.len(word) > n then\n            table.insert(result, word)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4949"
        },
        {
            "id": "253",
            "prompt": "Write a python function that returns the number of integer elements in a given list.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the given list\n    # Check if the current element is an integer\n        # If it is an integer, increment the counter variable\n\n# Return the counter variable as the number of integer elements in the list",
            "requirements": "",
            "final_plan": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr",
            "code": "function count_integer_elements(lst)\n    local count = 0\n\n    for _, element in ipairs(lst) do\n        if type(element) == \"number\" and math.floor(element) == element then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4727"
        },
        {
            "id": "418",
            "prompt": "Write a python function to find the element of a list having maximum length.",
            "draft_plan": "# Initialize a variable to store the index of the element with maximum length\n# Initialize a variable to store the maximum length, initially set to 0\n\n# Iterate through each element in the list\n    # Check if the length of the current element is greater than the maximum length\n        # If so, update the maximum length and the index of the element\n\n# Return the element at the index with maximum length",
            "requirements": "",
            "final_plan": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList",
            "code": "function findMaxElementLength(lst)\n    local maxIndex = 1\n    local maxLength = 0\n\n    for i, element in ipairs(lst) do\n        local length = string.len(element)\n        if length > maxLength then\n            maxLength = length\n            maxIndex = i\n        end\n    end\n\n    return lst[maxIndex]\nend",
            "gen_tc": "",
            "sim_score": "0.4700"
        },
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.4696"
        },
        {
            "id": "61",
            "prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of substrings\n\n# Iterate through each starting index of the substring\n    # Iterate through each ending index of the substring\n        # Get the substring from the starting index to the ending index\n        # Compute the sum of the digits in the substring\n        # Check if the sum of the digits is equal to the length of the substring\n            # If true, increment the counter variable\n\n# Return the counter variable with the total number of substrings",
            "requirements": "",
            "final_plan": "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count",
            "code": "function count_substrings(string)\n    local count = 0\n\n    for i = 1, string.len(string) do\n        for j = i, string.len(string) do\n            local substring = string.sub(string, i, j)\n            local sum = compute_sum(substring)\n            \n            if sum == string.len(substring) then\n                count = count + 1\n            end\n        end\n    end\n\n    return count\nend\n\nfunction compute_sum(substring)\n    local sum = 0\n\n    for i = 1, string.len(substring) do\n        local digit = tonumber(string.sub(substring, i, i))\n        sum = sum + digit\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4589"
        },
        {
            "id": "450",
            "prompt": "Write a function to extract specified size of strings from a given list of string values.",
            "draft_plan": "# Initialize an empty list to store the extracted strings\n\n# Iterate through each string in the given list\n    # Check if the length of the current string is equal to the specified size\n        # If it matches, append the string to the result list\n\n# Return the list of extracted strings",
            "requirements": "",
            "final_plan": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result",
            "code": "function extract_strings(strings, size)\n    local extracted_strings = {}\n\n    for _, str in ipairs(strings) do\n        if string.len(str) == size then\n            table.insert(extracted_strings, str)\n        end\n    end\n\n    return extracted_strings\nend",
            "gen_tc": "",
            "sim_score": "0.4541"
        },
        {
            "id": "262",
            "prompt": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.",
            "draft_plan": "# Check if the given list has enough elements to split into two parts\n    # If not, return the original list as the first part and an empty list as the second part\n\n# Split the list into two parts at index L\n    # First part is from index 0 to index L-1\n    # Second part is from index L to the end of the list\n\n# Return the resulting lists as a tuple",
            "requirements": "",
            "final_plan": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]",
            "code": "function split_list(lst, L)\n    if #lst < L then\n        return lst, {}\n    end\n\n    local first_part = {}\n    local second_part = {}\n\n    for i = 1, #lst do\n        if i <= L then\n            table.insert(first_part, lst[i])\n        else\n            table.insert(second_part, lst[i])\n        end\n    end\n\n    return first_part, second_part\nend",
            "gen_tc": "",
            "sim_score": "0.4534"
        },
        {
            "id": "238",
            "prompt": "Write a python function to count the number of non-empty substrings of a given string.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each character and its index in the input string\n    # Iterate through each substring starting from the current character\n        # Increment the counter variable by 1 for each non-empty substring\n\n# Return the counter variable",
            "requirements": "",
            "final_plan": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ",
            "code": "function count_substrings(str)\n    local count = 0\n    for i = 1, #str do\n        for j = i, #str do\n            local substring = string.sub(str, i, j)\n            if substring ~= \"\" then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4509"
        },
        {
            "id": "239",
            "prompt": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
            "draft_plan": "# Initialize a variable count to keep track of the number of possible sequences\n\n# Create a recursive function to find the number of possible sequences\n    # Base case: if n is equal to 0, return 1 (as we have found a valid sequence)\n    \n    # Initialize a variable total_count to keep track of the total number of sequences\n    \n    # Iterate through all possible values for the current element in the sequence\n        # Check if the current element is greater than or equal to twice the previous element and less than or equal to m\n            # If it is, recursively call the function with n-1 and update the total_count by adding the result\n            \n    # Return the total_count\n    \n# Call the recursive function with the given values of m and n and store the result in the variable count\n\n# Return the value of count as the final result",
            "requirements": "",
            "final_plan": "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]",
            "code": "function count_sequences(m, n)\n    local count = 0\n\n    local function find_sequences(prev, remaining)\n        if remaining == 0 then\n            return 1\n        end\n\n        local total_count = 0\n        for i = prev * 2, m do\n            total_count = total_count + find_sequences(i, remaining - 1)\n        end\n\n        return total_count\n    end\n\n    count = find_sequences(1, n)\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4381"
        }
    ],
    "HumanEval/18": [
        {
            "id": "238",
            "prompt": "Write a python function to count the number of non-empty substrings of a given string.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each character and its index in the input string\n    # Iterate through each substring starting from the current character\n        # Increment the counter variable by 1 for each non-empty substring\n\n# Return the counter variable",
            "requirements": "",
            "final_plan": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ",
            "code": "function count_substrings(str)\n    local count = 0\n    for i = 1, #str do\n        for j = i, #str do\n            local substring = string.sub(str, i, j)\n            if substring ~= \"\" then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.6883"
        },
        {
            "id": "61",
            "prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of substrings\n\n# Iterate through each starting index of the substring\n    # Iterate through each ending index of the substring\n        # Get the substring from the starting index to the ending index\n        # Compute the sum of the digits in the substring\n        # Check if the sum of the digits is equal to the length of the substring\n            # If true, increment the counter variable\n\n# Return the counter variable with the total number of substrings",
            "requirements": "",
            "final_plan": "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count",
            "code": "function count_substrings(string)\n    local count = 0\n\n    for i = 1, string.len(string) do\n        for j = i, string.len(string) do\n            local substring = string.sub(string, i, j)\n            local sum = compute_sum(substring)\n            \n            if sum == string.len(substring) then\n                count = count + 1\n            end\n        end\n    end\n\n    return count\nend\n\nfunction compute_sum(substring)\n    local sum = 0\n\n    for i = 1, string.len(substring) do\n        local digit = tonumber(string.sub(substring, i, i))\n        sum = sum + digit\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6317"
        },
        {
            "id": "172",
            "prompt": "Write a function to count the number of occurence of the string 'std' in a given string.",
            "draft_plan": "# Initialize a count variable to 0\n\n# Iterate through each character and its index in the input string\n    # Check if the current character and the next two characters form the string 'std'\n        # If the condition is satisfied, increment the count variable\n\n# Return the count variable",
            "requirements": "",
            "final_plan": "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count",
            "code": "function count_occurrence(string)\n    local count = 0\n\n    for i = 1, string.len(string) - 2 do\n        if string.sub(string, i, i + 2) == \"std\" then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.6119"
        },
        {
            "id": "91",
            "prompt": "Write a function to check if a string is present as a substring in a given list of string values.",
            "draft_plan": "# Iterate through each string in the list\n    # Check if the given substring is present in the current string\n        # If found, return True\n\n# If the substring is not found in any string, return False",
            "requirements": "",
            "final_plan": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False",
            "code": "function isSubstringPresent(substring, stringList)\n    for _, str in ipairs(stringList) do\n        if string.find(str, substring) then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5972"
        },
        {
            "id": "250",
            "prompt": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the tuple\n    # Check if the current element is equal to the target element\n        # If it is, increment the counter by 1\n\n# Return the value of the counter variable",
            "requirements": "",
            "final_plan": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ",
            "code": "function count_occurrences(t, element)\n    local count = 0\n    \n    for i = 1, #t do\n        if t[i] == element then\n            count = count + 1\n        end\n    end\n    \n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5861"
        },
        {
            "id": "395",
            "prompt": "Write a python function to find the first non-repeated character in a given string.",
            "draft_plan": "# Create an empty dictionary to store the count of each character\n# Iterate through each character in the given string\n    # If the character is already in the dictionary, increase its count by 1\n    # If the character is not in the dictionary, add it with a count of 1\n\n# Iterate through each character in the given string again\n    # Check if the count of the current character in the dictionary is 1\n        # If it is, return the current character as the first non-repeated character\n\n# If no non-repeated character is found, return \"None\"",
            "requirements": "",
            "final_plan": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None",
            "code": "function firstNonRepeatedChar(str)\n    local charCount = {}\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if charCount[char] then\n            charCount[char] = charCount[char] + 1\n        else\n            charCount[char] = 1\n        end\n    end\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if charCount[char] == 1 then\n            return char\n        end\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.5806"
        },
        {
            "id": "425",
            "prompt": "Write a function to count the number of sublists containing a particular element.",
            "draft_plan": "# Initialize a count variable to 0\n\n# Iterate through each sublist in the main list\n    # Check if the particular element is present in the sublist\n        # If yes, increment the count variable\n\n# Return the count variable",
            "requirements": "",
            "final_plan": "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr",
            "code": "function countSublistsWithElement(main_list, element)\n    local count = 0\n\n    for _, sublist in ipairs(main_list) do\n        for _, item in ipairs(sublist) do\n            if item == element then\n                count = count + 1\n                break\n            end\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5671"
        },
        {
            "id": "165",
            "prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
            "draft_plan": "# Initialize a variable to keep track of the count of characters at the same position in the English alphabet\n# Iterate through each character in the input string\n    # Convert the character to lowercase\n    # Check if the character is an alphabet character\n        # Get the position of the character in the English alphabet by subtracting the ASCII value of 'a' or 'A'\n        # Check if the position is equal to the index of the character in the string\n            # If the condition is true, increment the count\n\n# Return the count of characters at the same position in the English alphabet",
            "requirements": "",
            "final_plan": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ",
            "code": "function countSamePositionChars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local c = string.lower(string.sub(str, i, i))\n        if c >= \"a\" and c <= \"z\" then\n            local position = string.byte(c) - string.byte(\"a\") + 1\n            if position == i then\n                count = count + 1\n            end\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5572"
        },
        {
            "id": "446",
            "prompt": "Write a python function to count the occurence of all elements of list in a tuple.",
            "draft_plan": "# Initialize an empty dictionary to store the element counts\n\n# Iterate through each element in the list\n    # Check if the element exists in the tuple\n        # If it exists, increment the count in the dictionary by 1\n        # If it doesn't exist, add the element to the dictionary with a count of 1\n\n# Return the dictionary with the element counts",
            "requirements": "",
            "final_plan": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ",
            "code": "function count_occurrence(list, tuple)\n    local counts = {}\n    \n    for _, element in ipairs(list) do\n        if contains(tuple, element) then\n            counts[element] = (counts[element] or 0) + 1\n        end\n    end\n    \n    return counts\nend\n\nfunction contains(tuple, element)\n    for _, value in ipairs(tuple) do\n        if value == element then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5418"
        },
        {
            "id": "461",
            "prompt": "Write a python function to count the upper case characters in a given string.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of uppercase characters\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter variable\n\n# Return the counter variable, which represents the number of uppercase characters in the string",
            "requirements": "",
            "final_plan": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
            "code": "function count_uppercase_chars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= 'A' and char <= 'Z' then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5390"
        }
    ],
    "HumanEval/19": [
        {
            "id": "475",
            "prompt": "Write a function to sort a dictionary by value.",
            "draft_plan": "# Use the sorted() function with a lambda function as the key parameter\n# The lambda function takes each key-value pair from the dictionary and returns the value\n# The sorted() function will sort the dictionary based on the values in ascending order\n# Pass the sorted dictionary to the dict() function to convert it back to a dictionary type\n\ndef sort_dict_by_value(dictionary):\n    sorted_dict = dict(sorted(dictionary.items(), key=lambda item: item[1]))\n    return sorted_dict",
            "requirements": "",
            "final_plan": "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter",
            "code": "function sortDictByValue(dictionary)\n    local sortedKeys = {}\n    \n    for key, _ in pairs(dictionary) do\n        table.insert(sortedKeys, key)\n    end\n    \n    table.sort(sortedKeys, function(a, b)\n        return dictionary[a] < dictionary[b]\n    end)\n    \n    local sortedDict = {}\n    \n    for _, key in ipairs(sortedKeys) do\n        sortedDict[key] = dictionary[key]\n    end\n    \n    return sortedDict\nend",
            "gen_tc": "",
            "sim_score": "0.6717"
        },
        {
            "id": "57",
            "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.",
            "draft_plan": "# Sort the list of digits in descending order\n\n# Concatenate all the digits in the sorted list\n\n# Convert the concatenated string to an integer and return it",
            "requirements": "",
            "final_plan": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ",
            "code": "function largest_number(digits)\n    table.sort(digits, function(a, b) return a > b end)\n    return tonumber(table.concat(digits))\nend",
            "gen_tc": "",
            "sim_score": "0.6552"
        },
        {
            "id": "407",
            "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.",
            "draft_plan": "# Convert the given number to a list of digits\n\n# Find the first index (from right to left) where the digit is smaller than the digit to its right\n    # If no such index is found, return \"None\" since the number is already the largest possible\n\n# Find the smallest digit to the right of the found index that is larger than the digit at the found index\n\n# Swap the found digit with the smallest larger digit to its right\n\n# Sort the digits to the right of the found index in ascending order\n\n# Concatenate the digits to form the next bigger number\n\n# Return the next bigger number",
            "requirements": "",
            "final_plan": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False",
            "code": "function nextBiggerNumber(num)\n    -- Convert the number to a list of digits\n    local digits = {}\n    local n = num\n    while n > 0 do\n        table.insert(digits, 1, n % 10)\n        n = math.floor(n / 10)\n    end\n\n    -- Find the first index where the digit is smaller than the digit to its right\n    local i = #digits - 1\n    while i >= 1 and digits[i] >= digits[i+1] do\n        i = i - 1\n    end\n\n    -- If no such index is found, return \"None\"\n    if i < 1 then\n        return \"None\"\n    end\n\n    -- Find the smallest larger digit to the right of the found index\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n\n    -- Swap the found digit with the smallest larger digit to its right\n    digits[i], digits[j] = digits[j], digits[i]\n\n    -- Sort the digits to the right of the found index in ascending order\n    for k = i+1, #digits do\n        for l = k+1, #digits do\n            if digits[k] > digits[l] then\n                digits[k], digits[l] = digits[l], digits[k]\n            end\n        end\n    end\n\n    -- Concatenate the digits to form the next bigger number\n    local nextNum = 0\n    for k = 1, #digits do\n        nextNum = nextNum * 10 + digits[k]\n    end\n\n    return nextNum\nend",
            "gen_tc": "",
            "sim_score": "0.5980"
        },
        {
            "id": "104",
            "prompt": "Write a function to sort each sublist of strings in a given list of lists.",
            "draft_plan": "# Iterate through each sublist in the given list\n    # Sort the sublist using the sorted() function and assign the sorted sublist back to the original sublist\n\n# Return the modified list with sorted sublists",
            "requirements": "",
            "final_plan": "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n",
            "code": "function sort_sublists(list_of_lists)\n    for i = 1, #list_of_lists do\n        list_of_lists[i] = table.sort(list_of_lists[i])\n    end\n    return list_of_lists\nend",
            "gen_tc": "",
            "sim_score": "0.5940"
        },
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.5873"
        },
        {
            "id": "141",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Implement a sorting algorithm such as bubble sort, insertion sort, merge sort, quick sort, etc.\n\n# Define a function to take a list of elements as input\n    # Iterate through the list to compare each element with its adjacent element(s)\n        # Swap elements if they are in the wrong order\n    # Repeat the above steps until the list is sorted\n\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums",
            "code": "-- Bubble Sort implementation\nfunction sort_list(list)\n    local n = #list\n    for i = 1, n-1 do\n        for j = 1, n-i do\n            if list[j] > list[j+1] then\n                list[j], list[j+1] = list[j+1], list[j]\n            end\n        end\n    end\n    return list\nend",
            "gen_tc": "",
            "sim_score": "0.5841"
        },
        {
            "id": "64",
            "prompt": "Write a function to sort a list of tuples using the second value of each tuple.",
            "draft_plan": "# Define a function to sort a list of tuples by the second value\n    # Use the sorted() function and a lambda function as the key parameter\n    # The lambda function will extract the second value from each tuple for sorting\n    \n# Call the sorted() function with the list of tuples and the custom sorting function as arguments\n# Return the sorted list of tuples",
            "requirements": "",
            "final_plan": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks",
            "code": "function sort_tuples_by_second_value(tuples)\n    return table.sort(tuples, function(a, b) return a[2] < b[2] end)\nend",
            "gen_tc": "",
            "sim_score": "0.5728"
        },
        {
            "id": "71",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Use the built-in sorted() function to sort the list in ascending order\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums",
            "code": "function sort_list(elements)\n    return sorted(elements)\nend",
            "gen_tc": "",
            "sim_score": "0.5724"
        },
        {
            "id": "479",
            "prompt": "Write a python function to find the first digit of a given number.",
            "draft_plan": "# Convert the given number to a string\n\n# Iterate through each character in the string\n    # Check if the character is a digit\n        # If it is, return the character as the first digit\n\n# If no digit is found, return \"None\"",
            "requirements": "",
            "final_plan": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ",
            "code": "function firstDigit(number)\n    local numberStr = tostring(number)\n\n    for i = 1, string.len(numberStr) do\n        local char = string.sub(numberStr, i, i)\n        if string.match(char, \"%d\") then\n            return char\n        end\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.5068"
        },
        {
            "id": "476",
            "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.",
            "draft_plan": "# Sort the array in ascending order\n# Initialize variables for the smallest and largest values\n\n# Get the smallest value from the sorted array (first element)\n# Get the largest value from the sorted array (last element)\n\n# Calculate the sum of the smallest and largest values\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum",
            "code": "function sum_smallest_largest(arr)\n    table.sort(arr) -- Sort the array in ascending order\n    \n    local smallest = arr[1] -- Get the smallest value\n    local largest = arr[#arr] -- Get the largest value\n    \n    local sum = smallest + largest -- Calculate the sum\n    \n    return sum -- Return the sum\nend",
            "gen_tc": "",
            "sim_score": "0.5051"
        }
    ],
    "HumanEval/20": [
        {
            "id": "63",
            "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.",
            "draft_plan": "# Initialize the maximum difference variable to 0\n\n# Iterate through each pair in the list\n    # Calculate the difference between the second element and the first element of the current pair\n    # Check if the current difference is greater than the maximum difference\n        # If it is, update the maximum difference\n\n# Return the maximum difference",
            "requirements": "",
            "final_plan": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ",
            "code": "function find_max_difference(tuple_list)\n    local max_difference = 0\n\n    for _, tuple in ipairs(tuple_list) do\n        local difference = tuple[2] - tuple[1]\n        if difference > max_difference then\n            max_difference = difference\n        end\n    end\n\n    return max_difference\nend",
            "gen_tc": "",
            "sim_score": "0.6600"
        },
        {
            "id": "94",
            "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
            "draft_plan": "# Initialize the minimum second value as positive infinity\n# Initialize the first value of the tuple with minimum second value as None\n\n# Iterate through each tuple in the list\n    # Check if the second value of the current tuple is smaller than the current minimum second value\n        # If yes, update the minimum second value and the first value of the tuple\n\n# Return the first value of the tuple with the smallest second value",
            "requirements": "",
            "final_plan": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ",
            "code": "function get_first_smallest_value(test_list)\n    local min_second = math.huge\n    local first_value = nil\n    \n    for _, tup in ipairs(test_list) do\n        local second_value = tup[2]\n        \n        if second_value < min_second then\n            min_second = second_value\n            first_value = tup[1]\n        end\n    end\n    \n    return first_value\nend",
            "gen_tc": "",
            "sim_score": "0.6303"
        },
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.6228"
        },
        {
            "id": "145",
            "prompt": "Write a python function to find the maximum difference between any two elements in a given array.",
            "draft_plan": "# If the array is empty, return None\n# Initialize the maximum difference to zero\n\n# Iterate through each element in the array\n    # Iterate through each element after the current element\n        # Calculate the difference between the current element and the subsequent element\n        # Update the maximum difference if the calculated difference is greater than the current maximum difference\n\n# Return the maximum difference",
            "requirements": "",
            "final_plan": "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ",
            "code": "function max_difference(arr)\n    if #arr == 0 then\n        return nil\n    end\n\n    local max_diff = 0\n\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            local diff = math.abs(arr[i] - arr[j])\n            if diff > max_diff then\n                max_diff = diff\n            end\n        end\n    end\n\n    return max_diff\nend",
            "gen_tc": "",
            "sim_score": "0.5971"
        },
        {
            "id": "89",
            "prompt": "Write a function to find the closest smaller number than n.",
            "draft_plan": "# Initialize a variable to store the closest smaller number\n# Iterate from n-1 to 1 in descending order\n    # Check if the current number is smaller than n\n        # If yes, update the closest smaller number and break the loop\n\n# Return the closest smaller number",
            "requirements": "",
            "final_plan": "def closest_num(N):\n  return (N - 1)",
            "code": "function findClosestSmallerNumber(n)\n    local closestSmaller = nil\n\n    for i = n-1, 1, -1 do\n        if i < n then\n            closestSmaller = i\n            break\n        end\n    end\n\n    return closestSmaller\nend",
            "gen_tc": "",
            "sim_score": "0.5846"
        },
        {
            "id": "409",
            "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.",
            "draft_plan": "# Initialize the minimum product to positive infinity\n\n# Iterate through each pair of tuples in the list\n    # Calculate the product of the two tuples\n    # Check if the product is less than the current minimum product\n        # If yes, update the minimum product\n\n# Return the minimum product",
            "requirements": "",
            "final_plan": "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min",
            "code": "function find_minimum_product(list)\n    local min_product = math.huge\n\n    for i = 1, #list-1 do\n        local tuple1 = list[i]\n        for j = i+1, #list do\n            local tuple2 = list[j]\n            local product = calculate_product(tuple1, tuple2)\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n\n    return min_product\nend\n\nfunction calculate_product(tuple1, tuple2)\n    local product = 1\n    for _, num in ipairs(tuple1) do\n        product = product * num\n    end\n    for _, num in ipairs(tuple2) do\n        product = product * num\n    end\n    return product\nend",
            "gen_tc": "",
            "sim_score": "0.5737"
        },
        {
            "id": "404",
            "prompt": "Write a python function to find the minimum of two numbers.",
            "draft_plan": "# Define a function to find the minimum of two numbers\n    # Check if the first number is less than the second number\n        # If true, return the first number\n        # If false, return the second number\n\n# Call the function and pass two numbers as arguments",
            "requirements": "",
            "final_plan": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ",
            "code": "function find_minimum(a, b)\n    if a < b then\n        return a\n    else\n        return b\n    end\nend\n\n-- Example usage\nlocal num1 = 10\nlocal num2 = 5\nlocal min = find_minimum(num1, num2)\nprint(min)  -- Output: 5",
            "gen_tc": "",
            "sim_score": "0.5567"
        },
        {
            "id": "410",
            "prompt": "Write a function to find the minimum value in a given heterogeneous list.",
            "draft_plan": "# Initialize the minimum value to the first element in the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the minimum value\n        # If it is, update the minimum value\n\n# Return the minimum value",
            "requirements": "",
            "final_plan": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val",
            "code": "function find_minimum_value(lst)\n    local min_value = lst[1]\n    \n    for i = 2, #lst do\n        if lst[i] < min_value then\n            min_value = lst[i]\n        end\n    end\n    \n    return min_value\nend",
            "gen_tc": "",
            "sim_score": "0.5291"
        },
        {
            "id": "95",
            "prompt": "Write a python function to find the length of the smallest list in a list of lists.",
            "draft_plan": "# Initialize the minimum length to a large number\n\n# Iterate through each list in the input list\n    # Check the length of the current list\n        # If the length is smaller than the current minimum length, update the minimum length\n\n# Return the minimum length",
            "requirements": "",
            "final_plan": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength ",
            "code": "function find_smallest_list_length(list_of_lists)\n    local min_length = math.huge\n\n    for _, list in ipairs(list_of_lists) do\n        local length = #list\n        if length < min_length then\n            min_length = length\n        end\n    end\n\n    return min_length\nend",
            "gen_tc": "",
            "sim_score": "0.5157"
        },
        {
            "id": "470",
            "prompt": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.",
            "draft_plan": "# Initialize an empty list to store the pairwise addition results\n\n# Iterate through the elements in the tuple up to the second to last element\n    # Compute the pairwise addition of the current element and its neighboring element\n    # Append the result to the list\n\n# Return the list of pairwise addition results",
            "requirements": "",
            "final_plan": "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ",
            "code": "function pairwise_addition(tup)\n    local result = {}\n\n    for i = 1, #tup - 1 do\n        local sum = tup[i] + tup[i+1]\n        table.insert(result, sum)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5132"
        }
    ],
    "HumanEval/21": [
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.5320"
        },
        {
            "id": "117",
            "prompt": "Write a function to convert all possible convertible elements in a list of lists to floats.",
            "draft_plan": "# Iterate through each sublist in the input list\n    # Iterate through each element in the sublist\n        # Try to convert the element to a float\n        # If successful, replace the element with the float value\n\n# Return the modified input list",
            "requirements": "",
            "final_plan": "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res",
            "code": "function convert_to_floats(list_of_lists)\n    for i, sublist in ipairs(list_of_lists) do\n        for j, element in ipairs(sublist) do\n            local success, value = pcall(function() return tonumber(element) end)\n            if success then\n                list_of_lists[i][j] = value\n            end\n        end\n    end\n    return list_of_lists\nend",
            "gen_tc": "",
            "sim_score": "0.5264"
        },
        {
            "id": "98",
            "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
            "draft_plan": "# Initialize the product variable to 1\n\n# Iterate through each number in the list\n    # Multiply the product by the current number\n\n# Divide the product by the length of the list\n\n# Return the result",
            "requirements": "",
            "final_plan": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ",
            "code": "function multiply_and_divide(numbers)\n    local product = 1\n\n    for _, num in ipairs(numbers) do\n        product = product * num\n    end\n\n    local result = product / #numbers\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5122"
        },
        {
            "id": "292",
            "prompt": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
            "draft_plan": "To find the quotient of two numbers rounded down to the nearest integer, you can use the floor division operator `//` in Python.\n\nHere is the code logic:\n\n```python\ndef quotient(a, b):\n    return a // b\n```\n\nIn this code, the function `quotient` takes two parameters `a` and `b`, representing the numbers for which we want to find the quotient. The floor division `a // b` divides `a` by `b` and returns the quotient rounded down to the nearest integer.\n\nYou can call this function with your desired values to find the quotient. For example:\n\n```python\nresult = quotient(10, 3)\nprint(result)  # Output: 3\n```",
            "requirements": "",
            "final_plan": "def find(n,m):  \n    q = n//m \n    return (q)",
            "code": "function quotient(a, b)\n    return math.floor(a / b)\nend\n\n-- Example usage\nlocal result = quotient(10, 3)\nprint(result) -- Output: 3",
            "gen_tc": "",
            "sim_score": "0.5088"
        },
        {
            "id": "419",
            "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
            "draft_plan": "# Initialize a variable to store the total sum\n# Iterate through each number in the list\n    # Round the number to the nearest integer\n    # Add the rounded number to the total sum\n\n# Calculate the total sum multiplied by the length of the list\n# Print the result",
            "requirements": "",
            "final_plan": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum",
            "code": "function round_and_multiply(numbers)\n    local total_sum = 0\n\n    for _, num in ipairs(numbers) do\n        total_sum = total_sum + math.round(num)\n    end\n\n    local result = total_sum * #numbers\n    print(result)\nend\n\nfunction math.round(num)\n    return math.floor(num + 0.5)\nend",
            "gen_tc": "",
            "sim_score": "0.5075"
        },
        {
            "id": "261",
            "prompt": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
            "draft_plan": "# Create an empty list to store the result of the division operation\n\n# Iterate through the elements of the tuples\n    # Perform the division operation on the corresponding elements of the tuples\n    # Append the result to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
            "code": "function tuple_division(t1, t2)\n    local result = {}\n\n    for i = 1, #t1 do\n        local div = t1[i] / t2[i]\n        table.insert(result, div)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4837"
        },
        {
            "id": "443",
            "prompt": "Write a python function to find the largest negative number from the given list.",
            "draft_plan": "# Initialize a variable 'largest_negative' to None\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If 'largest_negative' is None or the current number is greater than 'largest_negative', update 'largest_negative' to the current number\n\n# Return 'largest_negative'",
            "requirements": "",
            "final_plan": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
            "code": "function find_largest_negative(numbers)\n    local largest_negative = nil\n\n    for _, number in ipairs(numbers) do\n        if number < 0 then\n            if largest_negative == nil or number > largest_negative then\n                largest_negative = number\n            end\n        end\n    end\n\n    return largest_negative\nend",
            "gen_tc": "",
            "sim_score": "0.4811"
        },
        {
            "id": "94",
            "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
            "draft_plan": "# Initialize the minimum second value as positive infinity\n# Initialize the first value of the tuple with minimum second value as None\n\n# Iterate through each tuple in the list\n    # Check if the second value of the current tuple is smaller than the current minimum second value\n        # If yes, update the minimum second value and the first value of the tuple\n\n# Return the first value of the tuple with the smallest second value",
            "requirements": "",
            "final_plan": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ",
            "code": "function get_first_smallest_value(test_list)\n    local min_second = math.huge\n    local first_value = nil\n    \n    for _, tup in ipairs(test_list) do\n        local second_value = tup[2]\n        \n        if second_value < min_second then\n            min_second = second_value\n            first_value = tup[1]\n        end\n    end\n    \n    return first_value\nend",
            "gen_tc": "",
            "sim_score": "0.4763"
        },
        {
            "id": "476",
            "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.",
            "draft_plan": "# Sort the array in ascending order\n# Initialize variables for the smallest and largest values\n\n# Get the smallest value from the sorted array (first element)\n# Get the largest value from the sorted array (last element)\n\n# Calculate the sum of the smallest and largest values\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum",
            "code": "function sum_smallest_largest(arr)\n    table.sort(arr) -- Sort the array in ascending order\n    \n    local smallest = arr[1] -- Get the smallest value\n    local largest = arr[#arr] -- Get the largest value\n    \n    local sum = smallest + largest -- Calculate the sum\n    \n    return sum -- Return the sum\nend",
            "gen_tc": "",
            "sim_score": "0.4618"
        },
        {
            "id": "445",
            "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
            "draft_plan": "# Create an empty list to store the result of multiplication\n\n# Iterate through the indexes of the tuples using the range of the length of the tuples\n    # Multiply the elements at the current index of both tuples\n    # Append the result to the list\n\n# Return the list",
            "requirements": "",
            "final_plan": "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
            "code": "function multiply_tuples(tuple1, tuple2)\n    local result = {}\n\n    for i = 1, #tuple1 do\n        local multiplication = tuple1[i] * tuple2[i]\n        table.insert(result, multiplication)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4616"
        }
    ],
    "HumanEval/22": [
        {
            "id": "253",
            "prompt": "Write a python function that returns the number of integer elements in a given list.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the given list\n    # Check if the current element is an integer\n        # If it is an integer, increment the counter variable\n\n# Return the counter variable as the number of integer elements in the list",
            "requirements": "",
            "final_plan": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr",
            "code": "function count_integer_elements(lst)\n    local count = 0\n\n    for _, element in ipairs(lst) do\n        if type(element) == \"number\" and math.floor(element) == element then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5905"
        },
        {
            "id": "426",
            "prompt": "Write a function to filter odd numbers.",
            "draft_plan": "# Initialize an empty list to store the filtered numbers\n\n# Iterate through each number in the input list\n    # Check if the number is odd\n        # If the number is odd, append it to the filtered list\n\n# Return the filtered list",
            "requirements": "",
            "final_plan": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums",
            "code": "function filter_odd_numbers(number_list)\n    local filtered_list = {}\n\n    for _, num in ipairs(number_list) do\n        if num % 2 ~= 0 then\n            table.insert(filtered_list, num)\n        end\n    end\n\n    return filtered_list\nend",
            "gen_tc": "",
            "sim_score": "0.5659"
        },
        {
            "id": "277",
            "prompt": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.",
            "draft_plan": "# Initialize an empty dictionary to store the filtered entries\n\n# Iterate through each key-value pair in the input dictionary\n    # Check if the value is greater than or equal to n\n        # If it is, add the key-value pair to the filtered dictionary\n\n# Return the filtered dictionary",
            "requirements": "",
            "final_plan": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result",
            "code": "function filter_dictionary(dict, n)\n    local filtered_dict = {}\n\n    for key, value in pairs(dict) do\n        if value >= n then\n            filtered_dict[key] = value\n        end\n    end\n\n    return filtered_dict\nend",
            "gen_tc": "",
            "sim_score": "0.5438"
        },
        {
            "id": "412",
            "prompt": "Write a python function to remove odd numbers from a given list.",
            "draft_plan": "# Create an empty list to store the even numbers\n\n# Iterate through each number in the given list\n    # Check if the number is even (number % 2 == 0)\n        # If the number is even, append it to the list of even numbers\n\n# Return the list of even numbers",
            "requirements": "",
            "final_plan": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
            "code": "function remove_odd_numbers(lst)\n    local even_lst = {}\n\n    for _, num in ipairs(lst) do\n        if num % 2 == 0 then\n            table.insert(even_lst, num)\n        end\n    end\n\n    return even_lst\nend",
            "gen_tc": "",
            "sim_score": "0.5060"
        },
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.4974"
        },
        {
            "id": "439",
            "prompt": "Write a function to join a list of multiple integers into a single integer.",
            "draft_plan": "# Convert each integer in the list to a string\n# Join the list of strings into a single string\n# Convert the resulting string back to an integer and return it",
            "requirements": "",
            "final_plan": "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x",
            "code": "function join_integers(int_list)\n    local str_list = {}\n    for _, num in ipairs(int_list) do\n        table.insert(str_list, tostring(num))\n    end\n    local joined_str = table.concat(str_list)\n    return tonumber(joined_str)\nend",
            "gen_tc": "",
            "sim_score": "0.4884"
        },
        {
            "id": "283",
            "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
            "draft_plan": "# Convert the input integer to a string\n# Initialize a dictionary to store the frequency of each digit\n\n# Iterate through each digit in the string\n    # Increment the frequency of the digit in the dictionary\n\n# Iterate through each digit in the string\n    # Check if the frequency of the digit is greater than the digit itself\n        # If yes, return False\n\n# If all frequencies are less than or equal to their respective digits, return True",
            "requirements": "",
            "final_plan": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
            "code": "function check_frequency(num)\n    local str_num = tostring(num)\n    local freq_dict = {}\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        freq_dict[digit] = (freq_dict[digit] or 0) + 1\n    end\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        if freq_dict[digit] > tonumber(digit) then\n            return false\n        end\n    end\n\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.4792"
        },
        {
            "id": "436",
            "prompt": "Write a python function to return the negative numbers in a list.",
            "draft_plan": "# Initialize an empty list to store the negative numbers\n\n# Iterate through each element in the input list\n    # Check if the current element is less than 0\n        # If the element is negative, append it to the list of negative numbers\n\n# Return the list of negative numbers",
            "requirements": "",
            "final_plan": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ",
            "code": "function getNegativeNumbers(numbers)\n    local negativeNumbers = {}\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            table.insert(negativeNumbers, num)\n        end\n    end\n\n    return negativeNumbers\nend",
            "gen_tc": "",
            "sim_score": "0.4742"
        },
        {
            "id": "419",
            "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
            "draft_plan": "# Initialize a variable to store the total sum\n# Iterate through each number in the list\n    # Round the number to the nearest integer\n    # Add the rounded number to the total sum\n\n# Calculate the total sum multiplied by the length of the list\n# Print the result",
            "requirements": "",
            "final_plan": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum",
            "code": "function round_and_multiply(numbers)\n    local total_sum = 0\n\n    for _, num in ipairs(numbers) do\n        total_sum = total_sum + math.round(num)\n    end\n\n    local result = total_sum * #numbers\n    print(result)\nend\n\nfunction math.round(num)\n    return math.floor(num + 0.5)\nend",
            "gen_tc": "",
            "sim_score": "0.4711"
        },
        {
            "id": "117",
            "prompt": "Write a function to convert all possible convertible elements in a list of lists to floats.",
            "draft_plan": "# Iterate through each sublist in the input list\n    # Iterate through each element in the sublist\n        # Try to convert the element to a float\n        # If successful, replace the element with the float value\n\n# Return the modified input list",
            "requirements": "",
            "final_plan": "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res",
            "code": "function convert_to_floats(list_of_lists)\n    for i, sublist in ipairs(list_of_lists) do\n        for j, element in ipairs(sublist) do\n            local success, value = pcall(function() return tonumber(element) end)\n            if success then\n                list_of_lists[i][j] = value\n            end\n        end\n    end\n    return list_of_lists\nend",
            "gen_tc": "",
            "sim_score": "0.4670"
        }
    ],
    "HumanEval/23": [
        {
            "id": "242",
            "prompt": "Write a function to count the total number of characters in a string.",
            "draft_plan": "# Initialize a variable to keep track of the character count, set it to 0\n\n# Iterate through each character in the string\n    # Increment the character count by 1\n\n# Return the character count",
            "requirements": "",
            "final_plan": "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total",
            "code": "function countCharacters(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        count = count + 1\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5972"
        },
        {
            "id": "238",
            "prompt": "Write a python function to count the number of non-empty substrings of a given string.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each character and its index in the input string\n    # Iterate through each substring starting from the current character\n        # Increment the counter variable by 1 for each non-empty substring\n\n# Return the counter variable",
            "requirements": "",
            "final_plan": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ",
            "code": "function count_substrings(str)\n    local count = 0\n    for i = 1, #str do\n        for j = i, #str do\n            local substring = string.sub(str, i, j)\n            if substring ~= \"\" then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5696"
        },
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.5426"
        },
        {
            "id": "479",
            "prompt": "Write a python function to find the first digit of a given number.",
            "draft_plan": "# Convert the given number to a string\n\n# Iterate through each character in the string\n    # Check if the character is a digit\n        # If it is, return the character as the first digit\n\n# If no digit is found, return \"None\"",
            "requirements": "",
            "final_plan": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ",
            "code": "function firstDigit(number)\n    local numberStr = tostring(number)\n\n    for i = 1, string.len(numberStr) do\n        local char = string.sub(numberStr, i, i)\n        if string.match(char, \"%d\") then\n            return char\n        end\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.5404"
        },
        {
            "id": "310",
            "prompt": "Write a function to convert a given string to a tuple of characters.",
            "draft_plan": "# Initialize an empty tuple\n\n# Iterate through each character in the input string\n    # Append the character to the tuple\n\n# Return the tuple",
            "requirements": "",
            "final_plan": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result",
            "code": "function string_to_tuple(string)\n    local tuple = {}\n    \n    for i = 1, string.len(string) do\n        local char = string.sub(string, i, i)\n        table.insert(tuple, char)\n    end\n    \n    return tuple\nend",
            "gen_tc": "",
            "sim_score": "0.5379"
        },
        {
            "id": "269",
            "prompt": "Write a function to find the ascii value of a character.",
            "draft_plan": "To find the ASCII value of a character in Python, you can use the `ord()` function. Here is the code logic:\n\n1. Define a function `find_ascii_value(char)` that takes a character as input.\n2. Inside the function, use the `ord()` function to find the ASCII value of the character.\n3. Return the ASCII value.\n\nHere is the code:\n\n```python\ndef find_ascii_value(char):\n    return ord(char)\n```\n\nYou can then call this function and pass the character whose ASCII value you want to find, like this:\n\n```python\nprint(find_ascii_value('A')) # Output: 65\n```\n\nNote that the `ord()` function only works with single characters. If you pass a string with multiple characters, it will raise a `TypeError`.",
            "requirements": "",
            "final_plan": "def ascii_value(k):\n  ch=k\n  return ord(ch)",
            "code": "In Lua, the `string.byte()` function can be used to find the ASCII value of a character. Here is the Lua code to find the ASCII value of a character:\n\n```lua\nfunction find_ascii_value(char)\n    return string.byte(char)\nend\n```\n\nYou can then call this function and pass the character whose ASCII value you want to find, like this:\n\n```lua\nprint(find_ascii_value(\"A\")) -- Output: 65\n```\n\nNote that in Lua, you need to pass the character as a string to the `string.byte()` function.",
            "gen_tc": "",
            "sim_score": "0.5372"
        },
        {
            "id": "61",
            "prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of substrings\n\n# Iterate through each starting index of the substring\n    # Iterate through each ending index of the substring\n        # Get the substring from the starting index to the ending index\n        # Compute the sum of the digits in the substring\n        # Check if the sum of the digits is equal to the length of the substring\n            # If true, increment the counter variable\n\n# Return the counter variable with the total number of substrings",
            "requirements": "",
            "final_plan": "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count",
            "code": "function count_substrings(string)\n    local count = 0\n\n    for i = 1, string.len(string) do\n        for j = i, string.len(string) do\n            local substring = string.sub(string, i, j)\n            local sum = compute_sum(substring)\n            \n            if sum == string.len(substring) then\n                count = count + 1\n            end\n        end\n    end\n\n    return count\nend\n\nfunction compute_sum(substring)\n    local sum = 0\n\n    for i = 1, string.len(substring) do\n        local digit = tonumber(string.sub(substring, i, i))\n        sum = sum + digit\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5287"
        },
        {
            "id": "132",
            "prompt": "Write a function to convert a tuple to a string.",
            "draft_plan": "# Initialize an empty string\n\n# Iterate through each element in the tuple\n    # Convert the element to a string and append it to the result string\n    # Add a comma after each element except for the last element\n\n# Return the result string",
            "requirements": "",
            "final_plan": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str",
            "code": "function tupleToString(tuple)\n    local result = \"\"\n\n    for i, element in ipairs(tuple) do\n        result = result .. tostring(element)\n\n        if i < #tuple then\n            result = result .. \",\"\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5287"
        },
        {
            "id": "11",
            "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
            "draft_plan": "# Find the index of the first occurrence of the given character in the string\n# Find the index of the last occurrence of the given character in the string\n\n# If both indices are valid\n    # Remove the first occurrence of the character from the string\n    # Decrement the index of the last occurrence by 1 to account for the removal\n    # Remove the last occurrence of the character from the string\n\n# Return the modified string",
            "requirements": "",
            "final_plan": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ",
            "code": "function removeFirstAndLastOccurrence(str, char)\n    local firstIndex = string.find(str, char)\n    local lastIndex = string.find(str:reverse(), char)\n\n    if firstIndex and lastIndex then\n        str = string.sub(str, 1, firstIndex - 1) .. string.sub(str, firstIndex + 1)\n        lastIndex = string.len(str) - lastIndex + 1\n        str = string.sub(str, 1, lastIndex - 1) .. string.sub(str, lastIndex + 1)\n    end\n\n    return str\nend",
            "gen_tc": "",
            "sim_score": "0.5261"
        },
        {
            "id": "461",
            "prompt": "Write a python function to count the upper case characters in a given string.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of uppercase characters\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter variable\n\n# Return the counter variable, which represents the number of uppercase characters in the string",
            "requirements": "",
            "final_plan": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
            "code": "function count_uppercase_chars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= 'A' and char <= 'Z' then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5063"
        }
    ],
    "HumanEval/24": [
        {
            "id": "96",
            "prompt": "Write a python function to find the number of divisors of a given integer.",
            "draft_plan": "# Initialize a count variable to 0\n\n# Iterate through each number from 1 to the given integer\n    # Check if the current number is a divisor of the given integer\n        # If yes, increment the count variable\n\n# Return the count variable",
            "requirements": "",
            "final_plan": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x",
            "code": "function countDivisors(num)\n    local count = 0\n\n    for i = 1, num do\n        if num % i == 0 then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.6358"
        },
        {
            "id": "57",
            "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.",
            "draft_plan": "# Sort the list of digits in descending order\n\n# Concatenate all the digits in the sorted list\n\n# Convert the concatenated string to an integer and return it",
            "requirements": "",
            "final_plan": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ",
            "code": "function largest_number(digits)\n    table.sort(digits, function(a, b) return a > b end)\n    return tonumber(table.concat(digits))\nend",
            "gen_tc": "",
            "sim_score": "0.5987"
        },
        {
            "id": "126",
            "prompt": "Write a python function to find the sum of common divisors of two given numbers.",
            "draft_plan": "# Find the common divisors of the two given numbers\n    # Find the smaller number among the two\n    # Initialize an empty list to store the common divisors\n    # Iterate from 1 to the smaller number\n        # Check if the current number is a divisor of both given numbers\n            # If yes, add it to the list of common divisors\n\n# Find the sum of the common divisors\n    # Initialize a variable to store the sum\n    # Iterate through the list of common divisors\n        # Add each divisor to the sum\n\n# Return the sum of the common divisors",
            "requirements": "",
            "final_plan": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum",
            "code": "function sumCommonDivisors(a, b)\n    local smaller = math.min(a, b)\n    local divisors = {}\n\n    for i = 1, smaller do\n        if a % i == 0 and b % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n\n    local sum = 0\n    for _, divisor in ipairs(divisors) do\n        sum = sum + divisor\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5838"
        },
        {
            "id": "232",
            "prompt": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.",
            "draft_plan": "# Sort the list in descending order\n# Return the first n items from the sorted list",
            "requirements": "",
            "final_plan": "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest",
            "code": "function get_n_largest_items(lst, n)\n    table.sort(lst, function(a, b) return a > b end)\n    return {table.unpack(lst, 1, n)}\nend",
            "gen_tc": "",
            "sim_score": "0.5822"
        },
        {
            "id": "443",
            "prompt": "Write a python function to find the largest negative number from the given list.",
            "draft_plan": "# Initialize a variable 'largest_negative' to None\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If 'largest_negative' is None or the current number is greater than 'largest_negative', update 'largest_negative' to the current number\n\n# Return 'largest_negative'",
            "requirements": "",
            "final_plan": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
            "code": "function find_largest_negative(numbers)\n    local largest_negative = nil\n\n    for _, number in ipairs(numbers) do\n        if number < 0 then\n            if largest_negative == nil or number > largest_negative then\n                largest_negative = number\n            end\n        end\n    end\n\n    return largest_negative\nend",
            "gen_tc": "",
            "sim_score": "0.5540"
        },
        {
            "id": "309",
            "prompt": "Write a python function to find the maximum of two numbers.",
            "draft_plan": "# Define a function that takes two numbers as input\n\n# Check if the first number is greater than the second number\n    # If it is, return the first number as the maximum\n    # Otherwise, return the second number as the maximum",
            "requirements": "",
            "final_plan": "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b ",
            "code": "function find_maximum(num1, num2)\n    if num1 > num2 then\n        return num1\n    else\n        return num2\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5405"
        },
        {
            "id": "295",
            "prompt": "Write a function to return the sum of all divisors of a number.",
            "draft_plan": "# Initialize the sum of divisors to 0\n\n# Iterate from 1 to the given number\n    # Check if the current number is a divisor of the given number\n        # If it is, add it to the sum of divisors\n\n# Return the sum of divisors",
            "requirements": "",
            "final_plan": "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)",
            "code": "function sum_of_divisors(num)\n    local sum = 0\n\n    for i = 1, num do\n        if num % i == 0 then\n            sum = sum + i\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5354"
        },
        {
            "id": "164",
            "prompt": "Write a function to determine if the sum of the divisors of two integers are the same.",
            "draft_plan": "# Define a function to calculate the sum of divisors for a given number\n    # Initialize the sum to 0\n    # Iterate through each number from 1 to the given number\n        # Check if the current number is a divisor of the given number\n            # If it is, add it to the sum\n\n# Define a function to determine if the sum of divisors for two numbers are the same\n    # Calculate the sum of divisors for both numbers\n    # Check if the sums are equal\n        # If they are, return True\n        # Otherwise, return False",
            "requirements": "",
            "final_plan": "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); ",
            "code": "function sumOfDivisors(n)\n    local sum = 0\n    for i = 1, n do\n        if n % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\n\nfunction sameSumOfDivisors(num1, num2)\n    local sum1 = sumOfDivisors(num1)\n    local sum2 = sumOfDivisors(num2)\n    return sum1 == sum2\nend",
            "gen_tc": "",
            "sim_score": "0.5178"
        },
        {
            "id": "388",
            "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.",
            "draft_plan": "# Initialize the highest power of 2 to 1\n\n# While the highest power of 2 is less than or equal to n\n    # Multiply the highest power of 2 by 2\n\n# Divide the highest power of 2 by 2 to get the result",
            "requirements": "",
            "final_plan": "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res ",
            "code": "function highest_power_of_2(n)\n    local power = 1\n\n    while power * 2 <= n do\n        power = power * 2\n    end\n\n    return power\nend",
            "gen_tc": "",
            "sim_score": "0.5176"
        },
        {
            "id": "392",
            "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
            "draft_plan": "# Create a dictionary to store the maximum sum for each number\n# Set the base cases for f(0) and f(1) as 0 and 1 respectively\n\n# Define a recursive function to calculate the maximum sum for a given number\n    # Check if the maximum sum for the current number has already been calculated\n        # If yes, return the stored value\n        # If no, calculate the maximum sum using the given equation\n\n# Call the recursive function to calculate the maximum sum for the given number",
            "requirements": "",
            "final_plan": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]",
            "code": "function max_sum(n)\n    local memo = {}  -- dictionary to store the maximum sum for each number\n\n    -- base cases\n    memo[0] = 0\n    memo[1] = 1\n\n    -- recursive function to calculate maximum sum\n    local function calculate_sum(num)\n        if memo[num] ~= nil then  -- check if maximum sum is already calculated\n            return memo[num]\n        end\n\n        -- calculate maximum sum using the given equation\n        memo[num] = math.max(calculate_sum(math.floor(num/2)) + calculate_sum(math.floor(num/3)) + calculate_sum(math.floor(num/4)) + calculate_sum(math.floor(num/5)), num)\n        return memo[num]\n    end\n\n    return calculate_sum(n)  -- call the recursive function to calculate maximum sum for given number\nend",
            "gen_tc": "",
            "sim_score": "0.5134"
        }
    ],
    "HumanEval/25": [
        {
            "id": "98",
            "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
            "draft_plan": "# Initialize the product variable to 1\n\n# Iterate through each number in the list\n    # Multiply the product by the current number\n\n# Divide the product by the length of the list\n\n# Return the result",
            "requirements": "",
            "final_plan": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ",
            "code": "function multiply_and_divide(numbers)\n    local product = 1\n\n    for _, num in ipairs(numbers) do\n        product = product * num\n    end\n\n    local result = product / #numbers\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5689"
        },
        {
            "id": "453",
            "prompt": "Write a python function to find the sum of even factors of a number.",
            "draft_plan": "# Initialize the sum of even factors to 0\n\n# Iterate from 1 to the given number (inclusive)\n    # Check if the current number is a factor of the given number\n        # Check if the current number is even\n            # If the current number is even, add it to the sum of even factors\n\n# Return the sum of even factors",
            "requirements": "",
            "final_plan": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res",
            "code": "function sum_of_even_factors(number)\n    local sum = 0\n\n    for i = 1, number do\n        if number % i == 0 and i % 2 == 0 then\n            sum = sum + i\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5631"
        },
        {
            "id": "471",
            "prompt": "Write a python function to find the product of the array multiplication modulo n.",
            "draft_plan": "# Initialize the product to 1\n\n# Iterate through each element in the array\n    # Multiply the current element with the product\n    # Take the modulo of the product with n\n\n# Return the final product modulo n",
            "requirements": "",
            "final_plan": "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ",
            "code": "function arrayProductModuloN(arr, n)\n    local product = 1\n\n    for _, num in ipairs(arr) do\n        product = (product * num) % n\n    end\n\n    return product\nend",
            "gen_tc": "",
            "sim_score": "0.5449"
        },
        {
            "id": "126",
            "prompt": "Write a python function to find the sum of common divisors of two given numbers.",
            "draft_plan": "# Find the common divisors of the two given numbers\n    # Find the smaller number among the two\n    # Initialize an empty list to store the common divisors\n    # Iterate from 1 to the smaller number\n        # Check if the current number is a divisor of both given numbers\n            # If yes, add it to the list of common divisors\n\n# Find the sum of the common divisors\n    # Initialize a variable to store the sum\n    # Iterate through the list of common divisors\n        # Add each divisor to the sum\n\n# Return the sum of the common divisors",
            "requirements": "",
            "final_plan": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum",
            "code": "function sumCommonDivisors(a, b)\n    local smaller = math.min(a, b)\n    local divisors = {}\n\n    for i = 1, smaller do\n        if a % i == 0 and b % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n\n    local sum = 0\n    for _, divisor in ipairs(divisors) do\n        sum = sum + divisor\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5389"
        },
        {
            "id": "256",
            "prompt": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
            "draft_plan": "# Define a function to check if a number is prime\n    # Check if the number is less than 2, return False\n    # Iterate from 2 to the square root of the number\n        # Check if the number is divisible by any number in the range\n            # If divisible, return False\n    # If the number is not divisible by any number in the range, return True\n\n# Define a function to count the number of primes less than a given number\n    # Initialize a count variable to 0\n    # Iterate from 2 to the given number\n        # Check if the current number is prime\n            # If prime, increment the count\n    # Return the count",
            "requirements": "",
            "final_plan": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr",
            "code": "function isPrime(n)\n    if n < 2 then\n        return false\n    end\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            return false\n        end\n    end\n    return true\nend\n\nfunction countPrimes(n)\n    local count = 0\n    for i = 2, n - 1 do\n        if isPrime(i) then\n            count = count + 1\n        end\n    end\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5308"
        },
        {
            "id": "96",
            "prompt": "Write a python function to find the number of divisors of a given integer.",
            "draft_plan": "# Initialize a count variable to 0\n\n# Iterate through each number from 1 to the given integer\n    # Check if the current number is a divisor of the given integer\n        # If yes, increment the count variable\n\n# Return the count variable",
            "requirements": "",
            "final_plan": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x",
            "code": "function countDivisors(num)\n    local count = 0\n\n    for i = 1, num do\n        if num % i == 0 then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5276"
        },
        {
            "id": "244",
            "prompt": "Write a python function to find the next perfect square greater than a given number.",
            "draft_plan": "# Calculate the square root of the given number using math.sqrt() function\n\n# Increment the square root by 1\n\n# Calculate the next perfect square by squaring the incremented square root\n\n# Return the next perfect square",
            "requirements": "",
            "final_plan": "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN ",
            "code": "function nextPerfectSquare(n)\n    local sqrt = math.sqrt(n)\n    local nextRoot = math.floor(sqrt) + 1\n    local nextSquare = nextRoot * nextRoot\n    return nextSquare\nend",
            "gen_tc": "",
            "sim_score": "0.4898"
        },
        {
            "id": "127",
            "prompt": "Write a function to multiply two integers.",
            "draft_plan": "# Initialize the result to 0\n\n# If either of the integers is 0, return 0\n\n# If both integers are negative, convert them to positive\n    # Multiply the positive integers and change the sign of the result to negative\n\n# If only one integer is negative, convert it to positive\n    # Multiply the positive integers and change the sign of the result to negative\n\n# If both integers are positive, multiply them normally\n\n# Return the result",
            "requirements": "",
            "final_plan": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)",
            "code": "function multiply(a, b)\n    local result = 0\n    \n    if a == 0 or b == 0 then\n        return 0\n    end\n    \n    if a < 0 and b < 0 then\n        a = -a\n        b = -b\n    elseif a < 0 then\n        a = -a\n        result = -result\n    elseif b < 0 then\n        b = -b\n        result = -result\n    end\n    \n    while b > 0 do\n        if b % 2 == 1 then\n            result = result + a\n        end\n        a = a * 2\n        b = math.floor(b / 2)\n    end\n    \n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4823"
        },
        {
            "id": "72",
            "prompt": "Write a python function to check whether the given number can be represented as the difference of two squares or not.",
            "draft_plan": "# Iterate through all numbers from 1 to sqrt(n)\n    # Calculate the square of the current number\n    # Check if the difference between n and the square is a perfect square\n\n# If a perfect square difference is found, return True\n# If no perfect square difference is found, return False",
            "requirements": "",
            "final_plan": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False",
            "code": "function can_be_difference_of_squares(n)\n    for i = 1, math.floor(math.sqrt(n)) do\n        local square = i * i\n        local difference = n - square\n        local square_root = math.sqrt(difference)\n        if square_root == math.floor(square_root) then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4804"
        },
        {
            "id": "308",
            "prompt": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.",
            "draft_plan": "# Create an empty list to store the products\n\n# Iterate through each element in the first list\n    # Iterate through each element in the second list\n        # Calculate the product of the current elements from both lists\n        # Append the product to the list of products\n\n# Sort the list of products in descending order\n\n# Return the specified number of largest products from the list",
            "requirements": "",
            "final_plan": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result",
            "code": "function find_largest_products(list1, list2, num_products)\n    local products = {}\n\n    for i = 1, #list1 do\n        for j = 1, #list2 do\n            local product = list1[i] * list2[j]\n            table.insert(products, product)\n        end\n    end\n\n    table.sort(products, function(a, b) return a > b end)\n\n    local largest_products = {}\n    for i = 1, num_products do\n        if i <= #products then\n            table.insert(largest_products, products[i])\n        else\n            break\n        end\n    end\n\n    return largest_products\nend",
            "gen_tc": "",
            "sim_score": "0.4731"
        }
    ],
    "HumanEval/26": [
        {
            "id": "281",
            "prompt": "Write a python function to check if the elements of a given list are unique or not.",
            "draft_plan": "# Convert the input list into a set\n# Compare the length of the input list with the length of the set\n    # If they are equal, return True (all elements are unique)\n    # If they are not equal, return False (there are duplicate elements)",
            "requirements": "",
            "final_plan": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True",
            "code": "function are_elements_unique(lst)\n    local unique_set = {}\n    for _, elem in ipairs(lst) do\n        if unique_set[elem] then\n            return false\n        else\n            unique_set[elem] = true\n        end\n    end\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.7247"
        },
        {
            "id": "394",
            "prompt": "Write a function to check if given tuple contains no duplicates.",
            "draft_plan": "# Convert the tuple to a set\n# Check if the length of the set is equal to the length of the tuple\n    # If they are equal, it means there are no duplicates\n    # Otherwise, there are duplicates",
            "requirements": "",
            "final_plan": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res ",
            "code": "function check_no_duplicates(tup)\n    local set = {}\n    \n    for _, value in ipairs(tup) do\n        if set[value] then\n            return false\n        else\n            set[value] = true\n        end\n    end\n    \n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.6468"
        },
        {
            "id": "19",
            "prompt": "Write a function to find whether a given array of integers contains any duplicate element.",
            "draft_plan": "# Initialize an empty set\n\n# Iterate through each element in the input array\n    # Check if the element is already present in the set\n        # If yes, return True as duplicate element found\n        # If not, add the element to the set\n\n# If no duplicate element is found, return False",
            "requirements": "",
            "final_plan": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ",
            "code": "function containsDuplicate(array)\n    local set = {}\n    for _, num in ipairs(array) do\n        if set[num] then\n            return true\n        else\n            set[num] = true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.6361"
        },
        {
            "id": "119",
            "prompt": "Write a python function to find the element that appears only once in a sorted array.",
            "draft_plan": "# Initialize a variable to keep track of the unique element\n# Iterate through the sorted array\n    # Check if the current element is equal to the next element and the previous element\n        # If not, assign the current element to the unique variable\n\n# Return the unique element",
            "requirements": "",
            "final_plan": "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)",
            "code": "function find_unique_element(arr)\n    local unique = nil\n\n    for i = 1, #arr do\n        if (i == 1 or arr[i] ~= arr[i-1]) and (i == #arr or arr[i] ~= arr[i+1]) then\n            unique = arr[i]\n            break\n        end\n    end\n\n    return unique\nend",
            "gen_tc": "",
            "sim_score": "0.6224"
        },
        {
            "id": "400",
            "prompt": "Write a function to extract the number of unique tuples in the given list.",
            "draft_plan": "# Create an empty set to store unique tuples\n\n# Iterate through each tuple in the given list\n    # Convert the tuple to a frozenset and add it to the set of unique tuples\n\n# Return the length of the set of unique tuples",
            "requirements": "",
            "final_plan": "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)",
            "code": "function count_unique_tuples(tuple_list)\n    local unique_tuples = {}\n    \n    for _, tup in ipairs(tuple_list) do\n        local frozen_tup = frozenset(tup)\n        unique_tuples[frozen_tup] = true\n    end\n    \n    return len(unique_tuples)\nend",
            "gen_tc": "",
            "sim_score": "0.6113"
        },
        {
            "id": "161",
            "prompt": "Write a function to remove all elements from a given list present in another list.",
            "draft_plan": "# Initialize an empty list to store the elements not present in the other list\n\n# Iterate through each element in the given list\n    # Check if the element is not present in the other list\n        # If not present, add it to the new list\n\n# Return the new list",
            "requirements": "",
            "final_plan": "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result",
            "code": "function remove_elements(list1, list2)\n    local new_list = {}\n\n    for _, element in ipairs(list1) do\n        if not contains(list2, element) then\n            table.insert(new_list, element)\n        end\n    end\n\n    return new_list\nend\n\nfunction contains(list, element)\n    for _, value in ipairs(list) do\n        if value == element then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5777"
        },
        {
            "id": "237",
            "prompt": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.",
            "draft_plan": "# Initialize an empty dictionary\n\n# Iterate through each tuple in the list\n    # Check if the current tuple is already a key in the dictionary\n        # If it is, increment the count by 1\n        # If it is not, add the tuple as a key with a count of 1\n\n# Return the dictionary",
            "requirements": "",
            "final_plan": "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) ",
            "code": "function count_tuples(list_of_tuples)\n    local tuple_count = {}\n\n    for _, tup in ipairs(list_of_tuples) do\n        if tuple_count[tup] then\n            tuple_count[tup] = tuple_count[tup] + 1\n        else\n            tuple_count[tup] = 1\n        end\n    end\n\n    return tuple_count\nend",
            "gen_tc": "",
            "sim_score": "0.5774"
        },
        {
            "id": "472",
            "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.",
            "draft_plan": "# Sort the input list in ascending order\n\n# Iterate through each number in the sorted list, starting from the second number\n    # Check if the current number is consecutive to the previous number\n        # If not, return False\n\n# If all numbers are consecutive, return True",
            "requirements": "",
            "final_plan": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ",
            "code": "function checkConsecutive(lst)\n    table.sort(lst)\n    \n    for i = 2, #lst do\n        if lst[i] ~= lst[i-1] + 1 then\n            return false\n        end\n    end\n    \n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.5616"
        },
        {
            "id": "446",
            "prompt": "Write a python function to count the occurence of all elements of list in a tuple.",
            "draft_plan": "# Initialize an empty dictionary to store the element counts\n\n# Iterate through each element in the list\n    # Check if the element exists in the tuple\n        # If it exists, increment the count in the dictionary by 1\n        # If it doesn't exist, add the element to the dictionary with a count of 1\n\n# Return the dictionary with the element counts",
            "requirements": "",
            "final_plan": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ",
            "code": "function count_occurrence(list, tuple)\n    local counts = {}\n    \n    for _, element in ipairs(list) do\n        if contains(tuple, element) then\n            counts[element] = (counts[element] or 0) + 1\n        end\n    end\n    \n    return counts\nend\n\nfunction contains(tuple, element)\n    for _, value in ipairs(tuple) do\n        if value == element then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5586"
        },
        {
            "id": "395",
            "prompt": "Write a python function to find the first non-repeated character in a given string.",
            "draft_plan": "# Create an empty dictionary to store the count of each character\n# Iterate through each character in the given string\n    # If the character is already in the dictionary, increase its count by 1\n    # If the character is not in the dictionary, add it with a count of 1\n\n# Iterate through each character in the given string again\n    # Check if the count of the current character in the dictionary is 1\n        # If it is, return the current character as the first non-repeated character\n\n# If no non-repeated character is found, return \"None\"",
            "requirements": "",
            "final_plan": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None",
            "code": "function firstNonRepeatedChar(str)\n    local charCount = {}\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if charCount[char] then\n            charCount[char] = charCount[char] + 1\n        else\n            charCount[char] = 1\n        end\n    end\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if charCount[char] == 1 then\n            return char\n        end\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.5460"
        }
    ],
    "HumanEval/27": [
        {
            "id": "477",
            "prompt": "Write a python function to convert the given string to lower case.",
            "draft_plan": "# Convert the input string to lower case using the lower() method\n# Return the lower case string",
            "requirements": "",
            "final_plan": "def is_lower(string):\n  return (string.lower())",
            "code": "function convert_to_lower(str)\n    return string.lower(str)\nend",
            "gen_tc": "",
            "sim_score": "0.6501"
        },
        {
            "id": "131",
            "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
            "draft_plan": "# Create a list of vowels (including both lowercase and uppercase)\n# Convert the input string into a list of characters\n\n# Initialize two pointers: one at the start of the string and one at the end\n# Iterate while the pointers don't overlap\n    # Check if the character at the start pointer is a vowel\n        # If it is, then check if the character at the end pointer is also a vowel\n            # If it is, swap the characters at the start and end pointers\n            # Move the start pointer to the next character\n            # Move the end pointer to the previous character\n        # If the character at the end pointer is not a vowel, move the end pointer to the previous character\n    \n# Convert the modified list of characters back into a string and return it",
            "requirements": "",
            "final_plan": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string",
            "code": "function reverse_vowels(str)\n    local vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }\n    local chars = {}\n    for i = 1, string.len(str) do\n        table.insert(chars, string.sub(str, i, i))\n    end\n    \n    local start = 1\n    local finish = string.len(str)\n    \n    while start < finish do\n        if is_vowel(chars[start], vowels) then\n            while not is_vowel(chars[finish], vowels) and finish > start do\n                finish = finish - 1\n            end\n            if finish > start then\n                chars[start], chars[finish] = chars[finish], chars[start]\n                start = start + 1\n                finish = finish - 1\n            end\n        else\n            start = start + 1\n        end\n    end\n    \n    return table.concat(chars)\nend\n\nfunction is_vowel(char, vowels)\n    for _, vowel in ipairs(vowels) do\n        if char == vowel then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.6021"
        },
        {
            "id": "102",
            "prompt": "Write a function to convert a snake case string to camel case string.",
            "draft_plan": "# Split the snake case string by underscore to get individual words\n# Capitalize the first letter of each word except the first word\n# Join the words together to form the camel case string\n# Return the camel case string",
            "requirements": "",
            "final_plan": "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
            "code": "function snake_to_camel(snake_case_str)\n    local words = {}\n    for word in string.gmatch(snake_case_str, \"[^_]+\") do\n        table.insert(words, word)\n    end\n    \n    local camel_case_str = \"\"\n    for i, word in ipairs(words) do\n        if i > 1 then\n            word = string.upper(string.sub(word, 1, 1)) .. string.sub(word, 2)\n        end\n        camel_case_str = camel_case_str .. word\n    end\n    \n    return camel_case_str\nend",
            "gen_tc": "",
            "sim_score": "0.5713"
        },
        {
            "id": "461",
            "prompt": "Write a python function to count the upper case characters in a given string.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of uppercase characters\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter variable\n\n# Return the counter variable, which represents the number of uppercase characters in the string",
            "requirements": "",
            "final_plan": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
            "code": "function count_uppercase_chars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= 'A' and char <= 'Z' then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5679"
        },
        {
            "id": "456",
            "prompt": "Write a function to reverse each string in a given list of string values.",
            "draft_plan": "# Iterate through each string in the given list\n    # Reverse the current string using string slicing\n    # Update the current string in the list with the reversed string\n\n# Return the modified list",
            "requirements": "",
            "final_plan": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result",
            "code": "function reverse_strings(str_list)\n    for i = 1, #str_list do\n        str_list[i] = string.reverse(str_list[i])\n    end\n    return str_list\nend",
            "gen_tc": "",
            "sim_score": "0.5660"
        },
        {
            "id": "411",
            "prompt": "Write a function to convert the given snake case string to camel case string.",
            "draft_plan": "# Split the snake case string into words based on the underscore\n# Initialize an empty camel case string\n\n# Iterate through each word in the snake case string\n    # Capitalize the first letter of each word except the first word\n    # Append the capitalized word to the camel case string\n\n# Return the camel case string",
            "requirements": "",
            "final_plan": "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))",
            "code": "function snake_to_camel(snake_case_str)\n    local words = {}\n    local camel_case_str = \"\"\n\n    for word in string.gmatch(snake_case_str, \"([^_]+)\") do\n        table.insert(words, word)\n    end\n\n    for i, word in ipairs(words) do\n        if i > 1 then\n            word = string.upper(string.sub(word, 1, 1)) .. string.sub(word, 2)\n        end\n        camel_case_str = camel_case_str .. word\n    end\n\n    return camel_case_str\nend",
            "gen_tc": "",
            "sim_score": "0.5435"
        },
        {
            "id": "459",
            "prompt": "Write a function to remove uppercase substrings from a given string.",
            "draft_plan": "# Initialize an empty string to store the result\n\n# Iterate through each character in the input string\n    # Check if the current character is lowercase\n        # If it is lowercase, append it to the result string\n\n# Return the result string",
            "requirements": "",
            "final_plan": "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)",
            "code": "function removeUppercaseSubstrings(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= \"a\" and char <= \"z\" then\n            result = result .. char\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5198"
        },
        {
            "id": "478",
            "prompt": "Write a function to remove lowercase substrings from a given string.",
            "draft_plan": "# Initialize an empty string to store the final result\n\n# Iterate through each character in the given string\n    # Check if the character is uppercase\n        # If the character is uppercase, append it to the final result string\n\n# Return the final result string",
            "requirements": "",
            "final_plan": "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)",
            "code": "function removeLowercaseSubstrings(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        if string.upper(c) == c then\n            result = result .. c\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5184"
        },
        {
            "id": "56",
            "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
            "draft_plan": "# Convert the given number to a string and reverse it\n# Convert the reversed string back to an integer\n# Check if the given number is equal to twice the reversed number plus 1\n# If the condition is true, return True. Otherwise, return False.",
            "requirements": "",
            "final_plan": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
            "code": "function is_one_less_twice_reverse(number)\n    local reverse = tonumber(string.reverse(tostring(number)))\n    if number == (2 * reverse + 1) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4964"
        },
        {
            "id": "310",
            "prompt": "Write a function to convert a given string to a tuple of characters.",
            "draft_plan": "# Initialize an empty tuple\n\n# Iterate through each character in the input string\n    # Append the character to the tuple\n\n# Return the tuple",
            "requirements": "",
            "final_plan": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result",
            "code": "function string_to_tuple(string)\n    local tuple = {}\n    \n    for i = 1, string.len(string) do\n        local char = string.sub(string, i, i)\n        table.insert(tuple, char)\n    end\n    \n    return tuple\nend",
            "gen_tc": "",
            "sim_score": "0.4800"
        }
    ],
    "HumanEval/28": [
        {
            "id": "421",
            "prompt": "Write a function to concatenate each element of tuple by the delimiter.",
            "draft_plan": "# Initialize an empty string to store the concatenated elements\n\n# Iterate through each tuple in the input list\n    # Iterate through each element in the tuple\n        # Concatenate the element to the output string\n        # If the current element is not the last element in the tuple, append the delimiter\n\n# Return the concatenated string",
            "requirements": "",
            "final_plan": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ",
            "code": "function concatenate_tuple_elements(tuple_list, delimiter)\n    local concatenated_string = \"\"\n\n    for _, tuple in ipairs(tuple_list) do\n        for i, element in ipairs(tuple) do\n            concatenated_string = concatenated_string .. element\n            if i ~= #tuple then\n                concatenated_string = concatenated_string .. delimiter\n            end\n        end\n    end\n\n    return concatenated_string\nend",
            "gen_tc": "",
            "sim_score": "0.6811"
        },
        {
            "id": "87",
            "prompt": "Write a function to merge three dictionaries into a single dictionary.",
            "draft_plan": "# Initialize an empty dictionary to store the merged dictionaries\n\n# Iterate through each dictionary in the input list\n    # Iterate through each key-value pair in the current dictionary\n        # Add the key-value pair to the merged dictionary\n\n# Return the merged dictionary",
            "requirements": "",
            "final_plan": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict",
            "code": "function merge_dictionaries(dict_list)\n    local merged_dict = {}\n\n    for _, dictionary in ipairs(dict_list) do\n        for key, value in pairs(dictionary) do\n            merged_dict[key] = value\n        end\n    end\n\n    return merged_dict\nend",
            "gen_tc": "",
            "sim_score": "0.5790"
        },
        {
            "id": "132",
            "prompt": "Write a function to convert a tuple to a string.",
            "draft_plan": "# Initialize an empty string\n\n# Iterate through each element in the tuple\n    # Convert the element to a string and append it to the result string\n    # Add a comma after each element except for the last element\n\n# Return the result string",
            "requirements": "",
            "final_plan": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str",
            "code": "function tupleToString(tuple)\n    local result = \"\"\n\n    for i, element in ipairs(tuple) do\n        result = result .. tostring(element)\n\n        if i < #tuple then\n            result = result .. \",\"\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5786"
        },
        {
            "id": "439",
            "prompt": "Write a function to join a list of multiple integers into a single integer.",
            "draft_plan": "# Convert each integer in the list to a string\n# Join the list of strings into a single string\n# Convert the resulting string back to an integer and return it",
            "requirements": "",
            "final_plan": "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x",
            "code": "function join_integers(int_list)\n    local str_list = {}\n    for _, num in ipairs(int_list) do\n        table.insert(str_list, tostring(num))\n    end\n    local joined_str = table.concat(str_list)\n    return tonumber(joined_str)\nend",
            "gen_tc": "",
            "sim_score": "0.5756"
        },
        {
            "id": "255",
            "prompt": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.",
            "draft_plan": "import itertools\n\ndef generate_combinations(lst, n):\n    # Use itertools.combinations_with_replacement to generate all combinations of length n\n    combinations = list(itertools.combinations_with_replacement(lst, n))\n    \n    # Convert the combinations to a list of tuples\n    result = [tuple(comb) for comb in combinations]\n    \n    return result",
            "requirements": "",
            "final_plan": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n",
            "code": "function generate_combinations(lst, n)\n    local combinations = {}\n    generate_combinations_helper(lst, n, {}, combinations)\n    return combinations\nend\n\nfunction generate_combinations_helper(lst, n, current_comb, combinations)\n    if #current_comb == n then\n        table.insert(combinations, current_comb)\n        return\n    end\n    \n    for i = 1, #lst do\n        local new_comb = {table.unpack(current_comb)}\n        table.insert(new_comb, lst[i])\n        generate_combinations_helper(lst, n, new_comb, combinations)\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5325"
        },
        {
            "id": "310",
            "prompt": "Write a function to convert a given string to a tuple of characters.",
            "draft_plan": "# Initialize an empty tuple\n\n# Iterate through each character in the input string\n    # Append the character to the tuple\n\n# Return the tuple",
            "requirements": "",
            "final_plan": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result",
            "code": "function string_to_tuple(string)\n    local tuple = {}\n    \n    for i = 1, string.len(string) do\n        local char = string.sub(string, i, i)\n        table.insert(tuple, char)\n    end\n    \n    return tuple\nend",
            "gen_tc": "",
            "sim_score": "0.5322"
        },
        {
            "id": "462",
            "prompt": "Write a function to find all possible combinations of the elements of a given list.",
            "draft_plan": "# Import the combinations function from the itertools module\n\n# Define the function to find all possible combinations\n    # Initialize an empty list to store the combinations\n    \n    # Use a for loop to iterate through different combination lengths\n        # Generate all combinations of the given list for the current combination length\n        # Append the combinations to the result list\n    \n    # Return the list of all possible combinations",
            "requirements": "",
            "final_plan": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result",
            "code": "Sorry, I can't generate Lua code at the moment. However, here's the Python code to find all possible combinations of elements in a given list using the `combinations` function from the `itertools` module:\n\n```python\nfrom itertools import combinations\n\ndef find_combinations(input_list):\n    result = []\n    n = len(input_list)\n\n    for r in range(1, n + 1):\n        combinations_list = list(combinations(input_list, r))\n        result.extend(combinations_list)\n\n    return result\n```\n\nYou can call this function by passing the input list as an argument, and it will return a list containing all possible combinations of the elements.",
            "gen_tc": "",
            "sim_score": "0.5220"
        },
        {
            "id": "106",
            "prompt": "Write a function to append the given list to the given tuples.",
            "draft_plan": "# Create an empty list to store the modified tuples\n\n# Iterate through each tuple in the given list\n    # Convert the tuple to a list\n    # Append the given list to the current tuple\n    # Convert the modified tuple back to a tuple\n    # Append the modified tuple to the list of modified tuples\n\n# Return the list of modified tuples",
            "requirements": "",
            "final_plan": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) ",
            "code": "def append_list_to_tuples(given_list, tuples):\n    \"\"\"Function to append the given list to the given tuples.\n    \"\"\"\n    modified_tuples = []\n\n    for tup in tuples:\n        modified_tuple = list(tup)\n        modified_tuple.extend(given_list)\n        modified_tuples.append(tuple(modified_tuple))\n\n    return modified_tuples",
            "gen_tc": "",
            "sim_score": "0.5189"
        },
        {
            "id": "230",
            "prompt": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
            "draft_plan": "# Define a function that takes in a string and a character as arguments\n    # Convert the string into a list of characters\n    # Iterate through each character in the list\n        # Check if the character is a blank space\n            # If it is, replace it with the given character\n    # Join the list of characters back into a string\n    # Return the modified string\n\n# Example usage:\n# string = \"Hello World\"\n# character = \"-\"\n# modified_string = replace_spaces(string, character)\n# print(modified_string) --> \"Hello-World\"",
            "requirements": "",
            "final_plan": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2",
            "code": "function replace_spaces(str, char)\n    local chars = {}\n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        if c == \" \" then\n            c = char\n        end\n        table.insert(chars, c)\n    end\n    return table.concat(chars)\nend\n\nlocal string = \"Hello World\"\nlocal character = \"-\"\nlocal modified_string = replace_spaces(string, character)\nprint(modified_string) --> \"Hello-World\"",
            "gen_tc": "",
            "sim_score": "0.5122"
        },
        {
            "id": "391",
            "prompt": "Write a function to convert more than one list to nested dictionary.",
            "draft_plan": "# Initialize an empty dictionary\n\n# Iterate through each list in the input lists\n    # Get the first element of the list as the key for the nested dictionary\n    # Get the remaining elements of the list as the values for the nested dictionary\n    # Create a nested dictionary using the key and values\n\n# Return the nested dictionary",
            "requirements": "",
            "final_plan": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result",
            "code": "function convert_lists_to_nested_dict(lists)\n    local nested_dict = {}\n\n    for _, list in ipairs(lists) do\n        local key = list[1]\n        local values = {}\n        \n        for i = 2, #list do\n            values[i-1] = list[i]\n        end\n\n        nested_dict[key] = values\n    end\n\n    return nested_dict\nend",
            "gen_tc": "",
            "sim_score": "0.5051"
        }
    ],
    "HumanEval/29": [
        {
            "id": "454",
            "prompt": "Write a function that matches a word containing 'z'.",
            "draft_plan": "# Iterate through each word in the given list\n    # Check if the character 'z' is present in the word\n        # If 'z' is found, add the word to a new list\n\n# Return the new list containing words with 'z'",
            "requirements": "",
            "final_plan": "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function match_word_with_z(word_list)\n    local z_words = {}\n\n    for _, word in ipairs(word_list) do\n        if string.find(word, 'z') ~= nil then\n            table.insert(z_words, word)\n        end\n    end\n\n    return z_words\nend",
            "gen_tc": "",
            "sim_score": "0.4809"
        },
        {
            "id": "424",
            "prompt": "Write a function to extract only the rear index element of each string in the given tuple.",
            "draft_plan": "# Create an empty list to store the rear index elements\n# Iterate through each string in the given tuple\n    # Get the rear index element of the current string using indexing\n    # Append the rear index element to the list\n\n# Return the list of rear index elements",
            "requirements": "",
            "final_plan": "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) ",
            "code": "function extract_rear_index_elements(tuple)\n    local rear_index_elements = {}\n\n    for _, str in ipairs(tuple) do\n        local rear_index_element = string.sub(str, -1)\n        table.insert(rear_index_elements, rear_index_element)\n    end\n\n    return rear_index_elements\nend",
            "gen_tc": "",
            "sim_score": "0.4789"
        },
        {
            "id": "434",
            "prompt": "Write a function that matches a string that has an a followed by one or more b's.",
            "draft_plan": "import re\n\ndef match_string(string):\n    pattern = r'a+b+'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n",
            "code": "function match_string(str)\n    local pattern = \"a+b+\"\n    if string.match(str, pattern) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4780"
        },
        {
            "id": "91",
            "prompt": "Write a function to check if a string is present as a substring in a given list of string values.",
            "draft_plan": "# Iterate through each string in the list\n    # Check if the given substring is present in the current string\n        # If found, return True\n\n# If the substring is not found in any string, return False",
            "requirements": "",
            "final_plan": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False",
            "code": "function isSubstringPresent(substring, stringList)\n    for _, str in ipairs(stringList) do\n        if string.find(str, substring) then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4655"
        },
        {
            "id": "460",
            "prompt": "Write a python function to get the first element of each sublist.",
            "draft_plan": "# Create an empty list to store the first elements of each sublist\n\n# Iterate through each sublist in the input list\n    # Append the first element of the current sublist to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def Extract(lst): \n    return [item[0] for item in lst] ",
            "code": "function get_first_elements(sublists)\n    local first_elements = {}\n\n    for _, sublist in ipairs(sublists) do\n        table.insert(first_elements, sublist[1])\n    end\n\n    return first_elements\nend",
            "gen_tc": "",
            "sim_score": "0.4591"
        },
        {
            "id": "11",
            "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
            "draft_plan": "# Find the index of the first occurrence of the given character in the string\n# Find the index of the last occurrence of the given character in the string\n\n# If both indices are valid\n    # Remove the first occurrence of the character from the string\n    # Decrement the index of the last occurrence by 1 to account for the removal\n    # Remove the last occurrence of the character from the string\n\n# Return the modified string",
            "requirements": "",
            "final_plan": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ",
            "code": "function removeFirstAndLastOccurrence(str, char)\n    local firstIndex = string.find(str, char)\n    local lastIndex = string.find(str:reverse(), char)\n\n    if firstIndex and lastIndex then\n        str = string.sub(str, 1, firstIndex - 1) .. string.sub(str, firstIndex + 1)\n        lastIndex = string.len(str) - lastIndex + 1\n        str = string.sub(str, 1, lastIndex - 1) .. string.sub(str, lastIndex + 1)\n    end\n\n    return str\nend",
            "gen_tc": "",
            "sim_score": "0.4403"
        },
        {
            "id": "16",
            "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
            "draft_plan": "# Split the input string by the underscore character to get a list of substrings\n# Iterate through each substring in the list\n    # Check if the substring consists of lowercase letters only\n        # If not, return False\n\n# If all substrings are valid, return True",
            "requirements": "",
            "final_plan": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function contains_lowercase_sequences(str)\n    local substrings = split(str, \"_\")\n\n    for _, substr in ipairs(substrings) do\n        if not is_lowercase(substr) then\n            return false\n        end\n    end\n\n    return true\nend\n\nfunction split(str, delimiter)\n    local result = {}\n    local from = 1\n    local delim_from, delim_to = string.find(str, delimiter, from)\n\n    while delim_from do\n        table.insert(result, string.sub(str, from, delim_from - 1))\n        from = delim_to + 1\n        delim_from, delim_to = string.find(str, delimiter, from)\n    end\n\n    table.insert(result, string.sub(str, from))\n\n    return result\nend\n\nfunction is_lowercase(str)\n    return str:match(\"^[a-z]*$\") ~= nil\nend",
            "gen_tc": "",
            "sim_score": "0.4363"
        },
        {
            "id": "305",
            "prompt": "Write a function to return two words from a list of words starting with letter 'p'.",
            "draft_plan": "# Initialize an empty list to store the words starting with 'p'\n\n# Iterate through each word in the list\n    # Check if the first letter of the word is 'p'\n        # If yes, append the word to the list\n\n# Check if the list has at least two words\n    # If yes, return the first two words from the list\n    # If no, return None or an appropriate message",
            "requirements": "",
            "final_plan": "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()",
            "code": "function words_starting_with_p(word_list)\n    local p_words = {}\n\n    for _, word in ipairs(word_list) do\n        if string.sub(word, 1, 1) == \"p\" then\n            table.insert(p_words, word)\n        end\n    end\n\n    if #p_words >= 2 then\n        return p_words[1], p_words[2]\n    else\n        return nil\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4240"
        },
        {
            "id": "450",
            "prompt": "Write a function to extract specified size of strings from a given list of string values.",
            "draft_plan": "# Initialize an empty list to store the extracted strings\n\n# Iterate through each string in the given list\n    # Check if the length of the current string is equal to the specified size\n        # If it matches, append the string to the result list\n\n# Return the list of extracted strings",
            "requirements": "",
            "final_plan": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result",
            "code": "function extract_strings(strings, size)\n    local extracted_strings = {}\n\n    for _, str in ipairs(strings) do\n        if string.len(str) == size then\n            table.insert(extracted_strings, str)\n        end\n    end\n\n    return extracted_strings\nend",
            "gen_tc": "",
            "sim_score": "0.4178"
        },
        {
            "id": "128",
            "prompt": "Write a function to find words that are longer than n characters from a given list of words.",
            "draft_plan": "# Create an empty list to store the result\n\n# Iterate through each word in the given list\n    # Check if the length of the current word is greater than n\n        # If the condition is satisfied, append the word to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t",
            "code": "function find_longer_words(word_list, n)\n    local result = {}\n\n    for _, word in ipairs(word_list) do\n        if string.len(word) > n then\n            table.insert(result, word)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4127"
        }
    ],
    "HumanEval/30": [
        {
            "id": "436",
            "prompt": "Write a python function to return the negative numbers in a list.",
            "draft_plan": "# Initialize an empty list to store the negative numbers\n\n# Iterate through each element in the input list\n    # Check if the current element is less than 0\n        # If the element is negative, append it to the list of negative numbers\n\n# Return the list of negative numbers",
            "requirements": "",
            "final_plan": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ",
            "code": "function getNegativeNumbers(numbers)\n    local negativeNumbers = {}\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            table.insert(negativeNumbers, num)\n        end\n    end\n\n    return negativeNumbers\nend",
            "gen_tc": "",
            "sim_score": "0.8022"
        },
        {
            "id": "443",
            "prompt": "Write a python function to find the largest negative number from the given list.",
            "draft_plan": "# Initialize a variable 'largest_negative' to None\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If 'largest_negative' is None or the current number is greater than 'largest_negative', update 'largest_negative' to the current number\n\n# Return 'largest_negative'",
            "requirements": "",
            "final_plan": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
            "code": "function find_largest_negative(numbers)\n    local largest_negative = nil\n\n    for _, number in ipairs(numbers) do\n        if number < 0 then\n            if largest_negative == nil or number > largest_negative then\n                largest_negative = number\n            end\n        end\n    end\n\n    return largest_negative\nend",
            "gen_tc": "",
            "sim_score": "0.7057"
        },
        {
            "id": "133",
            "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
            "draft_plan": "# Initialize the sum of negative numbers to 0\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If it is negative, add it to the sum\n\n# Return the sum of negative numbers",
            "requirements": "",
            "final_plan": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)",
            "code": "function sum_of_negative_numbers(numbers)\n    local sum = 0\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            sum = sum + num\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6858"
        },
        {
            "id": "66",
            "prompt": "Write a python function to count the number of positive numbers in a list.",
            "draft_plan": "# Initialize a variable count to 0\n\n# Iterate through each number in the list\n    # Check if the number is greater than 0\n        # If it is, increment the count\n\n# Return the count",
            "requirements": "",
            "final_plan": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ",
            "code": "function count_positive_numbers(lst)\n    local count = 0\n\n    for _, num in ipairs(lst) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.6775"
        },
        {
            "id": "58",
            "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
            "draft_plan": "# Check if the product of the two integers is negative\n    # If the product is negative, it means the two integers have opposite signs\n        # Return True\n\n# If the product is not negative, it means the two integers have the same sign\n    # Return False",
            "requirements": "",
            "final_plan": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ",
            "code": "function haveOppositeSigns(a, b)\n    if a * b < 0 then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.6377"
        },
        {
            "id": "229",
            "prompt": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
            "draft_plan": "# Create two empty lists, one for negative elements and one for positive elements\n\n# Iterate through the first n elements of the array\n    # Check if the element is negative\n        # If it is, append it to the negative elements list\n    # Otherwise, append it to the positive elements list\n\n# Concatenate the negative elements list with the positive elements list\n# Return the resulting list",
            "requirements": "",
            "final_plan": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr",
            "code": "function rearrangeArray(arr, n)\n    local negativeElements = {}\n    local positiveElements = {}\n\n    for i = 1, n do\n        if arr[i] < 0 then\n            table.insert(negativeElements, arr[i])\n        else\n            table.insert(positiveElements, arr[i])\n        end\n    end\n\n    for i = 1, #positiveElements do\n        table.insert(negativeElements, positiveElements[i])\n    end\n\n    return negativeElements\nend",
            "gen_tc": "",
            "sim_score": "0.5388"
        },
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.5030"
        },
        {
            "id": "127",
            "prompt": "Write a function to multiply two integers.",
            "draft_plan": "# Initialize the result to 0\n\n# If either of the integers is 0, return 0\n\n# If both integers are negative, convert them to positive\n    # Multiply the positive integers and change the sign of the result to negative\n\n# If only one integer is negative, convert it to positive\n    # Multiply the positive integers and change the sign of the result to negative\n\n# If both integers are positive, multiply them normally\n\n# Return the result",
            "requirements": "",
            "final_plan": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)",
            "code": "function multiply(a, b)\n    local result = 0\n    \n    if a == 0 or b == 0 then\n        return 0\n    end\n    \n    if a < 0 and b < 0 then\n        a = -a\n        b = -b\n    elseif a < 0 then\n        a = -a\n        result = -result\n    elseif b < 0 then\n        b = -b\n        result = -result\n    end\n    \n    while b > 0 do\n        if b % 2 == 1 then\n            result = result + a\n        end\n        a = a * 2\n        b = math.floor(b / 2)\n    end\n    \n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4914"
        },
        {
            "id": "253",
            "prompt": "Write a python function that returns the number of integer elements in a given list.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the given list\n    # Check if the current element is an integer\n        # If it is an integer, increment the counter variable\n\n# Return the counter variable as the number of integer elements in the list",
            "requirements": "",
            "final_plan": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr",
            "code": "function count_integer_elements(lst)\n    local count = 0\n\n    for _, element in ipairs(lst) do\n        if type(element) == \"number\" and math.floor(element) == element then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4737"
        },
        {
            "id": "94",
            "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
            "draft_plan": "# Initialize the minimum second value as positive infinity\n# Initialize the first value of the tuple with minimum second value as None\n\n# Iterate through each tuple in the list\n    # Check if the second value of the current tuple is smaller than the current minimum second value\n        # If yes, update the minimum second value and the first value of the tuple\n\n# Return the first value of the tuple with the smallest second value",
            "requirements": "",
            "final_plan": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ",
            "code": "function get_first_smallest_value(test_list)\n    local min_second = math.huge\n    local first_value = nil\n    \n    for _, tup in ipairs(test_list) do\n        local second_value = tup[2]\n        \n        if second_value < min_second then\n            min_second = second_value\n            first_value = tup[1]\n        end\n    end\n    \n    return first_value\nend",
            "gen_tc": "",
            "sim_score": "0.4692"
        }
    ],
    "HumanEval/31": [
        {
            "id": "256",
            "prompt": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
            "draft_plan": "# Define a function to check if a number is prime\n    # Check if the number is less than 2, return False\n    # Iterate from 2 to the square root of the number\n        # Check if the number is divisible by any number in the range\n            # If divisible, return False\n    # If the number is not divisible by any number in the range, return True\n\n# Define a function to count the number of primes less than a given number\n    # Initialize a count variable to 0\n    # Iterate from 2 to the given number\n        # Check if the current number is prime\n            # If prime, increment the count\n    # Return the count",
            "requirements": "",
            "final_plan": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr",
            "code": "function isPrime(n)\n    if n < 2 then\n        return false\n    end\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            return false\n        end\n    end\n    return true\nend\n\nfunction countPrimes(n)\n    local count = 0\n    for i = 2, n - 1 do\n        if isPrime(i) then\n            count = count + 1\n        end\n    end\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.7305"
        },
        {
            "id": "72",
            "prompt": "Write a python function to check whether the given number can be represented as the difference of two squares or not.",
            "draft_plan": "# Iterate through all numbers from 1 to sqrt(n)\n    # Calculate the square of the current number\n    # Check if the difference between n and the square is a perfect square\n\n# If a perfect square difference is found, return True\n# If no perfect square difference is found, return False",
            "requirements": "",
            "final_plan": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False",
            "code": "function can_be_difference_of_squares(n)\n    for i = 1, math.floor(math.sqrt(n)) do\n        local square = i * i\n        local difference = n - square\n        local square_root = math.sqrt(difference)\n        if square_root == math.floor(square_root) then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.6251"
        },
        {
            "id": "96",
            "prompt": "Write a python function to find the number of divisors of a given integer.",
            "draft_plan": "# Initialize a count variable to 0\n\n# Iterate through each number from 1 to the given integer\n    # Check if the current number is a divisor of the given integer\n        # If yes, increment the count variable\n\n# Return the count variable",
            "requirements": "",
            "final_plan": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x",
            "code": "function countDivisors(num)\n    local count = 0\n\n    for i = 1, num do\n        if num % i == 0 then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5918"
        },
        {
            "id": "77",
            "prompt": "Write a python function to find whether a number is divisible by 11.",
            "draft_plan": "To determine whether a number is divisible by 11, we can use the following logic:\n\n1. Convert the number to a string.\n2. Iterate through the digits of the number.\n3. Add the digits in odd positions (starting from the rightmost digit) and subtract the sum of the digits in even positions.\n4. If the result is divisible by 11, the original number is also divisible by 11.\n\nHere is the code implementing this logic:\n\n```python\ndef is_divisible_by_11(number):\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Iterate through the digits of the number\n    sum_odd = 0\n    sum_even = 0\n    for i in range(len(number_str)):\n        digit = int(number_str[i])\n        \n        # Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0:\n            sum_odd += digit\n        else:\n            sum_even += digit\n    \n    # Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0:\n        return True\n    else:\n        return False\n```\n\nYou can use this function to check if a number is divisible by 11. For example:\n\n```python\nprint(is_divisible_by_11(121))  # Output: True\nprint(is_divisible_by_11(123))  # Output: False\n```",
            "requirements": "",
            "final_plan": "def is_Diff(n): \n    return (n % 11 == 0) ",
            "code": "function is_divisible_by_11(number)\n    -- Convert the number to a string\n    local number_str = tostring(number)\n    \n    -- Iterate through the digits of the number\n    local sum_odd = 0\n    local sum_even = 0\n    for i = 1, string.len(number_str) do\n        local digit = tonumber(string.sub(number_str, i, i))\n        \n        -- Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0 then\n            sum_even = sum_even + digit\n        else\n            sum_odd = sum_odd + digit\n        end\n    end\n    \n    -- Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0 then\n        return true\n    else\n        return false\n    end\nend\n\nprint(is_divisible_by_11(121))  -- Output: true\nprint(is_divisible_by_11(123))  -- Output: false",
            "gen_tc": "",
            "sim_score": "0.5597"
        },
        {
            "id": "138",
            "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
            "draft_plan": "# Initialize a variable 'n' with the given number\n\n# Iterate while 'n' is greater than 0\n    # Check if 'n' is divisible by 2\n        # If 'n' is divisible by 2, divide 'n' by 2\n        # Otherwise, subtract the largest power of 2 less than 'n' from 'n'\n\n# If 'n' becomes 0, return True\n# Otherwise, return False",
            "requirements": "",
            "final_plan": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True",
            "code": "function canRepresentAsPowerOf2(n)\n    while n > 0 do\n        if n % 2 == 0 then\n            n = n / 2\n        else\n            n = n - math.pow(2, math.floor(math.log(n, 2)))\n        end\n    end\n    \n    return n == 0\nend",
            "gen_tc": "",
            "sim_score": "0.5559"
        },
        {
            "id": "20",
            "prompt": "Write a function to check if the given number is woodball or not.",
            "draft_plan": "# Check if the given number is less than or equal to 1\n    # If it is, return False as woodball numbers must be greater than 1\n\n# Initialize a variable to keep track of the previous number in the sequence\n# Start a loop from 2 to the square root of the given number\n    # Check if the given number is divisible by the current loop variable\n        # If it is, check if the current loop variable is equal to the previous number plus 1\n            # If it is, update the previous number to the current loop variable\n            # If it is not, return False as the sequence is broken\n\n# If the loop completes without returning False, return True as the given number is a woodball number",
            "requirements": "",
            "final_plan": "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False",
            "code": "function isWoodballNumber(number)\n    if number <= 1 then\n        return false\n    end\n\n    local previousNumber = 1\n\n    for i = 2, math.sqrt(number) do\n        if number % i == 0 then\n            if i == previousNumber + 1 then\n                previousNumber = i\n            else\n                return false\n            end\n        end\n    end\n\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.5542"
        },
        {
            "id": "287",
            "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
            "draft_plan": "# Initialize the sum of squares variable to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Add the square of the current number to the sum of squares variable\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
            "code": "function sum_of_squares(n)\n    local sum = 0\n\n    for i = 1, n do\n        if i % 2 == 0 then\n            sum = sum + (i * i)\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5481"
        },
        {
            "id": "406",
            "prompt": "Write a python function to find whether the parity of a given number is odd.",
            "draft_plan": "# Check if the number modulo 2 is equal to 1\n    # If the modulo is 1, the number is odd\n    # Return True\n\n# If the modulo is not 1, the number is even\n# Return False",
            "requirements": "",
            "final_plan": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False",
            "code": "function is_odd_parity(number)\n    return number % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.5435"
        },
        {
            "id": "164",
            "prompt": "Write a function to determine if the sum of the divisors of two integers are the same.",
            "draft_plan": "# Define a function to calculate the sum of divisors for a given number\n    # Initialize the sum to 0\n    # Iterate through each number from 1 to the given number\n        # Check if the current number is a divisor of the given number\n            # If it is, add it to the sum\n\n# Define a function to determine if the sum of divisors for two numbers are the same\n    # Calculate the sum of divisors for both numbers\n    # Check if the sums are equal\n        # If they are, return True\n        # Otherwise, return False",
            "requirements": "",
            "final_plan": "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); ",
            "code": "function sumOfDivisors(n)\n    local sum = 0\n    for i = 1, n do\n        if n % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\n\nfunction sameSumOfDivisors(num1, num2)\n    local sum1 = sumOfDivisors(num1)\n    local sum2 = sumOfDivisors(num2)\n    return sum1 == sum2\nend",
            "gen_tc": "",
            "sim_score": "0.5399"
        },
        {
            "id": "267",
            "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of squares\n# Initialize a counter variable to keep track of the odd numbers\n# Initialize a variable to store the current odd number\n\n# Iterate from 1 to n (inclusive)\n    # Check if the current number is odd\n        # If it is, square the number and add it to the sum of squares\n        # Increase the counter variable by 1\n        # Check if the counter variable is equal to n\n            # If it is, break the loop\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
            "code": "function sum_of_squares(n)\n    local sum = 0\n    local counter = 0\n    local odd_number = 1\n\n    for i = 1, n do\n        if odd_number % 2 == 1 then\n            sum = sum + odd_number^2\n            counter = counter + 1\n        end\n\n        if counter == n then\n            break\n        end\n\n        odd_number = odd_number + 1\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5361"
        }
    ],
    "HumanEval/32": [
        {
            "id": "274",
            "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
            "draft_plan": "# Import the math module\n\n# Define a function that takes in a positive integer n\n    # Initialize a variable `sum_even` to store the sum of even index binomial coefficients\n    # Iterate from 0 to n\n        # Calculate the binomial coefficient using the math module's comb function\n        # Check if the index is even\n            # If it is even, add the binomial coefficient to `sum_even`\n    # Return `sum_even`",
            "requirements": "",
            "final_plan": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ",
            "code": "import math\n\ndef sum_even_binomial_coefficients(n):\n    sum_even = 0\n    for i in range(n+1):\n        coefficient = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even += coefficient\n    return sum_even",
            "gen_tc": "",
            "sim_score": "0.4823"
        },
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.4495"
        },
        {
            "id": "436",
            "prompt": "Write a python function to return the negative numbers in a list.",
            "draft_plan": "# Initialize an empty list to store the negative numbers\n\n# Iterate through each element in the input list\n    # Check if the current element is less than 0\n        # If the element is negative, append it to the list of negative numbers\n\n# Return the list of negative numbers",
            "requirements": "",
            "final_plan": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ",
            "code": "function getNegativeNumbers(numbers)\n    local negativeNumbers = {}\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            table.insert(negativeNumbers, num)\n        end\n    end\n\n    return negativeNumbers\nend",
            "gen_tc": "",
            "sim_score": "0.4321"
        },
        {
            "id": "420",
            "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of the cube of even numbers\n# Iterate through each even number from 2 to (2*n) with a step size of 2\n    # Calculate the cube of the current even number\n    # Add the cube to the sum\n\n# Return the sum of the cube of even numbers",
            "requirements": "",
            "final_plan": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
            "code": "function cube_sum_of_even(n)\n    local sum = 0\n    \n    for i = 2, 2 * n, 2 do\n        local cube = i * i * i\n        sum = sum + cube\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4285"
        },
        {
            "id": "59",
            "prompt": "Write a function to find the nth octagonal number.",
            "draft_plan": "# Function to find the nth octagonal number\ndef find_octagonal_number(n):\n    # Calculate the nth octagonal number using the formula\n    octagonal_number = 3 * n * (n - 1) + 1\n    \n    # Return the result\n    return octagonal_number\n\n# Test the function\nn = 5\nresult = find_octagonal_number(n)\nprint(f\"The {n}th octagonal number is: {result}\")",
            "requirements": "",
            "final_plan": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ",
            "code": "-- Function to find the nth octagonal number\nfunction find_octagonal_number(n)\n    -- Calculate the nth octagonal number using the formula\n    local octagonal_number = 3 * n * (n - 1) + 1\n    \n    -- Return the result\n    return octagonal_number\nend\n\n-- Test the function\nlocal n = 5\nlocal result = find_octagonal_number(n)\nprint(\"The \"..n..\"th octagonal number is: \"..result)",
            "gen_tc": "",
            "sim_score": "0.4285"
        },
        {
            "id": "271",
            "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
            "draft_plan": "# Initialize a variable `sum` to 0\n# Initialize a counter variable `count` to 0\n\n# Iterate through numbers starting from 1 until `count` reaches `n`\n    # Check if the current number is even\n        # Increment the `count` variable\n        # Add the current number raised to the fifth power to the `sum` variable\n\n# Return the `sum` variable",
            "requirements": "",
            "final_plan": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ",
            "code": "function sum_of_even_powers(n)\n    local sum = 0\n    local count = 0\n\n    for i = 1, math.huge do\n        if i % 2 == 0 then\n            count = count + 1\n            sum = sum + math.pow(i, 5)\n        end\n\n        if count == n then\n            break\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4265"
        },
        {
            "id": "160",
            "prompt": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
            "draft_plan": "# Iterate through all possible values of x from 0 to n\n    # Calculate the value of y using the equation y = (n - ax) / b\n    # Check if y is an integer\n        # If y is an integer, return the values of x and y as a tuple\n\n# If no solution is found, return None",
            "requirements": "",
            "final_plan": "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None",
            "code": "function find_solution(a, b, n)\n    for x = 0, n do\n        local y = (n - a * x) / b\n        if y == math.floor(y) then\n            return x, y\n        end\n    end\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.4228"
        },
        {
            "id": "453",
            "prompt": "Write a python function to find the sum of even factors of a number.",
            "draft_plan": "# Initialize the sum of even factors to 0\n\n# Iterate from 1 to the given number (inclusive)\n    # Check if the current number is a factor of the given number\n        # Check if the current number is even\n            # If the current number is even, add it to the sum of even factors\n\n# Return the sum of even factors",
            "requirements": "",
            "final_plan": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res",
            "code": "function sum_of_even_factors(number)\n    local sum = 0\n\n    for i = 1, number do\n        if number % i == 0 and i % 2 == 0 then\n            sum = sum + i\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4227"
        },
        {
            "id": "389",
            "prompt": "Write a function to find the n'th lucas number.",
            "draft_plan": "# Define a function to find the n-th Lucas number\ndef lucas_number(n):\n    # Base cases for n = 0 and n = 1\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Lucas numbers\n    lucas_0 = 2\n    lucas_1 = 1\n    \n    # Iterate from 2 to n\n    for i in range(2, n+1):\n        # Calculate the current Lucas number using the formula L(n) = L(n-1) + L(n-2)\n        lucas_n = lucas_0 + lucas_1\n        \n        # Update the values of previous Lucas numbers for the next iteration\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    \n    # Return the n-th Lucas number\n    return lucas_n",
            "requirements": "",
            "final_plan": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ",
            "code": "function lucas_number(n)\n    -- Base cases for n = 0 and n = 1\n    if n == 0 then\n        return 2\n    elseif n == 1 then\n        return 1\n    end\n    \n    -- Initialize the first two Lucas numbers\n    local lucas_0 = 2\n    local lucas_1 = 1\n    \n    -- Iterate from 2 to n\n    for i = 2, n do\n        -- Calculate the current Lucas number using the formula L(n) = L(n-1) + L(n-2)\n        local lucas_n = lucas_0 + lucas_1\n        \n        -- Update the values of previous Lucas numbers for the next iteration\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    end\n    \n    -- Return the n-th Lucas number\n    return lucas_n\nend",
            "gen_tc": "",
            "sim_score": "0.4200"
        },
        {
            "id": "287",
            "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
            "draft_plan": "# Initialize the sum of squares variable to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Add the square of the current number to the sum of squares variable\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
            "code": "function sum_of_squares(n)\n    local sum = 0\n\n    for i = 1, n do\n        if i % 2 == 0 then\n            sum = sum + (i * i)\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4187"
        }
    ],
    "HumanEval/33": [
        {
            "id": "141",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Implement a sorting algorithm such as bubble sort, insertion sort, merge sort, quick sort, etc.\n\n# Define a function to take a list of elements as input\n    # Iterate through the list to compare each element with its adjacent element(s)\n        # Swap elements if they are in the wrong order\n    # Repeat the above steps until the list is sorted\n\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums",
            "code": "-- Bubble Sort implementation\nfunction sort_list(list)\n    local n = #list\n    for i = 1, n-1 do\n        for j = 1, n-i do\n            if list[j] > list[j+1] then\n                list[j], list[j+1] = list[j+1], list[j]\n            end\n        end\n    end\n    return list\nend",
            "gen_tc": "",
            "sim_score": "0.5577"
        },
        {
            "id": "447",
            "prompt": "Write a function to find cubes of individual elements in a list.",
            "draft_plan": "# Create an empty list to store the cubes of individual elements\n# Iterate through each element in the input list\n    # Calculate the cube of the current element by raising it to the power of 3\n    # Append the cube to the result list\n\n# Return the result list containing the cubes of individual elements",
            "requirements": "",
            "final_plan": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums",
            "code": "function find_cubes(list)\n    local result = {}\n    for _, element in ipairs(list) do\n        local cube = element^3\n        table.insert(result, cube)\n    end\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5539"
        },
        {
            "id": "64",
            "prompt": "Write a function to sort a list of tuples using the second value of each tuple.",
            "draft_plan": "# Define a function to sort a list of tuples by the second value\n    # Use the sorted() function and a lambda function as the key parameter\n    # The lambda function will extract the second value from each tuple for sorting\n    \n# Call the sorted() function with the list of tuples and the custom sorting function as arguments\n# Return the sorted list of tuples",
            "requirements": "",
            "final_plan": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks",
            "code": "function sort_tuples_by_second_value(tuples)\n    return table.sort(tuples, function(a, b) return a[2] < b[2] end)\nend",
            "gen_tc": "",
            "sim_score": "0.5501"
        },
        {
            "id": "71",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Use the built-in sorted() function to sort the list in ascending order\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums",
            "code": "function sort_list(elements)\n    return sorted(elements)\nend",
            "gen_tc": "",
            "sim_score": "0.5446"
        },
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.5422"
        },
        {
            "id": "108",
            "prompt": "Write a function to merge three lists into a single sorted list.",
            "draft_plan": "# Concatenate all three lists into a single list\n# Sort the merged list using the sorted() function\n# Return the sorted merged list",
            "requirements": "",
            "final_plan": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)",
            "code": "function merge_lists(list1, list2, list3)\n    local merged_list = {}\n    \n    -- Concatenate all three lists into a single list\n    for _, value in ipairs(list1) do\n        table.insert(merged_list, value)\n    end\n    for _, value in ipairs(list2) do\n        table.insert(merged_list, value)\n    end\n    for _, value in ipairs(list3) do\n        table.insert(merged_list, value)\n    end\n    \n    -- Sort the merged list\n    table.sort(merged_list)\n    \n    return merged_list\nend",
            "gen_tc": "",
            "sim_score": "0.5328"
        },
        {
            "id": "142",
            "prompt": "Write a function to count number items that are identical in the same position of three given lists.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of identical items\n# Iterate through each index from 0 to the length of any of the given lists\n    # Check if the elements at the current index in all three lists are identical\n        # If they are, increment the counter\n\n# Return the counter variable",
            "requirements": "",
            "final_plan": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result",
            "code": "function count_identical_items(list1, list2, list3)\n    local count = 0\n\n    for i = 1, math.min(#list1, #list2, #list3) do\n        if list1[i] == list2[i] and list2[i] == list3[i] then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5228"
        },
        {
            "id": "227",
            "prompt": "Write a function to find minimum of three numbers.",
            "draft_plan": "# Compare the first two numbers and assign the minimum to a variable min_num\n\n# Compare the minimum of the first two numbers with the third number\n    # If the third number is smaller, assign it to min_num\n\n# Return min_num",
            "requirements": "",
            "final_plan": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ",
            "code": "function find_minimum(a, b, c)\n    local min_num = a\n\n    if b < min_num then\n        min_num = b\n    end\n\n    if c < min_num then\n        min_num = c\n    end\n\n    return min_num\nend",
            "gen_tc": "",
            "sim_score": "0.5174"
        },
        {
            "id": "104",
            "prompt": "Write a function to sort each sublist of strings in a given list of lists.",
            "draft_plan": "# Iterate through each sublist in the given list\n    # Sort the sublist using the sorted() function and assign the sorted sublist back to the original sublist\n\n# Return the modified list with sorted sublists",
            "requirements": "",
            "final_plan": "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n",
            "code": "function sort_sublists(list_of_lists)\n    for i = 1, #list_of_lists do\n        list_of_lists[i] = table.sort(list_of_lists[i])\n    end\n    return list_of_lists\nend",
            "gen_tc": "",
            "sim_score": "0.5075"
        },
        {
            "id": "475",
            "prompt": "Write a function to sort a dictionary by value.",
            "draft_plan": "# Use the sorted() function with a lambda function as the key parameter\n# The lambda function takes each key-value pair from the dictionary and returns the value\n# The sorted() function will sort the dictionary based on the values in ascending order\n# Pass the sorted dictionary to the dict() function to convert it back to a dictionary type\n\ndef sort_dict_by_value(dictionary):\n    sorted_dict = dict(sorted(dictionary.items(), key=lambda item: item[1]))\n    return sorted_dict",
            "requirements": "",
            "final_plan": "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter",
            "code": "function sortDictByValue(dictionary)\n    local sortedKeys = {}\n    \n    for key, _ in pairs(dictionary) do\n        table.insert(sortedKeys, key)\n    end\n    \n    table.sort(sortedKeys, function(a, b)\n        return dictionary[a] < dictionary[b]\n    end)\n    \n    local sortedDict = {}\n    \n    for _, key in ipairs(sortedKeys) do\n        sortedDict[key] = dictionary[key]\n    end\n    \n    return sortedDict\nend",
            "gen_tc": "",
            "sim_score": "0.5054"
        }
    ],
    "HumanEval/34": [
        {
            "id": "281",
            "prompt": "Write a python function to check if the elements of a given list are unique or not.",
            "draft_plan": "# Convert the input list into a set\n# Compare the length of the input list with the length of the set\n    # If they are equal, return True (all elements are unique)\n    # If they are not equal, return False (there are duplicate elements)",
            "requirements": "",
            "final_plan": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True",
            "code": "function are_elements_unique(lst)\n    local unique_set = {}\n    for _, elem in ipairs(lst) do\n        if unique_set[elem] then\n            return false\n        else\n            unique_set[elem] = true\n        end\n    end\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.7318"
        },
        {
            "id": "400",
            "prompt": "Write a function to extract the number of unique tuples in the given list.",
            "draft_plan": "# Create an empty set to store unique tuples\n\n# Iterate through each tuple in the given list\n    # Convert the tuple to a frozenset and add it to the set of unique tuples\n\n# Return the length of the set of unique tuples",
            "requirements": "",
            "final_plan": "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)",
            "code": "function count_unique_tuples(tuple_list)\n    local unique_tuples = {}\n    \n    for _, tup in ipairs(tuple_list) do\n        local frozen_tup = frozenset(tup)\n        unique_tuples[frozen_tup] = true\n    end\n    \n    return len(unique_tuples)\nend",
            "gen_tc": "",
            "sim_score": "0.6559"
        },
        {
            "id": "119",
            "prompt": "Write a python function to find the element that appears only once in a sorted array.",
            "draft_plan": "# Initialize a variable to keep track of the unique element\n# Iterate through the sorted array\n    # Check if the current element is equal to the next element and the previous element\n        # If not, assign the current element to the unique variable\n\n# Return the unique element",
            "requirements": "",
            "final_plan": "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)",
            "code": "function find_unique_element(arr)\n    local unique = nil\n\n    for i = 1, #arr do\n        if (i == 1 or arr[i] ~= arr[i-1]) and (i == #arr or arr[i] ~= arr[i+1]) then\n            unique = arr[i]\n            break\n        end\n    end\n\n    return unique\nend",
            "gen_tc": "",
            "sim_score": "0.6157"
        },
        {
            "id": "394",
            "prompt": "Write a function to check if given tuple contains no duplicates.",
            "draft_plan": "# Convert the tuple to a set\n# Check if the length of the set is equal to the length of the tuple\n    # If they are equal, it means there are no duplicates\n    # Otherwise, there are duplicates",
            "requirements": "",
            "final_plan": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res ",
            "code": "function check_no_duplicates(tup)\n    local set = {}\n    \n    for _, value in ipairs(tup) do\n        if set[value] then\n            return false\n        else\n            set[value] = true\n        end\n    end\n    \n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.6038"
        },
        {
            "id": "237",
            "prompt": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.",
            "draft_plan": "# Initialize an empty dictionary\n\n# Iterate through each tuple in the list\n    # Check if the current tuple is already a key in the dictionary\n        # If it is, increment the count by 1\n        # If it is not, add the tuple as a key with a count of 1\n\n# Return the dictionary",
            "requirements": "",
            "final_plan": "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) ",
            "code": "function count_tuples(list_of_tuples)\n    local tuple_count = {}\n\n    for _, tup in ipairs(list_of_tuples) do\n        if tuple_count[tup] then\n            tuple_count[tup] = tuple_count[tup] + 1\n        else\n            tuple_count[tup] = 1\n        end\n    end\n\n    return tuple_count\nend",
            "gen_tc": "",
            "sim_score": "0.5429"
        },
        {
            "id": "446",
            "prompt": "Write a python function to count the occurence of all elements of list in a tuple.",
            "draft_plan": "# Initialize an empty dictionary to store the element counts\n\n# Iterate through each element in the list\n    # Check if the element exists in the tuple\n        # If it exists, increment the count in the dictionary by 1\n        # If it doesn't exist, add the element to the dictionary with a count of 1\n\n# Return the dictionary with the element counts",
            "requirements": "",
            "final_plan": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ",
            "code": "function count_occurrence(list, tuple)\n    local counts = {}\n    \n    for _, element in ipairs(list) do\n        if contains(tuple, element) then\n            counts[element] = (counts[element] or 0) + 1\n        end\n    end\n    \n    return counts\nend\n\nfunction contains(tuple, element)\n    for _, value in ipairs(tuple) do\n        if value == element then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5104"
        },
        {
            "id": "417",
            "prompt": "Write a function to find common first element in given list of tuple.",
            "draft_plan": "# Initialize a set to store the first elements of the tuples\n# Initialize a variable to store the common first element, initially None\n\n# Iterate through each tuple in the list\n    # Check if the first element of the tuple is already in the set\n        # If it is, set the common first element to the current element\n        # Break the loop as we have found the common first element\n    # If the first element is not in the set, add it to the set\n\n# Return the common first element",
            "requirements": "",
            "final_plan": "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] ",
            "code": "function findCommonFirstElement(list)\n    local firstElements = {}\n    local commonFirstElement = nil\n\n    for _, tup in ipairs(list) do\n        local first = tup[1]\n\n        if firstElements[first] then\n            commonFirstElement = first\n            break\n        else\n            firstElements[first] = true\n        end\n    end\n\n    return commonFirstElement\nend",
            "gen_tc": "",
            "sim_score": "0.5073"
        },
        {
            "id": "19",
            "prompt": "Write a function to find whether a given array of integers contains any duplicate element.",
            "draft_plan": "# Initialize an empty set\n\n# Iterate through each element in the input array\n    # Check if the element is already present in the set\n        # If yes, return True as duplicate element found\n        # If not, add the element to the set\n\n# If no duplicate element is found, return False",
            "requirements": "",
            "final_plan": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ",
            "code": "function containsDuplicate(array)\n    local set = {}\n    for _, num in ipairs(array) do\n        if set[num] then\n            return true\n        else\n            set[num] = true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5009"
        },
        {
            "id": "250",
            "prompt": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the tuple\n    # Check if the current element is equal to the target element\n        # If it is, increment the counter by 1\n\n# Return the value of the counter variable",
            "requirements": "",
            "final_plan": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ",
            "code": "function count_occurrences(t, element)\n    local count = 0\n    \n    for i = 1, #t do\n        if t[i] == element then\n            count = count + 1\n        end\n    end\n    \n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4955"
        },
        {
            "id": "168",
            "prompt": "Write a function to count the number of occurrences of a number in a given list.",
            "draft_plan": "# Initialize a count variable to 0\n\n# Iterate through each element in the list\n    # Check if the current element is equal to the given number\n        # If it is, increment the count variable\n\n# Return the count variable",
            "requirements": "",
            "final_plan": "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count ",
            "code": "function countOccurrences(list, number)\n    local count = 0\n\n    for _, element in ipairs(list) do\n        if element == number then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4918"
        }
    ],
    "HumanEval/35": [
        {
            "id": "443",
            "prompt": "Write a python function to find the largest negative number from the given list.",
            "draft_plan": "# Initialize a variable 'largest_negative' to None\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If 'largest_negative' is None or the current number is greater than 'largest_negative', update 'largest_negative' to the current number\n\n# Return 'largest_negative'",
            "requirements": "",
            "final_plan": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
            "code": "function find_largest_negative(numbers)\n    local largest_negative = nil\n\n    for _, number in ipairs(numbers) do\n        if number < 0 then\n            if largest_negative == nil or number > largest_negative then\n                largest_negative = number\n            end\n        end\n    end\n\n    return largest_negative\nend",
            "gen_tc": "",
            "sim_score": "0.7330"
        },
        {
            "id": "418",
            "prompt": "Write a python function to find the element of a list having maximum length.",
            "draft_plan": "# Initialize a variable to store the index of the element with maximum length\n# Initialize a variable to store the maximum length, initially set to 0\n\n# Iterate through each element in the list\n    # Check if the length of the current element is greater than the maximum length\n        # If so, update the maximum length and the index of the element\n\n# Return the element at the index with maximum length",
            "requirements": "",
            "final_plan": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList",
            "code": "function findMaxElementLength(lst)\n    local maxIndex = 1\n    local maxLength = 0\n\n    for i, element in ipairs(lst) do\n        local length = string.len(element)\n        if length > maxLength then\n            maxLength = length\n            maxIndex = i\n        end\n    end\n\n    return lst[maxIndex]\nend",
            "gen_tc": "",
            "sim_score": "0.7213"
        },
        {
            "id": "294",
            "prompt": "Write a function to find the maximum value in a given heterogeneous list.",
            "draft_plan": "# Initialize the maximum value with the first element in the list\n\n# Iterate through each element in the list starting from the second element\n    # Compare the current element with the maximum value\n        # If the current element is greater than the maximum value, update the maximum value\n\n# Return the maximum value",
            "requirements": "",
            "final_plan": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)",
            "code": "function find_max_value(heterogeneous_list)\n    local max_value = heterogeneous_list[1]\n\n    for i = 2, #heterogeneous_list do\n        if heterogeneous_list[i] > max_value then\n            max_value = heterogeneous_list[i]\n        end\n    end\n\n    return max_value\nend",
            "gen_tc": "",
            "sim_score": "0.7047"
        },
        {
            "id": "393",
            "prompt": "Write a function to find the list with maximum length.",
            "draft_plan": "# Initialize the maximum length and the list with maximum length to empty values\n\n# Iterate through each list in the input list of lists\n    # Check if the length of the current list is greater than the maximum length\n        # If so, update the maximum length and the list with maximum length\n\n# Return the list with maximum length",
            "requirements": "",
            "final_plan": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)",
            "code": "function findListWithMaxLength(lists)\n    local maxLength = 0\n    local listWithMaxLength = {}\n\n    for _, list in ipairs(lists) do\n        local length = #list\n\n        if length > maxLength then\n            maxLength = length\n            listWithMaxLength = list\n        end\n    end\n\n    return listWithMaxLength\nend",
            "gen_tc": "",
            "sim_score": "0.6722"
        },
        {
            "id": "232",
            "prompt": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.",
            "draft_plan": "# Sort the list in descending order\n# Return the first n items from the sorted list",
            "requirements": "",
            "final_plan": "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest",
            "code": "function get_n_largest_items(lst, n)\n    table.sort(lst, function(a, b) return a > b end)\n    return {table.unpack(lst, 1, n)}\nend",
            "gen_tc": "",
            "sim_score": "0.6553"
        },
        {
            "id": "290",
            "prompt": "Write a function to find the list of maximum length in a list of lists.",
            "draft_plan": "# Initialize a variable to store the maximum length and an empty list to store the list with maximum length\n\n# Iterate through each list in the input list of lists\n    # Check if the length of the current list is greater than the maximum length\n        # If so, update the maximum length and the list with maximum length\n\n# Return the list with maximum length",
            "requirements": "",
            "final_plan": "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)",
            "code": "function find_max_length_list(lists)\n    local max_length = 0\n    local max_length_list = {}\n\n    for _, list in ipairs(lists) do\n        if #list > max_length then\n            max_length = #list\n            max_length_list = list\n        end\n    end\n\n    return max_length_list\nend",
            "gen_tc": "",
            "sim_score": "0.6542"
        },
        {
            "id": "299",
            "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.",
            "draft_plan": "# Sort the list of tuples in descending order based on the second element\n\n# Initialize the maximum aggregate to 0\n\n# Iterate through each tuple in the sorted list\n    # Calculate the current aggregate by adding the second element of the tuple to the maximum aggregate\n    # Update the maximum aggregate if the current aggregate is greater\n\n# Return the maximum aggregate",
            "requirements": "",
            "final_plan": "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])",
            "code": "function calculate_maximum_aggregate(tuples)\n    table.sort(tuples, function(a, b)\n        return a[2] > b[2]\n    end)\n\n    local maximum_aggregate = 0\n\n    for _, tuple in ipairs(tuples) do\n        local current_aggregate = maximum_aggregate + tuple[2]\n        if current_aggregate > maximum_aggregate then\n            maximum_aggregate = current_aggregate\n        end\n    end\n\n    return maximum_aggregate\nend",
            "gen_tc": "",
            "sim_score": "0.6329"
        },
        {
            "id": "57",
            "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.",
            "draft_plan": "# Sort the list of digits in descending order\n\n# Concatenate all the digits in the sorted list\n\n# Convert the concatenated string to an integer and return it",
            "requirements": "",
            "final_plan": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ",
            "code": "function largest_number(digits)\n    table.sort(digits, function(a, b) return a > b end)\n    return tonumber(table.concat(digits))\nend",
            "gen_tc": "",
            "sim_score": "0.6179"
        },
        {
            "id": "309",
            "prompt": "Write a python function to find the maximum of two numbers.",
            "draft_plan": "# Define a function that takes two numbers as input\n\n# Check if the first number is greater than the second number\n    # If it is, return the first number as the maximum\n    # Otherwise, return the second number as the maximum",
            "requirements": "",
            "final_plan": "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b ",
            "code": "function find_maximum(num1, num2)\n    if num1 > num2 then\n        return num1\n    else\n        return num2\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5907"
        },
        {
            "id": "145",
            "prompt": "Write a python function to find the maximum difference between any two elements in a given array.",
            "draft_plan": "# If the array is empty, return None\n# Initialize the maximum difference to zero\n\n# Iterate through each element in the array\n    # Iterate through each element after the current element\n        # Calculate the difference between the current element and the subsequent element\n        # Update the maximum difference if the calculated difference is greater than the current maximum difference\n\n# Return the maximum difference",
            "requirements": "",
            "final_plan": "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ",
            "code": "function max_difference(arr)\n    if #arr == 0 then\n        return nil\n    end\n\n    local max_diff = 0\n\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            local diff = math.abs(arr[i] - arr[j])\n            if diff > max_diff then\n                max_diff = diff\n            end\n        end\n    end\n\n    return max_diff\nend",
            "gen_tc": "",
            "sim_score": "0.5855"
        }
    ],
    "HumanEval/36": [
        {
            "id": "283",
            "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
            "draft_plan": "# Convert the input integer to a string\n# Initialize a dictionary to store the frequency of each digit\n\n# Iterate through each digit in the string\n    # Increment the frequency of the digit in the dictionary\n\n# Iterate through each digit in the string\n    # Check if the frequency of the digit is greater than the digit itself\n        # If yes, return False\n\n# If all frequencies are less than or equal to their respective digits, return True",
            "requirements": "",
            "final_plan": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
            "code": "function check_frequency(num)\n    local str_num = tostring(num)\n    local freq_dict = {}\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        freq_dict[digit] = (freq_dict[digit] or 0) + 1\n    end\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        if freq_dict[digit] > tonumber(digit) then\n            return false\n        end\n    end\n\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.6248"
        },
        {
            "id": "253",
            "prompt": "Write a python function that returns the number of integer elements in a given list.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the given list\n    # Check if the current element is an integer\n        # If it is an integer, increment the counter variable\n\n# Return the counter variable as the number of integer elements in the list",
            "requirements": "",
            "final_plan": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr",
            "code": "function count_integer_elements(lst)\n    local count = 0\n\n    for _, element in ipairs(lst) do\n        if type(element) == \"number\" and math.floor(element) == element then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5664"
        },
        {
            "id": "96",
            "prompt": "Write a python function to find the number of divisors of a given integer.",
            "draft_plan": "# Initialize a count variable to 0\n\n# Iterate through each number from 1 to the given integer\n    # Check if the current number is a divisor of the given integer\n        # If yes, increment the count variable\n\n# Return the count variable",
            "requirements": "",
            "final_plan": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x",
            "code": "function countDivisors(num)\n    local count = 0\n\n    for i = 1, num do\n        if num % i == 0 then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5610"
        },
        {
            "id": "77",
            "prompt": "Write a python function to find whether a number is divisible by 11.",
            "draft_plan": "To determine whether a number is divisible by 11, we can use the following logic:\n\n1. Convert the number to a string.\n2. Iterate through the digits of the number.\n3. Add the digits in odd positions (starting from the rightmost digit) and subtract the sum of the digits in even positions.\n4. If the result is divisible by 11, the original number is also divisible by 11.\n\nHere is the code implementing this logic:\n\n```python\ndef is_divisible_by_11(number):\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Iterate through the digits of the number\n    sum_odd = 0\n    sum_even = 0\n    for i in range(len(number_str)):\n        digit = int(number_str[i])\n        \n        # Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0:\n            sum_odd += digit\n        else:\n            sum_even += digit\n    \n    # Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0:\n        return True\n    else:\n        return False\n```\n\nYou can use this function to check if a number is divisible by 11. For example:\n\n```python\nprint(is_divisible_by_11(121))  # Output: True\nprint(is_divisible_by_11(123))  # Output: False\n```",
            "requirements": "",
            "final_plan": "def is_Diff(n): \n    return (n % 11 == 0) ",
            "code": "function is_divisible_by_11(number)\n    -- Convert the number to a string\n    local number_str = tostring(number)\n    \n    -- Iterate through the digits of the number\n    local sum_odd = 0\n    local sum_even = 0\n    for i = 1, string.len(number_str) do\n        local digit = tonumber(string.sub(number_str, i, i))\n        \n        -- Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0 then\n            sum_even = sum_even + digit\n        else\n            sum_odd = sum_odd + digit\n        end\n    end\n    \n    -- Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0 then\n        return true\n    else\n        return false\n    end\nend\n\nprint(is_divisible_by_11(121))  -- Output: true\nprint(is_divisible_by_11(123))  -- Output: false",
            "gen_tc": "",
            "sim_score": "0.5514"
        },
        {
            "id": "435",
            "prompt": "Write a python function to find the last digit of a given number.",
            "draft_plan": "To find the last digit of a given number, you can use the modulo operator (`%`) to get the remainder when dividing the number by 10. The remainder will be the last digit of the number.\n\nHere's the code logic:\n\n1. Define a function `find_last_digit` that takes a number as input.\n2. Inside the function, calculate the remainder of the number when divided by 10 using the modulo operator: `last_digit = number % 10`.\n3. Return the value of `last_digit`.\n\nHere's the code implementation in Python:\n\n```python\ndef find_last_digit(number):\n    last_digit = number % 10\n    return last_digit\n```\n\nYou can then call this function by passing a number as an argument to get the last digit. For example:\n\n```python\nprint(find_last_digit(12345))  # Output: 5\nprint(find_last_digit(987654321))  # Output: 1\nprint(find_last_digit(0))  # Output: 0\n```",
            "requirements": "",
            "final_plan": "def last_Digit(n) :\n    return (n % 10) ",
            "code": "function find_last_digit(number)\n    local last_digit = number % 10\n    return last_digit\nend\n\nprint(find_last_digit(12345))  -- Output: 5\nprint(find_last_digit(987654321))  -- Output: 1\nprint(find_last_digit(0))  -- Output: 0",
            "gen_tc": "",
            "sim_score": "0.5161"
        },
        {
            "id": "479",
            "prompt": "Write a python function to find the first digit of a given number.",
            "draft_plan": "# Convert the given number to a string\n\n# Iterate through each character in the string\n    # Check if the character is a digit\n        # If it is, return the character as the first digit\n\n# If no digit is found, return \"None\"",
            "requirements": "",
            "final_plan": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ",
            "code": "function firstDigit(number)\n    local numberStr = tostring(number)\n\n    for i = 1, string.len(numberStr) do\n        local char = string.sub(numberStr, i, i)\n        if string.match(char, \"%d\") then\n            return char\n        end\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.4992"
        },
        {
            "id": "168",
            "prompt": "Write a function to count the number of occurrences of a number in a given list.",
            "draft_plan": "# Initialize a count variable to 0\n\n# Iterate through each element in the list\n    # Check if the current element is equal to the given number\n        # If it is, increment the count variable\n\n# Return the count variable",
            "requirements": "",
            "final_plan": "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count ",
            "code": "function countOccurrences(list, number)\n    local count = 0\n\n    for _, element in ipairs(list) do\n        if element == number then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4851"
        },
        {
            "id": "67",
            "prompt": "Write a function to find the number of ways to partition a set of Bell numbers.",
            "draft_plan": "# Import the math module to use the factorial function\nimport math\n\n# Define a function to calculate the Bell numbers\ndef calculate_bell_number(n):\n    # Create a 2D array to store the Bell numbers\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n\n    # Initialize the first Bell number as 1\n    bell[0][0] = 1\n\n    # Calculate the Bell numbers using dynamic programming\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    # Return the last Bell number\n    return bell[n][0]\n\n# Define a function to calculate the number of ways to partition a set of Bell numbers\ndef calculate_partition_ways(n):\n    # Calculate the Bell number for n\n    bell_number = calculate_bell_number(n)\n\n    # Calculate the number of ways to partition the set\n    partition_ways = math.factorial(n) * bell_number\n\n    # Return the number of ways to partition the set\n    return partition_ways",
            "requirements": "",
            "final_plan": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] ",
            "code": "-- Define a helper function to calculate the Bell numbers\nfunction calculate_bell_number(n)\n    -- Create a 2D array to store the Bell numbers\n    local bell = {}\n    for i = 0, n do\n        bell[i] = {}\n        for j = 0, n do\n            bell[i][j] = 0\n        end\n    end\n\n    -- Initialize the first Bell number as 1\n    bell[0][0] = 1\n\n    -- Calculate the Bell numbers using dynamic programming\n    for i = 1, n do\n        bell[i][0] = bell[i-1][i-1]\n        for j = 1, i do\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        end\n    end\n\n    -- Return the last Bell number\n    return bell[n][0]\nend\n\n-- Define a function to calculate the number of ways to partition a set of Bell numbers\nfunction calculate_partition_ways(n)\n    -- Calculate the Bell number for n\n    local bell_number = calculate_bell_number(n)\n\n    -- Calculate the number of ways to partition the set\n    local partition_ways = math.factorial(n) * bell_number\n\n    -- Return the number of ways to partition the set\n    return partition_ways\nend",
            "gen_tc": "",
            "sim_score": "0.4778"
        },
        {
            "id": "59",
            "prompt": "Write a function to find the nth octagonal number.",
            "draft_plan": "# Function to find the nth octagonal number\ndef find_octagonal_number(n):\n    # Calculate the nth octagonal number using the formula\n    octagonal_number = 3 * n * (n - 1) + 1\n    \n    # Return the result\n    return octagonal_number\n\n# Test the function\nn = 5\nresult = find_octagonal_number(n)\nprint(f\"The {n}th octagonal number is: {result}\")",
            "requirements": "",
            "final_plan": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ",
            "code": "-- Function to find the nth octagonal number\nfunction find_octagonal_number(n)\n    -- Calculate the nth octagonal number using the formula\n    local octagonal_number = 3 * n * (n - 1) + 1\n    \n    -- Return the result\n    return octagonal_number\nend\n\n-- Test the function\nlocal n = 5\nlocal result = find_octagonal_number(n)\nprint(\"The \"..n..\"th octagonal number is: \"..result)",
            "gen_tc": "",
            "sim_score": "0.4766"
        },
        {
            "id": "88",
            "prompt": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.",
            "draft_plan": "# Initialize an empty dictionary\n\n# Iterate through each element in the list\n    # Check if the element is already a key in the dictionary\n        # If it is, increment its value by 1\n        # If it is not, add it as a new key with value 1\n\n# Return the dictionary containing the frequency of elements",
            "requirements": "",
            "final_plan": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count",
            "code": "function get_frequency(lst)\n    local frequency = {}\n\n    for _, element in ipairs(lst) do\n        if frequency[element] then\n            frequency[element] = frequency[element] + 1\n        else\n            frequency[element] = 1\n        end\n    end\n\n    return frequency\nend",
            "gen_tc": "",
            "sim_score": "0.4762"
        }
    ],
    "HumanEval/37": [
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.7232"
        },
        {
            "id": "412",
            "prompt": "Write a python function to remove odd numbers from a given list.",
            "draft_plan": "# Create an empty list to store the even numbers\n\n# Iterate through each number in the given list\n    # Check if the number is even (number % 2 == 0)\n        # If the number is even, append it to the list of even numbers\n\n# Return the list of even numbers",
            "requirements": "",
            "final_plan": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
            "code": "function remove_odd_numbers(lst)\n    local even_lst = {}\n\n    for _, num in ipairs(lst) do\n        if num % 2 == 0 then\n            table.insert(even_lst, num)\n        end\n    end\n\n    return even_lst\nend",
            "gen_tc": "",
            "sim_score": "0.6722"
        },
        {
            "id": "426",
            "prompt": "Write a function to filter odd numbers.",
            "draft_plan": "# Initialize an empty list to store the filtered numbers\n\n# Iterate through each number in the input list\n    # Check if the number is odd\n        # If the number is odd, append it to the filtered list\n\n# Return the filtered list",
            "requirements": "",
            "final_plan": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums",
            "code": "function filter_odd_numbers(number_list)\n    local filtered_list = {}\n\n    for _, num in ipairs(number_list) do\n        if num % 2 ~= 0 then\n            table.insert(filtered_list, num)\n        end\n    end\n\n    return filtered_list\nend",
            "gen_tc": "",
            "sim_score": "0.6278"
        },
        {
            "id": "274",
            "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
            "draft_plan": "# Import the math module\n\n# Define a function that takes in a positive integer n\n    # Initialize a variable `sum_even` to store the sum of even index binomial coefficients\n    # Iterate from 0 to n\n        # Calculate the binomial coefficient using the math module's comb function\n        # Check if the index is even\n            # If it is even, add the binomial coefficient to `sum_even`\n    # Return `sum_even`",
            "requirements": "",
            "final_plan": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ",
            "code": "import math\n\ndef sum_even_binomial_coefficients(n):\n    sum_even = 0\n    for i in range(n+1):\n        coefficient = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even += coefficient\n    return sum_even",
            "gen_tc": "",
            "sim_score": "0.5873"
        },
        {
            "id": "226",
            "prompt": "Write a python function to remove the characters which have odd index values of a given string.",
            "draft_plan": "# Initialize an empty string to store the result\n\n# Iterate through each character and its index in the input string\n    # Check if the index of the current character is even\n        # If it is even, append the character to the result string\n\n# Return the result string",
            "requirements": "",
            "final_plan": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result",
            "code": "function remove_odd_index_chars(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        if i % 2 == 0 then\n            result = result .. string.sub(str, i, i)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5835"
        },
        {
            "id": "141",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Implement a sorting algorithm such as bubble sort, insertion sort, merge sort, quick sort, etc.\n\n# Define a function to take a list of elements as input\n    # Iterate through the list to compare each element with its adjacent element(s)\n        # Swap elements if they are in the wrong order\n    # Repeat the above steps until the list is sorted\n\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums",
            "code": "-- Bubble Sort implementation\nfunction sort_list(list)\n    local n = #list\n    for i = 1, n-1 do\n        for j = 1, n-i do\n            if list[j] > list[j+1] then\n                list[j], list[j+1] = list[j+1], list[j]\n            end\n        end\n    end\n    return list\nend",
            "gen_tc": "",
            "sim_score": "0.5726"
        },
        {
            "id": "64",
            "prompt": "Write a function to sort a list of tuples using the second value of each tuple.",
            "draft_plan": "# Define a function to sort a list of tuples by the second value\n    # Use the sorted() function and a lambda function as the key parameter\n    # The lambda function will extract the second value from each tuple for sorting\n    \n# Call the sorted() function with the list of tuples and the custom sorting function as arguments\n# Return the sorted list of tuples",
            "requirements": "",
            "final_plan": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks",
            "code": "function sort_tuples_by_second_value(tuples)\n    return table.sort(tuples, function(a, b) return a[2] < b[2] end)\nend",
            "gen_tc": "",
            "sim_score": "0.5563"
        },
        {
            "id": "453",
            "prompt": "Write a python function to find the sum of even factors of a number.",
            "draft_plan": "# Initialize the sum of even factors to 0\n\n# Iterate from 1 to the given number (inclusive)\n    # Check if the current number is a factor of the given number\n        # Check if the current number is even\n            # If the current number is even, add it to the sum of even factors\n\n# Return the sum of even factors",
            "requirements": "",
            "final_plan": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res",
            "code": "function sum_of_even_factors(number)\n    local sum = 0\n\n    for i = 1, number do\n        if number % i == 0 and i % 2 == 0 then\n            sum = sum + i\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5562"
        },
        {
            "id": "166",
            "prompt": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
            "draft_plan": "# Initialize a variable to keep track of the count of pairs\n# Iterate through each element in the list\n    # Iterate through each element after the current element\n        # Check if the xor of the current pair is an even number\n            # If it is, increment the count of pairs\n\n# Return the count of pairs",
            "requirements": "",
            "final_plan": "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count",
            "code": "function count_even_xor_pairs(list)\n    local pair_count = 0\n\n    for i = 1, #list do\n        for j = i+1, #list do\n            if (list[i] ~ list[j]) % 2 == 0 then\n                pair_count = pair_count + 1\n            end\n        end\n    end\n\n    return pair_count\nend",
            "gen_tc": "",
            "sim_score": "0.5544"
        },
        {
            "id": "71",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Use the built-in sorted() function to sort the list in ascending order\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums",
            "code": "function sort_list(elements)\n    return sorted(elements)\nend",
            "gen_tc": "",
            "sim_score": "0.5517"
        }
    ],
    "HumanEval/38": [
        {
            "id": "310",
            "prompt": "Write a function to convert a given string to a tuple of characters.",
            "draft_plan": "# Initialize an empty tuple\n\n# Iterate through each character in the input string\n    # Append the character to the tuple\n\n# Return the tuple",
            "requirements": "",
            "final_plan": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result",
            "code": "function string_to_tuple(string)\n    local tuple = {}\n    \n    for i = 1, string.len(string) do\n        local char = string.sub(string, i, i)\n        table.insert(tuple, char)\n    end\n    \n    return tuple\nend",
            "gen_tc": "",
            "sim_score": "0.5063"
        },
        {
            "id": "132",
            "prompt": "Write a function to convert a tuple to a string.",
            "draft_plan": "# Initialize an empty string\n\n# Iterate through each element in the tuple\n    # Convert the element to a string and append it to the result string\n    # Add a comma after each element except for the last element\n\n# Return the result string",
            "requirements": "",
            "final_plan": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str",
            "code": "function tupleToString(tuple)\n    local result = \"\"\n\n    for i, element in ipairs(tuple) do\n        result = result .. tostring(element)\n\n        if i < #tuple then\n            result = result .. \",\"\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4776"
        },
        {
            "id": "83",
            "prompt": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
            "draft_plan": "# Define a function to calculate the character made by adding the ASCII values modulo 26\n    # Initialize a variable to store the sum of ASCII values\n    # Iterate through each character in the given string\n        # Add the ASCII value of the current character to the sum\n    # Calculate the modulo 26 of the sum\n    # Convert the result back to a character using the ASCII value\n    # Return the resulting character",
            "requirements": "",
            "final_plan": "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)",
            "code": "function calculate_ascii_modulo_26(string)\n    local sum = 0\n    for i = 1, string.len(string) do\n        sum = sum + string.byte(string, i)\n    end\n\n    local modulo_result = sum % 26\n\n    -- Convert the modulo result to a character using the ASCII value\n    local result_char = string.char(modulo_result)\n\n    return result_char\nend",
            "gen_tc": "",
            "sim_score": "0.4763"
        },
        {
            "id": "474",
            "prompt": "Write a function to replace characters in a string.",
            "draft_plan": "# Initialize an empty string to store the modified string\n\n# Iterate through each character in the input string\n    # Check if the character needs to be replaced\n        # If replacement is required, append the replacement character to the modified string\n        # Otherwise, append the original character to the modified string\n\n# Return the modified string",
            "requirements": "",
            "final_plan": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2",
            "code": "function replaceCharacters(str, replacements)\n    local modified = \"\"\n    \n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        \n        if replacements[c] then\n            modified = modified .. replacements[c]\n        else\n            modified = modified .. c\n        end\n    end\n    \n    return modified\nend",
            "gen_tc": "",
            "sim_score": "0.4588"
        },
        {
            "id": "230",
            "prompt": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
            "draft_plan": "# Define a function that takes in a string and a character as arguments\n    # Convert the string into a list of characters\n    # Iterate through each character in the list\n        # Check if the character is a blank space\n            # If it is, replace it with the given character\n    # Join the list of characters back into a string\n    # Return the modified string\n\n# Example usage:\n# string = \"Hello World\"\n# character = \"-\"\n# modified_string = replace_spaces(string, character)\n# print(modified_string) --> \"Hello-World\"",
            "requirements": "",
            "final_plan": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2",
            "code": "function replace_spaces(str, char)\n    local chars = {}\n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        if c == \" \" then\n            c = char\n        end\n        table.insert(chars, c)\n    end\n    return table.concat(chars)\nend\n\nlocal string = \"Hello World\"\nlocal character = \"-\"\nlocal modified_string = replace_spaces(string, character)\nprint(modified_string) --> \"Hello-World\"",
            "gen_tc": "",
            "sim_score": "0.4422"
        },
        {
            "id": "11",
            "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
            "draft_plan": "# Find the index of the first occurrence of the given character in the string\n# Find the index of the last occurrence of the given character in the string\n\n# If both indices are valid\n    # Remove the first occurrence of the character from the string\n    # Decrement the index of the last occurrence by 1 to account for the removal\n    # Remove the last occurrence of the character from the string\n\n# Return the modified string",
            "requirements": "",
            "final_plan": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ",
            "code": "function removeFirstAndLastOccurrence(str, char)\n    local firstIndex = string.find(str, char)\n    local lastIndex = string.find(str:reverse(), char)\n\n    if firstIndex and lastIndex then\n        str = string.sub(str, 1, firstIndex - 1) .. string.sub(str, firstIndex + 1)\n        lastIndex = string.len(str) - lastIndex + 1\n        str = string.sub(str, 1, lastIndex - 1) .. string.sub(str, lastIndex + 1)\n    end\n\n    return str\nend",
            "gen_tc": "",
            "sim_score": "0.4415"
        },
        {
            "id": "102",
            "prompt": "Write a function to convert a snake case string to camel case string.",
            "draft_plan": "# Split the snake case string by underscore to get individual words\n# Capitalize the first letter of each word except the first word\n# Join the words together to form the camel case string\n# Return the camel case string",
            "requirements": "",
            "final_plan": "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
            "code": "function snake_to_camel(snake_case_str)\n    local words = {}\n    for word in string.gmatch(snake_case_str, \"[^_]+\") do\n        table.insert(words, word)\n    end\n    \n    local camel_case_str = \"\"\n    for i, word in ipairs(words) do\n        if i > 1 then\n            word = string.upper(string.sub(word, 1, 1)) .. string.sub(word, 2)\n        end\n        camel_case_str = camel_case_str .. word\n    end\n    \n    return camel_case_str\nend",
            "gen_tc": "",
            "sim_score": "0.4391"
        },
        {
            "id": "285",
            "prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
            "draft_plan": "# Iterate through each character in the input string\n    # Check if the current character is 'a'\n        # If it is, check the next two characters (if they exist) to see if they are 'b'\n            # If they are, return True\n    # If the current character is not 'a', continue to the next character\n\n# If no 'a' followed by two or three 'b' characters is found, return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function contains_a_followed_by_b(string)\n    local len = string.len(string)\n    for i = 1, len - 3 do\n        if string.sub(string, i, i) == 'a' then\n            if string.sub(string, i+1, i+3) == 'bb' or string.sub(string, i+1, i+3) == 'bbb' then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4252"
        },
        {
            "id": "395",
            "prompt": "Write a python function to find the first non-repeated character in a given string.",
            "draft_plan": "# Create an empty dictionary to store the count of each character\n# Iterate through each character in the given string\n    # If the character is already in the dictionary, increase its count by 1\n    # If the character is not in the dictionary, add it with a count of 1\n\n# Iterate through each character in the given string again\n    # Check if the count of the current character in the dictionary is 1\n        # If it is, return the current character as the first non-repeated character\n\n# If no non-repeated character is found, return \"None\"",
            "requirements": "",
            "final_plan": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None",
            "code": "function firstNonRepeatedChar(str)\n    local charCount = {}\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if charCount[char] then\n            charCount[char] = charCount[char] + 1\n        else\n            charCount[char] = 1\n        end\n    end\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if charCount[char] == 1 then\n            return char\n        end\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.4243"
        },
        {
            "id": "411",
            "prompt": "Write a function to convert the given snake case string to camel case string.",
            "draft_plan": "# Split the snake case string into words based on the underscore\n# Initialize an empty camel case string\n\n# Iterate through each word in the snake case string\n    # Capitalize the first letter of each word except the first word\n    # Append the capitalized word to the camel case string\n\n# Return the camel case string",
            "requirements": "",
            "final_plan": "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))",
            "code": "function snake_to_camel(snake_case_str)\n    local words = {}\n    local camel_case_str = \"\"\n\n    for word in string.gmatch(snake_case_str, \"([^_]+)\") do\n        table.insert(words, word)\n    end\n\n    for i, word in ipairs(words) do\n        if i > 1 then\n            word = string.upper(string.sub(word, 1, 1)) .. string.sub(word, 2)\n        end\n        camel_case_str = camel_case_str .. word\n    end\n\n    return camel_case_str\nend",
            "gen_tc": "",
            "sim_score": "0.4159"
        }
    ],
    "HumanEval/39": [
        {
            "id": "256",
            "prompt": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
            "draft_plan": "# Define a function to check if a number is prime\n    # Check if the number is less than 2, return False\n    # Iterate from 2 to the square root of the number\n        # Check if the number is divisible by any number in the range\n            # If divisible, return False\n    # If the number is not divisible by any number in the range, return True\n\n# Define a function to count the number of primes less than a given number\n    # Initialize a count variable to 0\n    # Iterate from 2 to the given number\n        # Check if the current number is prime\n            # If prime, increment the count\n    # Return the count",
            "requirements": "",
            "final_plan": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr",
            "code": "function isPrime(n)\n    if n < 2 then\n        return false\n    end\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            return false\n        end\n    end\n    return true\nend\n\nfunction countPrimes(n)\n    local count = 0\n    for i = 2, n - 1 do\n        if isPrime(i) then\n            count = count + 1\n        end\n    end\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5874"
        },
        {
            "id": "260",
            "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
            "draft_plan": "# Check if the given number n is less than or equal to 2\n    # If true, return the nth newman\u2013shanks\u2013williams prime number directly\n\n# Initialize a list to store the prime numbers\n# Add the first two newman\u2013shanks\u2013williams prime numbers (2 and 3) to the list\n\n# Start the iteration from 4\n# While the length of the list is less than n\n    # Check if the current number is prime\n        # If true, add it to the list\n\n    # Increment the current number by 1\n\n# Return the nth newman\u2013shanks\u2013williams prime number from the list",
            "requirements": "",
            "final_plan": "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)",
            "code": "function isPrime(n)\n    if n <= 1 then\n        return false\n    end\n\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            return false\n        end\n    end\n\n    return true\nend\n\nfunction findNthNSWPrime(n)\n    if n <= 2 then\n        return n\n    end\n\n    local primes = {2, 3}\n    local currentNum = 4\n\n    while #primes < n do\n        if isPrime(currentNum) then\n            table.insert(primes, currentNum)\n        end\n        currentNum = currentNum + 1\n    end\n\n    return primes[n]\nend",
            "gen_tc": "",
            "sim_score": "0.5755"
        },
        {
            "id": "59",
            "prompt": "Write a function to find the nth octagonal number.",
            "draft_plan": "# Function to find the nth octagonal number\ndef find_octagonal_number(n):\n    # Calculate the nth octagonal number using the formula\n    octagonal_number = 3 * n * (n - 1) + 1\n    \n    # Return the result\n    return octagonal_number\n\n# Test the function\nn = 5\nresult = find_octagonal_number(n)\nprint(f\"The {n}th octagonal number is: {result}\")",
            "requirements": "",
            "final_plan": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ",
            "code": "-- Function to find the nth octagonal number\nfunction find_octagonal_number(n)\n    -- Calculate the nth octagonal number using the formula\n    local octagonal_number = 3 * n * (n - 1) + 1\n    \n    -- Return the result\n    return octagonal_number\nend\n\n-- Test the function\nlocal n = 5\nlocal result = find_octagonal_number(n)\nprint(\"The \"..n..\"th octagonal number is: \"..result)",
            "gen_tc": "",
            "sim_score": "0.4605"
        },
        {
            "id": "271",
            "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
            "draft_plan": "# Initialize a variable `sum` to 0\n# Initialize a counter variable `count` to 0\n\n# Iterate through numbers starting from 1 until `count` reaches `n`\n    # Check if the current number is even\n        # Increment the `count` variable\n        # Add the current number raised to the fifth power to the `sum` variable\n\n# Return the `sum` variable",
            "requirements": "",
            "final_plan": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ",
            "code": "function sum_of_even_powers(n)\n    local sum = 0\n    local count = 0\n\n    for i = 1, math.huge do\n        if i % 2 == 0 then\n            count = count + 1\n            sum = sum + math.pow(i, 5)\n        end\n\n        if count == n then\n            break\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4509"
        },
        {
            "id": "267",
            "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of squares\n# Initialize a counter variable to keep track of the odd numbers\n# Initialize a variable to store the current odd number\n\n# Iterate from 1 to n (inclusive)\n    # Check if the current number is odd\n        # If it is, square the number and add it to the sum of squares\n        # Increase the counter variable by 1\n        # Check if the counter variable is equal to n\n            # If it is, break the loop\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
            "code": "function sum_of_squares(n)\n    local sum = 0\n    local counter = 0\n    local odd_number = 1\n\n    for i = 1, n do\n        if odd_number % 2 == 1 then\n            sum = sum + odd_number^2\n            counter = counter + 1\n        end\n\n        if counter == n then\n            break\n        end\n\n        odd_number = odd_number + 1\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4466"
        },
        {
            "id": "72",
            "prompt": "Write a python function to check whether the given number can be represented as the difference of two squares or not.",
            "draft_plan": "# Iterate through all numbers from 1 to sqrt(n)\n    # Calculate the square of the current number\n    # Check if the difference between n and the square is a perfect square\n\n# If a perfect square difference is found, return True\n# If no perfect square difference is found, return False",
            "requirements": "",
            "final_plan": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False",
            "code": "function can_be_difference_of_squares(n)\n    for i = 1, math.floor(math.sqrt(n)) do\n        local square = i * i\n        local difference = n - square\n        local square_root = math.sqrt(difference)\n        if square_root == math.floor(square_root) then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4325"
        },
        {
            "id": "287",
            "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
            "draft_plan": "# Initialize the sum of squares variable to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Add the square of the current number to the sum of squares variable\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
            "code": "function sum_of_squares(n)\n    local sum = 0\n\n    for i = 1, n do\n        if i % 2 == 0 then\n            sum = sum + (i * i)\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4284"
        },
        {
            "id": "20",
            "prompt": "Write a function to check if the given number is woodball or not.",
            "draft_plan": "# Check if the given number is less than or equal to 1\n    # If it is, return False as woodball numbers must be greater than 1\n\n# Initialize a variable to keep track of the previous number in the sequence\n# Start a loop from 2 to the square root of the given number\n    # Check if the given number is divisible by the current loop variable\n        # If it is, check if the current loop variable is equal to the previous number plus 1\n            # If it is, update the previous number to the current loop variable\n            # If it is not, return False as the sequence is broken\n\n# If the loop completes without returning False, return True as the given number is a woodball number",
            "requirements": "",
            "final_plan": "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False",
            "code": "function isWoodballNumber(number)\n    if number <= 1 then\n        return false\n    end\n\n    local previousNumber = 1\n\n    for i = 2, math.sqrt(number) do\n        if number % i == 0 then\n            if i == previousNumber + 1 then\n                previousNumber = i\n            else\n                return false\n            end\n        end\n    end\n\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.4225"
        },
        {
            "id": "472",
            "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.",
            "draft_plan": "# Sort the input list in ascending order\n\n# Iterate through each number in the sorted list, starting from the second number\n    # Check if the current number is consecutive to the previous number\n        # If not, return False\n\n# If all numbers are consecutive, return True",
            "requirements": "",
            "final_plan": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ",
            "code": "function checkConsecutive(lst)\n    table.sort(lst)\n    \n    for i = 2, #lst do\n        if lst[i] ~= lst[i-1] + 1 then\n            return false\n        end\n    end\n    \n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.4196"
        },
        {
            "id": "283",
            "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
            "draft_plan": "# Convert the input integer to a string\n# Initialize a dictionary to store the frequency of each digit\n\n# Iterate through each digit in the string\n    # Increment the frequency of the digit in the dictionary\n\n# Iterate through each digit in the string\n    # Check if the frequency of the digit is greater than the digit itself\n        # If yes, return False\n\n# If all frequencies are less than or equal to their respective digits, return True",
            "requirements": "",
            "final_plan": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
            "code": "function check_frequency(num)\n    local str_num = tostring(num)\n    local freq_dict = {}\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        freq_dict[digit] = (freq_dict[digit] or 0) + 1\n    end\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        if freq_dict[digit] > tonumber(digit) then\n            return false\n        end\n    end\n\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.4152"
        }
    ],
    "HumanEval/40": [
        {
            "id": "133",
            "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
            "draft_plan": "# Initialize the sum of negative numbers to 0\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If it is negative, add it to the sum\n\n# Return the sum of negative numbers",
            "requirements": "",
            "final_plan": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)",
            "code": "function sum_of_negative_numbers(numbers)\n    local sum = 0\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            sum = sum + num\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6034"
        },
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.5328"
        },
        {
            "id": "436",
            "prompt": "Write a python function to return the negative numbers in a list.",
            "draft_plan": "# Initialize an empty list to store the negative numbers\n\n# Iterate through each element in the input list\n    # Check if the current element is less than 0\n        # If the element is negative, append it to the list of negative numbers\n\n# Return the list of negative numbers",
            "requirements": "",
            "final_plan": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ",
            "code": "function getNegativeNumbers(numbers)\n    local negativeNumbers = {}\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            table.insert(negativeNumbers, num)\n        end\n    end\n\n    return negativeNumbers\nend",
            "gen_tc": "",
            "sim_score": "0.5276"
        },
        {
            "id": "420",
            "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of the cube of even numbers\n# Iterate through each even number from 2 to (2*n) with a step size of 2\n    # Calculate the cube of the current even number\n    # Add the cube to the sum\n\n# Return the sum of the cube of even numbers",
            "requirements": "",
            "final_plan": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
            "code": "function cube_sum_of_even(n)\n    local sum = 0\n    \n    for i = 2, 2 * n, 2 do\n        local cube = i * i * i\n        sum = sum + cube\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5267"
        },
        {
            "id": "65",
            "prompt": "Write a function to flatten a list and sum all of its elements.",
            "draft_plan": "# Initialize a variable to store the sum of all elements\n\n# Iterate through each element in the list\n    # Check if the current element is a list\n        # If it is a list, recursively call the flatten_and_sum function on the current element and add the result to the sum\n    # If it is not a list, add the current element to the sum\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total",
            "code": "function flatten_and_sum(lst)\n    local sum = 0\n\n    for _, element in ipairs(lst) do\n        if type(element) == \"table\" then\n            sum = sum + flatten_and_sum(element)\n        else\n            sum = sum + element\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5175"
        },
        {
            "id": "58",
            "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
            "draft_plan": "# Check if the product of the two integers is negative\n    # If the product is negative, it means the two integers have opposite signs\n        # Return True\n\n# If the product is not negative, it means the two integers have the same sign\n    # Return False",
            "requirements": "",
            "final_plan": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ",
            "code": "function haveOppositeSigns(a, b)\n    if a * b < 0 then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5005"
        },
        {
            "id": "164",
            "prompt": "Write a function to determine if the sum of the divisors of two integers are the same.",
            "draft_plan": "# Define a function to calculate the sum of divisors for a given number\n    # Initialize the sum to 0\n    # Iterate through each number from 1 to the given number\n        # Check if the current number is a divisor of the given number\n            # If it is, add it to the sum\n\n# Define a function to determine if the sum of divisors for two numbers are the same\n    # Calculate the sum of divisors for both numbers\n    # Check if the sums are equal\n        # If they are, return True\n        # Otherwise, return False",
            "requirements": "",
            "final_plan": "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); ",
            "code": "function sumOfDivisors(n)\n    local sum = 0\n    for i = 1, n do\n        if n % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\n\nfunction sameSumOfDivisors(num1, num2)\n    local sum1 = sumOfDivisors(num1)\n    local sum2 = sumOfDivisors(num2)\n    return sum1 == sum2\nend",
            "gen_tc": "",
            "sim_score": "0.4886"
        },
        {
            "id": "66",
            "prompt": "Write a python function to count the number of positive numbers in a list.",
            "draft_plan": "# Initialize a variable count to 0\n\n# Iterate through each number in the list\n    # Check if the number is greater than 0\n        # If it is, increment the count\n\n# Return the count",
            "requirements": "",
            "final_plan": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ",
            "code": "function count_positive_numbers(lst)\n    local count = 0\n\n    for _, num in ipairs(lst) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4864"
        },
        {
            "id": "447",
            "prompt": "Write a function to find cubes of individual elements in a list.",
            "draft_plan": "# Create an empty list to store the cubes of individual elements\n# Iterate through each element in the input list\n    # Calculate the cube of the current element by raising it to the power of 3\n    # Append the cube to the result list\n\n# Return the result list containing the cubes of individual elements",
            "requirements": "",
            "final_plan": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums",
            "code": "function find_cubes(list)\n    local result = {}\n    for _, element in ipairs(list) do\n        local cube = element^3\n        table.insert(result, cube)\n    end\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4792"
        },
        {
            "id": "453",
            "prompt": "Write a python function to find the sum of even factors of a number.",
            "draft_plan": "# Initialize the sum of even factors to 0\n\n# Iterate from 1 to the given number (inclusive)\n    # Check if the current number is a factor of the given number\n        # Check if the current number is even\n            # If the current number is even, add it to the sum of even factors\n\n# Return the sum of even factors",
            "requirements": "",
            "final_plan": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res",
            "code": "function sum_of_even_factors(number)\n    local sum = 0\n\n    for i = 1, number do\n        if number % i == 0 and i % 2 == 0 then\n            sum = sum + i\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4770"
        }
    ],
    "HumanEval/41": [
        {
            "id": "250",
            "prompt": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the tuple\n    # Check if the current element is equal to the target element\n        # If it is, increment the counter by 1\n\n# Return the value of the counter variable",
            "requirements": "",
            "final_plan": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ",
            "code": "function count_occurrences(t, element)\n    local count = 0\n    \n    for i = 1, #t do\n        if t[i] == element then\n            count = count + 1\n        end\n    end\n    \n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4290"
        },
        {
            "id": "239",
            "prompt": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
            "draft_plan": "# Initialize a variable count to keep track of the number of possible sequences\n\n# Create a recursive function to find the number of possible sequences\n    # Base case: if n is equal to 0, return 1 (as we have found a valid sequence)\n    \n    # Initialize a variable total_count to keep track of the total number of sequences\n    \n    # Iterate through all possible values for the current element in the sequence\n        # Check if the current element is greater than or equal to twice the previous element and less than or equal to m\n            # If it is, recursively call the function with n-1 and update the total_count by adding the result\n            \n    # Return the total_count\n    \n# Call the recursive function with the given values of m and n and store the result in the variable count\n\n# Return the value of count as the final result",
            "requirements": "",
            "final_plan": "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]",
            "code": "function count_sequences(m, n)\n    local count = 0\n\n    local function find_sequences(prev, remaining)\n        if remaining == 0 then\n            return 1\n        end\n\n        local total_count = 0\n        for i = prev * 2, m do\n            total_count = total_count + find_sequences(i, remaining - 1)\n        end\n\n        return total_count\n    end\n\n    count = find_sequences(1, n)\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.3941"
        },
        {
            "id": "67",
            "prompt": "Write a function to find the number of ways to partition a set of Bell numbers.",
            "draft_plan": "# Import the math module to use the factorial function\nimport math\n\n# Define a function to calculate the Bell numbers\ndef calculate_bell_number(n):\n    # Create a 2D array to store the Bell numbers\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n\n    # Initialize the first Bell number as 1\n    bell[0][0] = 1\n\n    # Calculate the Bell numbers using dynamic programming\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    # Return the last Bell number\n    return bell[n][0]\n\n# Define a function to calculate the number of ways to partition a set of Bell numbers\ndef calculate_partition_ways(n):\n    # Calculate the Bell number for n\n    bell_number = calculate_bell_number(n)\n\n    # Calculate the number of ways to partition the set\n    partition_ways = math.factorial(n) * bell_number\n\n    # Return the number of ways to partition the set\n    return partition_ways",
            "requirements": "",
            "final_plan": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] ",
            "code": "-- Define a helper function to calculate the Bell numbers\nfunction calculate_bell_number(n)\n    -- Create a 2D array to store the Bell numbers\n    local bell = {}\n    for i = 0, n do\n        bell[i] = {}\n        for j = 0, n do\n            bell[i][j] = 0\n        end\n    end\n\n    -- Initialize the first Bell number as 1\n    bell[0][0] = 1\n\n    -- Calculate the Bell numbers using dynamic programming\n    for i = 1, n do\n        bell[i][0] = bell[i-1][i-1]\n        for j = 1, i do\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        end\n    end\n\n    -- Return the last Bell number\n    return bell[n][0]\nend\n\n-- Define a function to calculate the number of ways to partition a set of Bell numbers\nfunction calculate_partition_ways(n)\n    -- Calculate the Bell number for n\n    local bell_number = calculate_bell_number(n)\n\n    -- Calculate the number of ways to partition the set\n    local partition_ways = math.factorial(n) * bell_number\n\n    -- Return the number of ways to partition the set\n    return partition_ways\nend",
            "gen_tc": "",
            "sim_score": "0.3888"
        },
        {
            "id": "291",
            "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
            "draft_plan": "# If there are no posts or no colors, return 0\n# If there is only 1 post, return k (number of colors)\n\n# Initialize two variables to keep track of the number of ways with different colors and the number of ways with the same color for the first two posts\n# Set the number of ways with different colors to k\n# Set the number of ways with the same color to k\n\n# Iterate from the third post to the nth post\n    # Calculate the number of ways with different colors for the current post\n        # Multiply the number of ways with different colors for the previous post by (k-1)\n    # Calculate the number of ways with the same color for the current post\n        # Set it equal to the number of ways with different colors for the previous post\n\n# Return the sum of the number of ways with different colors and the number of ways with the same color for the nth post",
            "requirements": "",
            "final_plan": "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]",
            "code": "function numWaysToPaintFence(n, k)\n    if n == 0 or k == 0 then\n        return 0\n    elseif n == 1 then\n        return k\n    end\n\n    local diffColors = k\n    local sameColor = k\n\n    for i = 3, n do\n        local newDiffColors = (diffColors + sameColor) * (k - 1)\n        local newSameColor = diffColors\n        diffColors = newDiffColors\n        sameColor = newSameColor\n    end\n\n    return diffColors + sameColor\nend",
            "gen_tc": "",
            "sim_score": "0.3724"
        },
        {
            "id": "446",
            "prompt": "Write a python function to count the occurence of all elements of list in a tuple.",
            "draft_plan": "# Initialize an empty dictionary to store the element counts\n\n# Iterate through each element in the list\n    # Check if the element exists in the tuple\n        # If it exists, increment the count in the dictionary by 1\n        # If it doesn't exist, add the element to the dictionary with a count of 1\n\n# Return the dictionary with the element counts",
            "requirements": "",
            "final_plan": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ",
            "code": "function count_occurrence(list, tuple)\n    local counts = {}\n    \n    for _, element in ipairs(list) do\n        if contains(tuple, element) then\n            counts[element] = (counts[element] or 0) + 1\n        end\n    end\n    \n    return counts\nend\n\nfunction contains(tuple, element)\n    for _, value in ipairs(tuple) do\n        if value == element then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.3689"
        },
        {
            "id": "400",
            "prompt": "Write a function to extract the number of unique tuples in the given list.",
            "draft_plan": "# Create an empty set to store unique tuples\n\n# Iterate through each tuple in the given list\n    # Convert the tuple to a frozenset and add it to the set of unique tuples\n\n# Return the length of the set of unique tuples",
            "requirements": "",
            "final_plan": "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)",
            "code": "function count_unique_tuples(tuple_list)\n    local unique_tuples = {}\n    \n    for _, tup in ipairs(tuple_list) do\n        local frozen_tup = frozenset(tup)\n        unique_tuples[frozen_tup] = true\n    end\n    \n    return len(unique_tuples)\nend",
            "gen_tc": "",
            "sim_score": "0.3632"
        },
        {
            "id": "237",
            "prompt": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.",
            "draft_plan": "# Initialize an empty dictionary\n\n# Iterate through each tuple in the list\n    # Check if the current tuple is already a key in the dictionary\n        # If it is, increment the count by 1\n        # If it is not, add the tuple as a key with a count of 1\n\n# Return the dictionary",
            "requirements": "",
            "final_plan": "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) ",
            "code": "function count_tuples(list_of_tuples)\n    local tuple_count = {}\n\n    for _, tup in ipairs(list_of_tuples) do\n        if tuple_count[tup] then\n            tuple_count[tup] = tuple_count[tup] + 1\n        else\n            tuple_count[tup] = 1\n        end\n    end\n\n    return tuple_count\nend",
            "gen_tc": "",
            "sim_score": "0.3623"
        },
        {
            "id": "253",
            "prompt": "Write a python function that returns the number of integer elements in a given list.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the given list\n    # Check if the current element is an integer\n        # If it is an integer, increment the counter variable\n\n# Return the counter variable as the number of integer elements in the list",
            "requirements": "",
            "final_plan": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr",
            "code": "function count_integer_elements(lst)\n    local count = 0\n\n    for _, element in ipairs(lst) do\n        if type(element) == \"number\" and math.floor(element) == element then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.3618"
        },
        {
            "id": "168",
            "prompt": "Write a function to count the number of occurrences of a number in a given list.",
            "draft_plan": "# Initialize a count variable to 0\n\n# Iterate through each element in the list\n    # Check if the current element is equal to the given number\n        # If it is, increment the count variable\n\n# Return the count variable",
            "requirements": "",
            "final_plan": "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count ",
            "code": "function countOccurrences(list, number)\n    local count = 0\n\n    for _, element in ipairs(list) do\n        if element == number then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.3572"
        },
        {
            "id": "274",
            "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
            "draft_plan": "# Import the math module\n\n# Define a function that takes in a positive integer n\n    # Initialize a variable `sum_even` to store the sum of even index binomial coefficients\n    # Iterate from 0 to n\n        # Calculate the binomial coefficient using the math module's comb function\n        # Check if the index is even\n            # If it is even, add the binomial coefficient to `sum_even`\n    # Return `sum_even`",
            "requirements": "",
            "final_plan": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ",
            "code": "import math\n\ndef sum_even_binomial_coefficients(n):\n    sum_even = 0\n    for i in range(n+1):\n        coefficient = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even += coefficient\n    return sum_even",
            "gen_tc": "",
            "sim_score": "0.3549"
        }
    ],
    "HumanEval/42": [
        {
            "id": "251",
            "prompt": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.",
            "draft_plan": "# Initialize an empty list to store the modified elements\n# Iterate through each element in the original list\n    # Add the given element to the modified list\n    # Add the current element from the original list to the modified list\n\n# Return the modified list",
            "requirements": "",
            "final_plan": "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list",
            "code": "function insert_before_each(lst, element)\n    local modified_lst = {}\n\n    for _, item in ipairs(lst) do\n        table.insert(modified_lst, element)\n        table.insert(modified_lst, item)\n    end\n\n    return modified_lst\nend",
            "gen_tc": "",
            "sim_score": "0.5952"
        },
        {
            "id": "106",
            "prompt": "Write a function to append the given list to the given tuples.",
            "draft_plan": "# Create an empty list to store the modified tuples\n\n# Iterate through each tuple in the given list\n    # Convert the tuple to a list\n    # Append the given list to the current tuple\n    # Convert the modified tuple back to a tuple\n    # Append the modified tuple to the list of modified tuples\n\n# Return the list of modified tuples",
            "requirements": "",
            "final_plan": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) ",
            "code": "def append_list_to_tuples(given_list, tuples):\n    \"\"\"Function to append the given list to the given tuples.\n    \"\"\"\n    modified_tuples = []\n\n    for tup in tuples:\n        modified_tuple = list(tup)\n        modified_tuple.extend(given_list)\n        modified_tuples.append(tuple(modified_tuple))\n\n    return modified_tuples",
            "gen_tc": "",
            "sim_score": "0.5578"
        },
        {
            "id": "253",
            "prompt": "Write a python function that returns the number of integer elements in a given list.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the given list\n    # Check if the current element is an integer\n        # If it is an integer, increment the counter variable\n\n# Return the counter variable as the number of integer elements in the list",
            "requirements": "",
            "final_plan": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr",
            "code": "function count_integer_elements(lst)\n    local count = 0\n\n    for _, element in ipairs(lst) do\n        if type(element) == \"number\" and math.floor(element) == element then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5334"
        },
        {
            "id": "168",
            "prompt": "Write a function to count the number of occurrences of a number in a given list.",
            "draft_plan": "# Initialize a count variable to 0\n\n# Iterate through each element in the list\n    # Check if the current element is equal to the given number\n        # If it is, increment the count variable\n\n# Return the count variable",
            "requirements": "",
            "final_plan": "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count ",
            "code": "function countOccurrences(list, number)\n    local count = 0\n\n    for _, element in ipairs(list) do\n        if element == number then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5225"
        },
        {
            "id": "472",
            "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.",
            "draft_plan": "# Sort the input list in ascending order\n\n# Iterate through each number in the sorted list, starting from the second number\n    # Check if the current number is consecutive to the previous number\n        # If not, return False\n\n# If all numbers are consecutive, return True",
            "requirements": "",
            "final_plan": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ",
            "code": "function checkConsecutive(lst)\n    table.sort(lst)\n    \n    for i = 2, #lst do\n        if lst[i] ~= lst[i-1] + 1 then\n            return false\n        end\n    end\n    \n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.5127"
        },
        {
            "id": "398",
            "prompt": "Write a function to compute the sum of digits of each number of a given list.",
            "draft_plan": "# Initialize an empty list to store the sum of digits for each number\n\n# Iterate through each number in the given list\n    # Convert the number to a string\n    # Initialize a variable to store the sum of digits\n    # Iterate through each digit in the string representation of the number\n        # Convert the digit back to an integer and add it to the sum of digits\n    # Append the sum of digits to the list\n\n# Return the list of sum of digits for each number",
            "requirements": "",
            "final_plan": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
            "code": "function compute_sum_of_digits(numbers)\n    local sum_of_digits = {}\n\n    for _, num in ipairs(numbers) do\n        local num_str = tostring(num)\n        local digits_sum = 0\n\n        for i = 1, string.len(num_str) do\n            digits_sum = digits_sum + tonumber(string.sub(num_str, i, i))\n        end\n\n        table.insert(sum_of_digits, digits_sum)\n    end\n\n    return sum_of_digits\nend",
            "gen_tc": "",
            "sim_score": "0.5072"
        },
        {
            "id": "407",
            "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.",
            "draft_plan": "# Convert the given number to a list of digits\n\n# Find the first index (from right to left) where the digit is smaller than the digit to its right\n    # If no such index is found, return \"None\" since the number is already the largest possible\n\n# Find the smallest digit to the right of the found index that is larger than the digit at the found index\n\n# Swap the found digit with the smallest larger digit to its right\n\n# Sort the digits to the right of the found index in ascending order\n\n# Concatenate the digits to form the next bigger number\n\n# Return the next bigger number",
            "requirements": "",
            "final_plan": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False",
            "code": "function nextBiggerNumber(num)\n    -- Convert the number to a list of digits\n    local digits = {}\n    local n = num\n    while n > 0 do\n        table.insert(digits, 1, n % 10)\n        n = math.floor(n / 10)\n    end\n\n    -- Find the first index where the digit is smaller than the digit to its right\n    local i = #digits - 1\n    while i >= 1 and digits[i] >= digits[i+1] do\n        i = i - 1\n    end\n\n    -- If no such index is found, return \"None\"\n    if i < 1 then\n        return \"None\"\n    end\n\n    -- Find the smallest larger digit to the right of the found index\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n\n    -- Swap the found digit with the smallest larger digit to its right\n    digits[i], digits[j] = digits[j], digits[i]\n\n    -- Sort the digits to the right of the found index in ascending order\n    for k = i+1, #digits do\n        for l = k+1, #digits do\n            if digits[k] > digits[l] then\n                digits[k], digits[l] = digits[l], digits[k]\n            end\n        end\n    end\n\n    -- Concatenate the digits to form the next bigger number\n    local nextNum = 0\n    for k = 1, #digits do\n        nextNum = nextNum * 10 + digits[k]\n    end\n\n    return nextNum\nend",
            "gen_tc": "",
            "sim_score": "0.5000"
        },
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.4974"
        },
        {
            "id": "413",
            "prompt": "Write a function to extract the nth element from a given list of tuples.",
            "draft_plan": "# Initialize an empty list to store the nth element from each tuple\n\n# Iterate through each tuple in the given list\n    # Check if the tuple has at least n elements\n        # If yes, append the nth element to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result",
            "code": "function extract_nth_element(lst, n)\n    local result = {}\n\n    for i, tup in ipairs(lst) do\n        if #tup >= n then\n            table.insert(result, tup[n])\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4971"
        },
        {
            "id": "265",
            "prompt": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
            "draft_plan": "# Create an empty list to store the resulting lists\n\n# Iterate through the range from 0 to the length of the input list with step size n\n    # Append a sublist that starts from the current index and ends at the current index + n to the resulting list\n\n# Return the resulting list",
            "requirements": "",
            "final_plan": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]",
            "code": "function split_list(list, n)\n    local result = {}\n    for i = 1, #list, n do\n        local sublist = {}\n        for j = i, math.min(i + n - 1, #list) do\n            table.insert(sublist, list[j])\n        end\n        table.insert(result, sublist)\n    end\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4934"
        }
    ],
    "HumanEval/43": [
        {
            "id": "133",
            "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
            "draft_plan": "# Initialize the sum of negative numbers to 0\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If it is negative, add it to the sum\n\n# Return the sum of negative numbers",
            "requirements": "",
            "final_plan": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)",
            "code": "function sum_of_negative_numbers(numbers)\n    local sum = 0\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            sum = sum + num\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6164"
        },
        {
            "id": "58",
            "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
            "draft_plan": "# Check if the product of the two integers is negative\n    # If the product is negative, it means the two integers have opposite signs\n        # Return True\n\n# If the product is not negative, it means the two integers have the same sign\n    # Return False",
            "requirements": "",
            "final_plan": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ",
            "code": "function haveOppositeSigns(a, b)\n    if a * b < 0 then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5823"
        },
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.5778"
        },
        {
            "id": "436",
            "prompt": "Write a python function to return the negative numbers in a list.",
            "draft_plan": "# Initialize an empty list to store the negative numbers\n\n# Iterate through each element in the input list\n    # Check if the current element is less than 0\n        # If the element is negative, append it to the list of negative numbers\n\n# Return the list of negative numbers",
            "requirements": "",
            "final_plan": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ",
            "code": "function getNegativeNumbers(numbers)\n    local negativeNumbers = {}\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            table.insert(negativeNumbers, num)\n        end\n    end\n\n    return negativeNumbers\nend",
            "gen_tc": "",
            "sim_score": "0.5636"
        },
        {
            "id": "166",
            "prompt": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
            "draft_plan": "# Initialize a variable to keep track of the count of pairs\n# Iterate through each element in the list\n    # Iterate through each element after the current element\n        # Check if the xor of the current pair is an even number\n            # If it is, increment the count of pairs\n\n# Return the count of pairs",
            "requirements": "",
            "final_plan": "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count",
            "code": "function count_even_xor_pairs(list)\n    local pair_count = 0\n\n    for i = 1, #list do\n        for j = i+1, #list do\n            if (list[i] ~ list[j]) % 2 == 0 then\n                pair_count = pair_count + 1\n            end\n        end\n    end\n\n    return pair_count\nend",
            "gen_tc": "",
            "sim_score": "0.5201"
        },
        {
            "id": "138",
            "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
            "draft_plan": "# Initialize a variable 'n' with the given number\n\n# Iterate while 'n' is greater than 0\n    # Check if 'n' is divisible by 2\n        # If 'n' is divisible by 2, divide 'n' by 2\n        # Otherwise, subtract the largest power of 2 less than 'n' from 'n'\n\n# If 'n' becomes 0, return True\n# Otherwise, return False",
            "requirements": "",
            "final_plan": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True",
            "code": "function canRepresentAsPowerOf2(n)\n    while n > 0 do\n        if n % 2 == 0 then\n            n = n / 2\n        else\n            n = n - math.pow(2, math.floor(math.log(n, 2)))\n        end\n    end\n    \n    return n == 0\nend",
            "gen_tc": "",
            "sim_score": "0.5117"
        },
        {
            "id": "470",
            "prompt": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.",
            "draft_plan": "# Initialize an empty list to store the pairwise addition results\n\n# Iterate through the elements in the tuple up to the second to last element\n    # Compute the pairwise addition of the current element and its neighboring element\n    # Append the result to the list\n\n# Return the list of pairwise addition results",
            "requirements": "",
            "final_plan": "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ",
            "code": "function pairwise_addition(tup)\n    local result = {}\n\n    for i = 1, #tup - 1 do\n        local sum = tup[i] + tup[i+1]\n        table.insert(result, sum)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5097"
        },
        {
            "id": "438",
            "prompt": "Write a function to count bidirectional tuple pairs.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each pair in the array\n    # Check if the reverse of the current pair exists in the array\n        # If it does, increment the counter by 1\n\n# Return the counter value",
            "requirements": "",
            "final_plan": "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res",
            "code": "function count_bidirectional(test_list)\n    local counter = 0\n\n    for i = 1, #test_list do\n        local pair = test_list[i]\n        local reverse_pair = {pair[2], pair[1]}\n\n        for j = 1, #test_list do\n            if i ~= j and test_list[j][1] == reverse_pair[1] and test_list[j][2] == reverse_pair[2] then\n                counter = counter + 1\n                break\n            end\n        end\n    end\n\n    return counter\nend",
            "gen_tc": "",
            "sim_score": "0.5096"
        },
        {
            "id": "453",
            "prompt": "Write a python function to find the sum of even factors of a number.",
            "draft_plan": "# Initialize the sum of even factors to 0\n\n# Iterate from 1 to the given number (inclusive)\n    # Check if the current number is a factor of the given number\n        # Check if the current number is even\n            # If the current number is even, add it to the sum of even factors\n\n# Return the sum of even factors",
            "requirements": "",
            "final_plan": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res",
            "code": "function sum_of_even_factors(number)\n    local sum = 0\n\n    for i = 1, number do\n        if number % i == 0 and i % 2 == 0 then\n            sum = sum + i\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4997"
        },
        {
            "id": "65",
            "prompt": "Write a function to flatten a list and sum all of its elements.",
            "draft_plan": "# Initialize a variable to store the sum of all elements\n\n# Iterate through each element in the list\n    # Check if the current element is a list\n        # If it is a list, recursively call the flatten_and_sum function on the current element and add the result to the sum\n    # If it is not a list, add the current element to the sum\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total",
            "code": "function flatten_and_sum(lst)\n    local sum = 0\n\n    for _, element in ipairs(lst) do\n        if type(element) == \"table\" then\n            sum = sum + flatten_and_sum(element)\n        else\n            sum = sum + element\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4849"
        }
    ],
    "HumanEval/44": [
        {
            "id": "99",
            "prompt": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
            "draft_plan": "# Initialize an empty string to store the binary representation\n# Check if the input number is 0, if so return '0' as the binary representation\n# Iterate until the input number becomes 0\n    # Append the remainder of the input number divided by 2 to the binary representation string\n    # Update the input number by dividing it by 2, discarding the remainder\n\n# Reverse the binary representation string\n\n# Return the binary representation string",
            "requirements": "",
            "final_plan": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") ",
            "code": "function decimalToBinary(decimal)\n    local binary = \"\"\n\n    if decimal == 0 then\n        return \"0\"\n    end\n\n    while decimal > 0 do\n        binary = tostring(decimal % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n\n    return binary\nend",
            "gen_tc": "",
            "sim_score": "0.5523"
        },
        {
            "id": "435",
            "prompt": "Write a python function to find the last digit of a given number.",
            "draft_plan": "To find the last digit of a given number, you can use the modulo operator (`%`) to get the remainder when dividing the number by 10. The remainder will be the last digit of the number.\n\nHere's the code logic:\n\n1. Define a function `find_last_digit` that takes a number as input.\n2. Inside the function, calculate the remainder of the number when divided by 10 using the modulo operator: `last_digit = number % 10`.\n3. Return the value of `last_digit`.\n\nHere's the code implementation in Python:\n\n```python\ndef find_last_digit(number):\n    last_digit = number % 10\n    return last_digit\n```\n\nYou can then call this function by passing a number as an argument to get the last digit. For example:\n\n```python\nprint(find_last_digit(12345))  # Output: 5\nprint(find_last_digit(987654321))  # Output: 1\nprint(find_last_digit(0))  # Output: 0\n```",
            "requirements": "",
            "final_plan": "def last_Digit(n) :\n    return (n % 10) ",
            "code": "function find_last_digit(number)\n    local last_digit = number % 10\n    return last_digit\nend\n\nprint(find_last_digit(12345))  -- Output: 5\nprint(find_last_digit(987654321))  -- Output: 1\nprint(find_last_digit(0))  -- Output: 0",
            "gen_tc": "",
            "sim_score": "0.5385"
        },
        {
            "id": "292",
            "prompt": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
            "draft_plan": "To find the quotient of two numbers rounded down to the nearest integer, you can use the floor division operator `//` in Python.\n\nHere is the code logic:\n\n```python\ndef quotient(a, b):\n    return a // b\n```\n\nIn this code, the function `quotient` takes two parameters `a` and `b`, representing the numbers for which we want to find the quotient. The floor division `a // b` divides `a` by `b` and returns the quotient rounded down to the nearest integer.\n\nYou can call this function with your desired values to find the quotient. For example:\n\n```python\nresult = quotient(10, 3)\nprint(result)  # Output: 3\n```",
            "requirements": "",
            "final_plan": "def find(n,m):  \n    q = n//m \n    return (q)",
            "code": "function quotient(a, b)\n    return math.floor(a / b)\nend\n\n-- Example usage\nlocal result = quotient(10, 3)\nprint(result) -- Output: 3",
            "gen_tc": "",
            "sim_score": "0.5331"
        },
        {
            "id": "479",
            "prompt": "Write a python function to find the first digit of a given number.",
            "draft_plan": "# Convert the given number to a string\n\n# Iterate through each character in the string\n    # Check if the character is a digit\n        # If it is, return the character as the first digit\n\n# If no digit is found, return \"None\"",
            "requirements": "",
            "final_plan": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ",
            "code": "function firstDigit(number)\n    local numberStr = tostring(number)\n\n    for i = 1, string.len(numberStr) do\n        local char = string.sub(numberStr, i, i)\n        if string.match(char, \"%d\") then\n            return char\n        end\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.4908"
        },
        {
            "id": "77",
            "prompt": "Write a python function to find whether a number is divisible by 11.",
            "draft_plan": "To determine whether a number is divisible by 11, we can use the following logic:\n\n1. Convert the number to a string.\n2. Iterate through the digits of the number.\n3. Add the digits in odd positions (starting from the rightmost digit) and subtract the sum of the digits in even positions.\n4. If the result is divisible by 11, the original number is also divisible by 11.\n\nHere is the code implementing this logic:\n\n```python\ndef is_divisible_by_11(number):\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Iterate through the digits of the number\n    sum_odd = 0\n    sum_even = 0\n    for i in range(len(number_str)):\n        digit = int(number_str[i])\n        \n        # Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0:\n            sum_odd += digit\n        else:\n            sum_even += digit\n    \n    # Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0:\n        return True\n    else:\n        return False\n```\n\nYou can use this function to check if a number is divisible by 11. For example:\n\n```python\nprint(is_divisible_by_11(121))  # Output: True\nprint(is_divisible_by_11(123))  # Output: False\n```",
            "requirements": "",
            "final_plan": "def is_Diff(n): \n    return (n % 11 == 0) ",
            "code": "function is_divisible_by_11(number)\n    -- Convert the number to a string\n    local number_str = tostring(number)\n    \n    -- Iterate through the digits of the number\n    local sum_odd = 0\n    local sum_even = 0\n    for i = 1, string.len(number_str) do\n        local digit = tonumber(string.sub(number_str, i, i))\n        \n        -- Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0 then\n            sum_even = sum_even + digit\n        else\n            sum_odd = sum_odd + digit\n        end\n    end\n    \n    -- Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0 then\n        return true\n    else\n        return false\n    end\nend\n\nprint(is_divisible_by_11(121))  -- Output: true\nprint(is_divisible_by_11(123))  -- Output: false",
            "gen_tc": "",
            "sim_score": "0.4664"
        },
        {
            "id": "56",
            "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
            "draft_plan": "# Convert the given number to a string and reverse it\n# Convert the reversed string back to an integer\n# Check if the given number is equal to twice the reversed number plus 1\n# If the condition is true, return True. Otherwise, return False.",
            "requirements": "",
            "final_plan": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
            "code": "function is_one_less_twice_reverse(number)\n    local reverse = tonumber(string.reverse(tostring(number)))\n    if number == (2 * reverse + 1) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4541"
        },
        {
            "id": "59",
            "prompt": "Write a function to find the nth octagonal number.",
            "draft_plan": "# Function to find the nth octagonal number\ndef find_octagonal_number(n):\n    # Calculate the nth octagonal number using the formula\n    octagonal_number = 3 * n * (n - 1) + 1\n    \n    # Return the result\n    return octagonal_number\n\n# Test the function\nn = 5\nresult = find_octagonal_number(n)\nprint(f\"The {n}th octagonal number is: {result}\")",
            "requirements": "",
            "final_plan": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ",
            "code": "-- Function to find the nth octagonal number\nfunction find_octagonal_number(n)\n    -- Calculate the nth octagonal number using the formula\n    local octagonal_number = 3 * n * (n - 1) + 1\n    \n    -- Return the result\n    return octagonal_number\nend\n\n-- Test the function\nlocal n = 5\nlocal result = find_octagonal_number(n)\nprint(\"The \"..n..\"th octagonal number is: \"..result)",
            "gen_tc": "",
            "sim_score": "0.4326"
        },
        {
            "id": "407",
            "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.",
            "draft_plan": "# Convert the given number to a list of digits\n\n# Find the first index (from right to left) where the digit is smaller than the digit to its right\n    # If no such index is found, return \"None\" since the number is already the largest possible\n\n# Find the smallest digit to the right of the found index that is larger than the digit at the found index\n\n# Swap the found digit with the smallest larger digit to its right\n\n# Sort the digits to the right of the found index in ascending order\n\n# Concatenate the digits to form the next bigger number\n\n# Return the next bigger number",
            "requirements": "",
            "final_plan": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False",
            "code": "function nextBiggerNumber(num)\n    -- Convert the number to a list of digits\n    local digits = {}\n    local n = num\n    while n > 0 do\n        table.insert(digits, 1, n % 10)\n        n = math.floor(n / 10)\n    end\n\n    -- Find the first index where the digit is smaller than the digit to its right\n    local i = #digits - 1\n    while i >= 1 and digits[i] >= digits[i+1] do\n        i = i - 1\n    end\n\n    -- If no such index is found, return \"None\"\n    if i < 1 then\n        return \"None\"\n    end\n\n    -- Find the smallest larger digit to the right of the found index\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n\n    -- Swap the found digit with the smallest larger digit to its right\n    digits[i], digits[j] = digits[j], digits[i]\n\n    -- Sort the digits to the right of the found index in ascending order\n    for k = i+1, #digits do\n        for l = k+1, #digits do\n            if digits[k] > digits[l] then\n                digits[k], digits[l] = digits[l], digits[k]\n            end\n        end\n    end\n\n    -- Concatenate the digits to form the next bigger number\n    local nextNum = 0\n    for k = 1, #digits do\n        nextNum = nextNum * 10 + digits[k]\n    end\n\n    return nextNum\nend",
            "gen_tc": "",
            "sim_score": "0.4244"
        },
        {
            "id": "257",
            "prompt": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.",
            "draft_plan": "# Define the function that takes in two numbers as input\n    # Create a tuple with the second number followed by the first number\n    # Return the tuple\n\n# Call the function with the desired numbers and store the returned tuple",
            "requirements": "",
            "final_plan": "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)",
            "code": "function swap_numbers(num1, num2)\n    return num2, num1\nend\n\nlocal result = swap_numbers(3, 5)\nprint(result)  -- Output: 5   3",
            "gen_tc": "",
            "sim_score": "0.4240"
        },
        {
            "id": "57",
            "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.",
            "draft_plan": "# Sort the list of digits in descending order\n\n# Concatenate all the digits in the sorted list\n\n# Convert the concatenated string to an integer and return it",
            "requirements": "",
            "final_plan": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ",
            "code": "function largest_number(digits)\n    table.sort(digits, function(a, b) return a > b end)\n    return tonumber(table.concat(digits))\nend",
            "gen_tc": "",
            "sim_score": "0.4222"
        }
    ],
    "HumanEval/45": [
        {
            "id": "458",
            "prompt": "Write a function to find the area of a rectangle.",
            "draft_plan": "To find the area of a rectangle, we need the length and width of the rectangle. The formula to calculate the area of a rectangle is:\n\nArea = length * width\n\nHere is the code logic to find the area of a rectangle:\n\n1. Define a function named `calculate_area` that takes two parameters, `length` and `width`.\n2. Inside the function, calculate the area by multiplying the `length` and `width` parameters.\n3. Return the calculated area from the function.\n\nHere is the code implementation in Python:\n\n```python\ndef calculate_area(length, width):\n    area = length * width\n    return area\n\n# Example usage:\nlength = 5\nwidth = 3\narea = calculate_area(length, width)\nprint(\"The area of the rectangle is:\", area)\n```\n\nThis will output:\n```\nThe area of the rectangle is: 15\n```\n\nYou can replace the values of `length` and `width` with your own values to find the area of a different rectangle.",
            "requirements": "",
            "final_plan": "def rectangle_area(l,b):\n  area=l*b\n  return area",
            "code": "function calculate_area(length, width)\n    local area = length * width\n    return area\nend\n\n-- Example usage:\nlocal length = 5\nlocal width = 3\nlocal area = calculate_area(length, width)\nprint(\"The area of the rectangle is:\", area)",
            "gen_tc": "",
            "sim_score": "0.7053"
        },
        {
            "id": "14",
            "prompt": "Write a python function to find the volume of a triangular prism.",
            "draft_plan": "# Define a function to calculate the volume of a triangular prism\n    # Accept the base length, base width, and height of the prism as input parameters\n    # Calculate the area of the base triangle by multiplying the base length and base width, and dividing by 2\n    # Calculate the volume by multiplying the area of the base triangle by the height of the prism\n    # Return the calculated volume\n\n# Example usage:\n# volume = calculate_volume_of_triangular_prism(5, 6, 10)",
            "requirements": "",
            "final_plan": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ",
            "code": "function calculate_volume_of_triangular_prism(base_length, base_width, height)\n    local base_area = (base_length * base_width) / 2\n    local volume = base_area * height\n    return volume\nend\n\n-- Example usage\nlocal volume = calculate_volume_of_triangular_prism(5, 6, 10)\nprint(volume)",
            "gen_tc": "",
            "sim_score": "0.6475"
        },
        {
            "id": "163",
            "prompt": "Write a function to calculate the area of a regular polygon given the length and number of its sides.",
            "draft_plan": "# Import the math module for trigonometric functions\nimport math\n\n# Define a function to calculate the area of a regular polygon\ndef calculate_area(length, sides):\n    # Calculate the apothem (distance from center to midpoint of a side)\n    apothem = length / (2 * math.tan(math.pi / sides))\n    \n    # Calculate the area using the formula: area = (1/2) * apothem * perimeter\n    perimeter = length * sides\n    area = (1 / 2) * apothem * perimeter\n    \n    return area",
            "requirements": "",
            "final_plan": "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area",
            "code": "-- Define a function to calculate the area of a regular polygon\nfunction calculate_area(length, sides)\n    -- Calculate the apothem (distance from center to midpoint of a side)\n    local apothem = length / (2 * math.tan(math.pi / sides))\n    \n    -- Calculate the area using the formula: area = (1/2) * apothem * perimeter\n    local perimeter = length * sides\n    local area = (1 / 2) * apothem * perimeter\n    \n    return area\nend",
            "gen_tc": "",
            "sim_score": "0.6363"
        },
        {
            "id": "441",
            "prompt": "Write a function to find the surface area of a cube of a given size.",
            "draft_plan": "To find the surface area of a cube, we can use the formula: surface_area = 6 * side_length^2\n\nHere is the code logic to find the surface area of a cube in Python:\n\n1. Define a function named `calculate_cube_surface_area` that takes a parameter `side_length`.\n2. Calculate the surface area using the formula `surface_area = 6 * side_length^2`.\n3. Return the calculated surface area.\n\nHere is the code implementation:\n\n```python\ndef calculate_cube_surface_area(side_length):\n    surface_area = 6 * side_length**2\n    return surface_area\n```\n\nYou can call this function with the desired `side_length` value to get the surface area of the cube.",
            "requirements": "",
            "final_plan": "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea",
            "code": "function calculate_cube_surface_area(side_length)\n    local surface_area = 6 * side_length^2\n    return surface_area\nend",
            "gen_tc": "",
            "sim_score": "0.6309"
        },
        {
            "id": "293",
            "prompt": "Write a function to find the third side of a right angled triangle.",
            "draft_plan": "# Import the math module\n\n# Define a function to find the third side of a right-angled triangle\n    # Calculate the square of the two given sides\n    # Calculate the sum of the squares of the two given sides\n    # Take the square root of the sum to find the length of the hypotenuse\n    # Return the length of the hypotenuse\n\n# Call the function with the given sides of the triangle and print the result",
            "requirements": "",
            "final_plan": "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s",
            "code": "function findThirdSide(a, b)\n    local c = math.sqrt(a^2 + b^2)\n    return c\nend\n\nlocal a = 3\nlocal b = 4\n\nlocal c = findThirdSide(a, b)\nprint(\"The length of the hypotenuse is: \" .. c)",
            "gen_tc": "",
            "sim_score": "0.5895"
        },
        {
            "id": "85",
            "prompt": "Write a function to find the surface area of a sphere.",
            "draft_plan": "import math\n\ndef surface_area_of_sphere(radius):\n    # Calculate the surface area of a sphere using the formula: 4\u03c0r^2\n    surface_area = 4 * math.pi * radius**2\n    \n    return surface_area",
            "requirements": "",
            "final_plan": "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea",
            "code": "function surface_area_of_sphere(radius)\n    -- Calculate the surface area of a sphere using the formula: 4\u03c0r^2\n    local surface_area = 4 * math.pi * radius^2\n    \n    return surface_area\nend",
            "gen_tc": "",
            "sim_score": "0.5363"
        },
        {
            "id": "171",
            "prompt": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
            "draft_plan": "# Calculate the perimeter of a regular pentagon using the formula:\n    # perimeter = 5 * side_length\n\n# Return the calculated perimeter",
            "requirements": "",
            "final_plan": "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter",
            "code": "function calculate_perimeter(side_length)\n    local perimeter = 5 * side_length\n    return perimeter\nend",
            "gen_tc": "",
            "sim_score": "0.4791"
        },
        {
            "id": "59",
            "prompt": "Write a function to find the nth octagonal number.",
            "draft_plan": "# Function to find the nth octagonal number\ndef find_octagonal_number(n):\n    # Calculate the nth octagonal number using the formula\n    octagonal_number = 3 * n * (n - 1) + 1\n    \n    # Return the result\n    return octagonal_number\n\n# Test the function\nn = 5\nresult = find_octagonal_number(n)\nprint(f\"The {n}th octagonal number is: {result}\")",
            "requirements": "",
            "final_plan": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ",
            "code": "-- Function to find the nth octagonal number\nfunction find_octagonal_number(n)\n    -- Calculate the nth octagonal number using the formula\n    local octagonal_number = 3 * n * (n - 1) + 1\n    \n    -- Return the result\n    return octagonal_number\nend\n\n-- Test the function\nlocal n = 5\nlocal result = find_octagonal_number(n)\nprint(\"The \"..n..\"th octagonal number is: \"..result)",
            "gen_tc": "",
            "sim_score": "0.4585"
        },
        {
            "id": "234",
            "prompt": "Write a function to find the volume of a cube given its side length.",
            "draft_plan": "# Define a function to calculate the volume of a cube\n    # Accept a parameter for the side length of the cube\n    # Calculate the volume using the formula V = side_length^3\n    # Return the calculated volume",
            "requirements": "",
            "final_plan": "def volume_cube(l):\n  volume = l * l * l\n  return volume",
            "code": "function calculate_cube_volume(side_length)\n    local volume = side_length^3\n    return volume\nend",
            "gen_tc": "",
            "sim_score": "0.4540"
        },
        {
            "id": "266",
            "prompt": "Write a function to find the lateral surface area of a cube given its side length.",
            "draft_plan": "# Calculate the lateral surface area of a cube\n    # Lateral surface area of a cube is given by 4 times the square of the side length\n    # Return the calculated lateral surface area",
            "requirements": "",
            "final_plan": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA",
            "code": "function lateral_surface_area_cube(side_length)\n    local lateral_surface_area = 4 * side_length * side_length\n    return lateral_surface_area\nend",
            "gen_tc": "",
            "sim_score": "0.4531"
        }
    ],
    "HumanEval/46": [
        {
            "id": "135",
            "prompt": "Write a function to find the nth hexagonal number.",
            "draft_plan": "# Calculate the nth hexagonal number using the formula: n * (2 * n - 1)\n\n# Return the calculated nth hexagonal number",
            "requirements": "",
            "final_plan": "def hexagonal_num(n): \n\treturn n*(2*n - 1) ",
            "code": "function nthHexagonalNumber(n)\n    return n * (2 * n - 1)\nend",
            "gen_tc": "",
            "sim_score": "0.5314"
        },
        {
            "id": "84",
            "prompt": "Write a function to find the nth number in the newman conway sequence.",
            "draft_plan": "# Create a list to store the Newman-Conway sequence\n# Initialize the first two elements of the sequence\n# Iterate from index 3 up to the given number n\n    # Calculate the next element of the sequence using the previous elements\n# Return the nth element of the sequence",
            "requirements": "",
            "final_plan": "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))",
            "code": "function newmanConway(n)\n    if n <= 0 then\n        return nil\n    elseif n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        local sequence = {1, 1}\n        for i = 3, n do\n            sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n        end\n        return sequence[n]\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5268"
        },
        {
            "id": "80",
            "prompt": "Write a function to find the nth tetrahedral number.",
            "draft_plan": "# Initialize the tetrahedral number to 0\n\n# Iterate from 1 to n (inclusive)\n    # Add the current number to the tetrahedral number\n\n# Return the tetrahedral number",
            "requirements": "",
            "final_plan": "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6",
            "code": "function find_nth_tetrahedral(n)\n    local tetrahedral_number = 0\n\n    for i = 1, n do\n        tetrahedral_number = tetrahedral_number + (i * (i + 1) * (i + 2)) / 6\n    end\n\n    return tetrahedral_number\nend",
            "gen_tc": "",
            "sim_score": "0.5106"
        },
        {
            "id": "59",
            "prompt": "Write a function to find the nth octagonal number.",
            "draft_plan": "# Function to find the nth octagonal number\ndef find_octagonal_number(n):\n    # Calculate the nth octagonal number using the formula\n    octagonal_number = 3 * n * (n - 1) + 1\n    \n    # Return the result\n    return octagonal_number\n\n# Test the function\nn = 5\nresult = find_octagonal_number(n)\nprint(f\"The {n}th octagonal number is: {result}\")",
            "requirements": "",
            "final_plan": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ",
            "code": "-- Function to find the nth octagonal number\nfunction find_octagonal_number(n)\n    -- Calculate the nth octagonal number using the formula\n    local octagonal_number = 3 * n * (n - 1) + 1\n    \n    -- Return the result\n    return octagonal_number\nend\n\n-- Test the function\nlocal n = 5\nlocal result = find_octagonal_number(n)\nprint(\"The \"..n..\"th octagonal number is: \"..result)",
            "gen_tc": "",
            "sim_score": "0.5077"
        },
        {
            "id": "267",
            "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of squares\n# Initialize a counter variable to keep track of the odd numbers\n# Initialize a variable to store the current odd number\n\n# Iterate from 1 to n (inclusive)\n    # Check if the current number is odd\n        # If it is, square the number and add it to the sum of squares\n        # Increase the counter variable by 1\n        # Check if the counter variable is equal to n\n            # If it is, break the loop\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
            "code": "function sum_of_squares(n)\n    local sum = 0\n    local counter = 0\n    local odd_number = 1\n\n    for i = 1, n do\n        if odd_number % 2 == 1 then\n            sum = sum + odd_number^2\n            counter = counter + 1\n        end\n\n        if counter == n then\n            break\n        end\n\n        odd_number = odd_number + 1\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5039"
        },
        {
            "id": "389",
            "prompt": "Write a function to find the n'th lucas number.",
            "draft_plan": "# Define a function to find the n-th Lucas number\ndef lucas_number(n):\n    # Base cases for n = 0 and n = 1\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Lucas numbers\n    lucas_0 = 2\n    lucas_1 = 1\n    \n    # Iterate from 2 to n\n    for i in range(2, n+1):\n        # Calculate the current Lucas number using the formula L(n) = L(n-1) + L(n-2)\n        lucas_n = lucas_0 + lucas_1\n        \n        # Update the values of previous Lucas numbers for the next iteration\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    \n    # Return the n-th Lucas number\n    return lucas_n",
            "requirements": "",
            "final_plan": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ",
            "code": "function lucas_number(n)\n    -- Base cases for n = 0 and n = 1\n    if n == 0 then\n        return 2\n    elseif n == 1 then\n        return 1\n    end\n    \n    -- Initialize the first two Lucas numbers\n    local lucas_0 = 2\n    local lucas_1 = 1\n    \n    -- Iterate from 2 to n\n    for i = 2, n do\n        -- Calculate the current Lucas number using the formula L(n) = L(n-1) + L(n-2)\n        local lucas_n = lucas_0 + lucas_1\n        \n        -- Update the values of previous Lucas numbers for the next iteration\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    end\n    \n    -- Return the n-th Lucas number\n    return lucas_n\nend",
            "gen_tc": "",
            "sim_score": "0.5028"
        },
        {
            "id": "271",
            "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
            "draft_plan": "# Initialize a variable `sum` to 0\n# Initialize a counter variable `count` to 0\n\n# Iterate through numbers starting from 1 until `count` reaches `n`\n    # Check if the current number is even\n        # Increment the `count` variable\n        # Add the current number raised to the fifth power to the `sum` variable\n\n# Return the `sum` variable",
            "requirements": "",
            "final_plan": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ",
            "code": "function sum_of_even_powers(n)\n    local sum = 0\n    local count = 0\n\n    for i = 1, math.huge do\n        if i % 2 == 0 then\n            count = count + 1\n            sum = sum + math.pow(i, 5)\n        end\n\n        if count == n then\n            break\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4932"
        },
        {
            "id": "162",
            "prompt": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
            "draft_plan": "# Initialize the sum to 0\n\n# Iterate from i = 0 to n // 2 (inclusive)\n    # Calculate the term (n - 2*i)\n    # Add the term to the sum\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)",
            "code": "function calculate_sum(n)\n    local sum = 0\n\n    for i = 0, n // 2 do\n        local term = n - 2 * i\n        sum = sum + term\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4827"
        },
        {
            "id": "287",
            "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
            "draft_plan": "# Initialize the sum of squares variable to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Add the square of the current number to the sum of squares variable\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
            "code": "function sum_of_squares(n)\n    local sum = 0\n\n    for i = 1, n do\n        if i % 2 == 0 then\n            sum = sum + (i * i)\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4813"
        },
        {
            "id": "86",
            "prompt": "Write a function to find nth centered hexagonal number.",
            "draft_plan": "# Initialize the centered hexagonal number formula: nth_centered_hexagonal = 3 * n * (n - 1) + 1\n\n# Define a function to calculate the nth centered hexagonal number\n    # Check if n is a positive integer, otherwise return None\n    # Calculate the nth centered hexagonal number using the formula\n    # Return the result\n\n# Call the function and provide the desired value of n to get the nth centered hexagonal number",
            "requirements": "",
            "final_plan": "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1",
            "code": "function find_nth_centered_hexagonal(n)\n    if type(n) ~= \"number\" or n <= 0 or n ~= math.floor(n) then\n        return nil\n    end\n\n    local nth_centered_hexagonal = 3 * n * (n - 1) + 1\n\n    return nth_centered_hexagonal\nend\n\n-- Example usage\nlocal n = 5\nlocal nth_centered_hexagonal = find_nth_centered_hexagonal(n)\nprint(\"The \" .. n .. \"th centered hexagonal number is: \" .. nth_centered_hexagonal)",
            "gen_tc": "",
            "sim_score": "0.4482"
        }
    ],
    "HumanEval/47": [
        {
            "id": "397",
            "prompt": "Write a function to find the median of three numbers.",
            "draft_plan": "# Sort the three numbers in ascending order\n\n# If the middle number is an integer, return it as the median\n# Otherwise, calculate the average of the two middle numbers and return it as the median",
            "requirements": "",
            "final_plan": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median",
            "code": "function findMedian(a, b, c)\n    local sorted = {a, b, c}\n    table.sort(sorted)\n\n    local middleIndex = math.floor(#sorted / 2)\n    \n    if #sorted % 2 == 0 then\n        local median = (sorted[middleIndex] + sorted[middleIndex + 1]) / 2\n        return median\n    else\n        return sorted[middleIndex + 1]\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.7462"
        },
        {
            "id": "432",
            "prompt": "Write a function to find the median length of a trapezium.",
            "draft_plan": "# Define a function to calculate the median length of a trapezium\n    # Calculate the sum of the lengths of the two parallel sides of the trapezium\n    # Divide the sum by 2 to get the average length\n    # Return the average length as the median length of the trapezium",
            "requirements": "",
            "final_plan": "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median",
            "code": "function calculateMedianLength(base1, base2, height)\n    local medianLength = (base1 + base2) / 2\n    return medianLength\nend",
            "gen_tc": "",
            "sim_score": "0.6167"
        },
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.5145"
        },
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.5061"
        },
        {
            "id": "412",
            "prompt": "Write a python function to remove odd numbers from a given list.",
            "draft_plan": "# Create an empty list to store the even numbers\n\n# Iterate through each number in the given list\n    # Check if the number is even (number % 2 == 0)\n        # If the number is even, append it to the list of even numbers\n\n# Return the list of even numbers",
            "requirements": "",
            "final_plan": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
            "code": "function remove_odd_numbers(lst)\n    local even_lst = {}\n\n    for _, num in ipairs(lst) do\n        if num % 2 == 0 then\n            table.insert(even_lst, num)\n        end\n    end\n\n    return even_lst\nend",
            "gen_tc": "",
            "sim_score": "0.4760"
        },
        {
            "id": "71",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Use the built-in sorted() function to sort the list in ascending order\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums",
            "code": "function sort_list(elements)\n    return sorted(elements)\nend",
            "gen_tc": "",
            "sim_score": "0.4693"
        },
        {
            "id": "141",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Implement a sorting algorithm such as bubble sort, insertion sort, merge sort, quick sort, etc.\n\n# Define a function to take a list of elements as input\n    # Iterate through the list to compare each element with its adjacent element(s)\n        # Swap elements if they are in the wrong order\n    # Repeat the above steps until the list is sorted\n\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums",
            "code": "-- Bubble Sort implementation\nfunction sort_list(list)\n    local n = #list\n    for i = 1, n-1 do\n        for j = 1, n-i do\n            if list[j] > list[j+1] then\n                list[j], list[j+1] = list[j+1], list[j]\n            end\n        end\n    end\n    return list\nend",
            "gen_tc": "",
            "sim_score": "0.4685"
        },
        {
            "id": "419",
            "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
            "draft_plan": "# Initialize a variable to store the total sum\n# Iterate through each number in the list\n    # Round the number to the nearest integer\n    # Add the rounded number to the total sum\n\n# Calculate the total sum multiplied by the length of the list\n# Print the result",
            "requirements": "",
            "final_plan": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum",
            "code": "function round_and_multiply(numbers)\n    local total_sum = 0\n\n    for _, num in ipairs(numbers) do\n        total_sum = total_sum + math.round(num)\n    end\n\n    local result = total_sum * #numbers\n    print(result)\nend\n\nfunction math.round(num)\n    return math.floor(num + 0.5)\nend",
            "gen_tc": "",
            "sim_score": "0.4641"
        },
        {
            "id": "94",
            "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
            "draft_plan": "# Initialize the minimum second value as positive infinity\n# Initialize the first value of the tuple with minimum second value as None\n\n# Iterate through each tuple in the list\n    # Check if the second value of the current tuple is smaller than the current minimum second value\n        # If yes, update the minimum second value and the first value of the tuple\n\n# Return the first value of the tuple with the smallest second value",
            "requirements": "",
            "final_plan": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ",
            "code": "function get_first_smallest_value(test_list)\n    local min_second = math.huge\n    local first_value = nil\n    \n    for _, tup in ipairs(test_list) do\n        local second_value = tup[2]\n        \n        if second_value < min_second then\n            min_second = second_value\n            first_value = tup[1]\n        end\n    end\n    \n    return first_value\nend",
            "gen_tc": "",
            "sim_score": "0.4587"
        },
        {
            "id": "292",
            "prompt": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
            "draft_plan": "To find the quotient of two numbers rounded down to the nearest integer, you can use the floor division operator `//` in Python.\n\nHere is the code logic:\n\n```python\ndef quotient(a, b):\n    return a // b\n```\n\nIn this code, the function `quotient` takes two parameters `a` and `b`, representing the numbers for which we want to find the quotient. The floor division `a // b` divides `a` by `b` and returns the quotient rounded down to the nearest integer.\n\nYou can call this function with your desired values to find the quotient. For example:\n\n```python\nresult = quotient(10, 3)\nprint(result)  # Output: 3\n```",
            "requirements": "",
            "final_plan": "def find(n,m):  \n    q = n//m \n    return (q)",
            "code": "function quotient(a, b)\n    return math.floor(a / b)\nend\n\n-- Example usage\nlocal result = quotient(10, 3)\nprint(result) -- Output: 3",
            "gen_tc": "",
            "sim_score": "0.4572"
        }
    ],
    "HumanEval/48": [
        {
            "id": "100",
            "prompt": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
            "draft_plan": "# Define a helper function to check if a number is palindrome\n    # Convert the number to a string\n    # Check if the string is equal to its reversed string representation\n\n# Start a loop from the next number after the specified integer\n    # Check if the current number is a palindrome\n        # If yes, return the current number\n\n# If no palindrome is found in the loop, return None",
            "requirements": "",
            "final_plan": "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i",
            "code": "function isPalindrome(num)\n    local str = tostring(num)\n    return str == string.reverse(str)\nend\n\nfunction nextSmallestPalindrome(num)\n    num = num + 1\n\n    while true do\n        if isPalindrome(num) then\n            return num\n        end\n        num = num + 1\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.6577"
        },
        {
            "id": "131",
            "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
            "draft_plan": "# Create a list of vowels (including both lowercase and uppercase)\n# Convert the input string into a list of characters\n\n# Initialize two pointers: one at the start of the string and one at the end\n# Iterate while the pointers don't overlap\n    # Check if the character at the start pointer is a vowel\n        # If it is, then check if the character at the end pointer is also a vowel\n            # If it is, swap the characters at the start and end pointers\n            # Move the start pointer to the next character\n            # Move the end pointer to the previous character\n        # If the character at the end pointer is not a vowel, move the end pointer to the previous character\n    \n# Convert the modified list of characters back into a string and return it",
            "requirements": "",
            "final_plan": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string",
            "code": "function reverse_vowels(str)\n    local vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }\n    local chars = {}\n    for i = 1, string.len(str) do\n        table.insert(chars, string.sub(str, i, i))\n    end\n    \n    local start = 1\n    local finish = string.len(str)\n    \n    while start < finish do\n        if is_vowel(chars[start], vowels) then\n            while not is_vowel(chars[finish], vowels) and finish > start do\n                finish = finish - 1\n            end\n            if finish > start then\n                chars[start], chars[finish] = chars[finish], chars[start]\n                start = start + 1\n                finish = finish - 1\n            end\n        else\n            start = start + 1\n        end\n    end\n    \n    return table.concat(chars)\nend\n\nfunction is_vowel(char, vowels)\n    for _, vowel in ipairs(vowels) do\n        if char == vowel then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.6127"
        },
        {
            "id": "56",
            "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
            "draft_plan": "# Convert the given number to a string and reverse it\n# Convert the reversed string back to an integer\n# Check if the given number is equal to twice the reversed number plus 1\n# If the condition is true, return True. Otherwise, return False.",
            "requirements": "",
            "final_plan": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
            "code": "function is_one_less_twice_reverse(number)\n    local reverse = tonumber(string.reverse(tostring(number)))\n    if number == (2 * reverse + 1) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5988"
        },
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.5685"
        },
        {
            "id": "247",
            "prompt": "Write a function to find the length of the longest palindromic subsequence in the given string.",
            "draft_plan": "# Create a 2D array of size n x n, where n is the length of the input string\n# Fill the diagonal with 1, as each character is a palindrome of length 1\n\n# Iterate through the remaining elements of the array in a bottom-up manner\n    # If the characters at the current indices match\n        # Set the value of the current cell as 2 plus the value in the cell diagonally below and to the right (i+1, j+1)\n    # Otherwise, set the value of the current cell as the maximum of the value in the cell to the left (i, j-1) and the value in the cell below (i+1, j)\n\n# Return the value in the top-right cell of the array, which represents the length of the longest palindromic subsequence",
            "requirements": "",
            "final_plan": "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]",
            "code": "function longestPalindromicSubsequence(str)\n    local n = string.len(str)\n    local dp = {}\n    \n    -- Initialize diagonal with 1\n    for i = 1, n do\n        dp[i] = {}\n        dp[i][i] = 1\n    end\n    \n    -- Fill the array in a bottom-up manner\n    for i = n-1, 1, -1 do\n        for j = i+1, n do\n            if string.sub(str, i, i) == string.sub(str, j, j) then\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else\n                dp[i][j] = math.max(dp[i][j-1], dp[i+1][j])\n            end\n        end\n    end\n    \n    return dp[1][n]\nend",
            "gen_tc": "",
            "sim_score": "0.5553"
        },
        {
            "id": "406",
            "prompt": "Write a python function to find whether the parity of a given number is odd.",
            "draft_plan": "# Check if the number modulo 2 is equal to 1\n    # If the modulo is 1, the number is odd\n    # Return True\n\n# If the modulo is not 1, the number is even\n# Return False",
            "requirements": "",
            "final_plan": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False",
            "code": "function is_odd_parity(number)\n    return number % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.5422"
        },
        {
            "id": "396",
            "prompt": "Write a function to check whether the given string starts and ends with the same character or not.",
            "draft_plan": "# Check if the first character of the string is equal to the last character\n    # If they are equal, return True\n    # If they are not equal, return False",
            "requirements": "",
            "final_plan": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ",
            "code": "function starts_ends_same(str)\n    local first_char = string.sub(str, 1, 1)\n    local last_char = string.sub(str, -1)\n    \n    if first_char == last_char then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5168"
        },
        {
            "id": "77",
            "prompt": "Write a python function to find whether a number is divisible by 11.",
            "draft_plan": "To determine whether a number is divisible by 11, we can use the following logic:\n\n1. Convert the number to a string.\n2. Iterate through the digits of the number.\n3. Add the digits in odd positions (starting from the rightmost digit) and subtract the sum of the digits in even positions.\n4. If the result is divisible by 11, the original number is also divisible by 11.\n\nHere is the code implementing this logic:\n\n```python\ndef is_divisible_by_11(number):\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Iterate through the digits of the number\n    sum_odd = 0\n    sum_even = 0\n    for i in range(len(number_str)):\n        digit = int(number_str[i])\n        \n        # Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0:\n            sum_odd += digit\n        else:\n            sum_even += digit\n    \n    # Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0:\n        return True\n    else:\n        return False\n```\n\nYou can use this function to check if a number is divisible by 11. For example:\n\n```python\nprint(is_divisible_by_11(121))  # Output: True\nprint(is_divisible_by_11(123))  # Output: False\n```",
            "requirements": "",
            "final_plan": "def is_Diff(n): \n    return (n % 11 == 0) ",
            "code": "function is_divisible_by_11(number)\n    -- Convert the number to a string\n    local number_str = tostring(number)\n    \n    -- Iterate through the digits of the number\n    local sum_odd = 0\n    local sum_even = 0\n    for i = 1, string.len(number_str) do\n        local digit = tonumber(string.sub(number_str, i, i))\n        \n        -- Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0 then\n            sum_even = sum_even + digit\n        else\n            sum_odd = sum_odd + digit\n        end\n    end\n    \n    -- Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0 then\n        return true\n    else\n        return false\n    end\nend\n\nprint(is_divisible_by_11(121))  -- Output: true\nprint(is_divisible_by_11(123))  -- Output: false",
            "gen_tc": "",
            "sim_score": "0.5049"
        },
        {
            "id": "456",
            "prompt": "Write a function to reverse each string in a given list of string values.",
            "draft_plan": "# Iterate through each string in the given list\n    # Reverse the current string using string slicing\n    # Update the current string in the list with the reversed string\n\n# Return the modified list",
            "requirements": "",
            "final_plan": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result",
            "code": "function reverse_strings(str_list)\n    for i = 1, #str_list do\n        str_list[i] = string.reverse(str_list[i])\n    end\n    return str_list\nend",
            "gen_tc": "",
            "sim_score": "0.4825"
        },
        {
            "id": "434",
            "prompt": "Write a function that matches a string that has an a followed by one or more b's.",
            "draft_plan": "import re\n\ndef match_string(string):\n    pattern = r'a+b+'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n",
            "code": "function match_string(str)\n    local pattern = \"a+b+\"\n    if string.match(str, pattern) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4808"
        }
    ],
    "HumanEval/49": [
        {
            "id": "435",
            "prompt": "Write a python function to find the last digit of a given number.",
            "draft_plan": "To find the last digit of a given number, you can use the modulo operator (`%`) to get the remainder when dividing the number by 10. The remainder will be the last digit of the number.\n\nHere's the code logic:\n\n1. Define a function `find_last_digit` that takes a number as input.\n2. Inside the function, calculate the remainder of the number when divided by 10 using the modulo operator: `last_digit = number % 10`.\n3. Return the value of `last_digit`.\n\nHere's the code implementation in Python:\n\n```python\ndef find_last_digit(number):\n    last_digit = number % 10\n    return last_digit\n```\n\nYou can then call this function by passing a number as an argument to get the last digit. For example:\n\n```python\nprint(find_last_digit(12345))  # Output: 5\nprint(find_last_digit(987654321))  # Output: 1\nprint(find_last_digit(0))  # Output: 0\n```",
            "requirements": "",
            "final_plan": "def last_Digit(n) :\n    return (n % 10) ",
            "code": "function find_last_digit(number)\n    local last_digit = number % 10\n    return last_digit\nend\n\nprint(find_last_digit(12345))  -- Output: 5\nprint(find_last_digit(987654321))  -- Output: 1\nprint(find_last_digit(0))  -- Output: 0",
            "gen_tc": "",
            "sim_score": "0.5940"
        },
        {
            "id": "471",
            "prompt": "Write a python function to find the product of the array multiplication modulo n.",
            "draft_plan": "# Initialize the product to 1\n\n# Iterate through each element in the array\n    # Multiply the current element with the product\n    # Take the modulo of the product with n\n\n# Return the final product modulo n",
            "requirements": "",
            "final_plan": "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ",
            "code": "function arrayProductModuloN(arr, n)\n    local product = 1\n\n    for _, num in ipairs(arr) do\n        product = (product * num) % n\n    end\n\n    return product\nend",
            "gen_tc": "",
            "sim_score": "0.5919"
        },
        {
            "id": "406",
            "prompt": "Write a python function to find whether the parity of a given number is odd.",
            "draft_plan": "# Check if the number modulo 2 is equal to 1\n    # If the modulo is 1, the number is odd\n    # Return True\n\n# If the modulo is not 1, the number is even\n# Return False",
            "requirements": "",
            "final_plan": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False",
            "code": "function is_odd_parity(number)\n    return number % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.5302"
        },
        {
            "id": "167",
            "prompt": "Write a python function to find the smallest power of 2 greater than or equal to n.",
            "draft_plan": "# Initialize a variable to store the smallest power of 2\n# Check if n is already a power of 2\n    # If it is, return n\n    \n# Iterate through powers of 2 starting from 2\n    # Check if the current power of 2 is greater than or equal to n\n        # If it is, return the current power of 2",
            "requirements": "",
            "final_plan": "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; ",
            "code": "function smallest_power_of_2(n)\n    local power = 1\n    \n    if is_power_of_2(n) then\n        return n\n    end\n    \n    while power < n do\n        power = power * 2\n    end\n    \n    return power\nend\n\nfunction is_power_of_2(n)\n    while n > 1 do\n        if n % 2 ~= 0 then\n            return false\n        end\n        n = n / 2\n    end\n    \n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.5274"
        },
        {
            "id": "138",
            "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
            "draft_plan": "# Initialize a variable 'n' with the given number\n\n# Iterate while 'n' is greater than 0\n    # Check if 'n' is divisible by 2\n        # If 'n' is divisible by 2, divide 'n' by 2\n        # Otherwise, subtract the largest power of 2 less than 'n' from 'n'\n\n# If 'n' becomes 0, return True\n# Otherwise, return False",
            "requirements": "",
            "final_plan": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True",
            "code": "function canRepresentAsPowerOf2(n)\n    while n > 0 do\n        if n % 2 == 0 then\n            n = n / 2\n        else\n            n = n - math.pow(2, math.floor(math.log(n, 2)))\n        end\n    end\n    \n    return n == 0\nend",
            "gen_tc": "",
            "sim_score": "0.5100"
        },
        {
            "id": "388",
            "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.",
            "draft_plan": "# Initialize the highest power of 2 to 1\n\n# While the highest power of 2 is less than or equal to n\n    # Multiply the highest power of 2 by 2\n\n# Divide the highest power of 2 by 2 to get the result",
            "requirements": "",
            "final_plan": "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res ",
            "code": "function highest_power_of_2(n)\n    local power = 1\n\n    while power * 2 <= n do\n        power = power * 2\n    end\n\n    return power\nend",
            "gen_tc": "",
            "sim_score": "0.5024"
        },
        {
            "id": "77",
            "prompt": "Write a python function to find whether a number is divisible by 11.",
            "draft_plan": "To determine whether a number is divisible by 11, we can use the following logic:\n\n1. Convert the number to a string.\n2. Iterate through the digits of the number.\n3. Add the digits in odd positions (starting from the rightmost digit) and subtract the sum of the digits in even positions.\n4. If the result is divisible by 11, the original number is also divisible by 11.\n\nHere is the code implementing this logic:\n\n```python\ndef is_divisible_by_11(number):\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Iterate through the digits of the number\n    sum_odd = 0\n    sum_even = 0\n    for i in range(len(number_str)):\n        digit = int(number_str[i])\n        \n        # Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0:\n            sum_odd += digit\n        else:\n            sum_even += digit\n    \n    # Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0:\n        return True\n    else:\n        return False\n```\n\nYou can use this function to check if a number is divisible by 11. For example:\n\n```python\nprint(is_divisible_by_11(121))  # Output: True\nprint(is_divisible_by_11(123))  # Output: False\n```",
            "requirements": "",
            "final_plan": "def is_Diff(n): \n    return (n % 11 == 0) ",
            "code": "function is_divisible_by_11(number)\n    -- Convert the number to a string\n    local number_str = tostring(number)\n    \n    -- Iterate through the digits of the number\n    local sum_odd = 0\n    local sum_even = 0\n    for i = 1, string.len(number_str) do\n        local digit = tonumber(string.sub(number_str, i, i))\n        \n        -- Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0 then\n            sum_even = sum_even + digit\n        else\n            sum_odd = sum_odd + digit\n        end\n    end\n    \n    -- Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0 then\n        return true\n    else\n        return false\n    end\nend\n\nprint(is_divisible_by_11(121))  -- Output: true\nprint(is_divisible_by_11(123))  -- Output: false",
            "gen_tc": "",
            "sim_score": "0.4976"
        },
        {
            "id": "292",
            "prompt": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
            "draft_plan": "To find the quotient of two numbers rounded down to the nearest integer, you can use the floor division operator `//` in Python.\n\nHere is the code logic:\n\n```python\ndef quotient(a, b):\n    return a // b\n```\n\nIn this code, the function `quotient` takes two parameters `a` and `b`, representing the numbers for which we want to find the quotient. The floor division `a // b` divides `a` by `b` and returns the quotient rounded down to the nearest integer.\n\nYou can call this function with your desired values to find the quotient. For example:\n\n```python\nresult = quotient(10, 3)\nprint(result)  # Output: 3\n```",
            "requirements": "",
            "final_plan": "def find(n,m):  \n    q = n//m \n    return (q)",
            "code": "function quotient(a, b)\n    return math.floor(a / b)\nend\n\n-- Example usage\nlocal result = quotient(10, 3)\nprint(result) -- Output: 3",
            "gen_tc": "",
            "sim_score": "0.4725"
        },
        {
            "id": "83",
            "prompt": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
            "draft_plan": "# Define a function to calculate the character made by adding the ASCII values modulo 26\n    # Initialize a variable to store the sum of ASCII values\n    # Iterate through each character in the given string\n        # Add the ASCII value of the current character to the sum\n    # Calculate the modulo 26 of the sum\n    # Convert the result back to a character using the ASCII value\n    # Return the resulting character",
            "requirements": "",
            "final_plan": "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)",
            "code": "function calculate_ascii_modulo_26(string)\n    local sum = 0\n    for i = 1, string.len(string) do\n        sum = sum + string.byte(string, i)\n    end\n\n    local modulo_result = sum % 26\n\n    -- Convert the modulo result to a character using the ASCII value\n    local result_char = string.char(modulo_result)\n\n    return result_char\nend",
            "gen_tc": "",
            "sim_score": "0.4678"
        },
        {
            "id": "93",
            "prompt": "Write a function to calculate the value of 'a' to the power 'b'.",
            "draft_plan": "# Initialize the result variable to 1\n\n# If b is positive\n    # Iterate from 1 to b\n        # Multiply the result by a\n\n# If b is negative\n    # Iterate from 1 to abs(b)\n        # Divide the result by a\n\n# Return the result",
            "requirements": "",
            "final_plan": "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)",
            "code": "function power(a, b)\n    local result = 1\n\n    if b >= 0 then\n        for i = 1, b do\n            result = result * a\n        end\n    else\n        for i = 1, math.abs(b) do\n            result = result / a\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4632"
        }
    ],
    "HumanEval/50": [
        {
            "id": "310",
            "prompt": "Write a function to convert a given string to a tuple of characters.",
            "draft_plan": "# Initialize an empty tuple\n\n# Iterate through each character in the input string\n    # Append the character to the tuple\n\n# Return the tuple",
            "requirements": "",
            "final_plan": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result",
            "code": "function string_to_tuple(string)\n    local tuple = {}\n    \n    for i = 1, string.len(string) do\n        local char = string.sub(string, i, i)\n        table.insert(tuple, char)\n    end\n    \n    return tuple\nend",
            "gen_tc": "",
            "sim_score": "0.5181"
        },
        {
            "id": "230",
            "prompt": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
            "draft_plan": "# Define a function that takes in a string and a character as arguments\n    # Convert the string into a list of characters\n    # Iterate through each character in the list\n        # Check if the character is a blank space\n            # If it is, replace it with the given character\n    # Join the list of characters back into a string\n    # Return the modified string\n\n# Example usage:\n# string = \"Hello World\"\n# character = \"-\"\n# modified_string = replace_spaces(string, character)\n# print(modified_string) --> \"Hello-World\"",
            "requirements": "",
            "final_plan": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2",
            "code": "function replace_spaces(str, char)\n    local chars = {}\n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        if c == \" \" then\n            c = char\n        end\n        table.insert(chars, c)\n    end\n    return table.concat(chars)\nend\n\nlocal string = \"Hello World\"\nlocal character = \"-\"\nlocal modified_string = replace_spaces(string, character)\nprint(modified_string) --> \"Hello-World\"",
            "gen_tc": "",
            "sim_score": "0.5089"
        },
        {
            "id": "269",
            "prompt": "Write a function to find the ascii value of a character.",
            "draft_plan": "To find the ASCII value of a character in Python, you can use the `ord()` function. Here is the code logic:\n\n1. Define a function `find_ascii_value(char)` that takes a character as input.\n2. Inside the function, use the `ord()` function to find the ASCII value of the character.\n3. Return the ASCII value.\n\nHere is the code:\n\n```python\ndef find_ascii_value(char):\n    return ord(char)\n```\n\nYou can then call this function and pass the character whose ASCII value you want to find, like this:\n\n```python\nprint(find_ascii_value('A')) # Output: 65\n```\n\nNote that the `ord()` function only works with single characters. If you pass a string with multiple characters, it will raise a `TypeError`.",
            "requirements": "",
            "final_plan": "def ascii_value(k):\n  ch=k\n  return ord(ch)",
            "code": "In Lua, the `string.byte()` function can be used to find the ASCII value of a character. Here is the Lua code to find the ASCII value of a character:\n\n```lua\nfunction find_ascii_value(char)\n    return string.byte(char)\nend\n```\n\nYou can then call this function and pass the character whose ASCII value you want to find, like this:\n\n```lua\nprint(find_ascii_value(\"A\")) -- Output: 65\n```\n\nNote that in Lua, you need to pass the character as a string to the `string.byte()` function.",
            "gen_tc": "",
            "sim_score": "0.4978"
        },
        {
            "id": "83",
            "prompt": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
            "draft_plan": "# Define a function to calculate the character made by adding the ASCII values modulo 26\n    # Initialize a variable to store the sum of ASCII values\n    # Iterate through each character in the given string\n        # Add the ASCII value of the current character to the sum\n    # Calculate the modulo 26 of the sum\n    # Convert the result back to a character using the ASCII value\n    # Return the resulting character",
            "requirements": "",
            "final_plan": "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)",
            "code": "function calculate_ascii_modulo_26(string)\n    local sum = 0\n    for i = 1, string.len(string) do\n        sum = sum + string.byte(string, i)\n    end\n\n    local modulo_result = sum % 26\n\n    -- Convert the modulo result to a character using the ASCII value\n    local result_char = string.char(modulo_result)\n\n    return result_char\nend",
            "gen_tc": "",
            "sim_score": "0.4855"
        },
        {
            "id": "474",
            "prompt": "Write a function to replace characters in a string.",
            "draft_plan": "# Initialize an empty string to store the modified string\n\n# Iterate through each character in the input string\n    # Check if the character needs to be replaced\n        # If replacement is required, append the replacement character to the modified string\n        # Otherwise, append the original character to the modified string\n\n# Return the modified string",
            "requirements": "",
            "final_plan": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2",
            "code": "function replaceCharacters(str, replacements)\n    local modified = \"\"\n    \n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        \n        if replacements[c] then\n            modified = modified .. replacements[c]\n        else\n            modified = modified .. c\n        end\n    end\n    \n    return modified\nend",
            "gen_tc": "",
            "sim_score": "0.4664"
        },
        {
            "id": "131",
            "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
            "draft_plan": "# Create a list of vowels (including both lowercase and uppercase)\n# Convert the input string into a list of characters\n\n# Initialize two pointers: one at the start of the string and one at the end\n# Iterate while the pointers don't overlap\n    # Check if the character at the start pointer is a vowel\n        # If it is, then check if the character at the end pointer is also a vowel\n            # If it is, swap the characters at the start and end pointers\n            # Move the start pointer to the next character\n            # Move the end pointer to the previous character\n        # If the character at the end pointer is not a vowel, move the end pointer to the previous character\n    \n# Convert the modified list of characters back into a string and return it",
            "requirements": "",
            "final_plan": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string",
            "code": "function reverse_vowels(str)\n    local vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }\n    local chars = {}\n    for i = 1, string.len(str) do\n        table.insert(chars, string.sub(str, i, i))\n    end\n    \n    local start = 1\n    local finish = string.len(str)\n    \n    while start < finish do\n        if is_vowel(chars[start], vowels) then\n            while not is_vowel(chars[finish], vowels) and finish > start do\n                finish = finish - 1\n            end\n            if finish > start then\n                chars[start], chars[finish] = chars[finish], chars[start]\n                start = start + 1\n                finish = finish - 1\n            end\n        else\n            start = start + 1\n        end\n    end\n    \n    return table.concat(chars)\nend\n\nfunction is_vowel(char, vowels)\n    for _, vowel in ipairs(vowels) do\n        if char == vowel then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4573"
        },
        {
            "id": "118",
            "prompt": "Write a function to convert a string to a list of strings split on the space character.",
            "draft_plan": "# Initialize an empty list to store the split strings\n\n# Split the input string on the space character and store the result in a variable\n\n# Iterate through each element in the split result\n    # Append the element to the list\n\n# Return the list of split strings",
            "requirements": "",
            "final_plan": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst",
            "code": "function split_string(str)\n    local split_result = {}\n    for word in string.gmatch(str, \"%S+\") do\n        table.insert(split_result, word)\n    end\n    return split_result\nend",
            "gen_tc": "",
            "sim_score": "0.4487"
        },
        {
            "id": "132",
            "prompt": "Write a function to convert a tuple to a string.",
            "draft_plan": "# Initialize an empty string\n\n# Iterate through each element in the tuple\n    # Convert the element to a string and append it to the result string\n    # Add a comma after each element except for the last element\n\n# Return the result string",
            "requirements": "",
            "final_plan": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str",
            "code": "function tupleToString(tuple)\n    local result = \"\"\n\n    for i, element in ipairs(tuple) do\n        result = result .. tostring(element)\n\n        if i < #tuple then\n            result = result .. \",\"\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4222"
        },
        {
            "id": "456",
            "prompt": "Write a function to reverse each string in a given list of string values.",
            "draft_plan": "# Iterate through each string in the given list\n    # Reverse the current string using string slicing\n    # Update the current string in the list with the reversed string\n\n# Return the modified list",
            "requirements": "",
            "final_plan": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result",
            "code": "function reverse_strings(str_list)\n    for i = 1, #str_list do\n        str_list[i] = string.reverse(str_list[i])\n    end\n    return str_list\nend",
            "gen_tc": "",
            "sim_score": "0.4215"
        },
        {
            "id": "165",
            "prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
            "draft_plan": "# Initialize a variable to keep track of the count of characters at the same position in the English alphabet\n# Iterate through each character in the input string\n    # Convert the character to lowercase\n    # Check if the character is an alphabet character\n        # Get the position of the character in the English alphabet by subtracting the ASCII value of 'a' or 'A'\n        # Check if the position is equal to the index of the character in the string\n            # If the condition is true, increment the count\n\n# Return the count of characters at the same position in the English alphabet",
            "requirements": "",
            "final_plan": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ",
            "code": "function countSamePositionChars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local c = string.lower(string.sub(str, i, i))\n        if c >= \"a\" and c <= \"z\" then\n            local position = string.byte(c) - string.byte(\"a\") + 1\n            if position == i then\n                count = count + 1\n            end\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4213"
        }
    ],
    "HumanEval/51": [
        {
            "id": "131",
            "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
            "draft_plan": "# Create a list of vowels (including both lowercase and uppercase)\n# Convert the input string into a list of characters\n\n# Initialize two pointers: one at the start of the string and one at the end\n# Iterate while the pointers don't overlap\n    # Check if the character at the start pointer is a vowel\n        # If it is, then check if the character at the end pointer is also a vowel\n            # If it is, swap the characters at the start and end pointers\n            # Move the start pointer to the next character\n            # Move the end pointer to the previous character\n        # If the character at the end pointer is not a vowel, move the end pointer to the previous character\n    \n# Convert the modified list of characters back into a string and return it",
            "requirements": "",
            "final_plan": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string",
            "code": "function reverse_vowels(str)\n    local vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }\n    local chars = {}\n    for i = 1, string.len(str) do\n        table.insert(chars, string.sub(str, i, i))\n    end\n    \n    local start = 1\n    local finish = string.len(str)\n    \n    while start < finish do\n        if is_vowel(chars[start], vowels) then\n            while not is_vowel(chars[finish], vowels) and finish > start do\n                finish = finish - 1\n            end\n            if finish > start then\n                chars[start], chars[finish] = chars[finish], chars[start]\n                start = start + 1\n                finish = finish - 1\n            end\n        else\n            start = start + 1\n        end\n    end\n    \n    return table.concat(chars)\nend\n\nfunction is_vowel(char, vowels)\n    for _, vowel in ipairs(vowels) do\n        if char == vowel then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.7433"
        },
        {
            "id": "11",
            "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
            "draft_plan": "# Find the index of the first occurrence of the given character in the string\n# Find the index of the last occurrence of the given character in the string\n\n# If both indices are valid\n    # Remove the first occurrence of the character from the string\n    # Decrement the index of the last occurrence by 1 to account for the removal\n    # Remove the last occurrence of the character from the string\n\n# Return the modified string",
            "requirements": "",
            "final_plan": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ",
            "code": "function removeFirstAndLastOccurrence(str, char)\n    local firstIndex = string.find(str, char)\n    local lastIndex = string.find(str:reverse(), char)\n\n    if firstIndex and lastIndex then\n        str = string.sub(str, 1, firstIndex - 1) .. string.sub(str, firstIndex + 1)\n        lastIndex = string.len(str) - lastIndex + 1\n        str = string.sub(str, 1, lastIndex - 1) .. string.sub(str, lastIndex + 1)\n    end\n\n    return str\nend",
            "gen_tc": "",
            "sim_score": "0.5310"
        },
        {
            "id": "226",
            "prompt": "Write a python function to remove the characters which have odd index values of a given string.",
            "draft_plan": "# Initialize an empty string to store the result\n\n# Iterate through each character and its index in the input string\n    # Check if the index of the current character is even\n        # If it is even, append the character to the result string\n\n# Return the result string",
            "requirements": "",
            "final_plan": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result",
            "code": "function remove_odd_index_chars(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        if i % 2 == 0 then\n            result = result .. string.sub(str, i, i)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5083"
        },
        {
            "id": "230",
            "prompt": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
            "draft_plan": "# Define a function that takes in a string and a character as arguments\n    # Convert the string into a list of characters\n    # Iterate through each character in the list\n        # Check if the character is a blank space\n            # If it is, replace it with the given character\n    # Join the list of characters back into a string\n    # Return the modified string\n\n# Example usage:\n# string = \"Hello World\"\n# character = \"-\"\n# modified_string = replace_spaces(string, character)\n# print(modified_string) --> \"Hello-World\"",
            "requirements": "",
            "final_plan": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2",
            "code": "function replace_spaces(str, char)\n    local chars = {}\n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        if c == \" \" then\n            c = char\n        end\n        table.insert(chars, c)\n    end\n    return table.concat(chars)\nend\n\nlocal string = \"Hello World\"\nlocal character = \"-\"\nlocal modified_string = replace_spaces(string, character)\nprint(modified_string) --> \"Hello-World\"",
            "gen_tc": "",
            "sim_score": "0.5033"
        },
        {
            "id": "451",
            "prompt": "Write a function to remove all whitespaces from the given string.",
            "draft_plan": "# Initialize an empty string to store the modified string\n\n# Iterate through each character in the input string\n    # Check if the current character is a whitespace\n        # If it is not a whitespace, append it to the modified string\n\n# Return the modified string without whitespaces",
            "requirements": "",
            "final_plan": "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))",
            "code": "function remove_whitespaces(str)\n    local modified_str = \"\"\n\n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        if c ~= \" \" then\n            modified_str = modified_str .. c\n        end\n    end\n\n    return modified_str\nend",
            "gen_tc": "",
            "sim_score": "0.4994"
        },
        {
            "id": "437",
            "prompt": "Write a function to remove odd characters in a string.",
            "draft_plan": "# Initialize an empty string to store the result\n\n# Iterate through each character in the input string\n    # Check if the index of the current character is even\n        # If the index is even, append the character to the result string\n\n# Return the result string",
            "requirements": "",
            "final_plan": "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2",
            "code": "function removeOddCharacters(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        if i % 2 == 0 then\n            result = result .. string.sub(str, i, i)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4960"
        },
        {
            "id": "18",
            "prompt": "Write a function to remove characters from the first string which are present in the second string.",
            "draft_plan": "# Convert the second string into a set for efficient lookup\n\n# Initialize an empty string to store the result\n\n# Iterate through each character in the first string\n    # Check if the character is not present in the second string\n        # Append the character to the result string\n\n# Return the result string",
            "requirements": "",
            "final_plan": "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) ",
            "code": "function removeChars(str1, str2)\n    local charsSet = {}\n    local result = \"\"\n\n    for i = 1, string.len(str2) do\n        charsSet[string.sub(str2, i, i)] = true\n    end\n\n    for i = 1, string.len(str1) do\n        local char = string.sub(str1, i, i)\n        if not charsSet[char] then\n            result = result .. char\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4921"
        },
        {
            "id": "474",
            "prompt": "Write a function to replace characters in a string.",
            "draft_plan": "# Initialize an empty string to store the modified string\n\n# Iterate through each character in the input string\n    # Check if the character needs to be replaced\n        # If replacement is required, append the replacement character to the modified string\n        # Otherwise, append the original character to the modified string\n\n# Return the modified string",
            "requirements": "",
            "final_plan": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2",
            "code": "function replaceCharacters(str, replacements)\n    local modified = \"\"\n    \n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        \n        if replacements[c] then\n            modified = modified .. replacements[c]\n        else\n            modified = modified .. c\n        end\n    end\n    \n    return modified\nend",
            "gen_tc": "",
            "sim_score": "0.4840"
        },
        {
            "id": "478",
            "prompt": "Write a function to remove lowercase substrings from a given string.",
            "draft_plan": "# Initialize an empty string to store the final result\n\n# Iterate through each character in the given string\n    # Check if the character is uppercase\n        # If the character is uppercase, append it to the final result string\n\n# Return the final result string",
            "requirements": "",
            "final_plan": "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)",
            "code": "function removeLowercaseSubstrings(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        if string.upper(c) == c then\n            result = result .. c\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4798"
        },
        {
            "id": "459",
            "prompt": "Write a function to remove uppercase substrings from a given string.",
            "draft_plan": "# Initialize an empty string to store the result\n\n# Iterate through each character in the input string\n    # Check if the current character is lowercase\n        # If it is lowercase, append it to the result string\n\n# Return the result string",
            "requirements": "",
            "final_plan": "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)",
            "code": "function removeUppercaseSubstrings(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= \"a\" and char <= \"z\" then\n            result = result .. char\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4727"
        }
    ],
    "HumanEval/52": [
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.5841"
        },
        {
            "id": "283",
            "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
            "draft_plan": "# Convert the input integer to a string\n# Initialize a dictionary to store the frequency of each digit\n\n# Iterate through each digit in the string\n    # Increment the frequency of the digit in the dictionary\n\n# Iterate through each digit in the string\n    # Check if the frequency of the digit is greater than the digit itself\n        # If yes, return False\n\n# If all frequencies are less than or equal to their respective digits, return True",
            "requirements": "",
            "final_plan": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
            "code": "function check_frequency(num)\n    local str_num = tostring(num)\n    local freq_dict = {}\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        freq_dict[digit] = (freq_dict[digit] or 0) + 1\n    end\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        if freq_dict[digit] > tonumber(digit) then\n            return false\n        end\n    end\n\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.5602"
        },
        {
            "id": "404",
            "prompt": "Write a python function to find the minimum of two numbers.",
            "draft_plan": "# Define a function to find the minimum of two numbers\n    # Check if the first number is less than the second number\n        # If true, return the first number\n        # If false, return the second number\n\n# Call the function and pass two numbers as arguments",
            "requirements": "",
            "final_plan": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ",
            "code": "function find_minimum(a, b)\n    if a < b then\n        return a\n    else\n        return b\n    end\nend\n\n-- Example usage\nlocal num1 = 10\nlocal num2 = 5\nlocal min = find_minimum(num1, num2)\nprint(min)  -- Output: 5",
            "gen_tc": "",
            "sim_score": "0.5341"
        },
        {
            "id": "410",
            "prompt": "Write a function to find the minimum value in a given heterogeneous list.",
            "draft_plan": "# Initialize the minimum value to the first element in the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the minimum value\n        # If it is, update the minimum value\n\n# Return the minimum value",
            "requirements": "",
            "final_plan": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val",
            "code": "function find_minimum_value(lst)\n    local min_value = lst[1]\n    \n    for i = 2, #lst do\n        if lst[i] < min_value then\n            min_value = lst[i]\n        end\n    end\n    \n    return min_value\nend",
            "gen_tc": "",
            "sim_score": "0.5236"
        },
        {
            "id": "277",
            "prompt": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.",
            "draft_plan": "# Initialize an empty dictionary to store the filtered entries\n\n# Iterate through each key-value pair in the input dictionary\n    # Check if the value is greater than or equal to n\n        # If it is, add the key-value pair to the filtered dictionary\n\n# Return the filtered dictionary",
            "requirements": "",
            "final_plan": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result",
            "code": "function filter_dictionary(dict, n)\n    local filtered_dict = {}\n\n    for key, value in pairs(dict) do\n        if value >= n then\n            filtered_dict[key] = value\n        end\n    end\n\n    return filtered_dict\nend",
            "gen_tc": "",
            "sim_score": "0.5186"
        },
        {
            "id": "436",
            "prompt": "Write a python function to return the negative numbers in a list.",
            "draft_plan": "# Initialize an empty list to store the negative numbers\n\n# Iterate through each element in the input list\n    # Check if the current element is less than 0\n        # If the element is negative, append it to the list of negative numbers\n\n# Return the list of negative numbers",
            "requirements": "",
            "final_plan": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ",
            "code": "function getNegativeNumbers(numbers)\n    local negativeNumbers = {}\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            table.insert(negativeNumbers, num)\n        end\n    end\n\n    return negativeNumbers\nend",
            "gen_tc": "",
            "sim_score": "0.5011"
        },
        {
            "id": "94",
            "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
            "draft_plan": "# Initialize the minimum second value as positive infinity\n# Initialize the first value of the tuple with minimum second value as None\n\n# Iterate through each tuple in the list\n    # Check if the second value of the current tuple is smaller than the current minimum second value\n        # If yes, update the minimum second value and the first value of the tuple\n\n# Return the first value of the tuple with the smallest second value",
            "requirements": "",
            "final_plan": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ",
            "code": "function get_first_smallest_value(test_list)\n    local min_second = math.huge\n    local first_value = nil\n    \n    for _, tup in ipairs(test_list) do\n        local second_value = tup[2]\n        \n        if second_value < min_second then\n            min_second = second_value\n            first_value = tup[1]\n        end\n    end\n    \n    return first_value\nend",
            "gen_tc": "",
            "sim_score": "0.4979"
        },
        {
            "id": "66",
            "prompt": "Write a python function to count the number of positive numbers in a list.",
            "draft_plan": "# Initialize a variable count to 0\n\n# Iterate through each number in the list\n    # Check if the number is greater than 0\n        # If it is, increment the count\n\n# Return the count",
            "requirements": "",
            "final_plan": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ",
            "code": "function count_positive_numbers(lst)\n    local count = 0\n\n    for _, num in ipairs(lst) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4961"
        },
        {
            "id": "56",
            "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
            "draft_plan": "# Convert the given number to a string and reverse it\n# Convert the reversed string back to an integer\n# Check if the given number is equal to twice the reversed number plus 1\n# If the condition is true, return True. Otherwise, return False.",
            "requirements": "",
            "final_plan": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
            "code": "function is_one_less_twice_reverse(number)\n    local reverse = tonumber(string.reverse(tostring(number)))\n    if number == (2 * reverse + 1) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4865"
        },
        {
            "id": "253",
            "prompt": "Write a python function that returns the number of integer elements in a given list.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the given list\n    # Check if the current element is an integer\n        # If it is an integer, increment the counter variable\n\n# Return the counter variable as the number of integer elements in the list",
            "requirements": "",
            "final_plan": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr",
            "code": "function count_integer_elements(lst)\n    local count = 0\n\n    for _, element in ipairs(lst) do\n        if type(element) == \"number\" and math.floor(element) == element then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4834"
        }
    ],
    "HumanEval/53": [
        {
            "id": "65",
            "prompt": "Write a function to flatten a list and sum all of its elements.",
            "draft_plan": "# Initialize a variable to store the sum of all elements\n\n# Iterate through each element in the list\n    # Check if the current element is a list\n        # If it is a list, recursively call the flatten_and_sum function on the current element and add the result to the sum\n    # If it is not a list, add the current element to the sum\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total",
            "code": "function flatten_and_sum(lst)\n    local sum = 0\n\n    for _, element in ipairs(lst) do\n        if type(element) == \"table\" then\n            sum = sum + flatten_and_sum(element)\n        else\n            sum = sum + element\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5662"
        },
        {
            "id": "404",
            "prompt": "Write a python function to find the minimum of two numbers.",
            "draft_plan": "# Define a function to find the minimum of two numbers\n    # Check if the first number is less than the second number\n        # If true, return the first number\n        # If false, return the second number\n\n# Call the function and pass two numbers as arguments",
            "requirements": "",
            "final_plan": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ",
            "code": "function find_minimum(a, b)\n    if a < b then\n        return a\n    else\n        return b\n    end\nend\n\n-- Example usage\nlocal num1 = 10\nlocal num2 = 5\nlocal min = find_minimum(num1, num2)\nprint(min)  -- Output: 5",
            "gen_tc": "",
            "sim_score": "0.5208"
        },
        {
            "id": "126",
            "prompt": "Write a python function to find the sum of common divisors of two given numbers.",
            "draft_plan": "# Find the common divisors of the two given numbers\n    # Find the smaller number among the two\n    # Initialize an empty list to store the common divisors\n    # Iterate from 1 to the smaller number\n        # Check if the current number is a divisor of both given numbers\n            # If yes, add it to the list of common divisors\n\n# Find the sum of the common divisors\n    # Initialize a variable to store the sum\n    # Iterate through the list of common divisors\n        # Add each divisor to the sum\n\n# Return the sum of the common divisors",
            "requirements": "",
            "final_plan": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum",
            "code": "function sumCommonDivisors(a, b)\n    local smaller = math.min(a, b)\n    local divisors = {}\n\n    for i = 1, smaller do\n        if a % i == 0 and b % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n\n    local sum = 0\n    for _, divisor in ipairs(divisors) do\n        sum = sum + divisor\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5140"
        },
        {
            "id": "138",
            "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
            "draft_plan": "# Initialize a variable 'n' with the given number\n\n# Iterate while 'n' is greater than 0\n    # Check if 'n' is divisible by 2\n        # If 'n' is divisible by 2, divide 'n' by 2\n        # Otherwise, subtract the largest power of 2 less than 'n' from 'n'\n\n# If 'n' becomes 0, return True\n# Otherwise, return False",
            "requirements": "",
            "final_plan": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True",
            "code": "function canRepresentAsPowerOf2(n)\n    while n > 0 do\n        if n % 2 == 0 then\n            n = n / 2\n        else\n            n = n - math.pow(2, math.floor(math.log(n, 2)))\n        end\n    end\n    \n    return n == 0\nend",
            "gen_tc": "",
            "sim_score": "0.5110"
        },
        {
            "id": "287",
            "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
            "draft_plan": "# Initialize the sum of squares variable to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Add the square of the current number to the sum of squares variable\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
            "code": "function sum_of_squares(n)\n    local sum = 0\n\n    for i = 1, n do\n        if i % 2 == 0 then\n            sum = sum + (i * i)\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5091"
        },
        {
            "id": "257",
            "prompt": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.",
            "draft_plan": "# Define the function that takes in two numbers as input\n    # Create a tuple with the second number followed by the first number\n    # Return the tuple\n\n# Call the function with the desired numbers and store the returned tuple",
            "requirements": "",
            "final_plan": "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)",
            "code": "function swap_numbers(num1, num2)\n    return num2, num1\nend\n\nlocal result = swap_numbers(3, 5)\nprint(result)  -- Output: 5   3",
            "gen_tc": "",
            "sim_score": "0.5034"
        },
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.5013"
        },
        {
            "id": "458",
            "prompt": "Write a function to find the area of a rectangle.",
            "draft_plan": "To find the area of a rectangle, we need the length and width of the rectangle. The formula to calculate the area of a rectangle is:\n\nArea = length * width\n\nHere is the code logic to find the area of a rectangle:\n\n1. Define a function named `calculate_area` that takes two parameters, `length` and `width`.\n2. Inside the function, calculate the area by multiplying the `length` and `width` parameters.\n3. Return the calculated area from the function.\n\nHere is the code implementation in Python:\n\n```python\ndef calculate_area(length, width):\n    area = length * width\n    return area\n\n# Example usage:\nlength = 5\nwidth = 3\narea = calculate_area(length, width)\nprint(\"The area of the rectangle is:\", area)\n```\n\nThis will output:\n```\nThe area of the rectangle is: 15\n```\n\nYou can replace the values of `length` and `width` with your own values to find the area of a different rectangle.",
            "requirements": "",
            "final_plan": "def rectangle_area(l,b):\n  area=l*b\n  return area",
            "code": "function calculate_area(length, width)\n    local area = length * width\n    return area\nend\n\n-- Example usage:\nlocal length = 5\nlocal width = 3\nlocal area = calculate_area(length, width)\nprint(\"The area of the rectangle is:\", area)",
            "gen_tc": "",
            "sim_score": "0.4977"
        },
        {
            "id": "401",
            "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
            "draft_plan": "# Create an empty result tuple\n\n# Iterate through the nested tuples, getting each inner tuple\n    # Iterate through the inner tuples, getting each element and its index\n        # Check if the index is within the range of the result tuple\n            # If it is, add the element at the corresponding index to the current element\n            # Create a new tuple with the updated element and append it to the result tuple\n        # If the index is not within the range of the result tuple\n            # Create a new tuple with only the current element and append it to the result tuple\n\n# Return the result tuple",
            "requirements": "",
            "final_plan": "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
            "code": "function add_tuples(t1, t2)\n    local result = {}\n\n    for i, inner_tuple in ipairs(t1) do\n        local new_tuple = {}\n\n        for j, element in ipairs(inner_tuple) do\n            if j <= #result then\n                new_tuple[j] = element + result[j]\n            else\n                new_tuple[j] = element\n            end\n        end\n\n        table.insert(result, new_tuple)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4951"
        },
        {
            "id": "267",
            "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of squares\n# Initialize a counter variable to keep track of the odd numbers\n# Initialize a variable to store the current odd number\n\n# Iterate from 1 to n (inclusive)\n    # Check if the current number is odd\n        # If it is, square the number and add it to the sum of squares\n        # Increase the counter variable by 1\n        # Check if the counter variable is equal to n\n            # If it is, break the loop\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
            "code": "function sum_of_squares(n)\n    local sum = 0\n    local counter = 0\n    local odd_number = 1\n\n    for i = 1, n do\n        if odd_number % 2 == 1 then\n            sum = sum + odd_number^2\n            counter = counter + 1\n        end\n\n        if counter == n then\n            break\n        end\n\n        odd_number = odd_number + 1\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4843"
        }
    ],
    "HumanEval/54": [
        {
            "id": "396",
            "prompt": "Write a function to check whether the given string starts and ends with the same character or not.",
            "draft_plan": "# Check if the first character of the string is equal to the last character\n    # If they are equal, return True\n    # If they are not equal, return False",
            "requirements": "",
            "final_plan": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ",
            "code": "function starts_ends_same(str)\n    local first_char = string.sub(str, 1, 1)\n    local last_char = string.sub(str, -1)\n    \n    if first_char == last_char then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.6411"
        },
        {
            "id": "464",
            "prompt": "Write a function to check if all values are same in a dictionary.",
            "draft_plan": "# Get the first value from the dictionary\n# Iterate through all the values in the dictionary\n    # Check if the current value is equal to the first value\n        # If not equal, return False\n\n# If all values are equal, return True",
            "requirements": "",
            "final_plan": "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result",
            "code": "function checkAllSame(dict)\n    local firstValue = nil\n    \n    for _, value in pairs(dict) do\n        if firstValue == nil then\n            firstValue = value\n        elseif value ~= firstValue then\n            return false\n        end\n    end\n    \n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.6088"
        },
        {
            "id": "395",
            "prompt": "Write a python function to find the first non-repeated character in a given string.",
            "draft_plan": "# Create an empty dictionary to store the count of each character\n# Iterate through each character in the given string\n    # If the character is already in the dictionary, increase its count by 1\n    # If the character is not in the dictionary, add it with a count of 1\n\n# Iterate through each character in the given string again\n    # Check if the count of the current character in the dictionary is 1\n        # If it is, return the current character as the first non-repeated character\n\n# If no non-repeated character is found, return \"None\"",
            "requirements": "",
            "final_plan": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None",
            "code": "function firstNonRepeatedChar(str)\n    local charCount = {}\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if charCount[char] then\n            charCount[char] = charCount[char] + 1\n        else\n            charCount[char] = 1\n        end\n    end\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if charCount[char] == 1 then\n            return char\n        end\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.5734"
        },
        {
            "id": "165",
            "prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
            "draft_plan": "# Initialize a variable to keep track of the count of characters at the same position in the English alphabet\n# Iterate through each character in the input string\n    # Convert the character to lowercase\n    # Check if the character is an alphabet character\n        # Get the position of the character in the English alphabet by subtracting the ASCII value of 'a' or 'A'\n        # Check if the position is equal to the index of the character in the string\n            # If the condition is true, increment the count\n\n# Return the count of characters at the same position in the English alphabet",
            "requirements": "",
            "final_plan": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ",
            "code": "function countSamePositionChars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local c = string.lower(string.sub(str, i, i))\n        if c >= \"a\" and c <= \"z\" then\n            local position = string.byte(c) - string.byte(\"a\") + 1\n            if position == i then\n                count = count + 1\n            end\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5564"
        },
        {
            "id": "414",
            "prompt": "Write a python function to check whether any value in a sequence exists in a sequence or not.",
            "draft_plan": "# Iterate through each value in the first sequence\n    # Check if the value exists in the second sequence\n        # If the value exists, return True\n\n# If no matching value is found, return False",
            "requirements": "",
            "final_plan": "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False",
            "code": "function checkValueExistence(seq1, seq2)\n    for _, value1 in ipairs(seq1) do\n        for _, value2 in ipairs(seq2) do\n            if value1 == value2 then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5436"
        },
        {
            "id": "18",
            "prompt": "Write a function to remove characters from the first string which are present in the second string.",
            "draft_plan": "# Convert the second string into a set for efficient lookup\n\n# Initialize an empty string to store the result\n\n# Iterate through each character in the first string\n    # Check if the character is not present in the second string\n        # Append the character to the result string\n\n# Return the result string",
            "requirements": "",
            "final_plan": "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) ",
            "code": "function removeChars(str1, str2)\n    local charsSet = {}\n    local result = \"\"\n\n    for i = 1, string.len(str2) do\n        charsSet[string.sub(str2, i, i)] = true\n    end\n\n    for i = 1, string.len(str1) do\n        local char = string.sub(str1, i, i)\n        if not charsSet[char] then\n            result = result .. char\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5399"
        },
        {
            "id": "283",
            "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
            "draft_plan": "# Convert the input integer to a string\n# Initialize a dictionary to store the frequency of each digit\n\n# Iterate through each digit in the string\n    # Increment the frequency of the digit in the dictionary\n\n# Iterate through each digit in the string\n    # Check if the frequency of the digit is greater than the digit itself\n        # If yes, return False\n\n# If all frequencies are less than or equal to their respective digits, return True",
            "requirements": "",
            "final_plan": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
            "code": "function check_frequency(num)\n    local str_num = tostring(num)\n    local freq_dict = {}\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        freq_dict[digit] = (freq_dict[digit] or 0) + 1\n    end\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        if freq_dict[digit] > tonumber(digit) then\n            return false\n        end\n    end\n\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.5384"
        },
        {
            "id": "285",
            "prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
            "draft_plan": "# Iterate through each character in the input string\n    # Check if the current character is 'a'\n        # If it is, check the next two characters (if they exist) to see if they are 'b'\n            # If they are, return True\n    # If the current character is not 'a', continue to the next character\n\n# If no 'a' followed by two or three 'b' characters is found, return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function contains_a_followed_by_b(string)\n    local len = string.len(string)\n    for i = 1, len - 3 do\n        if string.sub(string, i, i) == 'a' then\n            if string.sub(string, i+1, i+3) == 'bb' or string.sub(string, i+1, i+3) == 'bbb' then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5184"
        },
        {
            "id": "431",
            "prompt": "Write a function that takes two lists and returns true if they have at least one common element.",
            "draft_plan": "# Iterate through each element in the first list\n    # Check if the current element is in the second list\n        # If found, return True\n\n# If no common element is found, return False",
            "requirements": "",
            "final_plan": "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result",
            "code": "function have_common_element(list1, list2)\n    for _, element1 in ipairs(list1) do\n        for _, element2 in ipairs(list2) do\n            if element1 == element2 then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5163"
        },
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.5132"
        }
    ],
    "HumanEval/55": [
        {
            "id": "59",
            "prompt": "Write a function to find the nth octagonal number.",
            "draft_plan": "# Function to find the nth octagonal number\ndef find_octagonal_number(n):\n    # Calculate the nth octagonal number using the formula\n    octagonal_number = 3 * n * (n - 1) + 1\n    \n    # Return the result\n    return octagonal_number\n\n# Test the function\nn = 5\nresult = find_octagonal_number(n)\nprint(f\"The {n}th octagonal number is: {result}\")",
            "requirements": "",
            "final_plan": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ",
            "code": "-- Function to find the nth octagonal number\nfunction find_octagonal_number(n)\n    -- Calculate the nth octagonal number using the formula\n    local octagonal_number = 3 * n * (n - 1) + 1\n    \n    -- Return the result\n    return octagonal_number\nend\n\n-- Test the function\nlocal n = 5\nlocal result = find_octagonal_number(n)\nprint(\"The \"..n..\"th octagonal number is: \"..result)",
            "gen_tc": "",
            "sim_score": "0.5376"
        },
        {
            "id": "267",
            "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of squares\n# Initialize a counter variable to keep track of the odd numbers\n# Initialize a variable to store the current odd number\n\n# Iterate from 1 to n (inclusive)\n    # Check if the current number is odd\n        # If it is, square the number and add it to the sum of squares\n        # Increase the counter variable by 1\n        # Check if the counter variable is equal to n\n            # If it is, break the loop\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
            "code": "function sum_of_squares(n)\n    local sum = 0\n    local counter = 0\n    local odd_number = 1\n\n    for i = 1, n do\n        if odd_number % 2 == 1 then\n            sum = sum + odd_number^2\n            counter = counter + 1\n        end\n\n        if counter == n then\n            break\n        end\n\n        odd_number = odd_number + 1\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5046"
        },
        {
            "id": "271",
            "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
            "draft_plan": "# Initialize a variable `sum` to 0\n# Initialize a counter variable `count` to 0\n\n# Iterate through numbers starting from 1 until `count` reaches `n`\n    # Check if the current number is even\n        # Increment the `count` variable\n        # Add the current number raised to the fifth power to the `sum` variable\n\n# Return the `sum` variable",
            "requirements": "",
            "final_plan": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ",
            "code": "function sum_of_even_powers(n)\n    local sum = 0\n    local count = 0\n\n    for i = 1, math.huge do\n        if i % 2 == 0 then\n            count = count + 1\n            sum = sum + math.pow(i, 5)\n        end\n\n        if count == n then\n            break\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5020"
        },
        {
            "id": "287",
            "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
            "draft_plan": "# Initialize the sum of squares variable to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Add the square of the current number to the sum of squares variable\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
            "code": "function sum_of_squares(n)\n    local sum = 0\n\n    for i = 1, n do\n        if i % 2 == 0 then\n            sum = sum + (i * i)\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4839"
        },
        {
            "id": "135",
            "prompt": "Write a function to find the nth hexagonal number.",
            "draft_plan": "# Calculate the nth hexagonal number using the formula: n * (2 * n - 1)\n\n# Return the calculated nth hexagonal number",
            "requirements": "",
            "final_plan": "def hexagonal_num(n): \n\treturn n*(2*n - 1) ",
            "code": "function nthHexagonalNumber(n)\n    return n * (2 * n - 1)\nend",
            "gen_tc": "",
            "sim_score": "0.4758"
        },
        {
            "id": "84",
            "prompt": "Write a function to find the nth number in the newman conway sequence.",
            "draft_plan": "# Create a list to store the Newman-Conway sequence\n# Initialize the first two elements of the sequence\n# Iterate from index 3 up to the given number n\n    # Calculate the next element of the sequence using the previous elements\n# Return the nth element of the sequence",
            "requirements": "",
            "final_plan": "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))",
            "code": "function newmanConway(n)\n    if n <= 0 then\n        return nil\n    elseif n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        local sequence = {1, 1}\n        for i = 3, n do\n            sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n        end\n        return sequence[n]\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4752"
        },
        {
            "id": "389",
            "prompt": "Write a function to find the n'th lucas number.",
            "draft_plan": "# Define a function to find the n-th Lucas number\ndef lucas_number(n):\n    # Base cases for n = 0 and n = 1\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Lucas numbers\n    lucas_0 = 2\n    lucas_1 = 1\n    \n    # Iterate from 2 to n\n    for i in range(2, n+1):\n        # Calculate the current Lucas number using the formula L(n) = L(n-1) + L(n-2)\n        lucas_n = lucas_0 + lucas_1\n        \n        # Update the values of previous Lucas numbers for the next iteration\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    \n    # Return the n-th Lucas number\n    return lucas_n",
            "requirements": "",
            "final_plan": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ",
            "code": "function lucas_number(n)\n    -- Base cases for n = 0 and n = 1\n    if n == 0 then\n        return 2\n    elseif n == 1 then\n        return 1\n    end\n    \n    -- Initialize the first two Lucas numbers\n    local lucas_0 = 2\n    local lucas_1 = 1\n    \n    -- Iterate from 2 to n\n    for i = 2, n do\n        -- Calculate the current Lucas number using the formula L(n) = L(n-1) + L(n-2)\n        local lucas_n = lucas_0 + lucas_1\n        \n        -- Update the values of previous Lucas numbers for the next iteration\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    end\n    \n    -- Return the n-th Lucas number\n    return lucas_n\nend",
            "gen_tc": "",
            "sim_score": "0.4711"
        },
        {
            "id": "392",
            "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
            "draft_plan": "# Create a dictionary to store the maximum sum for each number\n# Set the base cases for f(0) and f(1) as 0 and 1 respectively\n\n# Define a recursive function to calculate the maximum sum for a given number\n    # Check if the maximum sum for the current number has already been calculated\n        # If yes, return the stored value\n        # If no, calculate the maximum sum using the given equation\n\n# Call the recursive function to calculate the maximum sum for the given number",
            "requirements": "",
            "final_plan": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]",
            "code": "function max_sum(n)\n    local memo = {}  -- dictionary to store the maximum sum for each number\n\n    -- base cases\n    memo[0] = 0\n    memo[1] = 1\n\n    -- recursive function to calculate maximum sum\n    local function calculate_sum(num)\n        if memo[num] ~= nil then  -- check if maximum sum is already calculated\n            return memo[num]\n        end\n\n        -- calculate maximum sum using the given equation\n        memo[num] = math.max(calculate_sum(math.floor(num/2)) + calculate_sum(math.floor(num/3)) + calculate_sum(math.floor(num/4)) + calculate_sum(math.floor(num/5)), num)\n        return memo[num]\n    end\n\n    return calculate_sum(n)  -- call the recursive function to calculate maximum sum for given number\nend",
            "gen_tc": "",
            "sim_score": "0.4591"
        },
        {
            "id": "72",
            "prompt": "Write a python function to check whether the given number can be represented as the difference of two squares or not.",
            "draft_plan": "# Iterate through all numbers from 1 to sqrt(n)\n    # Calculate the square of the current number\n    # Check if the difference between n and the square is a perfect square\n\n# If a perfect square difference is found, return True\n# If no perfect square difference is found, return False",
            "requirements": "",
            "final_plan": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False",
            "code": "function can_be_difference_of_squares(n)\n    for i = 1, math.floor(math.sqrt(n)) do\n        local square = i * i\n        local difference = n - square\n        local square_root = math.sqrt(difference)\n        if square_root == math.floor(square_root) then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4504"
        },
        {
            "id": "300",
            "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
            "draft_plan": "# Define a recursive function count_sequences with parameters n (length of the binary sequence), \n# curr_sum (current sum of the bits), and total_sum (the target sum of both halves)\n\n    # Base case: if n is 0, check if the current sum is equal to the target sum\n        # If so, return 1 (valid sequence)\n        # Otherwise, return 0 (invalid sequence)\n    \n    # Recursive case:\n        # Initialize a variable count to 0 (to keep track of the count of valid sequences)\n        \n        # Call the count_sequences function recursively with n-1, curr_sum+1, and total_sum\n        # Add the return value to count\n        \n        # Call the count_sequences function recursively with n-1, curr_sum-1, and total_sum\n        # Add the return value to count\n        \n        # Return the total count\n    \n# Call the count_sequences function with n as the length of the binary sequence, curr_sum as 0, and total_sum as 0 to get the count of valid sequences",
            "requirements": "",
            "final_plan": "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res ",
            "code": "function count_sequences(n, curr_sum, total_sum)\n    -- Base case: if n is 0, check if the current sum is equal to the target sum\n    if n == 0 then\n        if curr_sum == total_sum then\n            return 1 -- valid sequence\n        else\n            return 0 -- invalid sequence\n        end\n    end\n\n    -- Recursive case\n    local count = 0\n\n    -- Call the count_sequences function recursively with n-1, curr_sum+1, and total_sum\n    count = count + count_sequences(n-1, curr_sum+1, total_sum)\n\n    -- Call the count_sequences function recursively with n-1, curr_sum-1, and total_sum\n    count = count + count_sequences(n-1, curr_sum-1, total_sum)\n\n    -- Return the total count\n    return count\nend\n\n-- Call the count_sequences function with n as the length of the binary sequence, curr_sum as 0, and total_sum as 0\nlocal n = 2\nlocal curr_sum = 0\nlocal total_sum = 0\nlocal result = count_sequences(n, curr_sum, total_sum)\nprint(result)",
            "gen_tc": "",
            "sim_score": "0.4501"
        }
    ],
    "HumanEval/56": [
        {
            "id": "285",
            "prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
            "draft_plan": "# Iterate through each character in the input string\n    # Check if the current character is 'a'\n        # If it is, check the next two characters (if they exist) to see if they are 'b'\n            # If they are, return True\n    # If the current character is not 'a', continue to the next character\n\n# If no 'a' followed by two or three 'b' characters is found, return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function contains_a_followed_by_b(string)\n    local len = string.len(string)\n    for i = 1, len - 3 do\n        if string.sub(string, i, i) == 'a' then\n            if string.sub(string, i+1, i+3) == 'bb' or string.sub(string, i+1, i+3) == 'bbb' then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4421"
        },
        {
            "id": "396",
            "prompt": "Write a function to check whether the given string starts and ends with the same character or not.",
            "draft_plan": "# Check if the first character of the string is equal to the last character\n    # If they are equal, return True\n    # If they are not equal, return False",
            "requirements": "",
            "final_plan": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ",
            "code": "function starts_ends_same(str)\n    local first_char = string.sub(str, 1, 1)\n    local last_char = string.sub(str, -1)\n    \n    if first_char == last_char then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4252"
        },
        {
            "id": "434",
            "prompt": "Write a function that matches a string that has an a followed by one or more b's.",
            "draft_plan": "import re\n\ndef match_string(string):\n    pattern = r'a+b+'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n",
            "code": "function match_string(str)\n    local pattern = \"a+b+\"\n    if string.match(str, pattern) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4026"
        },
        {
            "id": "16",
            "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
            "draft_plan": "# Split the input string by the underscore character to get a list of substrings\n# Iterate through each substring in the list\n    # Check if the substring consists of lowercase letters only\n        # If not, return False\n\n# If all substrings are valid, return True",
            "requirements": "",
            "final_plan": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function contains_lowercase_sequences(str)\n    local substrings = split(str, \"_\")\n\n    for _, substr in ipairs(substrings) do\n        if not is_lowercase(substr) then\n            return false\n        end\n    end\n\n    return true\nend\n\nfunction split(str, delimiter)\n    local result = {}\n    local from = 1\n    local delim_from, delim_to = string.find(str, delimiter, from)\n\n    while delim_from do\n        table.insert(result, string.sub(str, from, delim_from - 1))\n        from = delim_to + 1\n        delim_from, delim_to = string.find(str, delimiter, from)\n    end\n\n    table.insert(result, string.sub(str, from))\n\n    return result\nend\n\nfunction is_lowercase(str)\n    return str:match(\"^[a-z]*$\") ~= nil\nend",
            "gen_tc": "",
            "sim_score": "0.3970"
        },
        {
            "id": "461",
            "prompt": "Write a python function to count the upper case characters in a given string.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of uppercase characters\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter variable\n\n# Return the counter variable, which represents the number of uppercase characters in the string",
            "requirements": "",
            "final_plan": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
            "code": "function count_uppercase_chars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= 'A' and char <= 'Z' then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.3796"
        },
        {
            "id": "440",
            "prompt": "Write a function to find the first adverb and their positions in a given sentence.",
            "draft_plan": "# Split the sentence into a list of words\n\n# Iterate through each word and its index in the list\n    # Check if the word ends with \"ly\" (indicating it is an adverb)\n        # If it is an adverb, store its index and break the loop\n\n# If an adverb is found, return its index and the adverb itself\n# If no adverb is found, return None",
            "requirements": "",
            "final_plan": "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))",
            "code": "function findFirstAdverb(sentence)\n    local words = splitSentence(sentence)\n\n    for i = 1, #words do\n        if isAdverb(words[i]) then\n            return i, words[i]\n        end\n    end\n\n    return nil\nend\n\nfunction splitSentence(sentence)\n    local words = {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words, word)\n    end\n    return words\nend\n\nfunction isAdverb(word)\n    return word:sub(-2) == \"ly\"\nend",
            "gen_tc": "",
            "sim_score": "0.3710"
        },
        {
            "id": "74",
            "prompt": "Write a function to check whether it follows the sequence given in the patterns array.",
            "draft_plan": "# Initialize a pointer to keep track of the current position in the patterns array\n\n# Iterate through each character in the input string\n    # Check if the current character matches the character at the pointer position in the patterns array\n        # If it matches, move the pointer to the next position in the patterns array\n        # If the pointer reaches the end of the patterns array, return True as the sequence is followed\n\n# If the loop completes without returning True, return False as the sequence is not followed",
            "requirements": "",
            "final_plan": "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True",
            "code": "function followsSequence(input, patterns)\n    local pointer = 1\n    \n    for i = 1, string.len(input) do\n        local currentChar = string.sub(input, i, i)\n        \n        if currentChar == string.sub(patterns[pointer], 1, 1) then\n            pointer = pointer + 1\n            \n            if pointer > #patterns then\n                return true\n            end\n        end\n    end\n    \n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.3698"
        },
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.3661"
        },
        {
            "id": "70",
            "prompt": "Write a function to find whether all the given tuples have equal length or not.",
            "draft_plan": "# Get the length of the first tuple in the list\n\n# Iterate through each tuple in the list\n    # Check if the length of the current tuple is not equal to the length of the first tuple\n        # If lengths are not equal, return False\n\n# If all tuples have equal lengths, return True",
            "requirements": "",
            "final_plan": "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1",
            "code": "function check_tuple_lengths(tuples)\n    local first_length = #tuples[1]\n\n    for _, tuple in ipairs(tuples) do\n        if #tuple ~= first_length then\n            return false\n        end\n    end\n\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.3658"
        },
        {
            "id": "421",
            "prompt": "Write a function to concatenate each element of tuple by the delimiter.",
            "draft_plan": "# Initialize an empty string to store the concatenated elements\n\n# Iterate through each tuple in the input list\n    # Iterate through each element in the tuple\n        # Concatenate the element to the output string\n        # If the current element is not the last element in the tuple, append the delimiter\n\n# Return the concatenated string",
            "requirements": "",
            "final_plan": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ",
            "code": "function concatenate_tuple_elements(tuple_list, delimiter)\n    local concatenated_string = \"\"\n\n    for _, tuple in ipairs(tuple_list) do\n        for i, element in ipairs(tuple) do\n            concatenated_string = concatenated_string .. element\n            if i ~= #tuple then\n                concatenated_string = concatenated_string .. delimiter\n            end\n        end\n    end\n\n    return concatenated_string\nend",
            "gen_tc": "",
            "sim_score": "0.3643"
        }
    ],
    "HumanEval/57": [
        {
            "id": "68",
            "prompt": "Write a python function to check whether the given array is monotonic or not.",
            "draft_plan": "# Check if the length of the array is less than or equal to 2\n    # If true, return True as any array with 0 or 1 element is considered monotonic\n\n# Initialize two variables to track if the array is non-increasing and non-decreasing\n    # Set both variables to True initially\n\n# Iterate through each element in the array starting from index 1\n    # Check if the current element is greater than the previous element\n        # If true, set the non-increasing variable to False\n    # Check if the current element is less than the previous element\n        # If true, set the non-decreasing variable to False\n\n# Check if either the non-increasing or non-decreasing variable is True\n    # If true, return True as the array is monotonic\n    # Otherwise, return False as the array is not monotonic",
            "requirements": "",
            "final_plan": "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",
            "code": "function isMonotonic(arr)\n    if #arr <= 2 then\n        return true\n    end\n\n    local nonIncreasing = true\n    local nonDecreasing = true\n\n    for i = 2, #arr do\n        if arr[i] > arr[i-1] then\n            nonIncreasing = false\n        end\n\n        if arr[i] < arr[i-1] then\n            nonDecreasing = false\n        end\n    end\n\n    return nonIncreasing or nonDecreasing\nend",
            "gen_tc": "",
            "sim_score": "0.7731"
        },
        {
            "id": "443",
            "prompt": "Write a python function to find the largest negative number from the given list.",
            "draft_plan": "# Initialize a variable 'largest_negative' to None\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If 'largest_negative' is None or the current number is greater than 'largest_negative', update 'largest_negative' to the current number\n\n# Return 'largest_negative'",
            "requirements": "",
            "final_plan": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
            "code": "function find_largest_negative(numbers)\n    local largest_negative = nil\n\n    for _, number in ipairs(numbers) do\n        if number < 0 then\n            if largest_negative == nil or number > largest_negative then\n                largest_negative = number\n            end\n        end\n    end\n\n    return largest_negative\nend",
            "gen_tc": "",
            "sim_score": "0.5228"
        },
        {
            "id": "436",
            "prompt": "Write a python function to return the negative numbers in a list.",
            "draft_plan": "# Initialize an empty list to store the negative numbers\n\n# Iterate through each element in the input list\n    # Check if the current element is less than 0\n        # If the element is negative, append it to the list of negative numbers\n\n# Return the list of negative numbers",
            "requirements": "",
            "final_plan": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ",
            "code": "function getNegativeNumbers(numbers)\n    local negativeNumbers = {}\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            table.insert(negativeNumbers, num)\n        end\n    end\n\n    return negativeNumbers\nend",
            "gen_tc": "",
            "sim_score": "0.5080"
        },
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.4822"
        },
        {
            "id": "66",
            "prompt": "Write a python function to count the number of positive numbers in a list.",
            "draft_plan": "# Initialize a variable count to 0\n\n# Iterate through each number in the list\n    # Check if the number is greater than 0\n        # If it is, increment the count\n\n# Return the count",
            "requirements": "",
            "final_plan": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ",
            "code": "function count_positive_numbers(lst)\n    local count = 0\n\n    for _, num in ipairs(lst) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4759"
        },
        {
            "id": "472",
            "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.",
            "draft_plan": "# Sort the input list in ascending order\n\n# Iterate through each number in the sorted list, starting from the second number\n    # Check if the current number is consecutive to the previous number\n        # If not, return False\n\n# If all numbers are consecutive, return True",
            "requirements": "",
            "final_plan": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ",
            "code": "function checkConsecutive(lst)\n    table.sort(lst)\n    \n    for i = 2, #lst do\n        if lst[i] ~= lst[i-1] + 1 then\n            return false\n        end\n    end\n    \n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.4716"
        },
        {
            "id": "410",
            "prompt": "Write a function to find the minimum value in a given heterogeneous list.",
            "draft_plan": "# Initialize the minimum value to the first element in the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the minimum value\n        # If it is, update the minimum value\n\n# Return the minimum value",
            "requirements": "",
            "final_plan": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val",
            "code": "function find_minimum_value(lst)\n    local min_value = lst[1]\n    \n    for i = 2, #lst do\n        if lst[i] < min_value then\n            min_value = lst[i]\n        end\n    end\n    \n    return min_value\nend",
            "gen_tc": "",
            "sim_score": "0.4600"
        },
        {
            "id": "433",
            "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.",
            "draft_plan": "# Define a function that takes a number and an array as input\n    # Iterate through each element in the array\n        # Check if the number is greater than the current element\n            # If it is, return True\n    # If the number is not greater than any element in the array, return False",
            "requirements": "",
            "final_plan": "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]",
            "code": "function checkGreater(number, array)\n    for i, element in ipairs(array) do\n        if number > element then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4571"
        },
        {
            "id": "105",
            "prompt": "Write a python function to count true booleans in the given list.",
            "draft_plan": "# Initialize a count variable to 0\n\n# Iterate through each element in the list\n    # Check if the current element is True\n        # If it is, increment the count variable\n\n# Return the count variable",
            "requirements": "",
            "final_plan": "def count(lst):   \n    return sum(lst) ",
            "code": "function count_true_booleans(lst)\n    local count = 0\n    for _, value in ipairs(lst) do\n        if value == true then\n            count = count + 1\n        end\n    end\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4566"
        },
        {
            "id": "94",
            "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
            "draft_plan": "# Initialize the minimum second value as positive infinity\n# Initialize the first value of the tuple with minimum second value as None\n\n# Iterate through each tuple in the list\n    # Check if the second value of the current tuple is smaller than the current minimum second value\n        # If yes, update the minimum second value and the first value of the tuple\n\n# Return the first value of the tuple with the smallest second value",
            "requirements": "",
            "final_plan": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ",
            "code": "function get_first_smallest_value(test_list)\n    local min_second = math.huge\n    local first_value = nil\n    \n    for _, tup in ipairs(test_list) do\n        local second_value = tup[2]\n        \n        if second_value < min_second then\n            min_second = second_value\n            first_value = tup[1]\n        end\n    end\n    \n    return first_value\nend",
            "gen_tc": "",
            "sim_score": "0.4541"
        }
    ],
    "HumanEval/58": [
        {
            "id": "431",
            "prompt": "Write a function that takes two lists and returns true if they have at least one common element.",
            "draft_plan": "# Iterate through each element in the first list\n    # Check if the current element is in the second list\n        # If found, return True\n\n# If no common element is found, return False",
            "requirements": "",
            "final_plan": "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result",
            "code": "function have_common_element(list1, list2)\n    for _, element1 in ipairs(list1) do\n        for _, element2 in ipairs(list2) do\n            if element1 == element2 then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.7347"
        },
        {
            "id": "417",
            "prompt": "Write a function to find common first element in given list of tuple.",
            "draft_plan": "# Initialize a set to store the first elements of the tuples\n# Initialize a variable to store the common first element, initially None\n\n# Iterate through each tuple in the list\n    # Check if the first element of the tuple is already in the set\n        # If it is, set the common first element to the current element\n        # Break the loop as we have found the common first element\n    # If the first element is not in the set, add it to the set\n\n# Return the common first element",
            "requirements": "",
            "final_plan": "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] ",
            "code": "function findCommonFirstElement(list)\n    local firstElements = {}\n    local commonFirstElement = nil\n\n    for _, tup in ipairs(list) do\n        local first = tup[1]\n\n        if firstElements[first] then\n            commonFirstElement = first\n            break\n        else\n            firstElements[first] = true\n        end\n    end\n\n    return commonFirstElement\nend",
            "gen_tc": "",
            "sim_score": "0.6713"
        },
        {
            "id": "111",
            "prompt": "Write a function to find the common elements in given nested lists.",
            "draft_plan": "# Initialize a set to store the common elements\n\n# Iterate through each sublist in the nested list\n    # If it's the first sublist, add all elements to the set\n    # For subsequent sublists, update the set with the intersection of the current set and the sublist\n    \n# Return the set containing the common elements",
            "requirements": "",
            "final_plan": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result",
            "code": "function find_common_elements(nested_list)\n    local common_elements = {}\n\n    for i, sublist in ipairs(nested_list) do\n        if i == 1 then\n            for _, element in ipairs(sublist) do\n                common_elements[element] = true\n            end\n        else\n            local current_set = {}\n\n            for _, element in ipairs(sublist) do\n                current_set[element] = true\n            end\n\n            for element, _ in pairs(common_elements) do\n                if not current_set[element] then\n                    common_elements[element] = nil\n                end\n            end\n        end\n    end\n\n    return common_elements\nend",
            "gen_tc": "",
            "sim_score": "0.6567"
        },
        {
            "id": "161",
            "prompt": "Write a function to remove all elements from a given list present in another list.",
            "draft_plan": "# Initialize an empty list to store the elements not present in the other list\n\n# Iterate through each element in the given list\n    # Check if the element is not present in the other list\n        # If not present, add it to the new list\n\n# Return the new list",
            "requirements": "",
            "final_plan": "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result",
            "code": "function remove_elements(list1, list2)\n    local new_list = {}\n\n    for _, element in ipairs(list1) do\n        if not contains(list2, element) then\n            table.insert(new_list, element)\n        end\n    end\n\n    return new_list\nend\n\nfunction contains(list, element)\n    for _, value in ipairs(list) do\n        if value == element then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5728"
        },
        {
            "id": "281",
            "prompt": "Write a python function to check if the elements of a given list are unique or not.",
            "draft_plan": "# Convert the input list into a set\n# Compare the length of the input list with the length of the set\n    # If they are equal, return True (all elements are unique)\n    # If they are not equal, return False (there are duplicate elements)",
            "requirements": "",
            "final_plan": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True",
            "code": "function are_elements_unique(lst)\n    local unique_set = {}\n    for _, elem in ipairs(lst) do\n        if unique_set[elem] then\n            return false\n        else\n            unique_set[elem] = true\n        end\n    end\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.5644"
        },
        {
            "id": "126",
            "prompt": "Write a python function to find the sum of common divisors of two given numbers.",
            "draft_plan": "# Find the common divisors of the two given numbers\n    # Find the smaller number among the two\n    # Initialize an empty list to store the common divisors\n    # Iterate from 1 to the smaller number\n        # Check if the current number is a divisor of both given numbers\n            # If yes, add it to the list of common divisors\n\n# Find the sum of the common divisors\n    # Initialize a variable to store the sum\n    # Iterate through the list of common divisors\n        # Add each divisor to the sum\n\n# Return the sum of the common divisors",
            "requirements": "",
            "final_plan": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum",
            "code": "function sumCommonDivisors(a, b)\n    local smaller = math.min(a, b)\n    local divisors = {}\n\n    for i = 1, smaller do\n        if a % i == 0 and b % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n\n    local sum = 0\n    for _, divisor in ipairs(divisors) do\n        sum = sum + divisor\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5411"
        },
        {
            "id": "240",
            "prompt": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
            "draft_plan": "# Define a function that takes two lists as input\ndef replace_last_element(list1, list2):\n    # Replace the last element of list1 with the elements of list2\n    list1[-1:] = list2\n    # Return the modified list1\n    return list1",
            "requirements": "",
            "final_plan": "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n",
            "code": "function replaceLastElement(list1, list2)\n    -- Replace the last element of list1 with the elements of list2\n    for _, element in ipairs(list2) do\n        table.insert(list1, #list1, element)\n    end\n    -- Return the modified list1\n    return list1\nend",
            "gen_tc": "",
            "sim_score": "0.5319"
        },
        {
            "id": "473",
            "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
            "draft_plan": "# Initialize the intersection as the first tuple in the given tuple list\n\n# Iterate through each tuple in the given tuple list starting from the second tuple\n    # Initialize the current intersection as an empty list\n\n    # Iterate through each element in the current tuple\n        # Check if the element is present in the previous intersection\n            # If yes, append the element to the current intersection\n\n    # Update the intersection as the current intersection\n\n# Return the intersection",
            "requirements": "",
            "final_plan": "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)",
            "code": "function tupleIntersection(tuple_list)\n    local intersection = tuple_list[1]\n\n    for i = 2, #tuple_list do\n        local current_tuple = tuple_list[i]\n        local current_intersection = {}\n\n        for _, element in ipairs(current_tuple) do\n            if contains(intersection, element) then\n                table.insert(current_intersection, element)\n            end\n        end\n\n        intersection = current_intersection\n    end\n\n    return intersection\nend\n\nfunction contains(list, element)\n    for _, value in ipairs(list) do\n        if value == element then\n            return true\n        end\n    end\n\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5224"
        },
        {
            "id": "282",
            "prompt": "Write a function to subtract two lists element-wise.",
            "draft_plan": "# Create an empty list to store the result\n\n# Iterate through the indices of the lists\n    # Subtract the elements at the corresponding indices of the two lists\n    # Append the result to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)",
            "code": "function subtract_lists(list1, list2)\n    local result = {}\n\n    for i = 1, math.min(#list1, #list2) do\n        local subtraction = list1[i] - list2[i]\n        table.insert(result, subtraction)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5206"
        },
        {
            "id": "142",
            "prompt": "Write a function to count number items that are identical in the same position of three given lists.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of identical items\n# Iterate through each index from 0 to the length of any of the given lists\n    # Check if the elements at the current index in all three lists are identical\n        # If they are, increment the counter\n\n# Return the counter variable",
            "requirements": "",
            "final_plan": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result",
            "code": "function count_identical_items(list1, list2, list3)\n    local count = 0\n\n    for i = 1, math.min(#list1, #list2, #list3) do\n        if list1[i] == list2[i] and list2[i] == list3[i] then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5128"
        }
    ],
    "HumanEval/59": [
        {
            "id": "57",
            "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.",
            "draft_plan": "# Sort the list of digits in descending order\n\n# Concatenate all the digits in the sorted list\n\n# Convert the concatenated string to an integer and return it",
            "requirements": "",
            "final_plan": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ",
            "code": "function largest_number(digits)\n    table.sort(digits, function(a, b) return a > b end)\n    return tonumber(table.concat(digits))\nend",
            "gen_tc": "",
            "sim_score": "0.5511"
        },
        {
            "id": "388",
            "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.",
            "draft_plan": "# Initialize the highest power of 2 to 1\n\n# While the highest power of 2 is less than or equal to n\n    # Multiply the highest power of 2 by 2\n\n# Divide the highest power of 2 by 2 to get the result",
            "requirements": "",
            "final_plan": "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res ",
            "code": "function highest_power_of_2(n)\n    local power = 1\n\n    while power * 2 <= n do\n        power = power * 2\n    end\n\n    return power\nend",
            "gen_tc": "",
            "sim_score": "0.5448"
        },
        {
            "id": "232",
            "prompt": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.",
            "draft_plan": "# Sort the list in descending order\n# Return the first n items from the sorted list",
            "requirements": "",
            "final_plan": "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest",
            "code": "function get_n_largest_items(lst, n)\n    table.sort(lst, function(a, b) return a > b end)\n    return {table.unpack(lst, 1, n)}\nend",
            "gen_tc": "",
            "sim_score": "0.5281"
        },
        {
            "id": "308",
            "prompt": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.",
            "draft_plan": "# Create an empty list to store the products\n\n# Iterate through each element in the first list\n    # Iterate through each element in the second list\n        # Calculate the product of the current elements from both lists\n        # Append the product to the list of products\n\n# Sort the list of products in descending order\n\n# Return the specified number of largest products from the list",
            "requirements": "",
            "final_plan": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result",
            "code": "function find_largest_products(list1, list2, num_products)\n    local products = {}\n\n    for i = 1, #list1 do\n        for j = 1, #list2 do\n            local product = list1[i] * list2[j]\n            table.insert(products, product)\n        end\n    end\n\n    table.sort(products, function(a, b) return a > b end)\n\n    local largest_products = {}\n    for i = 1, num_products do\n        if i <= #products then\n            table.insert(largest_products, products[i])\n        else\n            break\n        end\n    end\n\n    return largest_products\nend",
            "gen_tc": "",
            "sim_score": "0.5090"
        },
        {
            "id": "415",
            "prompt": "Write a python function to find a pair with highest product from a given array of integers.",
            "draft_plan": "# Initialize the maximum product to -infinity\n\n# Iterate through each pair of numbers in the array\n    # Calculate the product of the current pair\n    # Update the maximum product if the current product is greater\n\n# Return the pair with the highest product",
            "requirements": "",
            "final_plan": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ",
            "code": "function find_highest_product(arr)\n    local max_product = -math.huge\n    local pair = {}\n\n    for i = 1, #arr-1 do\n        for j = i+1, #arr do\n            local product = arr[i] * arr[j]\n            if product > max_product then\n                max_product = product\n                pair = {arr[i], arr[j]}\n            end\n        end\n    end\n\n    return pair\nend",
            "gen_tc": "",
            "sim_score": "0.5089"
        },
        {
            "id": "309",
            "prompt": "Write a python function to find the maximum of two numbers.",
            "draft_plan": "# Define a function that takes two numbers as input\n\n# Check if the first number is greater than the second number\n    # If it is, return the first number as the maximum\n    # Otherwise, return the second number as the maximum",
            "requirements": "",
            "final_plan": "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b ",
            "code": "function find_maximum(num1, num2)\n    if num1 > num2 then\n        return num1\n    else\n        return num2\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5089"
        },
        {
            "id": "443",
            "prompt": "Write a python function to find the largest negative number from the given list.",
            "draft_plan": "# Initialize a variable 'largest_negative' to None\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If 'largest_negative' is None or the current number is greater than 'largest_negative', update 'largest_negative' to the current number\n\n# Return 'largest_negative'",
            "requirements": "",
            "final_plan": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
            "code": "function find_largest_negative(numbers)\n    local largest_negative = nil\n\n    for _, number in ipairs(numbers) do\n        if number < 0 then\n            if largest_negative == nil or number > largest_negative then\n                largest_negative = number\n            end\n        end\n    end\n\n    return largest_negative\nend",
            "gen_tc": "",
            "sim_score": "0.4965"
        },
        {
            "id": "256",
            "prompt": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
            "draft_plan": "# Define a function to check if a number is prime\n    # Check if the number is less than 2, return False\n    # Iterate from 2 to the square root of the number\n        # Check if the number is divisible by any number in the range\n            # If divisible, return False\n    # If the number is not divisible by any number in the range, return True\n\n# Define a function to count the number of primes less than a given number\n    # Initialize a count variable to 0\n    # Iterate from 2 to the given number\n        # Check if the current number is prime\n            # If prime, increment the count\n    # Return the count",
            "requirements": "",
            "final_plan": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr",
            "code": "function isPrime(n)\n    if n < 2 then\n        return false\n    end\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            return false\n        end\n    end\n    return true\nend\n\nfunction countPrimes(n)\n    local count = 0\n    for i = 2, n - 1 do\n        if isPrime(i) then\n            count = count + 1\n        end\n    end\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4806"
        },
        {
            "id": "244",
            "prompt": "Write a python function to find the next perfect square greater than a given number.",
            "draft_plan": "# Calculate the square root of the given number using math.sqrt() function\n\n# Increment the square root by 1\n\n# Calculate the next perfect square by squaring the incremented square root\n\n# Return the next perfect square",
            "requirements": "",
            "final_plan": "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN ",
            "code": "function nextPerfectSquare(n)\n    local sqrt = math.sqrt(n)\n    local nextRoot = math.floor(sqrt) + 1\n    local nextSquare = nextRoot * nextRoot\n    return nextSquare\nend",
            "gen_tc": "",
            "sim_score": "0.4723"
        },
        {
            "id": "418",
            "prompt": "Write a python function to find the element of a list having maximum length.",
            "draft_plan": "# Initialize a variable to store the index of the element with maximum length\n# Initialize a variable to store the maximum length, initially set to 0\n\n# Iterate through each element in the list\n    # Check if the length of the current element is greater than the maximum length\n        # If so, update the maximum length and the index of the element\n\n# Return the element at the index with maximum length",
            "requirements": "",
            "final_plan": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList",
            "code": "function findMaxElementLength(lst)\n    local maxIndex = 1\n    local maxLength = 0\n\n    for i, element in ipairs(lst) do\n        local length = string.len(element)\n        if length > maxLength then\n            maxLength = length\n            maxIndex = i\n        end\n    end\n\n    return lst[maxIndex]\nend",
            "gen_tc": "",
            "sim_score": "0.4655"
        }
    ],
    "HumanEval/60": [
        {
            "id": "65",
            "prompt": "Write a function to flatten a list and sum all of its elements.",
            "draft_plan": "# Initialize a variable to store the sum of all elements\n\n# Iterate through each element in the list\n    # Check if the current element is a list\n        # If it is a list, recursively call the flatten_and_sum function on the current element and add the result to the sum\n    # If it is not a list, add the current element to the sum\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total",
            "code": "function flatten_and_sum(lst)\n    local sum = 0\n\n    for _, element in ipairs(lst) do\n        if type(element) == \"table\" then\n            sum = sum + flatten_and_sum(element)\n        else\n            sum = sum + element\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6623"
        },
        {
            "id": "287",
            "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
            "draft_plan": "# Initialize the sum of squares variable to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Add the square of the current number to the sum of squares variable\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
            "code": "function sum_of_squares(n)\n    local sum = 0\n\n    for i = 1, n do\n        if i % 2 == 0 then\n            sum = sum + (i * i)\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6363"
        },
        {
            "id": "267",
            "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of squares\n# Initialize a counter variable to keep track of the odd numbers\n# Initialize a variable to store the current odd number\n\n# Iterate from 1 to n (inclusive)\n    # Check if the current number is odd\n        # If it is, square the number and add it to the sum of squares\n        # Increase the counter variable by 1\n        # Check if the counter variable is equal to n\n            # If it is, break the loop\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
            "code": "function sum_of_squares(n)\n    local sum = 0\n    local counter = 0\n    local odd_number = 1\n\n    for i = 1, n do\n        if odd_number % 2 == 1 then\n            sum = sum + odd_number^2\n            counter = counter + 1\n        end\n\n        if counter == n then\n            break\n        end\n\n        odd_number = odd_number + 1\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6346"
        },
        {
            "id": "271",
            "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
            "draft_plan": "# Initialize a variable `sum` to 0\n# Initialize a counter variable `count` to 0\n\n# Iterate through numbers starting from 1 until `count` reaches `n`\n    # Check if the current number is even\n        # Increment the `count` variable\n        # Add the current number raised to the fifth power to the `sum` variable\n\n# Return the `sum` variable",
            "requirements": "",
            "final_plan": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ",
            "code": "function sum_of_even_powers(n)\n    local sum = 0\n    local count = 0\n\n    for i = 1, math.huge do\n        if i % 2 == 0 then\n            count = count + 1\n            sum = sum + math.pow(i, 5)\n        end\n\n        if count == n then\n            break\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6206"
        },
        {
            "id": "420",
            "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of the cube of even numbers\n# Iterate through each even number from 2 to (2*n) with a step size of 2\n    # Calculate the cube of the current even number\n    # Add the cube to the sum\n\n# Return the sum of the cube of even numbers",
            "requirements": "",
            "final_plan": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
            "code": "function cube_sum_of_even(n)\n    local sum = 0\n    \n    for i = 2, 2 * n, 2 do\n        local cube = i * i * i\n        sum = sum + cube\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6074"
        },
        {
            "id": "162",
            "prompt": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
            "draft_plan": "# Initialize the sum to 0\n\n# Iterate from i = 0 to n // 2 (inclusive)\n    # Calculate the term (n - 2*i)\n    # Add the term to the sum\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)",
            "code": "function calculate_sum(n)\n    local sum = 0\n\n    for i = 0, n // 2 do\n        local term = n - 2 * i\n        sum = sum + term\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5950"
        },
        {
            "id": "422",
            "prompt": "Write a python function to find the average of cubes of first n natural numbers.",
            "draft_plan": "# Define a function to find the average of cubes of first n natural numbers\ndef average_of_cubes(n):\n    # Initialize sum of cubes to 0\n    sum_of_cubes = 0\n    \n    # Iterate through the range of 1 to n+1\n    for i in range(1, n+1):\n        # Calculate the cube of the current number and add it to the sum_of_cubes\n        sum_of_cubes += i**3\n    \n    # Calculate the average by dividing the sum_of_cubes by n\n    average = sum_of_cubes / n\n    \n    # Return the average\n    return average",
            "requirements": "",
            "final_plan": "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) ",
            "code": "function average_of_cubes(n)\n    local sum_of_cubes = 0\n    \n    for i = 1, n do\n        sum_of_cubes = sum_of_cubes + i^3\n    end\n    \n    local average = sum_of_cubes / n\n    \n    return average\nend",
            "gen_tc": "",
            "sim_score": "0.5904"
        },
        {
            "id": "419",
            "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
            "draft_plan": "# Initialize a variable to store the total sum\n# Iterate through each number in the list\n    # Round the number to the nearest integer\n    # Add the rounded number to the total sum\n\n# Calculate the total sum multiplied by the length of the list\n# Print the result",
            "requirements": "",
            "final_plan": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum",
            "code": "function round_and_multiply(numbers)\n    local total_sum = 0\n\n    for _, num in ipairs(numbers) do\n        total_sum = total_sum + math.round(num)\n    end\n\n    local result = total_sum * #numbers\n    print(result)\nend\n\nfunction math.round(num)\n    return math.floor(num + 0.5)\nend",
            "gen_tc": "",
            "sim_score": "0.5852"
        },
        {
            "id": "392",
            "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
            "draft_plan": "# Create a dictionary to store the maximum sum for each number\n# Set the base cases for f(0) and f(1) as 0 and 1 respectively\n\n# Define a recursive function to calculate the maximum sum for a given number\n    # Check if the maximum sum for the current number has already been calculated\n        # If yes, return the stored value\n        # If no, calculate the maximum sum using the given equation\n\n# Call the recursive function to calculate the maximum sum for the given number",
            "requirements": "",
            "final_plan": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]",
            "code": "function max_sum(n)\n    local memo = {}  -- dictionary to store the maximum sum for each number\n\n    -- base cases\n    memo[0] = 0\n    memo[1] = 1\n\n    -- recursive function to calculate maximum sum\n    local function calculate_sum(num)\n        if memo[num] ~= nil then  -- check if maximum sum is already calculated\n            return memo[num]\n        end\n\n        -- calculate maximum sum using the given equation\n        memo[num] = math.max(calculate_sum(math.floor(num/2)) + calculate_sum(math.floor(num/3)) + calculate_sum(math.floor(num/4)) + calculate_sum(math.floor(num/5)), num)\n        return memo[num]\n    end\n\n    return calculate_sum(n)  -- call the recursive function to calculate maximum sum for given number\nend",
            "gen_tc": "",
            "sim_score": "0.5583"
        },
        {
            "id": "398",
            "prompt": "Write a function to compute the sum of digits of each number of a given list.",
            "draft_plan": "# Initialize an empty list to store the sum of digits for each number\n\n# Iterate through each number in the given list\n    # Convert the number to a string\n    # Initialize a variable to store the sum of digits\n    # Iterate through each digit in the string representation of the number\n        # Convert the digit back to an integer and add it to the sum of digits\n    # Append the sum of digits to the list\n\n# Return the list of sum of digits for each number",
            "requirements": "",
            "final_plan": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
            "code": "function compute_sum_of_digits(numbers)\n    local sum_of_digits = {}\n\n    for _, num in ipairs(numbers) do\n        local num_str = tostring(num)\n        local digits_sum = 0\n\n        for i = 1, string.len(num_str) do\n            digits_sum = digits_sum + tonumber(string.sub(num_str, i, i))\n        end\n\n        table.insert(sum_of_digits, digits_sum)\n    end\n\n    return sum_of_digits\nend",
            "gen_tc": "",
            "sim_score": "0.5558"
        }
    ],
    "HumanEval/61": [
        {
            "id": "285",
            "prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
            "draft_plan": "# Iterate through each character in the input string\n    # Check if the current character is 'a'\n        # If it is, check the next two characters (if they exist) to see if they are 'b'\n            # If they are, return True\n    # If the current character is not 'a', continue to the next character\n\n# If no 'a' followed by two or three 'b' characters is found, return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function contains_a_followed_by_b(string)\n    local len = string.len(string)\n    for i = 1, len - 3 do\n        if string.sub(string, i, i) == 'a' then\n            if string.sub(string, i+1, i+3) == 'bb' or string.sub(string, i+1, i+3) == 'bbb' then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4391"
        },
        {
            "id": "396",
            "prompt": "Write a function to check whether the given string starts and ends with the same character or not.",
            "draft_plan": "# Check if the first character of the string is equal to the last character\n    # If they are equal, return True\n    # If they are not equal, return False",
            "requirements": "",
            "final_plan": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ",
            "code": "function starts_ends_same(str)\n    local first_char = string.sub(str, 1, 1)\n    local last_char = string.sub(str, -1)\n    \n    if first_char == last_char then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4367"
        },
        {
            "id": "434",
            "prompt": "Write a function that matches a string that has an a followed by one or more b's.",
            "draft_plan": "import re\n\ndef match_string(string):\n    pattern = r'a+b+'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n",
            "code": "function match_string(str)\n    local pattern = \"a+b+\"\n    if string.match(str, pattern) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4093"
        },
        {
            "id": "461",
            "prompt": "Write a python function to count the upper case characters in a given string.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of uppercase characters\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter variable\n\n# Return the counter variable, which represents the number of uppercase characters in the string",
            "requirements": "",
            "final_plan": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
            "code": "function count_uppercase_chars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= 'A' and char <= 'Z' then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4075"
        },
        {
            "id": "11",
            "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
            "draft_plan": "# Find the index of the first occurrence of the given character in the string\n# Find the index of the last occurrence of the given character in the string\n\n# If both indices are valid\n    # Remove the first occurrence of the character from the string\n    # Decrement the index of the last occurrence by 1 to account for the removal\n    # Remove the last occurrence of the character from the string\n\n# Return the modified string",
            "requirements": "",
            "final_plan": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ",
            "code": "function removeFirstAndLastOccurrence(str, char)\n    local firstIndex = string.find(str, char)\n    local lastIndex = string.find(str:reverse(), char)\n\n    if firstIndex and lastIndex then\n        str = string.sub(str, 1, firstIndex - 1) .. string.sub(str, firstIndex + 1)\n        lastIndex = string.len(str) - lastIndex + 1\n        str = string.sub(str, 1, lastIndex - 1) .. string.sub(str, lastIndex + 1)\n    end\n\n    return str\nend",
            "gen_tc": "",
            "sim_score": "0.4005"
        },
        {
            "id": "421",
            "prompt": "Write a function to concatenate each element of tuple by the delimiter.",
            "draft_plan": "# Initialize an empty string to store the concatenated elements\n\n# Iterate through each tuple in the input list\n    # Iterate through each element in the tuple\n        # Concatenate the element to the output string\n        # If the current element is not the last element in the tuple, append the delimiter\n\n# Return the concatenated string",
            "requirements": "",
            "final_plan": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ",
            "code": "function concatenate_tuple_elements(tuple_list, delimiter)\n    local concatenated_string = \"\"\n\n    for _, tuple in ipairs(tuple_list) do\n        for i, element in ipairs(tuple) do\n            concatenated_string = concatenated_string .. element\n            if i ~= #tuple then\n                concatenated_string = concatenated_string .. delimiter\n            end\n        end\n    end\n\n    return concatenated_string\nend",
            "gen_tc": "",
            "sim_score": "0.3898"
        },
        {
            "id": "131",
            "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
            "draft_plan": "# Create a list of vowels (including both lowercase and uppercase)\n# Convert the input string into a list of characters\n\n# Initialize two pointers: one at the start of the string and one at the end\n# Iterate while the pointers don't overlap\n    # Check if the character at the start pointer is a vowel\n        # If it is, then check if the character at the end pointer is also a vowel\n            # If it is, swap the characters at the start and end pointers\n            # Move the start pointer to the next character\n            # Move the end pointer to the previous character\n        # If the character at the end pointer is not a vowel, move the end pointer to the previous character\n    \n# Convert the modified list of characters back into a string and return it",
            "requirements": "",
            "final_plan": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string",
            "code": "function reverse_vowels(str)\n    local vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }\n    local chars = {}\n    for i = 1, string.len(str) do\n        table.insert(chars, string.sub(str, i, i))\n    end\n    \n    local start = 1\n    local finish = string.len(str)\n    \n    while start < finish do\n        if is_vowel(chars[start], vowels) then\n            while not is_vowel(chars[finish], vowels) and finish > start do\n                finish = finish - 1\n            end\n            if finish > start then\n                chars[start], chars[finish] = chars[finish], chars[start]\n                start = start + 1\n                finish = finish - 1\n            end\n        else\n            start = start + 1\n        end\n    end\n    \n    return table.concat(chars)\nend\n\nfunction is_vowel(char, vowels)\n    for _, vowel in ipairs(vowels) do\n        if char == vowel then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.3878"
        },
        {
            "id": "440",
            "prompt": "Write a function to find the first adverb and their positions in a given sentence.",
            "draft_plan": "# Split the sentence into a list of words\n\n# Iterate through each word and its index in the list\n    # Check if the word ends with \"ly\" (indicating it is an adverb)\n        # If it is an adverb, store its index and break the loop\n\n# If an adverb is found, return its index and the adverb itself\n# If no adverb is found, return None",
            "requirements": "",
            "final_plan": "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))",
            "code": "function findFirstAdverb(sentence)\n    local words = splitSentence(sentence)\n\n    for i = 1, #words do\n        if isAdverb(words[i]) then\n            return i, words[i]\n        end\n    end\n\n    return nil\nend\n\nfunction splitSentence(sentence)\n    local words = {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words, word)\n    end\n    return words\nend\n\nfunction isAdverb(word)\n    return word:sub(-2) == \"ly\"\nend",
            "gen_tc": "",
            "sim_score": "0.3795"
        },
        {
            "id": "451",
            "prompt": "Write a function to remove all whitespaces from the given string.",
            "draft_plan": "# Initialize an empty string to store the modified string\n\n# Iterate through each character in the input string\n    # Check if the current character is a whitespace\n        # If it is not a whitespace, append it to the modified string\n\n# Return the modified string without whitespaces",
            "requirements": "",
            "final_plan": "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))",
            "code": "function remove_whitespaces(str)\n    local modified_str = \"\"\n\n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        if c ~= \" \" then\n            modified_str = modified_str .. c\n        end\n    end\n\n    return modified_str\nend",
            "gen_tc": "",
            "sim_score": "0.3791"
        },
        {
            "id": "16",
            "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
            "draft_plan": "# Split the input string by the underscore character to get a list of substrings\n# Iterate through each substring in the list\n    # Check if the substring consists of lowercase letters only\n        # If not, return False\n\n# If all substrings are valid, return True",
            "requirements": "",
            "final_plan": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function contains_lowercase_sequences(str)\n    local substrings = split(str, \"_\")\n\n    for _, substr in ipairs(substrings) do\n        if not is_lowercase(substr) then\n            return false\n        end\n    end\n\n    return true\nend\n\nfunction split(str, delimiter)\n    local result = {}\n    local from = 1\n    local delim_from, delim_to = string.find(str, delimiter, from)\n\n    while delim_from do\n        table.insert(result, string.sub(str, from, delim_from - 1))\n        from = delim_to + 1\n        delim_from, delim_to = string.find(str, delimiter, from)\n    end\n\n    table.insert(result, string.sub(str, from))\n\n    return result\nend\n\nfunction is_lowercase(str)\n    return str:match(\"^[a-z]*$\") ~= nil\nend",
            "gen_tc": "",
            "sim_score": "0.3783"
        }
    ],
    "HumanEval/62": [
        {
            "id": "413",
            "prompt": "Write a function to extract the nth element from a given list of tuples.",
            "draft_plan": "# Initialize an empty list to store the nth element from each tuple\n\n# Iterate through each tuple in the given list\n    # Check if the tuple has at least n elements\n        # If yes, append the nth element to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result",
            "code": "function extract_nth_element(lst, n)\n    local result = {}\n\n    for i, tup in ipairs(lst) do\n        if #tup >= n then\n            table.insert(result, tup[n])\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4238"
        },
        {
            "id": "273",
            "prompt": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
            "draft_plan": "# Define a function that takes in two tuples as arguments\n    # Create an empty list to store the result of the subtraction\n\n    # Iterate through the indices of the tuples\n        # Subtract the element at the current index of the first tuple from the element at the current index of the second tuple\n        # Append the result to the list\n\n    # Return the resulting list",
            "requirements": "",
            "final_plan": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) ",
            "code": "function subtract_tuples(tuple1, tuple2)\n    local result = {}\n\n    for i = 1, #tuple1 do\n        local subtracted_value = tuple1[i] - tuple2[i]\n        table.insert(result, subtracted_value)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4142"
        },
        {
            "id": "271",
            "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
            "draft_plan": "# Initialize a variable `sum` to 0\n# Initialize a counter variable `count` to 0\n\n# Iterate through numbers starting from 1 until `count` reaches `n`\n    # Check if the current number is even\n        # Increment the `count` variable\n        # Add the current number raised to the fifth power to the `sum` variable\n\n# Return the `sum` variable",
            "requirements": "",
            "final_plan": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ",
            "code": "function sum_of_even_powers(n)\n    local sum = 0\n    local count = 0\n\n    for i = 1, math.huge do\n        if i % 2 == 0 then\n            count = count + 1\n            sum = sum + math.pow(i, 5)\n        end\n\n        if count == n then\n            break\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.3978"
        },
        {
            "id": "261",
            "prompt": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
            "draft_plan": "# Create an empty list to store the result of the division operation\n\n# Iterate through the elements of the tuples\n    # Perform the division operation on the corresponding elements of the tuples\n    # Append the result to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
            "code": "function tuple_division(t1, t2)\n    local result = {}\n\n    for i = 1, #t1 do\n        local div = t1[i] / t2[i]\n        table.insert(result, div)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.3918"
        },
        {
            "id": "65",
            "prompt": "Write a function to flatten a list and sum all of its elements.",
            "draft_plan": "# Initialize a variable to store the sum of all elements\n\n# Iterate through each element in the list\n    # Check if the current element is a list\n        # If it is a list, recursively call the flatten_and_sum function on the current element and add the result to the sum\n    # If it is not a list, add the current element to the sum\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total",
            "code": "function flatten_and_sum(lst)\n    local sum = 0\n\n    for _, element in ipairs(lst) do\n        if type(element) == \"table\" then\n            sum = sum + flatten_and_sum(element)\n        else\n            sum = sum + element\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.3917"
        },
        {
            "id": "237",
            "prompt": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.",
            "draft_plan": "# Initialize an empty dictionary\n\n# Iterate through each tuple in the list\n    # Check if the current tuple is already a key in the dictionary\n        # If it is, increment the count by 1\n        # If it is not, add the tuple as a key with a count of 1\n\n# Return the dictionary",
            "requirements": "",
            "final_plan": "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) ",
            "code": "function count_tuples(list_of_tuples)\n    local tuple_count = {}\n\n    for _, tup in ipairs(list_of_tuples) do\n        if tuple_count[tup] then\n            tuple_count[tup] = tuple_count[tup] + 1\n        else\n            tuple_count[tup] = 1\n        end\n    end\n\n    return tuple_count\nend",
            "gen_tc": "",
            "sim_score": "0.3912"
        },
        {
            "id": "392",
            "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
            "draft_plan": "# Create a dictionary to store the maximum sum for each number\n# Set the base cases for f(0) and f(1) as 0 and 1 respectively\n\n# Define a recursive function to calculate the maximum sum for a given number\n    # Check if the maximum sum for the current number has already been calculated\n        # If yes, return the stored value\n        # If no, calculate the maximum sum using the given equation\n\n# Call the recursive function to calculate the maximum sum for the given number",
            "requirements": "",
            "final_plan": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]",
            "code": "function max_sum(n)\n    local memo = {}  -- dictionary to store the maximum sum for each number\n\n    -- base cases\n    memo[0] = 0\n    memo[1] = 1\n\n    -- recursive function to calculate maximum sum\n    local function calculate_sum(num)\n        if memo[num] ~= nil then  -- check if maximum sum is already calculated\n            return memo[num]\n        end\n\n        -- calculate maximum sum using the given equation\n        memo[num] = math.max(calculate_sum(math.floor(num/2)) + calculate_sum(math.floor(num/3)) + calculate_sum(math.floor(num/4)) + calculate_sum(math.floor(num/5)), num)\n        return memo[num]\n    end\n\n    return calculate_sum(n)  -- call the recursive function to calculate maximum sum for given number\nend",
            "gen_tc": "",
            "sim_score": "0.3852"
        },
        {
            "id": "88",
            "prompt": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.",
            "draft_plan": "# Initialize an empty dictionary\n\n# Iterate through each element in the list\n    # Check if the element is already a key in the dictionary\n        # If it is, increment its value by 1\n        # If it is not, add it as a new key with value 1\n\n# Return the dictionary containing the frequency of elements",
            "requirements": "",
            "final_plan": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count",
            "code": "function get_frequency(lst)\n    local frequency = {}\n\n    for _, element in ipairs(lst) do\n        if frequency[element] then\n            frequency[element] = frequency[element] + 1\n        else\n            frequency[element] = 1\n        end\n    end\n\n    return frequency\nend",
            "gen_tc": "",
            "sim_score": "0.3722"
        },
        {
            "id": "447",
            "prompt": "Write a function to find cubes of individual elements in a list.",
            "draft_plan": "# Create an empty list to store the cubes of individual elements\n# Iterate through each element in the input list\n    # Calculate the cube of the current element by raising it to the power of 3\n    # Append the cube to the result list\n\n# Return the result list containing the cubes of individual elements",
            "requirements": "",
            "final_plan": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums",
            "code": "function find_cubes(list)\n    local result = {}\n    for _, element in ipairs(list) do\n        local cube = element^3\n        table.insert(result, cube)\n    end\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.3717"
        },
        {
            "id": "389",
            "prompt": "Write a function to find the n'th lucas number.",
            "draft_plan": "# Define a function to find the n-th Lucas number\ndef lucas_number(n):\n    # Base cases for n = 0 and n = 1\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Lucas numbers\n    lucas_0 = 2\n    lucas_1 = 1\n    \n    # Iterate from 2 to n\n    for i in range(2, n+1):\n        # Calculate the current Lucas number using the formula L(n) = L(n-1) + L(n-2)\n        lucas_n = lucas_0 + lucas_1\n        \n        # Update the values of previous Lucas numbers for the next iteration\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    \n    # Return the n-th Lucas number\n    return lucas_n",
            "requirements": "",
            "final_plan": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ",
            "code": "function lucas_number(n)\n    -- Base cases for n = 0 and n = 1\n    if n == 0 then\n        return 2\n    elseif n == 1 then\n        return 1\n    end\n    \n    -- Initialize the first two Lucas numbers\n    local lucas_0 = 2\n    local lucas_1 = 1\n    \n    -- Iterate from 2 to n\n    for i = 2, n do\n        -- Calculate the current Lucas number using the formula L(n) = L(n-1) + L(n-2)\n        local lucas_n = lucas_0 + lucas_1\n        \n        -- Update the values of previous Lucas numbers for the next iteration\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    end\n    \n    -- Return the n-th Lucas number\n    return lucas_n\nend",
            "gen_tc": "",
            "sim_score": "0.3712"
        }
    ],
    "HumanEval/63": [
        {
            "id": "59",
            "prompt": "Write a function to find the nth octagonal number.",
            "draft_plan": "# Function to find the nth octagonal number\ndef find_octagonal_number(n):\n    # Calculate the nth octagonal number using the formula\n    octagonal_number = 3 * n * (n - 1) + 1\n    \n    # Return the result\n    return octagonal_number\n\n# Test the function\nn = 5\nresult = find_octagonal_number(n)\nprint(f\"The {n}th octagonal number is: {result}\")",
            "requirements": "",
            "final_plan": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ",
            "code": "-- Function to find the nth octagonal number\nfunction find_octagonal_number(n)\n    -- Calculate the nth octagonal number using the formula\n    local octagonal_number = 3 * n * (n - 1) + 1\n    \n    -- Return the result\n    return octagonal_number\nend\n\n-- Test the function\nlocal n = 5\nlocal result = find_octagonal_number(n)\nprint(\"The \"..n..\"th octagonal number is: \"..result)",
            "gen_tc": "",
            "sim_score": "0.5503"
        },
        {
            "id": "84",
            "prompt": "Write a function to find the nth number in the newman conway sequence.",
            "draft_plan": "# Create a list to store the Newman-Conway sequence\n# Initialize the first two elements of the sequence\n# Iterate from index 3 up to the given number n\n    # Calculate the next element of the sequence using the previous elements\n# Return the nth element of the sequence",
            "requirements": "",
            "final_plan": "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))",
            "code": "function newmanConway(n)\n    if n <= 0 then\n        return nil\n    elseif n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        local sequence = {1, 1}\n        for i = 3, n do\n            sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n        end\n        return sequence[n]\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5496"
        },
        {
            "id": "271",
            "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
            "draft_plan": "# Initialize a variable `sum` to 0\n# Initialize a counter variable `count` to 0\n\n# Iterate through numbers starting from 1 until `count` reaches `n`\n    # Check if the current number is even\n        # Increment the `count` variable\n        # Add the current number raised to the fifth power to the `sum` variable\n\n# Return the `sum` variable",
            "requirements": "",
            "final_plan": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ",
            "code": "function sum_of_even_powers(n)\n    local sum = 0\n    local count = 0\n\n    for i = 1, math.huge do\n        if i % 2 == 0 then\n            count = count + 1\n            sum = sum + math.pow(i, 5)\n        end\n\n        if count == n then\n            break\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5322"
        },
        {
            "id": "267",
            "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of squares\n# Initialize a counter variable to keep track of the odd numbers\n# Initialize a variable to store the current odd number\n\n# Iterate from 1 to n (inclusive)\n    # Check if the current number is odd\n        # If it is, square the number and add it to the sum of squares\n        # Increase the counter variable by 1\n        # Check if the counter variable is equal to n\n            # If it is, break the loop\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
            "code": "function sum_of_squares(n)\n    local sum = 0\n    local counter = 0\n    local odd_number = 1\n\n    for i = 1, n do\n        if odd_number % 2 == 1 then\n            sum = sum + odd_number^2\n            counter = counter + 1\n        end\n\n        if counter == n then\n            break\n        end\n\n        odd_number = odd_number + 1\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5299"
        },
        {
            "id": "389",
            "prompt": "Write a function to find the n'th lucas number.",
            "draft_plan": "# Define a function to find the n-th Lucas number\ndef lucas_number(n):\n    # Base cases for n = 0 and n = 1\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Lucas numbers\n    lucas_0 = 2\n    lucas_1 = 1\n    \n    # Iterate from 2 to n\n    for i in range(2, n+1):\n        # Calculate the current Lucas number using the formula L(n) = L(n-1) + L(n-2)\n        lucas_n = lucas_0 + lucas_1\n        \n        # Update the values of previous Lucas numbers for the next iteration\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    \n    # Return the n-th Lucas number\n    return lucas_n",
            "requirements": "",
            "final_plan": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ",
            "code": "function lucas_number(n)\n    -- Base cases for n = 0 and n = 1\n    if n == 0 then\n        return 2\n    elseif n == 1 then\n        return 1\n    end\n    \n    -- Initialize the first two Lucas numbers\n    local lucas_0 = 2\n    local lucas_1 = 1\n    \n    -- Iterate from 2 to n\n    for i = 2, n do\n        -- Calculate the current Lucas number using the formula L(n) = L(n-1) + L(n-2)\n        local lucas_n = lucas_0 + lucas_1\n        \n        -- Update the values of previous Lucas numbers for the next iteration\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    end\n    \n    -- Return the n-th Lucas number\n    return lucas_n\nend",
            "gen_tc": "",
            "sim_score": "0.5252"
        },
        {
            "id": "135",
            "prompt": "Write a function to find the nth hexagonal number.",
            "draft_plan": "# Calculate the nth hexagonal number using the formula: n * (2 * n - 1)\n\n# Return the calculated nth hexagonal number",
            "requirements": "",
            "final_plan": "def hexagonal_num(n): \n\treturn n*(2*n - 1) ",
            "code": "function nthHexagonalNumber(n)\n    return n * (2 * n - 1)\nend",
            "gen_tc": "",
            "sim_score": "0.5241"
        },
        {
            "id": "420",
            "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of the cube of even numbers\n# Iterate through each even number from 2 to (2*n) with a step size of 2\n    # Calculate the cube of the current even number\n    # Add the cube to the sum\n\n# Return the sum of the cube of even numbers",
            "requirements": "",
            "final_plan": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
            "code": "function cube_sum_of_even(n)\n    local sum = 0\n    \n    for i = 2, 2 * n, 2 do\n        local cube = i * i * i\n        sum = sum + cube\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5196"
        },
        {
            "id": "162",
            "prompt": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
            "draft_plan": "# Initialize the sum to 0\n\n# Iterate from i = 0 to n // 2 (inclusive)\n    # Calculate the term (n - 2*i)\n    # Add the term to the sum\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)",
            "code": "function calculate_sum(n)\n    local sum = 0\n\n    for i = 0, n // 2 do\n        local term = n - 2 * i\n        sum = sum + term\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5154"
        },
        {
            "id": "287",
            "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
            "draft_plan": "# Initialize the sum of squares variable to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Add the square of the current number to the sum of squares variable\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
            "code": "function sum_of_squares(n)\n    local sum = 0\n\n    for i = 1, n do\n        if i % 2 == 0 then\n            sum = sum + (i * i)\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5081"
        },
        {
            "id": "392",
            "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
            "draft_plan": "# Create a dictionary to store the maximum sum for each number\n# Set the base cases for f(0) and f(1) as 0 and 1 respectively\n\n# Define a recursive function to calculate the maximum sum for a given number\n    # Check if the maximum sum for the current number has already been calculated\n        # If yes, return the stored value\n        # If no, calculate the maximum sum using the given equation\n\n# Call the recursive function to calculate the maximum sum for the given number",
            "requirements": "",
            "final_plan": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]",
            "code": "function max_sum(n)\n    local memo = {}  -- dictionary to store the maximum sum for each number\n\n    -- base cases\n    memo[0] = 0\n    memo[1] = 1\n\n    -- recursive function to calculate maximum sum\n    local function calculate_sum(num)\n        if memo[num] ~= nil then  -- check if maximum sum is already calculated\n            return memo[num]\n        end\n\n        -- calculate maximum sum using the given equation\n        memo[num] = math.max(calculate_sum(math.floor(num/2)) + calculate_sum(math.floor(num/3)) + calculate_sum(math.floor(num/4)) + calculate_sum(math.floor(num/5)), num)\n        return memo[num]\n    end\n\n    return calculate_sum(n)  -- call the recursive function to calculate maximum sum for given number\nend",
            "gen_tc": "",
            "sim_score": "0.5067"
        }
    ],
    "HumanEval/64": [
        {
            "id": "131",
            "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
            "draft_plan": "# Create a list of vowels (including both lowercase and uppercase)\n# Convert the input string into a list of characters\n\n# Initialize two pointers: one at the start of the string and one at the end\n# Iterate while the pointers don't overlap\n    # Check if the character at the start pointer is a vowel\n        # If it is, then check if the character at the end pointer is also a vowel\n            # If it is, swap the characters at the start and end pointers\n            # Move the start pointer to the next character\n            # Move the end pointer to the previous character\n        # If the character at the end pointer is not a vowel, move the end pointer to the previous character\n    \n# Convert the modified list of characters back into a string and return it",
            "requirements": "",
            "final_plan": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string",
            "code": "function reverse_vowels(str)\n    local vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }\n    local chars = {}\n    for i = 1, string.len(str) do\n        table.insert(chars, string.sub(str, i, i))\n    end\n    \n    local start = 1\n    local finish = string.len(str)\n    \n    while start < finish do\n        if is_vowel(chars[start], vowels) then\n            while not is_vowel(chars[finish], vowels) and finish > start do\n                finish = finish - 1\n            end\n            if finish > start then\n                chars[start], chars[finish] = chars[finish], chars[start]\n                start = start + 1\n                finish = finish - 1\n            end\n        else\n            start = start + 1\n        end\n    end\n    \n    return table.concat(chars)\nend\n\nfunction is_vowel(char, vowels)\n    for _, vowel in ipairs(vowels) do\n        if char == vowel then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.7236"
        },
        {
            "id": "461",
            "prompt": "Write a python function to count the upper case characters in a given string.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of uppercase characters\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter variable\n\n# Return the counter variable, which represents the number of uppercase characters in the string",
            "requirements": "",
            "final_plan": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
            "code": "function count_uppercase_chars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= 'A' and char <= 'Z' then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.6311"
        },
        {
            "id": "165",
            "prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
            "draft_plan": "# Initialize a variable to keep track of the count of characters at the same position in the English alphabet\n# Iterate through each character in the input string\n    # Convert the character to lowercase\n    # Check if the character is an alphabet character\n        # Get the position of the character in the English alphabet by subtracting the ASCII value of 'a' or 'A'\n        # Check if the position is equal to the index of the character in the string\n            # If the condition is true, increment the count\n\n# Return the count of characters at the same position in the English alphabet",
            "requirements": "",
            "final_plan": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ",
            "code": "function countSamePositionChars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local c = string.lower(string.sub(str, i, i))\n        if c >= \"a\" and c <= \"z\" then\n            local position = string.byte(c) - string.byte(\"a\") + 1\n            if position == i then\n                count = count + 1\n            end\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.6032"
        },
        {
            "id": "238",
            "prompt": "Write a python function to count the number of non-empty substrings of a given string.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each character and its index in the input string\n    # Iterate through each substring starting from the current character\n        # Increment the counter variable by 1 for each non-empty substring\n\n# Return the counter variable",
            "requirements": "",
            "final_plan": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ",
            "code": "function count_substrings(str)\n    local count = 0\n    for i = 1, #str do\n        for j = i, #str do\n            local substring = string.sub(str, i, j)\n            if substring ~= \"\" then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5672"
        },
        {
            "id": "242",
            "prompt": "Write a function to count the total number of characters in a string.",
            "draft_plan": "# Initialize a variable to keep track of the character count, set it to 0\n\n# Iterate through each character in the string\n    # Increment the character count by 1\n\n# Return the character count",
            "requirements": "",
            "final_plan": "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total",
            "code": "function countCharacters(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        count = count + 1\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5582"
        },
        {
            "id": "128",
            "prompt": "Write a function to find words that are longer than n characters from a given list of words.",
            "draft_plan": "# Create an empty list to store the result\n\n# Iterate through each word in the given list\n    # Check if the length of the current word is greater than n\n        # If the condition is satisfied, append the word to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t",
            "code": "function find_longer_words(word_list, n)\n    local result = {}\n\n    for _, word in ipairs(word_list) do\n        if string.len(word) > n then\n            table.insert(result, word)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5365"
        },
        {
            "id": "285",
            "prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
            "draft_plan": "# Iterate through each character in the input string\n    # Check if the current character is 'a'\n        # If it is, check the next two characters (if they exist) to see if they are 'b'\n            # If they are, return True\n    # If the current character is not 'a', continue to the next character\n\n# If no 'a' followed by two or three 'b' characters is found, return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function contains_a_followed_by_b(string)\n    local len = string.len(string)\n    for i = 1, len - 3 do\n        if string.sub(string, i, i) == 'a' then\n            if string.sub(string, i+1, i+3) == 'bb' or string.sub(string, i+1, i+3) == 'bbb' then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5298"
        },
        {
            "id": "172",
            "prompt": "Write a function to count the number of occurence of the string 'std' in a given string.",
            "draft_plan": "# Initialize a count variable to 0\n\n# Iterate through each character and its index in the input string\n    # Check if the current character and the next two characters form the string 'std'\n        # If the condition is satisfied, increment the count variable\n\n# Return the count variable",
            "requirements": "",
            "final_plan": "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count",
            "code": "function count_occurrence(string)\n    local count = 0\n\n    for i = 1, string.len(string) - 2 do\n        if string.sub(string, i, i + 2) == \"std\" then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5285"
        },
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.5194"
        },
        {
            "id": "250",
            "prompt": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the tuple\n    # Check if the current element is equal to the target element\n        # If it is, increment the counter by 1\n\n# Return the value of the counter variable",
            "requirements": "",
            "final_plan": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ",
            "code": "function count_occurrences(t, element)\n    local count = 0\n    \n    for i = 1, #t do\n        if t[i] == element then\n            count = count + 1\n        end\n    end\n    \n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5048"
        }
    ],
    "HumanEval/65": [
        {
            "id": "407",
            "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.",
            "draft_plan": "# Convert the given number to a list of digits\n\n# Find the first index (from right to left) where the digit is smaller than the digit to its right\n    # If no such index is found, return \"None\" since the number is already the largest possible\n\n# Find the smallest digit to the right of the found index that is larger than the digit at the found index\n\n# Swap the found digit with the smallest larger digit to its right\n\n# Sort the digits to the right of the found index in ascending order\n\n# Concatenate the digits to form the next bigger number\n\n# Return the next bigger number",
            "requirements": "",
            "final_plan": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False",
            "code": "function nextBiggerNumber(num)\n    -- Convert the number to a list of digits\n    local digits = {}\n    local n = num\n    while n > 0 do\n        table.insert(digits, 1, n % 10)\n        n = math.floor(n / 10)\n    end\n\n    -- Find the first index where the digit is smaller than the digit to its right\n    local i = #digits - 1\n    while i >= 1 and digits[i] >= digits[i+1] do\n        i = i - 1\n    end\n\n    -- If no such index is found, return \"None\"\n    if i < 1 then\n        return \"None\"\n    end\n\n    -- Find the smallest larger digit to the right of the found index\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n\n    -- Swap the found digit with the smallest larger digit to its right\n    digits[i], digits[j] = digits[j], digits[i]\n\n    -- Sort the digits to the right of the found index in ascending order\n    for k = i+1, #digits do\n        for l = k+1, #digits do\n            if digits[k] > digits[l] then\n                digits[k], digits[l] = digits[l], digits[k]\n            end\n        end\n    end\n\n    -- Concatenate the digits to form the next bigger number\n    local nextNum = 0\n    for k = 1, #digits do\n        nextNum = nextNum * 10 + digits[k]\n    end\n\n    return nextNum\nend",
            "gen_tc": "",
            "sim_score": "0.5271"
        },
        {
            "id": "56",
            "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
            "draft_plan": "# Convert the given number to a string and reverse it\n# Convert the reversed string back to an integer\n# Check if the given number is equal to twice the reversed number plus 1\n# If the condition is true, return True. Otherwise, return False.",
            "requirements": "",
            "final_plan": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
            "code": "function is_one_less_twice_reverse(number)\n    local reverse = tonumber(string.reverse(tostring(number)))\n    if number == (2 * reverse + 1) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5127"
        },
        {
            "id": "92",
            "prompt": "Write a function to check whether the given number is undulating or not.",
            "draft_plan": "To check whether a given number is undulating or not, we can follow these steps:\n\n1. Convert the given number into a string.\n2. Check if the length of the string is less than or equal to 2. If it is, return False since a number with length less than or equal to 2 cannot be undulating.\n3. Iterate through each digit in the string starting from the second digit.\n    - Check if the current digit is equal to the previous digit. If it is, return False since an undulating number cannot have consecutive same digits.\n    - Check if the current digit is greater than the previous digit. If it is, check if the previous digit is greater than the digit before it. If it is not, return False since an undulating number should have a decreasing trend after an increasing trend.\n    - Check if the current digit is less than the previous digit. If it is, check if the previous digit is less than the digit before it. If it is not, return False since an undulating number should have an increasing trend after a decreasing trend.\n4. If all the checks pass, return True since the number is undulating.\n\nHere is the code implementation of the logic:\n\n```python\ndef is_undulating_number(num):\n    num_str = str(num)\n    if len(num_str) <= 2:\n        return False\n    for i in range(1, len(num_str)):\n        if num_str[i] == num_str[i-1]:\n            return False\n        if num_str[i] > num_str[i-1] and num_str[i-1] <= num_str[i-2]:\n            return False\n        if num_str[i] < num_str[i-1] and num_str[i-1] >= num_str[i-2]:\n            return False\n    return True\n```\n\nYou can use the above function to check if a given number is undulating or not by passing the number as an argument to the function `is_undulating_number()`. The function will return `True` if the number is undulating, and `False` otherwise.",
            "requirements": "",
            "final_plan": "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True",
            "code": "function is_undulating_number(num)\n    local num_str = tostring(num)\n    if #num_str <= 2 then\n        return false\n    end\n    for i = 2, #num_str do\n        if num_str:sub(i, i) == num_str:sub(i-1, i-1) then\n            return false\n        end\n        if num_str:sub(i, i) > num_str:sub(i-1, i-1) and num_str:sub(i-1, i-1) <= num_str:sub(i-2, i-2) then\n            return false\n        end\n        if num_str:sub(i, i) < num_str:sub(i-1, i-1) and num_str:sub(i-1, i-1) >= num_str:sub(i-2, i-2) then\n            return false\n        end\n    end\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.4794"
        },
        {
            "id": "109",
            "prompt": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
            "draft_plan": "# Convert the binary string to a list of characters\n# Initialize a counter variable to keep track of the number of odd numbers\n\n# Rotate the binary string the given number of times\n    # Remove the last character from the binary string and prepend it to the front\n\n# Convert the rotated binary string back to a string\n# Iterate through each character in the rotated binary string\n    # Convert the character to an integer\n    # Check if the integer value is odd\n        # If so, increment the counter\n\n# Return the counter value",
            "requirements": "",
            "final_plan": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ",
            "code": "function count_odd_numbers(binary_str, rotations)\n    local binary_list = {}\n    local counter = 0\n\n    -- Convert the binary string to a list of characters\n    for char in string.gmatch(binary_str, \".\") do\n        table.insert(binary_list, char)\n    end\n\n    -- Rotate the binary string the given number of times\n    for i = 1, rotations do\n        local last_char = table.remove(binary_list)\n        table.insert(binary_list, 1, last_char)\n    end\n\n    -- Convert the rotated binary string back to a string\n    local rotated_binary_str = table.concat(binary_list)\n\n    -- Iterate through each character in the rotated binary string\n    for i = 1, string.len(rotated_binary_str) do\n        local char = string.sub(rotated_binary_str, i, i)\n        local num = tonumber(char)\n        \n        -- Check if the integer value is odd\n        if num % 2 == 1 then\n            counter = counter + 1\n        end\n    end\n\n    return counter\nend",
            "gen_tc": "",
            "sim_score": "0.4781"
        },
        {
            "id": "59",
            "prompt": "Write a function to find the nth octagonal number.",
            "draft_plan": "# Function to find the nth octagonal number\ndef find_octagonal_number(n):\n    # Calculate the nth octagonal number using the formula\n    octagonal_number = 3 * n * (n - 1) + 1\n    \n    # Return the result\n    return octagonal_number\n\n# Test the function\nn = 5\nresult = find_octagonal_number(n)\nprint(f\"The {n}th octagonal number is: {result}\")",
            "requirements": "",
            "final_plan": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ",
            "code": "-- Function to find the nth octagonal number\nfunction find_octagonal_number(n)\n    -- Calculate the nth octagonal number using the formula\n    local octagonal_number = 3 * n * (n - 1) + 1\n    \n    -- Return the result\n    return octagonal_number\nend\n\n-- Test the function\nlocal n = 5\nlocal result = find_octagonal_number(n)\nprint(\"The \"..n..\"th octagonal number is: \"..result)",
            "gen_tc": "",
            "sim_score": "0.4754"
        },
        {
            "id": "435",
            "prompt": "Write a python function to find the last digit of a given number.",
            "draft_plan": "To find the last digit of a given number, you can use the modulo operator (`%`) to get the remainder when dividing the number by 10. The remainder will be the last digit of the number.\n\nHere's the code logic:\n\n1. Define a function `find_last_digit` that takes a number as input.\n2. Inside the function, calculate the remainder of the number when divided by 10 using the modulo operator: `last_digit = number % 10`.\n3. Return the value of `last_digit`.\n\nHere's the code implementation in Python:\n\n```python\ndef find_last_digit(number):\n    last_digit = number % 10\n    return last_digit\n```\n\nYou can then call this function by passing a number as an argument to get the last digit. For example:\n\n```python\nprint(find_last_digit(12345))  # Output: 5\nprint(find_last_digit(987654321))  # Output: 1\nprint(find_last_digit(0))  # Output: 0\n```",
            "requirements": "",
            "final_plan": "def last_Digit(n) :\n    return (n % 10) ",
            "code": "function find_last_digit(number)\n    local last_digit = number % 10\n    return last_digit\nend\n\nprint(find_last_digit(12345))  -- Output: 5\nprint(find_last_digit(987654321))  -- Output: 1\nprint(find_last_digit(0))  -- Output: 0",
            "gen_tc": "",
            "sim_score": "0.4661"
        },
        {
            "id": "456",
            "prompt": "Write a function to reverse each string in a given list of string values.",
            "draft_plan": "# Iterate through each string in the given list\n    # Reverse the current string using string slicing\n    # Update the current string in the list with the reversed string\n\n# Return the modified list",
            "requirements": "",
            "final_plan": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result",
            "code": "function reverse_strings(str_list)\n    for i = 1, #str_list do\n        str_list[i] = string.reverse(str_list[i])\n    end\n    return str_list\nend",
            "gen_tc": "",
            "sim_score": "0.4641"
        },
        {
            "id": "99",
            "prompt": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
            "draft_plan": "# Initialize an empty string to store the binary representation\n# Check if the input number is 0, if so return '0' as the binary representation\n# Iterate until the input number becomes 0\n    # Append the remainder of the input number divided by 2 to the binary representation string\n    # Update the input number by dividing it by 2, discarding the remainder\n\n# Reverse the binary representation string\n\n# Return the binary representation string",
            "requirements": "",
            "final_plan": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") ",
            "code": "function decimalToBinary(decimal)\n    local binary = \"\"\n\n    if decimal == 0 then\n        return \"0\"\n    end\n\n    while decimal > 0 do\n        binary = tostring(decimal % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n\n    return binary\nend",
            "gen_tc": "",
            "sim_score": "0.4510"
        },
        {
            "id": "283",
            "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
            "draft_plan": "# Convert the input integer to a string\n# Initialize a dictionary to store the frequency of each digit\n\n# Iterate through each digit in the string\n    # Increment the frequency of the digit in the dictionary\n\n# Iterate through each digit in the string\n    # Check if the frequency of the digit is greater than the digit itself\n        # If yes, return False\n\n# If all frequencies are less than or equal to their respective digits, return True",
            "requirements": "",
            "final_plan": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
            "code": "function check_frequency(num)\n    local str_num = tostring(num)\n    local freq_dict = {}\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        freq_dict[digit] = (freq_dict[digit] or 0) + 1\n    end\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        if freq_dict[digit] > tonumber(digit) then\n            return false\n        end\n    end\n\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.4449"
        },
        {
            "id": "479",
            "prompt": "Write a python function to find the first digit of a given number.",
            "draft_plan": "# Convert the given number to a string\n\n# Iterate through each character in the string\n    # Check if the character is a digit\n        # If it is, return the character as the first digit\n\n# If no digit is found, return \"None\"",
            "requirements": "",
            "final_plan": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ",
            "code": "function firstDigit(number)\n    local numberStr = tostring(number)\n\n    for i = 1, string.len(numberStr) do\n        local char = string.sub(numberStr, i, i)\n        if string.match(char, \"%d\") then\n            return char\n        end\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.4422"
        }
    ],
    "HumanEval/66": [
        {
            "id": "461",
            "prompt": "Write a python function to count the upper case characters in a given string.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of uppercase characters\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter variable\n\n# Return the counter variable, which represents the number of uppercase characters in the string",
            "requirements": "",
            "final_plan": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
            "code": "function count_uppercase_chars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= 'A' and char <= 'Z' then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.7072"
        },
        {
            "id": "398",
            "prompt": "Write a function to compute the sum of digits of each number of a given list.",
            "draft_plan": "# Initialize an empty list to store the sum of digits for each number\n\n# Iterate through each number in the given list\n    # Convert the number to a string\n    # Initialize a variable to store the sum of digits\n    # Iterate through each digit in the string representation of the number\n        # Convert the digit back to an integer and add it to the sum of digits\n    # Append the sum of digits to the list\n\n# Return the list of sum of digits for each number",
            "requirements": "",
            "final_plan": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
            "code": "function compute_sum_of_digits(numbers)\n    local sum_of_digits = {}\n\n    for _, num in ipairs(numbers) do\n        local num_str = tostring(num)\n        local digits_sum = 0\n\n        for i = 1, string.len(num_str) do\n            digits_sum = digits_sum + tonumber(string.sub(num_str, i, i))\n        end\n\n        table.insert(sum_of_digits, digits_sum)\n    end\n\n    return sum_of_digits\nend",
            "gen_tc": "",
            "sim_score": "0.6546"
        },
        {
            "id": "83",
            "prompt": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
            "draft_plan": "# Define a function to calculate the character made by adding the ASCII values modulo 26\n    # Initialize a variable to store the sum of ASCII values\n    # Iterate through each character in the given string\n        # Add the ASCII value of the current character to the sum\n    # Calculate the modulo 26 of the sum\n    # Convert the result back to a character using the ASCII value\n    # Return the resulting character",
            "requirements": "",
            "final_plan": "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)",
            "code": "function calculate_ascii_modulo_26(string)\n    local sum = 0\n    for i = 1, string.len(string) do\n        sum = sum + string.byte(string, i)\n    end\n\n    local modulo_result = sum % 26\n\n    -- Convert the modulo result to a character using the ASCII value\n    local result_char = string.char(modulo_result)\n\n    return result_char\nend",
            "gen_tc": "",
            "sim_score": "0.6525"
        },
        {
            "id": "61",
            "prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of substrings\n\n# Iterate through each starting index of the substring\n    # Iterate through each ending index of the substring\n        # Get the substring from the starting index to the ending index\n        # Compute the sum of the digits in the substring\n        # Check if the sum of the digits is equal to the length of the substring\n            # If true, increment the counter variable\n\n# Return the counter variable with the total number of substrings",
            "requirements": "",
            "final_plan": "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count",
            "code": "function count_substrings(string)\n    local count = 0\n\n    for i = 1, string.len(string) do\n        for j = i, string.len(string) do\n            local substring = string.sub(string, i, j)\n            local sum = compute_sum(substring)\n            \n            if sum == string.len(substring) then\n                count = count + 1\n            end\n        end\n    end\n\n    return count\nend\n\nfunction compute_sum(substring)\n    local sum = 0\n\n    for i = 1, string.len(substring) do\n        local digit = tonumber(string.sub(substring, i, i))\n        sum = sum + digit\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6451"
        },
        {
            "id": "269",
            "prompt": "Write a function to find the ascii value of a character.",
            "draft_plan": "To find the ASCII value of a character in Python, you can use the `ord()` function. Here is the code logic:\n\n1. Define a function `find_ascii_value(char)` that takes a character as input.\n2. Inside the function, use the `ord()` function to find the ASCII value of the character.\n3. Return the ASCII value.\n\nHere is the code:\n\n```python\ndef find_ascii_value(char):\n    return ord(char)\n```\n\nYou can then call this function and pass the character whose ASCII value you want to find, like this:\n\n```python\nprint(find_ascii_value('A')) # Output: 65\n```\n\nNote that the `ord()` function only works with single characters. If you pass a string with multiple characters, it will raise a `TypeError`.",
            "requirements": "",
            "final_plan": "def ascii_value(k):\n  ch=k\n  return ord(ch)",
            "code": "In Lua, the `string.byte()` function can be used to find the ASCII value of a character. Here is the Lua code to find the ASCII value of a character:\n\n```lua\nfunction find_ascii_value(char)\n    return string.byte(char)\nend\n```\n\nYou can then call this function and pass the character whose ASCII value you want to find, like this:\n\n```lua\nprint(find_ascii_value(\"A\")) -- Output: 65\n```\n\nNote that in Lua, you need to pass the character as a string to the `string.byte()` function.",
            "gen_tc": "",
            "sim_score": "0.5549"
        },
        {
            "id": "479",
            "prompt": "Write a python function to find the first digit of a given number.",
            "draft_plan": "# Convert the given number to a string\n\n# Iterate through each character in the string\n    # Check if the character is a digit\n        # If it is, return the character as the first digit\n\n# If no digit is found, return \"None\"",
            "requirements": "",
            "final_plan": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ",
            "code": "function firstDigit(number)\n    local numberStr = tostring(number)\n\n    for i = 1, string.len(numberStr) do\n        local char = string.sub(numberStr, i, i)\n        if string.match(char, \"%d\") then\n            return char\n        end\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.5519"
        },
        {
            "id": "242",
            "prompt": "Write a function to count the total number of characters in a string.",
            "draft_plan": "# Initialize a variable to keep track of the character count, set it to 0\n\n# Iterate through each character in the string\n    # Increment the character count by 1\n\n# Return the character count",
            "requirements": "",
            "final_plan": "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total",
            "code": "function countCharacters(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        count = count + 1\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5472"
        },
        {
            "id": "477",
            "prompt": "Write a python function to convert the given string to lower case.",
            "draft_plan": "# Convert the input string to lower case using the lower() method\n# Return the lower case string",
            "requirements": "",
            "final_plan": "def is_lower(string):\n  return (string.lower())",
            "code": "function convert_to_lower(str)\n    return string.lower(str)\nend",
            "gen_tc": "",
            "sim_score": "0.5457"
        },
        {
            "id": "165",
            "prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
            "draft_plan": "# Initialize a variable to keep track of the count of characters at the same position in the English alphabet\n# Iterate through each character in the input string\n    # Convert the character to lowercase\n    # Check if the character is an alphabet character\n        # Get the position of the character in the English alphabet by subtracting the ASCII value of 'a' or 'A'\n        # Check if the position is equal to the index of the character in the string\n            # If the condition is true, increment the count\n\n# Return the count of characters at the same position in the English alphabet",
            "requirements": "",
            "final_plan": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ",
            "code": "function countSamePositionChars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local c = string.lower(string.sub(str, i, i))\n        if c >= \"a\" and c <= \"z\" then\n            local position = string.byte(c) - string.byte(\"a\") + 1\n            if position == i then\n                count = count + 1\n            end\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5365"
        },
        {
            "id": "459",
            "prompt": "Write a function to remove uppercase substrings from a given string.",
            "draft_plan": "# Initialize an empty string to store the result\n\n# Iterate through each character in the input string\n    # Check if the current character is lowercase\n        # If it is lowercase, append it to the result string\n\n# Return the result string",
            "requirements": "",
            "final_plan": "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)",
            "code": "function removeUppercaseSubstrings(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= \"a\" and char <= \"z\" then\n            result = result .. char\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5280"
        }
    ],
    "HumanEval/67": [
        {
            "id": "168",
            "prompt": "Write a function to count the number of occurrences of a number in a given list.",
            "draft_plan": "# Initialize a count variable to 0\n\n# Iterate through each element in the list\n    # Check if the current element is equal to the given number\n        # If it is, increment the count variable\n\n# Return the count variable",
            "requirements": "",
            "final_plan": "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count ",
            "code": "function countOccurrences(list, number)\n    local count = 0\n\n    for _, element in ipairs(list) do\n        if element == number then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4336"
        },
        {
            "id": "450",
            "prompt": "Write a function to extract specified size of strings from a given list of string values.",
            "draft_plan": "# Initialize an empty list to store the extracted strings\n\n# Iterate through each string in the given list\n    # Check if the length of the current string is equal to the specified size\n        # If it matches, append the string to the result list\n\n# Return the list of extracted strings",
            "requirements": "",
            "final_plan": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result",
            "code": "function extract_strings(strings, size)\n    local extracted_strings = {}\n\n    for _, str in ipairs(strings) do\n        if string.len(str) == size then\n            table.insert(extracted_strings, str)\n        end\n    end\n\n    return extracted_strings\nend",
            "gen_tc": "",
            "sim_score": "0.4330"
        },
        {
            "id": "61",
            "prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of substrings\n\n# Iterate through each starting index of the substring\n    # Iterate through each ending index of the substring\n        # Get the substring from the starting index to the ending index\n        # Compute the sum of the digits in the substring\n        # Check if the sum of the digits is equal to the length of the substring\n            # If true, increment the counter variable\n\n# Return the counter variable with the total number of substrings",
            "requirements": "",
            "final_plan": "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count",
            "code": "function count_substrings(string)\n    local count = 0\n\n    for i = 1, string.len(string) do\n        for j = i, string.len(string) do\n            local substring = string.sub(string, i, j)\n            local sum = compute_sum(substring)\n            \n            if sum == string.len(substring) then\n                count = count + 1\n            end\n        end\n    end\n\n    return count\nend\n\nfunction compute_sum(substring)\n    local sum = 0\n\n    for i = 1, string.len(substring) do\n        local digit = tonumber(string.sub(substring, i, i))\n        sum = sum + digit\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4324"
        },
        {
            "id": "250",
            "prompt": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the tuple\n    # Check if the current element is equal to the target element\n        # If it is, increment the counter by 1\n\n# Return the value of the counter variable",
            "requirements": "",
            "final_plan": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ",
            "code": "function count_occurrences(t, element)\n    local count = 0\n    \n    for i = 1, #t do\n        if t[i] == element then\n            count = count + 1\n        end\n    end\n    \n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4200"
        },
        {
            "id": "88",
            "prompt": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.",
            "draft_plan": "# Initialize an empty dictionary\n\n# Iterate through each element in the list\n    # Check if the element is already a key in the dictionary\n        # If it is, increment its value by 1\n        # If it is not, add it as a new key with value 1\n\n# Return the dictionary containing the frequency of elements",
            "requirements": "",
            "final_plan": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count",
            "code": "function get_frequency(lst)\n    local frequency = {}\n\n    for _, element in ipairs(lst) do\n        if frequency[element] then\n            frequency[element] = frequency[element] + 1\n        else\n            frequency[element] = 1\n        end\n    end\n\n    return frequency\nend",
            "gen_tc": "",
            "sim_score": "0.4137"
        },
        {
            "id": "67",
            "prompt": "Write a function to find the number of ways to partition a set of Bell numbers.",
            "draft_plan": "# Import the math module to use the factorial function\nimport math\n\n# Define a function to calculate the Bell numbers\ndef calculate_bell_number(n):\n    # Create a 2D array to store the Bell numbers\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n\n    # Initialize the first Bell number as 1\n    bell[0][0] = 1\n\n    # Calculate the Bell numbers using dynamic programming\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    # Return the last Bell number\n    return bell[n][0]\n\n# Define a function to calculate the number of ways to partition a set of Bell numbers\ndef calculate_partition_ways(n):\n    # Calculate the Bell number for n\n    bell_number = calculate_bell_number(n)\n\n    # Calculate the number of ways to partition the set\n    partition_ways = math.factorial(n) * bell_number\n\n    # Return the number of ways to partition the set\n    return partition_ways",
            "requirements": "",
            "final_plan": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] ",
            "code": "-- Define a helper function to calculate the Bell numbers\nfunction calculate_bell_number(n)\n    -- Create a 2D array to store the Bell numbers\n    local bell = {}\n    for i = 0, n do\n        bell[i] = {}\n        for j = 0, n do\n            bell[i][j] = 0\n        end\n    end\n\n    -- Initialize the first Bell number as 1\n    bell[0][0] = 1\n\n    -- Calculate the Bell numbers using dynamic programming\n    for i = 1, n do\n        bell[i][0] = bell[i-1][i-1]\n        for j = 1, i do\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        end\n    end\n\n    -- Return the last Bell number\n    return bell[n][0]\nend\n\n-- Define a function to calculate the number of ways to partition a set of Bell numbers\nfunction calculate_partition_ways(n)\n    -- Calculate the Bell number for n\n    local bell_number = calculate_bell_number(n)\n\n    -- Calculate the number of ways to partition the set\n    local partition_ways = math.factorial(n) * bell_number\n\n    -- Return the number of ways to partition the set\n    return partition_ways\nend",
            "gen_tc": "",
            "sim_score": "0.4065"
        },
        {
            "id": "98",
            "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
            "draft_plan": "# Initialize the product variable to 1\n\n# Iterate through each number in the list\n    # Multiply the product by the current number\n\n# Divide the product by the length of the list\n\n# Return the result",
            "requirements": "",
            "final_plan": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ",
            "code": "function multiply_and_divide(numbers)\n    local product = 1\n\n    for _, num in ipairs(numbers) do\n        product = product * num\n    end\n\n    local result = product / #numbers\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4030"
        },
        {
            "id": "253",
            "prompt": "Write a python function that returns the number of integer elements in a given list.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the given list\n    # Check if the current element is an integer\n        # If it is an integer, increment the counter variable\n\n# Return the counter variable as the number of integer elements in the list",
            "requirements": "",
            "final_plan": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr",
            "code": "function count_integer_elements(lst)\n    local count = 0\n\n    for _, element in ipairs(lst) do\n        if type(element) == \"number\" and math.floor(element) == element then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.3994"
        },
        {
            "id": "97",
            "prompt": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.",
            "draft_plan": "# Create an empty dictionary to store the frequency of elements\n\n# Iterate through each sublist in the flattened list\n    # Iterate through each element in the sublist\n        # Check if the element is already in the dictionary\n            # If it is, increment its count by 1\n            # If it is not, add it to the dictionary with a count of 1\n\n# Return the dictionary containing the frequency of each element",
            "requirements": "",
            "final_plan": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n",
            "code": "function count_frequency(flattened_list)\n    local frequency_dict = {}\n\n    for _, sublist in ipairs(flattened_list) do\n        for _, element in ipairs(sublist) do\n            if frequency_dict[element] then\n                frequency_dict[element] = frequency_dict[element] + 1\n            else\n                frequency_dict[element] = 1\n            end\n        end\n    end\n\n    return frequency_dict\nend",
            "gen_tc": "",
            "sim_score": "0.3988"
        },
        {
            "id": "237",
            "prompt": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.",
            "draft_plan": "# Initialize an empty dictionary\n\n# Iterate through each tuple in the list\n    # Check if the current tuple is already a key in the dictionary\n        # If it is, increment the count by 1\n        # If it is not, add the tuple as a key with a count of 1\n\n# Return the dictionary",
            "requirements": "",
            "final_plan": "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) ",
            "code": "function count_tuples(list_of_tuples)\n    local tuple_count = {}\n\n    for _, tup in ipairs(list_of_tuples) do\n        if tuple_count[tup] then\n            tuple_count[tup] = tuple_count[tup] + 1\n        else\n            tuple_count[tup] = 1\n        end\n    end\n\n    return tuple_count\nend",
            "gen_tc": "",
            "sim_score": "0.3987"
        }
    ],
    "HumanEval/68": [
        {
            "id": "280",
            "prompt": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
            "draft_plan": "# Initialize a variable to store the index position of the element, initialized to -1\n# Iterate through each element in the array along with its index\n    # Check if the current element is equal to the target element\n        # If they are equal, update the index variable with the current index and break out of the loop\n\n# Check if the index variable is still equal to -1\n    # If it is, set the boolean variable to False, indicating the element is not found\n    # If it is not, set the boolean variable to True, indicating the element is found\n\n# Return a tuple with the boolean variable and the index variable",
            "requirements": "",
            "final_plan": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos",
            "code": "function findElement(arr, element)\n    local index = -1\n\n    for i, value in ipairs(arr) do\n        if value == element then\n            index = i\n            break\n        end\n    end\n\n    local found = index ~= -1\n    return found, index\nend",
            "gen_tc": "",
            "sim_score": "0.4825"
        },
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.4823"
        },
        {
            "id": "226",
            "prompt": "Write a python function to remove the characters which have odd index values of a given string.",
            "draft_plan": "# Initialize an empty string to store the result\n\n# Iterate through each character and its index in the input string\n    # Check if the index of the current character is even\n        # If it is even, append the character to the result string\n\n# Return the result string",
            "requirements": "",
            "final_plan": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result",
            "code": "function remove_odd_index_chars(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        if i % 2 == 0 then\n            result = result .. string.sub(str, i, i)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4584"
        },
        {
            "id": "412",
            "prompt": "Write a python function to remove odd numbers from a given list.",
            "draft_plan": "# Create an empty list to store the even numbers\n\n# Iterate through each number in the given list\n    # Check if the number is even (number % 2 == 0)\n        # If the number is even, append it to the list of even numbers\n\n# Return the list of even numbers",
            "requirements": "",
            "final_plan": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
            "code": "function remove_odd_numbers(lst)\n    local even_lst = {}\n\n    for _, num in ipairs(lst) do\n        if num % 2 == 0 then\n            table.insert(even_lst, num)\n        end\n    end\n\n    return even_lst\nend",
            "gen_tc": "",
            "sim_score": "0.4577"
        },
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.4486"
        },
        {
            "id": "274",
            "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
            "draft_plan": "# Import the math module\n\n# Define a function that takes in a positive integer n\n    # Initialize a variable `sum_even` to store the sum of even index binomial coefficients\n    # Iterate from 0 to n\n        # Calculate the binomial coefficient using the math module's comb function\n        # Check if the index is even\n            # If it is even, add the binomial coefficient to `sum_even`\n    # Return `sum_even`",
            "requirements": "",
            "final_plan": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ",
            "code": "import math\n\ndef sum_even_binomial_coefficients(n):\n    sum_even = 0\n    for i in range(n+1):\n        coefficient = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even += coefficient\n    return sum_even",
            "gen_tc": "",
            "sim_score": "0.4374"
        },
        {
            "id": "94",
            "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
            "draft_plan": "# Initialize the minimum second value as positive infinity\n# Initialize the first value of the tuple with minimum second value as None\n\n# Iterate through each tuple in the list\n    # Check if the second value of the current tuple is smaller than the current minimum second value\n        # If yes, update the minimum second value and the first value of the tuple\n\n# Return the first value of the tuple with the smallest second value",
            "requirements": "",
            "final_plan": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ",
            "code": "function get_first_smallest_value(test_list)\n    local min_second = math.huge\n    local first_value = nil\n    \n    for _, tup in ipairs(test_list) do\n        local second_value = tup[2]\n        \n        if second_value < min_second then\n            min_second = second_value\n            first_value = tup[1]\n        end\n    end\n    \n    return first_value\nend",
            "gen_tc": "",
            "sim_score": "0.4294"
        },
        {
            "id": "420",
            "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of the cube of even numbers\n# Iterate through each even number from 2 to (2*n) with a step size of 2\n    # Calculate the cube of the current even number\n    # Add the cube to the sum\n\n# Return the sum of the cube of even numbers",
            "requirements": "",
            "final_plan": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
            "code": "function cube_sum_of_even(n)\n    local sum = 0\n    \n    for i = 2, 2 * n, 2 do\n        local cube = i * i * i\n        sum = sum + cube\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4275"
        },
        {
            "id": "229",
            "prompt": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
            "draft_plan": "# Create two empty lists, one for negative elements and one for positive elements\n\n# Iterate through the first n elements of the array\n    # Check if the element is negative\n        # If it is, append it to the negative elements list\n    # Otherwise, append it to the positive elements list\n\n# Concatenate the negative elements list with the positive elements list\n# Return the resulting list",
            "requirements": "",
            "final_plan": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr",
            "code": "function rearrangeArray(arr, n)\n    local negativeElements = {}\n    local positiveElements = {}\n\n    for i = 1, n do\n        if arr[i] < 0 then\n            table.insert(negativeElements, arr[i])\n        else\n            table.insert(positiveElements, arr[i])\n        end\n    end\n\n    for i = 1, #positiveElements do\n        table.insert(negativeElements, positiveElements[i])\n    end\n\n    return negativeElements\nend",
            "gen_tc": "",
            "sim_score": "0.4184"
        },
        {
            "id": "436",
            "prompt": "Write a python function to return the negative numbers in a list.",
            "draft_plan": "# Initialize an empty list to store the negative numbers\n\n# Iterate through each element in the input list\n    # Check if the current element is less than 0\n        # If the element is negative, append it to the list of negative numbers\n\n# Return the list of negative numbers",
            "requirements": "",
            "final_plan": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ",
            "code": "function getNegativeNumbers(numbers)\n    local negativeNumbers = {}\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            table.insert(negativeNumbers, num)\n        end\n    end\n\n    return negativeNumbers\nend",
            "gen_tc": "",
            "sim_score": "0.4163"
        }
    ],
    "HumanEval/69": [
        {
            "id": "130",
            "prompt": "Write a function to find the item with maximum frequency in a given list.",
            "draft_plan": "# Create an empty dictionary to store the frequency count of each item\n# Iterate through each item in the given list\n    # If the item is already in the dictionary, increment its count by 1\n    # If the item is not in the dictionary, add it with count 1\n# Find the item with the maximum frequency by finding the key with the maximum value in the dictionary\n# Return the item with the maximum frequency",
            "requirements": "",
            "final_plan": "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]",
            "code": "function findMaxFrequency(lst)\n    local frequency = {}\n    \n    for _, item in ipairs(lst) do\n        if frequency[item] then\n            frequency[item] = frequency[item] + 1\n        else\n            frequency[item] = 1\n        end\n    end\n    \n    local maxFrequency = 0\n    local maxItem = nil\n    \n    for item, count in pairs(frequency) do\n        if count > maxFrequency then\n            maxFrequency = count\n            maxItem = item\n        end\n    end\n    \n    return maxItem\nend",
            "gen_tc": "",
            "sim_score": "0.7339"
        },
        {
            "id": "283",
            "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
            "draft_plan": "# Convert the input integer to a string\n# Initialize a dictionary to store the frequency of each digit\n\n# Iterate through each digit in the string\n    # Increment the frequency of the digit in the dictionary\n\n# Iterate through each digit in the string\n    # Check if the frequency of the digit is greater than the digit itself\n        # If yes, return False\n\n# If all frequencies are less than or equal to their respective digits, return True",
            "requirements": "",
            "final_plan": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
            "code": "function check_frequency(num)\n    local str_num = tostring(num)\n    local freq_dict = {}\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        freq_dict[digit] = (freq_dict[digit] or 0) + 1\n    end\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        if freq_dict[digit] > tonumber(digit) then\n            return false\n        end\n    end\n\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.7118"
        },
        {
            "id": "88",
            "prompt": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.",
            "draft_plan": "# Initialize an empty dictionary\n\n# Iterate through each element in the list\n    # Check if the element is already a key in the dictionary\n        # If it is, increment its value by 1\n        # If it is not, add it as a new key with value 1\n\n# Return the dictionary containing the frequency of elements",
            "requirements": "",
            "final_plan": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count",
            "code": "function get_frequency(lst)\n    local frequency = {}\n\n    for _, element in ipairs(lst) do\n        if frequency[element] then\n            frequency[element] = frequency[element] + 1\n        else\n            frequency[element] = 1\n        end\n    end\n\n    return frequency\nend",
            "gen_tc": "",
            "sim_score": "0.6411"
        },
        {
            "id": "443",
            "prompt": "Write a python function to find the largest negative number from the given list.",
            "draft_plan": "# Initialize a variable 'largest_negative' to None\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If 'largest_negative' is None or the current number is greater than 'largest_negative', update 'largest_negative' to the current number\n\n# Return 'largest_negative'",
            "requirements": "",
            "final_plan": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
            "code": "function find_largest_negative(numbers)\n    local largest_negative = nil\n\n    for _, number in ipairs(numbers) do\n        if number < 0 then\n            if largest_negative == nil or number > largest_negative then\n                largest_negative = number\n            end\n        end\n    end\n\n    return largest_negative\nend",
            "gen_tc": "",
            "sim_score": "0.6089"
        },
        {
            "id": "97",
            "prompt": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.",
            "draft_plan": "# Create an empty dictionary to store the frequency of elements\n\n# Iterate through each sublist in the flattened list\n    # Iterate through each element in the sublist\n        # Check if the element is already in the dictionary\n            # If it is, increment its count by 1\n            # If it is not, add it to the dictionary with a count of 1\n\n# Return the dictionary containing the frequency of each element",
            "requirements": "",
            "final_plan": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n",
            "code": "function count_frequency(flattened_list)\n    local frequency_dict = {}\n\n    for _, sublist in ipairs(flattened_list) do\n        for _, element in ipairs(sublist) do\n            if frequency_dict[element] then\n                frequency_dict[element] = frequency_dict[element] + 1\n            else\n                frequency_dict[element] = 1\n            end\n        end\n    end\n\n    return frequency_dict\nend",
            "gen_tc": "",
            "sim_score": "0.5787"
        },
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.5739"
        },
        {
            "id": "436",
            "prompt": "Write a python function to return the negative numbers in a list.",
            "draft_plan": "# Initialize an empty list to store the negative numbers\n\n# Iterate through each element in the input list\n    # Check if the current element is less than 0\n        # If the element is negative, append it to the list of negative numbers\n\n# Return the list of negative numbers",
            "requirements": "",
            "final_plan": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ",
            "code": "function getNegativeNumbers(numbers)\n    local negativeNumbers = {}\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            table.insert(negativeNumbers, num)\n        end\n    end\n\n    return negativeNumbers\nend",
            "gen_tc": "",
            "sim_score": "0.5706"
        },
        {
            "id": "66",
            "prompt": "Write a python function to count the number of positive numbers in a list.",
            "draft_plan": "# Initialize a variable count to 0\n\n# Iterate through each number in the list\n    # Check if the number is greater than 0\n        # If it is, increment the count\n\n# Return the count",
            "requirements": "",
            "final_plan": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ",
            "code": "function count_positive_numbers(lst)\n    local count = 0\n\n    for _, num in ipairs(lst) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5458"
        },
        {
            "id": "418",
            "prompt": "Write a python function to find the element of a list having maximum length.",
            "draft_plan": "# Initialize a variable to store the index of the element with maximum length\n# Initialize a variable to store the maximum length, initially set to 0\n\n# Iterate through each element in the list\n    # Check if the length of the current element is greater than the maximum length\n        # If so, update the maximum length and the index of the element\n\n# Return the element at the index with maximum length",
            "requirements": "",
            "final_plan": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList",
            "code": "function findMaxElementLength(lst)\n    local maxIndex = 1\n    local maxLength = 0\n\n    for i, element in ipairs(lst) do\n        local length = string.len(element)\n        if length > maxLength then\n            maxLength = length\n            maxIndex = i\n        end\n    end\n\n    return lst[maxIndex]\nend",
            "gen_tc": "",
            "sim_score": "0.5455"
        },
        {
            "id": "277",
            "prompt": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.",
            "draft_plan": "# Initialize an empty dictionary to store the filtered entries\n\n# Iterate through each key-value pair in the input dictionary\n    # Check if the value is greater than or equal to n\n        # If it is, add the key-value pair to the filtered dictionary\n\n# Return the filtered dictionary",
            "requirements": "",
            "final_plan": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result",
            "code": "function filter_dictionary(dict, n)\n    local filtered_dict = {}\n\n    for key, value in pairs(dict) do\n        if value >= n then\n            filtered_dict[key] = value\n        end\n    end\n\n    return filtered_dict\nend",
            "gen_tc": "",
            "sim_score": "0.5438"
        }
    ],
    "HumanEval/70": [
        {
            "id": "141",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Implement a sorting algorithm such as bubble sort, insertion sort, merge sort, quick sort, etc.\n\n# Define a function to take a list of elements as input\n    # Iterate through the list to compare each element with its adjacent element(s)\n        # Swap elements if they are in the wrong order\n    # Repeat the above steps until the list is sorted\n\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums",
            "code": "-- Bubble Sort implementation\nfunction sort_list(list)\n    local n = #list\n    for i = 1, n-1 do\n        for j = 1, n-i do\n            if list[j] > list[j+1] then\n                list[j], list[j+1] = list[j+1], list[j]\n            end\n        end\n    end\n    return list\nend",
            "gen_tc": "",
            "sim_score": "0.6430"
        },
        {
            "id": "71",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Use the built-in sorted() function to sort the list in ascending order\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums",
            "code": "function sort_list(elements)\n    return sorted(elements)\nend",
            "gen_tc": "",
            "sim_score": "0.6157"
        },
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.6145"
        },
        {
            "id": "407",
            "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.",
            "draft_plan": "# Convert the given number to a list of digits\n\n# Find the first index (from right to left) where the digit is smaller than the digit to its right\n    # If no such index is found, return \"None\" since the number is already the largest possible\n\n# Find the smallest digit to the right of the found index that is larger than the digit at the found index\n\n# Swap the found digit with the smallest larger digit to its right\n\n# Sort the digits to the right of the found index in ascending order\n\n# Concatenate the digits to form the next bigger number\n\n# Return the next bigger number",
            "requirements": "",
            "final_plan": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False",
            "code": "function nextBiggerNumber(num)\n    -- Convert the number to a list of digits\n    local digits = {}\n    local n = num\n    while n > 0 do\n        table.insert(digits, 1, n % 10)\n        n = math.floor(n / 10)\n    end\n\n    -- Find the first index where the digit is smaller than the digit to its right\n    local i = #digits - 1\n    while i >= 1 and digits[i] >= digits[i+1] do\n        i = i - 1\n    end\n\n    -- If no such index is found, return \"None\"\n    if i < 1 then\n        return \"None\"\n    end\n\n    -- Find the smallest larger digit to the right of the found index\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n\n    -- Swap the found digit with the smallest larger digit to its right\n    digits[i], digits[j] = digits[j], digits[i]\n\n    -- Sort the digits to the right of the found index in ascending order\n    for k = i+1, #digits do\n        for l = k+1, #digits do\n            if digits[k] > digits[l] then\n                digits[k], digits[l] = digits[l], digits[k]\n            end\n        end\n    end\n\n    -- Concatenate the digits to form the next bigger number\n    local nextNum = 0\n    for k = 1, #digits do\n        nextNum = nextNum * 10 + digits[k]\n    end\n\n    return nextNum\nend",
            "gen_tc": "",
            "sim_score": "0.5897"
        },
        {
            "id": "229",
            "prompt": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
            "draft_plan": "# Create two empty lists, one for negative elements and one for positive elements\n\n# Iterate through the first n elements of the array\n    # Check if the element is negative\n        # If it is, append it to the negative elements list\n    # Otherwise, append it to the positive elements list\n\n# Concatenate the negative elements list with the positive elements list\n# Return the resulting list",
            "requirements": "",
            "final_plan": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr",
            "code": "function rearrangeArray(arr, n)\n    local negativeElements = {}\n    local positiveElements = {}\n\n    for i = 1, n do\n        if arr[i] < 0 then\n            table.insert(negativeElements, arr[i])\n        else\n            table.insert(positiveElements, arr[i])\n        end\n    end\n\n    for i = 1, #positiveElements do\n        table.insert(negativeElements, positiveElements[i])\n    end\n\n    return negativeElements\nend",
            "gen_tc": "",
            "sim_score": "0.5680"
        },
        {
            "id": "428",
            "prompt": "Write a function to sort the given array by using shell sort.",
            "draft_plan": "# Define a function to perform shell sort on the given array\n    # Start with a large gap (length of array divided by 2)\n    # Iterate until the gap becomes 0\n        # Iterate through the array from the current gap to the end\n            # Compare the current element with the element at the position gap steps before it\n            # If the current element is smaller, swap them\n        # Reduce the gap by dividing it by 2\n\n# Call the shell sort function on the given array\n# Return the sorted array",
            "requirements": "",
            "final_plan": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list",
            "code": "function shellSort(arr)\n    local n = #arr\n    local gap = math.floor(n / 2)\n    \n    while gap > 0 do\n        for i = gap + 1, n do\n            local temp = arr[i]\n            local j = i\n            \n            while j > gap and arr[j - gap] > temp do\n                arr[j] = arr[j - gap]\n                j = j - gap\n            end\n            \n            arr[j] = temp\n        end\n        \n        gap = math.floor(gap / 2)\n    end\n    \n    return arr\nend\n\n-- Test the function\nlocal arr = {9, 5, 2, 7, 1, 3}\nlocal sortedArr = shellSort(arr)\nfor i = 1, #sortedArr do\n    print(sortedArr[i])\nend",
            "gen_tc": "",
            "sim_score": "0.5605"
        },
        {
            "id": "232",
            "prompt": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.",
            "draft_plan": "# Sort the list in descending order\n# Return the first n items from the sorted list",
            "requirements": "",
            "final_plan": "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest",
            "code": "function get_n_largest_items(lst, n)\n    table.sort(lst, function(a, b) return a > b end)\n    return {table.unpack(lst, 1, n)}\nend",
            "gen_tc": "",
            "sim_score": "0.5495"
        },
        {
            "id": "443",
            "prompt": "Write a python function to find the largest negative number from the given list.",
            "draft_plan": "# Initialize a variable 'largest_negative' to None\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If 'largest_negative' is None or the current number is greater than 'largest_negative', update 'largest_negative' to the current number\n\n# Return 'largest_negative'",
            "requirements": "",
            "final_plan": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
            "code": "function find_largest_negative(numbers)\n    local largest_negative = nil\n\n    for _, number in ipairs(numbers) do\n        if number < 0 then\n            if largest_negative == nil or number > largest_negative then\n                largest_negative = number\n            end\n        end\n    end\n\n    return largest_negative\nend",
            "gen_tc": "",
            "sim_score": "0.5439"
        },
        {
            "id": "94",
            "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
            "draft_plan": "# Initialize the minimum second value as positive infinity\n# Initialize the first value of the tuple with minimum second value as None\n\n# Iterate through each tuple in the list\n    # Check if the second value of the current tuple is smaller than the current minimum second value\n        # If yes, update the minimum second value and the first value of the tuple\n\n# Return the first value of the tuple with the smallest second value",
            "requirements": "",
            "final_plan": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ",
            "code": "function get_first_smallest_value(test_list)\n    local min_second = math.huge\n    local first_value = nil\n    \n    for _, tup in ipairs(test_list) do\n        local second_value = tup[2]\n        \n        if second_value < min_second then\n            min_second = second_value\n            first_value = tup[1]\n        end\n    end\n    \n    return first_value\nend",
            "gen_tc": "",
            "sim_score": "0.5270"
        },
        {
            "id": "251",
            "prompt": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.",
            "draft_plan": "# Initialize an empty list to store the modified elements\n# Iterate through each element in the original list\n    # Add the given element to the modified list\n    # Add the current element from the original list to the modified list\n\n# Return the modified list",
            "requirements": "",
            "final_plan": "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list",
            "code": "function insert_before_each(lst, element)\n    local modified_lst = {}\n\n    for _, item in ipairs(lst) do\n        table.insert(modified_lst, element)\n        table.insert(modified_lst, item)\n    end\n\n    return modified_lst\nend",
            "gen_tc": "",
            "sim_score": "0.5246"
        }
    ],
    "HumanEval/71": [
        {
            "id": "293",
            "prompt": "Write a function to find the third side of a right angled triangle.",
            "draft_plan": "# Import the math module\n\n# Define a function to find the third side of a right-angled triangle\n    # Calculate the square of the two given sides\n    # Calculate the sum of the squares of the two given sides\n    # Take the square root of the sum to find the length of the hypotenuse\n    # Return the length of the hypotenuse\n\n# Call the function with the given sides of the triangle and print the result",
            "requirements": "",
            "final_plan": "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s",
            "code": "function findThirdSide(a, b)\n    local c = math.sqrt(a^2 + b^2)\n    return c\nend\n\nlocal a = 3\nlocal b = 4\n\nlocal c = findThirdSide(a, b)\nprint(\"The length of the hypotenuse is: \" .. c)",
            "gen_tc": "",
            "sim_score": "0.6483"
        },
        {
            "id": "14",
            "prompt": "Write a python function to find the volume of a triangular prism.",
            "draft_plan": "# Define a function to calculate the volume of a triangular prism\n    # Accept the base length, base width, and height of the prism as input parameters\n    # Calculate the area of the base triangle by multiplying the base length and base width, and dividing by 2\n    # Calculate the volume by multiplying the area of the base triangle by the height of the prism\n    # Return the calculated volume\n\n# Example usage:\n# volume = calculate_volume_of_triangular_prism(5, 6, 10)",
            "requirements": "",
            "final_plan": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ",
            "code": "function calculate_volume_of_triangular_prism(base_length, base_width, height)\n    local base_area = (base_length * base_width) / 2\n    local volume = base_area * height\n    return volume\nend\n\n-- Example usage\nlocal volume = calculate_volume_of_triangular_prism(5, 6, 10)\nprint(volume)",
            "gen_tc": "",
            "sim_score": "0.6262"
        },
        {
            "id": "163",
            "prompt": "Write a function to calculate the area of a regular polygon given the length and number of its sides.",
            "draft_plan": "# Import the math module for trigonometric functions\nimport math\n\n# Define a function to calculate the area of a regular polygon\ndef calculate_area(length, sides):\n    # Calculate the apothem (distance from center to midpoint of a side)\n    apothem = length / (2 * math.tan(math.pi / sides))\n    \n    # Calculate the area using the formula: area = (1/2) * apothem * perimeter\n    perimeter = length * sides\n    area = (1 / 2) * apothem * perimeter\n    \n    return area",
            "requirements": "",
            "final_plan": "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area",
            "code": "-- Define a function to calculate the area of a regular polygon\nfunction calculate_area(length, sides)\n    -- Calculate the apothem (distance from center to midpoint of a side)\n    local apothem = length / (2 * math.tan(math.pi / sides))\n    \n    -- Calculate the area using the formula: area = (1/2) * apothem * perimeter\n    local perimeter = length * sides\n    local area = (1 / 2) * apothem * perimeter\n    \n    return area\nend",
            "gen_tc": "",
            "sim_score": "0.6020"
        },
        {
            "id": "458",
            "prompt": "Write a function to find the area of a rectangle.",
            "draft_plan": "To find the area of a rectangle, we need the length and width of the rectangle. The formula to calculate the area of a rectangle is:\n\nArea = length * width\n\nHere is the code logic to find the area of a rectangle:\n\n1. Define a function named `calculate_area` that takes two parameters, `length` and `width`.\n2. Inside the function, calculate the area by multiplying the `length` and `width` parameters.\n3. Return the calculated area from the function.\n\nHere is the code implementation in Python:\n\n```python\ndef calculate_area(length, width):\n    area = length * width\n    return area\n\n# Example usage:\nlength = 5\nwidth = 3\narea = calculate_area(length, width)\nprint(\"The area of the rectangle is:\", area)\n```\n\nThis will output:\n```\nThe area of the rectangle is: 15\n```\n\nYou can replace the values of `length` and `width` with your own values to find the area of a different rectangle.",
            "requirements": "",
            "final_plan": "def rectangle_area(l,b):\n  area=l*b\n  return area",
            "code": "function calculate_area(length, width)\n    local area = length * width\n    return area\nend\n\n-- Example usage:\nlocal length = 5\nlocal width = 3\nlocal area = calculate_area(length, width)\nprint(\"The area of the rectangle is:\", area)",
            "gen_tc": "",
            "sim_score": "0.5773"
        },
        {
            "id": "441",
            "prompt": "Write a function to find the surface area of a cube of a given size.",
            "draft_plan": "To find the surface area of a cube, we can use the formula: surface_area = 6 * side_length^2\n\nHere is the code logic to find the surface area of a cube in Python:\n\n1. Define a function named `calculate_cube_surface_area` that takes a parameter `side_length`.\n2. Calculate the surface area using the formula `surface_area = 6 * side_length^2`.\n3. Return the calculated surface area.\n\nHere is the code implementation:\n\n```python\ndef calculate_cube_surface_area(side_length):\n    surface_area = 6 * side_length**2\n    return surface_area\n```\n\nYou can call this function with the desired `side_length` value to get the surface area of the cube.",
            "requirements": "",
            "final_plan": "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea",
            "code": "function calculate_cube_surface_area(side_length)\n    local surface_area = 6 * side_length^2\n    return surface_area\nend",
            "gen_tc": "",
            "sim_score": "0.5512"
        },
        {
            "id": "171",
            "prompt": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
            "draft_plan": "# Calculate the perimeter of a regular pentagon using the formula:\n    # perimeter = 5 * side_length\n\n# Return the calculated perimeter",
            "requirements": "",
            "final_plan": "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter",
            "code": "function calculate_perimeter(side_length)\n    local perimeter = 5 * side_length\n    return perimeter\nend",
            "gen_tc": "",
            "sim_score": "0.4757"
        },
        {
            "id": "85",
            "prompt": "Write a function to find the surface area of a sphere.",
            "draft_plan": "import math\n\ndef surface_area_of_sphere(radius):\n    # Calculate the surface area of a sphere using the formula: 4\u03c0r^2\n    surface_area = 4 * math.pi * radius**2\n    \n    return surface_area",
            "requirements": "",
            "final_plan": "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea",
            "code": "function surface_area_of_sphere(radius)\n    -- Calculate the surface area of a sphere using the formula: 4\u03c0r^2\n    local surface_area = 4 * math.pi * radius^2\n    \n    return surface_area\nend",
            "gen_tc": "",
            "sim_score": "0.4537"
        },
        {
            "id": "17",
            "prompt": "Write a function that returns the perimeter of a square given its side length as input.",
            "draft_plan": "# Define a function named \"square_perimeter\" that takes a parameter \"side_length\"\n    # Calculate the perimeter of the square by multiplying the side length by 4\n    # Return the perimeter\n\n# Call the function with a test value for the side length to verify the result",
            "requirements": "",
            "final_plan": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter",
            "code": "function square_perimeter(side_length)\n    local perimeter = side_length * 4\n    return perimeter\nend\n\n-- Test the function\nlocal side_length = 5\nlocal perimeter = square_perimeter(side_length)\nprint(perimeter)  -- Output: 20",
            "gen_tc": "",
            "sim_score": "0.4537"
        },
        {
            "id": "59",
            "prompt": "Write a function to find the nth octagonal number.",
            "draft_plan": "# Function to find the nth octagonal number\ndef find_octagonal_number(n):\n    # Calculate the nth octagonal number using the formula\n    octagonal_number = 3 * n * (n - 1) + 1\n    \n    # Return the result\n    return octagonal_number\n\n# Test the function\nn = 5\nresult = find_octagonal_number(n)\nprint(f\"The {n}th octagonal number is: {result}\")",
            "requirements": "",
            "final_plan": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ",
            "code": "-- Function to find the nth octagonal number\nfunction find_octagonal_number(n)\n    -- Calculate the nth octagonal number using the formula\n    local octagonal_number = 3 * n * (n - 1) + 1\n    \n    -- Return the result\n    return octagonal_number\nend\n\n-- Test the function\nlocal n = 5\nlocal result = find_octagonal_number(n)\nprint(\"The \"..n..\"th octagonal number is: \"..result)",
            "gen_tc": "",
            "sim_score": "0.4264"
        },
        {
            "id": "234",
            "prompt": "Write a function to find the volume of a cube given its side length.",
            "draft_plan": "# Define a function to calculate the volume of a cube\n    # Accept a parameter for the side length of the cube\n    # Calculate the volume using the formula V = side_length^3\n    # Return the calculated volume",
            "requirements": "",
            "final_plan": "def volume_cube(l):\n  volume = l * l * l\n  return volume",
            "code": "function calculate_cube_volume(side_length)\n    local volume = side_length^3\n    return volume\nend",
            "gen_tc": "",
            "sim_score": "0.4207"
        }
    ],
    "HumanEval/72": [
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.5083"
        },
        {
            "id": "406",
            "prompt": "Write a python function to find whether the parity of a given number is odd.",
            "draft_plan": "# Check if the number modulo 2 is equal to 1\n    # If the modulo is 1, the number is odd\n    # Return True\n\n# If the modulo is not 1, the number is even\n# Return False",
            "requirements": "",
            "final_plan": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False",
            "code": "function is_odd_parity(number)\n    return number % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.4821"
        },
        {
            "id": "56",
            "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
            "draft_plan": "# Convert the given number to a string and reverse it\n# Convert the reversed string back to an integer\n# Check if the given number is equal to twice the reversed number plus 1\n# If the condition is true, return True. Otherwise, return False.",
            "requirements": "",
            "final_plan": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
            "code": "function is_one_less_twice_reverse(number)\n    local reverse = tonumber(string.reverse(tostring(number)))\n    if number == (2 * reverse + 1) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4818"
        },
        {
            "id": "100",
            "prompt": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
            "draft_plan": "# Define a helper function to check if a number is palindrome\n    # Convert the number to a string\n    # Check if the string is equal to its reversed string representation\n\n# Start a loop from the next number after the specified integer\n    # Check if the current number is a palindrome\n        # If yes, return the current number\n\n# If no palindrome is found in the loop, return None",
            "requirements": "",
            "final_plan": "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i",
            "code": "function isPalindrome(num)\n    local str = tostring(num)\n    return str == string.reverse(str)\nend\n\nfunction nextSmallestPalindrome(num)\n    num = num + 1\n\n    while true do\n        if isPalindrome(num) then\n            return num\n        end\n        num = num + 1\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.4746"
        },
        {
            "id": "20",
            "prompt": "Write a function to check if the given number is woodball or not.",
            "draft_plan": "# Check if the given number is less than or equal to 1\n    # If it is, return False as woodball numbers must be greater than 1\n\n# Initialize a variable to keep track of the previous number in the sequence\n# Start a loop from 2 to the square root of the given number\n    # Check if the given number is divisible by the current loop variable\n        # If it is, check if the current loop variable is equal to the previous number plus 1\n            # If it is, update the previous number to the current loop variable\n            # If it is not, return False as the sequence is broken\n\n# If the loop completes without returning False, return True as the given number is a woodball number",
            "requirements": "",
            "final_plan": "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False",
            "code": "function isWoodballNumber(number)\n    if number <= 1 then\n        return false\n    end\n\n    local previousNumber = 1\n\n    for i = 2, math.sqrt(number) do\n        if number % i == 0 then\n            if i == previousNumber + 1 then\n                previousNumber = i\n            else\n                return false\n            end\n        end\n    end\n\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.4566"
        },
        {
            "id": "138",
            "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
            "draft_plan": "# Initialize a variable 'n' with the given number\n\n# Iterate while 'n' is greater than 0\n    # Check if 'n' is divisible by 2\n        # If 'n' is divisible by 2, divide 'n' by 2\n        # Otherwise, subtract the largest power of 2 less than 'n' from 'n'\n\n# If 'n' becomes 0, return True\n# Otherwise, return False",
            "requirements": "",
            "final_plan": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True",
            "code": "function canRepresentAsPowerOf2(n)\n    while n > 0 do\n        if n % 2 == 0 then\n            n = n / 2\n        else\n            n = n - math.pow(2, math.floor(math.log(n, 2)))\n        end\n    end\n    \n    return n == 0\nend",
            "gen_tc": "",
            "sim_score": "0.4515"
        },
        {
            "id": "284",
            "prompt": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
            "draft_plan": "# Iterate through each item in the list\n    # Check if the current item is equal to the given element\n        # If not, return False\n\n# If all items in the list are equal to the given element, return True",
            "requirements": "",
            "final_plan": "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element",
            "code": "function check_all_equal(lst, elem)\n    for _, item in ipairs(lst) do\n        if item ~= elem then\n            return false\n        end\n    end\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.4505"
        },
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.4493"
        },
        {
            "id": "247",
            "prompt": "Write a function to find the length of the longest palindromic subsequence in the given string.",
            "draft_plan": "# Create a 2D array of size n x n, where n is the length of the input string\n# Fill the diagonal with 1, as each character is a palindrome of length 1\n\n# Iterate through the remaining elements of the array in a bottom-up manner\n    # If the characters at the current indices match\n        # Set the value of the current cell as 2 plus the value in the cell diagonally below and to the right (i+1, j+1)\n    # Otherwise, set the value of the current cell as the maximum of the value in the cell to the left (i, j-1) and the value in the cell below (i+1, j)\n\n# Return the value in the top-right cell of the array, which represents the length of the longest palindromic subsequence",
            "requirements": "",
            "final_plan": "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]",
            "code": "function longestPalindromicSubsequence(str)\n    local n = string.len(str)\n    local dp = {}\n    \n    -- Initialize diagonal with 1\n    for i = 1, n do\n        dp[i] = {}\n        dp[i][i] = 1\n    end\n    \n    -- Fill the array in a bottom-up manner\n    for i = n-1, 1, -1 do\n        for j = i+1, n do\n            if string.sub(str, i, i) == string.sub(str, j, j) then\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else\n                dp[i][j] = math.max(dp[i][j-1], dp[i+1][j])\n            end\n        end\n    end\n    \n    return dp[1][n]\nend",
            "gen_tc": "",
            "sim_score": "0.4488"
        },
        {
            "id": "77",
            "prompt": "Write a python function to find whether a number is divisible by 11.",
            "draft_plan": "To determine whether a number is divisible by 11, we can use the following logic:\n\n1. Convert the number to a string.\n2. Iterate through the digits of the number.\n3. Add the digits in odd positions (starting from the rightmost digit) and subtract the sum of the digits in even positions.\n4. If the result is divisible by 11, the original number is also divisible by 11.\n\nHere is the code implementing this logic:\n\n```python\ndef is_divisible_by_11(number):\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Iterate through the digits of the number\n    sum_odd = 0\n    sum_even = 0\n    for i in range(len(number_str)):\n        digit = int(number_str[i])\n        \n        # Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0:\n            sum_odd += digit\n        else:\n            sum_even += digit\n    \n    # Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0:\n        return True\n    else:\n        return False\n```\n\nYou can use this function to check if a number is divisible by 11. For example:\n\n```python\nprint(is_divisible_by_11(121))  # Output: True\nprint(is_divisible_by_11(123))  # Output: False\n```",
            "requirements": "",
            "final_plan": "def is_Diff(n): \n    return (n % 11 == 0) ",
            "code": "function is_divisible_by_11(number)\n    -- Convert the number to a string\n    local number_str = tostring(number)\n    \n    -- Iterate through the digits of the number\n    local sum_odd = 0\n    local sum_even = 0\n    for i = 1, string.len(number_str) do\n        local digit = tonumber(string.sub(number_str, i, i))\n        \n        -- Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0 then\n            sum_even = sum_even + digit\n        else\n            sum_odd = sum_odd + digit\n        end\n    end\n    \n    -- Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0 then\n        return true\n    else\n        return false\n    end\nend\n\nprint(is_divisible_by_11(121))  -- Output: true\nprint(is_divisible_by_11(123))  -- Output: false",
            "gen_tc": "",
            "sim_score": "0.4361"
        }
    ],
    "HumanEval/73": [
        {
            "id": "100",
            "prompt": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
            "draft_plan": "# Define a helper function to check if a number is palindrome\n    # Convert the number to a string\n    # Check if the string is equal to its reversed string representation\n\n# Start a loop from the next number after the specified integer\n    # Check if the current number is a palindrome\n        # If yes, return the current number\n\n# If no palindrome is found in the loop, return None",
            "requirements": "",
            "final_plan": "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i",
            "code": "function isPalindrome(num)\n    local str = tostring(num)\n    return str == string.reverse(str)\nend\n\nfunction nextSmallestPalindrome(num)\n    num = num + 1\n\n    while true do\n        if isPalindrome(num) then\n            return num\n        end\n        num = num + 1\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.6791"
        },
        {
            "id": "247",
            "prompt": "Write a function to find the length of the longest palindromic subsequence in the given string.",
            "draft_plan": "# Create a 2D array of size n x n, where n is the length of the input string\n# Fill the diagonal with 1, as each character is a palindrome of length 1\n\n# Iterate through the remaining elements of the array in a bottom-up manner\n    # If the characters at the current indices match\n        # Set the value of the current cell as 2 plus the value in the cell diagonally below and to the right (i+1, j+1)\n    # Otherwise, set the value of the current cell as the maximum of the value in the cell to the left (i, j-1) and the value in the cell below (i+1, j)\n\n# Return the value in the top-right cell of the array, which represents the length of the longest palindromic subsequence",
            "requirements": "",
            "final_plan": "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]",
            "code": "function longestPalindromicSubsequence(str)\n    local n = string.len(str)\n    local dp = {}\n    \n    -- Initialize diagonal with 1\n    for i = 1, n do\n        dp[i] = {}\n        dp[i][i] = 1\n    end\n    \n    -- Fill the array in a bottom-up manner\n    for i = n-1, 1, -1 do\n        for j = i+1, n do\n            if string.sub(str, i, i) == string.sub(str, j, j) then\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else\n                dp[i][j] = math.max(dp[i][j-1], dp[i+1][j])\n            end\n        end\n    end\n    \n    return dp[1][n]\nend",
            "gen_tc": "",
            "sim_score": "0.5994"
        },
        {
            "id": "145",
            "prompt": "Write a python function to find the maximum difference between any two elements in a given array.",
            "draft_plan": "# If the array is empty, return None\n# Initialize the maximum difference to zero\n\n# Iterate through each element in the array\n    # Iterate through each element after the current element\n        # Calculate the difference between the current element and the subsequent element\n        # Update the maximum difference if the calculated difference is greater than the current maximum difference\n\n# Return the maximum difference",
            "requirements": "",
            "final_plan": "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ",
            "code": "function max_difference(arr)\n    if #arr == 0 then\n        return nil\n    end\n\n    local max_diff = 0\n\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            local diff = math.abs(arr[i] - arr[j])\n            if diff > max_diff then\n                max_diff = diff\n            end\n        end\n    end\n\n    return max_diff\nend",
            "gen_tc": "",
            "sim_score": "0.4990"
        },
        {
            "id": "229",
            "prompt": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
            "draft_plan": "# Create two empty lists, one for negative elements and one for positive elements\n\n# Iterate through the first n elements of the array\n    # Check if the element is negative\n        # If it is, append it to the negative elements list\n    # Otherwise, append it to the positive elements list\n\n# Concatenate the negative elements list with the positive elements list\n# Return the resulting list",
            "requirements": "",
            "final_plan": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr",
            "code": "function rearrangeArray(arr, n)\n    local negativeElements = {}\n    local positiveElements = {}\n\n    for i = 1, n do\n        if arr[i] < 0 then\n            table.insert(negativeElements, arr[i])\n        else\n            table.insert(positiveElements, arr[i])\n        end\n    end\n\n    for i = 1, #positiveElements do\n        table.insert(negativeElements, positiveElements[i])\n    end\n\n    return negativeElements\nend",
            "gen_tc": "",
            "sim_score": "0.4962"
        },
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.4901"
        },
        {
            "id": "296",
            "prompt": "Write a python function to count inversions in an array.",
            "draft_plan": "# Initialize a variable to count the number of inversions\n# Iterate through each element in the array\n    # For each element, iterate through the remaining elements\n        # Check if the current element is greater than any of the remaining elements\n            # If so, increment the inversion count\n\n# Return the inversion count",
            "requirements": "",
            "final_plan": "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count ",
            "code": "function count_inversions(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i+1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend",
            "gen_tc": "",
            "sim_score": "0.4744"
        },
        {
            "id": "131",
            "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
            "draft_plan": "# Create a list of vowels (including both lowercase and uppercase)\n# Convert the input string into a list of characters\n\n# Initialize two pointers: one at the start of the string and one at the end\n# Iterate while the pointers don't overlap\n    # Check if the character at the start pointer is a vowel\n        # If it is, then check if the character at the end pointer is also a vowel\n            # If it is, swap the characters at the start and end pointers\n            # Move the start pointer to the next character\n            # Move the end pointer to the previous character\n        # If the character at the end pointer is not a vowel, move the end pointer to the previous character\n    \n# Convert the modified list of characters back into a string and return it",
            "requirements": "",
            "final_plan": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string",
            "code": "function reverse_vowels(str)\n    local vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }\n    local chars = {}\n    for i = 1, string.len(str) do\n        table.insert(chars, string.sub(str, i, i))\n    end\n    \n    local start = 1\n    local finish = string.len(str)\n    \n    while start < finish do\n        if is_vowel(chars[start], vowels) then\n            while not is_vowel(chars[finish], vowels) and finish > start do\n                finish = finish - 1\n            end\n            if finish > start then\n                chars[start], chars[finish] = chars[finish], chars[start]\n                start = start + 1\n                finish = finish - 1\n            end\n        else\n            start = start + 1\n        end\n    end\n    \n    return table.concat(chars)\nend\n\nfunction is_vowel(char, vowels)\n    for _, vowel in ipairs(vowels) do\n        if char == vowel then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4516"
        },
        {
            "id": "407",
            "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.",
            "draft_plan": "# Convert the given number to a list of digits\n\n# Find the first index (from right to left) where the digit is smaller than the digit to its right\n    # If no such index is found, return \"None\" since the number is already the largest possible\n\n# Find the smallest digit to the right of the found index that is larger than the digit at the found index\n\n# Swap the found digit with the smallest larger digit to its right\n\n# Sort the digits to the right of the found index in ascending order\n\n# Concatenate the digits to form the next bigger number\n\n# Return the next bigger number",
            "requirements": "",
            "final_plan": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False",
            "code": "function nextBiggerNumber(num)\n    -- Convert the number to a list of digits\n    local digits = {}\n    local n = num\n    while n > 0 do\n        table.insert(digits, 1, n % 10)\n        n = math.floor(n / 10)\n    end\n\n    -- Find the first index where the digit is smaller than the digit to its right\n    local i = #digits - 1\n    while i >= 1 and digits[i] >= digits[i+1] do\n        i = i - 1\n    end\n\n    -- If no such index is found, return \"None\"\n    if i < 1 then\n        return \"None\"\n    end\n\n    -- Find the smallest larger digit to the right of the found index\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n\n    -- Swap the found digit with the smallest larger digit to its right\n    digits[i], digits[j] = digits[j], digits[i]\n\n    -- Sort the digits to the right of the found index in ascending order\n    for k = i+1, #digits do\n        for l = k+1, #digits do\n            if digits[k] > digits[l] then\n                digits[k], digits[l] = digits[l], digits[k]\n            end\n        end\n    end\n\n    -- Concatenate the digits to form the next bigger number\n    local nextNum = 0\n    for k = 1, #digits do\n        nextNum = nextNum * 10 + digits[k]\n    end\n\n    return nextNum\nend",
            "gen_tc": "",
            "sim_score": "0.4472"
        },
        {
            "id": "89",
            "prompt": "Write a function to find the closest smaller number than n.",
            "draft_plan": "# Initialize a variable to store the closest smaller number\n# Iterate from n-1 to 1 in descending order\n    # Check if the current number is smaller than n\n        # If yes, update the closest smaller number and break the loop\n\n# Return the closest smaller number",
            "requirements": "",
            "final_plan": "def closest_num(N):\n  return (N - 1)",
            "code": "function findClosestSmallerNumber(n)\n    local closestSmaller = nil\n\n    for i = n-1, 1, -1 do\n        if i < n then\n            closestSmaller = i\n            break\n        end\n    end\n\n    return closestSmaller\nend",
            "gen_tc": "",
            "sim_score": "0.4448"
        },
        {
            "id": "95",
            "prompt": "Write a python function to find the length of the smallest list in a list of lists.",
            "draft_plan": "# Initialize the minimum length to a large number\n\n# Iterate through each list in the input list\n    # Check the length of the current list\n        # If the length is smaller than the current minimum length, update the minimum length\n\n# Return the minimum length",
            "requirements": "",
            "final_plan": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength ",
            "code": "function find_smallest_list_length(list_of_lists)\n    local min_length = math.huge\n\n    for _, list in ipairs(list_of_lists) do\n        local length = #list\n        if length < min_length then\n            min_length = length\n        end\n    end\n\n    return min_length\nend",
            "gen_tc": "",
            "sim_score": "0.4438"
        }
    ],
    "HumanEval/74": [
        {
            "id": "61",
            "prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of substrings\n\n# Iterate through each starting index of the substring\n    # Iterate through each ending index of the substring\n        # Get the substring from the starting index to the ending index\n        # Compute the sum of the digits in the substring\n        # Check if the sum of the digits is equal to the length of the substring\n            # If true, increment the counter variable\n\n# Return the counter variable with the total number of substrings",
            "requirements": "",
            "final_plan": "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count",
            "code": "function count_substrings(string)\n    local count = 0\n\n    for i = 1, string.len(string) do\n        for j = i, string.len(string) do\n            local substring = string.sub(string, i, j)\n            local sum = compute_sum(substring)\n            \n            if sum == string.len(substring) then\n                count = count + 1\n            end\n        end\n    end\n\n    return count\nend\n\nfunction compute_sum(substring)\n    local sum = 0\n\n    for i = 1, string.len(substring) do\n        local digit = tonumber(string.sub(substring, i, i))\n        sum = sum + digit\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5509"
        },
        {
            "id": "431",
            "prompt": "Write a function that takes two lists and returns true if they have at least one common element.",
            "draft_plan": "# Iterate through each element in the first list\n    # Check if the current element is in the second list\n        # If found, return True\n\n# If no common element is found, return False",
            "requirements": "",
            "final_plan": "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result",
            "code": "function have_common_element(list1, list2)\n    for _, element1 in ipairs(list1) do\n        for _, element2 in ipairs(list2) do\n            if element1 == element2 then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5504"
        },
        {
            "id": "128",
            "prompt": "Write a function to find words that are longer than n characters from a given list of words.",
            "draft_plan": "# Create an empty list to store the result\n\n# Iterate through each word in the given list\n    # Check if the length of the current word is greater than n\n        # If the condition is satisfied, append the word to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t",
            "code": "function find_longer_words(word_list, n)\n    local result = {}\n\n    for _, word in ipairs(word_list) do\n        if string.len(word) > n then\n            table.insert(result, word)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5357"
        },
        {
            "id": "18",
            "prompt": "Write a function to remove characters from the first string which are present in the second string.",
            "draft_plan": "# Convert the second string into a set for efficient lookup\n\n# Initialize an empty string to store the result\n\n# Iterate through each character in the first string\n    # Check if the character is not present in the second string\n        # Append the character to the result string\n\n# Return the result string",
            "requirements": "",
            "final_plan": "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) ",
            "code": "function removeChars(str1, str2)\n    local charsSet = {}\n    local result = \"\"\n\n    for i = 1, string.len(str2) do\n        charsSet[string.sub(str2, i, i)] = true\n    end\n\n    for i = 1, string.len(str1) do\n        local char = string.sub(str1, i, i)\n        if not charsSet[char] then\n            result = result .. char\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5140"
        },
        {
            "id": "95",
            "prompt": "Write a python function to find the length of the smallest list in a list of lists.",
            "draft_plan": "# Initialize the minimum length to a large number\n\n# Iterate through each list in the input list\n    # Check the length of the current list\n        # If the length is smaller than the current minimum length, update the minimum length\n\n# Return the minimum length",
            "requirements": "",
            "final_plan": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength ",
            "code": "function find_smallest_list_length(list_of_lists)\n    local min_length = math.huge\n\n    for _, list in ipairs(list_of_lists) do\n        local length = #list\n        if length < min_length then\n            min_length = length\n        end\n    end\n\n    return min_length\nend",
            "gen_tc": "",
            "sim_score": "0.5112"
        },
        {
            "id": "69",
            "prompt": "Write a function to check whether a list contains the given sublist or not.",
            "draft_plan": "# Iterate through each index in the main list\n    # Check if the current index and the sublist length is less than or equal to the main list length\n        # Check if the sublist matches the elements starting from the current index in the main list\n\n# If the sublist is found, return True\n# Otherwise, return False",
            "requirements": "",
            "final_plan": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set",
            "code": "function contains_sublist(main_list, sublist)\n    for i = 1, #main_list do\n        if (i + #sublist - 1) <= #main_list then\n            local match = true\n            for j = 1, #sublist do\n                if main_list[i + j - 1] ~= sublist[j] then\n                    match = false\n                    break\n                end\n            end\n            if match then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5103"
        },
        {
            "id": "238",
            "prompt": "Write a python function to count the number of non-empty substrings of a given string.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each character and its index in the input string\n    # Iterate through each substring starting from the current character\n        # Increment the counter variable by 1 for each non-empty substring\n\n# Return the counter variable",
            "requirements": "",
            "final_plan": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ",
            "code": "function count_substrings(str)\n    local count = 0\n    for i = 1, #str do\n        for j = i, #str do\n            local substring = string.sub(str, i, j)\n            if substring ~= \"\" then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5007"
        },
        {
            "id": "461",
            "prompt": "Write a python function to count the upper case characters in a given string.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of uppercase characters\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter variable\n\n# Return the counter variable, which represents the number of uppercase characters in the string",
            "requirements": "",
            "final_plan": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
            "code": "function count_uppercase_chars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= 'A' and char <= 'Z' then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4960"
        },
        {
            "id": "434",
            "prompt": "Write a function that matches a string that has an a followed by one or more b's.",
            "draft_plan": "import re\n\ndef match_string(string):\n    pattern = r'a+b+'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n",
            "code": "function match_string(str)\n    local pattern = \"a+b+\"\n    if string.match(str, pattern) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4920"
        },
        {
            "id": "250",
            "prompt": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the tuple\n    # Check if the current element is equal to the target element\n        # If it is, increment the counter by 1\n\n# Return the value of the counter variable",
            "requirements": "",
            "final_plan": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ",
            "code": "function count_occurrences(t, element)\n    local count = 0\n    \n    for i = 1, #t do\n        if t[i] == element then\n            count = count + 1\n        end\n    end\n    \n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4915"
        }
    ],
    "HumanEval/75": [
        {
            "id": "256",
            "prompt": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
            "draft_plan": "# Define a function to check if a number is prime\n    # Check if the number is less than 2, return False\n    # Iterate from 2 to the square root of the number\n        # Check if the number is divisible by any number in the range\n            # If divisible, return False\n    # If the number is not divisible by any number in the range, return True\n\n# Define a function to count the number of primes less than a given number\n    # Initialize a count variable to 0\n    # Iterate from 2 to the given number\n        # Check if the current number is prime\n            # If prime, increment the count\n    # Return the count",
            "requirements": "",
            "final_plan": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr",
            "code": "function isPrime(n)\n    if n < 2 then\n        return false\n    end\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            return false\n        end\n    end\n    return true\nend\n\nfunction countPrimes(n)\n    local count = 0\n    for i = 2, n - 1 do\n        if isPrime(i) then\n            count = count + 1\n        end\n    end\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.6698"
        },
        {
            "id": "96",
            "prompt": "Write a python function to find the number of divisors of a given integer.",
            "draft_plan": "# Initialize a count variable to 0\n\n# Iterate through each number from 1 to the given integer\n    # Check if the current number is a divisor of the given integer\n        # If yes, increment the count variable\n\n# Return the count variable",
            "requirements": "",
            "final_plan": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x",
            "code": "function countDivisors(num)\n    local count = 0\n\n    for i = 1, num do\n        if num % i == 0 then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5812"
        },
        {
            "id": "98",
            "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
            "draft_plan": "# Initialize the product variable to 1\n\n# Iterate through each number in the list\n    # Multiply the product by the current number\n\n# Divide the product by the length of the list\n\n# Return the result",
            "requirements": "",
            "final_plan": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ",
            "code": "function multiply_and_divide(numbers)\n    local product = 1\n\n    for _, num in ipairs(numbers) do\n        product = product * num\n    end\n\n    local result = product / #numbers\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5703"
        },
        {
            "id": "126",
            "prompt": "Write a python function to find the sum of common divisors of two given numbers.",
            "draft_plan": "# Find the common divisors of the two given numbers\n    # Find the smaller number among the two\n    # Initialize an empty list to store the common divisors\n    # Iterate from 1 to the smaller number\n        # Check if the current number is a divisor of both given numbers\n            # If yes, add it to the list of common divisors\n\n# Find the sum of the common divisors\n    # Initialize a variable to store the sum\n    # Iterate through the list of common divisors\n        # Add each divisor to the sum\n\n# Return the sum of the common divisors",
            "requirements": "",
            "final_plan": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum",
            "code": "function sumCommonDivisors(a, b)\n    local smaller = math.min(a, b)\n    local divisors = {}\n\n    for i = 1, smaller do\n        if a % i == 0 and b % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n\n    local sum = 0\n    for _, divisor in ipairs(divisors) do\n        sum = sum + divisor\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5659"
        },
        {
            "id": "164",
            "prompt": "Write a function to determine if the sum of the divisors of two integers are the same.",
            "draft_plan": "# Define a function to calculate the sum of divisors for a given number\n    # Initialize the sum to 0\n    # Iterate through each number from 1 to the given number\n        # Check if the current number is a divisor of the given number\n            # If it is, add it to the sum\n\n# Define a function to determine if the sum of divisors for two numbers are the same\n    # Calculate the sum of divisors for both numbers\n    # Check if the sums are equal\n        # If they are, return True\n        # Otherwise, return False",
            "requirements": "",
            "final_plan": "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); ",
            "code": "function sumOfDivisors(n)\n    local sum = 0\n    for i = 1, n do\n        if n % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\n\nfunction sameSumOfDivisors(num1, num2)\n    local sum1 = sumOfDivisors(num1)\n    local sum2 = sumOfDivisors(num2)\n    return sum1 == sum2\nend",
            "gen_tc": "",
            "sim_score": "0.5417"
        },
        {
            "id": "127",
            "prompt": "Write a function to multiply two integers.",
            "draft_plan": "# Initialize the result to 0\n\n# If either of the integers is 0, return 0\n\n# If both integers are negative, convert them to positive\n    # Multiply the positive integers and change the sign of the result to negative\n\n# If only one integer is negative, convert it to positive\n    # Multiply the positive integers and change the sign of the result to negative\n\n# If both integers are positive, multiply them normally\n\n# Return the result",
            "requirements": "",
            "final_plan": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)",
            "code": "function multiply(a, b)\n    local result = 0\n    \n    if a == 0 or b == 0 then\n        return 0\n    end\n    \n    if a < 0 and b < 0 then\n        a = -a\n        b = -b\n    elseif a < 0 then\n        a = -a\n        result = -result\n    elseif b < 0 then\n        b = -b\n        result = -result\n    end\n    \n    while b > 0 do\n        if b % 2 == 1 then\n            result = result + a\n        end\n        a = a * 2\n        b = math.floor(b / 2)\n    end\n    \n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5219"
        },
        {
            "id": "295",
            "prompt": "Write a function to return the sum of all divisors of a number.",
            "draft_plan": "# Initialize the sum of divisors to 0\n\n# Iterate from 1 to the given number\n    # Check if the current number is a divisor of the given number\n        # If it is, add it to the sum of divisors\n\n# Return the sum of divisors",
            "requirements": "",
            "final_plan": "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)",
            "code": "function sum_of_divisors(num)\n    local sum = 0\n\n    for i = 1, num do\n        if num % i == 0 then\n            sum = sum + i\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5039"
        },
        {
            "id": "471",
            "prompt": "Write a python function to find the product of the array multiplication modulo n.",
            "draft_plan": "# Initialize the product to 1\n\n# Iterate through each element in the array\n    # Multiply the current element with the product\n    # Take the modulo of the product with n\n\n# Return the final product modulo n",
            "requirements": "",
            "final_plan": "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ",
            "code": "function arrayProductModuloN(arr, n)\n    local product = 1\n\n    for _, num in ipairs(arr) do\n        product = (product * num) % n\n    end\n\n    return product\nend",
            "gen_tc": "",
            "sim_score": "0.5039"
        },
        {
            "id": "56",
            "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
            "draft_plan": "# Convert the given number to a string and reverse it\n# Convert the reversed string back to an integer\n# Check if the given number is equal to twice the reversed number plus 1\n# If the condition is true, return True. Otherwise, return False.",
            "requirements": "",
            "final_plan": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
            "code": "function is_one_less_twice_reverse(number)\n    local reverse = tonumber(string.reverse(tostring(number)))\n    if number == (2 * reverse + 1) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4979"
        },
        {
            "id": "447",
            "prompt": "Write a function to find cubes of individual elements in a list.",
            "draft_plan": "# Create an empty list to store the cubes of individual elements\n# Iterate through each element in the input list\n    # Calculate the cube of the current element by raising it to the power of 3\n    # Append the cube to the result list\n\n# Return the result list containing the cubes of individual elements",
            "requirements": "",
            "final_plan": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums",
            "code": "function find_cubes(list)\n    local result = {}\n    for _, element in ipairs(list) do\n        local cube = element^3\n        table.insert(result, cube)\n    end\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4937"
        }
    ],
    "HumanEval/76": [
        {
            "id": "167",
            "prompt": "Write a python function to find the smallest power of 2 greater than or equal to n.",
            "draft_plan": "# Initialize a variable to store the smallest power of 2\n# Check if n is already a power of 2\n    # If it is, return n\n    \n# Iterate through powers of 2 starting from 2\n    # Check if the current power of 2 is greater than or equal to n\n        # If it is, return the current power of 2",
            "requirements": "",
            "final_plan": "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; ",
            "code": "function smallest_power_of_2(n)\n    local power = 1\n    \n    if is_power_of_2(n) then\n        return n\n    end\n    \n    while power < n do\n        power = power * 2\n    end\n    \n    return power\nend\n\nfunction is_power_of_2(n)\n    while n > 1 do\n        if n % 2 ~= 0 then\n            return false\n        end\n        n = n / 2\n    end\n    \n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.7342"
        },
        {
            "id": "138",
            "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
            "draft_plan": "# Initialize a variable 'n' with the given number\n\n# Iterate while 'n' is greater than 0\n    # Check if 'n' is divisible by 2\n        # If 'n' is divisible by 2, divide 'n' by 2\n        # Otherwise, subtract the largest power of 2 less than 'n' from 'n'\n\n# If 'n' becomes 0, return True\n# Otherwise, return False",
            "requirements": "",
            "final_plan": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True",
            "code": "function canRepresentAsPowerOf2(n)\n    while n > 0 do\n        if n % 2 == 0 then\n            n = n / 2\n        else\n            n = n - math.pow(2, math.floor(math.log(n, 2)))\n        end\n    end\n    \n    return n == 0\nend",
            "gen_tc": "",
            "sim_score": "0.6549"
        },
        {
            "id": "388",
            "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.",
            "draft_plan": "# Initialize the highest power of 2 to 1\n\n# While the highest power of 2 is less than or equal to n\n    # Multiply the highest power of 2 by 2\n\n# Divide the highest power of 2 by 2 to get the result",
            "requirements": "",
            "final_plan": "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res ",
            "code": "function highest_power_of_2(n)\n    local power = 1\n\n    while power * 2 <= n do\n        power = power * 2\n    end\n\n    return power\nend",
            "gen_tc": "",
            "sim_score": "0.6419"
        },
        {
            "id": "93",
            "prompt": "Write a function to calculate the value of 'a' to the power 'b'.",
            "draft_plan": "# Initialize the result variable to 1\n\n# If b is positive\n    # Iterate from 1 to b\n        # Multiply the result by a\n\n# If b is negative\n    # Iterate from 1 to abs(b)\n        # Divide the result by a\n\n# Return the result",
            "requirements": "",
            "final_plan": "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)",
            "code": "function power(a, b)\n    local result = 1\n\n    if b >= 0 then\n        for i = 1, b do\n            result = result * a\n        end\n    else\n        for i = 1, math.abs(b) do\n            result = result / a\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5822"
        },
        {
            "id": "271",
            "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
            "draft_plan": "# Initialize a variable `sum` to 0\n# Initialize a counter variable `count` to 0\n\n# Iterate through numbers starting from 1 until `count` reaches `n`\n    # Check if the current number is even\n        # Increment the `count` variable\n        # Add the current number raised to the fifth power to the `sum` variable\n\n# Return the `sum` variable",
            "requirements": "",
            "final_plan": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ",
            "code": "function sum_of_even_powers(n)\n    local sum = 0\n    local count = 0\n\n    for i = 1, math.huge do\n        if i % 2 == 0 then\n            count = count + 1\n            sum = sum + math.pow(i, 5)\n        end\n\n        if count == n then\n            break\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5808"
        },
        {
            "id": "72",
            "prompt": "Write a python function to check whether the given number can be represented as the difference of two squares or not.",
            "draft_plan": "# Iterate through all numbers from 1 to sqrt(n)\n    # Calculate the square of the current number\n    # Check if the difference between n and the square is a perfect square\n\n# If a perfect square difference is found, return True\n# If no perfect square difference is found, return False",
            "requirements": "",
            "final_plan": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False",
            "code": "function can_be_difference_of_squares(n)\n    for i = 1, math.floor(math.sqrt(n)) do\n        local square = i * i\n        local difference = n - square\n        local square_root = math.sqrt(difference)\n        if square_root == math.floor(square_root) then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5408"
        },
        {
            "id": "287",
            "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
            "draft_plan": "# Initialize the sum of squares variable to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Add the square of the current number to the sum of squares variable\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
            "code": "function sum_of_squares(n)\n    local sum = 0\n\n    for i = 1, n do\n        if i % 2 == 0 then\n            sum = sum + (i * i)\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5140"
        },
        {
            "id": "127",
            "prompt": "Write a function to multiply two integers.",
            "draft_plan": "# Initialize the result to 0\n\n# If either of the integers is 0, return 0\n\n# If both integers are negative, convert them to positive\n    # Multiply the positive integers and change the sign of the result to negative\n\n# If only one integer is negative, convert it to positive\n    # Multiply the positive integers and change the sign of the result to negative\n\n# If both integers are positive, multiply them normally\n\n# Return the result",
            "requirements": "",
            "final_plan": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)",
            "code": "function multiply(a, b)\n    local result = 0\n    \n    if a == 0 or b == 0 then\n        return 0\n    end\n    \n    if a < 0 and b < 0 then\n        a = -a\n        b = -b\n    elseif a < 0 then\n        a = -a\n        result = -result\n    elseif b < 0 then\n        b = -b\n        result = -result\n    end\n    \n    while b > 0 do\n        if b % 2 == 1 then\n            result = result + a\n        end\n        a = a * 2\n        b = math.floor(b / 2)\n    end\n    \n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5053"
        },
        {
            "id": "56",
            "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
            "draft_plan": "# Convert the given number to a string and reverse it\n# Convert the reversed string back to an integer\n# Check if the given number is equal to twice the reversed number plus 1\n# If the condition is true, return True. Otherwise, return False.",
            "requirements": "",
            "final_plan": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
            "code": "function is_one_less_twice_reverse(number)\n    local reverse = tonumber(string.reverse(tostring(number)))\n    if number == (2 * reverse + 1) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4954"
        },
        {
            "id": "267",
            "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of squares\n# Initialize a counter variable to keep track of the odd numbers\n# Initialize a variable to store the current odd number\n\n# Iterate from 1 to n (inclusive)\n    # Check if the current number is odd\n        # If it is, square the number and add it to the sum of squares\n        # Increase the counter variable by 1\n        # Check if the counter variable is equal to n\n            # If it is, break the loop\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
            "code": "function sum_of_squares(n)\n    local sum = 0\n    local counter = 0\n    local odd_number = 1\n\n    for i = 1, n do\n        if odd_number % 2 == 1 then\n            sum = sum + odd_number^2\n            counter = counter + 1\n        end\n\n        if counter == n then\n            break\n        end\n\n        odd_number = odd_number + 1\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4951"
        }
    ],
    "HumanEval/77": [
        {
            "id": "447",
            "prompt": "Write a function to find cubes of individual elements in a list.",
            "draft_plan": "# Create an empty list to store the cubes of individual elements\n# Iterate through each element in the input list\n    # Calculate the cube of the current element by raising it to the power of 3\n    # Append the cube to the result list\n\n# Return the result list containing the cubes of individual elements",
            "requirements": "",
            "final_plan": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums",
            "code": "function find_cubes(list)\n    local result = {}\n    for _, element in ipairs(list) do\n        local cube = element^3\n        table.insert(result, cube)\n    end\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.6835"
        },
        {
            "id": "422",
            "prompt": "Write a python function to find the average of cubes of first n natural numbers.",
            "draft_plan": "# Define a function to find the average of cubes of first n natural numbers\ndef average_of_cubes(n):\n    # Initialize sum of cubes to 0\n    sum_of_cubes = 0\n    \n    # Iterate through the range of 1 to n+1\n    for i in range(1, n+1):\n        # Calculate the cube of the current number and add it to the sum_of_cubes\n        sum_of_cubes += i**3\n    \n    # Calculate the average by dividing the sum_of_cubes by n\n    average = sum_of_cubes / n\n    \n    # Return the average\n    return average",
            "requirements": "",
            "final_plan": "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) ",
            "code": "function average_of_cubes(n)\n    local sum_of_cubes = 0\n    \n    for i = 1, n do\n        sum_of_cubes = sum_of_cubes + i^3\n    end\n    \n    local average = sum_of_cubes / n\n    \n    return average\nend",
            "gen_tc": "",
            "sim_score": "0.5923"
        },
        {
            "id": "420",
            "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of the cube of even numbers\n# Iterate through each even number from 2 to (2*n) with a step size of 2\n    # Calculate the cube of the current even number\n    # Add the cube to the sum\n\n# Return the sum of the cube of even numbers",
            "requirements": "",
            "final_plan": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
            "code": "function cube_sum_of_even(n)\n    local sum = 0\n    \n    for i = 2, 2 * n, 2 do\n        local cube = i * i * i\n        sum = sum + cube\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5784"
        },
        {
            "id": "138",
            "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
            "draft_plan": "# Initialize a variable 'n' with the given number\n\n# Iterate while 'n' is greater than 0\n    # Check if 'n' is divisible by 2\n        # If 'n' is divisible by 2, divide 'n' by 2\n        # Otherwise, subtract the largest power of 2 less than 'n' from 'n'\n\n# If 'n' becomes 0, return True\n# Otherwise, return False",
            "requirements": "",
            "final_plan": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True",
            "code": "function canRepresentAsPowerOf2(n)\n    while n > 0 do\n        if n % 2 == 0 then\n            n = n / 2\n        else\n            n = n - math.pow(2, math.floor(math.log(n, 2)))\n        end\n    end\n    \n    return n == 0\nend",
            "gen_tc": "",
            "sim_score": "0.5241"
        },
        {
            "id": "234",
            "prompt": "Write a function to find the volume of a cube given its side length.",
            "draft_plan": "# Define a function to calculate the volume of a cube\n    # Accept a parameter for the side length of the cube\n    # Calculate the volume using the formula V = side_length^3\n    # Return the calculated volume",
            "requirements": "",
            "final_plan": "def volume_cube(l):\n  volume = l * l * l\n  return volume",
            "code": "function calculate_cube_volume(side_length)\n    local volume = side_length^3\n    return volume\nend",
            "gen_tc": "",
            "sim_score": "0.5132"
        },
        {
            "id": "167",
            "prompt": "Write a python function to find the smallest power of 2 greater than or equal to n.",
            "draft_plan": "# Initialize a variable to store the smallest power of 2\n# Check if n is already a power of 2\n    # If it is, return n\n    \n# Iterate through powers of 2 starting from 2\n    # Check if the current power of 2 is greater than or equal to n\n        # If it is, return the current power of 2",
            "requirements": "",
            "final_plan": "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; ",
            "code": "function smallest_power_of_2(n)\n    local power = 1\n    \n    if is_power_of_2(n) then\n        return n\n    end\n    \n    while power < n do\n        power = power * 2\n    end\n    \n    return power\nend\n\nfunction is_power_of_2(n)\n    while n > 1 do\n        if n % 2 ~= 0 then\n            return false\n        end\n        n = n / 2\n    end\n    \n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.5080"
        },
        {
            "id": "113",
            "prompt": "Write a function to check if a string represents an integer or not.",
            "draft_plan": "# Check if the string is empty or None\n    # If so, return False\n\n# Check if the string starts with a '+' or '-'\n    # If so, remove the sign from the string\n\n# Check if the string consists only of digits\n    # If so, return True\n\n# If the string is non-empty and does not start with a sign, it is not a valid integer representation\n    # Return False",
            "requirements": "",
            "final_plan": "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False",
            "code": "function isInteger(str)\n    if str == \"\" or str == nil then\n        return false\n    end\n    \n    if str:sub(1, 1) == '+' or str:sub(1, 1) == '-' then\n        str = str:sub(2)\n    end\n    \n    if str:match(\"^%d+$\") then\n        return true\n    end\n    \n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5054"
        },
        {
            "id": "93",
            "prompt": "Write a function to calculate the value of 'a' to the power 'b'.",
            "draft_plan": "# Initialize the result variable to 1\n\n# If b is positive\n    # Iterate from 1 to b\n        # Multiply the result by a\n\n# If b is negative\n    # Iterate from 1 to abs(b)\n        # Divide the result by a\n\n# Return the result",
            "requirements": "",
            "final_plan": "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)",
            "code": "function power(a, b)\n    local result = 1\n\n    if b >= 0 then\n        for i = 1, b do\n            result = result * a\n        end\n    else\n        for i = 1, math.abs(b) do\n            result = result / a\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5013"
        },
        {
            "id": "58",
            "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
            "draft_plan": "# Check if the product of the two integers is negative\n    # If the product is negative, it means the two integers have opposite signs\n        # Return True\n\n# If the product is not negative, it means the two integers have the same sign\n    # Return False",
            "requirements": "",
            "final_plan": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ",
            "code": "function haveOppositeSigns(a, b)\n    if a * b < 0 then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4995"
        },
        {
            "id": "72",
            "prompt": "Write a python function to check whether the given number can be represented as the difference of two squares or not.",
            "draft_plan": "# Iterate through all numbers from 1 to sqrt(n)\n    # Calculate the square of the current number\n    # Check if the difference between n and the square is a perfect square\n\n# If a perfect square difference is found, return True\n# If no perfect square difference is found, return False",
            "requirements": "",
            "final_plan": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False",
            "code": "function can_be_difference_of_squares(n)\n    for i = 1, math.floor(math.sqrt(n)) do\n        local square = i * i\n        local difference = n - square\n        local square_root = math.sqrt(difference)\n        if square_root == math.floor(square_root) then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4939"
        }
    ],
    "HumanEval/78": [
        {
            "id": "256",
            "prompt": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
            "draft_plan": "# Define a function to check if a number is prime\n    # Check if the number is less than 2, return False\n    # Iterate from 2 to the square root of the number\n        # Check if the number is divisible by any number in the range\n            # If divisible, return False\n    # If the number is not divisible by any number in the range, return True\n\n# Define a function to count the number of primes less than a given number\n    # Initialize a count variable to 0\n    # Iterate from 2 to the given number\n        # Check if the current number is prime\n            # If prime, increment the count\n    # Return the count",
            "requirements": "",
            "final_plan": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr",
            "code": "function isPrime(n)\n    if n < 2 then\n        return false\n    end\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            return false\n        end\n    end\n    return true\nend\n\nfunction countPrimes(n)\n    local count = 0\n    for i = 2, n - 1 do\n        if isPrime(i) then\n            count = count + 1\n        end\n    end\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.6269"
        },
        {
            "id": "96",
            "prompt": "Write a python function to find the number of divisors of a given integer.",
            "draft_plan": "# Initialize a count variable to 0\n\n# Iterate through each number from 1 to the given integer\n    # Check if the current number is a divisor of the given integer\n        # If yes, increment the count variable\n\n# Return the count variable",
            "requirements": "",
            "final_plan": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x",
            "code": "function countDivisors(num)\n    local count = 0\n\n    for i = 1, num do\n        if num % i == 0 then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4924"
        },
        {
            "id": "260",
            "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
            "draft_plan": "# Check if the given number n is less than or equal to 2\n    # If true, return the nth newman\u2013shanks\u2013williams prime number directly\n\n# Initialize a list to store the prime numbers\n# Add the first two newman\u2013shanks\u2013williams prime numbers (2 and 3) to the list\n\n# Start the iteration from 4\n# While the length of the list is less than n\n    # Check if the current number is prime\n        # If true, add it to the list\n\n    # Increment the current number by 1\n\n# Return the nth newman\u2013shanks\u2013williams prime number from the list",
            "requirements": "",
            "final_plan": "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)",
            "code": "function isPrime(n)\n    if n <= 1 then\n        return false\n    end\n\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            return false\n        end\n    end\n\n    return true\nend\n\nfunction findNthNSWPrime(n)\n    if n <= 2 then\n        return n\n    end\n\n    local primes = {2, 3}\n    local currentNum = 4\n\n    while #primes < n do\n        if isPrime(currentNum) then\n            table.insert(primes, currentNum)\n        end\n        currentNum = currentNum + 1\n    end\n\n    return primes[n]\nend",
            "gen_tc": "",
            "sim_score": "0.4812"
        },
        {
            "id": "86",
            "prompt": "Write a function to find nth centered hexagonal number.",
            "draft_plan": "# Initialize the centered hexagonal number formula: nth_centered_hexagonal = 3 * n * (n - 1) + 1\n\n# Define a function to calculate the nth centered hexagonal number\n    # Check if n is a positive integer, otherwise return None\n    # Calculate the nth centered hexagonal number using the formula\n    # Return the result\n\n# Call the function and provide the desired value of n to get the nth centered hexagonal number",
            "requirements": "",
            "final_plan": "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1",
            "code": "function find_nth_centered_hexagonal(n)\n    if type(n) ~= \"number\" or n <= 0 or n ~= math.floor(n) then\n        return nil\n    end\n\n    local nth_centered_hexagonal = 3 * n * (n - 1) + 1\n\n    return nth_centered_hexagonal\nend\n\n-- Example usage\nlocal n = 5\nlocal nth_centered_hexagonal = find_nth_centered_hexagonal(n)\nprint(\"The \" .. n .. \"th centered hexagonal number is: \" .. nth_centered_hexagonal)",
            "gen_tc": "",
            "sim_score": "0.4731"
        },
        {
            "id": "283",
            "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
            "draft_plan": "# Convert the input integer to a string\n# Initialize a dictionary to store the frequency of each digit\n\n# Iterate through each digit in the string\n    # Increment the frequency of the digit in the dictionary\n\n# Iterate through each digit in the string\n    # Check if the frequency of the digit is greater than the digit itself\n        # If yes, return False\n\n# If all frequencies are less than or equal to their respective digits, return True",
            "requirements": "",
            "final_plan": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
            "code": "function check_frequency(num)\n    local str_num = tostring(num)\n    local freq_dict = {}\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        freq_dict[digit] = (freq_dict[digit] or 0) + 1\n    end\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        if freq_dict[digit] > tonumber(digit) then\n            return false\n        end\n    end\n\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.4576"
        },
        {
            "id": "135",
            "prompt": "Write a function to find the nth hexagonal number.",
            "draft_plan": "# Calculate the nth hexagonal number using the formula: n * (2 * n - 1)\n\n# Return the calculated nth hexagonal number",
            "requirements": "",
            "final_plan": "def hexagonal_num(n): \n\treturn n*(2*n - 1) ",
            "code": "function nthHexagonalNumber(n)\n    return n * (2 * n - 1)\nend",
            "gen_tc": "",
            "sim_score": "0.4498"
        },
        {
            "id": "253",
            "prompt": "Write a python function that returns the number of integer elements in a given list.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the given list\n    # Check if the current element is an integer\n        # If it is an integer, increment the counter variable\n\n# Return the counter variable as the number of integer elements in the list",
            "requirements": "",
            "final_plan": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr",
            "code": "function count_integer_elements(lst)\n    local count = 0\n\n    for _, element in ipairs(lst) do\n        if type(element) == \"number\" and math.floor(element) == element then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4380"
        },
        {
            "id": "126",
            "prompt": "Write a python function to find the sum of common divisors of two given numbers.",
            "draft_plan": "# Find the common divisors of the two given numbers\n    # Find the smaller number among the two\n    # Initialize an empty list to store the common divisors\n    # Iterate from 1 to the smaller number\n        # Check if the current number is a divisor of both given numbers\n            # If yes, add it to the list of common divisors\n\n# Find the sum of the common divisors\n    # Initialize a variable to store the sum\n    # Iterate through the list of common divisors\n        # Add each divisor to the sum\n\n# Return the sum of the common divisors",
            "requirements": "",
            "final_plan": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum",
            "code": "function sumCommonDivisors(a, b)\n    local smaller = math.min(a, b)\n    local divisors = {}\n\n    for i = 1, smaller do\n        if a % i == 0 and b % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n\n    local sum = 0\n    for _, divisor in ipairs(divisors) do\n        sum = sum + divisor\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4355"
        },
        {
            "id": "83",
            "prompt": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
            "draft_plan": "# Define a function to calculate the character made by adding the ASCII values modulo 26\n    # Initialize a variable to store the sum of ASCII values\n    # Iterate through each character in the given string\n        # Add the ASCII value of the current character to the sum\n    # Calculate the modulo 26 of the sum\n    # Convert the result back to a character using the ASCII value\n    # Return the resulting character",
            "requirements": "",
            "final_plan": "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)",
            "code": "function calculate_ascii_modulo_26(string)\n    local sum = 0\n    for i = 1, string.len(string) do\n        sum = sum + string.byte(string, i)\n    end\n\n    local modulo_result = sum % 26\n\n    -- Convert the modulo result to a character using the ASCII value\n    local result_char = string.char(modulo_result)\n\n    return result_char\nend",
            "gen_tc": "",
            "sim_score": "0.4337"
        },
        {
            "id": "168",
            "prompt": "Write a function to count the number of occurrences of a number in a given list.",
            "draft_plan": "# Initialize a count variable to 0\n\n# Iterate through each element in the list\n    # Check if the current element is equal to the given number\n        # If it is, increment the count variable\n\n# Return the count variable",
            "requirements": "",
            "final_plan": "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count ",
            "code": "function countOccurrences(list, number)\n    local count = 0\n\n    for _, element in ipairs(list) do\n        if element == number then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4337"
        }
    ],
    "HumanEval/79": [
        {
            "id": "99",
            "prompt": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
            "draft_plan": "# Initialize an empty string to store the binary representation\n# Check if the input number is 0, if so return '0' as the binary representation\n# Iterate until the input number becomes 0\n    # Append the remainder of the input number divided by 2 to the binary representation string\n    # Update the input number by dividing it by 2, discarding the remainder\n\n# Reverse the binary representation string\n\n# Return the binary representation string",
            "requirements": "",
            "final_plan": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") ",
            "code": "function decimalToBinary(decimal)\n    local binary = \"\"\n\n    if decimal == 0 then\n        return \"0\"\n    end\n\n    while decimal > 0 do\n        binary = tostring(decimal % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n\n    return binary\nend",
            "gen_tc": "",
            "sim_score": "0.7991"
        },
        {
            "id": "224",
            "prompt": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each bit in the binary representation of the number\n    # Check if the current bit is set (equal to 1)\n        # If yes, increment the counter variable\n\n# Return the counter variable, which represents the number of set bits",
            "requirements": "",
            "final_plan": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ",
            "code": "function count_set_bits(number)\n    local count = 0\n\n    while number > 0 do\n        if number % 2 == 1 then\n            count = count + 1\n        end\n        number = math.floor(number / 2)\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5780"
        },
        {
            "id": "125",
            "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
            "draft_plan": "# Initialize the maximum difference as 0\n\n# Iterate through each character in the binary string\n    # If the current character is '0', increment a count variable by 1\n    # If the current character is '1', decrement the count variable by 1\n\n    # Check if the count variable is greater than the maximum difference\n        # If so, update the maximum difference to the count variable\n\n# Return the maximum difference as the result",
            "requirements": "",
            "final_plan": "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0",
            "code": "function maxDifference(str)\n    local count = 0\n    local max_diff = 0\n\n    for i = 1, string.len(str) do\n        if string.sub(str, i, i) == '0' then\n            count = count + 1\n        else\n            count = count - 1\n        end\n\n        if count > max_diff then\n            max_diff = count\n        end\n    end\n\n    return max_diff\nend",
            "gen_tc": "",
            "sim_score": "0.5192"
        },
        {
            "id": "479",
            "prompt": "Write a python function to find the first digit of a given number.",
            "draft_plan": "# Convert the given number to a string\n\n# Iterate through each character in the string\n    # Check if the character is a digit\n        # If it is, return the character as the first digit\n\n# If no digit is found, return \"None\"",
            "requirements": "",
            "final_plan": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ",
            "code": "function firstDigit(number)\n    local numberStr = tostring(number)\n\n    for i = 1, string.len(numberStr) do\n        local char = string.sub(numberStr, i, i)\n        if string.match(char, \"%d\") then\n            return char\n        end\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.5139"
        },
        {
            "id": "235",
            "prompt": "Write a python function to set all even bits of a given number.",
            "draft_plan": "# Create a mask with all even bits set to 1 and odd bits set to 0\n# Perform bitwise OR operation between the given number and the mask\n# Return the updated number",
            "requirements": "",
            "final_plan": "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) ",
            "code": "function set_even_bits(n)\n    local mask = 0xAAAAAAAA -- Mask with all even bits set to 1 and odd bits set to 0\n    return bit.bor(n, mask)\nend",
            "gen_tc": "",
            "sim_score": "0.4913"
        },
        {
            "id": "311",
            "prompt": "Write a python function to set the left most unset bit.",
            "draft_plan": "To find the leftmost unset bit in a given number, we can use the bitwise operators in Python. Here is the code logic:\n\n1. Create a function `leftmost_unset_bit(num)` that takes a number as input.\n\n2. Initialize a variable `position` as 1, which represents the position of the leftmost bit (starting from 1 for the least significant bit).\n\n3. Iterate through each bit position from right to left using a while loop:\n     - Check if the bit is unset (0) using the bitwise AND operation of the number and a mask (1 << position).\n     - If the bit is unset, return the current position.\n     - If the bit is set (1), increment the position by 1.\n\n4. If no unset bit is found after the loop, return -1 to indicate that no unset bit is present in the number.\n\nHere is the code implementation for the above logic:\n\n```python\ndef leftmost_unset_bit(num):\n    position = 1\n    while num:\n        if not (num & (1 << position)):\n            return position\n        position += 1\n    return -1\n```\n\nYou can then call the `leftmost_unset_bit()` function with a number as input to find the position of the leftmost unset bit.",
            "requirements": "",
            "final_plan": "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) ",
            "code": "Here is the Lua code for the problem:\n\n```lua\nfunction leftmost_unset_bit(num)\n    local position = 1\n    while num > 0 do\n        if bit32.band(num, bit32.lshift(1, position)) == 0 then\n            return position\n        end\n        position = position + 1\n    end\n    return -1\nend\n```\n\nYou can call the `leftmost_unset_bit()` function with a number as input to find the position of the leftmost unset bit.",
            "gen_tc": "",
            "sim_score": "0.4836"
        },
        {
            "id": "77",
            "prompt": "Write a python function to find whether a number is divisible by 11.",
            "draft_plan": "To determine whether a number is divisible by 11, we can use the following logic:\n\n1. Convert the number to a string.\n2. Iterate through the digits of the number.\n3. Add the digits in odd positions (starting from the rightmost digit) and subtract the sum of the digits in even positions.\n4. If the result is divisible by 11, the original number is also divisible by 11.\n\nHere is the code implementing this logic:\n\n```python\ndef is_divisible_by_11(number):\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Iterate through the digits of the number\n    sum_odd = 0\n    sum_even = 0\n    for i in range(len(number_str)):\n        digit = int(number_str[i])\n        \n        # Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0:\n            sum_odd += digit\n        else:\n            sum_even += digit\n    \n    # Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0:\n        return True\n    else:\n        return False\n```\n\nYou can use this function to check if a number is divisible by 11. For example:\n\n```python\nprint(is_divisible_by_11(121))  # Output: True\nprint(is_divisible_by_11(123))  # Output: False\n```",
            "requirements": "",
            "final_plan": "def is_Diff(n): \n    return (n % 11 == 0) ",
            "code": "function is_divisible_by_11(number)\n    -- Convert the number to a string\n    local number_str = tostring(number)\n    \n    -- Iterate through the digits of the number\n    local sum_odd = 0\n    local sum_even = 0\n    for i = 1, string.len(number_str) do\n        local digit = tonumber(string.sub(number_str, i, i))\n        \n        -- Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0 then\n            sum_even = sum_even + digit\n        else\n            sum_odd = sum_odd + digit\n        end\n    end\n    \n    -- Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0 then\n        return true\n    else\n        return false\n    end\nend\n\nprint(is_divisible_by_11(121))  -- Output: true\nprint(is_divisible_by_11(123))  -- Output: false",
            "gen_tc": "",
            "sim_score": "0.4659"
        },
        {
            "id": "109",
            "prompt": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
            "draft_plan": "# Convert the binary string to a list of characters\n# Initialize a counter variable to keep track of the number of odd numbers\n\n# Rotate the binary string the given number of times\n    # Remove the last character from the binary string and prepend it to the front\n\n# Convert the rotated binary string back to a string\n# Iterate through each character in the rotated binary string\n    # Convert the character to an integer\n    # Check if the integer value is odd\n        # If so, increment the counter\n\n# Return the counter value",
            "requirements": "",
            "final_plan": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ",
            "code": "function count_odd_numbers(binary_str, rotations)\n    local binary_list = {}\n    local counter = 0\n\n    -- Convert the binary string to a list of characters\n    for char in string.gmatch(binary_str, \".\") do\n        table.insert(binary_list, char)\n    end\n\n    -- Rotate the binary string the given number of times\n    for i = 1, rotations do\n        local last_char = table.remove(binary_list)\n        table.insert(binary_list, 1, last_char)\n    end\n\n    -- Convert the rotated binary string back to a string\n    local rotated_binary_str = table.concat(binary_list)\n\n    -- Iterate through each character in the rotated binary string\n    for i = 1, string.len(rotated_binary_str) do\n        local char = string.sub(rotated_binary_str, i, i)\n        local num = tonumber(char)\n        \n        -- Check if the integer value is odd\n        if num % 2 == 1 then\n            counter = counter + 1\n        end\n    end\n\n    return counter\nend",
            "gen_tc": "",
            "sim_score": "0.4618"
        },
        {
            "id": "435",
            "prompt": "Write a python function to find the last digit of a given number.",
            "draft_plan": "To find the last digit of a given number, you can use the modulo operator (`%`) to get the remainder when dividing the number by 10. The remainder will be the last digit of the number.\n\nHere's the code logic:\n\n1. Define a function `find_last_digit` that takes a number as input.\n2. Inside the function, calculate the remainder of the number when divided by 10 using the modulo operator: `last_digit = number % 10`.\n3. Return the value of `last_digit`.\n\nHere's the code implementation in Python:\n\n```python\ndef find_last_digit(number):\n    last_digit = number % 10\n    return last_digit\n```\n\nYou can then call this function by passing a number as an argument to get the last digit. For example:\n\n```python\nprint(find_last_digit(12345))  # Output: 5\nprint(find_last_digit(987654321))  # Output: 1\nprint(find_last_digit(0))  # Output: 0\n```",
            "requirements": "",
            "final_plan": "def last_Digit(n) :\n    return (n % 10) ",
            "code": "function find_last_digit(number)\n    local last_digit = number % 10\n    return last_digit\nend\n\nprint(find_last_digit(12345))  -- Output: 5\nprint(find_last_digit(987654321))  -- Output: 1\nprint(find_last_digit(0))  -- Output: 0",
            "gen_tc": "",
            "sim_score": "0.4576"
        },
        {
            "id": "56",
            "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
            "draft_plan": "# Convert the given number to a string and reverse it\n# Convert the reversed string back to an integer\n# Check if the given number is equal to twice the reversed number plus 1\n# If the condition is true, return True. Otherwise, return False.",
            "requirements": "",
            "final_plan": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
            "code": "function is_one_less_twice_reverse(number)\n    local reverse = tonumber(string.reverse(tostring(number)))\n    if number == (2 * reverse + 1) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4463"
        }
    ],
    "HumanEval/80": [
        {
            "id": "285",
            "prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
            "draft_plan": "# Iterate through each character in the input string\n    # Check if the current character is 'a'\n        # If it is, check the next two characters (if they exist) to see if they are 'b'\n            # If they are, return True\n    # If the current character is not 'a', continue to the next character\n\n# If no 'a' followed by two or three 'b' characters is found, return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function contains_a_followed_by_b(string)\n    local len = string.len(string)\n    for i = 1, len - 3 do\n        if string.sub(string, i, i) == 'a' then\n            if string.sub(string, i+1, i+3) == 'bb' or string.sub(string, i+1, i+3) == 'bbb' then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.6199"
        },
        {
            "id": "396",
            "prompt": "Write a function to check whether the given string starts and ends with the same character or not.",
            "draft_plan": "# Check if the first character of the string is equal to the last character\n    # If they are equal, return True\n    # If they are not equal, return False",
            "requirements": "",
            "final_plan": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ",
            "code": "function starts_ends_same(str)\n    local first_char = string.sub(str, 1, 1)\n    local last_char = string.sub(str, -1)\n    \n    if first_char == last_char then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5905"
        },
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.5617"
        },
        {
            "id": "395",
            "prompt": "Write a python function to find the first non-repeated character in a given string.",
            "draft_plan": "# Create an empty dictionary to store the count of each character\n# Iterate through each character in the given string\n    # If the character is already in the dictionary, increase its count by 1\n    # If the character is not in the dictionary, add it with a count of 1\n\n# Iterate through each character in the given string again\n    # Check if the count of the current character in the dictionary is 1\n        # If it is, return the current character as the first non-repeated character\n\n# If no non-repeated character is found, return \"None\"",
            "requirements": "",
            "final_plan": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None",
            "code": "function firstNonRepeatedChar(str)\n    local charCount = {}\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if charCount[char] then\n            charCount[char] = charCount[char] + 1\n        else\n            charCount[char] = 1\n        end\n    end\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if charCount[char] == 1 then\n            return char\n        end\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.5581"
        },
        {
            "id": "128",
            "prompt": "Write a function to find words that are longer than n characters from a given list of words.",
            "draft_plan": "# Create an empty list to store the result\n\n# Iterate through each word in the given list\n    # Check if the length of the current word is greater than n\n        # If the condition is satisfied, append the word to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t",
            "code": "function find_longer_words(word_list, n)\n    local result = {}\n\n    for _, word in ipairs(word_list) do\n        if string.len(word) > n then\n            table.insert(result, word)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5288"
        },
        {
            "id": "11",
            "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
            "draft_plan": "# Find the index of the first occurrence of the given character in the string\n# Find the index of the last occurrence of the given character in the string\n\n# If both indices are valid\n    # Remove the first occurrence of the character from the string\n    # Decrement the index of the last occurrence by 1 to account for the removal\n    # Remove the last occurrence of the character from the string\n\n# Return the modified string",
            "requirements": "",
            "final_plan": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ",
            "code": "function removeFirstAndLastOccurrence(str, char)\n    local firstIndex = string.find(str, char)\n    local lastIndex = string.find(str:reverse(), char)\n\n    if firstIndex and lastIndex then\n        str = string.sub(str, 1, firstIndex - 1) .. string.sub(str, firstIndex + 1)\n        lastIndex = string.len(str) - lastIndex + 1\n        str = string.sub(str, 1, lastIndex - 1) .. string.sub(str, lastIndex + 1)\n    end\n\n    return str\nend",
            "gen_tc": "",
            "sim_score": "0.5254"
        },
        {
            "id": "90",
            "prompt": "Write a python function to find the length of the longest word.",
            "draft_plan": "# Split the input sentence into words using the split() function\n# Initialize a variable maxLength to 0\n\n# Iterate through each word in the list of words\n    # Check if the length of the current word is greater than maxLength\n        # If it is, update maxLength with the length of the current word\n\n# Return maxLength",
            "requirements": "",
            "final_plan": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max",
            "code": "function find_longest_word(sentence)\n    local words = split_sentence(sentence)\n    local max_length = 0\n\n    for _, word in ipairs(words) do\n        local length = string.len(word)\n        if length > max_length then\n            max_length = length\n        end\n    end\n\n    return max_length\nend\n\nfunction split_sentence(sentence)\n    local words = {}\n    for word in string.gmatch(sentence, \"%S+\") do\n        table.insert(words, word)\n    end\n    return words\nend",
            "gen_tc": "",
            "sim_score": "0.5167"
        },
        {
            "id": "461",
            "prompt": "Write a python function to count the upper case characters in a given string.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of uppercase characters\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter variable\n\n# Return the counter variable, which represents the number of uppercase characters in the string",
            "requirements": "",
            "final_plan": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
            "code": "function count_uppercase_chars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= 'A' and char <= 'Z' then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5084"
        },
        {
            "id": "434",
            "prompt": "Write a function that matches a string that has an a followed by one or more b's.",
            "draft_plan": "import re\n\ndef match_string(string):\n    pattern = r'a+b+'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n",
            "code": "function match_string(str)\n    local pattern = \"a+b+\"\n    if string.match(str, pattern) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5028"
        },
        {
            "id": "472",
            "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.",
            "draft_plan": "# Sort the input list in ascending order\n\n# Iterate through each number in the sorted list, starting from the second number\n    # Check if the current number is consecutive to the previous number\n        # If not, return False\n\n# If all numbers are consecutive, return True",
            "requirements": "",
            "final_plan": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ",
            "code": "function checkConsecutive(lst)\n    table.sort(lst)\n    \n    for i = 2, #lst do\n        if lst[i] ~= lst[i-1] + 1 then\n            return false\n        end\n    end\n    \n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.4949"
        }
    ],
    "HumanEval/81": [
        {
            "id": "264",
            "prompt": "Write a function to calculate a dog's age in dog's years.",
            "draft_plan": "# Define a function called calculate_dog_age that takes in one parameter: human_age\n\n# Define a variable called dog_age and set it to 0\n\n# If human_age is less than or equal to 2, set dog_age to human_age multiplied by 10.5\n# If human_age is greater than 2, calculate the dog's age in dog's years by adding:\n    # 2 (for the first two years) multiplied by 10.5\n    # The remaining years multiplied by 4\n\n# Return the value of dog_age as the result of the function",
            "requirements": "",
            "final_plan": "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age",
            "code": "function calculate_dog_age(human_age)\n    local dog_age = 0\n\n    if human_age <= 2 then\n        dog_age = human_age * 10.5\n    else\n        dog_age = (2 * 10.5) + ((human_age - 2) * 4)\n    end\n\n    return dog_age\nend",
            "gen_tc": "",
            "sim_score": "0.5030"
        },
        {
            "id": "419",
            "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
            "draft_plan": "# Initialize a variable to store the total sum\n# Iterate through each number in the list\n    # Round the number to the nearest integer\n    # Add the rounded number to the total sum\n\n# Calculate the total sum multiplied by the length of the list\n# Print the result",
            "requirements": "",
            "final_plan": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum",
            "code": "function round_and_multiply(numbers)\n    local total_sum = 0\n\n    for _, num in ipairs(numbers) do\n        total_sum = total_sum + math.round(num)\n    end\n\n    local result = total_sum * #numbers\n    print(result)\nend\n\nfunction math.round(num)\n    return math.floor(num + 0.5)\nend",
            "gen_tc": "",
            "sim_score": "0.4572"
        },
        {
            "id": "57",
            "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.",
            "draft_plan": "# Sort the list of digits in descending order\n\n# Concatenate all the digits in the sorted list\n\n# Convert the concatenated string to an integer and return it",
            "requirements": "",
            "final_plan": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ",
            "code": "function largest_number(digits)\n    table.sort(digits, function(a, b) return a > b end)\n    return tonumber(table.concat(digits))\nend",
            "gen_tc": "",
            "sim_score": "0.4480"
        },
        {
            "id": "283",
            "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
            "draft_plan": "# Convert the input integer to a string\n# Initialize a dictionary to store the frequency of each digit\n\n# Iterate through each digit in the string\n    # Increment the frequency of the digit in the dictionary\n\n# Iterate through each digit in the string\n    # Check if the frequency of the digit is greater than the digit itself\n        # If yes, return False\n\n# If all frequencies are less than or equal to their respective digits, return True",
            "requirements": "",
            "final_plan": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
            "code": "function check_frequency(num)\n    local str_num = tostring(num)\n    local freq_dict = {}\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        freq_dict[digit] = (freq_dict[digit] or 0) + 1\n    end\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        if freq_dict[digit] > tonumber(digit) then\n            return false\n        end\n    end\n\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.4472"
        },
        {
            "id": "436",
            "prompt": "Write a python function to return the negative numbers in a list.",
            "draft_plan": "# Initialize an empty list to store the negative numbers\n\n# Iterate through each element in the input list\n    # Check if the current element is less than 0\n        # If the element is negative, append it to the list of negative numbers\n\n# Return the list of negative numbers",
            "requirements": "",
            "final_plan": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ",
            "code": "function getNegativeNumbers(numbers)\n    local negativeNumbers = {}\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            table.insert(negativeNumbers, num)\n        end\n    end\n\n    return negativeNumbers\nend",
            "gen_tc": "",
            "sim_score": "0.4464"
        },
        {
            "id": "160",
            "prompt": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
            "draft_plan": "# Iterate through all possible values of x from 0 to n\n    # Calculate the value of y using the equation y = (n - ax) / b\n    # Check if y is an integer\n        # If y is an integer, return the values of x and y as a tuple\n\n# If no solution is found, return None",
            "requirements": "",
            "final_plan": "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None",
            "code": "function find_solution(a, b, n)\n    for x = 0, n do\n        local y = (n - a * x) / b\n        if y == math.floor(y) then\n            return x, y\n        end\n    end\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.4451"
        },
        {
            "id": "398",
            "prompt": "Write a function to compute the sum of digits of each number of a given list.",
            "draft_plan": "# Initialize an empty list to store the sum of digits for each number\n\n# Iterate through each number in the given list\n    # Convert the number to a string\n    # Initialize a variable to store the sum of digits\n    # Iterate through each digit in the string representation of the number\n        # Convert the digit back to an integer and add it to the sum of digits\n    # Append the sum of digits to the list\n\n# Return the list of sum of digits for each number",
            "requirements": "",
            "final_plan": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
            "code": "function compute_sum_of_digits(numbers)\n    local sum_of_digits = {}\n\n    for _, num in ipairs(numbers) do\n        local num_str = tostring(num)\n        local digits_sum = 0\n\n        for i = 1, string.len(num_str) do\n            digits_sum = digits_sum + tonumber(string.sub(num_str, i, i))\n        end\n\n        table.insert(sum_of_digits, digits_sum)\n    end\n\n    return sum_of_digits\nend",
            "gen_tc": "",
            "sim_score": "0.4385"
        },
        {
            "id": "59",
            "prompt": "Write a function to find the nth octagonal number.",
            "draft_plan": "# Function to find the nth octagonal number\ndef find_octagonal_number(n):\n    # Calculate the nth octagonal number using the formula\n    octagonal_number = 3 * n * (n - 1) + 1\n    \n    # Return the result\n    return octagonal_number\n\n# Test the function\nn = 5\nresult = find_octagonal_number(n)\nprint(f\"The {n}th octagonal number is: {result}\")",
            "requirements": "",
            "final_plan": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ",
            "code": "-- Function to find the nth octagonal number\nfunction find_octagonal_number(n)\n    -- Calculate the nth octagonal number using the formula\n    local octagonal_number = 3 * n * (n - 1) + 1\n    \n    -- Return the result\n    return octagonal_number\nend\n\n-- Test the function\nlocal n = 5\nlocal result = find_octagonal_number(n)\nprint(\"The \"..n..\"th octagonal number is: \"..result)",
            "gen_tc": "",
            "sim_score": "0.4378"
        },
        {
            "id": "257",
            "prompt": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.",
            "draft_plan": "# Define the function that takes in two numbers as input\n    # Create a tuple with the second number followed by the first number\n    # Return the tuple\n\n# Call the function with the desired numbers and store the returned tuple",
            "requirements": "",
            "final_plan": "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)",
            "code": "function swap_numbers(num1, num2)\n    return num2, num1\nend\n\nlocal result = swap_numbers(3, 5)\nprint(result)  -- Output: 5   3",
            "gen_tc": "",
            "sim_score": "0.4344"
        },
        {
            "id": "117",
            "prompt": "Write a function to convert all possible convertible elements in a list of lists to floats.",
            "draft_plan": "# Iterate through each sublist in the input list\n    # Iterate through each element in the sublist\n        # Try to convert the element to a float\n        # If successful, replace the element with the float value\n\n# Return the modified input list",
            "requirements": "",
            "final_plan": "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res",
            "code": "function convert_to_floats(list_of_lists)\n    for i, sublist in ipairs(list_of_lists) do\n        for j, element in ipairs(sublist) do\n            local success, value = pcall(function() return tonumber(element) end)\n            if success then\n                list_of_lists[i][j] = value\n            end\n        end\n    end\n    return list_of_lists\nend",
            "gen_tc": "",
            "sim_score": "0.4326"
        }
    ],
    "HumanEval/82": [
        {
            "id": "256",
            "prompt": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
            "draft_plan": "# Define a function to check if a number is prime\n    # Check if the number is less than 2, return False\n    # Iterate from 2 to the square root of the number\n        # Check if the number is divisible by any number in the range\n            # If divisible, return False\n    # If the number is not divisible by any number in the range, return True\n\n# Define a function to count the number of primes less than a given number\n    # Initialize a count variable to 0\n    # Iterate from 2 to the given number\n        # Check if the current number is prime\n            # If prime, increment the count\n    # Return the count",
            "requirements": "",
            "final_plan": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr",
            "code": "function isPrime(n)\n    if n < 2 then\n        return false\n    end\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            return false\n        end\n    end\n    return true\nend\n\nfunction countPrimes(n)\n    local count = 0\n    for i = 2, n - 1 do\n        if isPrime(i) then\n            count = count + 1\n        end\n    end\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.7035"
        },
        {
            "id": "128",
            "prompt": "Write a function to find words that are longer than n characters from a given list of words.",
            "draft_plan": "# Create an empty list to store the result\n\n# Iterate through each word in the given list\n    # Check if the length of the current word is greater than n\n        # If the condition is satisfied, append the word to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t",
            "code": "function find_longer_words(word_list, n)\n    local result = {}\n\n    for _, word in ipairs(word_list) do\n        if string.len(word) > n then\n            table.insert(result, word)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5476"
        },
        {
            "id": "260",
            "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
            "draft_plan": "# Check if the given number n is less than or equal to 2\n    # If true, return the nth newman\u2013shanks\u2013williams prime number directly\n\n# Initialize a list to store the prime numbers\n# Add the first two newman\u2013shanks\u2013williams prime numbers (2 and 3) to the list\n\n# Start the iteration from 4\n# While the length of the list is less than n\n    # Check if the current number is prime\n        # If true, add it to the list\n\n    # Increment the current number by 1\n\n# Return the nth newman\u2013shanks\u2013williams prime number from the list",
            "requirements": "",
            "final_plan": "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)",
            "code": "function isPrime(n)\n    if n <= 1 then\n        return false\n    end\n\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            return false\n        end\n    end\n\n    return true\nend\n\nfunction findNthNSWPrime(n)\n    if n <= 2 then\n        return n\n    end\n\n    local primes = {2, 3}\n    local currentNum = 4\n\n    while #primes < n do\n        if isPrime(currentNum) then\n            table.insert(primes, currentNum)\n        end\n        currentNum = currentNum + 1\n    end\n\n    return primes[n]\nend",
            "gen_tc": "",
            "sim_score": "0.5303"
        },
        {
            "id": "90",
            "prompt": "Write a python function to find the length of the longest word.",
            "draft_plan": "# Split the input sentence into words using the split() function\n# Initialize a variable maxLength to 0\n\n# Iterate through each word in the list of words\n    # Check if the length of the current word is greater than maxLength\n        # If it is, update maxLength with the length of the current word\n\n# Return maxLength",
            "requirements": "",
            "final_plan": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max",
            "code": "function find_longest_word(sentence)\n    local words = split_sentence(sentence)\n    local max_length = 0\n\n    for _, word in ipairs(words) do\n        local length = string.len(word)\n        if length > max_length then\n            max_length = length\n        end\n    end\n\n    return max_length\nend\n\nfunction split_sentence(sentence)\n    local words = {}\n    for word in string.gmatch(sentence, \"%S+\") do\n        table.insert(words, word)\n    end\n    return words\nend",
            "gen_tc": "",
            "sim_score": "0.5299"
        },
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.5260"
        },
        {
            "id": "20",
            "prompt": "Write a function to check if the given number is woodball or not.",
            "draft_plan": "# Check if the given number is less than or equal to 1\n    # If it is, return False as woodball numbers must be greater than 1\n\n# Initialize a variable to keep track of the previous number in the sequence\n# Start a loop from 2 to the square root of the given number\n    # Check if the given number is divisible by the current loop variable\n        # If it is, check if the current loop variable is equal to the previous number plus 1\n            # If it is, update the previous number to the current loop variable\n            # If it is not, return False as the sequence is broken\n\n# If the loop completes without returning False, return True as the given number is a woodball number",
            "requirements": "",
            "final_plan": "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False",
            "code": "function isWoodballNumber(number)\n    if number <= 1 then\n        return false\n    end\n\n    local previousNumber = 1\n\n    for i = 2, math.sqrt(number) do\n        if number % i == 0 then\n            if i == previousNumber + 1 then\n                previousNumber = i\n            else\n                return false\n            end\n        end\n    end\n\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.5169"
        },
        {
            "id": "242",
            "prompt": "Write a function to count the total number of characters in a string.",
            "draft_plan": "# Initialize a variable to keep track of the character count, set it to 0\n\n# Iterate through each character in the string\n    # Increment the character count by 1\n\n# Return the character count",
            "requirements": "",
            "final_plan": "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total",
            "code": "function countCharacters(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        count = count + 1\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5122"
        },
        {
            "id": "418",
            "prompt": "Write a python function to find the element of a list having maximum length.",
            "draft_plan": "# Initialize a variable to store the index of the element with maximum length\n# Initialize a variable to store the maximum length, initially set to 0\n\n# Iterate through each element in the list\n    # Check if the length of the current element is greater than the maximum length\n        # If so, update the maximum length and the index of the element\n\n# Return the element at the index with maximum length",
            "requirements": "",
            "final_plan": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList",
            "code": "function findMaxElementLength(lst)\n    local maxIndex = 1\n    local maxLength = 0\n\n    for i, element in ipairs(lst) do\n        local length = string.len(element)\n        if length > maxLength then\n            maxLength = length\n            maxIndex = i\n        end\n    end\n\n    return lst[maxIndex]\nend",
            "gen_tc": "",
            "sim_score": "0.5101"
        },
        {
            "id": "96",
            "prompt": "Write a python function to find the number of divisors of a given integer.",
            "draft_plan": "# Initialize a count variable to 0\n\n# Iterate through each number from 1 to the given integer\n    # Check if the current number is a divisor of the given integer\n        # If yes, increment the count variable\n\n# Return the count variable",
            "requirements": "",
            "final_plan": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x",
            "code": "function countDivisors(num)\n    local count = 0\n\n    for i = 1, num do\n        if num % i == 0 then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5096"
        },
        {
            "id": "77",
            "prompt": "Write a python function to find whether a number is divisible by 11.",
            "draft_plan": "To determine whether a number is divisible by 11, we can use the following logic:\n\n1. Convert the number to a string.\n2. Iterate through the digits of the number.\n3. Add the digits in odd positions (starting from the rightmost digit) and subtract the sum of the digits in even positions.\n4. If the result is divisible by 11, the original number is also divisible by 11.\n\nHere is the code implementing this logic:\n\n```python\ndef is_divisible_by_11(number):\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Iterate through the digits of the number\n    sum_odd = 0\n    sum_even = 0\n    for i in range(len(number_str)):\n        digit = int(number_str[i])\n        \n        # Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0:\n            sum_odd += digit\n        else:\n            sum_even += digit\n    \n    # Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0:\n        return True\n    else:\n        return False\n```\n\nYou can use this function to check if a number is divisible by 11. For example:\n\n```python\nprint(is_divisible_by_11(121))  # Output: True\nprint(is_divisible_by_11(123))  # Output: False\n```",
            "requirements": "",
            "final_plan": "def is_Diff(n): \n    return (n % 11 == 0) ",
            "code": "function is_divisible_by_11(number)\n    -- Convert the number to a string\n    local number_str = tostring(number)\n    \n    -- Iterate through the digits of the number\n    local sum_odd = 0\n    local sum_even = 0\n    for i = 1, string.len(number_str) do\n        local digit = tonumber(string.sub(number_str, i, i))\n        \n        -- Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0 then\n            sum_even = sum_even + digit\n        else\n            sum_odd = sum_odd + digit\n        end\n    end\n    \n    -- Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0 then\n        return true\n    else\n        return false\n    end\nend\n\nprint(is_divisible_by_11(121))  -- Output: true\nprint(is_divisible_by_11(123))  -- Output: false",
            "gen_tc": "",
            "sim_score": "0.5088"
        }
    ],
    "HumanEval/83": [
        {
            "id": "479",
            "prompt": "Write a python function to find the first digit of a given number.",
            "draft_plan": "# Convert the given number to a string\n\n# Iterate through each character in the string\n    # Check if the character is a digit\n        # If it is, return the character as the first digit\n\n# If no digit is found, return \"None\"",
            "requirements": "",
            "final_plan": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ",
            "code": "function firstDigit(number)\n    local numberStr = tostring(number)\n\n    for i = 1, string.len(numberStr) do\n        local char = string.sub(numberStr, i, i)\n        if string.match(char, \"%d\") then\n            return char\n        end\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.6059"
        },
        {
            "id": "224",
            "prompt": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each bit in the binary representation of the number\n    # Check if the current bit is set (equal to 1)\n        # If yes, increment the counter variable\n\n# Return the counter variable, which represents the number of set bits",
            "requirements": "",
            "final_plan": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ",
            "code": "function count_set_bits(number)\n    local count = 0\n\n    while number > 0 do\n        if number % 2 == 1 then\n            count = count + 1\n        end\n        number = math.floor(number / 2)\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5661"
        },
        {
            "id": "253",
            "prompt": "Write a python function that returns the number of integer elements in a given list.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the given list\n    # Check if the current element is an integer\n        # If it is an integer, increment the counter variable\n\n# Return the counter variable as the number of integer elements in the list",
            "requirements": "",
            "final_plan": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr",
            "code": "function count_integer_elements(lst)\n    local count = 0\n\n    for _, element in ipairs(lst) do\n        if type(element) == \"number\" and math.floor(element) == element then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5626"
        },
        {
            "id": "66",
            "prompt": "Write a python function to count the number of positive numbers in a list.",
            "draft_plan": "# Initialize a variable count to 0\n\n# Iterate through each number in the list\n    # Check if the number is greater than 0\n        # If it is, increment the count\n\n# Return the count",
            "requirements": "",
            "final_plan": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ",
            "code": "function count_positive_numbers(lst)\n    local count = 0\n\n    for _, num in ipairs(lst) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5437"
        },
        {
            "id": "61",
            "prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of substrings\n\n# Iterate through each starting index of the substring\n    # Iterate through each ending index of the substring\n        # Get the substring from the starting index to the ending index\n        # Compute the sum of the digits in the substring\n        # Check if the sum of the digits is equal to the length of the substring\n            # If true, increment the counter variable\n\n# Return the counter variable with the total number of substrings",
            "requirements": "",
            "final_plan": "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count",
            "code": "function count_substrings(string)\n    local count = 0\n\n    for i = 1, string.len(string) do\n        for j = i, string.len(string) do\n            local substring = string.sub(string, i, j)\n            local sum = compute_sum(substring)\n            \n            if sum == string.len(substring) then\n                count = count + 1\n            end\n        end\n    end\n\n    return count\nend\n\nfunction compute_sum(substring)\n    local sum = 0\n\n    for i = 1, string.len(substring) do\n        local digit = tonumber(string.sub(substring, i, i))\n        sum = sum + digit\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5242"
        },
        {
            "id": "250",
            "prompt": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the tuple\n    # Check if the current element is equal to the target element\n        # If it is, increment the counter by 1\n\n# Return the value of the counter variable",
            "requirements": "",
            "final_plan": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ",
            "code": "function count_occurrences(t, element)\n    local count = 0\n    \n    for i = 1, #t do\n        if t[i] == element then\n            count = count + 1\n        end\n    end\n    \n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5102"
        },
        {
            "id": "300",
            "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
            "draft_plan": "# Define a recursive function count_sequences with parameters n (length of the binary sequence), \n# curr_sum (current sum of the bits), and total_sum (the target sum of both halves)\n\n    # Base case: if n is 0, check if the current sum is equal to the target sum\n        # If so, return 1 (valid sequence)\n        # Otherwise, return 0 (invalid sequence)\n    \n    # Recursive case:\n        # Initialize a variable count to 0 (to keep track of the count of valid sequences)\n        \n        # Call the count_sequences function recursively with n-1, curr_sum+1, and total_sum\n        # Add the return value to count\n        \n        # Call the count_sequences function recursively with n-1, curr_sum-1, and total_sum\n        # Add the return value to count\n        \n        # Return the total count\n    \n# Call the count_sequences function with n as the length of the binary sequence, curr_sum as 0, and total_sum as 0 to get the count of valid sequences",
            "requirements": "",
            "final_plan": "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res ",
            "code": "function count_sequences(n, curr_sum, total_sum)\n    -- Base case: if n is 0, check if the current sum is equal to the target sum\n    if n == 0 then\n        if curr_sum == total_sum then\n            return 1 -- valid sequence\n        else\n            return 0 -- invalid sequence\n        end\n    end\n\n    -- Recursive case\n    local count = 0\n\n    -- Call the count_sequences function recursively with n-1, curr_sum+1, and total_sum\n    count = count + count_sequences(n-1, curr_sum+1, total_sum)\n\n    -- Call the count_sequences function recursively with n-1, curr_sum-1, and total_sum\n    count = count + count_sequences(n-1, curr_sum-1, total_sum)\n\n    -- Return the total count\n    return count\nend\n\n-- Call the count_sequences function with n as the length of the binary sequence, curr_sum as 0, and total_sum as 0\nlocal n = 2\nlocal curr_sum = 0\nlocal total_sum = 0\nlocal result = count_sequences(n, curr_sum, total_sum)\nprint(result)",
            "gen_tc": "",
            "sim_score": "0.4972"
        },
        {
            "id": "59",
            "prompt": "Write a function to find the nth octagonal number.",
            "draft_plan": "# Function to find the nth octagonal number\ndef find_octagonal_number(n):\n    # Calculate the nth octagonal number using the formula\n    octagonal_number = 3 * n * (n - 1) + 1\n    \n    # Return the result\n    return octagonal_number\n\n# Test the function\nn = 5\nresult = find_octagonal_number(n)\nprint(f\"The {n}th octagonal number is: {result}\")",
            "requirements": "",
            "final_plan": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ",
            "code": "-- Function to find the nth octagonal number\nfunction find_octagonal_number(n)\n    -- Calculate the nth octagonal number using the formula\n    local octagonal_number = 3 * n * (n - 1) + 1\n    \n    -- Return the result\n    return octagonal_number\nend\n\n-- Test the function\nlocal n = 5\nlocal result = find_octagonal_number(n)\nprint(\"The \"..n..\"th octagonal number is: \"..result)",
            "gen_tc": "",
            "sim_score": "0.4961"
        },
        {
            "id": "109",
            "prompt": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
            "draft_plan": "# Convert the binary string to a list of characters\n# Initialize a counter variable to keep track of the number of odd numbers\n\n# Rotate the binary string the given number of times\n    # Remove the last character from the binary string and prepend it to the front\n\n# Convert the rotated binary string back to a string\n# Iterate through each character in the rotated binary string\n    # Convert the character to an integer\n    # Check if the integer value is odd\n        # If so, increment the counter\n\n# Return the counter value",
            "requirements": "",
            "final_plan": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ",
            "code": "function count_odd_numbers(binary_str, rotations)\n    local binary_list = {}\n    local counter = 0\n\n    -- Convert the binary string to a list of characters\n    for char in string.gmatch(binary_str, \".\") do\n        table.insert(binary_list, char)\n    end\n\n    -- Rotate the binary string the given number of times\n    for i = 1, rotations do\n        local last_char = table.remove(binary_list)\n        table.insert(binary_list, 1, last_char)\n    end\n\n    -- Convert the rotated binary string back to a string\n    local rotated_binary_str = table.concat(binary_list)\n\n    -- Iterate through each character in the rotated binary string\n    for i = 1, string.len(rotated_binary_str) do\n        local char = string.sub(rotated_binary_str, i, i)\n        local num = tonumber(char)\n        \n        -- Check if the integer value is odd\n        if num % 2 == 1 then\n            counter = counter + 1\n        end\n    end\n\n    return counter\nend",
            "gen_tc": "",
            "sim_score": "0.4924"
        },
        {
            "id": "461",
            "prompt": "Write a python function to count the upper case characters in a given string.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of uppercase characters\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter variable\n\n# Return the counter variable, which represents the number of uppercase characters in the string",
            "requirements": "",
            "final_plan": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
            "code": "function count_uppercase_chars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= 'A' and char <= 'Z' then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4895"
        }
    ],
    "HumanEval/84": [
        {
            "id": "398",
            "prompt": "Write a function to compute the sum of digits of each number of a given list.",
            "draft_plan": "# Initialize an empty list to store the sum of digits for each number\n\n# Iterate through each number in the given list\n    # Convert the number to a string\n    # Initialize a variable to store the sum of digits\n    # Iterate through each digit in the string representation of the number\n        # Convert the digit back to an integer and add it to the sum of digits\n    # Append the sum of digits to the list\n\n# Return the list of sum of digits for each number",
            "requirements": "",
            "final_plan": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
            "code": "function compute_sum_of_digits(numbers)\n    local sum_of_digits = {}\n\n    for _, num in ipairs(numbers) do\n        local num_str = tostring(num)\n        local digits_sum = 0\n\n        for i = 1, string.len(num_str) do\n            digits_sum = digits_sum + tonumber(string.sub(num_str, i, i))\n        end\n\n        table.insert(sum_of_digits, digits_sum)\n    end\n\n    return sum_of_digits\nend",
            "gen_tc": "",
            "sim_score": "0.6171"
        },
        {
            "id": "138",
            "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
            "draft_plan": "# Initialize a variable 'n' with the given number\n\n# Iterate while 'n' is greater than 0\n    # Check if 'n' is divisible by 2\n        # If 'n' is divisible by 2, divide 'n' by 2\n        # Otherwise, subtract the largest power of 2 less than 'n' from 'n'\n\n# If 'n' becomes 0, return True\n# Otherwise, return False",
            "requirements": "",
            "final_plan": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True",
            "code": "function canRepresentAsPowerOf2(n)\n    while n > 0 do\n        if n % 2 == 0 then\n            n = n / 2\n        else\n            n = n - math.pow(2, math.floor(math.log(n, 2)))\n        end\n    end\n    \n    return n == 0\nend",
            "gen_tc": "",
            "sim_score": "0.5653"
        },
        {
            "id": "224",
            "prompt": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each bit in the binary representation of the number\n    # Check if the current bit is set (equal to 1)\n        # If yes, increment the counter variable\n\n# Return the counter variable, which represents the number of set bits",
            "requirements": "",
            "final_plan": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ",
            "code": "function count_set_bits(number)\n    local count = 0\n\n    while number > 0 do\n        if number % 2 == 1 then\n            count = count + 1\n        end\n        number = math.floor(number / 2)\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5505"
        },
        {
            "id": "479",
            "prompt": "Write a python function to find the first digit of a given number.",
            "draft_plan": "# Convert the given number to a string\n\n# Iterate through each character in the string\n    # Check if the character is a digit\n        # If it is, return the character as the first digit\n\n# If no digit is found, return \"None\"",
            "requirements": "",
            "final_plan": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ",
            "code": "function firstDigit(number)\n    local numberStr = tostring(number)\n\n    for i = 1, string.len(numberStr) do\n        local char = string.sub(numberStr, i, i)\n        if string.match(char, \"%d\") then\n            return char\n        end\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.5494"
        },
        {
            "id": "61",
            "prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of substrings\n\n# Iterate through each starting index of the substring\n    # Iterate through each ending index of the substring\n        # Get the substring from the starting index to the ending index\n        # Compute the sum of the digits in the substring\n        # Check if the sum of the digits is equal to the length of the substring\n            # If true, increment the counter variable\n\n# Return the counter variable with the total number of substrings",
            "requirements": "",
            "final_plan": "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count",
            "code": "function count_substrings(string)\n    local count = 0\n\n    for i = 1, string.len(string) do\n        for j = i, string.len(string) do\n            local substring = string.sub(string, i, j)\n            local sum = compute_sum(substring)\n            \n            if sum == string.len(substring) then\n                count = count + 1\n            end\n        end\n    end\n\n    return count\nend\n\nfunction compute_sum(substring)\n    local sum = 0\n\n    for i = 1, string.len(substring) do\n        local digit = tonumber(string.sub(substring, i, i))\n        sum = sum + digit\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5370"
        },
        {
            "id": "77",
            "prompt": "Write a python function to find whether a number is divisible by 11.",
            "draft_plan": "To determine whether a number is divisible by 11, we can use the following logic:\n\n1. Convert the number to a string.\n2. Iterate through the digits of the number.\n3. Add the digits in odd positions (starting from the rightmost digit) and subtract the sum of the digits in even positions.\n4. If the result is divisible by 11, the original number is also divisible by 11.\n\nHere is the code implementing this logic:\n\n```python\ndef is_divisible_by_11(number):\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Iterate through the digits of the number\n    sum_odd = 0\n    sum_even = 0\n    for i in range(len(number_str)):\n        digit = int(number_str[i])\n        \n        # Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0:\n            sum_odd += digit\n        else:\n            sum_even += digit\n    \n    # Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0:\n        return True\n    else:\n        return False\n```\n\nYou can use this function to check if a number is divisible by 11. For example:\n\n```python\nprint(is_divisible_by_11(121))  # Output: True\nprint(is_divisible_by_11(123))  # Output: False\n```",
            "requirements": "",
            "final_plan": "def is_Diff(n): \n    return (n % 11 == 0) ",
            "code": "function is_divisible_by_11(number)\n    -- Convert the number to a string\n    local number_str = tostring(number)\n    \n    -- Iterate through the digits of the number\n    local sum_odd = 0\n    local sum_even = 0\n    for i = 1, string.len(number_str) do\n        local digit = tonumber(string.sub(number_str, i, i))\n        \n        -- Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0 then\n            sum_even = sum_even + digit\n        else\n            sum_odd = sum_odd + digit\n        end\n    end\n    \n    -- Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0 then\n        return true\n    else\n        return false\n    end\nend\n\nprint(is_divisible_by_11(121))  -- Output: true\nprint(is_divisible_by_11(123))  -- Output: false",
            "gen_tc": "",
            "sim_score": "0.5362"
        },
        {
            "id": "271",
            "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
            "draft_plan": "# Initialize a variable `sum` to 0\n# Initialize a counter variable `count` to 0\n\n# Iterate through numbers starting from 1 until `count` reaches `n`\n    # Check if the current number is even\n        # Increment the `count` variable\n        # Add the current number raised to the fifth power to the `sum` variable\n\n# Return the `sum` variable",
            "requirements": "",
            "final_plan": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ",
            "code": "function sum_of_even_powers(n)\n    local sum = 0\n    local count = 0\n\n    for i = 1, math.huge do\n        if i % 2 == 0 then\n            count = count + 1\n            sum = sum + math.pow(i, 5)\n        end\n\n        if count == n then\n            break\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5272"
        },
        {
            "id": "287",
            "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
            "draft_plan": "# Initialize the sum of squares variable to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Add the square of the current number to the sum of squares variable\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
            "code": "function sum_of_squares(n)\n    local sum = 0\n\n    for i = 1, n do\n        if i % 2 == 0 then\n            sum = sum + (i * i)\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5254"
        },
        {
            "id": "160",
            "prompt": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
            "draft_plan": "# Iterate through all possible values of x from 0 to n\n    # Calculate the value of y using the equation y = (n - ax) / b\n    # Check if y is an integer\n        # If y is an integer, return the values of x and y as a tuple\n\n# If no solution is found, return None",
            "requirements": "",
            "final_plan": "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None",
            "code": "function find_solution(a, b, n)\n    for x = 0, n do\n        local y = (n - a * x) / b\n        if y == math.floor(y) then\n            return x, y\n        end\n    end\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.5250"
        },
        {
            "id": "99",
            "prompt": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
            "draft_plan": "# Initialize an empty string to store the binary representation\n# Check if the input number is 0, if so return '0' as the binary representation\n# Iterate until the input number becomes 0\n    # Append the remainder of the input number divided by 2 to the binary representation string\n    # Update the input number by dividing it by 2, discarding the remainder\n\n# Reverse the binary representation string\n\n# Return the binary representation string",
            "requirements": "",
            "final_plan": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") ",
            "code": "function decimalToBinary(decimal)\n    local binary = \"\"\n\n    if decimal == 0 then\n        return \"0\"\n    end\n\n    while decimal > 0 do\n        binary = tostring(decimal % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n\n    return binary\nend",
            "gen_tc": "",
            "sim_score": "0.5212"
        }
    ],
    "HumanEval/85": [
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.8541"
        },
        {
            "id": "453",
            "prompt": "Write a python function to find the sum of even factors of a number.",
            "draft_plan": "# Initialize the sum of even factors to 0\n\n# Iterate from 1 to the given number (inclusive)\n    # Check if the current number is a factor of the given number\n        # Check if the current number is even\n            # If the current number is even, add it to the sum of even factors\n\n# Return the sum of even factors",
            "requirements": "",
            "final_plan": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res",
            "code": "function sum_of_even_factors(number)\n    local sum = 0\n\n    for i = 1, number do\n        if number % i == 0 and i % 2 == 0 then\n            sum = sum + i\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6948"
        },
        {
            "id": "274",
            "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
            "draft_plan": "# Import the math module\n\n# Define a function that takes in a positive integer n\n    # Initialize a variable `sum_even` to store the sum of even index binomial coefficients\n    # Iterate from 0 to n\n        # Calculate the binomial coefficient using the math module's comb function\n        # Check if the index is even\n            # If it is even, add the binomial coefficient to `sum_even`\n    # Return `sum_even`",
            "requirements": "",
            "final_plan": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ",
            "code": "import math\n\ndef sum_even_binomial_coefficients(n):\n    sum_even = 0\n    for i in range(n+1):\n        coefficient = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even += coefficient\n    return sum_even",
            "gen_tc": "",
            "sim_score": "0.6898"
        },
        {
            "id": "412",
            "prompt": "Write a python function to remove odd numbers from a given list.",
            "draft_plan": "# Create an empty list to store the even numbers\n\n# Iterate through each number in the given list\n    # Check if the number is even (number % 2 == 0)\n        # If the number is even, append it to the list of even numbers\n\n# Return the list of even numbers",
            "requirements": "",
            "final_plan": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
            "code": "function remove_odd_numbers(lst)\n    local even_lst = {}\n\n    for _, num in ipairs(lst) do\n        if num % 2 == 0 then\n            table.insert(even_lst, num)\n        end\n    end\n\n    return even_lst\nend",
            "gen_tc": "",
            "sim_score": "0.6865"
        },
        {
            "id": "420",
            "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of the cube of even numbers\n# Iterate through each even number from 2 to (2*n) with a step size of 2\n    # Calculate the cube of the current even number\n    # Add the cube to the sum\n\n# Return the sum of the cube of even numbers",
            "requirements": "",
            "final_plan": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
            "code": "function cube_sum_of_even(n)\n    local sum = 0\n    \n    for i = 2, 2 * n, 2 do\n        local cube = i * i * i\n        sum = sum + cube\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6431"
        },
        {
            "id": "166",
            "prompt": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
            "draft_plan": "# Initialize a variable to keep track of the count of pairs\n# Iterate through each element in the list\n    # Iterate through each element after the current element\n        # Check if the xor of the current pair is an even number\n            # If it is, increment the count of pairs\n\n# Return the count of pairs",
            "requirements": "",
            "final_plan": "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count",
            "code": "function count_even_xor_pairs(list)\n    local pair_count = 0\n\n    for i = 1, #list do\n        for j = i+1, #list do\n            if (list[i] ~ list[j]) % 2 == 0 then\n                pair_count = pair_count + 1\n            end\n        end\n    end\n\n    return pair_count\nend",
            "gen_tc": "",
            "sim_score": "0.6237"
        },
        {
            "id": "426",
            "prompt": "Write a function to filter odd numbers.",
            "draft_plan": "# Initialize an empty list to store the filtered numbers\n\n# Iterate through each number in the input list\n    # Check if the number is odd\n        # If the number is odd, append it to the filtered list\n\n# Return the filtered list",
            "requirements": "",
            "final_plan": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums",
            "code": "function filter_odd_numbers(number_list)\n    local filtered_list = {}\n\n    for _, num in ipairs(number_list) do\n        if num % 2 ~= 0 then\n            table.insert(filtered_list, num)\n        end\n    end\n\n    return filtered_list\nend",
            "gen_tc": "",
            "sim_score": "0.6223"
        },
        {
            "id": "287",
            "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
            "draft_plan": "# Initialize the sum of squares variable to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Add the square of the current number to the sum of squares variable\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
            "code": "function sum_of_squares(n)\n    local sum = 0\n\n    for i = 1, n do\n        if i % 2 == 0 then\n            sum = sum + (i * i)\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6159"
        },
        {
            "id": "235",
            "prompt": "Write a python function to set all even bits of a given number.",
            "draft_plan": "# Create a mask with all even bits set to 1 and odd bits set to 0\n# Perform bitwise OR operation between the given number and the mask\n# Return the updated number",
            "requirements": "",
            "final_plan": "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) ",
            "code": "function set_even_bits(n)\n    local mask = 0xAAAAAAAA -- Mask with all even bits set to 1 and odd bits set to 0\n    return bit.bor(n, mask)\nend",
            "gen_tc": "",
            "sim_score": "0.6018"
        },
        {
            "id": "226",
            "prompt": "Write a python function to remove the characters which have odd index values of a given string.",
            "draft_plan": "# Initialize an empty string to store the result\n\n# Iterate through each character and its index in the input string\n    # Check if the index of the current character is even\n        # If it is even, append the character to the result string\n\n# Return the result string",
            "requirements": "",
            "final_plan": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result",
            "code": "function remove_odd_index_chars(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        if i % 2 == 0 then\n            result = result .. string.sub(str, i, i)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5983"
        }
    ],
    "HumanEval/86": [
        {
            "id": "141",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Implement a sorting algorithm such as bubble sort, insertion sort, merge sort, quick sort, etc.\n\n# Define a function to take a list of elements as input\n    # Iterate through the list to compare each element with its adjacent element(s)\n        # Swap elements if they are in the wrong order\n    # Repeat the above steps until the list is sorted\n\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums",
            "code": "-- Bubble Sort implementation\nfunction sort_list(list)\n    local n = #list\n    for i = 1, n-1 do\n        for j = 1, n-i do\n            if list[j] > list[j+1] then\n                list[j], list[j+1] = list[j+1], list[j]\n            end\n        end\n    end\n    return list\nend",
            "gen_tc": "",
            "sim_score": "0.5171"
        },
        {
            "id": "104",
            "prompt": "Write a function to sort each sublist of strings in a given list of lists.",
            "draft_plan": "# Iterate through each sublist in the given list\n    # Sort the sublist using the sorted() function and assign the sorted sublist back to the original sublist\n\n# Return the modified list with sorted sublists",
            "requirements": "",
            "final_plan": "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n",
            "code": "function sort_sublists(list_of_lists)\n    for i = 1, #list_of_lists do\n        list_of_lists[i] = table.sort(list_of_lists[i])\n    end\n    return list_of_lists\nend",
            "gen_tc": "",
            "sim_score": "0.5019"
        },
        {
            "id": "131",
            "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
            "draft_plan": "# Create a list of vowels (including both lowercase and uppercase)\n# Convert the input string into a list of characters\n\n# Initialize two pointers: one at the start of the string and one at the end\n# Iterate while the pointers don't overlap\n    # Check if the character at the start pointer is a vowel\n        # If it is, then check if the character at the end pointer is also a vowel\n            # If it is, swap the characters at the start and end pointers\n            # Move the start pointer to the next character\n            # Move the end pointer to the previous character\n        # If the character at the end pointer is not a vowel, move the end pointer to the previous character\n    \n# Convert the modified list of characters back into a string and return it",
            "requirements": "",
            "final_plan": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string",
            "code": "function reverse_vowels(str)\n    local vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }\n    local chars = {}\n    for i = 1, string.len(str) do\n        table.insert(chars, string.sub(str, i, i))\n    end\n    \n    local start = 1\n    local finish = string.len(str)\n    \n    while start < finish do\n        if is_vowel(chars[start], vowels) then\n            while not is_vowel(chars[finish], vowels) and finish > start do\n                finish = finish - 1\n            end\n            if finish > start then\n                chars[start], chars[finish] = chars[finish], chars[start]\n                start = start + 1\n                finish = finish - 1\n            end\n        else\n            start = start + 1\n        end\n    end\n    \n    return table.concat(chars)\nend\n\nfunction is_vowel(char, vowels)\n    for _, vowel in ipairs(vowels) do\n        if char == vowel then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5015"
        },
        {
            "id": "456",
            "prompt": "Write a function to reverse each string in a given list of string values.",
            "draft_plan": "# Iterate through each string in the given list\n    # Reverse the current string using string slicing\n    # Update the current string in the list with the reversed string\n\n# Return the modified list",
            "requirements": "",
            "final_plan": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result",
            "code": "function reverse_strings(str_list)\n    for i = 1, #str_list do\n        str_list[i] = string.reverse(str_list[i])\n    end\n    return str_list\nend",
            "gen_tc": "",
            "sim_score": "0.4970"
        },
        {
            "id": "230",
            "prompt": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
            "draft_plan": "# Define a function that takes in a string and a character as arguments\n    # Convert the string into a list of characters\n    # Iterate through each character in the list\n        # Check if the character is a blank space\n            # If it is, replace it with the given character\n    # Join the list of characters back into a string\n    # Return the modified string\n\n# Example usage:\n# string = \"Hello World\"\n# character = \"-\"\n# modified_string = replace_spaces(string, character)\n# print(modified_string) --> \"Hello-World\"",
            "requirements": "",
            "final_plan": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2",
            "code": "function replace_spaces(str, char)\n    local chars = {}\n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        if c == \" \" then\n            c = char\n        end\n        table.insert(chars, c)\n    end\n    return table.concat(chars)\nend\n\nlocal string = \"Hello World\"\nlocal character = \"-\"\nlocal modified_string = replace_spaces(string, character)\nprint(modified_string) --> \"Hello-World\"",
            "gen_tc": "",
            "sim_score": "0.4786"
        },
        {
            "id": "71",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Use the built-in sorted() function to sort the list in ascending order\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums",
            "code": "function sort_list(elements)\n    return sorted(elements)\nend",
            "gen_tc": "",
            "sim_score": "0.4686"
        },
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.4660"
        },
        {
            "id": "229",
            "prompt": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
            "draft_plan": "# Create two empty lists, one for negative elements and one for positive elements\n\n# Iterate through the first n elements of the array\n    # Check if the element is negative\n        # If it is, append it to the negative elements list\n    # Otherwise, append it to the positive elements list\n\n# Concatenate the negative elements list with the positive elements list\n# Return the resulting list",
            "requirements": "",
            "final_plan": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr",
            "code": "function rearrangeArray(arr, n)\n    local negativeElements = {}\n    local positiveElements = {}\n\n    for i = 1, n do\n        if arr[i] < 0 then\n            table.insert(negativeElements, arr[i])\n        else\n            table.insert(positiveElements, arr[i])\n        end\n    end\n\n    for i = 1, #positiveElements do\n        table.insert(negativeElements, positiveElements[i])\n    end\n\n    return negativeElements\nend",
            "gen_tc": "",
            "sim_score": "0.4605"
        },
        {
            "id": "90",
            "prompt": "Write a python function to find the length of the longest word.",
            "draft_plan": "# Split the input sentence into words using the split() function\n# Initialize a variable maxLength to 0\n\n# Iterate through each word in the list of words\n    # Check if the length of the current word is greater than maxLength\n        # If it is, update maxLength with the length of the current word\n\n# Return maxLength",
            "requirements": "",
            "final_plan": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max",
            "code": "function find_longest_word(sentence)\n    local words = split_sentence(sentence)\n    local max_length = 0\n\n    for _, word in ipairs(words) do\n        local length = string.len(word)\n        if length > max_length then\n            max_length = length\n        end\n    end\n\n    return max_length\nend\n\nfunction split_sentence(sentence)\n    local words = {}\n    for word in string.gmatch(sentence, \"%S+\") do\n        table.insert(words, word)\n    end\n    return words\nend",
            "gen_tc": "",
            "sim_score": "0.4599"
        },
        {
            "id": "474",
            "prompt": "Write a function to replace characters in a string.",
            "draft_plan": "# Initialize an empty string to store the modified string\n\n# Iterate through each character in the input string\n    # Check if the character needs to be replaced\n        # If replacement is required, append the replacement character to the modified string\n        # Otherwise, append the original character to the modified string\n\n# Return the modified string",
            "requirements": "",
            "final_plan": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2",
            "code": "function replaceCharacters(str, replacements)\n    local modified = \"\"\n    \n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        \n        if replacements[c] then\n            modified = modified .. replacements[c]\n        else\n            modified = modified .. c\n        end\n    end\n    \n    return modified\nend",
            "gen_tc": "",
            "sim_score": "0.4594"
        }
    ],
    "HumanEval/87": [
        {
            "id": "12",
            "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
            "draft_plan": "# Calculate the sum of each row in the matrix\n\n# Create a list of tuples, where each tuple contains the index of the row and its corresponding sum\n\n# Sort the list of tuples based on the sum in ascending order\n\n# Create an empty sorted matrix\n\n# Iterate through the sorted list of tuples\n    # Append the corresponding row from the original matrix to the sorted matrix\n\n# Return the sorted matrix",
            "requirements": "",
            "final_plan": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result",
            "code": "function sort_matrix(matrix)\n    local sum_rows = {}\n    \n    -- Calculate the sum of each row in the matrix\n    for i, row in ipairs(matrix) do\n        local row_sum = 0\n        for _, value in ipairs(row) do\n            row_sum = row_sum + value\n        end\n        table.insert(sum_rows, {i, row_sum}) -- Create a tuple with the row index and its sum\n    end\n\n    -- Sort the list of tuples based on the sum in ascending order\n    table.sort(sum_rows, function(a, b) return a[2] < b[2] end)\n\n    local sorted_matrix = {}\n\n    -- Iterate through the sorted list of tuples\n    for _, tuple in ipairs(sum_rows) do\n        -- Append the corresponding row from the original matrix to the sorted matrix\n        table.insert(sorted_matrix, matrix[tuple[1]])\n    end\n\n    return sorted_matrix\nend",
            "gen_tc": "",
            "sim_score": "0.5282"
        },
        {
            "id": "94",
            "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
            "draft_plan": "# Initialize the minimum second value as positive infinity\n# Initialize the first value of the tuple with minimum second value as None\n\n# Iterate through each tuple in the list\n    # Check if the second value of the current tuple is smaller than the current minimum second value\n        # If yes, update the minimum second value and the first value of the tuple\n\n# Return the first value of the tuple with the smallest second value",
            "requirements": "",
            "final_plan": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ",
            "code": "function get_first_smallest_value(test_list)\n    local min_second = math.huge\n    local first_value = nil\n    \n    for _, tup in ipairs(test_list) do\n        local second_value = tup[2]\n        \n        if second_value < min_second then\n            min_second = second_value\n            first_value = tup[1]\n        end\n    end\n    \n    return first_value\nend",
            "gen_tc": "",
            "sim_score": "0.4835"
        },
        {
            "id": "64",
            "prompt": "Write a function to sort a list of tuples using the second value of each tuple.",
            "draft_plan": "# Define a function to sort a list of tuples by the second value\n    # Use the sorted() function and a lambda function as the key parameter\n    # The lambda function will extract the second value from each tuple for sorting\n    \n# Call the sorted() function with the list of tuples and the custom sorting function as arguments\n# Return the sorted list of tuples",
            "requirements": "",
            "final_plan": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks",
            "code": "function sort_tuples_by_second_value(tuples)\n    return table.sort(tuples, function(a, b) return a[2] < b[2] end)\nend",
            "gen_tc": "",
            "sim_score": "0.4674"
        },
        {
            "id": "272",
            "prompt": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.",
            "draft_plan": "# Create an empty list to store the rear elements\n# Iterate through each tuple in the input list\n    # Append the rear element of the current tuple to the list\n\n# Return the list containing the rear elements",
            "requirements": "",
            "final_plan": "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) ",
            "code": "function get_rear_elements(tuples)\n    local rear_elements = {}\n    \n    for i, tuple in ipairs(tuples) do\n        table.insert(rear_elements, tuple[#tuple])\n    end\n    \n    return rear_elements\nend",
            "gen_tc": "",
            "sim_score": "0.4608"
        },
        {
            "id": "106",
            "prompt": "Write a function to append the given list to the given tuples.",
            "draft_plan": "# Create an empty list to store the modified tuples\n\n# Iterate through each tuple in the given list\n    # Convert the tuple to a list\n    # Append the given list to the current tuple\n    # Convert the modified tuple back to a tuple\n    # Append the modified tuple to the list of modified tuples\n\n# Return the list of modified tuples",
            "requirements": "",
            "final_plan": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) ",
            "code": "def append_list_to_tuples(given_list, tuples):\n    \"\"\"Function to append the given list to the given tuples.\n    \"\"\"\n    modified_tuples = []\n\n    for tup in tuples:\n        modified_tuple = list(tup)\n        modified_tuple.extend(given_list)\n        modified_tuples.append(tuple(modified_tuple))\n\n    return modified_tuples",
            "gen_tc": "",
            "sim_score": "0.4585"
        },
        {
            "id": "470",
            "prompt": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.",
            "draft_plan": "# Initialize an empty list to store the pairwise addition results\n\n# Iterate through the elements in the tuple up to the second to last element\n    # Compute the pairwise addition of the current element and its neighboring element\n    # Append the result to the list\n\n# Return the list of pairwise addition results",
            "requirements": "",
            "final_plan": "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ",
            "code": "function pairwise_addition(tup)\n    local result = {}\n\n    for i = 1, #tup - 1 do\n        local sum = tup[i] + tup[i+1]\n        table.insert(result, sum)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4570"
        },
        {
            "id": "445",
            "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
            "draft_plan": "# Create an empty list to store the result of multiplication\n\n# Iterate through the indexes of the tuples using the range of the length of the tuples\n    # Multiply the elements at the current index of both tuples\n    # Append the result to the list\n\n# Return the list",
            "requirements": "",
            "final_plan": "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
            "code": "function multiply_tuples(tuple1, tuple2)\n    local result = {}\n\n    for i = 1, #tuple1 do\n        local multiplication = tuple1[i] * tuple2[i]\n        table.insert(result, multiplication)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4522"
        },
        {
            "id": "63",
            "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.",
            "draft_plan": "# Initialize the maximum difference variable to 0\n\n# Iterate through each pair in the list\n    # Calculate the difference between the second element and the first element of the current pair\n    # Check if the current difference is greater than the maximum difference\n        # If it is, update the maximum difference\n\n# Return the maximum difference",
            "requirements": "",
            "final_plan": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ",
            "code": "function find_max_difference(tuple_list)\n    local max_difference = 0\n\n    for _, tuple in ipairs(tuple_list) do\n        local difference = tuple[2] - tuple[1]\n        if difference > max_difference then\n            max_difference = difference\n        end\n    end\n\n    return max_difference\nend",
            "gen_tc": "",
            "sim_score": "0.4463"
        },
        {
            "id": "473",
            "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
            "draft_plan": "# Initialize the intersection as the first tuple in the given tuple list\n\n# Iterate through each tuple in the given tuple list starting from the second tuple\n    # Initialize the current intersection as an empty list\n\n    # Iterate through each element in the current tuple\n        # Check if the element is present in the previous intersection\n            # If yes, append the element to the current intersection\n\n    # Update the intersection as the current intersection\n\n# Return the intersection",
            "requirements": "",
            "final_plan": "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)",
            "code": "function tupleIntersection(tuple_list)\n    local intersection = tuple_list[1]\n\n    for i = 2, #tuple_list do\n        local current_tuple = tuple_list[i]\n        local current_intersection = {}\n\n        for _, element in ipairs(current_tuple) do\n            if contains(intersection, element) then\n                table.insert(current_intersection, element)\n            end\n        end\n\n        intersection = current_intersection\n    end\n\n    return intersection\nend\n\nfunction contains(list, element)\n    for _, value in ipairs(list) do\n        if value == element then\n            return true\n        end\n    end\n\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4451"
        },
        {
            "id": "401",
            "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
            "draft_plan": "# Create an empty result tuple\n\n# Iterate through the nested tuples, getting each inner tuple\n    # Iterate through the inner tuples, getting each element and its index\n        # Check if the index is within the range of the result tuple\n            # If it is, add the element at the corresponding index to the current element\n            # Create a new tuple with the updated element and append it to the result tuple\n        # If the index is not within the range of the result tuple\n            # Create a new tuple with only the current element and append it to the result tuple\n\n# Return the result tuple",
            "requirements": "",
            "final_plan": "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
            "code": "function add_tuples(t1, t2)\n    local result = {}\n\n    for i, inner_tuple in ipairs(t1) do\n        local new_tuple = {}\n\n        for j, element in ipairs(inner_tuple) do\n            if j <= #result then\n                new_tuple[j] = element + result[j]\n            else\n                new_tuple[j] = element\n            end\n        end\n\n        table.insert(result, new_tuple)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4448"
        }
    ],
    "HumanEval/88": [
        {
            "id": "476",
            "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.",
            "draft_plan": "# Sort the array in ascending order\n# Initialize variables for the smallest and largest values\n\n# Get the smallest value from the sorted array (first element)\n# Get the largest value from the sorted array (last element)\n\n# Calculate the sum of the smallest and largest values\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum",
            "code": "function sum_smallest_largest(arr)\n    table.sort(arr) -- Sort the array in ascending order\n    \n    local smallest = arr[1] -- Get the smallest value\n    local largest = arr[#arr] -- Get the largest value\n    \n    local sum = smallest + largest -- Calculate the sum\n    \n    return sum -- Return the sum\nend",
            "gen_tc": "",
            "sim_score": "0.6285"
        },
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.6266"
        },
        {
            "id": "229",
            "prompt": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
            "draft_plan": "# Create two empty lists, one for negative elements and one for positive elements\n\n# Iterate through the first n elements of the array\n    # Check if the element is negative\n        # If it is, append it to the negative elements list\n    # Otherwise, append it to the positive elements list\n\n# Concatenate the negative elements list with the positive elements list\n# Return the resulting list",
            "requirements": "",
            "final_plan": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr",
            "code": "function rearrangeArray(arr, n)\n    local negativeElements = {}\n    local positiveElements = {}\n\n    for i = 1, n do\n        if arr[i] < 0 then\n            table.insert(negativeElements, arr[i])\n        else\n            table.insert(positiveElements, arr[i])\n        end\n    end\n\n    for i = 1, #positiveElements do\n        table.insert(negativeElements, positiveElements[i])\n    end\n\n    return negativeElements\nend",
            "gen_tc": "",
            "sim_score": "0.5909"
        },
        {
            "id": "428",
            "prompt": "Write a function to sort the given array by using shell sort.",
            "draft_plan": "# Define a function to perform shell sort on the given array\n    # Start with a large gap (length of array divided by 2)\n    # Iterate until the gap becomes 0\n        # Iterate through the array from the current gap to the end\n            # Compare the current element with the element at the position gap steps before it\n            # If the current element is smaller, swap them\n        # Reduce the gap by dividing it by 2\n\n# Call the shell sort function on the given array\n# Return the sorted array",
            "requirements": "",
            "final_plan": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list",
            "code": "function shellSort(arr)\n    local n = #arr\n    local gap = math.floor(n / 2)\n    \n    while gap > 0 do\n        for i = gap + 1, n do\n            local temp = arr[i]\n            local j = i\n            \n            while j > gap and arr[j - gap] > temp do\n                arr[j] = arr[j - gap]\n                j = j - gap\n            end\n            \n            arr[j] = temp\n        end\n        \n        gap = math.floor(gap / 2)\n    end\n    \n    return arr\nend\n\n-- Test the function\nlocal arr = {9, 5, 2, 7, 1, 3}\nlocal sortedArr = shellSort(arr)\nfor i = 1, #sortedArr do\n    print(sortedArr[i])\nend",
            "gen_tc": "",
            "sim_score": "0.5786"
        },
        {
            "id": "12",
            "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
            "draft_plan": "# Calculate the sum of each row in the matrix\n\n# Create a list of tuples, where each tuple contains the index of the row and its corresponding sum\n\n# Sort the list of tuples based on the sum in ascending order\n\n# Create an empty sorted matrix\n\n# Iterate through the sorted list of tuples\n    # Append the corresponding row from the original matrix to the sorted matrix\n\n# Return the sorted matrix",
            "requirements": "",
            "final_plan": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result",
            "code": "function sort_matrix(matrix)\n    local sum_rows = {}\n    \n    -- Calculate the sum of each row in the matrix\n    for i, row in ipairs(matrix) do\n        local row_sum = 0\n        for _, value in ipairs(row) do\n            row_sum = row_sum + value\n        end\n        table.insert(sum_rows, {i, row_sum}) -- Create a tuple with the row index and its sum\n    end\n\n    -- Sort the list of tuples based on the sum in ascending order\n    table.sort(sum_rows, function(a, b) return a[2] < b[2] end)\n\n    local sorted_matrix = {}\n\n    -- Iterate through the sorted list of tuples\n    for _, tuple in ipairs(sum_rows) do\n        -- Append the corresponding row from the original matrix to the sorted matrix\n        table.insert(sorted_matrix, matrix[tuple[1]])\n    end\n\n    return sorted_matrix\nend",
            "gen_tc": "",
            "sim_score": "0.5772"
        },
        {
            "id": "141",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Implement a sorting algorithm such as bubble sort, insertion sort, merge sort, quick sort, etc.\n\n# Define a function to take a list of elements as input\n    # Iterate through the list to compare each element with its adjacent element(s)\n        # Swap elements if they are in the wrong order\n    # Repeat the above steps until the list is sorted\n\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums",
            "code": "-- Bubble Sort implementation\nfunction sort_list(list)\n    local n = #list\n    for i = 1, n-1 do\n        for j = 1, n-i do\n            if list[j] > list[j+1] then\n                list[j], list[j+1] = list[j+1], list[j]\n            end\n        end\n    end\n    return list\nend",
            "gen_tc": "",
            "sim_score": "0.5760"
        },
        {
            "id": "71",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Use the built-in sorted() function to sort the list in ascending order\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums",
            "code": "function sort_list(elements)\n    return sorted(elements)\nend",
            "gen_tc": "",
            "sim_score": "0.5624"
        },
        {
            "id": "412",
            "prompt": "Write a python function to remove odd numbers from a given list.",
            "draft_plan": "# Create an empty list to store the even numbers\n\n# Iterate through each number in the given list\n    # Check if the number is even (number % 2 == 0)\n        # If the number is even, append it to the list of even numbers\n\n# Return the list of even numbers",
            "requirements": "",
            "final_plan": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
            "code": "function remove_odd_numbers(lst)\n    local even_lst = {}\n\n    for _, num in ipairs(lst) do\n        if num % 2 == 0 then\n            table.insert(even_lst, num)\n        end\n    end\n\n    return even_lst\nend",
            "gen_tc": "",
            "sim_score": "0.5526"
        },
        {
            "id": "64",
            "prompt": "Write a function to sort a list of tuples using the second value of each tuple.",
            "draft_plan": "# Define a function to sort a list of tuples by the second value\n    # Use the sorted() function and a lambda function as the key parameter\n    # The lambda function will extract the second value from each tuple for sorting\n    \n# Call the sorted() function with the list of tuples and the custom sorting function as arguments\n# Return the sorted list of tuples",
            "requirements": "",
            "final_plan": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks",
            "code": "function sort_tuples_by_second_value(tuples)\n    return table.sort(tuples, function(a, b) return a[2] < b[2] end)\nend",
            "gen_tc": "",
            "sim_score": "0.5335"
        },
        {
            "id": "426",
            "prompt": "Write a function to filter odd numbers.",
            "draft_plan": "# Initialize an empty list to store the filtered numbers\n\n# Iterate through each number in the input list\n    # Check if the number is odd\n        # If the number is odd, append it to the filtered list\n\n# Return the filtered list",
            "requirements": "",
            "final_plan": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums",
            "code": "function filter_odd_numbers(number_list)\n    local filtered_list = {}\n\n    for _, num in ipairs(number_list) do\n        if num % 2 ~= 0 then\n            table.insert(filtered_list, num)\n        end\n    end\n\n    return filtered_list\nend",
            "gen_tc": "",
            "sim_score": "0.5170"
        }
    ],
    "HumanEval/89": [
        {
            "id": "131",
            "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
            "draft_plan": "# Create a list of vowels (including both lowercase and uppercase)\n# Convert the input string into a list of characters\n\n# Initialize two pointers: one at the start of the string and one at the end\n# Iterate while the pointers don't overlap\n    # Check if the character at the start pointer is a vowel\n        # If it is, then check if the character at the end pointer is also a vowel\n            # If it is, swap the characters at the start and end pointers\n            # Move the start pointer to the next character\n            # Move the end pointer to the previous character\n        # If the character at the end pointer is not a vowel, move the end pointer to the previous character\n    \n# Convert the modified list of characters back into a string and return it",
            "requirements": "",
            "final_plan": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string",
            "code": "function reverse_vowels(str)\n    local vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }\n    local chars = {}\n    for i = 1, string.len(str) do\n        table.insert(chars, string.sub(str, i, i))\n    end\n    \n    local start = 1\n    local finish = string.len(str)\n    \n    while start < finish do\n        if is_vowel(chars[start], vowels) then\n            while not is_vowel(chars[finish], vowels) and finish > start do\n                finish = finish - 1\n            end\n            if finish > start then\n                chars[start], chars[finish] = chars[finish], chars[start]\n                start = start + 1\n                finish = finish - 1\n            end\n        else\n            start = start + 1\n        end\n    end\n    \n    return table.concat(chars)\nend\n\nfunction is_vowel(char, vowels)\n    for _, vowel in ipairs(vowels) do\n        if char == vowel then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5305"
        },
        {
            "id": "109",
            "prompt": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
            "draft_plan": "# Convert the binary string to a list of characters\n# Initialize a counter variable to keep track of the number of odd numbers\n\n# Rotate the binary string the given number of times\n    # Remove the last character from the binary string and prepend it to the front\n\n# Convert the rotated binary string back to a string\n# Iterate through each character in the rotated binary string\n    # Convert the character to an integer\n    # Check if the integer value is odd\n        # If so, increment the counter\n\n# Return the counter value",
            "requirements": "",
            "final_plan": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ",
            "code": "function count_odd_numbers(binary_str, rotations)\n    local binary_list = {}\n    local counter = 0\n\n    -- Convert the binary string to a list of characters\n    for char in string.gmatch(binary_str, \".\") do\n        table.insert(binary_list, char)\n    end\n\n    -- Rotate the binary string the given number of times\n    for i = 1, rotations do\n        local last_char = table.remove(binary_list)\n        table.insert(binary_list, 1, last_char)\n    end\n\n    -- Convert the rotated binary string back to a string\n    local rotated_binary_str = table.concat(binary_list)\n\n    -- Iterate through each character in the rotated binary string\n    for i = 1, string.len(rotated_binary_str) do\n        local char = string.sub(rotated_binary_str, i, i)\n        local num = tonumber(char)\n        \n        -- Check if the integer value is odd\n        if num % 2 == 1 then\n            counter = counter + 1\n        end\n    end\n\n    return counter\nend",
            "gen_tc": "",
            "sim_score": "0.5129"
        },
        {
            "id": "102",
            "prompt": "Write a function to convert a snake case string to camel case string.",
            "draft_plan": "# Split the snake case string by underscore to get individual words\n# Capitalize the first letter of each word except the first word\n# Join the words together to form the camel case string\n# Return the camel case string",
            "requirements": "",
            "final_plan": "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
            "code": "function snake_to_camel(snake_case_str)\n    local words = {}\n    for word in string.gmatch(snake_case_str, \"[^_]+\") do\n        table.insert(words, word)\n    end\n    \n    local camel_case_str = \"\"\n    for i, word in ipairs(words) do\n        if i > 1 then\n            word = string.upper(string.sub(word, 1, 1)) .. string.sub(word, 2)\n        end\n        camel_case_str = camel_case_str .. word\n    end\n    \n    return camel_case_str\nend",
            "gen_tc": "",
            "sim_score": "0.5096"
        },
        {
            "id": "269",
            "prompt": "Write a function to find the ascii value of a character.",
            "draft_plan": "To find the ASCII value of a character in Python, you can use the `ord()` function. Here is the code logic:\n\n1. Define a function `find_ascii_value(char)` that takes a character as input.\n2. Inside the function, use the `ord()` function to find the ASCII value of the character.\n3. Return the ASCII value.\n\nHere is the code:\n\n```python\ndef find_ascii_value(char):\n    return ord(char)\n```\n\nYou can then call this function and pass the character whose ASCII value you want to find, like this:\n\n```python\nprint(find_ascii_value('A')) # Output: 65\n```\n\nNote that the `ord()` function only works with single characters. If you pass a string with multiple characters, it will raise a `TypeError`.",
            "requirements": "",
            "final_plan": "def ascii_value(k):\n  ch=k\n  return ord(ch)",
            "code": "In Lua, the `string.byte()` function can be used to find the ASCII value of a character. Here is the Lua code to find the ASCII value of a character:\n\n```lua\nfunction find_ascii_value(char)\n    return string.byte(char)\nend\n```\n\nYou can then call this function and pass the character whose ASCII value you want to find, like this:\n\n```lua\nprint(find_ascii_value(\"A\")) -- Output: 65\n```\n\nNote that in Lua, you need to pass the character as a string to the `string.byte()` function.",
            "gen_tc": "",
            "sim_score": "0.4829"
        },
        {
            "id": "310",
            "prompt": "Write a function to convert a given string to a tuple of characters.",
            "draft_plan": "# Initialize an empty tuple\n\n# Iterate through each character in the input string\n    # Append the character to the tuple\n\n# Return the tuple",
            "requirements": "",
            "final_plan": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result",
            "code": "function string_to_tuple(string)\n    local tuple = {}\n    \n    for i = 1, string.len(string) do\n        local char = string.sub(string, i, i)\n        table.insert(tuple, char)\n    end\n    \n    return tuple\nend",
            "gen_tc": "",
            "sim_score": "0.4809"
        },
        {
            "id": "83",
            "prompt": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
            "draft_plan": "# Define a function to calculate the character made by adding the ASCII values modulo 26\n    # Initialize a variable to store the sum of ASCII values\n    # Iterate through each character in the given string\n        # Add the ASCII value of the current character to the sum\n    # Calculate the modulo 26 of the sum\n    # Convert the result back to a character using the ASCII value\n    # Return the resulting character",
            "requirements": "",
            "final_plan": "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)",
            "code": "function calculate_ascii_modulo_26(string)\n    local sum = 0\n    for i = 1, string.len(string) do\n        sum = sum + string.byte(string, i)\n    end\n\n    local modulo_result = sum % 26\n\n    -- Convert the modulo result to a character using the ASCII value\n    local result_char = string.char(modulo_result)\n\n    return result_char\nend",
            "gen_tc": "",
            "sim_score": "0.4627"
        },
        {
            "id": "474",
            "prompt": "Write a function to replace characters in a string.",
            "draft_plan": "# Initialize an empty string to store the modified string\n\n# Iterate through each character in the input string\n    # Check if the character needs to be replaced\n        # If replacement is required, append the replacement character to the modified string\n        # Otherwise, append the original character to the modified string\n\n# Return the modified string",
            "requirements": "",
            "final_plan": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2",
            "code": "function replaceCharacters(str, replacements)\n    local modified = \"\"\n    \n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        \n        if replacements[c] then\n            modified = modified .. replacements[c]\n        else\n            modified = modified .. c\n        end\n    end\n    \n    return modified\nend",
            "gen_tc": "",
            "sim_score": "0.4594"
        },
        {
            "id": "411",
            "prompt": "Write a function to convert the given snake case string to camel case string.",
            "draft_plan": "# Split the snake case string into words based on the underscore\n# Initialize an empty camel case string\n\n# Iterate through each word in the snake case string\n    # Capitalize the first letter of each word except the first word\n    # Append the capitalized word to the camel case string\n\n# Return the camel case string",
            "requirements": "",
            "final_plan": "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))",
            "code": "function snake_to_camel(snake_case_str)\n    local words = {}\n    local camel_case_str = \"\"\n\n    for word in string.gmatch(snake_case_str, \"([^_]+)\") do\n        table.insert(words, word)\n    end\n\n    for i, word in ipairs(words) do\n        if i > 1 then\n            word = string.upper(string.sub(word, 1, 1)) .. string.sub(word, 2)\n        end\n        camel_case_str = camel_case_str .. word\n    end\n\n    return camel_case_str\nend",
            "gen_tc": "",
            "sim_score": "0.4565"
        },
        {
            "id": "165",
            "prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
            "draft_plan": "# Initialize a variable to keep track of the count of characters at the same position in the English alphabet\n# Iterate through each character in the input string\n    # Convert the character to lowercase\n    # Check if the character is an alphabet character\n        # Get the position of the character in the English alphabet by subtracting the ASCII value of 'a' or 'A'\n        # Check if the position is equal to the index of the character in the string\n            # If the condition is true, increment the count\n\n# Return the count of characters at the same position in the English alphabet",
            "requirements": "",
            "final_plan": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ",
            "code": "function countSamePositionChars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local c = string.lower(string.sub(str, i, i))\n        if c >= \"a\" and c <= \"z\" then\n            local position = string.byte(c) - string.byte(\"a\") + 1\n            if position == i then\n                count = count + 1\n            end\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4547"
        },
        {
            "id": "477",
            "prompt": "Write a python function to convert the given string to lower case.",
            "draft_plan": "# Convert the input string to lower case using the lower() method\n# Return the lower case string",
            "requirements": "",
            "final_plan": "def is_lower(string):\n  return (string.lower())",
            "code": "function convert_to_lower(str)\n    return string.lower(str)\nend",
            "gen_tc": "",
            "sim_score": "0.4543"
        }
    ],
    "HumanEval/90": [
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.8091"
        },
        {
            "id": "95",
            "prompt": "Write a python function to find the length of the smallest list in a list of lists.",
            "draft_plan": "# Initialize the minimum length to a large number\n\n# Iterate through each list in the input list\n    # Check the length of the current list\n        # If the length is smaller than the current minimum length, update the minimum length\n\n# Return the minimum length",
            "requirements": "",
            "final_plan": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength ",
            "code": "function find_smallest_list_length(list_of_lists)\n    local min_length = math.huge\n\n    for _, list in ipairs(list_of_lists) do\n        local length = #list\n        if length < min_length then\n            min_length = length\n        end\n    end\n\n    return min_length\nend",
            "gen_tc": "",
            "sim_score": "0.7177"
        },
        {
            "id": "94",
            "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
            "draft_plan": "# Initialize the minimum second value as positive infinity\n# Initialize the first value of the tuple with minimum second value as None\n\n# Iterate through each tuple in the list\n    # Check if the second value of the current tuple is smaller than the current minimum second value\n        # If yes, update the minimum second value and the first value of the tuple\n\n# Return the first value of the tuple with the smallest second value",
            "requirements": "",
            "final_plan": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ",
            "code": "function get_first_smallest_value(test_list)\n    local min_second = math.huge\n    local first_value = nil\n    \n    for _, tup in ipairs(test_list) do\n        local second_value = tup[2]\n        \n        if second_value < min_second then\n            min_second = second_value\n            first_value = tup[1]\n        end\n    end\n    \n    return first_value\nend",
            "gen_tc": "",
            "sim_score": "0.6569"
        },
        {
            "id": "457",
            "prompt": "Write a python function to find the sublist having minimum length.",
            "draft_plan": "# If the input list is empty, return an empty list\n\n# Initialize the minimum length variable to a large value and the minimum sublist to an empty list\n\n# Iterate through each sublist in the input list\n    # If the length of the current sublist is less than the minimum length\n        # Update the minimum length and the minimum sublist\n\n# Return the minimum sublist",
            "requirements": "",
            "final_plan": "def Find_Min(lst): \n    return min(lst, key=len) ",
            "code": "function find_min_sublist(input_list)\n    if #input_list == 0 then\n        return {}\n    end\n\n    local min_length = math.huge\n    local min_sublist = {}\n\n    for _, sublist in ipairs(input_list) do\n        if #sublist < min_length then\n            min_length = #sublist\n            min_sublist = sublist\n        end\n    end\n\n    return min_sublist\nend",
            "gen_tc": "",
            "sim_score": "0.6144"
        },
        {
            "id": "410",
            "prompt": "Write a function to find the minimum value in a given heterogeneous list.",
            "draft_plan": "# Initialize the minimum value to the first element in the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the minimum value\n        # If it is, update the minimum value\n\n# Return the minimum value",
            "requirements": "",
            "final_plan": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val",
            "code": "function find_minimum_value(lst)\n    local min_value = lst[1]\n    \n    for i = 2, #lst do\n        if lst[i] < min_value then\n            min_value = lst[i]\n        end\n    end\n    \n    return min_value\nend",
            "gen_tc": "",
            "sim_score": "0.6085"
        },
        {
            "id": "141",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Implement a sorting algorithm such as bubble sort, insertion sort, merge sort, quick sort, etc.\n\n# Define a function to take a list of elements as input\n    # Iterate through the list to compare each element with its adjacent element(s)\n        # Swap elements if they are in the wrong order\n    # Repeat the above steps until the list is sorted\n\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums",
            "code": "-- Bubble Sort implementation\nfunction sort_list(list)\n    local n = #list\n    for i = 1, n-1 do\n        for j = 1, n-i do\n            if list[j] > list[j+1] then\n                list[j], list[j+1] = list[j+1], list[j]\n            end\n        end\n    end\n    return list\nend",
            "gen_tc": "",
            "sim_score": "0.5949"
        },
        {
            "id": "404",
            "prompt": "Write a python function to find the minimum of two numbers.",
            "draft_plan": "# Define a function to find the minimum of two numbers\n    # Check if the first number is less than the second number\n        # If true, return the first number\n        # If false, return the second number\n\n# Call the function and pass two numbers as arguments",
            "requirements": "",
            "final_plan": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ",
            "code": "function find_minimum(a, b)\n    if a < b then\n        return a\n    else\n        return b\n    end\nend\n\n-- Example usage\nlocal num1 = 10\nlocal num2 = 5\nlocal min = find_minimum(num1, num2)\nprint(min)  -- Output: 5",
            "gen_tc": "",
            "sim_score": "0.5900"
        },
        {
            "id": "472",
            "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.",
            "draft_plan": "# Sort the input list in ascending order\n\n# Iterate through each number in the sorted list, starting from the second number\n    # Check if the current number is consecutive to the previous number\n        # If not, return False\n\n# If all numbers are consecutive, return True",
            "requirements": "",
            "final_plan": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ",
            "code": "function checkConsecutive(lst)\n    table.sort(lst)\n    \n    for i = 2, #lst do\n        if lst[i] ~= lst[i-1] + 1 then\n            return false\n        end\n    end\n    \n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.5839"
        },
        {
            "id": "71",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Use the built-in sorted() function to sort the list in ascending order\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums",
            "code": "function sort_list(elements)\n    return sorted(elements)\nend",
            "gen_tc": "",
            "sim_score": "0.5613"
        },
        {
            "id": "476",
            "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.",
            "draft_plan": "# Sort the array in ascending order\n# Initialize variables for the smallest and largest values\n\n# Get the smallest value from the sorted array (first element)\n# Get the largest value from the sorted array (last element)\n\n# Calculate the sum of the smallest and largest values\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum",
            "code": "function sum_smallest_largest(arr)\n    table.sort(arr) -- Sort the array in ascending order\n    \n    local smallest = arr[1] -- Get the smallest value\n    local largest = arr[#arr] -- Get the largest value\n    \n    local sum = smallest + largest -- Calculate the sum\n    \n    return sum -- Return the sum\nend",
            "gen_tc": "",
            "sim_score": "0.5555"
        }
    ],
    "HumanEval/91": [
        {
            "id": "238",
            "prompt": "Write a python function to count the number of non-empty substrings of a given string.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each character and its index in the input string\n    # Iterate through each substring starting from the current character\n        # Increment the counter variable by 1 for each non-empty substring\n\n# Return the counter variable",
            "requirements": "",
            "final_plan": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ",
            "code": "function count_substrings(str)\n    local count = 0\n    for i = 1, #str do\n        for j = i, #str do\n            local substring = string.sub(str, i, j)\n            if substring ~= \"\" then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5315"
        },
        {
            "id": "172",
            "prompt": "Write a function to count the number of occurence of the string 'std' in a given string.",
            "draft_plan": "# Initialize a count variable to 0\n\n# Iterate through each character and its index in the input string\n    # Check if the current character and the next two characters form the string 'std'\n        # If the condition is satisfied, increment the count variable\n\n# Return the count variable",
            "requirements": "",
            "final_plan": "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count",
            "code": "function count_occurrence(string)\n    local count = 0\n\n    for i = 1, string.len(string) - 2 do\n        if string.sub(string, i, i + 2) == \"std\" then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4615"
        },
        {
            "id": "461",
            "prompt": "Write a python function to count the upper case characters in a given string.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of uppercase characters\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter variable\n\n# Return the counter variable, which represents the number of uppercase characters in the string",
            "requirements": "",
            "final_plan": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
            "code": "function count_uppercase_chars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= 'A' and char <= 'Z' then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4562"
        },
        {
            "id": "242",
            "prompt": "Write a function to count the total number of characters in a string.",
            "draft_plan": "# Initialize a variable to keep track of the character count, set it to 0\n\n# Iterate through each character in the string\n    # Increment the character count by 1\n\n# Return the character count",
            "requirements": "",
            "final_plan": "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total",
            "code": "function countCharacters(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        count = count + 1\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4551"
        },
        {
            "id": "250",
            "prompt": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the tuple\n    # Check if the current element is equal to the target element\n        # If it is, increment the counter by 1\n\n# Return the value of the counter variable",
            "requirements": "",
            "final_plan": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ",
            "code": "function count_occurrences(t, element)\n    local count = 0\n    \n    for i = 1, #t do\n        if t[i] == element then\n            count = count + 1\n        end\n    end\n    \n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4418"
        },
        {
            "id": "285",
            "prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
            "draft_plan": "# Iterate through each character in the input string\n    # Check if the current character is 'a'\n        # If it is, check the next two characters (if they exist) to see if they are 'b'\n            # If they are, return True\n    # If the current character is not 'a', continue to the next character\n\n# If no 'a' followed by two or three 'b' characters is found, return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function contains_a_followed_by_b(string)\n    local len = string.len(string)\n    for i = 1, len - 3 do\n        if string.sub(string, i, i) == 'a' then\n            if string.sub(string, i+1, i+3) == 'bb' or string.sub(string, i+1, i+3) == 'bbb' then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4321"
        },
        {
            "id": "61",
            "prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of substrings\n\n# Iterate through each starting index of the substring\n    # Iterate through each ending index of the substring\n        # Get the substring from the starting index to the ending index\n        # Compute the sum of the digits in the substring\n        # Check if the sum of the digits is equal to the length of the substring\n            # If true, increment the counter variable\n\n# Return the counter variable with the total number of substrings",
            "requirements": "",
            "final_plan": "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count",
            "code": "function count_substrings(string)\n    local count = 0\n\n    for i = 1, string.len(string) do\n        for j = i, string.len(string) do\n            local substring = string.sub(string, i, j)\n            local sum = compute_sum(substring)\n            \n            if sum == string.len(substring) then\n                count = count + 1\n            end\n        end\n    end\n\n    return count\nend\n\nfunction compute_sum(substring)\n    local sum = 0\n\n    for i = 1, string.len(substring) do\n        local digit = tonumber(string.sub(substring, i, i))\n        sum = sum + digit\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4313"
        },
        {
            "id": "90",
            "prompt": "Write a python function to find the length of the longest word.",
            "draft_plan": "# Split the input sentence into words using the split() function\n# Initialize a variable maxLength to 0\n\n# Iterate through each word in the list of words\n    # Check if the length of the current word is greater than maxLength\n        # If it is, update maxLength with the length of the current word\n\n# Return maxLength",
            "requirements": "",
            "final_plan": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max",
            "code": "function find_longest_word(sentence)\n    local words = split_sentence(sentence)\n    local max_length = 0\n\n    for _, word in ipairs(words) do\n        local length = string.len(word)\n        if length > max_length then\n            max_length = length\n        end\n    end\n\n    return max_length\nend\n\nfunction split_sentence(sentence)\n    local words = {}\n    for word in string.gmatch(sentence, \"%S+\") do\n        table.insert(words, word)\n    end\n    return words\nend",
            "gen_tc": "",
            "sim_score": "0.4309"
        },
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.4269"
        },
        {
            "id": "168",
            "prompt": "Write a function to count the number of occurrences of a number in a given list.",
            "draft_plan": "# Initialize a count variable to 0\n\n# Iterate through each element in the list\n    # Check if the current element is equal to the given number\n        # If it is, increment the count variable\n\n# Return the count variable",
            "requirements": "",
            "final_plan": "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count ",
            "code": "function countOccurrences(list, number)\n    local count = 0\n\n    for _, element in ipairs(list) do\n        if element == number then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4207"
        }
    ],
    "HumanEval/92": [
        {
            "id": "113",
            "prompt": "Write a function to check if a string represents an integer or not.",
            "draft_plan": "# Check if the string is empty or None\n    # If so, return False\n\n# Check if the string starts with a '+' or '-'\n    # If so, remove the sign from the string\n\n# Check if the string consists only of digits\n    # If so, return True\n\n# If the string is non-empty and does not start with a sign, it is not a valid integer representation\n    # Return False",
            "requirements": "",
            "final_plan": "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False",
            "code": "function isInteger(str)\n    if str == \"\" or str == nil then\n        return false\n    end\n    \n    if str:sub(1, 1) == '+' or str:sub(1, 1) == '-' then\n        str = str:sub(2)\n    end\n    \n    if str:match(\"^%d+$\") then\n        return true\n    end\n    \n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5772"
        },
        {
            "id": "164",
            "prompt": "Write a function to determine if the sum of the divisors of two integers are the same.",
            "draft_plan": "# Define a function to calculate the sum of divisors for a given number\n    # Initialize the sum to 0\n    # Iterate through each number from 1 to the given number\n        # Check if the current number is a divisor of the given number\n            # If it is, add it to the sum\n\n# Define a function to determine if the sum of divisors for two numbers are the same\n    # Calculate the sum of divisors for both numbers\n    # Check if the sums are equal\n        # If they are, return True\n        # Otherwise, return False",
            "requirements": "",
            "final_plan": "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); ",
            "code": "function sumOfDivisors(n)\n    local sum = 0\n    for i = 1, n do\n        if n % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\n\nfunction sameSumOfDivisors(num1, num2)\n    local sum1 = sumOfDivisors(num1)\n    local sum2 = sumOfDivisors(num2)\n    return sum1 == sum2\nend",
            "gen_tc": "",
            "sim_score": "0.5631"
        },
        {
            "id": "138",
            "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
            "draft_plan": "# Initialize a variable 'n' with the given number\n\n# Iterate while 'n' is greater than 0\n    # Check if 'n' is divisible by 2\n        # If 'n' is divisible by 2, divide 'n' by 2\n        # Otherwise, subtract the largest power of 2 less than 'n' from 'n'\n\n# If 'n' becomes 0, return True\n# Otherwise, return False",
            "requirements": "",
            "final_plan": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True",
            "code": "function canRepresentAsPowerOf2(n)\n    while n > 0 do\n        if n % 2 == 0 then\n            n = n / 2\n        else\n            n = n - math.pow(2, math.floor(math.log(n, 2)))\n        end\n    end\n    \n    return n == 0\nend",
            "gen_tc": "",
            "sim_score": "0.5562"
        },
        {
            "id": "420",
            "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of the cube of even numbers\n# Iterate through each even number from 2 to (2*n) with a step size of 2\n    # Calculate the cube of the current even number\n    # Add the cube to the sum\n\n# Return the sum of the cube of even numbers",
            "requirements": "",
            "final_plan": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
            "code": "function cube_sum_of_even(n)\n    local sum = 0\n    \n    for i = 2, 2 * n, 2 do\n        local cube = i * i * i\n        sum = sum + cube\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5292"
        },
        {
            "id": "160",
            "prompt": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
            "draft_plan": "# Iterate through all possible values of x from 0 to n\n    # Calculate the value of y using the equation y = (n - ax) / b\n    # Check if y is an integer\n        # If y is an integer, return the values of x and y as a tuple\n\n# If no solution is found, return None",
            "requirements": "",
            "final_plan": "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None",
            "code": "function find_solution(a, b, n)\n    for x = 0, n do\n        local y = (n - a * x) / b\n        if y == math.floor(y) then\n            return x, y\n        end\n    end\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.5276"
        },
        {
            "id": "227",
            "prompt": "Write a function to find minimum of three numbers.",
            "draft_plan": "# Compare the first two numbers and assign the minimum to a variable min_num\n\n# Compare the minimum of the first two numbers with the third number\n    # If the third number is smaller, assign it to min_num\n\n# Return min_num",
            "requirements": "",
            "final_plan": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ",
            "code": "function find_minimum(a, b, c)\n    local min_num = a\n\n    if b < min_num then\n        min_num = b\n    end\n\n    if c < min_num then\n        min_num = c\n    end\n\n    return min_num\nend",
            "gen_tc": "",
            "sim_score": "0.5264"
        },
        {
            "id": "287",
            "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
            "draft_plan": "# Initialize the sum of squares variable to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Add the square of the current number to the sum of squares variable\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
            "code": "function sum_of_squares(n)\n    local sum = 0\n\n    for i = 1, n do\n        if i % 2 == 0 then\n            sum = sum + (i * i)\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5173"
        },
        {
            "id": "58",
            "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
            "draft_plan": "# Check if the product of the two integers is negative\n    # If the product is negative, it means the two integers have opposite signs\n        # Return True\n\n# If the product is not negative, it means the two integers have the same sign\n    # Return False",
            "requirements": "",
            "final_plan": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ",
            "code": "function haveOppositeSigns(a, b)\n    if a * b < 0 then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5043"
        },
        {
            "id": "253",
            "prompt": "Write a python function that returns the number of integer elements in a given list.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the given list\n    # Check if the current element is an integer\n        # If it is an integer, increment the counter variable\n\n# Return the counter variable as the number of integer elements in the list",
            "requirements": "",
            "final_plan": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr",
            "code": "function count_integer_elements(lst)\n    local count = 0\n\n    for _, element in ipairs(lst) do\n        if type(element) == \"number\" and math.floor(element) == element then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5016"
        },
        {
            "id": "453",
            "prompt": "Write a python function to find the sum of even factors of a number.",
            "draft_plan": "# Initialize the sum of even factors to 0\n\n# Iterate from 1 to the given number (inclusive)\n    # Check if the current number is a factor of the given number\n        # Check if the current number is even\n            # If the current number is even, add it to the sum of even factors\n\n# Return the sum of even factors",
            "requirements": "",
            "final_plan": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res",
            "code": "function sum_of_even_factors(number)\n    local sum = 0\n\n    for i = 1, number do\n        if number % i == 0 and i % 2 == 0 then\n            sum = sum + i\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4933"
        }
    ],
    "HumanEval/93": [
        {
            "id": "131",
            "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
            "draft_plan": "# Create a list of vowels (including both lowercase and uppercase)\n# Convert the input string into a list of characters\n\n# Initialize two pointers: one at the start of the string and one at the end\n# Iterate while the pointers don't overlap\n    # Check if the character at the start pointer is a vowel\n        # If it is, then check if the character at the end pointer is also a vowel\n            # If it is, swap the characters at the start and end pointers\n            # Move the start pointer to the next character\n            # Move the end pointer to the previous character\n        # If the character at the end pointer is not a vowel, move the end pointer to the previous character\n    \n# Convert the modified list of characters back into a string and return it",
            "requirements": "",
            "final_plan": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string",
            "code": "function reverse_vowels(str)\n    local vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }\n    local chars = {}\n    for i = 1, string.len(str) do\n        table.insert(chars, string.sub(str, i, i))\n    end\n    \n    local start = 1\n    local finish = string.len(str)\n    \n    while start < finish do\n        if is_vowel(chars[start], vowels) then\n            while not is_vowel(chars[finish], vowels) and finish > start do\n                finish = finish - 1\n            end\n            if finish > start then\n                chars[start], chars[finish] = chars[finish], chars[start]\n                start = start + 1\n                finish = finish - 1\n            end\n        else\n            start = start + 1\n        end\n    end\n    \n    return table.concat(chars)\nend\n\nfunction is_vowel(char, vowels)\n    for _, vowel in ipairs(vowels) do\n        if char == vowel then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.6516"
        },
        {
            "id": "477",
            "prompt": "Write a python function to convert the given string to lower case.",
            "draft_plan": "# Convert the input string to lower case using the lower() method\n# Return the lower case string",
            "requirements": "",
            "final_plan": "def is_lower(string):\n  return (string.lower())",
            "code": "function convert_to_lower(str)\n    return string.lower(str)\nend",
            "gen_tc": "",
            "sim_score": "0.5545"
        },
        {
            "id": "474",
            "prompt": "Write a function to replace characters in a string.",
            "draft_plan": "# Initialize an empty string to store the modified string\n\n# Iterate through each character in the input string\n    # Check if the character needs to be replaced\n        # If replacement is required, append the replacement character to the modified string\n        # Otherwise, append the original character to the modified string\n\n# Return the modified string",
            "requirements": "",
            "final_plan": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2",
            "code": "function replaceCharacters(str, replacements)\n    local modified = \"\"\n    \n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        \n        if replacements[c] then\n            modified = modified .. replacements[c]\n        else\n            modified = modified .. c\n        end\n    end\n    \n    return modified\nend",
            "gen_tc": "",
            "sim_score": "0.5441"
        },
        {
            "id": "102",
            "prompt": "Write a function to convert a snake case string to camel case string.",
            "draft_plan": "# Split the snake case string by underscore to get individual words\n# Capitalize the first letter of each word except the first word\n# Join the words together to form the camel case string\n# Return the camel case string",
            "requirements": "",
            "final_plan": "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
            "code": "function snake_to_camel(snake_case_str)\n    local words = {}\n    for word in string.gmatch(snake_case_str, \"[^_]+\") do\n        table.insert(words, word)\n    end\n    \n    local camel_case_str = \"\"\n    for i, word in ipairs(words) do\n        if i > 1 then\n            word = string.upper(string.sub(word, 1, 1)) .. string.sub(word, 2)\n        end\n        camel_case_str = camel_case_str .. word\n    end\n    \n    return camel_case_str\nend",
            "gen_tc": "",
            "sim_score": "0.5275"
        },
        {
            "id": "461",
            "prompt": "Write a python function to count the upper case characters in a given string.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of uppercase characters\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter variable\n\n# Return the counter variable, which represents the number of uppercase characters in the string",
            "requirements": "",
            "final_plan": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
            "code": "function count_uppercase_chars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= 'A' and char <= 'Z' then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5121"
        },
        {
            "id": "310",
            "prompt": "Write a function to convert a given string to a tuple of characters.",
            "draft_plan": "# Initialize an empty tuple\n\n# Iterate through each character in the input string\n    # Append the character to the tuple\n\n# Return the tuple",
            "requirements": "",
            "final_plan": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result",
            "code": "function string_to_tuple(string)\n    local tuple = {}\n    \n    for i = 1, string.len(string) do\n        local char = string.sub(string, i, i)\n        table.insert(tuple, char)\n    end\n    \n    return tuple\nend",
            "gen_tc": "",
            "sim_score": "0.5011"
        },
        {
            "id": "230",
            "prompt": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
            "draft_plan": "# Define a function that takes in a string and a character as arguments\n    # Convert the string into a list of characters\n    # Iterate through each character in the list\n        # Check if the character is a blank space\n            # If it is, replace it with the given character\n    # Join the list of characters back into a string\n    # Return the modified string\n\n# Example usage:\n# string = \"Hello World\"\n# character = \"-\"\n# modified_string = replace_spaces(string, character)\n# print(modified_string) --> \"Hello-World\"",
            "requirements": "",
            "final_plan": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2",
            "code": "function replace_spaces(str, char)\n    local chars = {}\n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        if c == \" \" then\n            c = char\n        end\n        table.insert(chars, c)\n    end\n    return table.concat(chars)\nend\n\nlocal string = \"Hello World\"\nlocal character = \"-\"\nlocal modified_string = replace_spaces(string, character)\nprint(modified_string) --> \"Hello-World\"",
            "gen_tc": "",
            "sim_score": "0.4926"
        },
        {
            "id": "411",
            "prompt": "Write a function to convert the given snake case string to camel case string.",
            "draft_plan": "# Split the snake case string into words based on the underscore\n# Initialize an empty camel case string\n\n# Iterate through each word in the snake case string\n    # Capitalize the first letter of each word except the first word\n    # Append the capitalized word to the camel case string\n\n# Return the camel case string",
            "requirements": "",
            "final_plan": "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))",
            "code": "function snake_to_camel(snake_case_str)\n    local words = {}\n    local camel_case_str = \"\"\n\n    for word in string.gmatch(snake_case_str, \"([^_]+)\") do\n        table.insert(words, word)\n    end\n\n    for i, word in ipairs(words) do\n        if i > 1 then\n            word = string.upper(string.sub(word, 1, 1)) .. string.sub(word, 2)\n        end\n        camel_case_str = camel_case_str .. word\n    end\n\n    return camel_case_str\nend",
            "gen_tc": "",
            "sim_score": "0.4820"
        },
        {
            "id": "269",
            "prompt": "Write a function to find the ascii value of a character.",
            "draft_plan": "To find the ASCII value of a character in Python, you can use the `ord()` function. Here is the code logic:\n\n1. Define a function `find_ascii_value(char)` that takes a character as input.\n2. Inside the function, use the `ord()` function to find the ASCII value of the character.\n3. Return the ASCII value.\n\nHere is the code:\n\n```python\ndef find_ascii_value(char):\n    return ord(char)\n```\n\nYou can then call this function and pass the character whose ASCII value you want to find, like this:\n\n```python\nprint(find_ascii_value('A')) # Output: 65\n```\n\nNote that the `ord()` function only works with single characters. If you pass a string with multiple characters, it will raise a `TypeError`.",
            "requirements": "",
            "final_plan": "def ascii_value(k):\n  ch=k\n  return ord(ch)",
            "code": "In Lua, the `string.byte()` function can be used to find the ASCII value of a character. Here is the Lua code to find the ASCII value of a character:\n\n```lua\nfunction find_ascii_value(char)\n    return string.byte(char)\nend\n```\n\nYou can then call this function and pass the character whose ASCII value you want to find, like this:\n\n```lua\nprint(find_ascii_value(\"A\")) -- Output: 65\n```\n\nNote that in Lua, you need to pass the character as a string to the `string.byte()` function.",
            "gen_tc": "",
            "sim_score": "0.4786"
        },
        {
            "id": "165",
            "prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
            "draft_plan": "# Initialize a variable to keep track of the count of characters at the same position in the English alphabet\n# Iterate through each character in the input string\n    # Convert the character to lowercase\n    # Check if the character is an alphabet character\n        # Get the position of the character in the English alphabet by subtracting the ASCII value of 'a' or 'A'\n        # Check if the position is equal to the index of the character in the string\n            # If the condition is true, increment the count\n\n# Return the count of characters at the same position in the English alphabet",
            "requirements": "",
            "final_plan": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ",
            "code": "function countSamePositionChars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local c = string.lower(string.sub(str, i, i))\n        if c >= \"a\" and c <= \"z\" then\n            local position = string.byte(c) - string.byte(\"a\") + 1\n            if position == i then\n                count = count + 1\n            end\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4699"
        }
    ],
    "HumanEval/94": [
        {
            "id": "256",
            "prompt": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
            "draft_plan": "# Define a function to check if a number is prime\n    # Check if the number is less than 2, return False\n    # Iterate from 2 to the square root of the number\n        # Check if the number is divisible by any number in the range\n            # If divisible, return False\n    # If the number is not divisible by any number in the range, return True\n\n# Define a function to count the number of primes less than a given number\n    # Initialize a count variable to 0\n    # Iterate from 2 to the given number\n        # Check if the current number is prime\n            # If prime, increment the count\n    # Return the count",
            "requirements": "",
            "final_plan": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr",
            "code": "function isPrime(n)\n    if n < 2 then\n        return false\n    end\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            return false\n        end\n    end\n    return true\nend\n\nfunction countPrimes(n)\n    local count = 0\n    for i = 2, n - 1 do\n        if isPrime(i) then\n            count = count + 1\n        end\n    end\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5665"
        },
        {
            "id": "57",
            "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.",
            "draft_plan": "# Sort the list of digits in descending order\n\n# Concatenate all the digits in the sorted list\n\n# Convert the concatenated string to an integer and return it",
            "requirements": "",
            "final_plan": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ",
            "code": "function largest_number(digits)\n    table.sort(digits, function(a, b) return a > b end)\n    return tonumber(table.concat(digits))\nend",
            "gen_tc": "",
            "sim_score": "0.5615"
        },
        {
            "id": "126",
            "prompt": "Write a python function to find the sum of common divisors of two given numbers.",
            "draft_plan": "# Find the common divisors of the two given numbers\n    # Find the smaller number among the two\n    # Initialize an empty list to store the common divisors\n    # Iterate from 1 to the smaller number\n        # Check if the current number is a divisor of both given numbers\n            # If yes, add it to the list of common divisors\n\n# Find the sum of the common divisors\n    # Initialize a variable to store the sum\n    # Iterate through the list of common divisors\n        # Add each divisor to the sum\n\n# Return the sum of the common divisors",
            "requirements": "",
            "final_plan": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum",
            "code": "function sumCommonDivisors(a, b)\n    local smaller = math.min(a, b)\n    local divisors = {}\n\n    for i = 1, smaller do\n        if a % i == 0 and b % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n\n    local sum = 0\n    for _, divisor in ipairs(divisors) do\n        sum = sum + divisor\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5223"
        },
        {
            "id": "260",
            "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
            "draft_plan": "# Check if the given number n is less than or equal to 2\n    # If true, return the nth newman\u2013shanks\u2013williams prime number directly\n\n# Initialize a list to store the prime numbers\n# Add the first two newman\u2013shanks\u2013williams prime numbers (2 and 3) to the list\n\n# Start the iteration from 4\n# While the length of the list is less than n\n    # Check if the current number is prime\n        # If true, add it to the list\n\n    # Increment the current number by 1\n\n# Return the nth newman\u2013shanks\u2013williams prime number from the list",
            "requirements": "",
            "final_plan": "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)",
            "code": "function isPrime(n)\n    if n <= 1 then\n        return false\n    end\n\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            return false\n        end\n    end\n\n    return true\nend\n\nfunction findNthNSWPrime(n)\n    if n <= 2 then\n        return n\n    end\n\n    local primes = {2, 3}\n    local currentNum = 4\n\n    while #primes < n do\n        if isPrime(currentNum) then\n            table.insert(primes, currentNum)\n        end\n        currentNum = currentNum + 1\n    end\n\n    return primes[n]\nend",
            "gen_tc": "",
            "sim_score": "0.5017"
        },
        {
            "id": "398",
            "prompt": "Write a function to compute the sum of digits of each number of a given list.",
            "draft_plan": "# Initialize an empty list to store the sum of digits for each number\n\n# Iterate through each number in the given list\n    # Convert the number to a string\n    # Initialize a variable to store the sum of digits\n    # Iterate through each digit in the string representation of the number\n        # Convert the digit back to an integer and add it to the sum of digits\n    # Append the sum of digits to the list\n\n# Return the list of sum of digits for each number",
            "requirements": "",
            "final_plan": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
            "code": "function compute_sum_of_digits(numbers)\n    local sum_of_digits = {}\n\n    for _, num in ipairs(numbers) do\n        local num_str = tostring(num)\n        local digits_sum = 0\n\n        for i = 1, string.len(num_str) do\n            digits_sum = digits_sum + tonumber(string.sub(num_str, i, i))\n        end\n\n        table.insert(sum_of_digits, digits_sum)\n    end\n\n    return sum_of_digits\nend",
            "gen_tc": "",
            "sim_score": "0.4935"
        },
        {
            "id": "418",
            "prompt": "Write a python function to find the element of a list having maximum length.",
            "draft_plan": "# Initialize a variable to store the index of the element with maximum length\n# Initialize a variable to store the maximum length, initially set to 0\n\n# Iterate through each element in the list\n    # Check if the length of the current element is greater than the maximum length\n        # If so, update the maximum length and the index of the element\n\n# Return the element at the index with maximum length",
            "requirements": "",
            "final_plan": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList",
            "code": "function findMaxElementLength(lst)\n    local maxIndex = 1\n    local maxLength = 0\n\n    for i, element in ipairs(lst) do\n        local length = string.len(element)\n        if length > maxLength then\n            maxLength = length\n            maxIndex = i\n        end\n    end\n\n    return lst[maxIndex]\nend",
            "gen_tc": "",
            "sim_score": "0.4878"
        },
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.4562"
        },
        {
            "id": "443",
            "prompt": "Write a python function to find the largest negative number from the given list.",
            "draft_plan": "# Initialize a variable 'largest_negative' to None\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If 'largest_negative' is None or the current number is greater than 'largest_negative', update 'largest_negative' to the current number\n\n# Return 'largest_negative'",
            "requirements": "",
            "final_plan": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
            "code": "function find_largest_negative(numbers)\n    local largest_negative = nil\n\n    for _, number in ipairs(numbers) do\n        if number < 0 then\n            if largest_negative == nil or number > largest_negative then\n                largest_negative = number\n            end\n        end\n    end\n\n    return largest_negative\nend",
            "gen_tc": "",
            "sim_score": "0.4531"
        },
        {
            "id": "476",
            "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.",
            "draft_plan": "# Sort the array in ascending order\n# Initialize variables for the smallest and largest values\n\n# Get the smallest value from the sorted array (first element)\n# Get the largest value from the sorted array (last element)\n\n# Calculate the sum of the smallest and largest values\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum",
            "code": "function sum_smallest_largest(arr)\n    table.sort(arr) -- Sort the array in ascending order\n    \n    local smallest = arr[1] -- Get the smallest value\n    local largest = arr[#arr] -- Get the largest value\n    \n    local sum = smallest + largest -- Calculate the sum\n    \n    return sum -- Return the sum\nend",
            "gen_tc": "",
            "sim_score": "0.4444"
        },
        {
            "id": "295",
            "prompt": "Write a function to return the sum of all divisors of a number.",
            "draft_plan": "# Initialize the sum of divisors to 0\n\n# Iterate from 1 to the given number\n    # Check if the current number is a divisor of the given number\n        # If it is, add it to the sum of divisors\n\n# Return the sum of divisors",
            "requirements": "",
            "final_plan": "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)",
            "code": "function sum_of_divisors(num)\n    local sum = 0\n\n    for i = 1, num do\n        if num % i == 0 then\n            sum = sum + i\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4400"
        }
    ],
    "HumanEval/95": [
        {
            "id": "115",
            "prompt": "Write a function to check whether all dictionaries in a list are empty or not.",
            "draft_plan": "# Iterate through each dictionary in the list\n    # Check if the current dictionary is empty\n        # If any dictionary is not empty, return False\n\n# If all dictionaries are empty, return True",
            "requirements": "",
            "final_plan": "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit",
            "code": "function check_empty_dict_list(dict_list)\n    for _, dict in ipairs(dict_list) do\n        if next(dict) ~= nil then\n            return false\n        end\n    end\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.6686"
        },
        {
            "id": "477",
            "prompt": "Write a python function to convert the given string to lower case.",
            "draft_plan": "# Convert the input string to lower case using the lower() method\n# Return the lower case string",
            "requirements": "",
            "final_plan": "def is_lower(string):\n  return (string.lower())",
            "code": "function convert_to_lower(str)\n    return string.lower(str)\nend",
            "gen_tc": "",
            "sim_score": "0.5941"
        },
        {
            "id": "464",
            "prompt": "Write a function to check if all values are same in a dictionary.",
            "draft_plan": "# Get the first value from the dictionary\n# Iterate through all the values in the dictionary\n    # Check if the current value is equal to the first value\n        # If not equal, return False\n\n# If all values are equal, return True",
            "requirements": "",
            "final_plan": "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result",
            "code": "function checkAllSame(dict)\n    local firstValue = nil\n    \n    for _, value in pairs(dict) do\n        if firstValue == nil then\n            firstValue = value\n        elseif value ~= firstValue then\n            return false\n        end\n    end\n    \n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.5520"
        },
        {
            "id": "461",
            "prompt": "Write a python function to count the upper case characters in a given string.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of uppercase characters\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter variable\n\n# Return the counter variable, which represents the number of uppercase characters in the string",
            "requirements": "",
            "final_plan": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
            "code": "function count_uppercase_chars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= 'A' and char <= 'Z' then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5247"
        },
        {
            "id": "301",
            "prompt": "Write a function to find the depth of a dictionary.",
            "draft_plan": "# Initialize the depth to 1\n\n# Iterate through each key-value pair in the dictionary\n    # Check if the value is a dictionary\n        # If it is, recursively find the depth of the nested dictionary and increment it by 1\n\n# Return the maximum depth",
            "requirements": "",
            "final_plan": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0",
            "code": "function find_depth(dict)\n    local max_depth = 1\n    \n    for key, value in pairs(dict) do\n        if type(value) == \"table\" then\n            local nested_depth = find_depth(value) + 1\n            if nested_depth > max_depth then\n                max_depth = nested_depth\n            end\n        end\n    end\n    \n    return max_depth\nend",
            "gen_tc": "",
            "sim_score": "0.5213"
        },
        {
            "id": "16",
            "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
            "draft_plan": "# Split the input string by the underscore character to get a list of substrings\n# Iterate through each substring in the list\n    # Check if the substring consists of lowercase letters only\n        # If not, return False\n\n# If all substrings are valid, return True",
            "requirements": "",
            "final_plan": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function contains_lowercase_sequences(str)\n    local substrings = split(str, \"_\")\n\n    for _, substr in ipairs(substrings) do\n        if not is_lowercase(substr) then\n            return false\n        end\n    end\n\n    return true\nend\n\nfunction split(str, delimiter)\n    local result = {}\n    local from = 1\n    local delim_from, delim_to = string.find(str, delimiter, from)\n\n    while delim_from do\n        table.insert(result, string.sub(str, from, delim_from - 1))\n        from = delim_to + 1\n        delim_from, delim_to = string.find(str, delimiter, from)\n    end\n\n    table.insert(result, string.sub(str, from))\n\n    return result\nend\n\nfunction is_lowercase(str)\n    return str:match(\"^[a-z]*$\") ~= nil\nend",
            "gen_tc": "",
            "sim_score": "0.4933"
        },
        {
            "id": "87",
            "prompt": "Write a function to merge three dictionaries into a single dictionary.",
            "draft_plan": "# Initialize an empty dictionary to store the merged dictionaries\n\n# Iterate through each dictionary in the input list\n    # Iterate through each key-value pair in the current dictionary\n        # Add the key-value pair to the merged dictionary\n\n# Return the merged dictionary",
            "requirements": "",
            "final_plan": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict",
            "code": "function merge_dictionaries(dict_list)\n    local merged_dict = {}\n\n    for _, dictionary in ipairs(dict_list) do\n        for key, value in pairs(dictionary) do\n            merged_dict[key] = value\n        end\n    end\n\n    return merged_dict\nend",
            "gen_tc": "",
            "sim_score": "0.4876"
        },
        {
            "id": "465",
            "prompt": "Write a function to drop empty items from a given dictionary.",
            "draft_plan": "# Initialize an empty dictionary to store the non-empty items\n\n# Iterate through each key-value pair in the given dictionary\n    # Check if the value is not empty\n        # If not empty, add the key-value pair to the new dictionary\n\n# Return the new dictionary",
            "requirements": "",
            "final_plan": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1",
            "code": "function drop_empty_items(dictionary)\n    local new_dictionary = {}\n\n    for key, value in pairs(dictionary) do\n        if value ~= nil and value ~= '' then\n            new_dictionary[key] = value\n        end\n    end\n\n    return new_dictionary\nend",
            "gen_tc": "",
            "sim_score": "0.4758"
        },
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.4695"
        },
        {
            "id": "222",
            "prompt": "Write a function to check if all the elements in tuple have same data type or not.",
            "draft_plan": "# Get the data type of the first element in the tuple\n# Iterate through each element in the tuple starting from the second element\n    # Check if the data type of the current element matches the data type of the first element\n        # If the data types don't match, return False\n\n# If all elements have the same data type, return True\n# Otherwise, return False",
            "requirements": "",
            "final_plan": "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) ",
            "code": "function check_same_data_type(tuple)\n    local data_type = type(tuple[1])\n    for i = 2, #tuple do\n        if type(tuple[i]) ~= data_type then\n            return false\n        end\n    end\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.4641"
        }
    ],
    "HumanEval/96": [
        {
            "id": "256",
            "prompt": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
            "draft_plan": "# Define a function to check if a number is prime\n    # Check if the number is less than 2, return False\n    # Iterate from 2 to the square root of the number\n        # Check if the number is divisible by any number in the range\n            # If divisible, return False\n    # If the number is not divisible by any number in the range, return True\n\n# Define a function to count the number of primes less than a given number\n    # Initialize a count variable to 0\n    # Iterate from 2 to the given number\n        # Check if the current number is prime\n            # If prime, increment the count\n    # Return the count",
            "requirements": "",
            "final_plan": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr",
            "code": "function isPrime(n)\n    if n < 2 then\n        return false\n    end\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            return false\n        end\n    end\n    return true\nend\n\nfunction countPrimes(n)\n    local count = 0\n    for i = 2, n - 1 do\n        if isPrime(i) then\n            count = count + 1\n        end\n    end\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.8020"
        },
        {
            "id": "260",
            "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
            "draft_plan": "# Check if the given number n is less than or equal to 2\n    # If true, return the nth newman\u2013shanks\u2013williams prime number directly\n\n# Initialize a list to store the prime numbers\n# Add the first two newman\u2013shanks\u2013williams prime numbers (2 and 3) to the list\n\n# Start the iteration from 4\n# While the length of the list is less than n\n    # Check if the current number is prime\n        # If true, add it to the list\n\n    # Increment the current number by 1\n\n# Return the nth newman\u2013shanks\u2013williams prime number from the list",
            "requirements": "",
            "final_plan": "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)",
            "code": "function isPrime(n)\n    if n <= 1 then\n        return false\n    end\n\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            return false\n        end\n    end\n\n    return true\nend\n\nfunction findNthNSWPrime(n)\n    if n <= 2 then\n        return n\n    end\n\n    local primes = {2, 3}\n    local currentNum = 4\n\n    while #primes < n do\n        if isPrime(currentNum) then\n            table.insert(primes, currentNum)\n        end\n        currentNum = currentNum + 1\n    end\n\n    return primes[n]\nend",
            "gen_tc": "",
            "sim_score": "0.6319"
        },
        {
            "id": "253",
            "prompt": "Write a python function that returns the number of integer elements in a given list.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the given list\n    # Check if the current element is an integer\n        # If it is an integer, increment the counter variable\n\n# Return the counter variable as the number of integer elements in the list",
            "requirements": "",
            "final_plan": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr",
            "code": "function count_integer_elements(lst)\n    local count = 0\n\n    for _, element in ipairs(lst) do\n        if type(element) == \"number\" and math.floor(element) == element then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5748"
        },
        {
            "id": "66",
            "prompt": "Write a python function to count the number of positive numbers in a list.",
            "draft_plan": "# Initialize a variable count to 0\n\n# Iterate through each number in the list\n    # Check if the number is greater than 0\n        # If it is, increment the count\n\n# Return the count",
            "requirements": "",
            "final_plan": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ",
            "code": "function count_positive_numbers(lst)\n    local count = 0\n\n    for _, num in ipairs(lst) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5449"
        },
        {
            "id": "96",
            "prompt": "Write a python function to find the number of divisors of a given integer.",
            "draft_plan": "# Initialize a count variable to 0\n\n# Iterate through each number from 1 to the given integer\n    # Check if the current number is a divisor of the given integer\n        # If yes, increment the count variable\n\n# Return the count variable",
            "requirements": "",
            "final_plan": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x",
            "code": "function countDivisors(num)\n    local count = 0\n\n    for i = 1, num do\n        if num % i == 0 then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5441"
        },
        {
            "id": "168",
            "prompt": "Write a function to count the number of occurrences of a number in a given list.",
            "draft_plan": "# Initialize a count variable to 0\n\n# Iterate through each element in the list\n    # Check if the current element is equal to the given number\n        # If it is, increment the count variable\n\n# Return the count variable",
            "requirements": "",
            "final_plan": "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count ",
            "code": "function countOccurrences(list, number)\n    local count = 0\n\n    for _, element in ipairs(list) do\n        if element == number then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5071"
        },
        {
            "id": "239",
            "prompt": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
            "draft_plan": "# Initialize a variable count to keep track of the number of possible sequences\n\n# Create a recursive function to find the number of possible sequences\n    # Base case: if n is equal to 0, return 1 (as we have found a valid sequence)\n    \n    # Initialize a variable total_count to keep track of the total number of sequences\n    \n    # Iterate through all possible values for the current element in the sequence\n        # Check if the current element is greater than or equal to twice the previous element and less than or equal to m\n            # If it is, recursively call the function with n-1 and update the total_count by adding the result\n            \n    # Return the total_count\n    \n# Call the recursive function with the given values of m and n and store the result in the variable count\n\n# Return the value of count as the final result",
            "requirements": "",
            "final_plan": "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]",
            "code": "function count_sequences(m, n)\n    local count = 0\n\n    local function find_sequences(prev, remaining)\n        if remaining == 0 then\n            return 1\n        end\n\n        local total_count = 0\n        for i = prev * 2, m do\n            total_count = total_count + find_sequences(i, remaining - 1)\n        end\n\n        return total_count\n    end\n\n    count = find_sequences(1, n)\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4922"
        },
        {
            "id": "287",
            "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
            "draft_plan": "# Initialize the sum of squares variable to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Add the square of the current number to the sum of squares variable\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
            "code": "function sum_of_squares(n)\n    local sum = 0\n\n    for i = 1, n do\n        if i % 2 == 0 then\n            sum = sum + (i * i)\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4902"
        },
        {
            "id": "267",
            "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of squares\n# Initialize a counter variable to keep track of the odd numbers\n# Initialize a variable to store the current odd number\n\n# Iterate from 1 to n (inclusive)\n    # Check if the current number is odd\n        # If it is, square the number and add it to the sum of squares\n        # Increase the counter variable by 1\n        # Check if the counter variable is equal to n\n            # If it is, break the loop\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
            "code": "function sum_of_squares(n)\n    local sum = 0\n    local counter = 0\n    local odd_number = 1\n\n    for i = 1, n do\n        if odd_number % 2 == 1 then\n            sum = sum + odd_number^2\n            counter = counter + 1\n        end\n\n        if counter == n then\n            break\n        end\n\n        odd_number = odd_number + 1\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4889"
        },
        {
            "id": "265",
            "prompt": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
            "draft_plan": "# Create an empty list to store the resulting lists\n\n# Iterate through the range from 0 to the length of the input list with step size n\n    # Append a sublist that starts from the current index and ends at the current index + n to the resulting list\n\n# Return the resulting list",
            "requirements": "",
            "final_plan": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]",
            "code": "function split_list(list, n)\n    local result = {}\n    for i = 1, #list, n do\n        local sublist = {}\n        for j = i, math.min(i + n - 1, #list) do\n            table.insert(sublist, list[j])\n        end\n        table.insert(result, sublist)\n    end\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4591"
        }
    ],
    "HumanEval/97": [
        {
            "id": "127",
            "prompt": "Write a function to multiply two integers.",
            "draft_plan": "# Initialize the result to 0\n\n# If either of the integers is 0, return 0\n\n# If both integers are negative, convert them to positive\n    # Multiply the positive integers and change the sign of the result to negative\n\n# If only one integer is negative, convert it to positive\n    # Multiply the positive integers and change the sign of the result to negative\n\n# If both integers are positive, multiply them normally\n\n# Return the result",
            "requirements": "",
            "final_plan": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)",
            "code": "function multiply(a, b)\n    local result = 0\n    \n    if a == 0 or b == 0 then\n        return 0\n    end\n    \n    if a < 0 and b < 0 then\n        a = -a\n        b = -b\n    elseif a < 0 then\n        a = -a\n        result = -result\n    elseif b < 0 then\n        b = -b\n        result = -result\n    end\n    \n    while b > 0 do\n        if b % 2 == 1 then\n            result = result + a\n        end\n        a = a * 2\n        b = math.floor(b / 2)\n    end\n    \n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.6768"
        },
        {
            "id": "98",
            "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
            "draft_plan": "# Initialize the product variable to 1\n\n# Iterate through each number in the list\n    # Multiply the product by the current number\n\n# Divide the product by the length of the list\n\n# Return the result",
            "requirements": "",
            "final_plan": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ",
            "code": "function multiply_and_divide(numbers)\n    local product = 1\n\n    for _, num in ipairs(numbers) do\n        product = product * num\n    end\n\n    local result = product / #numbers\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.6743"
        },
        {
            "id": "471",
            "prompt": "Write a python function to find the product of the array multiplication modulo n.",
            "draft_plan": "# Initialize the product to 1\n\n# Iterate through each element in the array\n    # Multiply the current element with the product\n    # Take the modulo of the product with n\n\n# Return the final product modulo n",
            "requirements": "",
            "final_plan": "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ",
            "code": "function arrayProductModuloN(arr, n)\n    local product = 1\n\n    for _, num in ipairs(arr) do\n        product = (product * num) % n\n    end\n\n    return product\nend",
            "gen_tc": "",
            "sim_score": "0.6488"
        },
        {
            "id": "445",
            "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
            "draft_plan": "# Create an empty list to store the result of multiplication\n\n# Iterate through the indexes of the tuples using the range of the length of the tuples\n    # Multiply the elements at the current index of both tuples\n    # Append the result to the list\n\n# Return the list",
            "requirements": "",
            "final_plan": "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
            "code": "function multiply_tuples(tuple1, tuple2)\n    local result = {}\n\n    for i = 1, #tuple1 do\n        local multiplication = tuple1[i] * tuple2[i]\n        table.insert(result, multiplication)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.6130"
        },
        {
            "id": "261",
            "prompt": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
            "draft_plan": "# Create an empty list to store the result of the division operation\n\n# Iterate through the elements of the tuples\n    # Perform the division operation on the corresponding elements of the tuples\n    # Append the result to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
            "code": "function tuple_division(t1, t2)\n    local result = {}\n\n    for i = 1, #t1 do\n        local div = t1[i] / t2[i]\n        table.insert(result, div)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5768"
        },
        {
            "id": "126",
            "prompt": "Write a python function to find the sum of common divisors of two given numbers.",
            "draft_plan": "# Find the common divisors of the two given numbers\n    # Find the smaller number among the two\n    # Initialize an empty list to store the common divisors\n    # Iterate from 1 to the smaller number\n        # Check if the current number is a divisor of both given numbers\n            # If yes, add it to the list of common divisors\n\n# Find the sum of the common divisors\n    # Initialize a variable to store the sum\n    # Iterate through the list of common divisors\n        # Add each divisor to the sum\n\n# Return the sum of the common divisors",
            "requirements": "",
            "final_plan": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum",
            "code": "function sumCommonDivisors(a, b)\n    local smaller = math.min(a, b)\n    local divisors = {}\n\n    for i = 1, smaller do\n        if a % i == 0 and b % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n\n    local sum = 0\n    for _, divisor in ipairs(divisors) do\n        sum = sum + divisor\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5730"
        },
        {
            "id": "257",
            "prompt": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.",
            "draft_plan": "# Define the function that takes in two numbers as input\n    # Create a tuple with the second number followed by the first number\n    # Return the tuple\n\n# Call the function with the desired numbers and store the returned tuple",
            "requirements": "",
            "final_plan": "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)",
            "code": "function swap_numbers(num1, num2)\n    return num2, num1\nend\n\nlocal result = swap_numbers(3, 5)\nprint(result)  -- Output: 5   3",
            "gen_tc": "",
            "sim_score": "0.5708"
        },
        {
            "id": "435",
            "prompt": "Write a python function to find the last digit of a given number.",
            "draft_plan": "To find the last digit of a given number, you can use the modulo operator (`%`) to get the remainder when dividing the number by 10. The remainder will be the last digit of the number.\n\nHere's the code logic:\n\n1. Define a function `find_last_digit` that takes a number as input.\n2. Inside the function, calculate the remainder of the number when divided by 10 using the modulo operator: `last_digit = number % 10`.\n3. Return the value of `last_digit`.\n\nHere's the code implementation in Python:\n\n```python\ndef find_last_digit(number):\n    last_digit = number % 10\n    return last_digit\n```\n\nYou can then call this function by passing a number as an argument to get the last digit. For example:\n\n```python\nprint(find_last_digit(12345))  # Output: 5\nprint(find_last_digit(987654321))  # Output: 1\nprint(find_last_digit(0))  # Output: 0\n```",
            "requirements": "",
            "final_plan": "def last_Digit(n) :\n    return (n % 10) ",
            "code": "function find_last_digit(number)\n    local last_digit = number % 10\n    return last_digit\nend\n\nprint(find_last_digit(12345))  -- Output: 5\nprint(find_last_digit(987654321))  -- Output: 1\nprint(find_last_digit(0))  -- Output: 0",
            "gen_tc": "",
            "sim_score": "0.5587"
        },
        {
            "id": "415",
            "prompt": "Write a python function to find a pair with highest product from a given array of integers.",
            "draft_plan": "# Initialize the maximum product to -infinity\n\n# Iterate through each pair of numbers in the array\n    # Calculate the product of the current pair\n    # Update the maximum product if the current product is greater\n\n# Return the pair with the highest product",
            "requirements": "",
            "final_plan": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ",
            "code": "function find_highest_product(arr)\n    local max_product = -math.huge\n    local pair = {}\n\n    for i = 1, #arr-1 do\n        for j = i+1, #arr do\n            local product = arr[i] * arr[j]\n            if product > max_product then\n                max_product = product\n                pair = {arr[i], arr[j]}\n            end\n        end\n    end\n\n    return pair\nend",
            "gen_tc": "",
            "sim_score": "0.5517"
        },
        {
            "id": "292",
            "prompt": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
            "draft_plan": "To find the quotient of two numbers rounded down to the nearest integer, you can use the floor division operator `//` in Python.\n\nHere is the code logic:\n\n```python\ndef quotient(a, b):\n    return a // b\n```\n\nIn this code, the function `quotient` takes two parameters `a` and `b`, representing the numbers for which we want to find the quotient. The floor division `a // b` divides `a` by `b` and returns the quotient rounded down to the nearest integer.\n\nYou can call this function with your desired values to find the quotient. For example:\n\n```python\nresult = quotient(10, 3)\nprint(result)  # Output: 3\n```",
            "requirements": "",
            "final_plan": "def find(n,m):  \n    q = n//m \n    return (q)",
            "code": "function quotient(a, b)\n    return math.floor(a / b)\nend\n\n-- Example usage\nlocal result = quotient(10, 3)\nprint(result) -- Output: 3",
            "gen_tc": "",
            "sim_score": "0.5428"
        }
    ],
    "HumanEval/98": [
        {
            "id": "461",
            "prompt": "Write a python function to count the upper case characters in a given string.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of uppercase characters\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter variable\n\n# Return the counter variable, which represents the number of uppercase characters in the string",
            "requirements": "",
            "final_plan": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
            "code": "function count_uppercase_chars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= 'A' and char <= 'Z' then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.8280"
        },
        {
            "id": "165",
            "prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
            "draft_plan": "# Initialize a variable to keep track of the count of characters at the same position in the English alphabet\n# Iterate through each character in the input string\n    # Convert the character to lowercase\n    # Check if the character is an alphabet character\n        # Get the position of the character in the English alphabet by subtracting the ASCII value of 'a' or 'A'\n        # Check if the position is equal to the index of the character in the string\n            # If the condition is true, increment the count\n\n# Return the count of characters at the same position in the English alphabet",
            "requirements": "",
            "final_plan": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ",
            "code": "function countSamePositionChars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local c = string.lower(string.sub(str, i, i))\n        if c >= \"a\" and c <= \"z\" then\n            local position = string.byte(c) - string.byte(\"a\") + 1\n            if position == i then\n                count = count + 1\n            end\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.6686"
        },
        {
            "id": "131",
            "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
            "draft_plan": "# Create a list of vowels (including both lowercase and uppercase)\n# Convert the input string into a list of characters\n\n# Initialize two pointers: one at the start of the string and one at the end\n# Iterate while the pointers don't overlap\n    # Check if the character at the start pointer is a vowel\n        # If it is, then check if the character at the end pointer is also a vowel\n            # If it is, swap the characters at the start and end pointers\n            # Move the start pointer to the next character\n            # Move the end pointer to the previous character\n        # If the character at the end pointer is not a vowel, move the end pointer to the previous character\n    \n# Convert the modified list of characters back into a string and return it",
            "requirements": "",
            "final_plan": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string",
            "code": "function reverse_vowels(str)\n    local vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }\n    local chars = {}\n    for i = 1, string.len(str) do\n        table.insert(chars, string.sub(str, i, i))\n    end\n    \n    local start = 1\n    local finish = string.len(str)\n    \n    while start < finish do\n        if is_vowel(chars[start], vowels) then\n            while not is_vowel(chars[finish], vowels) and finish > start do\n                finish = finish - 1\n            end\n            if finish > start then\n                chars[start], chars[finish] = chars[finish], chars[start]\n                start = start + 1\n                finish = finish - 1\n            end\n        else\n            start = start + 1\n        end\n    end\n    \n    return table.concat(chars)\nend\n\nfunction is_vowel(char, vowels)\n    for _, vowel in ipairs(vowels) do\n        if char == vowel then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5959"
        },
        {
            "id": "242",
            "prompt": "Write a function to count the total number of characters in a string.",
            "draft_plan": "# Initialize a variable to keep track of the character count, set it to 0\n\n# Iterate through each character in the string\n    # Increment the character count by 1\n\n# Return the character count",
            "requirements": "",
            "final_plan": "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total",
            "code": "function countCharacters(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        count = count + 1\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5681"
        },
        {
            "id": "477",
            "prompt": "Write a python function to convert the given string to lower case.",
            "draft_plan": "# Convert the input string to lower case using the lower() method\n# Return the lower case string",
            "requirements": "",
            "final_plan": "def is_lower(string):\n  return (string.lower())",
            "code": "function convert_to_lower(str)\n    return string.lower(str)\nend",
            "gen_tc": "",
            "sim_score": "0.5659"
        },
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.5598"
        },
        {
            "id": "238",
            "prompt": "Write a python function to count the number of non-empty substrings of a given string.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each character and its index in the input string\n    # Iterate through each substring starting from the current character\n        # Increment the counter variable by 1 for each non-empty substring\n\n# Return the counter variable",
            "requirements": "",
            "final_plan": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ",
            "code": "function count_substrings(str)\n    local count = 0\n    for i = 1, #str do\n        for j = i, #str do\n            local substring = string.sub(str, i, j)\n            if substring ~= \"\" then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5494"
        },
        {
            "id": "172",
            "prompt": "Write a function to count the number of occurence of the string 'std' in a given string.",
            "draft_plan": "# Initialize a count variable to 0\n\n# Iterate through each character and its index in the input string\n    # Check if the current character and the next two characters form the string 'std'\n        # If the condition is satisfied, increment the count variable\n\n# Return the count variable",
            "requirements": "",
            "final_plan": "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count",
            "code": "function count_occurrence(string)\n    local count = 0\n\n    for i = 1, string.len(string) - 2 do\n        if string.sub(string, i, i + 2) == \"std\" then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5358"
        },
        {
            "id": "226",
            "prompt": "Write a python function to remove the characters which have odd index values of a given string.",
            "draft_plan": "# Initialize an empty string to store the result\n\n# Iterate through each character and its index in the input string\n    # Check if the index of the current character is even\n        # If it is even, append the character to the result string\n\n# Return the result string",
            "requirements": "",
            "final_plan": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result",
            "code": "function remove_odd_index_chars(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        if i % 2 == 0 then\n            result = result .. string.sub(str, i, i)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5306"
        },
        {
            "id": "459",
            "prompt": "Write a function to remove uppercase substrings from a given string.",
            "draft_plan": "# Initialize an empty string to store the result\n\n# Iterate through each character in the input string\n    # Check if the current character is lowercase\n        # If it is lowercase, append it to the result string\n\n# Return the result string",
            "requirements": "",
            "final_plan": "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)",
            "code": "function removeUppercaseSubstrings(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= \"a\" and char <= \"z\" then\n            result = result .. char\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5270"
        }
    ],
    "HumanEval/99": [
        {
            "id": "292",
            "prompt": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
            "draft_plan": "To find the quotient of two numbers rounded down to the nearest integer, you can use the floor division operator `//` in Python.\n\nHere is the code logic:\n\n```python\ndef quotient(a, b):\n    return a // b\n```\n\nIn this code, the function `quotient` takes two parameters `a` and `b`, representing the numbers for which we want to find the quotient. The floor division `a // b` divides `a` by `b` and returns the quotient rounded down to the nearest integer.\n\nYou can call this function with your desired values to find the quotient. For example:\n\n```python\nresult = quotient(10, 3)\nprint(result)  # Output: 3\n```",
            "requirements": "",
            "final_plan": "def find(n,m):  \n    q = n//m \n    return (q)",
            "code": "function quotient(a, b)\n    return math.floor(a / b)\nend\n\n-- Example usage\nlocal result = quotient(10, 3)\nprint(result) -- Output: 3",
            "gen_tc": "",
            "sim_score": "0.6323"
        },
        {
            "id": "89",
            "prompt": "Write a function to find the closest smaller number than n.",
            "draft_plan": "# Initialize a variable to store the closest smaller number\n# Iterate from n-1 to 1 in descending order\n    # Check if the current number is smaller than n\n        # If yes, update the closest smaller number and break the loop\n\n# Return the closest smaller number",
            "requirements": "",
            "final_plan": "def closest_num(N):\n  return (N - 1)",
            "code": "function findClosestSmallerNumber(n)\n    local closestSmaller = nil\n\n    for i = n-1, 1, -1 do\n        if i < n then\n            closestSmaller = i\n            break\n        end\n    end\n\n    return closestSmaller\nend",
            "gen_tc": "",
            "sim_score": "0.5877"
        },
        {
            "id": "404",
            "prompt": "Write a python function to find the minimum of two numbers.",
            "draft_plan": "# Define a function to find the minimum of two numbers\n    # Check if the first number is less than the second number\n        # If true, return the first number\n        # If false, return the second number\n\n# Call the function and pass two numbers as arguments",
            "requirements": "",
            "final_plan": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ",
            "code": "function find_minimum(a, b)\n    if a < b then\n        return a\n    else\n        return b\n    end\nend\n\n-- Example usage\nlocal num1 = 10\nlocal num2 = 5\nlocal min = find_minimum(num1, num2)\nprint(min)  -- Output: 5",
            "gen_tc": "",
            "sim_score": "0.5633"
        },
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.5609"
        },
        {
            "id": "435",
            "prompt": "Write a python function to find the last digit of a given number.",
            "draft_plan": "To find the last digit of a given number, you can use the modulo operator (`%`) to get the remainder when dividing the number by 10. The remainder will be the last digit of the number.\n\nHere's the code logic:\n\n1. Define a function `find_last_digit` that takes a number as input.\n2. Inside the function, calculate the remainder of the number when divided by 10 using the modulo operator: `last_digit = number % 10`.\n3. Return the value of `last_digit`.\n\nHere's the code implementation in Python:\n\n```python\ndef find_last_digit(number):\n    last_digit = number % 10\n    return last_digit\n```\n\nYou can then call this function by passing a number as an argument to get the last digit. For example:\n\n```python\nprint(find_last_digit(12345))  # Output: 5\nprint(find_last_digit(987654321))  # Output: 1\nprint(find_last_digit(0))  # Output: 0\n```",
            "requirements": "",
            "final_plan": "def last_Digit(n) :\n    return (n % 10) ",
            "code": "function find_last_digit(number)\n    local last_digit = number % 10\n    return last_digit\nend\n\nprint(find_last_digit(12345))  -- Output: 5\nprint(find_last_digit(987654321))  -- Output: 1\nprint(find_last_digit(0))  -- Output: 0",
            "gen_tc": "",
            "sim_score": "0.4995"
        },
        {
            "id": "227",
            "prompt": "Write a function to find minimum of three numbers.",
            "draft_plan": "# Compare the first two numbers and assign the minimum to a variable min_num\n\n# Compare the minimum of the first two numbers with the third number\n    # If the third number is smaller, assign it to min_num\n\n# Return min_num",
            "requirements": "",
            "final_plan": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ",
            "code": "function find_minimum(a, b, c)\n    local min_num = a\n\n    if b < min_num then\n        min_num = b\n    end\n\n    if c < min_num then\n        min_num = c\n    end\n\n    return min_num\nend",
            "gen_tc": "",
            "sim_score": "0.4930"
        },
        {
            "id": "419",
            "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
            "draft_plan": "# Initialize a variable to store the total sum\n# Iterate through each number in the list\n    # Round the number to the nearest integer\n    # Add the rounded number to the total sum\n\n# Calculate the total sum multiplied by the length of the list\n# Print the result",
            "requirements": "",
            "final_plan": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum",
            "code": "function round_and_multiply(numbers)\n    local total_sum = 0\n\n    for _, num in ipairs(numbers) do\n        total_sum = total_sum + math.round(num)\n    end\n\n    local result = total_sum * #numbers\n    print(result)\nend\n\nfunction math.round(num)\n    return math.floor(num + 0.5)\nend",
            "gen_tc": "",
            "sim_score": "0.4819"
        },
        {
            "id": "410",
            "prompt": "Write a function to find the minimum value in a given heterogeneous list.",
            "draft_plan": "# Initialize the minimum value to the first element in the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the minimum value\n        # If it is, update the minimum value\n\n# Return the minimum value",
            "requirements": "",
            "final_plan": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val",
            "code": "function find_minimum_value(lst)\n    local min_value = lst[1]\n    \n    for i = 2, #lst do\n        if lst[i] < min_value then\n            min_value = lst[i]\n        end\n    end\n    \n    return min_value\nend",
            "gen_tc": "",
            "sim_score": "0.4796"
        },
        {
            "id": "94",
            "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
            "draft_plan": "# Initialize the minimum second value as positive infinity\n# Initialize the first value of the tuple with minimum second value as None\n\n# Iterate through each tuple in the list\n    # Check if the second value of the current tuple is smaller than the current minimum second value\n        # If yes, update the minimum second value and the first value of the tuple\n\n# Return the first value of the tuple with the smallest second value",
            "requirements": "",
            "final_plan": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ",
            "code": "function get_first_smallest_value(test_list)\n    local min_second = math.huge\n    local first_value = nil\n    \n    for _, tup in ipairs(test_list) do\n        local second_value = tup[2]\n        \n        if second_value < min_second then\n            min_second = second_value\n            first_value = tup[1]\n        end\n    end\n    \n    return first_value\nend",
            "gen_tc": "",
            "sim_score": "0.4671"
        },
        {
            "id": "72",
            "prompt": "Write a python function to check whether the given number can be represented as the difference of two squares or not.",
            "draft_plan": "# Iterate through all numbers from 1 to sqrt(n)\n    # Calculate the square of the current number\n    # Check if the difference between n and the square is a perfect square\n\n# If a perfect square difference is found, return True\n# If no perfect square difference is found, return False",
            "requirements": "",
            "final_plan": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False",
            "code": "function can_be_difference_of_squares(n)\n    for i = 1, math.floor(math.sqrt(n)) do\n        local square = i * i\n        local difference = n - square\n        local square_root = math.sqrt(difference)\n        if square_root == math.floor(square_root) then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4637"
        }
    ],
    "HumanEval/100": [
        {
            "id": "420",
            "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of the cube of even numbers\n# Iterate through each even number from 2 to (2*n) with a step size of 2\n    # Calculate the cube of the current even number\n    # Add the cube to the sum\n\n# Return the sum of the cube of even numbers",
            "requirements": "",
            "final_plan": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
            "code": "function cube_sum_of_even(n)\n    local sum = 0\n    \n    for i = 2, 2 * n, 2 do\n        local cube = i * i * i\n        sum = sum + cube\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5372"
        },
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.5204"
        },
        {
            "id": "287",
            "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
            "draft_plan": "# Initialize the sum of squares variable to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Add the square of the current number to the sum of squares variable\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
            "code": "function sum_of_squares(n)\n    local sum = 0\n\n    for i = 1, n do\n        if i % 2 == 0 then\n            sum = sum + (i * i)\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5126"
        },
        {
            "id": "267",
            "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of squares\n# Initialize a counter variable to keep track of the odd numbers\n# Initialize a variable to store the current odd number\n\n# Iterate from 1 to n (inclusive)\n    # Check if the current number is odd\n        # If it is, square the number and add it to the sum of squares\n        # Increase the counter variable by 1\n        # Check if the counter variable is equal to n\n            # If it is, break the loop\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
            "code": "function sum_of_squares(n)\n    local sum = 0\n    local counter = 0\n    local odd_number = 1\n\n    for i = 1, n do\n        if odd_number % 2 == 1 then\n            sum = sum + odd_number^2\n            counter = counter + 1\n        end\n\n        if counter == n then\n            break\n        end\n\n        odd_number = odd_number + 1\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4954"
        },
        {
            "id": "274",
            "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
            "draft_plan": "# Import the math module\n\n# Define a function that takes in a positive integer n\n    # Initialize a variable `sum_even` to store the sum of even index binomial coefficients\n    # Iterate from 0 to n\n        # Calculate the binomial coefficient using the math module's comb function\n        # Check if the index is even\n            # If it is even, add the binomial coefficient to `sum_even`\n    # Return `sum_even`",
            "requirements": "",
            "final_plan": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ",
            "code": "import math\n\ndef sum_even_binomial_coefficients(n):\n    sum_even = 0\n    for i in range(n+1):\n        coefficient = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even += coefficient\n    return sum_even",
            "gen_tc": "",
            "sim_score": "0.4945"
        },
        {
            "id": "166",
            "prompt": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
            "draft_plan": "# Initialize a variable to keep track of the count of pairs\n# Iterate through each element in the list\n    # Iterate through each element after the current element\n        # Check if the xor of the current pair is an even number\n            # If it is, increment the count of pairs\n\n# Return the count of pairs",
            "requirements": "",
            "final_plan": "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count",
            "code": "function count_even_xor_pairs(list)\n    local pair_count = 0\n\n    for i = 1, #list do\n        for j = i+1, #list do\n            if (list[i] ~ list[j]) % 2 == 0 then\n                pair_count = pair_count + 1\n            end\n        end\n    end\n\n    return pair_count\nend",
            "gen_tc": "",
            "sim_score": "0.4689"
        },
        {
            "id": "453",
            "prompt": "Write a python function to find the sum of even factors of a number.",
            "draft_plan": "# Initialize the sum of even factors to 0\n\n# Iterate from 1 to the given number (inclusive)\n    # Check if the current number is a factor of the given number\n        # Check if the current number is even\n            # If the current number is even, add it to the sum of even factors\n\n# Return the sum of even factors",
            "requirements": "",
            "final_plan": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res",
            "code": "function sum_of_even_factors(number)\n    local sum = 0\n\n    for i = 1, number do\n        if number % i == 0 and i % 2 == 0 then\n            sum = sum + i\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4639"
        },
        {
            "id": "271",
            "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
            "draft_plan": "# Initialize a variable `sum` to 0\n# Initialize a counter variable `count` to 0\n\n# Iterate through numbers starting from 1 until `count` reaches `n`\n    # Check if the current number is even\n        # Increment the `count` variable\n        # Add the current number raised to the fifth power to the `sum` variable\n\n# Return the `sum` variable",
            "requirements": "",
            "final_plan": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ",
            "code": "function sum_of_even_powers(n)\n    local sum = 0\n    local count = 0\n\n    for i = 1, math.huge do\n        if i % 2 == 0 then\n            count = count + 1\n            sum = sum + math.pow(i, 5)\n        end\n\n        if count == n then\n            break\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4311"
        },
        {
            "id": "239",
            "prompt": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
            "draft_plan": "# Initialize a variable count to keep track of the number of possible sequences\n\n# Create a recursive function to find the number of possible sequences\n    # Base case: if n is equal to 0, return 1 (as we have found a valid sequence)\n    \n    # Initialize a variable total_count to keep track of the total number of sequences\n    \n    # Iterate through all possible values for the current element in the sequence\n        # Check if the current element is greater than or equal to twice the previous element and less than or equal to m\n            # If it is, recursively call the function with n-1 and update the total_count by adding the result\n            \n    # Return the total_count\n    \n# Call the recursive function with the given values of m and n and store the result in the variable count\n\n# Return the value of count as the final result",
            "requirements": "",
            "final_plan": "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]",
            "code": "function count_sequences(m, n)\n    local count = 0\n\n    local function find_sequences(prev, remaining)\n        if remaining == 0 then\n            return 1\n        end\n\n        local total_count = 0\n        for i = prev * 2, m do\n            total_count = total_count + find_sequences(i, remaining - 1)\n        end\n\n        return total_count\n    end\n\n    count = find_sequences(1, n)\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4118"
        },
        {
            "id": "253",
            "prompt": "Write a python function that returns the number of integer elements in a given list.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the given list\n    # Check if the current element is an integer\n        # If it is an integer, increment the counter variable\n\n# Return the counter variable as the number of integer elements in the list",
            "requirements": "",
            "final_plan": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr",
            "code": "function count_integer_elements(lst)\n    local count = 0\n\n    for _, element in ipairs(lst) do\n        if type(element) == \"number\" and math.floor(element) == element then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4109"
        }
    ],
    "HumanEval/101": [
        {
            "id": "118",
            "prompt": "Write a function to convert a string to a list of strings split on the space character.",
            "draft_plan": "# Initialize an empty list to store the split strings\n\n# Split the input string on the space character and store the result in a variable\n\n# Iterate through each element in the split result\n    # Append the element to the list\n\n# Return the list of split strings",
            "requirements": "",
            "final_plan": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst",
            "code": "function split_string(str)\n    local split_result = {}\n    for word in string.gmatch(str, \"%S+\") do\n        table.insert(split_result, word)\n    end\n    return split_result\nend",
            "gen_tc": "",
            "sim_score": "0.6605"
        },
        {
            "id": "90",
            "prompt": "Write a python function to find the length of the longest word.",
            "draft_plan": "# Split the input sentence into words using the split() function\n# Initialize a variable maxLength to 0\n\n# Iterate through each word in the list of words\n    # Check if the length of the current word is greater than maxLength\n        # If it is, update maxLength with the length of the current word\n\n# Return maxLength",
            "requirements": "",
            "final_plan": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max",
            "code": "function find_longest_word(sentence)\n    local words = split_sentence(sentence)\n    local max_length = 0\n\n    for _, word in ipairs(words) do\n        local length = string.len(word)\n        if length > max_length then\n            max_length = length\n        end\n    end\n\n    return max_length\nend\n\nfunction split_sentence(sentence)\n    local words = {}\n    for word in string.gmatch(sentence, \"%S+\") do\n        table.insert(words, word)\n    end\n    return words\nend",
            "gen_tc": "",
            "sim_score": "0.5624"
        },
        {
            "id": "305",
            "prompt": "Write a function to return two words from a list of words starting with letter 'p'.",
            "draft_plan": "# Initialize an empty list to store the words starting with 'p'\n\n# Iterate through each word in the list\n    # Check if the first letter of the word is 'p'\n        # If yes, append the word to the list\n\n# Check if the list has at least two words\n    # If yes, return the first two words from the list\n    # If no, return None or an appropriate message",
            "requirements": "",
            "final_plan": "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()",
            "code": "function words_starting_with_p(word_list)\n    local p_words = {}\n\n    for _, word in ipairs(word_list) do\n        if string.sub(word, 1, 1) == \"p\" then\n            table.insert(p_words, word)\n        end\n    end\n\n    if #p_words >= 2 then\n        return p_words[1], p_words[2]\n    else\n        return nil\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5608"
        },
        {
            "id": "132",
            "prompt": "Write a function to convert a tuple to a string.",
            "draft_plan": "# Initialize an empty string\n\n# Iterate through each element in the tuple\n    # Convert the element to a string and append it to the result string\n    # Add a comma after each element except for the last element\n\n# Return the result string",
            "requirements": "",
            "final_plan": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str",
            "code": "function tupleToString(tuple)\n    local result = \"\"\n\n    for i, element in ipairs(tuple) do\n        result = result .. tostring(element)\n\n        if i < #tuple then\n            result = result .. \",\"\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5309"
        },
        {
            "id": "128",
            "prompt": "Write a function to find words that are longer than n characters from a given list of words.",
            "draft_plan": "# Create an empty list to store the result\n\n# Iterate through each word in the given list\n    # Check if the length of the current word is greater than n\n        # If the condition is satisfied, append the word to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t",
            "code": "function find_longer_words(word_list, n)\n    local result = {}\n\n    for _, word in ipairs(word_list) do\n        if string.len(word) > n then\n            table.insert(result, word)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5198"
        },
        {
            "id": "450",
            "prompt": "Write a function to extract specified size of strings from a given list of string values.",
            "draft_plan": "# Initialize an empty list to store the extracted strings\n\n# Iterate through each string in the given list\n    # Check if the length of the current string is equal to the specified size\n        # If it matches, append the string to the result list\n\n# Return the list of extracted strings",
            "requirements": "",
            "final_plan": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result",
            "code": "function extract_strings(strings, size)\n    local extracted_strings = {}\n\n    for _, str in ipairs(strings) do\n        if string.len(str) == size then\n            table.insert(extracted_strings, str)\n        end\n    end\n\n    return extracted_strings\nend",
            "gen_tc": "",
            "sim_score": "0.5147"
        },
        {
            "id": "230",
            "prompt": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
            "draft_plan": "# Define a function that takes in a string and a character as arguments\n    # Convert the string into a list of characters\n    # Iterate through each character in the list\n        # Check if the character is a blank space\n            # If it is, replace it with the given character\n    # Join the list of characters back into a string\n    # Return the modified string\n\n# Example usage:\n# string = \"Hello World\"\n# character = \"-\"\n# modified_string = replace_spaces(string, character)\n# print(modified_string) --> \"Hello-World\"",
            "requirements": "",
            "final_plan": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2",
            "code": "function replace_spaces(str, char)\n    local chars = {}\n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        if c == \" \" then\n            c = char\n        end\n        table.insert(chars, c)\n    end\n    return table.concat(chars)\nend\n\nlocal string = \"Hello World\"\nlocal character = \"-\"\nlocal modified_string = replace_spaces(string, character)\nprint(modified_string) --> \"Hello-World\"",
            "gen_tc": "",
            "sim_score": "0.4751"
        },
        {
            "id": "421",
            "prompt": "Write a function to concatenate each element of tuple by the delimiter.",
            "draft_plan": "# Initialize an empty string to store the concatenated elements\n\n# Iterate through each tuple in the input list\n    # Iterate through each element in the tuple\n        # Concatenate the element to the output string\n        # If the current element is not the last element in the tuple, append the delimiter\n\n# Return the concatenated string",
            "requirements": "",
            "final_plan": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ",
            "code": "function concatenate_tuple_elements(tuple_list, delimiter)\n    local concatenated_string = \"\"\n\n    for _, tuple in ipairs(tuple_list) do\n        for i, element in ipairs(tuple) do\n            concatenated_string = concatenated_string .. element\n            if i ~= #tuple then\n                concatenated_string = concatenated_string .. delimiter\n            end\n        end\n    end\n\n    return concatenated_string\nend",
            "gen_tc": "",
            "sim_score": "0.4622"
        },
        {
            "id": "310",
            "prompt": "Write a function to convert a given string to a tuple of characters.",
            "draft_plan": "# Initialize an empty tuple\n\n# Iterate through each character in the input string\n    # Append the character to the tuple\n\n# Return the tuple",
            "requirements": "",
            "final_plan": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result",
            "code": "function string_to_tuple(string)\n    local tuple = {}\n    \n    for i = 1, string.len(string) do\n        local char = string.sub(string, i, i)\n        table.insert(tuple, char)\n    end\n    \n    return tuple\nend",
            "gen_tc": "",
            "sim_score": "0.4531"
        },
        {
            "id": "454",
            "prompt": "Write a function that matches a word containing 'z'.",
            "draft_plan": "# Iterate through each word in the given list\n    # Check if the character 'z' is present in the word\n        # If 'z' is found, add the word to a new list\n\n# Return the new list containing words with 'z'",
            "requirements": "",
            "final_plan": "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function match_word_with_z(word_list)\n    local z_words = {}\n\n    for _, word in ipairs(word_list) do\n        if string.find(word, 'z') ~= nil then\n            table.insert(z_words, word)\n        end\n    end\n\n    return z_words\nend",
            "gen_tc": "",
            "sim_score": "0.4493"
        }
    ],
    "HumanEval/102": [
        {
            "id": "309",
            "prompt": "Write a python function to find the maximum of two numbers.",
            "draft_plan": "# Define a function that takes two numbers as input\n\n# Check if the first number is greater than the second number\n    # If it is, return the first number as the maximum\n    # Otherwise, return the second number as the maximum",
            "requirements": "",
            "final_plan": "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b ",
            "code": "function find_maximum(num1, num2)\n    if num1 > num2 then\n        return num1\n    else\n        return num2\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.6175"
        },
        {
            "id": "58",
            "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
            "draft_plan": "# Check if the product of the two integers is negative\n    # If the product is negative, it means the two integers have opposite signs\n        # Return True\n\n# If the product is not negative, it means the two integers have the same sign\n    # Return False",
            "requirements": "",
            "final_plan": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ",
            "code": "function haveOppositeSigns(a, b)\n    if a * b < 0 then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.6143"
        },
        {
            "id": "235",
            "prompt": "Write a python function to set all even bits of a given number.",
            "draft_plan": "# Create a mask with all even bits set to 1 and odd bits set to 0\n# Perform bitwise OR operation between the given number and the mask\n# Return the updated number",
            "requirements": "",
            "final_plan": "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) ",
            "code": "function set_even_bits(n)\n    local mask = 0xAAAAAAAA -- Mask with all even bits set to 1 and odd bits set to 0\n    return bit.bor(n, mask)\nend",
            "gen_tc": "",
            "sim_score": "0.5955"
        },
        {
            "id": "274",
            "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
            "draft_plan": "# Import the math module\n\n# Define a function that takes in a positive integer n\n    # Initialize a variable `sum_even` to store the sum of even index binomial coefficients\n    # Iterate from 0 to n\n        # Calculate the binomial coefficient using the math module's comb function\n        # Check if the index is even\n            # If it is even, add the binomial coefficient to `sum_even`\n    # Return `sum_even`",
            "requirements": "",
            "final_plan": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ",
            "code": "import math\n\ndef sum_even_binomial_coefficients(n):\n    sum_even = 0\n    for i in range(n+1):\n        coefficient = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even += coefficient\n    return sum_even",
            "gen_tc": "",
            "sim_score": "0.5784"
        },
        {
            "id": "415",
            "prompt": "Write a python function to find a pair with highest product from a given array of integers.",
            "draft_plan": "# Initialize the maximum product to -infinity\n\n# Iterate through each pair of numbers in the array\n    # Calculate the product of the current pair\n    # Update the maximum product if the current product is greater\n\n# Return the pair with the highest product",
            "requirements": "",
            "final_plan": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ",
            "code": "function find_highest_product(arr)\n    local max_product = -math.huge\n    local pair = {}\n\n    for i = 1, #arr-1 do\n        for j = i+1, #arr do\n            local product = arr[i] * arr[j]\n            if product > max_product then\n                max_product = product\n                pair = {arr[i], arr[j]}\n            end\n        end\n    end\n\n    return pair\nend",
            "gen_tc": "",
            "sim_score": "0.5705"
        },
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.5660"
        },
        {
            "id": "127",
            "prompt": "Write a function to multiply two integers.",
            "draft_plan": "# Initialize the result to 0\n\n# If either of the integers is 0, return 0\n\n# If both integers are negative, convert them to positive\n    # Multiply the positive integers and change the sign of the result to negative\n\n# If only one integer is negative, convert it to positive\n    # Multiply the positive integers and change the sign of the result to negative\n\n# If both integers are positive, multiply them normally\n\n# Return the result",
            "requirements": "",
            "final_plan": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)",
            "code": "function multiply(a, b)\n    local result = 0\n    \n    if a == 0 or b == 0 then\n        return 0\n    end\n    \n    if a < 0 and b < 0 then\n        a = -a\n        b = -b\n    elseif a < 0 then\n        a = -a\n        result = -result\n    elseif b < 0 then\n        b = -b\n        result = -result\n    end\n    \n    while b > 0 do\n        if b % 2 == 1 then\n            result = result + a\n        end\n        a = a * 2\n        b = math.floor(b / 2)\n    end\n    \n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5589"
        },
        {
            "id": "166",
            "prompt": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
            "draft_plan": "# Initialize a variable to keep track of the count of pairs\n# Iterate through each element in the list\n    # Iterate through each element after the current element\n        # Check if the xor of the current pair is an even number\n            # If it is, increment the count of pairs\n\n# Return the count of pairs",
            "requirements": "",
            "final_plan": "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count",
            "code": "function count_even_xor_pairs(list)\n    local pair_count = 0\n\n    for i = 1, #list do\n        for j = i+1, #list do\n            if (list[i] ~ list[j]) % 2 == 0 then\n                pair_count = pair_count + 1\n            end\n        end\n    end\n\n    return pair_count\nend",
            "gen_tc": "",
            "sim_score": "0.5579"
        },
        {
            "id": "412",
            "prompt": "Write a python function to remove odd numbers from a given list.",
            "draft_plan": "# Create an empty list to store the even numbers\n\n# Iterate through each number in the given list\n    # Check if the number is even (number % 2 == 0)\n        # If the number is even, append it to the list of even numbers\n\n# Return the list of even numbers",
            "requirements": "",
            "final_plan": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
            "code": "function remove_odd_numbers(lst)\n    local even_lst = {}\n\n    for _, num in ipairs(lst) do\n        if num % 2 == 0 then\n            table.insert(even_lst, num)\n        end\n    end\n\n    return even_lst\nend",
            "gen_tc": "",
            "sim_score": "0.5524"
        },
        {
            "id": "443",
            "prompt": "Write a python function to find the largest negative number from the given list.",
            "draft_plan": "# Initialize a variable 'largest_negative' to None\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If 'largest_negative' is None or the current number is greater than 'largest_negative', update 'largest_negative' to the current number\n\n# Return 'largest_negative'",
            "requirements": "",
            "final_plan": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
            "code": "function find_largest_negative(numbers)\n    local largest_negative = nil\n\n    for _, number in ipairs(numbers) do\n        if number < 0 then\n            if largest_negative == nil or number > largest_negative then\n                largest_negative = number\n            end\n        end\n    end\n\n    return largest_negative\nend",
            "gen_tc": "",
            "sim_score": "0.5504"
        }
    ],
    "HumanEval/103": [
        {
            "id": "419",
            "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
            "draft_plan": "# Initialize a variable to store the total sum\n# Iterate through each number in the list\n    # Round the number to the nearest integer\n    # Add the rounded number to the total sum\n\n# Calculate the total sum multiplied by the length of the list\n# Print the result",
            "requirements": "",
            "final_plan": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum",
            "code": "function round_and_multiply(numbers)\n    local total_sum = 0\n\n    for _, num in ipairs(numbers) do\n        total_sum = total_sum + math.round(num)\n    end\n\n    local result = total_sum * #numbers\n    print(result)\nend\n\nfunction math.round(num)\n    return math.floor(num + 0.5)\nend",
            "gen_tc": "",
            "sim_score": "0.5912"
        },
        {
            "id": "422",
            "prompt": "Write a python function to find the average of cubes of first n natural numbers.",
            "draft_plan": "# Define a function to find the average of cubes of first n natural numbers\ndef average_of_cubes(n):\n    # Initialize sum of cubes to 0\n    sum_of_cubes = 0\n    \n    # Iterate through the range of 1 to n+1\n    for i in range(1, n+1):\n        # Calculate the cube of the current number and add it to the sum_of_cubes\n        sum_of_cubes += i**3\n    \n    # Calculate the average by dividing the sum_of_cubes by n\n    average = sum_of_cubes / n\n    \n    # Return the average\n    return average",
            "requirements": "",
            "final_plan": "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) ",
            "code": "function average_of_cubes(n)\n    local sum_of_cubes = 0\n    \n    for i = 1, n do\n        sum_of_cubes = sum_of_cubes + i^3\n    end\n    \n    local average = sum_of_cubes / n\n    \n    return average\nend",
            "gen_tc": "",
            "sim_score": "0.5015"
        },
        {
            "id": "292",
            "prompt": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
            "draft_plan": "To find the quotient of two numbers rounded down to the nearest integer, you can use the floor division operator `//` in Python.\n\nHere is the code logic:\n\n```python\ndef quotient(a, b):\n    return a // b\n```\n\nIn this code, the function `quotient` takes two parameters `a` and `b`, representing the numbers for which we want to find the quotient. The floor division `a // b` divides `a` by `b` and returns the quotient rounded down to the nearest integer.\n\nYou can call this function with your desired values to find the quotient. For example:\n\n```python\nresult = quotient(10, 3)\nprint(result)  # Output: 3\n```",
            "requirements": "",
            "final_plan": "def find(n,m):  \n    q = n//m \n    return (q)",
            "code": "function quotient(a, b)\n    return math.floor(a / b)\nend\n\n-- Example usage\nlocal result = quotient(10, 3)\nprint(result) -- Output: 3",
            "gen_tc": "",
            "sim_score": "0.5007"
        },
        {
            "id": "397",
            "prompt": "Write a function to find the median of three numbers.",
            "draft_plan": "# Sort the three numbers in ascending order\n\n# If the middle number is an integer, return it as the median\n# Otherwise, calculate the average of the two middle numbers and return it as the median",
            "requirements": "",
            "final_plan": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median",
            "code": "function findMedian(a, b, c)\n    local sorted = {a, b, c}\n    table.sort(sorted)\n\n    local middleIndex = math.floor(#sorted / 2)\n    \n    if #sorted % 2 == 0 then\n        local median = (sorted[middleIndex] + sorted[middleIndex + 1]) / 2\n        return median\n    else\n        return sorted[middleIndex + 1]\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4889"
        },
        {
            "id": "99",
            "prompt": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
            "draft_plan": "# Initialize an empty string to store the binary representation\n# Check if the input number is 0, if so return '0' as the binary representation\n# Iterate until the input number becomes 0\n    # Append the remainder of the input number divided by 2 to the binary representation string\n    # Update the input number by dividing it by 2, discarding the remainder\n\n# Reverse the binary representation string\n\n# Return the binary representation string",
            "requirements": "",
            "final_plan": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") ",
            "code": "function decimalToBinary(decimal)\n    local binary = \"\"\n\n    if decimal == 0 then\n        return \"0\"\n    end\n\n    while decimal > 0 do\n        binary = tostring(decimal % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n\n    return binary\nend",
            "gen_tc": "",
            "sim_score": "0.4656"
        },
        {
            "id": "235",
            "prompt": "Write a python function to set all even bits of a given number.",
            "draft_plan": "# Create a mask with all even bits set to 1 and odd bits set to 0\n# Perform bitwise OR operation between the given number and the mask\n# Return the updated number",
            "requirements": "",
            "final_plan": "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) ",
            "code": "function set_even_bits(n)\n    local mask = 0xAAAAAAAA -- Mask with all even bits set to 1 and odd bits set to 0\n    return bit.bor(n, mask)\nend",
            "gen_tc": "",
            "sim_score": "0.4508"
        },
        {
            "id": "67",
            "prompt": "Write a function to find the number of ways to partition a set of Bell numbers.",
            "draft_plan": "# Import the math module to use the factorial function\nimport math\n\n# Define a function to calculate the Bell numbers\ndef calculate_bell_number(n):\n    # Create a 2D array to store the Bell numbers\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n\n    # Initialize the first Bell number as 1\n    bell[0][0] = 1\n\n    # Calculate the Bell numbers using dynamic programming\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    # Return the last Bell number\n    return bell[n][0]\n\n# Define a function to calculate the number of ways to partition a set of Bell numbers\ndef calculate_partition_ways(n):\n    # Calculate the Bell number for n\n    bell_number = calculate_bell_number(n)\n\n    # Calculate the number of ways to partition the set\n    partition_ways = math.factorial(n) * bell_number\n\n    # Return the number of ways to partition the set\n    return partition_ways",
            "requirements": "",
            "final_plan": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] ",
            "code": "-- Define a helper function to calculate the Bell numbers\nfunction calculate_bell_number(n)\n    -- Create a 2D array to store the Bell numbers\n    local bell = {}\n    for i = 0, n do\n        bell[i] = {}\n        for j = 0, n do\n            bell[i][j] = 0\n        end\n    end\n\n    -- Initialize the first Bell number as 1\n    bell[0][0] = 1\n\n    -- Calculate the Bell numbers using dynamic programming\n    for i = 1, n do\n        bell[i][0] = bell[i-1][i-1]\n        for j = 1, i do\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        end\n    end\n\n    -- Return the last Bell number\n    return bell[n][0]\nend\n\n-- Define a function to calculate the number of ways to partition a set of Bell numbers\nfunction calculate_partition_ways(n)\n    -- Calculate the Bell number for n\n    local bell_number = calculate_bell_number(n)\n\n    -- Calculate the number of ways to partition the set\n    local partition_ways = math.factorial(n) * bell_number\n\n    -- Return the number of ways to partition the set\n    return partition_ways\nend",
            "gen_tc": "",
            "sim_score": "0.4280"
        },
        {
            "id": "126",
            "prompt": "Write a python function to find the sum of common divisors of two given numbers.",
            "draft_plan": "# Find the common divisors of the two given numbers\n    # Find the smaller number among the two\n    # Initialize an empty list to store the common divisors\n    # Iterate from 1 to the smaller number\n        # Check if the current number is a divisor of both given numbers\n            # If yes, add it to the list of common divisors\n\n# Find the sum of the common divisors\n    # Initialize a variable to store the sum\n    # Iterate through the list of common divisors\n        # Add each divisor to the sum\n\n# Return the sum of the common divisors",
            "requirements": "",
            "final_plan": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum",
            "code": "function sumCommonDivisors(a, b)\n    local smaller = math.min(a, b)\n    local divisors = {}\n\n    for i = 1, smaller do\n        if a % i == 0 and b % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n\n    local sum = 0\n    for _, divisor in ipairs(divisors) do\n        sum = sum + divisor\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4262"
        },
        {
            "id": "476",
            "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.",
            "draft_plan": "# Sort the array in ascending order\n# Initialize variables for the smallest and largest values\n\n# Get the smallest value from the sorted array (first element)\n# Get the largest value from the sorted array (last element)\n\n# Calculate the sum of the smallest and largest values\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum",
            "code": "function sum_smallest_largest(arr)\n    table.sort(arr) -- Sort the array in ascending order\n    \n    local smallest = arr[1] -- Get the smallest value\n    local largest = arr[#arr] -- Get the largest value\n    \n    local sum = smallest + largest -- Calculate the sum\n    \n    return sum -- Return the sum\nend",
            "gen_tc": "",
            "sim_score": "0.4201"
        },
        {
            "id": "404",
            "prompt": "Write a python function to find the minimum of two numbers.",
            "draft_plan": "# Define a function to find the minimum of two numbers\n    # Check if the first number is less than the second number\n        # If true, return the first number\n        # If false, return the second number\n\n# Call the function and pass two numbers as arguments",
            "requirements": "",
            "final_plan": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ",
            "code": "function find_minimum(a, b)\n    if a < b then\n        return a\n    else\n        return b\n    end\nend\n\n-- Example usage\nlocal num1 = 10\nlocal num2 = 5\nlocal min = find_minimum(num1, num2)\nprint(min)  -- Output: 5",
            "gen_tc": "",
            "sim_score": "0.4179"
        }
    ],
    "HumanEval/104": [
        {
            "id": "281",
            "prompt": "Write a python function to check if the elements of a given list are unique or not.",
            "draft_plan": "# Convert the input list into a set\n# Compare the length of the input list with the length of the set\n    # If they are equal, return True (all elements are unique)\n    # If they are not equal, return False (there are duplicate elements)",
            "requirements": "",
            "final_plan": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True",
            "code": "function are_elements_unique(lst)\n    local unique_set = {}\n    for _, elem in ipairs(lst) do\n        if unique_set[elem] then\n            return false\n        else\n            unique_set[elem] = true\n        end\n    end\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.6447"
        },
        {
            "id": "412",
            "prompt": "Write a python function to remove odd numbers from a given list.",
            "draft_plan": "# Create an empty list to store the even numbers\n\n# Iterate through each number in the given list\n    # Check if the number is even (number % 2 == 0)\n        # If the number is even, append it to the list of even numbers\n\n# Return the list of even numbers",
            "requirements": "",
            "final_plan": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
            "code": "function remove_odd_numbers(lst)\n    local even_lst = {}\n\n    for _, num in ipairs(lst) do\n        if num % 2 == 0 then\n            table.insert(even_lst, num)\n        end\n    end\n\n    return even_lst\nend",
            "gen_tc": "",
            "sim_score": "0.6318"
        },
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.5938"
        },
        {
            "id": "426",
            "prompt": "Write a function to filter odd numbers.",
            "draft_plan": "# Initialize an empty list to store the filtered numbers\n\n# Iterate through each number in the input list\n    # Check if the number is odd\n        # If the number is odd, append it to the filtered list\n\n# Return the filtered list",
            "requirements": "",
            "final_plan": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums",
            "code": "function filter_odd_numbers(number_list)\n    local filtered_list = {}\n\n    for _, num in ipairs(number_list) do\n        if num % 2 ~= 0 then\n            table.insert(filtered_list, num)\n        end\n    end\n\n    return filtered_list\nend",
            "gen_tc": "",
            "sim_score": "0.5737"
        },
        {
            "id": "77",
            "prompt": "Write a python function to find whether a number is divisible by 11.",
            "draft_plan": "To determine whether a number is divisible by 11, we can use the following logic:\n\n1. Convert the number to a string.\n2. Iterate through the digits of the number.\n3. Add the digits in odd positions (starting from the rightmost digit) and subtract the sum of the digits in even positions.\n4. If the result is divisible by 11, the original number is also divisible by 11.\n\nHere is the code implementing this logic:\n\n```python\ndef is_divisible_by_11(number):\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Iterate through the digits of the number\n    sum_odd = 0\n    sum_even = 0\n    for i in range(len(number_str)):\n        digit = int(number_str[i])\n        \n        # Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0:\n            sum_odd += digit\n        else:\n            sum_even += digit\n    \n    # Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0:\n        return True\n    else:\n        return False\n```\n\nYou can use this function to check if a number is divisible by 11. For example:\n\n```python\nprint(is_divisible_by_11(121))  # Output: True\nprint(is_divisible_by_11(123))  # Output: False\n```",
            "requirements": "",
            "final_plan": "def is_Diff(n): \n    return (n % 11 == 0) ",
            "code": "function is_divisible_by_11(number)\n    -- Convert the number to a string\n    local number_str = tostring(number)\n    \n    -- Iterate through the digits of the number\n    local sum_odd = 0\n    local sum_even = 0\n    for i = 1, string.len(number_str) do\n        local digit = tonumber(string.sub(number_str, i, i))\n        \n        -- Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0 then\n            sum_even = sum_even + digit\n        else\n            sum_odd = sum_odd + digit\n        end\n    end\n    \n    -- Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0 then\n        return true\n    else\n        return false\n    end\nend\n\nprint(is_divisible_by_11(121))  -- Output: true\nprint(is_divisible_by_11(123))  -- Output: false",
            "gen_tc": "",
            "sim_score": "0.5510"
        },
        {
            "id": "479",
            "prompt": "Write a python function to find the first digit of a given number.",
            "draft_plan": "# Convert the given number to a string\n\n# Iterate through each character in the string\n    # Check if the character is a digit\n        # If it is, return the character as the first digit\n\n# If no digit is found, return \"None\"",
            "requirements": "",
            "final_plan": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ",
            "code": "function firstDigit(number)\n    local numberStr = tostring(number)\n\n    for i = 1, string.len(numberStr) do\n        local char = string.sub(numberStr, i, i)\n        if string.match(char, \"%d\") then\n            return char\n        end\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.5490"
        },
        {
            "id": "57",
            "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.",
            "draft_plan": "# Sort the list of digits in descending order\n\n# Concatenate all the digits in the sorted list\n\n# Convert the concatenated string to an integer and return it",
            "requirements": "",
            "final_plan": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ",
            "code": "function largest_number(digits)\n    table.sort(digits, function(a, b) return a > b end)\n    return tonumber(table.concat(digits))\nend",
            "gen_tc": "",
            "sim_score": "0.5405"
        },
        {
            "id": "472",
            "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.",
            "draft_plan": "# Sort the input list in ascending order\n\n# Iterate through each number in the sorted list, starting from the second number\n    # Check if the current number is consecutive to the previous number\n        # If not, return False\n\n# If all numbers are consecutive, return True",
            "requirements": "",
            "final_plan": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ",
            "code": "function checkConsecutive(lst)\n    table.sort(lst)\n    \n    for i = 2, #lst do\n        if lst[i] ~= lst[i-1] + 1 then\n            return false\n        end\n    end\n    \n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.5361"
        },
        {
            "id": "394",
            "prompt": "Write a function to check if given tuple contains no duplicates.",
            "draft_plan": "# Convert the tuple to a set\n# Check if the length of the set is equal to the length of the tuple\n    # If they are equal, it means there are no duplicates\n    # Otherwise, there are duplicates",
            "requirements": "",
            "final_plan": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res ",
            "code": "function check_no_duplicates(tup)\n    local set = {}\n    \n    for _, value in ipairs(tup) do\n        if set[value] then\n            return false\n        else\n            set[value] = true\n        end\n    end\n    \n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.5340"
        },
        {
            "id": "119",
            "prompt": "Write a python function to find the element that appears only once in a sorted array.",
            "draft_plan": "# Initialize a variable to keep track of the unique element\n# Iterate through the sorted array\n    # Check if the current element is equal to the next element and the previous element\n        # If not, assign the current element to the unique variable\n\n# Return the unique element",
            "requirements": "",
            "final_plan": "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)",
            "code": "function find_unique_element(arr)\n    local unique = nil\n\n    for i = 1, #arr do\n        if (i == 1 or arr[i] ~= arr[i-1]) and (i == #arr or arr[i] ~= arr[i+1]) then\n            unique = arr[i]\n            break\n        end\n    end\n\n    return unique\nend",
            "gen_tc": "",
            "sim_score": "0.5316"
        }
    ],
    "HumanEval/105": [
        {
            "id": "229",
            "prompt": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
            "draft_plan": "# Create two empty lists, one for negative elements and one for positive elements\n\n# Iterate through the first n elements of the array\n    # Check if the element is negative\n        # If it is, append it to the negative elements list\n    # Otherwise, append it to the positive elements list\n\n# Concatenate the negative elements list with the positive elements list\n# Return the resulting list",
            "requirements": "",
            "final_plan": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr",
            "code": "function rearrangeArray(arr, n)\n    local negativeElements = {}\n    local positiveElements = {}\n\n    for i = 1, n do\n        if arr[i] < 0 then\n            table.insert(negativeElements, arr[i])\n        else\n            table.insert(positiveElements, arr[i])\n        end\n    end\n\n    for i = 1, #positiveElements do\n        table.insert(negativeElements, positiveElements[i])\n    end\n\n    return negativeElements\nend",
            "gen_tc": "",
            "sim_score": "0.5601"
        },
        {
            "id": "56",
            "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
            "draft_plan": "# Convert the given number to a string and reverse it\n# Convert the reversed string back to an integer\n# Check if the given number is equal to twice the reversed number plus 1\n# If the condition is true, return True. Otherwise, return False.",
            "requirements": "",
            "final_plan": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
            "code": "function is_one_less_twice_reverse(number)\n    local reverse = tonumber(string.reverse(tostring(number)))\n    if number == (2 * reverse + 1) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5558"
        },
        {
            "id": "407",
            "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.",
            "draft_plan": "# Convert the given number to a list of digits\n\n# Find the first index (from right to left) where the digit is smaller than the digit to its right\n    # If no such index is found, return \"None\" since the number is already the largest possible\n\n# Find the smallest digit to the right of the found index that is larger than the digit at the found index\n\n# Swap the found digit with the smallest larger digit to its right\n\n# Sort the digits to the right of the found index in ascending order\n\n# Concatenate the digits to form the next bigger number\n\n# Return the next bigger number",
            "requirements": "",
            "final_plan": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False",
            "code": "function nextBiggerNumber(num)\n    -- Convert the number to a list of digits\n    local digits = {}\n    local n = num\n    while n > 0 do\n        table.insert(digits, 1, n % 10)\n        n = math.floor(n / 10)\n    end\n\n    -- Find the first index where the digit is smaller than the digit to its right\n    local i = #digits - 1\n    while i >= 1 and digits[i] >= digits[i+1] do\n        i = i - 1\n    end\n\n    -- If no such index is found, return \"None\"\n    if i < 1 then\n        return \"None\"\n    end\n\n    -- Find the smallest larger digit to the right of the found index\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n\n    -- Swap the found digit with the smallest larger digit to its right\n    digits[i], digits[j] = digits[j], digits[i]\n\n    -- Sort the digits to the right of the found index in ascending order\n    for k = i+1, #digits do\n        for l = k+1, #digits do\n            if digits[k] > digits[l] then\n                digits[k], digits[l] = digits[l], digits[k]\n            end\n        end\n    end\n\n    -- Concatenate the digits to form the next bigger number\n    local nextNum = 0\n    for k = 1, #digits do\n        nextNum = nextNum * 10 + digits[k]\n    end\n\n    return nextNum\nend",
            "gen_tc": "",
            "sim_score": "0.5557"
        },
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.5355"
        },
        {
            "id": "296",
            "prompt": "Write a python function to count inversions in an array.",
            "draft_plan": "# Initialize a variable to count the number of inversions\n# Iterate through each element in the array\n    # For each element, iterate through the remaining elements\n        # Check if the current element is greater than any of the remaining elements\n            # If so, increment the inversion count\n\n# Return the inversion count",
            "requirements": "",
            "final_plan": "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count ",
            "code": "function count_inversions(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i+1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend",
            "gen_tc": "",
            "sim_score": "0.5340"
        },
        {
            "id": "77",
            "prompt": "Write a python function to find whether a number is divisible by 11.",
            "draft_plan": "To determine whether a number is divisible by 11, we can use the following logic:\n\n1. Convert the number to a string.\n2. Iterate through the digits of the number.\n3. Add the digits in odd positions (starting from the rightmost digit) and subtract the sum of the digits in even positions.\n4. If the result is divisible by 11, the original number is also divisible by 11.\n\nHere is the code implementing this logic:\n\n```python\ndef is_divisible_by_11(number):\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Iterate through the digits of the number\n    sum_odd = 0\n    sum_even = 0\n    for i in range(len(number_str)):\n        digit = int(number_str[i])\n        \n        # Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0:\n            sum_odd += digit\n        else:\n            sum_even += digit\n    \n    # Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0:\n        return True\n    else:\n        return False\n```\n\nYou can use this function to check if a number is divisible by 11. For example:\n\n```python\nprint(is_divisible_by_11(121))  # Output: True\nprint(is_divisible_by_11(123))  # Output: False\n```",
            "requirements": "",
            "final_plan": "def is_Diff(n): \n    return (n % 11 == 0) ",
            "code": "function is_divisible_by_11(number)\n    -- Convert the number to a string\n    local number_str = tostring(number)\n    \n    -- Iterate through the digits of the number\n    local sum_odd = 0\n    local sum_even = 0\n    for i = 1, string.len(number_str) do\n        local digit = tonumber(string.sub(number_str, i, i))\n        \n        -- Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0 then\n            sum_even = sum_even + digit\n        else\n            sum_odd = sum_odd + digit\n        end\n    end\n    \n    -- Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0 then\n        return true\n    else\n        return false\n    end\nend\n\nprint(is_divisible_by_11(121))  -- Output: true\nprint(is_divisible_by_11(123))  -- Output: false",
            "gen_tc": "",
            "sim_score": "0.5137"
        },
        {
            "id": "456",
            "prompt": "Write a function to reverse each string in a given list of string values.",
            "draft_plan": "# Iterate through each string in the given list\n    # Reverse the current string using string slicing\n    # Update the current string in the list with the reversed string\n\n# Return the modified list",
            "requirements": "",
            "final_plan": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result",
            "code": "function reverse_strings(str_list)\n    for i = 1, #str_list do\n        str_list[i] = string.reverse(str_list[i])\n    end\n    return str_list\nend",
            "gen_tc": "",
            "sim_score": "0.4953"
        },
        {
            "id": "436",
            "prompt": "Write a python function to return the negative numbers in a list.",
            "draft_plan": "# Initialize an empty list to store the negative numbers\n\n# Iterate through each element in the input list\n    # Check if the current element is less than 0\n        # If the element is negative, append it to the list of negative numbers\n\n# Return the list of negative numbers",
            "requirements": "",
            "final_plan": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ",
            "code": "function getNegativeNumbers(numbers)\n    local negativeNumbers = {}\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            table.insert(negativeNumbers, num)\n        end\n    end\n\n    return negativeNumbers\nend",
            "gen_tc": "",
            "sim_score": "0.4918"
        },
        {
            "id": "141",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Implement a sorting algorithm such as bubble sort, insertion sort, merge sort, quick sort, etc.\n\n# Define a function to take a list of elements as input\n    # Iterate through the list to compare each element with its adjacent element(s)\n        # Swap elements if they are in the wrong order\n    # Repeat the above steps until the list is sorted\n\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums",
            "code": "-- Bubble Sort implementation\nfunction sort_list(list)\n    local n = #list\n    for i = 1, n-1 do\n        for j = 1, n-i do\n            if list[j] > list[j+1] then\n                list[j], list[j+1] = list[j+1], list[j]\n            end\n        end\n    end\n    return list\nend",
            "gen_tc": "",
            "sim_score": "0.4864"
        },
        {
            "id": "476",
            "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.",
            "draft_plan": "# Sort the array in ascending order\n# Initialize variables for the smallest and largest values\n\n# Get the smallest value from the sorted array (first element)\n# Get the largest value from the sorted array (last element)\n\n# Calculate the sum of the smallest and largest values\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum",
            "code": "function sum_smallest_largest(arr)\n    table.sort(arr) -- Sort the array in ascending order\n    \n    local smallest = arr[1] -- Get the smallest value\n    local largest = arr[#arr] -- Get the largest value\n    \n    local sum = smallest + largest -- Calculate the sum\n    \n    return sum -- Return the sum\nend",
            "gen_tc": "",
            "sim_score": "0.4842"
        }
    ],
    "HumanEval/106": [
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.7631"
        },
        {
            "id": "453",
            "prompt": "Write a python function to find the sum of even factors of a number.",
            "draft_plan": "# Initialize the sum of even factors to 0\n\n# Iterate from 1 to the given number (inclusive)\n    # Check if the current number is a factor of the given number\n        # Check if the current number is even\n            # If the current number is even, add it to the sum of even factors\n\n# Return the sum of even factors",
            "requirements": "",
            "final_plan": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res",
            "code": "function sum_of_even_factors(number)\n    local sum = 0\n\n    for i = 1, number do\n        if number % i == 0 and i % 2 == 0 then\n            sum = sum + i\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.7579"
        },
        {
            "id": "274",
            "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
            "draft_plan": "# Import the math module\n\n# Define a function that takes in a positive integer n\n    # Initialize a variable `sum_even` to store the sum of even index binomial coefficients\n    # Iterate from 0 to n\n        # Calculate the binomial coefficient using the math module's comb function\n        # Check if the index is even\n            # If it is even, add the binomial coefficient to `sum_even`\n    # Return `sum_even`",
            "requirements": "",
            "final_plan": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ",
            "code": "import math\n\ndef sum_even_binomial_coefficients(n):\n    sum_even = 0\n    for i in range(n+1):\n        coefficient = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even += coefficient\n    return sum_even",
            "gen_tc": "",
            "sim_score": "0.7270"
        },
        {
            "id": "287",
            "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
            "draft_plan": "# Initialize the sum of squares variable to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Add the square of the current number to the sum of squares variable\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
            "code": "function sum_of_squares(n)\n    local sum = 0\n\n    for i = 1, n do\n        if i % 2 == 0 then\n            sum = sum + (i * i)\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.7143"
        },
        {
            "id": "420",
            "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of the cube of even numbers\n# Iterate through each even number from 2 to (2*n) with a step size of 2\n    # Calculate the cube of the current even number\n    # Add the cube to the sum\n\n# Return the sum of the cube of even numbers",
            "requirements": "",
            "final_plan": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
            "code": "function cube_sum_of_even(n)\n    local sum = 0\n    \n    for i = 2, 2 * n, 2 do\n        local cube = i * i * i\n        sum = sum + cube\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6989"
        },
        {
            "id": "267",
            "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of squares\n# Initialize a counter variable to keep track of the odd numbers\n# Initialize a variable to store the current odd number\n\n# Iterate from 1 to n (inclusive)\n    # Check if the current number is odd\n        # If it is, square the number and add it to the sum of squares\n        # Increase the counter variable by 1\n        # Check if the counter variable is equal to n\n            # If it is, break the loop\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
            "code": "function sum_of_squares(n)\n    local sum = 0\n    local counter = 0\n    local odd_number = 1\n\n    for i = 1, n do\n        if odd_number % 2 == 1 then\n            sum = sum + odd_number^2\n            counter = counter + 1\n        end\n\n        if counter == n then\n            break\n        end\n\n        odd_number = odd_number + 1\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6789"
        },
        {
            "id": "271",
            "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
            "draft_plan": "# Initialize a variable `sum` to 0\n# Initialize a counter variable `count` to 0\n\n# Iterate through numbers starting from 1 until `count` reaches `n`\n    # Check if the current number is even\n        # Increment the `count` variable\n        # Add the current number raised to the fifth power to the `sum` variable\n\n# Return the `sum` variable",
            "requirements": "",
            "final_plan": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ",
            "code": "function sum_of_even_powers(n)\n    local sum = 0\n    local count = 0\n\n    for i = 1, math.huge do\n        if i % 2 == 0 then\n            count = count + 1\n            sum = sum + math.pow(i, 5)\n        end\n\n        if count == n then\n            break\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6721"
        },
        {
            "id": "166",
            "prompt": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
            "draft_plan": "# Initialize a variable to keep track of the count of pairs\n# Iterate through each element in the list\n    # Iterate through each element after the current element\n        # Check if the xor of the current pair is an even number\n            # If it is, increment the count of pairs\n\n# Return the count of pairs",
            "requirements": "",
            "final_plan": "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count",
            "code": "function count_even_xor_pairs(list)\n    local pair_count = 0\n\n    for i = 1, #list do\n        for j = i+1, #list do\n            if (list[i] ~ list[j]) % 2 == 0 then\n                pair_count = pair_count + 1\n            end\n        end\n    end\n\n    return pair_count\nend",
            "gen_tc": "",
            "sim_score": "0.6239"
        },
        {
            "id": "65",
            "prompt": "Write a function to flatten a list and sum all of its elements.",
            "draft_plan": "# Initialize a variable to store the sum of all elements\n\n# Iterate through each element in the list\n    # Check if the current element is a list\n        # If it is a list, recursively call the flatten_and_sum function on the current element and add the result to the sum\n    # If it is not a list, add the current element to the sum\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total",
            "code": "function flatten_and_sum(lst)\n    local sum = 0\n\n    for _, element in ipairs(lst) do\n        if type(element) == \"table\" then\n            sum = sum + flatten_and_sum(element)\n        else\n            sum = sum + element\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5981"
        },
        {
            "id": "133",
            "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
            "draft_plan": "# Initialize the sum of negative numbers to 0\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If it is negative, add it to the sum\n\n# Return the sum of negative numbers",
            "requirements": "",
            "final_plan": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)",
            "code": "function sum_of_negative_numbers(numbers)\n    local sum = 0\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            sum = sum + num\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5957"
        }
    ],
    "HumanEval/107": [
        {
            "id": "406",
            "prompt": "Write a python function to find whether the parity of a given number is odd.",
            "draft_plan": "# Check if the number modulo 2 is equal to 1\n    # If the modulo is 1, the number is odd\n    # Return True\n\n# If the modulo is not 1, the number is even\n# Return False",
            "requirements": "",
            "final_plan": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False",
            "code": "function is_odd_parity(number)\n    return number % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.6794"
        },
        {
            "id": "100",
            "prompt": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
            "draft_plan": "# Define a helper function to check if a number is palindrome\n    # Convert the number to a string\n    # Check if the string is equal to its reversed string representation\n\n# Start a loop from the next number after the specified integer\n    # Check if the current number is a palindrome\n        # If yes, return the current number\n\n# If no palindrome is found in the loop, return None",
            "requirements": "",
            "final_plan": "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i",
            "code": "function isPalindrome(num)\n    local str = tostring(num)\n    return str == string.reverse(str)\nend\n\nfunction nextSmallestPalindrome(num)\n    num = num + 1\n\n    while true do\n        if isPalindrome(num) then\n            return num\n        end\n        num = num + 1\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.6473"
        },
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.6351"
        },
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.6325"
        },
        {
            "id": "109",
            "prompt": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
            "draft_plan": "# Convert the binary string to a list of characters\n# Initialize a counter variable to keep track of the number of odd numbers\n\n# Rotate the binary string the given number of times\n    # Remove the last character from the binary string and prepend it to the front\n\n# Convert the rotated binary string back to a string\n# Iterate through each character in the rotated binary string\n    # Convert the character to an integer\n    # Check if the integer value is odd\n        # If so, increment the counter\n\n# Return the counter value",
            "requirements": "",
            "final_plan": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ",
            "code": "function count_odd_numbers(binary_str, rotations)\n    local binary_list = {}\n    local counter = 0\n\n    -- Convert the binary string to a list of characters\n    for char in string.gmatch(binary_str, \".\") do\n        table.insert(binary_list, char)\n    end\n\n    -- Rotate the binary string the given number of times\n    for i = 1, rotations do\n        local last_char = table.remove(binary_list)\n        table.insert(binary_list, 1, last_char)\n    end\n\n    -- Convert the rotated binary string back to a string\n    local rotated_binary_str = table.concat(binary_list)\n\n    -- Iterate through each character in the rotated binary string\n    for i = 1, string.len(rotated_binary_str) do\n        local char = string.sub(rotated_binary_str, i, i)\n        local num = tonumber(char)\n        \n        -- Check if the integer value is odd\n        if num % 2 == 1 then\n            counter = counter + 1\n        end\n    end\n\n    return counter\nend",
            "gen_tc": "",
            "sim_score": "0.6150"
        },
        {
            "id": "166",
            "prompt": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
            "draft_plan": "# Initialize a variable to keep track of the count of pairs\n# Iterate through each element in the list\n    # Iterate through each element after the current element\n        # Check if the xor of the current pair is an even number\n            # If it is, increment the count of pairs\n\n# Return the count of pairs",
            "requirements": "",
            "final_plan": "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count",
            "code": "function count_even_xor_pairs(list)\n    local pair_count = 0\n\n    for i = 1, #list do\n        for j = i+1, #list do\n            if (list[i] ~ list[j]) % 2 == 0 then\n                pair_count = pair_count + 1\n            end\n        end\n    end\n\n    return pair_count\nend",
            "gen_tc": "",
            "sim_score": "0.6078"
        },
        {
            "id": "412",
            "prompt": "Write a python function to remove odd numbers from a given list.",
            "draft_plan": "# Create an empty list to store the even numbers\n\n# Iterate through each number in the given list\n    # Check if the number is even (number % 2 == 0)\n        # If the number is even, append it to the list of even numbers\n\n# Return the list of even numbers",
            "requirements": "",
            "final_plan": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
            "code": "function remove_odd_numbers(lst)\n    local even_lst = {}\n\n    for _, num in ipairs(lst) do\n        if num % 2 == 0 then\n            table.insert(even_lst, num)\n        end\n    end\n\n    return even_lst\nend",
            "gen_tc": "",
            "sim_score": "0.6048"
        },
        {
            "id": "274",
            "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
            "draft_plan": "# Import the math module\n\n# Define a function that takes in a positive integer n\n    # Initialize a variable `sum_even` to store the sum of even index binomial coefficients\n    # Iterate from 0 to n\n        # Calculate the binomial coefficient using the math module's comb function\n        # Check if the index is even\n            # If it is even, add the binomial coefficient to `sum_even`\n    # Return `sum_even`",
            "requirements": "",
            "final_plan": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ",
            "code": "import math\n\ndef sum_even_binomial_coefficients(n):\n    sum_even = 0\n    for i in range(n+1):\n        coefficient = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even += coefficient\n    return sum_even",
            "gen_tc": "",
            "sim_score": "0.5912"
        },
        {
            "id": "56",
            "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
            "draft_plan": "# Convert the given number to a string and reverse it\n# Convert the reversed string back to an integer\n# Check if the given number is equal to twice the reversed number plus 1\n# If the condition is true, return True. Otherwise, return False.",
            "requirements": "",
            "final_plan": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
            "code": "function is_one_less_twice_reverse(number)\n    local reverse = tonumber(string.reverse(tostring(number)))\n    if number == (2 * reverse + 1) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5834"
        },
        {
            "id": "453",
            "prompt": "Write a python function to find the sum of even factors of a number.",
            "draft_plan": "# Initialize the sum of even factors to 0\n\n# Iterate from 1 to the given number (inclusive)\n    # Check if the current number is a factor of the given number\n        # Check if the current number is even\n            # If the current number is even, add it to the sum of even factors\n\n# Return the sum of even factors",
            "requirements": "",
            "final_plan": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res",
            "code": "function sum_of_even_factors(number)\n    local sum = 0\n\n    for i = 1, number do\n        if number % i == 0 and i % 2 == 0 then\n            sum = sum + i\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5738"
        }
    ],
    "HumanEval/108": [
        {
            "id": "66",
            "prompt": "Write a python function to count the number of positive numbers in a list.",
            "draft_plan": "# Initialize a variable count to 0\n\n# Iterate through each number in the list\n    # Check if the number is greater than 0\n        # If it is, increment the count\n\n# Return the count",
            "requirements": "",
            "final_plan": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ",
            "code": "function count_positive_numbers(lst)\n    local count = 0\n\n    for _, num in ipairs(lst) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.7249"
        },
        {
            "id": "133",
            "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
            "draft_plan": "# Initialize the sum of negative numbers to 0\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If it is negative, add it to the sum\n\n# Return the sum of negative numbers",
            "requirements": "",
            "final_plan": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)",
            "code": "function sum_of_negative_numbers(numbers)\n    local sum = 0\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            sum = sum + num\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.7080"
        },
        {
            "id": "436",
            "prompt": "Write a python function to return the negative numbers in a list.",
            "draft_plan": "# Initialize an empty list to store the negative numbers\n\n# Iterate through each element in the input list\n    # Check if the current element is less than 0\n        # If the element is negative, append it to the list of negative numbers\n\n# Return the list of negative numbers",
            "requirements": "",
            "final_plan": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ",
            "code": "function getNegativeNumbers(numbers)\n    local negativeNumbers = {}\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            table.insert(negativeNumbers, num)\n        end\n    end\n\n    return negativeNumbers\nend",
            "gen_tc": "",
            "sim_score": "0.6357"
        },
        {
            "id": "253",
            "prompt": "Write a python function that returns the number of integer elements in a given list.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the given list\n    # Check if the current element is an integer\n        # If it is an integer, increment the counter variable\n\n# Return the counter variable as the number of integer elements in the list",
            "requirements": "",
            "final_plan": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr",
            "code": "function count_integer_elements(lst)\n    local count = 0\n\n    for _, element in ipairs(lst) do\n        if type(element) == \"number\" and math.floor(element) == element then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.6078"
        },
        {
            "id": "61",
            "prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of substrings\n\n# Iterate through each starting index of the substring\n    # Iterate through each ending index of the substring\n        # Get the substring from the starting index to the ending index\n        # Compute the sum of the digits in the substring\n        # Check if the sum of the digits is equal to the length of the substring\n            # If true, increment the counter variable\n\n# Return the counter variable with the total number of substrings",
            "requirements": "",
            "final_plan": "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count",
            "code": "function count_substrings(string)\n    local count = 0\n\n    for i = 1, string.len(string) do\n        for j = i, string.len(string) do\n            local substring = string.sub(string, i, j)\n            local sum = compute_sum(substring)\n            \n            if sum == string.len(substring) then\n                count = count + 1\n            end\n        end\n    end\n\n    return count\nend\n\nfunction compute_sum(substring)\n    local sum = 0\n\n    for i = 1, string.len(substring) do\n        local digit = tonumber(string.sub(substring, i, i))\n        sum = sum + digit\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5836"
        },
        {
            "id": "168",
            "prompt": "Write a function to count the number of occurrences of a number in a given list.",
            "draft_plan": "# Initialize a count variable to 0\n\n# Iterate through each element in the list\n    # Check if the current element is equal to the given number\n        # If it is, increment the count variable\n\n# Return the count variable",
            "requirements": "",
            "final_plan": "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count ",
            "code": "function countOccurrences(list, number)\n    local count = 0\n\n    for _, element in ipairs(list) do\n        if element == number then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5772"
        },
        {
            "id": "58",
            "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
            "draft_plan": "# Check if the product of the two integers is negative\n    # If the product is negative, it means the two integers have opposite signs\n        # Return True\n\n# If the product is not negative, it means the two integers have the same sign\n    # Return False",
            "requirements": "",
            "final_plan": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ",
            "code": "function haveOppositeSigns(a, b)\n    if a * b < 0 then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5599"
        },
        {
            "id": "250",
            "prompt": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the tuple\n    # Check if the current element is equal to the target element\n        # If it is, increment the counter by 1\n\n# Return the value of the counter variable",
            "requirements": "",
            "final_plan": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ",
            "code": "function count_occurrences(t, element)\n    local count = 0\n    \n    for i = 1, #t do\n        if t[i] == element then\n            count = count + 1\n        end\n    end\n    \n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5545"
        },
        {
            "id": "296",
            "prompt": "Write a python function to count inversions in an array.",
            "draft_plan": "# Initialize a variable to count the number of inversions\n# Iterate through each element in the array\n    # For each element, iterate through the remaining elements\n        # Check if the current element is greater than any of the remaining elements\n            # If so, increment the inversion count\n\n# Return the inversion count",
            "requirements": "",
            "final_plan": "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count ",
            "code": "function count_inversions(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i+1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend",
            "gen_tc": "",
            "sim_score": "0.5537"
        },
        {
            "id": "398",
            "prompt": "Write a function to compute the sum of digits of each number of a given list.",
            "draft_plan": "# Initialize an empty list to store the sum of digits for each number\n\n# Iterate through each number in the given list\n    # Convert the number to a string\n    # Initialize a variable to store the sum of digits\n    # Iterate through each digit in the string representation of the number\n        # Convert the digit back to an integer and add it to the sum of digits\n    # Append the sum of digits to the list\n\n# Return the list of sum of digits for each number",
            "requirements": "",
            "final_plan": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
            "code": "function compute_sum_of_digits(numbers)\n    local sum_of_digits = {}\n\n    for _, num in ipairs(numbers) do\n        local num_str = tostring(num)\n        local digits_sum = 0\n\n        for i = 1, string.len(num_str) do\n            digits_sum = digits_sum + tonumber(string.sub(num_str, i, i))\n        end\n\n        table.insert(sum_of_digits, digits_sum)\n    end\n\n    return sum_of_digits\nend",
            "gen_tc": "",
            "sim_score": "0.5512"
        }
    ],
    "HumanEval/109": [
        {
            "id": "229",
            "prompt": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
            "draft_plan": "# Create two empty lists, one for negative elements and one for positive elements\n\n# Iterate through the first n elements of the array\n    # Check if the element is negative\n        # If it is, append it to the negative elements list\n    # Otherwise, append it to the positive elements list\n\n# Concatenate the negative elements list with the positive elements list\n# Return the resulting list",
            "requirements": "",
            "final_plan": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr",
            "code": "function rearrangeArray(arr, n)\n    local negativeElements = {}\n    local positiveElements = {}\n\n    for i = 1, n do\n        if arr[i] < 0 then\n            table.insert(negativeElements, arr[i])\n        else\n            table.insert(positiveElements, arr[i])\n        end\n    end\n\n    for i = 1, #positiveElements do\n        table.insert(negativeElements, positiveElements[i])\n    end\n\n    return negativeElements\nend",
            "gen_tc": "",
            "sim_score": "0.6345"
        },
        {
            "id": "280",
            "prompt": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
            "draft_plan": "# Initialize a variable to store the index position of the element, initialized to -1\n# Iterate through each element in the array along with its index\n    # Check if the current element is equal to the target element\n        # If they are equal, update the index variable with the current index and break out of the loop\n\n# Check if the index variable is still equal to -1\n    # If it is, set the boolean variable to False, indicating the element is not found\n    # If it is not, set the boolean variable to True, indicating the element is found\n\n# Return a tuple with the boolean variable and the index variable",
            "requirements": "",
            "final_plan": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos",
            "code": "function findElement(arr, element)\n    local index = -1\n\n    for i, value in ipairs(arr) do\n        if value == element then\n            index = i\n            break\n        end\n    end\n\n    local found = index ~= -1\n    return found, index\nend",
            "gen_tc": "",
            "sim_score": "0.5421"
        },
        {
            "id": "428",
            "prompt": "Write a function to sort the given array by using shell sort.",
            "draft_plan": "# Define a function to perform shell sort on the given array\n    # Start with a large gap (length of array divided by 2)\n    # Iterate until the gap becomes 0\n        # Iterate through the array from the current gap to the end\n            # Compare the current element with the element at the position gap steps before it\n            # If the current element is smaller, swap them\n        # Reduce the gap by dividing it by 2\n\n# Call the shell sort function on the given array\n# Return the sorted array",
            "requirements": "",
            "final_plan": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list",
            "code": "function shellSort(arr)\n    local n = #arr\n    local gap = math.floor(n / 2)\n    \n    while gap > 0 do\n        for i = gap + 1, n do\n            local temp = arr[i]\n            local j = i\n            \n            while j > gap and arr[j - gap] > temp do\n                arr[j] = arr[j - gap]\n                j = j - gap\n            end\n            \n            arr[j] = temp\n        end\n        \n        gap = math.floor(gap / 2)\n    end\n    \n    return arr\nend\n\n-- Test the function\nlocal arr = {9, 5, 2, 7, 1, 3}\nlocal sortedArr = shellSort(arr)\nfor i = 1, #sortedArr do\n    print(sortedArr[i])\nend",
            "gen_tc": "",
            "sim_score": "0.5183"
        },
        {
            "id": "68",
            "prompt": "Write a python function to check whether the given array is monotonic or not.",
            "draft_plan": "# Check if the length of the array is less than or equal to 2\n    # If true, return True as any array with 0 or 1 element is considered monotonic\n\n# Initialize two variables to track if the array is non-increasing and non-decreasing\n    # Set both variables to True initially\n\n# Iterate through each element in the array starting from index 1\n    # Check if the current element is greater than the previous element\n        # If true, set the non-increasing variable to False\n    # Check if the current element is less than the previous element\n        # If true, set the non-decreasing variable to False\n\n# Check if either the non-increasing or non-decreasing variable is True\n    # If true, return True as the array is monotonic\n    # Otherwise, return False as the array is not monotonic",
            "requirements": "",
            "final_plan": "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",
            "code": "function isMonotonic(arr)\n    if #arr <= 2 then\n        return true\n    end\n\n    local nonIncreasing = true\n    local nonDecreasing = true\n\n    for i = 2, #arr do\n        if arr[i] > arr[i-1] then\n            nonIncreasing = false\n        end\n\n        if arr[i] < arr[i-1] then\n            nonDecreasing = false\n        end\n    end\n\n    return nonIncreasing or nonDecreasing\nend",
            "gen_tc": "",
            "sim_score": "0.5035"
        },
        {
            "id": "119",
            "prompt": "Write a python function to find the element that appears only once in a sorted array.",
            "draft_plan": "# Initialize a variable to keep track of the unique element\n# Iterate through the sorted array\n    # Check if the current element is equal to the next element and the previous element\n        # If not, assign the current element to the unique variable\n\n# Return the unique element",
            "requirements": "",
            "final_plan": "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)",
            "code": "function find_unique_element(arr)\n    local unique = nil\n\n    for i = 1, #arr do\n        if (i == 1 or arr[i] ~= arr[i-1]) and (i == #arr or arr[i] ~= arr[i+1]) then\n            unique = arr[i]\n            break\n        end\n    end\n\n    return unique\nend",
            "gen_tc": "",
            "sim_score": "0.5033"
        },
        {
            "id": "223",
            "prompt": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
            "draft_plan": "# Find the index of the middle element in the array\n# If the middle element is equal to the given element and its index plus n/2 is less than or equal to the length of the array\n    # Check if the element at index (middle index + n/2) is also equal to the given element\n        # If both conditions are true, return True\n# Otherwise, return False",
            "requirements": "",
            "final_plan": "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1",
            "code": "function isMajorityElement(arr, n, elem)\n    local mid = math.floor(n / 2)\n  \n    if arr[mid] == elem and (mid + n / 2) <= n then\n        if arr[mid + (n / 2)] == elem then\n            return true\n        end\n    end\n\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4944"
        },
        {
            "id": "141",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Implement a sorting algorithm such as bubble sort, insertion sort, merge sort, quick sort, etc.\n\n# Define a function to take a list of elements as input\n    # Iterate through the list to compare each element with its adjacent element(s)\n        # Swap elements if they are in the wrong order\n    # Repeat the above steps until the list is sorted\n\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums",
            "code": "-- Bubble Sort implementation\nfunction sort_list(list)\n    local n = #list\n    for i = 1, n-1 do\n        for j = 1, n-i do\n            if list[j] > list[j+1] then\n                list[j], list[j+1] = list[j+1], list[j]\n            end\n        end\n    end\n    return list\nend",
            "gen_tc": "",
            "sim_score": "0.4900"
        },
        {
            "id": "296",
            "prompt": "Write a python function to count inversions in an array.",
            "draft_plan": "# Initialize a variable to count the number of inversions\n# Iterate through each element in the array\n    # For each element, iterate through the remaining elements\n        # Check if the current element is greater than any of the remaining elements\n            # If so, increment the inversion count\n\n# Return the inversion count",
            "requirements": "",
            "final_plan": "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count ",
            "code": "function count_inversions(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i+1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend",
            "gen_tc": "",
            "sim_score": "0.4881"
        },
        {
            "id": "433",
            "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.",
            "draft_plan": "# Define a function that takes a number and an array as input\n    # Iterate through each element in the array\n        # Check if the number is greater than the current element\n            # If it is, return True\n    # If the number is not greater than any element in the array, return False",
            "requirements": "",
            "final_plan": "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]",
            "code": "function checkGreater(number, array)\n    for i, element in ipairs(array) do\n        if number > element then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4810"
        },
        {
            "id": "145",
            "prompt": "Write a python function to find the maximum difference between any two elements in a given array.",
            "draft_plan": "# If the array is empty, return None\n# Initialize the maximum difference to zero\n\n# Iterate through each element in the array\n    # Iterate through each element after the current element\n        # Calculate the difference between the current element and the subsequent element\n        # Update the maximum difference if the calculated difference is greater than the current maximum difference\n\n# Return the maximum difference",
            "requirements": "",
            "final_plan": "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ",
            "code": "function max_difference(arr)\n    if #arr == 0 then\n        return nil\n    end\n\n    local max_diff = 0\n\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            local diff = math.abs(arr[i] - arr[j])\n            if diff > max_diff then\n                max_diff = diff\n            end\n        end\n    end\n\n    return max_diff\nend",
            "gen_tc": "",
            "sim_score": "0.4695"
        }
    ],
    "HumanEval/110": [
        {
            "id": "412",
            "prompt": "Write a python function to remove odd numbers from a given list.",
            "draft_plan": "# Create an empty list to store the even numbers\n\n# Iterate through each number in the given list\n    # Check if the number is even (number % 2 == 0)\n        # If the number is even, append it to the list of even numbers\n\n# Return the list of even numbers",
            "requirements": "",
            "final_plan": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
            "code": "function remove_odd_numbers(lst)\n    local even_lst = {}\n\n    for _, num in ipairs(lst) do\n        if num % 2 == 0 then\n            table.insert(even_lst, num)\n        end\n    end\n\n    return even_lst\nend",
            "gen_tc": "",
            "sim_score": "0.6570"
        },
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.6371"
        },
        {
            "id": "166",
            "prompt": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
            "draft_plan": "# Initialize a variable to keep track of the count of pairs\n# Iterate through each element in the list\n    # Iterate through each element after the current element\n        # Check if the xor of the current pair is an even number\n            # If it is, increment the count of pairs\n\n# Return the count of pairs",
            "requirements": "",
            "final_plan": "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count",
            "code": "function count_even_xor_pairs(list)\n    local pair_count = 0\n\n    for i = 1, #list do\n        for j = i+1, #list do\n            if (list[i] ~ list[j]) % 2 == 0 then\n                pair_count = pair_count + 1\n            end\n        end\n    end\n\n    return pair_count\nend",
            "gen_tc": "",
            "sim_score": "0.6325"
        },
        {
            "id": "426",
            "prompt": "Write a function to filter odd numbers.",
            "draft_plan": "# Initialize an empty list to store the filtered numbers\n\n# Iterate through each number in the input list\n    # Check if the number is odd\n        # If the number is odd, append it to the filtered list\n\n# Return the filtered list",
            "requirements": "",
            "final_plan": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums",
            "code": "function filter_odd_numbers(number_list)\n    local filtered_list = {}\n\n    for _, num in ipairs(number_list) do\n        if num % 2 ~= 0 then\n            table.insert(filtered_list, num)\n        end\n    end\n\n    return filtered_list\nend",
            "gen_tc": "",
            "sim_score": "0.5830"
        },
        {
            "id": "406",
            "prompt": "Write a python function to find whether the parity of a given number is odd.",
            "draft_plan": "# Check if the number modulo 2 is equal to 1\n    # If the modulo is 1, the number is odd\n    # Return True\n\n# If the modulo is not 1, the number is even\n# Return False",
            "requirements": "",
            "final_plan": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False",
            "code": "function is_odd_parity(number)\n    return number % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.5669"
        },
        {
            "id": "58",
            "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
            "draft_plan": "# Check if the product of the two integers is negative\n    # If the product is negative, it means the two integers have opposite signs\n        # Return True\n\n# If the product is not negative, it means the two integers have the same sign\n    # Return False",
            "requirements": "",
            "final_plan": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ",
            "code": "function haveOppositeSigns(a, b)\n    if a * b < 0 then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5451"
        },
        {
            "id": "235",
            "prompt": "Write a python function to set all even bits of a given number.",
            "draft_plan": "# Create a mask with all even bits set to 1 and odd bits set to 0\n# Perform bitwise OR operation between the given number and the mask\n# Return the updated number",
            "requirements": "",
            "final_plan": "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) ",
            "code": "function set_even_bits(n)\n    local mask = 0xAAAAAAAA -- Mask with all even bits set to 1 and odd bits set to 0\n    return bit.bor(n, mask)\nend",
            "gen_tc": "",
            "sim_score": "0.5442"
        },
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.5367"
        },
        {
            "id": "161",
            "prompt": "Write a function to remove all elements from a given list present in another list.",
            "draft_plan": "# Initialize an empty list to store the elements not present in the other list\n\n# Iterate through each element in the given list\n    # Check if the element is not present in the other list\n        # If not present, add it to the new list\n\n# Return the new list",
            "requirements": "",
            "final_plan": "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result",
            "code": "function remove_elements(list1, list2)\n    local new_list = {}\n\n    for _, element in ipairs(list1) do\n        if not contains(list2, element) then\n            table.insert(new_list, element)\n        end\n    end\n\n    return new_list\nend\n\nfunction contains(list, element)\n    for _, value in ipairs(list) do\n        if value == element then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5197"
        },
        {
            "id": "453",
            "prompt": "Write a python function to find the sum of even factors of a number.",
            "draft_plan": "# Initialize the sum of even factors to 0\n\n# Iterate from 1 to the given number (inclusive)\n    # Check if the current number is a factor of the given number\n        # Check if the current number is even\n            # If the current number is even, add it to the sum of even factors\n\n# Return the sum of even factors",
            "requirements": "",
            "final_plan": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res",
            "code": "function sum_of_even_factors(number)\n    local sum = 0\n\n    for i = 1, number do\n        if number % i == 0 and i % 2 == 0 then\n            sum = sum + i\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5115"
        }
    ],
    "HumanEval/111": [
        {
            "id": "461",
            "prompt": "Write a python function to count the upper case characters in a given string.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of uppercase characters\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter variable\n\n# Return the counter variable, which represents the number of uppercase characters in the string",
            "requirements": "",
            "final_plan": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
            "code": "function count_uppercase_chars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= 'A' and char <= 'Z' then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5736"
        },
        {
            "id": "237",
            "prompt": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.",
            "draft_plan": "# Initialize an empty dictionary\n\n# Iterate through each tuple in the list\n    # Check if the current tuple is already a key in the dictionary\n        # If it is, increment the count by 1\n        # If it is not, add the tuple as a key with a count of 1\n\n# Return the dictionary",
            "requirements": "",
            "final_plan": "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) ",
            "code": "function count_tuples(list_of_tuples)\n    local tuple_count = {}\n\n    for _, tup in ipairs(list_of_tuples) do\n        if tuple_count[tup] then\n            tuple_count[tup] = tuple_count[tup] + 1\n        else\n            tuple_count[tup] = 1\n        end\n    end\n\n    return tuple_count\nend",
            "gen_tc": "",
            "sim_score": "0.5711"
        },
        {
            "id": "88",
            "prompt": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.",
            "draft_plan": "# Initialize an empty dictionary\n\n# Iterate through each element in the list\n    # Check if the element is already a key in the dictionary\n        # If it is, increment its value by 1\n        # If it is not, add it as a new key with value 1\n\n# Return the dictionary containing the frequency of elements",
            "requirements": "",
            "final_plan": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count",
            "code": "function get_frequency(lst)\n    local frequency = {}\n\n    for _, element in ipairs(lst) do\n        if frequency[element] then\n            frequency[element] = frequency[element] + 1\n        else\n            frequency[element] = 1\n        end\n    end\n\n    return frequency\nend",
            "gen_tc": "",
            "sim_score": "0.5625"
        },
        {
            "id": "97",
            "prompt": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.",
            "draft_plan": "# Create an empty dictionary to store the frequency of elements\n\n# Iterate through each sublist in the flattened list\n    # Iterate through each element in the sublist\n        # Check if the element is already in the dictionary\n            # If it is, increment its count by 1\n            # If it is not, add it to the dictionary with a count of 1\n\n# Return the dictionary containing the frequency of each element",
            "requirements": "",
            "final_plan": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n",
            "code": "function count_frequency(flattened_list)\n    local frequency_dict = {}\n\n    for _, sublist in ipairs(flattened_list) do\n        for _, element in ipairs(sublist) do\n            if frequency_dict[element] then\n                frequency_dict[element] = frequency_dict[element] + 1\n            else\n                frequency_dict[element] = 1\n            end\n        end\n    end\n\n    return frequency_dict\nend",
            "gen_tc": "",
            "sim_score": "0.5590"
        },
        {
            "id": "395",
            "prompt": "Write a python function to find the first non-repeated character in a given string.",
            "draft_plan": "# Create an empty dictionary to store the count of each character\n# Iterate through each character in the given string\n    # If the character is already in the dictionary, increase its count by 1\n    # If the character is not in the dictionary, add it with a count of 1\n\n# Iterate through each character in the given string again\n    # Check if the count of the current character in the dictionary is 1\n        # If it is, return the current character as the first non-repeated character\n\n# If no non-repeated character is found, return \"None\"",
            "requirements": "",
            "final_plan": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None",
            "code": "function firstNonRepeatedChar(str)\n    local charCount = {}\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if charCount[char] then\n            charCount[char] = charCount[char] + 1\n        else\n            charCount[char] = 1\n        end\n    end\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if charCount[char] == 1 then\n            return char\n        end\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.5588"
        },
        {
            "id": "165",
            "prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
            "draft_plan": "# Initialize a variable to keep track of the count of characters at the same position in the English alphabet\n# Iterate through each character in the input string\n    # Convert the character to lowercase\n    # Check if the character is an alphabet character\n        # Get the position of the character in the English alphabet by subtracting the ASCII value of 'a' or 'A'\n        # Check if the position is equal to the index of the character in the string\n            # If the condition is true, increment the count\n\n# Return the count of characters at the same position in the English alphabet",
            "requirements": "",
            "final_plan": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ",
            "code": "function countSamePositionChars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local c = string.lower(string.sub(str, i, i))\n        if c >= \"a\" and c <= \"z\" then\n            local position = string.byte(c) - string.byte(\"a\") + 1\n            if position == i then\n                count = count + 1\n            end\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5351"
        },
        {
            "id": "446",
            "prompt": "Write a python function to count the occurence of all elements of list in a tuple.",
            "draft_plan": "# Initialize an empty dictionary to store the element counts\n\n# Iterate through each element in the list\n    # Check if the element exists in the tuple\n        # If it exists, increment the count in the dictionary by 1\n        # If it doesn't exist, add the element to the dictionary with a count of 1\n\n# Return the dictionary with the element counts",
            "requirements": "",
            "final_plan": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ",
            "code": "function count_occurrence(list, tuple)\n    local counts = {}\n    \n    for _, element in ipairs(list) do\n        if contains(tuple, element) then\n            counts[element] = (counts[element] or 0) + 1\n        end\n    end\n    \n    return counts\nend\n\nfunction contains(tuple, element)\n    for _, value in ipairs(tuple) do\n        if value == element then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5241"
        },
        {
            "id": "250",
            "prompt": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the tuple\n    # Check if the current element is equal to the target element\n        # If it is, increment the counter by 1\n\n# Return the value of the counter variable",
            "requirements": "",
            "final_plan": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ",
            "code": "function count_occurrences(t, element)\n    local count = 0\n    \n    for i = 1, #t do\n        if t[i] == element then\n            count = count + 1\n        end\n    end\n    \n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5093"
        },
        {
            "id": "172",
            "prompt": "Write a function to count the number of occurence of the string 'std' in a given string.",
            "draft_plan": "# Initialize a count variable to 0\n\n# Iterate through each character and its index in the input string\n    # Check if the current character and the next two characters form the string 'std'\n        # If the condition is satisfied, increment the count variable\n\n# Return the count variable",
            "requirements": "",
            "final_plan": "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count",
            "code": "function count_occurrence(string)\n    local count = 0\n\n    for i = 1, string.len(string) - 2 do\n        if string.sub(string, i, i + 2) == \"std\" then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5024"
        },
        {
            "id": "464",
            "prompt": "Write a function to check if all values are same in a dictionary.",
            "draft_plan": "# Get the first value from the dictionary\n# Iterate through all the values in the dictionary\n    # Check if the current value is equal to the first value\n        # If not equal, return False\n\n# If all values are equal, return True",
            "requirements": "",
            "final_plan": "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result",
            "code": "function checkAllSame(dict)\n    local firstValue = nil\n    \n    for _, value in pairs(dict) do\n        if firstValue == nil then\n            firstValue = value\n        elseif value ~= firstValue then\n            return false\n        end\n    end\n    \n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.4670"
        }
    ],
    "HumanEval/112": [
        {
            "id": "131",
            "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
            "draft_plan": "# Create a list of vowels (including both lowercase and uppercase)\n# Convert the input string into a list of characters\n\n# Initialize two pointers: one at the start of the string and one at the end\n# Iterate while the pointers don't overlap\n    # Check if the character at the start pointer is a vowel\n        # If it is, then check if the character at the end pointer is also a vowel\n            # If it is, swap the characters at the start and end pointers\n            # Move the start pointer to the next character\n            # Move the end pointer to the previous character\n        # If the character at the end pointer is not a vowel, move the end pointer to the previous character\n    \n# Convert the modified list of characters back into a string and return it",
            "requirements": "",
            "final_plan": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string",
            "code": "function reverse_vowels(str)\n    local vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }\n    local chars = {}\n    for i = 1, string.len(str) do\n        table.insert(chars, string.sub(str, i, i))\n    end\n    \n    local start = 1\n    local finish = string.len(str)\n    \n    while start < finish do\n        if is_vowel(chars[start], vowels) then\n            while not is_vowel(chars[finish], vowels) and finish > start do\n                finish = finish - 1\n            end\n            if finish > start then\n                chars[start], chars[finish] = chars[finish], chars[start]\n                start = start + 1\n                finish = finish - 1\n            end\n        else\n            start = start + 1\n        end\n    end\n    \n    return table.concat(chars)\nend\n\nfunction is_vowel(char, vowels)\n    for _, vowel in ipairs(vowels) do\n        if char == vowel then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.6519"
        },
        {
            "id": "100",
            "prompt": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
            "draft_plan": "# Define a helper function to check if a number is palindrome\n    # Convert the number to a string\n    # Check if the string is equal to its reversed string representation\n\n# Start a loop from the next number after the specified integer\n    # Check if the current number is a palindrome\n        # If yes, return the current number\n\n# If no palindrome is found in the loop, return None",
            "requirements": "",
            "final_plan": "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i",
            "code": "function isPalindrome(num)\n    local str = tostring(num)\n    return str == string.reverse(str)\nend\n\nfunction nextSmallestPalindrome(num)\n    num = num + 1\n\n    while true do\n        if isPalindrome(num) then\n            return num\n        end\n        num = num + 1\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.6279"
        },
        {
            "id": "456",
            "prompt": "Write a function to reverse each string in a given list of string values.",
            "draft_plan": "# Iterate through each string in the given list\n    # Reverse the current string using string slicing\n    # Update the current string in the list with the reversed string\n\n# Return the modified list",
            "requirements": "",
            "final_plan": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result",
            "code": "function reverse_strings(str_list)\n    for i = 1, #str_list do\n        str_list[i] = string.reverse(str_list[i])\n    end\n    return str_list\nend",
            "gen_tc": "",
            "sim_score": "0.6149"
        },
        {
            "id": "56",
            "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
            "draft_plan": "# Convert the given number to a string and reverse it\n# Convert the reversed string back to an integer\n# Check if the given number is equal to twice the reversed number plus 1\n# If the condition is true, return True. Otherwise, return False.",
            "requirements": "",
            "final_plan": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
            "code": "function is_one_less_twice_reverse(number)\n    local reverse = tonumber(string.reverse(tostring(number)))\n    if number == (2 * reverse + 1) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5726"
        },
        {
            "id": "247",
            "prompt": "Write a function to find the length of the longest palindromic subsequence in the given string.",
            "draft_plan": "# Create a 2D array of size n x n, where n is the length of the input string\n# Fill the diagonal with 1, as each character is a palindrome of length 1\n\n# Iterate through the remaining elements of the array in a bottom-up manner\n    # If the characters at the current indices match\n        # Set the value of the current cell as 2 plus the value in the cell diagonally below and to the right (i+1, j+1)\n    # Otherwise, set the value of the current cell as the maximum of the value in the cell to the left (i, j-1) and the value in the cell below (i+1, j)\n\n# Return the value in the top-right cell of the array, which represents the length of the longest palindromic subsequence",
            "requirements": "",
            "final_plan": "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]",
            "code": "function longestPalindromicSubsequence(str)\n    local n = string.len(str)\n    local dp = {}\n    \n    -- Initialize diagonal with 1\n    for i = 1, n do\n        dp[i] = {}\n        dp[i][i] = 1\n    end\n    \n    -- Fill the array in a bottom-up manner\n    for i = n-1, 1, -1 do\n        for j = i+1, n do\n            if string.sub(str, i, i) == string.sub(str, j, j) then\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else\n                dp[i][j] = math.max(dp[i][j-1], dp[i+1][j])\n            end\n        end\n    end\n    \n    return dp[1][n]\nend",
            "gen_tc": "",
            "sim_score": "0.5559"
        },
        {
            "id": "11",
            "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
            "draft_plan": "# Find the index of the first occurrence of the given character in the string\n# Find the index of the last occurrence of the given character in the string\n\n# If both indices are valid\n    # Remove the first occurrence of the character from the string\n    # Decrement the index of the last occurrence by 1 to account for the removal\n    # Remove the last occurrence of the character from the string\n\n# Return the modified string",
            "requirements": "",
            "final_plan": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ",
            "code": "function removeFirstAndLastOccurrence(str, char)\n    local firstIndex = string.find(str, char)\n    local lastIndex = string.find(str:reverse(), char)\n\n    if firstIndex and lastIndex then\n        str = string.sub(str, 1, firstIndex - 1) .. string.sub(str, firstIndex + 1)\n        lastIndex = string.len(str) - lastIndex + 1\n        str = string.sub(str, 1, lastIndex - 1) .. string.sub(str, lastIndex + 1)\n    end\n\n    return str\nend",
            "gen_tc": "",
            "sim_score": "0.5432"
        },
        {
            "id": "18",
            "prompt": "Write a function to remove characters from the first string which are present in the second string.",
            "draft_plan": "# Convert the second string into a set for efficient lookup\n\n# Initialize an empty string to store the result\n\n# Iterate through each character in the first string\n    # Check if the character is not present in the second string\n        # Append the character to the result string\n\n# Return the result string",
            "requirements": "",
            "final_plan": "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) ",
            "code": "function removeChars(str1, str2)\n    local charsSet = {}\n    local result = \"\"\n\n    for i = 1, string.len(str2) do\n        charsSet[string.sub(str2, i, i)] = true\n    end\n\n    for i = 1, string.len(str1) do\n        local char = string.sub(str1, i, i)\n        if not charsSet[char] then\n            result = result .. char\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5209"
        },
        {
            "id": "226",
            "prompt": "Write a python function to remove the characters which have odd index values of a given string.",
            "draft_plan": "# Initialize an empty string to store the result\n\n# Iterate through each character and its index in the input string\n    # Check if the index of the current character is even\n        # If it is even, append the character to the result string\n\n# Return the result string",
            "requirements": "",
            "final_plan": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result",
            "code": "function remove_odd_index_chars(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        if i % 2 == 0 then\n            result = result .. string.sub(str, i, i)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5188"
        },
        {
            "id": "437",
            "prompt": "Write a function to remove odd characters in a string.",
            "draft_plan": "# Initialize an empty string to store the result\n\n# Iterate through each character in the input string\n    # Check if the index of the current character is even\n        # If the index is even, append the character to the result string\n\n# Return the result string",
            "requirements": "",
            "final_plan": "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2",
            "code": "function removeOddCharacters(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        if i % 2 == 0 then\n            result = result .. string.sub(str, i, i)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5027"
        },
        {
            "id": "396",
            "prompt": "Write a function to check whether the given string starts and ends with the same character or not.",
            "draft_plan": "# Check if the first character of the string is equal to the last character\n    # If they are equal, return True\n    # If they are not equal, return False",
            "requirements": "",
            "final_plan": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ",
            "code": "function starts_ends_same(str)\n    local first_char = string.sub(str, 1, 1)\n    local last_char = string.sub(str, -1)\n    \n    if first_char == last_char then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4887"
        }
    ],
    "HumanEval/113": [
        {
            "id": "109",
            "prompt": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
            "draft_plan": "# Convert the binary string to a list of characters\n# Initialize a counter variable to keep track of the number of odd numbers\n\n# Rotate the binary string the given number of times\n    # Remove the last character from the binary string and prepend it to the front\n\n# Convert the rotated binary string back to a string\n# Iterate through each character in the rotated binary string\n    # Convert the character to an integer\n    # Check if the integer value is odd\n        # If so, increment the counter\n\n# Return the counter value",
            "requirements": "",
            "final_plan": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ",
            "code": "function count_odd_numbers(binary_str, rotations)\n    local binary_list = {}\n    local counter = 0\n\n    -- Convert the binary string to a list of characters\n    for char in string.gmatch(binary_str, \".\") do\n        table.insert(binary_list, char)\n    end\n\n    -- Rotate the binary string the given number of times\n    for i = 1, rotations do\n        local last_char = table.remove(binary_list)\n        table.insert(binary_list, 1, last_char)\n    end\n\n    -- Convert the rotated binary string back to a string\n    local rotated_binary_str = table.concat(binary_list)\n\n    -- Iterate through each character in the rotated binary string\n    for i = 1, string.len(rotated_binary_str) do\n        local char = string.sub(rotated_binary_str, i, i)\n        local num = tonumber(char)\n        \n        -- Check if the integer value is odd\n        if num % 2 == 1 then\n            counter = counter + 1\n        end\n    end\n\n    return counter\nend",
            "gen_tc": "",
            "sim_score": "0.7040"
        },
        {
            "id": "412",
            "prompt": "Write a python function to remove odd numbers from a given list.",
            "draft_plan": "# Create an empty list to store the even numbers\n\n# Iterate through each number in the given list\n    # Check if the number is even (number % 2 == 0)\n        # If the number is even, append it to the list of even numbers\n\n# Return the list of even numbers",
            "requirements": "",
            "final_plan": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
            "code": "function remove_odd_numbers(lst)\n    local even_lst = {}\n\n    for _, num in ipairs(lst) do\n        if num % 2 == 0 then\n            table.insert(even_lst, num)\n        end\n    end\n\n    return even_lst\nend",
            "gen_tc": "",
            "sim_score": "0.6759"
        },
        {
            "id": "166",
            "prompt": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
            "draft_plan": "# Initialize a variable to keep track of the count of pairs\n# Iterate through each element in the list\n    # Iterate through each element after the current element\n        # Check if the xor of the current pair is an even number\n            # If it is, increment the count of pairs\n\n# Return the count of pairs",
            "requirements": "",
            "final_plan": "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count",
            "code": "function count_even_xor_pairs(list)\n    local pair_count = 0\n\n    for i = 1, #list do\n        for j = i+1, #list do\n            if (list[i] ~ list[j]) % 2 == 0 then\n                pair_count = pair_count + 1\n            end\n        end\n    end\n\n    return pair_count\nend",
            "gen_tc": "",
            "sim_score": "0.6528"
        },
        {
            "id": "226",
            "prompt": "Write a python function to remove the characters which have odd index values of a given string.",
            "draft_plan": "# Initialize an empty string to store the result\n\n# Iterate through each character and its index in the input string\n    # Check if the index of the current character is even\n        # If it is even, append the character to the result string\n\n# Return the result string",
            "requirements": "",
            "final_plan": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result",
            "code": "function remove_odd_index_chars(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        if i % 2 == 0 then\n            result = result .. string.sub(str, i, i)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.6521"
        },
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.6466"
        },
        {
            "id": "437",
            "prompt": "Write a function to remove odd characters in a string.",
            "draft_plan": "# Initialize an empty string to store the result\n\n# Iterate through each character in the input string\n    # Check if the index of the current character is even\n        # If the index is even, append the character to the result string\n\n# Return the result string",
            "requirements": "",
            "final_plan": "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2",
            "code": "function removeOddCharacters(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        if i % 2 == 0 then\n            result = result .. string.sub(str, i, i)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.6309"
        },
        {
            "id": "426",
            "prompt": "Write a function to filter odd numbers.",
            "draft_plan": "# Initialize an empty list to store the filtered numbers\n\n# Iterate through each number in the input list\n    # Check if the number is odd\n        # If the number is odd, append it to the filtered list\n\n# Return the filtered list",
            "requirements": "",
            "final_plan": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums",
            "code": "function filter_odd_numbers(number_list)\n    local filtered_list = {}\n\n    for _, num in ipairs(number_list) do\n        if num % 2 ~= 0 then\n            table.insert(filtered_list, num)\n        end\n    end\n\n    return filtered_list\nend",
            "gen_tc": "",
            "sim_score": "0.6246"
        },
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.5961"
        },
        {
            "id": "168",
            "prompt": "Write a function to count the number of occurrences of a number in a given list.",
            "draft_plan": "# Initialize a count variable to 0\n\n# Iterate through each element in the list\n    # Check if the current element is equal to the given number\n        # If it is, increment the count variable\n\n# Return the count variable",
            "requirements": "",
            "final_plan": "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count ",
            "code": "function countOccurrences(list, number)\n    local count = 0\n\n    for _, element in ipairs(list) do\n        if element == number then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5755"
        },
        {
            "id": "406",
            "prompt": "Write a python function to find whether the parity of a given number is odd.",
            "draft_plan": "# Check if the number modulo 2 is equal to 1\n    # If the modulo is 1, the number is odd\n    # Return True\n\n# If the modulo is not 1, the number is even\n# Return False",
            "requirements": "",
            "final_plan": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False",
            "code": "function is_odd_parity(number)\n    return number % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.5613"
        }
    ],
    "HumanEval/114": [
        {
            "id": "476",
            "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.",
            "draft_plan": "# Sort the array in ascending order\n# Initialize variables for the smallest and largest values\n\n# Get the smallest value from the sorted array (first element)\n# Get the largest value from the sorted array (last element)\n\n# Calculate the sum of the smallest and largest values\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum",
            "code": "function sum_smallest_largest(arr)\n    table.sort(arr) -- Sort the array in ascending order\n    \n    local smallest = arr[1] -- Get the smallest value\n    local largest = arr[#arr] -- Get the largest value\n    \n    local sum = smallest + largest -- Calculate the sum\n    \n    return sum -- Return the sum\nend",
            "gen_tc": "",
            "sim_score": "0.6162"
        },
        {
            "id": "457",
            "prompt": "Write a python function to find the sublist having minimum length.",
            "draft_plan": "# If the input list is empty, return an empty list\n\n# Initialize the minimum length variable to a large value and the minimum sublist to an empty list\n\n# Iterate through each sublist in the input list\n    # If the length of the current sublist is less than the minimum length\n        # Update the minimum length and the minimum sublist\n\n# Return the minimum sublist",
            "requirements": "",
            "final_plan": "def Find_Min(lst): \n    return min(lst, key=len) ",
            "code": "function find_min_sublist(input_list)\n    if #input_list == 0 then\n        return {}\n    end\n\n    local min_length = math.huge\n    local min_sublist = {}\n\n    for _, sublist in ipairs(input_list) do\n        if #sublist < min_length then\n            min_length = #sublist\n            min_sublist = sublist\n        end\n    end\n\n    return min_sublist\nend",
            "gen_tc": "",
            "sim_score": "0.5643"
        },
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.5534"
        },
        {
            "id": "133",
            "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
            "draft_plan": "# Initialize the sum of negative numbers to 0\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If it is negative, add it to the sum\n\n# Return the sum of negative numbers",
            "requirements": "",
            "final_plan": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)",
            "code": "function sum_of_negative_numbers(numbers)\n    local sum = 0\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            sum = sum + num\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5206"
        },
        {
            "id": "94",
            "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
            "draft_plan": "# Initialize the minimum second value as positive infinity\n# Initialize the first value of the tuple with minimum second value as None\n\n# Iterate through each tuple in the list\n    # Check if the second value of the current tuple is smaller than the current minimum second value\n        # If yes, update the minimum second value and the first value of the tuple\n\n# Return the first value of the tuple with the smallest second value",
            "requirements": "",
            "final_plan": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ",
            "code": "function get_first_smallest_value(test_list)\n    local min_second = math.huge\n    local first_value = nil\n    \n    for _, tup in ipairs(test_list) do\n        local second_value = tup[2]\n        \n        if second_value < min_second then\n            min_second = second_value\n            first_value = tup[1]\n        end\n    end\n    \n    return first_value\nend",
            "gen_tc": "",
            "sim_score": "0.5064"
        },
        {
            "id": "404",
            "prompt": "Write a python function to find the minimum of two numbers.",
            "draft_plan": "# Define a function to find the minimum of two numbers\n    # Check if the first number is less than the second number\n        # If true, return the first number\n        # If false, return the second number\n\n# Call the function and pass two numbers as arguments",
            "requirements": "",
            "final_plan": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ",
            "code": "function find_minimum(a, b)\n    if a < b then\n        return a\n    else\n        return b\n    end\nend\n\n-- Example usage\nlocal num1 = 10\nlocal num2 = 5\nlocal min = find_minimum(num1, num2)\nprint(min)  -- Output: 5",
            "gen_tc": "",
            "sim_score": "0.5005"
        },
        {
            "id": "95",
            "prompt": "Write a python function to find the length of the smallest list in a list of lists.",
            "draft_plan": "# Initialize the minimum length to a large number\n\n# Iterate through each list in the input list\n    # Check the length of the current list\n        # If the length is smaller than the current minimum length, update the minimum length\n\n# Return the minimum length",
            "requirements": "",
            "final_plan": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength ",
            "code": "function find_smallest_list_length(list_of_lists)\n    local min_length = math.huge\n\n    for _, list in ipairs(list_of_lists) do\n        local length = #list\n        if length < min_length then\n            min_length = length\n        end\n    end\n\n    return min_length\nend",
            "gen_tc": "",
            "sim_score": "0.5002"
        },
        {
            "id": "245",
            "prompt": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.",
            "draft_plan": "# Initialize two arrays of the same length as the input array, one to store the maximum increasing subsequence sum ending at each index, and the other to store the maximum decreasing subsequence sum starting at each index\n\n# Iterate through each index in the input array\n    # Find the maximum increasing subsequence sum ending at the current index by comparing it with all previous indices\n    # Find the maximum decreasing subsequence sum starting at the current index by comparing it with all next indices\n\n# Find the maximum bitonic subsequence sum by adding the maximum increasing subsequence sum and the maximum decreasing subsequence sum for each index, and subtracting the value of the current index from the sum\n\n# Return the maximum bitonic subsequence sum",
            "requirements": "",
            "final_plan": "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum",
            "code": "function findMaxBitonicSum(arr)\n    local n = #arr\n    local increasingSum = {}\n    local decreasingSum = {}\n    \n    -- Find maximum increasing subsequence sum ending at each index\n    for i = 1, n do\n        increasingSum[i] = arr[i]\n        for j = 1, i-1 do\n            if arr[i] > arr[j] and increasingSum[i] < increasingSum[j] + arr[i] then\n                increasingSum[i] = increasingSum[j] + arr[i]\n            end\n        end\n    end\n    \n    -- Find maximum decreasing subsequence sum starting at each index\n    for i = n, 1, -1 do\n        decreasingSum[i] = arr[i]\n        for j = n, i+1, -1 do\n            if arr[i] > arr[j] and decreasingSum[i] < decreasingSum[j] + arr[i] then\n                decreasingSum[i] = decreasingSum[j] + arr[i]\n            end\n        end\n    end\n    \n    local maxBitonicSum = -1\n    for i = 1, n do\n        local bitonicSum = increasingSum[i] + decreasingSum[i] - arr[i]\n        if bitonicSum > maxBitonicSum then\n            maxBitonicSum = bitonicSum\n        end\n    end\n    \n    return maxBitonicSum\nend",
            "gen_tc": "",
            "sim_score": "0.4997"
        },
        {
            "id": "306",
            "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .",
            "draft_plan": "# Initialize a list to store the maximum sum of increasing subsequences for each index\n# Initialize the maximum sum to be 0\n\n# Iterate through each index i in the given list\n    # Initialize a variable to store the maximum sum of increasing subsequence until index i, including the kth element\n    # Iterate through each index k starting from i+1 to the end of the list\n        # Check if the element at index k is greater than the element at index i\n            # Update the maximum sum of increasing subsequence until index i, including the kth element\n    # Update the maximum sum if the maximum sum of increasing subsequence until index i, including the kth element, is greater than the current maximum sum\n\n# Return the maximum sum",
            "requirements": "",
            "final_plan": "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]",
            "code": "function findMaxSum(nums)\n    local maxSums = {}\n    local maxSum = 0\n\n    for i = 1, #nums do\n        local currMaxSum = 0\n\n        for k = i+1, #nums do\n            if nums[k] > nums[i] then\n                currMaxSum = math.max(currMaxSum, maxSums[i] + nums[k])\n            end\n        end\n\n        maxSums[i] = currMaxSum\n        maxSum = math.max(maxSum, currMaxSum)\n    end\n\n    return maxSum\nend",
            "gen_tc": "",
            "sim_score": "0.4960"
        },
        {
            "id": "410",
            "prompt": "Write a function to find the minimum value in a given heterogeneous list.",
            "draft_plan": "# Initialize the minimum value to the first element in the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the minimum value\n        # If it is, update the minimum value\n\n# Return the minimum value",
            "requirements": "",
            "final_plan": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val",
            "code": "function find_minimum_value(lst)\n    local min_value = lst[1]\n    \n    for i = 2, #lst do\n        if lst[i] < min_value then\n            min_value = lst[i]\n        end\n    end\n    \n    return min_value\nend",
            "gen_tc": "",
            "sim_score": "0.4916"
        }
    ],
    "HumanEval/115": [
        {
            "id": "392",
            "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
            "draft_plan": "# Create a dictionary to store the maximum sum for each number\n# Set the base cases for f(0) and f(1) as 0 and 1 respectively\n\n# Define a recursive function to calculate the maximum sum for a given number\n    # Check if the maximum sum for the current number has already been calculated\n        # If yes, return the stored value\n        # If no, calculate the maximum sum using the given equation\n\n# Call the recursive function to calculate the maximum sum for the given number",
            "requirements": "",
            "final_plan": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]",
            "code": "function max_sum(n)\n    local memo = {}  -- dictionary to store the maximum sum for each number\n\n    -- base cases\n    memo[0] = 0\n    memo[1] = 1\n\n    -- recursive function to calculate maximum sum\n    local function calculate_sum(num)\n        if memo[num] ~= nil then  -- check if maximum sum is already calculated\n            return memo[num]\n        end\n\n        -- calculate maximum sum using the given equation\n        memo[num] = math.max(calculate_sum(math.floor(num/2)) + calculate_sum(math.floor(num/3)) + calculate_sum(math.floor(num/4)) + calculate_sum(math.floor(num/5)), num)\n        return memo[num]\n    end\n\n    return calculate_sum(n)  -- call the recursive function to calculate maximum sum for given number\nend",
            "gen_tc": "",
            "sim_score": "0.4767"
        },
        {
            "id": "145",
            "prompt": "Write a python function to find the maximum difference between any two elements in a given array.",
            "draft_plan": "# If the array is empty, return None\n# Initialize the maximum difference to zero\n\n# Iterate through each element in the array\n    # Iterate through each element after the current element\n        # Calculate the difference between the current element and the subsequent element\n        # Update the maximum difference if the calculated difference is greater than the current maximum difference\n\n# Return the maximum difference",
            "requirements": "",
            "final_plan": "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ",
            "code": "function max_difference(arr)\n    if #arr == 0 then\n        return nil\n    end\n\n    local max_diff = 0\n\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            local diff = math.abs(arr[i] - arr[j])\n            if diff > max_diff then\n                max_diff = diff\n            end\n        end\n    end\n\n    return max_diff\nend",
            "gen_tc": "",
            "sim_score": "0.4320"
        },
        {
            "id": "443",
            "prompt": "Write a python function to find the largest negative number from the given list.",
            "draft_plan": "# Initialize a variable 'largest_negative' to None\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If 'largest_negative' is None or the current number is greater than 'largest_negative', update 'largest_negative' to the current number\n\n# Return 'largest_negative'",
            "requirements": "",
            "final_plan": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
            "code": "function find_largest_negative(numbers)\n    local largest_negative = nil\n\n    for _, number in ipairs(numbers) do\n        if number < 0 then\n            if largest_negative == nil or number > largest_negative then\n                largest_negative = number\n            end\n        end\n    end\n\n    return largest_negative\nend",
            "gen_tc": "",
            "sim_score": "0.4258"
        },
        {
            "id": "309",
            "prompt": "Write a python function to find the maximum of two numbers.",
            "draft_plan": "# Define a function that takes two numbers as input\n\n# Check if the first number is greater than the second number\n    # If it is, return the first number as the maximum\n    # Otherwise, return the second number as the maximum",
            "requirements": "",
            "final_plan": "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b ",
            "code": "function find_maximum(num1, num2)\n    if num1 > num2 then\n        return num1\n    else\n        return num2\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4244"
        },
        {
            "id": "422",
            "prompt": "Write a python function to find the average of cubes of first n natural numbers.",
            "draft_plan": "# Define a function to find the average of cubes of first n natural numbers\ndef average_of_cubes(n):\n    # Initialize sum of cubes to 0\n    sum_of_cubes = 0\n    \n    # Iterate through the range of 1 to n+1\n    for i in range(1, n+1):\n        # Calculate the cube of the current number and add it to the sum_of_cubes\n        sum_of_cubes += i**3\n    \n    # Calculate the average by dividing the sum_of_cubes by n\n    average = sum_of_cubes / n\n    \n    # Return the average\n    return average",
            "requirements": "",
            "final_plan": "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) ",
            "code": "function average_of_cubes(n)\n    local sum_of_cubes = 0\n    \n    for i = 1, n do\n        sum_of_cubes = sum_of_cubes + i^3\n    end\n    \n    local average = sum_of_cubes / n\n    \n    return average\nend",
            "gen_tc": "",
            "sim_score": "0.4179"
        },
        {
            "id": "259",
            "prompt": "Write a function to maximize the given two tuples.",
            "draft_plan": "# Initialize a new tuple to store the maximum values\n\n# Iterate through each element in the tuples\n    # Compare the corresponding elements of both tuples\n    # Add the maximum value to the new tuple\n\n# Return the new tuple containing the maximum values",
            "requirements": "",
            "final_plan": "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
            "code": "function maximize_tuples(tuple1, tuple2)\n    local max_tuple = {}\n\n    for i = 1, #tuple1 do\n        max_tuple[i] = math.max(tuple1[i], tuple2[i])\n    end\n\n    return max_tuple\nend",
            "gen_tc": "",
            "sim_score": "0.4096"
        },
        {
            "id": "463",
            "prompt": "Write a function to find the maximum product subarray of the given array.",
            "draft_plan": "# Initialize variables to store the maximum product, current maximum product, current minimum product, and the result\n# Set the maximum product and current maximum product to the first element of the array\n# Iterate through each element in the array starting from the second element\n    # Update the current maximum product and current minimum product by considering the current element\n    # Check if the current element is negative\n        # If it is negative, swap the current maximum product and current minimum product\n    # Check if the current maximum product is greater than the maximum product\n        # If it is, update the maximum product\n    # Check if the current element is greater than the current maximum product\n        # If it is, update the current maximum product\n    # Check if the current element is less than the current minimum product\n        # If it is, update the current minimum product\n    # Check if the maximum product is greater than the result\n        # If it is, update the result\n\n# Return the result",
            "requirements": "",
            "final_plan": "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far",
            "code": "function maxProductSubarray(nums)\n    local maxProduct = nums[1]\n    local currMaxProduct = nums[1]\n    local currMinProduct = nums[1]\n    local result = nums[1]\n    \n    for i = 2, #nums do\n        local num = nums[i]\n        local tempMaxProduct = math.max(num, math.max(currMaxProduct * num, currMinProduct * num))\n        currMinProduct = math.min(num, math.min(currMaxProduct * num, currMinProduct * num))\n        currMaxProduct = tempMaxProduct\n        maxProduct = math.max(maxProduct, currMaxProduct)\n        result = math.max(result, maxProduct)\n    end\n    \n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4072"
        },
        {
            "id": "299",
            "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.",
            "draft_plan": "# Sort the list of tuples in descending order based on the second element\n\n# Initialize the maximum aggregate to 0\n\n# Iterate through each tuple in the sorted list\n    # Calculate the current aggregate by adding the second element of the tuple to the maximum aggregate\n    # Update the maximum aggregate if the current aggregate is greater\n\n# Return the maximum aggregate",
            "requirements": "",
            "final_plan": "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])",
            "code": "function calculate_maximum_aggregate(tuples)\n    table.sort(tuples, function(a, b)\n        return a[2] > b[2]\n    end)\n\n    local maximum_aggregate = 0\n\n    for _, tuple in ipairs(tuples) do\n        local current_aggregate = maximum_aggregate + tuple[2]\n        if current_aggregate > maximum_aggregate then\n            maximum_aggregate = current_aggregate\n        end\n    end\n\n    return maximum_aggregate\nend",
            "gen_tc": "",
            "sim_score": "0.4025"
        },
        {
            "id": "415",
            "prompt": "Write a python function to find a pair with highest product from a given array of integers.",
            "draft_plan": "# Initialize the maximum product to -infinity\n\n# Iterate through each pair of numbers in the array\n    # Calculate the product of the current pair\n    # Update the maximum product if the current product is greater\n\n# Return the pair with the highest product",
            "requirements": "",
            "final_plan": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ",
            "code": "function find_highest_product(arr)\n    local max_product = -math.huge\n    local pair = {}\n\n    for i = 1, #arr-1 do\n        for j = i+1, #arr do\n            local product = arr[i] * arr[j]\n            if product > max_product then\n                max_product = product\n                pair = {arr[i], arr[j]}\n            end\n        end\n    end\n\n    return pair\nend",
            "gen_tc": "",
            "sim_score": "0.3993"
        },
        {
            "id": "67",
            "prompt": "Write a function to find the number of ways to partition a set of Bell numbers.",
            "draft_plan": "# Import the math module to use the factorial function\nimport math\n\n# Define a function to calculate the Bell numbers\ndef calculate_bell_number(n):\n    # Create a 2D array to store the Bell numbers\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n\n    # Initialize the first Bell number as 1\n    bell[0][0] = 1\n\n    # Calculate the Bell numbers using dynamic programming\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    # Return the last Bell number\n    return bell[n][0]\n\n# Define a function to calculate the number of ways to partition a set of Bell numbers\ndef calculate_partition_ways(n):\n    # Calculate the Bell number for n\n    bell_number = calculate_bell_number(n)\n\n    # Calculate the number of ways to partition the set\n    partition_ways = math.factorial(n) * bell_number\n\n    # Return the number of ways to partition the set\n    return partition_ways",
            "requirements": "",
            "final_plan": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] ",
            "code": "-- Define a helper function to calculate the Bell numbers\nfunction calculate_bell_number(n)\n    -- Create a 2D array to store the Bell numbers\n    local bell = {}\n    for i = 0, n do\n        bell[i] = {}\n        for j = 0, n do\n            bell[i][j] = 0\n        end\n    end\n\n    -- Initialize the first Bell number as 1\n    bell[0][0] = 1\n\n    -- Calculate the Bell numbers using dynamic programming\n    for i = 1, n do\n        bell[i][0] = bell[i-1][i-1]\n        for j = 1, i do\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        end\n    end\n\n    -- Return the last Bell number\n    return bell[n][0]\nend\n\n-- Define a function to calculate the number of ways to partition a set of Bell numbers\nfunction calculate_partition_ways(n)\n    -- Calculate the Bell number for n\n    local bell_number = calculate_bell_number(n)\n\n    -- Calculate the number of ways to partition the set\n    local partition_ways = math.factorial(n) * bell_number\n\n    -- Return the number of ways to partition the set\n    return partition_ways\nend",
            "gen_tc": "",
            "sim_score": "0.3947"
        }
    ],
    "HumanEval/116": [
        {
            "id": "141",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Implement a sorting algorithm such as bubble sort, insertion sort, merge sort, quick sort, etc.\n\n# Define a function to take a list of elements as input\n    # Iterate through the list to compare each element with its adjacent element(s)\n        # Swap elements if they are in the wrong order\n    # Repeat the above steps until the list is sorted\n\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums",
            "code": "-- Bubble Sort implementation\nfunction sort_list(list)\n    local n = #list\n    for i = 1, n-1 do\n        for j = 1, n-i do\n            if list[j] > list[j+1] then\n                list[j], list[j+1] = list[j+1], list[j]\n            end\n        end\n    end\n    return list\nend",
            "gen_tc": "",
            "sim_score": "0.5477"
        },
        {
            "id": "71",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Use the built-in sorted() function to sort the list in ascending order\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums",
            "code": "function sort_list(elements)\n    return sorted(elements)\nend",
            "gen_tc": "",
            "sim_score": "0.5464"
        },
        {
            "id": "229",
            "prompt": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
            "draft_plan": "# Create two empty lists, one for negative elements and one for positive elements\n\n# Iterate through the first n elements of the array\n    # Check if the element is negative\n        # If it is, append it to the negative elements list\n    # Otherwise, append it to the positive elements list\n\n# Concatenate the negative elements list with the positive elements list\n# Return the resulting list",
            "requirements": "",
            "final_plan": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr",
            "code": "function rearrangeArray(arr, n)\n    local negativeElements = {}\n    local positiveElements = {}\n\n    for i = 1, n do\n        if arr[i] < 0 then\n            table.insert(negativeElements, arr[i])\n        else\n            table.insert(positiveElements, arr[i])\n        end\n    end\n\n    for i = 1, #positiveElements do\n        table.insert(negativeElements, positiveElements[i])\n    end\n\n    return negativeElements\nend",
            "gen_tc": "",
            "sim_score": "0.5385"
        },
        {
            "id": "428",
            "prompt": "Write a function to sort the given array by using shell sort.",
            "draft_plan": "# Define a function to perform shell sort on the given array\n    # Start with a large gap (length of array divided by 2)\n    # Iterate until the gap becomes 0\n        # Iterate through the array from the current gap to the end\n            # Compare the current element with the element at the position gap steps before it\n            # If the current element is smaller, swap them\n        # Reduce the gap by dividing it by 2\n\n# Call the shell sort function on the given array\n# Return the sorted array",
            "requirements": "",
            "final_plan": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list",
            "code": "function shellSort(arr)\n    local n = #arr\n    local gap = math.floor(n / 2)\n    \n    while gap > 0 do\n        for i = gap + 1, n do\n            local temp = arr[i]\n            local j = i\n            \n            while j > gap and arr[j - gap] > temp do\n                arr[j] = arr[j - gap]\n                j = j - gap\n            end\n            \n            arr[j] = temp\n        end\n        \n        gap = math.floor(gap / 2)\n    end\n    \n    return arr\nend\n\n-- Test the function\nlocal arr = {9, 5, 2, 7, 1, 3}\nlocal sortedArr = shellSort(arr)\nfor i = 1, #sortedArr do\n    print(sortedArr[i])\nend",
            "gen_tc": "",
            "sim_score": "0.5358"
        },
        {
            "id": "476",
            "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.",
            "draft_plan": "# Sort the array in ascending order\n# Initialize variables for the smallest and largest values\n\n# Get the smallest value from the sorted array (first element)\n# Get the largest value from the sorted array (last element)\n\n# Calculate the sum of the smallest and largest values\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum",
            "code": "function sum_smallest_largest(arr)\n    table.sort(arr) -- Sort the array in ascending order\n    \n    local smallest = arr[1] -- Get the smallest value\n    local largest = arr[#arr] -- Get the largest value\n    \n    local sum = smallest + largest -- Calculate the sum\n    \n    return sum -- Return the sum\nend",
            "gen_tc": "",
            "sim_score": "0.5117"
        },
        {
            "id": "137",
            "prompt": "Write a function to find the ratio of zeroes to non-zeroes in an array of integers.",
            "draft_plan": "# Initialize zero_count to 0\n# Initialize non_zero_count to 0\n\n# Iterate through each element in the array\n    # Check if the current element is zero\n        # If it is zero, increment zero_count\n        # If it is not zero, increment non_zero_count\n\n# Calculate the ratio of zeroes to non-zeroes\n# Return the ratio",
            "requirements": "",
            "final_plan": "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)",
            "code": "function ratio_of_zeroes_to_non_zeroes(arr)\n    local zero_count = 0\n    local non_zero_count = 0\n\n    for _, num in ipairs(arr) do\n        if num == 0 then\n            zero_count = zero_count + 1\n        else\n            non_zero_count = non_zero_count + 1\n        end\n    end\n\n    local ratio = zero_count / non_zero_count\n    return ratio\nend",
            "gen_tc": "",
            "sim_score": "0.5031"
        },
        {
            "id": "296",
            "prompt": "Write a python function to count inversions in an array.",
            "draft_plan": "# Initialize a variable to count the number of inversions\n# Iterate through each element in the array\n    # For each element, iterate through the remaining elements\n        # Check if the current element is greater than any of the remaining elements\n            # If so, increment the inversion count\n\n# Return the inversion count",
            "requirements": "",
            "final_plan": "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count ",
            "code": "function count_inversions(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i+1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend",
            "gen_tc": "",
            "sim_score": "0.5028"
        },
        {
            "id": "433",
            "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.",
            "draft_plan": "# Define a function that takes a number and an array as input\n    # Iterate through each element in the array\n        # Check if the number is greater than the current element\n            # If it is, return True\n    # If the number is not greater than any element in the array, return False",
            "requirements": "",
            "final_plan": "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]",
            "code": "function checkGreater(number, array)\n    for i, element in ipairs(array) do\n        if number > element then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4990"
        },
        {
            "id": "12",
            "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
            "draft_plan": "# Calculate the sum of each row in the matrix\n\n# Create a list of tuples, where each tuple contains the index of the row and its corresponding sum\n\n# Sort the list of tuples based on the sum in ascending order\n\n# Create an empty sorted matrix\n\n# Iterate through the sorted list of tuples\n    # Append the corresponding row from the original matrix to the sorted matrix\n\n# Return the sorted matrix",
            "requirements": "",
            "final_plan": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result",
            "code": "function sort_matrix(matrix)\n    local sum_rows = {}\n    \n    -- Calculate the sum of each row in the matrix\n    for i, row in ipairs(matrix) do\n        local row_sum = 0\n        for _, value in ipairs(row) do\n            row_sum = row_sum + value\n        end\n        table.insert(sum_rows, {i, row_sum}) -- Create a tuple with the row index and its sum\n    end\n\n    -- Sort the list of tuples based on the sum in ascending order\n    table.sort(sum_rows, function(a, b) return a[2] < b[2] end)\n\n    local sorted_matrix = {}\n\n    -- Iterate through the sorted list of tuples\n    for _, tuple in ipairs(sum_rows) do\n        -- Append the corresponding row from the original matrix to the sorted matrix\n        table.insert(sorted_matrix, matrix[tuple[1]])\n    end\n\n    return sorted_matrix\nend",
            "gen_tc": "",
            "sim_score": "0.4973"
        },
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.4955"
        }
    ],
    "HumanEval/117": [
        {
            "id": "128",
            "prompt": "Write a function to find words that are longer than n characters from a given list of words.",
            "draft_plan": "# Create an empty list to store the result\n\n# Iterate through each word in the given list\n    # Check if the length of the current word is greater than n\n        # If the condition is satisfied, append the word to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t",
            "code": "function find_longer_words(word_list, n)\n    local result = {}\n\n    for _, word in ipairs(word_list) do\n        if string.len(word) > n then\n            table.insert(result, word)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.6403"
        },
        {
            "id": "305",
            "prompt": "Write a function to return two words from a list of words starting with letter 'p'.",
            "draft_plan": "# Initialize an empty list to store the words starting with 'p'\n\n# Iterate through each word in the list\n    # Check if the first letter of the word is 'p'\n        # If yes, append the word to the list\n\n# Check if the list has at least two words\n    # If yes, return the first two words from the list\n    # If no, return None or an appropriate message",
            "requirements": "",
            "final_plan": "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()",
            "code": "function words_starting_with_p(word_list)\n    local p_words = {}\n\n    for _, word in ipairs(word_list) do\n        if string.sub(word, 1, 1) == \"p\" then\n            table.insert(p_words, word)\n        end\n    end\n\n    if #p_words >= 2 then\n        return p_words[1], p_words[2]\n    else\n        return nil\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.6257"
        },
        {
            "id": "454",
            "prompt": "Write a function that matches a word containing 'z'.",
            "draft_plan": "# Iterate through each word in the given list\n    # Check if the character 'z' is present in the word\n        # If 'z' is found, add the word to a new list\n\n# Return the new list containing words with 'z'",
            "requirements": "",
            "final_plan": "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function match_word_with_z(word_list)\n    local z_words = {}\n\n    for _, word in ipairs(word_list) do\n        if string.find(word, 'z') ~= nil then\n            table.insert(z_words, word)\n        end\n    end\n\n    return z_words\nend",
            "gen_tc": "",
            "sim_score": "0.5735"
        },
        {
            "id": "131",
            "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
            "draft_plan": "# Create a list of vowels (including both lowercase and uppercase)\n# Convert the input string into a list of characters\n\n# Initialize two pointers: one at the start of the string and one at the end\n# Iterate while the pointers don't overlap\n    # Check if the character at the start pointer is a vowel\n        # If it is, then check if the character at the end pointer is also a vowel\n            # If it is, swap the characters at the start and end pointers\n            # Move the start pointer to the next character\n            # Move the end pointer to the previous character\n        # If the character at the end pointer is not a vowel, move the end pointer to the previous character\n    \n# Convert the modified list of characters back into a string and return it",
            "requirements": "",
            "final_plan": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string",
            "code": "function reverse_vowels(str)\n    local vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }\n    local chars = {}\n    for i = 1, string.len(str) do\n        table.insert(chars, string.sub(str, i, i))\n    end\n    \n    local start = 1\n    local finish = string.len(str)\n    \n    while start < finish do\n        if is_vowel(chars[start], vowels) then\n            while not is_vowel(chars[finish], vowels) and finish > start do\n                finish = finish - 1\n            end\n            if finish > start then\n                chars[start], chars[finish] = chars[finish], chars[start]\n                start = start + 1\n                finish = finish - 1\n            end\n        else\n            start = start + 1\n        end\n    end\n    \n    return table.concat(chars)\nend\n\nfunction is_vowel(char, vowels)\n    for _, vowel in ipairs(vowels) do\n        if char == vowel then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5540"
        },
        {
            "id": "165",
            "prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
            "draft_plan": "# Initialize a variable to keep track of the count of characters at the same position in the English alphabet\n# Iterate through each character in the input string\n    # Convert the character to lowercase\n    # Check if the character is an alphabet character\n        # Get the position of the character in the English alphabet by subtracting the ASCII value of 'a' or 'A'\n        # Check if the position is equal to the index of the character in the string\n            # If the condition is true, increment the count\n\n# Return the count of characters at the same position in the English alphabet",
            "requirements": "",
            "final_plan": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ",
            "code": "function countSamePositionChars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local c = string.lower(string.sub(str, i, i))\n        if c >= \"a\" and c <= \"z\" then\n            local position = string.byte(c) - string.byte(\"a\") + 1\n            if position == i then\n                count = count + 1\n            end\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5070"
        },
        {
            "id": "90",
            "prompt": "Write a python function to find the length of the longest word.",
            "draft_plan": "# Split the input sentence into words using the split() function\n# Initialize a variable maxLength to 0\n\n# Iterate through each word in the list of words\n    # Check if the length of the current word is greater than maxLength\n        # If it is, update maxLength with the length of the current word\n\n# Return maxLength",
            "requirements": "",
            "final_plan": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max",
            "code": "function find_longest_word(sentence)\n    local words = split_sentence(sentence)\n    local max_length = 0\n\n    for _, word in ipairs(words) do\n        local length = string.len(word)\n        if length > max_length then\n            max_length = length\n        end\n    end\n\n    return max_length\nend\n\nfunction split_sentence(sentence)\n    local words = {}\n    for word in string.gmatch(sentence, \"%S+\") do\n        table.insert(words, word)\n    end\n    return words\nend",
            "gen_tc": "",
            "sim_score": "0.5031"
        },
        {
            "id": "450",
            "prompt": "Write a function to extract specified size of strings from a given list of string values.",
            "draft_plan": "# Initialize an empty list to store the extracted strings\n\n# Iterate through each string in the given list\n    # Check if the length of the current string is equal to the specified size\n        # If it matches, append the string to the result list\n\n# Return the list of extracted strings",
            "requirements": "",
            "final_plan": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result",
            "code": "function extract_strings(strings, size)\n    local extracted_strings = {}\n\n    for _, str in ipairs(strings) do\n        if string.len(str) == size then\n            table.insert(extracted_strings, str)\n        end\n    end\n\n    return extracted_strings\nend",
            "gen_tc": "",
            "sim_score": "0.4946"
        },
        {
            "id": "285",
            "prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
            "draft_plan": "# Iterate through each character in the input string\n    # Check if the current character is 'a'\n        # If it is, check the next two characters (if they exist) to see if they are 'b'\n            # If they are, return True\n    # If the current character is not 'a', continue to the next character\n\n# If no 'a' followed by two or three 'b' characters is found, return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function contains_a_followed_by_b(string)\n    local len = string.len(string)\n    for i = 1, len - 3 do\n        if string.sub(string, i, i) == 'a' then\n            if string.sub(string, i+1, i+3) == 'bb' or string.sub(string, i+1, i+3) == 'bbb' then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4786"
        },
        {
            "id": "238",
            "prompt": "Write a python function to count the number of non-empty substrings of a given string.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each character and its index in the input string\n    # Iterate through each substring starting from the current character\n        # Increment the counter variable by 1 for each non-empty substring\n\n# Return the counter variable",
            "requirements": "",
            "final_plan": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ",
            "code": "function count_substrings(str)\n    local count = 0\n    for i = 1, #str do\n        for j = i, #str do\n            local substring = string.sub(str, i, j)\n            if substring ~= \"\" then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4785"
        },
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.4748"
        }
    ],
    "HumanEval/118": [
        {
            "id": "131",
            "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
            "draft_plan": "# Create a list of vowels (including both lowercase and uppercase)\n# Convert the input string into a list of characters\n\n# Initialize two pointers: one at the start of the string and one at the end\n# Iterate while the pointers don't overlap\n    # Check if the character at the start pointer is a vowel\n        # If it is, then check if the character at the end pointer is also a vowel\n            # If it is, swap the characters at the start and end pointers\n            # Move the start pointer to the next character\n            # Move the end pointer to the previous character\n        # If the character at the end pointer is not a vowel, move the end pointer to the previous character\n    \n# Convert the modified list of characters back into a string and return it",
            "requirements": "",
            "final_plan": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string",
            "code": "function reverse_vowels(str)\n    local vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }\n    local chars = {}\n    for i = 1, string.len(str) do\n        table.insert(chars, string.sub(str, i, i))\n    end\n    \n    local start = 1\n    local finish = string.len(str)\n    \n    while start < finish do\n        if is_vowel(chars[start], vowels) then\n            while not is_vowel(chars[finish], vowels) and finish > start do\n                finish = finish - 1\n            end\n            if finish > start then\n                chars[start], chars[finish] = chars[finish], chars[start]\n                start = start + 1\n                finish = finish - 1\n            end\n        else\n            start = start + 1\n        end\n    end\n    \n    return table.concat(chars)\nend\n\nfunction is_vowel(char, vowels)\n    for _, vowel in ipairs(vowels) do\n        if char == vowel then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.6811"
        },
        {
            "id": "454",
            "prompt": "Write a function that matches a word containing 'z'.",
            "draft_plan": "# Iterate through each word in the given list\n    # Check if the character 'z' is present in the word\n        # If 'z' is found, add the word to a new list\n\n# Return the new list containing words with 'z'",
            "requirements": "",
            "final_plan": "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function match_word_with_z(word_list)\n    local z_words = {}\n\n    for _, word in ipairs(word_list) do\n        if string.find(word, 'z') ~= nil then\n            table.insert(z_words, word)\n        end\n    end\n\n    return z_words\nend",
            "gen_tc": "",
            "sim_score": "0.4869"
        },
        {
            "id": "11",
            "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
            "draft_plan": "# Find the index of the first occurrence of the given character in the string\n# Find the index of the last occurrence of the given character in the string\n\n# If both indices are valid\n    # Remove the first occurrence of the character from the string\n    # Decrement the index of the last occurrence by 1 to account for the removal\n    # Remove the last occurrence of the character from the string\n\n# Return the modified string",
            "requirements": "",
            "final_plan": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ",
            "code": "function removeFirstAndLastOccurrence(str, char)\n    local firstIndex = string.find(str, char)\n    local lastIndex = string.find(str:reverse(), char)\n\n    if firstIndex and lastIndex then\n        str = string.sub(str, 1, firstIndex - 1) .. string.sub(str, firstIndex + 1)\n        lastIndex = string.len(str) - lastIndex + 1\n        str = string.sub(str, 1, lastIndex - 1) .. string.sub(str, lastIndex + 1)\n    end\n\n    return str\nend",
            "gen_tc": "",
            "sim_score": "0.4788"
        },
        {
            "id": "305",
            "prompt": "Write a function to return two words from a list of words starting with letter 'p'.",
            "draft_plan": "# Initialize an empty list to store the words starting with 'p'\n\n# Iterate through each word in the list\n    # Check if the first letter of the word is 'p'\n        # If yes, append the word to the list\n\n# Check if the list has at least two words\n    # If yes, return the first two words from the list\n    # If no, return None or an appropriate message",
            "requirements": "",
            "final_plan": "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()",
            "code": "function words_starting_with_p(word_list)\n    local p_words = {}\n\n    for _, word in ipairs(word_list) do\n        if string.sub(word, 1, 1) == \"p\" then\n            table.insert(p_words, word)\n        end\n    end\n\n    if #p_words >= 2 then\n        return p_words[1], p_words[2]\n    else\n        return nil\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4670"
        },
        {
            "id": "90",
            "prompt": "Write a python function to find the length of the longest word.",
            "draft_plan": "# Split the input sentence into words using the split() function\n# Initialize a variable maxLength to 0\n\n# Iterate through each word in the list of words\n    # Check if the length of the current word is greater than maxLength\n        # If it is, update maxLength with the length of the current word\n\n# Return maxLength",
            "requirements": "",
            "final_plan": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max",
            "code": "function find_longest_word(sentence)\n    local words = split_sentence(sentence)\n    local max_length = 0\n\n    for _, word in ipairs(words) do\n        local length = string.len(word)\n        if length > max_length then\n            max_length = length\n        end\n    end\n\n    return max_length\nend\n\nfunction split_sentence(sentence)\n    local words = {}\n    for word in string.gmatch(sentence, \"%S+\") do\n        table.insert(words, word)\n    end\n    return words\nend",
            "gen_tc": "",
            "sim_score": "0.4525"
        },
        {
            "id": "285",
            "prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
            "draft_plan": "# Iterate through each character in the input string\n    # Check if the current character is 'a'\n        # If it is, check the next two characters (if they exist) to see if they are 'b'\n            # If they are, return True\n    # If the current character is not 'a', continue to the next character\n\n# If no 'a' followed by two or three 'b' characters is found, return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function contains_a_followed_by_b(string)\n    local len = string.len(string)\n    for i = 1, len - 3 do\n        if string.sub(string, i, i) == 'a' then\n            if string.sub(string, i+1, i+3) == 'bb' or string.sub(string, i+1, i+3) == 'bbb' then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4520"
        },
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.4440"
        },
        {
            "id": "128",
            "prompt": "Write a function to find words that are longer than n characters from a given list of words.",
            "draft_plan": "# Create an empty list to store the result\n\n# Iterate through each word in the given list\n    # Check if the length of the current word is greater than n\n        # If the condition is satisfied, append the word to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t",
            "code": "function find_longer_words(word_list, n)\n    local result = {}\n\n    for _, word in ipairs(word_list) do\n        if string.len(word) > n then\n            table.insert(result, word)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4425"
        },
        {
            "id": "434",
            "prompt": "Write a function that matches a string that has an a followed by one or more b's.",
            "draft_plan": "import re\n\ndef match_string(string):\n    pattern = r'a+b+'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n",
            "code": "function match_string(str)\n    local pattern = \"a+b+\"\n    if string.match(str, pattern) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4396"
        },
        {
            "id": "230",
            "prompt": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
            "draft_plan": "# Define a function that takes in a string and a character as arguments\n    # Convert the string into a list of characters\n    # Iterate through each character in the list\n        # Check if the character is a blank space\n            # If it is, replace it with the given character\n    # Join the list of characters back into a string\n    # Return the modified string\n\n# Example usage:\n# string = \"Hello World\"\n# character = \"-\"\n# modified_string = replace_spaces(string, character)\n# print(modified_string) --> \"Hello-World\"",
            "requirements": "",
            "final_plan": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2",
            "code": "function replace_spaces(str, char)\n    local chars = {}\n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        if c == \" \" then\n            c = char\n        end\n        table.insert(chars, c)\n    end\n    return table.concat(chars)\nend\n\nlocal string = \"Hello World\"\nlocal character = \"-\"\nlocal modified_string = replace_spaces(string, character)\nprint(modified_string) --> \"Hello-World\"",
            "gen_tc": "",
            "sim_score": "0.4176"
        }
    ],
    "HumanEval/119": [
        {
            "id": "421",
            "prompt": "Write a function to concatenate each element of tuple by the delimiter.",
            "draft_plan": "# Initialize an empty string to store the concatenated elements\n\n# Iterate through each tuple in the input list\n    # Iterate through each element in the tuple\n        # Concatenate the element to the output string\n        # If the current element is not the last element in the tuple, append the delimiter\n\n# Return the concatenated string",
            "requirements": "",
            "final_plan": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ",
            "code": "function concatenate_tuple_elements(tuple_list, delimiter)\n    local concatenated_string = \"\"\n\n    for _, tuple in ipairs(tuple_list) do\n        for i, element in ipairs(tuple) do\n            concatenated_string = concatenated_string .. element\n            if i ~= #tuple then\n                concatenated_string = concatenated_string .. delimiter\n            end\n        end\n    end\n\n    return concatenated_string\nend",
            "gen_tc": "",
            "sim_score": "0.4780"
        },
        {
            "id": "91",
            "prompt": "Write a function to check if a string is present as a substring in a given list of string values.",
            "draft_plan": "# Iterate through each string in the list\n    # Check if the given substring is present in the current string\n        # If found, return True\n\n# If the substring is not found in any string, return False",
            "requirements": "",
            "final_plan": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False",
            "code": "function isSubstringPresent(substring, stringList)\n    for _, str in ipairs(stringList) do\n        if string.find(str, substring) then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4517"
        },
        {
            "id": "434",
            "prompt": "Write a function that matches a string that has an a followed by one or more b's.",
            "draft_plan": "import re\n\ndef match_string(string):\n    pattern = r'a+b+'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n",
            "code": "function match_string(str)\n    local pattern = \"a+b+\"\n    if string.match(str, pattern) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4497"
        },
        {
            "id": "285",
            "prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
            "draft_plan": "# Iterate through each character in the input string\n    # Check if the current character is 'a'\n        # If it is, check the next two characters (if they exist) to see if they are 'b'\n            # If they are, return True\n    # If the current character is not 'a', continue to the next character\n\n# If no 'a' followed by two or three 'b' characters is found, return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function contains_a_followed_by_b(string)\n    local len = string.len(string)\n    for i = 1, len - 3 do\n        if string.sub(string, i, i) == 'a' then\n            if string.sub(string, i+1, i+3) == 'bb' or string.sub(string, i+1, i+3) == 'bbb' then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4326"
        },
        {
            "id": "396",
            "prompt": "Write a function to check whether the given string starts and ends with the same character or not.",
            "draft_plan": "# Check if the first character of the string is equal to the last character\n    # If they are equal, return True\n    # If they are not equal, return False",
            "requirements": "",
            "final_plan": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ",
            "code": "function starts_ends_same(str)\n    local first_char = string.sub(str, 1, 1)\n    local last_char = string.sub(str, -1)\n    \n    if first_char == last_char then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4221"
        },
        {
            "id": "450",
            "prompt": "Write a function to extract specified size of strings from a given list of string values.",
            "draft_plan": "# Initialize an empty list to store the extracted strings\n\n# Iterate through each string in the given list\n    # Check if the length of the current string is equal to the specified size\n        # If it matches, append the string to the result list\n\n# Return the list of extracted strings",
            "requirements": "",
            "final_plan": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result",
            "code": "function extract_strings(strings, size)\n    local extracted_strings = {}\n\n    for _, str in ipairs(strings) do\n        if string.len(str) == size then\n            table.insert(extracted_strings, str)\n        end\n    end\n\n    return extracted_strings\nend",
            "gen_tc": "",
            "sim_score": "0.4146"
        },
        {
            "id": "406",
            "prompt": "Write a python function to find whether the parity of a given number is odd.",
            "draft_plan": "# Check if the number modulo 2 is equal to 1\n    # If the modulo is 1, the number is odd\n    # Return True\n\n# If the modulo is not 1, the number is even\n# Return False",
            "requirements": "",
            "final_plan": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False",
            "code": "function is_odd_parity(number)\n    return number % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.4141"
        },
        {
            "id": "305",
            "prompt": "Write a function to return two words from a list of words starting with letter 'p'.",
            "draft_plan": "# Initialize an empty list to store the words starting with 'p'\n\n# Iterate through each word in the list\n    # Check if the first letter of the word is 'p'\n        # If yes, append the word to the list\n\n# Check if the list has at least two words\n    # If yes, return the first two words from the list\n    # If no, return None or an appropriate message",
            "requirements": "",
            "final_plan": "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()",
            "code": "function words_starting_with_p(word_list)\n    local p_words = {}\n\n    for _, word in ipairs(word_list) do\n        if string.sub(word, 1, 1) == \"p\" then\n            table.insert(p_words, word)\n        end\n    end\n\n    if #p_words >= 2 then\n        return p_words[1], p_words[2]\n    else\n        return nil\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4137"
        },
        {
            "id": "118",
            "prompt": "Write a function to convert a string to a list of strings split on the space character.",
            "draft_plan": "# Initialize an empty list to store the split strings\n\n# Split the input string on the space character and store the result in a variable\n\n# Iterate through each element in the split result\n    # Append the element to the list\n\n# Return the list of split strings",
            "requirements": "",
            "final_plan": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst",
            "code": "function split_string(str)\n    local split_result = {}\n    for word in string.gmatch(str, \"%S+\") do\n        table.insert(split_result, word)\n    end\n    return split_result\nend",
            "gen_tc": "",
            "sim_score": "0.4023"
        },
        {
            "id": "16",
            "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
            "draft_plan": "# Split the input string by the underscore character to get a list of substrings\n# Iterate through each substring in the list\n    # Check if the substring consists of lowercase letters only\n        # If not, return False\n\n# If all substrings are valid, return True",
            "requirements": "",
            "final_plan": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function contains_lowercase_sequences(str)\n    local substrings = split(str, \"_\")\n\n    for _, substr in ipairs(substrings) do\n        if not is_lowercase(substr) then\n            return false\n        end\n    end\n\n    return true\nend\n\nfunction split(str, delimiter)\n    local result = {}\n    local from = 1\n    local delim_from, delim_to = string.find(str, delimiter, from)\n\n    while delim_from do\n        table.insert(result, string.sub(str, from, delim_from - 1))\n        from = delim_to + 1\n        delim_from, delim_to = string.find(str, delimiter, from)\n    end\n\n    table.insert(result, string.sub(str, from))\n\n    return result\nend\n\nfunction is_lowercase(str)\n    return str:match(\"^[a-z]*$\") ~= nil\nend",
            "gen_tc": "",
            "sim_score": "0.4014"
        }
    ],
    "HumanEval/120": [
        {
            "id": "286",
            "prompt": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.",
            "draft_plan": "# Initialize variables to store the maximum sum and the current sum\n# Repeat the given array k times to form the modified array\n\n# Iterate through each element in the modified array\n    # Add the current element to the current sum\n    # Check if the current sum is greater than the maximum sum\n        # If so, update the maximum sum\n    # Check if the current sum is less than 0\n        # If so, reset the current sum to 0\n\n# Return the maximum sum",
            "requirements": "",
            "final_plan": "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far",
            "code": "function findLargestContiguousSum(arr, k)\n    local modifiedArr = {}\n    for i = 1, k do\n        for j = 1, #arr do\n            table.insert(modifiedArr, arr[j])\n        end\n    end\n    \n    local maxSum = modifiedArr[1]\n    local currentSum = modifiedArr[1]\n    \n    for i = 2, #modifiedArr do\n        currentSum = math.max(modifiedArr[i], currentSum + modifiedArr[i])\n        maxSum = math.max(maxSum, currentSum)\n        \n        if currentSum < 0 then\n            currentSum = 0\n        end\n    end\n    \n    return maxSum\nend",
            "gen_tc": "",
            "sim_score": "0.6755"
        },
        {
            "id": "232",
            "prompt": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.",
            "draft_plan": "# Sort the list in descending order\n# Return the first n items from the sorted list",
            "requirements": "",
            "final_plan": "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest",
            "code": "function get_n_largest_items(lst, n)\n    table.sort(lst, function(a, b) return a > b end)\n    return {table.unpack(lst, 1, n)}\nend",
            "gen_tc": "",
            "sim_score": "0.6641"
        },
        {
            "id": "418",
            "prompt": "Write a python function to find the element of a list having maximum length.",
            "draft_plan": "# Initialize a variable to store the index of the element with maximum length\n# Initialize a variable to store the maximum length, initially set to 0\n\n# Iterate through each element in the list\n    # Check if the length of the current element is greater than the maximum length\n        # If so, update the maximum length and the index of the element\n\n# Return the element at the index with maximum length",
            "requirements": "",
            "final_plan": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList",
            "code": "function findMaxElementLength(lst)\n    local maxIndex = 1\n    local maxLength = 0\n\n    for i, element in ipairs(lst) do\n        local length = string.len(element)\n        if length > maxLength then\n            maxLength = length\n            maxIndex = i\n        end\n    end\n\n    return lst[maxIndex]\nend",
            "gen_tc": "",
            "sim_score": "0.6486"
        },
        {
            "id": "443",
            "prompt": "Write a python function to find the largest negative number from the given list.",
            "draft_plan": "# Initialize a variable 'largest_negative' to None\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If 'largest_negative' is None or the current number is greater than 'largest_negative', update 'largest_negative' to the current number\n\n# Return 'largest_negative'",
            "requirements": "",
            "final_plan": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
            "code": "function find_largest_negative(numbers)\n    local largest_negative = nil\n\n    for _, number in ipairs(numbers) do\n        if number < 0 then\n            if largest_negative == nil or number > largest_negative then\n                largest_negative = number\n            end\n        end\n    end\n\n    return largest_negative\nend",
            "gen_tc": "",
            "sim_score": "0.6480"
        },
        {
            "id": "294",
            "prompt": "Write a function to find the maximum value in a given heterogeneous list.",
            "draft_plan": "# Initialize the maximum value with the first element in the list\n\n# Iterate through each element in the list starting from the second element\n    # Compare the current element with the maximum value\n        # If the current element is greater than the maximum value, update the maximum value\n\n# Return the maximum value",
            "requirements": "",
            "final_plan": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)",
            "code": "function find_max_value(heterogeneous_list)\n    local max_value = heterogeneous_list[1]\n\n    for i = 2, #heterogeneous_list do\n        if heterogeneous_list[i] > max_value then\n            max_value = heterogeneous_list[i]\n        end\n    end\n\n    return max_value\nend",
            "gen_tc": "",
            "sim_score": "0.6464"
        },
        {
            "id": "57",
            "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.",
            "draft_plan": "# Sort the list of digits in descending order\n\n# Concatenate all the digits in the sorted list\n\n# Convert the concatenated string to an integer and return it",
            "requirements": "",
            "final_plan": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ",
            "code": "function largest_number(digits)\n    table.sort(digits, function(a, b) return a > b end)\n    return tonumber(table.concat(digits))\nend",
            "gen_tc": "",
            "sim_score": "0.6459"
        },
        {
            "id": "145",
            "prompt": "Write a python function to find the maximum difference between any two elements in a given array.",
            "draft_plan": "# If the array is empty, return None\n# Initialize the maximum difference to zero\n\n# Iterate through each element in the array\n    # Iterate through each element after the current element\n        # Calculate the difference between the current element and the subsequent element\n        # Update the maximum difference if the calculated difference is greater than the current maximum difference\n\n# Return the maximum difference",
            "requirements": "",
            "final_plan": "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ",
            "code": "function max_difference(arr)\n    if #arr == 0 then\n        return nil\n    end\n\n    local max_diff = 0\n\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            local diff = math.abs(arr[i] - arr[j])\n            if diff > max_diff then\n                max_diff = diff\n            end\n        end\n    end\n\n    return max_diff\nend",
            "gen_tc": "",
            "sim_score": "0.6411"
        },
        {
            "id": "468",
            "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
            "draft_plan": "# Initialize the maximum product as 1\n# Initialize an empty list to store the increasing subsequence\n\n# Iterate through each number in the array\n    # Initialize a temporary list to store the current increasing subsequence\n    # Iterate through each number before the current number\n        # Check if the current number is greater than the previous number and if the product of the current number and the previous maximum product is greater than the current maximum product\n            # If the condition is satisfied, update the maximum product and the temporary list with the current increasing subsequence\n    # Append the current number to the temporary list\n\n# Return the maximum product and the increasing subsequence list",
            "requirements": "",
            "final_plan": "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)",
            "code": "function findMaxProduct(nums)\n    local maxProduct = 1\n    local subsequence = {}\n    \n    for i = 1, #nums do\n        local temp = {nums[i]}\n        \n        for j = 1, i-1 do\n            if nums[i] > nums[j] and nums[i] * maxProduct > maxProduct then\n                maxProduct = nums[i] * maxProduct\n                temp = table.copy(subsequence)\n            end\n        end\n        \n        table.insert(temp, nums[i])\n        subsequence = table.copy(temp)\n    end\n    \n    return maxProduct, subsequence\nend\n\n-- Helper function to copy a table\nfunction table.copy(t)\n    local copy = {}\n    for key, value in pairs(t) do\n        copy[key] = value\n    end\n    return copy\nend",
            "gen_tc": "",
            "sim_score": "0.6326"
        },
        {
            "id": "393",
            "prompt": "Write a function to find the list with maximum length.",
            "draft_plan": "# Initialize the maximum length and the list with maximum length to empty values\n\n# Iterate through each list in the input list of lists\n    # Check if the length of the current list is greater than the maximum length\n        # If so, update the maximum length and the list with maximum length\n\n# Return the list with maximum length",
            "requirements": "",
            "final_plan": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)",
            "code": "function findListWithMaxLength(lists)\n    local maxLength = 0\n    local listWithMaxLength = {}\n\n    for _, list in ipairs(lists) do\n        local length = #list\n\n        if length > maxLength then\n            maxLength = length\n            listWithMaxLength = list\n        end\n    end\n\n    return listWithMaxLength\nend",
            "gen_tc": "",
            "sim_score": "0.6244"
        },
        {
            "id": "306",
            "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .",
            "draft_plan": "# Initialize a list to store the maximum sum of increasing subsequences for each index\n# Initialize the maximum sum to be 0\n\n# Iterate through each index i in the given list\n    # Initialize a variable to store the maximum sum of increasing subsequence until index i, including the kth element\n    # Iterate through each index k starting from i+1 to the end of the list\n        # Check if the element at index k is greater than the element at index i\n            # Update the maximum sum of increasing subsequence until index i, including the kth element\n    # Update the maximum sum if the maximum sum of increasing subsequence until index i, including the kth element, is greater than the current maximum sum\n\n# Return the maximum sum",
            "requirements": "",
            "final_plan": "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]",
            "code": "function findMaxSum(nums)\n    local maxSums = {}\n    local maxSum = 0\n\n    for i = 1, #nums do\n        local currMaxSum = 0\n\n        for k = i+1, #nums do\n            if nums[k] > nums[i] then\n                currMaxSum = math.max(currMaxSum, maxSums[i] + nums[k])\n            end\n        end\n\n        maxSums[i] = currMaxSum\n        maxSum = math.max(maxSum, currMaxSum)\n    end\n\n    return maxSum\nend",
            "gen_tc": "",
            "sim_score": "0.6225"
        }
    ],
    "HumanEval/121": [
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.8753"
        },
        {
            "id": "453",
            "prompt": "Write a python function to find the sum of even factors of a number.",
            "draft_plan": "# Initialize the sum of even factors to 0\n\n# Iterate from 1 to the given number (inclusive)\n    # Check if the current number is a factor of the given number\n        # Check if the current number is even\n            # If the current number is even, add it to the sum of even factors\n\n# Return the sum of even factors",
            "requirements": "",
            "final_plan": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res",
            "code": "function sum_of_even_factors(number)\n    local sum = 0\n\n    for i = 1, number do\n        if number % i == 0 and i % 2 == 0 then\n            sum = sum + i\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.7029"
        },
        {
            "id": "412",
            "prompt": "Write a python function to remove odd numbers from a given list.",
            "draft_plan": "# Create an empty list to store the even numbers\n\n# Iterate through each number in the given list\n    # Check if the number is even (number % 2 == 0)\n        # If the number is even, append it to the list of even numbers\n\n# Return the list of even numbers",
            "requirements": "",
            "final_plan": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
            "code": "function remove_odd_numbers(lst)\n    local even_lst = {}\n\n    for _, num in ipairs(lst) do\n        if num % 2 == 0 then\n            table.insert(even_lst, num)\n        end\n    end\n\n    return even_lst\nend",
            "gen_tc": "",
            "sim_score": "0.6843"
        },
        {
            "id": "274",
            "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
            "draft_plan": "# Import the math module\n\n# Define a function that takes in a positive integer n\n    # Initialize a variable `sum_even` to store the sum of even index binomial coefficients\n    # Iterate from 0 to n\n        # Calculate the binomial coefficient using the math module's comb function\n        # Check if the index is even\n            # If it is even, add the binomial coefficient to `sum_even`\n    # Return `sum_even`",
            "requirements": "",
            "final_plan": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ",
            "code": "import math\n\ndef sum_even_binomial_coefficients(n):\n    sum_even = 0\n    for i in range(n+1):\n        coefficient = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even += coefficient\n    return sum_even",
            "gen_tc": "",
            "sim_score": "0.6809"
        },
        {
            "id": "287",
            "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
            "draft_plan": "# Initialize the sum of squares variable to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Add the square of the current number to the sum of squares variable\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
            "code": "function sum_of_squares(n)\n    local sum = 0\n\n    for i = 1, n do\n        if i % 2 == 0 then\n            sum = sum + (i * i)\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6605"
        },
        {
            "id": "420",
            "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of the cube of even numbers\n# Iterate through each even number from 2 to (2*n) with a step size of 2\n    # Calculate the cube of the current even number\n    # Add the cube to the sum\n\n# Return the sum of the cube of even numbers",
            "requirements": "",
            "final_plan": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
            "code": "function cube_sum_of_even(n)\n    local sum = 0\n    \n    for i = 2, 2 * n, 2 do\n        local cube = i * i * i\n        sum = sum + cube\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6555"
        },
        {
            "id": "166",
            "prompt": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
            "draft_plan": "# Initialize a variable to keep track of the count of pairs\n# Iterate through each element in the list\n    # Iterate through each element after the current element\n        # Check if the xor of the current pair is an even number\n            # If it is, increment the count of pairs\n\n# Return the count of pairs",
            "requirements": "",
            "final_plan": "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count",
            "code": "function count_even_xor_pairs(list)\n    local pair_count = 0\n\n    for i = 1, #list do\n        for j = i+1, #list do\n            if (list[i] ~ list[j]) % 2 == 0 then\n                pair_count = pair_count + 1\n            end\n        end\n    end\n\n    return pair_count\nend",
            "gen_tc": "",
            "sim_score": "0.6395"
        },
        {
            "id": "267",
            "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of squares\n# Initialize a counter variable to keep track of the odd numbers\n# Initialize a variable to store the current odd number\n\n# Iterate from 1 to n (inclusive)\n    # Check if the current number is odd\n        # If it is, square the number and add it to the sum of squares\n        # Increase the counter variable by 1\n        # Check if the counter variable is equal to n\n            # If it is, break the loop\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
            "code": "function sum_of_squares(n)\n    local sum = 0\n    local counter = 0\n    local odd_number = 1\n\n    for i = 1, n do\n        if odd_number % 2 == 1 then\n            sum = sum + odd_number^2\n            counter = counter + 1\n        end\n\n        if counter == n then\n            break\n        end\n\n        odd_number = odd_number + 1\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6339"
        },
        {
            "id": "426",
            "prompt": "Write a function to filter odd numbers.",
            "draft_plan": "# Initialize an empty list to store the filtered numbers\n\n# Iterate through each number in the input list\n    # Check if the number is odd\n        # If the number is odd, append it to the filtered list\n\n# Return the filtered list",
            "requirements": "",
            "final_plan": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums",
            "code": "function filter_odd_numbers(number_list)\n    local filtered_list = {}\n\n    for _, num in ipairs(number_list) do\n        if num % 2 ~= 0 then\n            table.insert(filtered_list, num)\n        end\n    end\n\n    return filtered_list\nend",
            "gen_tc": "",
            "sim_score": "0.6309"
        },
        {
            "id": "406",
            "prompt": "Write a python function to find whether the parity of a given number is odd.",
            "draft_plan": "# Check if the number modulo 2 is equal to 1\n    # If the modulo is 1, the number is odd\n    # Return True\n\n# If the modulo is not 1, the number is even\n# Return False",
            "requirements": "",
            "final_plan": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False",
            "code": "function is_odd_parity(number)\n    return number % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.5964"
        }
    ],
    "HumanEval/122": [
        {
            "id": "398",
            "prompt": "Write a function to compute the sum of digits of each number of a given list.",
            "draft_plan": "# Initialize an empty list to store the sum of digits for each number\n\n# Iterate through each number in the given list\n    # Convert the number to a string\n    # Initialize a variable to store the sum of digits\n    # Iterate through each digit in the string representation of the number\n        # Convert the digit back to an integer and add it to the sum of digits\n    # Append the sum of digits to the list\n\n# Return the list of sum of digits for each number",
            "requirements": "",
            "final_plan": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
            "code": "function compute_sum_of_digits(numbers)\n    local sum_of_digits = {}\n\n    for _, num in ipairs(numbers) do\n        local num_str = tostring(num)\n        local digits_sum = 0\n\n        for i = 1, string.len(num_str) do\n            digits_sum = digits_sum + tonumber(string.sub(num_str, i, i))\n        end\n\n        table.insert(sum_of_digits, digits_sum)\n    end\n\n    return sum_of_digits\nend",
            "gen_tc": "",
            "sim_score": "0.6641"
        },
        {
            "id": "61",
            "prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of substrings\n\n# Iterate through each starting index of the substring\n    # Iterate through each ending index of the substring\n        # Get the substring from the starting index to the ending index\n        # Compute the sum of the digits in the substring\n        # Check if the sum of the digits is equal to the length of the substring\n            # If true, increment the counter variable\n\n# Return the counter variable with the total number of substrings",
            "requirements": "",
            "final_plan": "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count",
            "code": "function count_substrings(string)\n    local count = 0\n\n    for i = 1, string.len(string) do\n        for j = i, string.len(string) do\n            local substring = string.sub(string, i, j)\n            local sum = compute_sum(substring)\n            \n            if sum == string.len(substring) then\n                count = count + 1\n            end\n        end\n    end\n\n    return count\nend\n\nfunction compute_sum(substring)\n    local sum = 0\n\n    for i = 1, string.len(substring) do\n        local digit = tonumber(string.sub(substring, i, i))\n        sum = sum + digit\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6111"
        },
        {
            "id": "170",
            "prompt": "Write a function to find the sum of numbers in a list within a range specified by two indices.",
            "draft_plan": "# Initialize a variable to store the sum\n\n# Iterate through each number in the list within the given range\n    # Add the current number to the sum\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   ",
            "code": "function sum_within_range(list, start_index, end_index)\n    local sum = 0\n\n    for i = start_index, end_index do\n        sum = sum + list[i]\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6083"
        },
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.5449"
        },
        {
            "id": "65",
            "prompt": "Write a function to flatten a list and sum all of its elements.",
            "draft_plan": "# Initialize a variable to store the sum of all elements\n\n# Iterate through each element in the list\n    # Check if the current element is a list\n        # If it is a list, recursively call the flatten_and_sum function on the current element and add the result to the sum\n    # If it is not a list, add the current element to the sum\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total",
            "code": "function flatten_and_sum(lst)\n    local sum = 0\n\n    for _, element in ipairs(lst) do\n        if type(element) == \"table\" then\n            sum = sum + flatten_and_sum(element)\n        else\n            sum = sum + element\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5403"
        },
        {
            "id": "253",
            "prompt": "Write a python function that returns the number of integer elements in a given list.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the given list\n    # Check if the current element is an integer\n        # If it is an integer, increment the counter variable\n\n# Return the counter variable as the number of integer elements in the list",
            "requirements": "",
            "final_plan": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr",
            "code": "function count_integer_elements(lst)\n    local count = 0\n\n    for _, element in ipairs(lst) do\n        if type(element) == \"number\" and math.floor(element) == element then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5378"
        },
        {
            "id": "126",
            "prompt": "Write a python function to find the sum of common divisors of two given numbers.",
            "draft_plan": "# Find the common divisors of the two given numbers\n    # Find the smaller number among the two\n    # Initialize an empty list to store the common divisors\n    # Iterate from 1 to the smaller number\n        # Check if the current number is a divisor of both given numbers\n            # If yes, add it to the list of common divisors\n\n# Find the sum of the common divisors\n    # Initialize a variable to store the sum\n    # Iterate through the list of common divisors\n        # Add each divisor to the sum\n\n# Return the sum of the common divisors",
            "requirements": "",
            "final_plan": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum",
            "code": "function sumCommonDivisors(a, b)\n    local smaller = math.min(a, b)\n    local divisors = {}\n\n    for i = 1, smaller do\n        if a % i == 0 and b % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n\n    local sum = 0\n    for _, divisor in ipairs(divisors) do\n        sum = sum + divisor\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5355"
        },
        {
            "id": "133",
            "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
            "draft_plan": "# Initialize the sum of negative numbers to 0\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If it is negative, add it to the sum\n\n# Return the sum of negative numbers",
            "requirements": "",
            "final_plan": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)",
            "code": "function sum_of_negative_numbers(numbers)\n    local sum = 0\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            sum = sum + num\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5266"
        },
        {
            "id": "419",
            "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
            "draft_plan": "# Initialize a variable to store the total sum\n# Iterate through each number in the list\n    # Round the number to the nearest integer\n    # Add the rounded number to the total sum\n\n# Calculate the total sum multiplied by the length of the list\n# Print the result",
            "requirements": "",
            "final_plan": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum",
            "code": "function round_and_multiply(numbers)\n    local total_sum = 0\n\n    for _, num in ipairs(numbers) do\n        total_sum = total_sum + math.round(num)\n    end\n\n    local result = total_sum * #numbers\n    print(result)\nend\n\nfunction math.round(num)\n    return math.floor(num + 0.5)\nend",
            "gen_tc": "",
            "sim_score": "0.5066"
        },
        {
            "id": "476",
            "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.",
            "draft_plan": "# Sort the array in ascending order\n# Initialize variables for the smallest and largest values\n\n# Get the smallest value from the sorted array (first element)\n# Get the largest value from the sorted array (last element)\n\n# Calculate the sum of the smallest and largest values\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum",
            "code": "function sum_smallest_largest(arr)\n    table.sort(arr) -- Sort the array in ascending order\n    \n    local smallest = arr[1] -- Get the smallest value\n    local largest = arr[#arr] -- Get the largest value\n    \n    local sum = smallest + largest -- Calculate the sum\n    \n    return sum -- Return the sum\nend",
            "gen_tc": "",
            "sim_score": "0.5057"
        }
    ],
    "HumanEval/123": [
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.5216"
        },
        {
            "id": "426",
            "prompt": "Write a function to filter odd numbers.",
            "draft_plan": "# Initialize an empty list to store the filtered numbers\n\n# Iterate through each number in the input list\n    # Check if the number is odd\n        # If the number is odd, append it to the filtered list\n\n# Return the filtered list",
            "requirements": "",
            "final_plan": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums",
            "code": "function filter_odd_numbers(number_list)\n    local filtered_list = {}\n\n    for _, num in ipairs(number_list) do\n        if num % 2 ~= 0 then\n            table.insert(filtered_list, num)\n        end\n    end\n\n    return filtered_list\nend",
            "gen_tc": "",
            "sim_score": "0.5105"
        },
        {
            "id": "420",
            "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of the cube of even numbers\n# Iterate through each even number from 2 to (2*n) with a step size of 2\n    # Calculate the cube of the current even number\n    # Add the cube to the sum\n\n# Return the sum of the cube of even numbers",
            "requirements": "",
            "final_plan": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
            "code": "function cube_sum_of_even(n)\n    local sum = 0\n    \n    for i = 2, 2 * n, 2 do\n        local cube = i * i * i\n        sum = sum + cube\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5049"
        },
        {
            "id": "412",
            "prompt": "Write a python function to remove odd numbers from a given list.",
            "draft_plan": "# Create an empty list to store the even numbers\n\n# Iterate through each number in the given list\n    # Check if the number is even (number % 2 == 0)\n        # If the number is even, append it to the list of even numbers\n\n# Return the list of even numbers",
            "requirements": "",
            "final_plan": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
            "code": "function remove_odd_numbers(lst)\n    local even_lst = {}\n\n    for _, num in ipairs(lst) do\n        if num % 2 == 0 then\n            table.insert(even_lst, num)\n        end\n    end\n\n    return even_lst\nend",
            "gen_tc": "",
            "sim_score": "0.4977"
        },
        {
            "id": "406",
            "prompt": "Write a python function to find whether the parity of a given number is odd.",
            "draft_plan": "# Check if the number modulo 2 is equal to 1\n    # If the modulo is 1, the number is odd\n    # Return True\n\n# If the modulo is not 1, the number is even\n# Return False",
            "requirements": "",
            "final_plan": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False",
            "code": "function is_odd_parity(number)\n    return number % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.4965"
        },
        {
            "id": "274",
            "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
            "draft_plan": "# Import the math module\n\n# Define a function that takes in a positive integer n\n    # Initialize a variable `sum_even` to store the sum of even index binomial coefficients\n    # Iterate from 0 to n\n        # Calculate the binomial coefficient using the math module's comb function\n        # Check if the index is even\n            # If it is even, add the binomial coefficient to `sum_even`\n    # Return `sum_even`",
            "requirements": "",
            "final_plan": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ",
            "code": "import math\n\ndef sum_even_binomial_coefficients(n):\n    sum_even = 0\n    for i in range(n+1):\n        coefficient = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even += coefficient\n    return sum_even",
            "gen_tc": "",
            "sim_score": "0.4594"
        },
        {
            "id": "166",
            "prompt": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
            "draft_plan": "# Initialize a variable to keep track of the count of pairs\n# Iterate through each element in the list\n    # Iterate through each element after the current element\n        # Check if the xor of the current pair is an even number\n            # If it is, increment the count of pairs\n\n# Return the count of pairs",
            "requirements": "",
            "final_plan": "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count",
            "code": "function count_even_xor_pairs(list)\n    local pair_count = 0\n\n    for i = 1, #list do\n        for j = i+1, #list do\n            if (list[i] ~ list[j]) % 2 == 0 then\n                pair_count = pair_count + 1\n            end\n        end\n    end\n\n    return pair_count\nend",
            "gen_tc": "",
            "sim_score": "0.4583"
        },
        {
            "id": "109",
            "prompt": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
            "draft_plan": "# Convert the binary string to a list of characters\n# Initialize a counter variable to keep track of the number of odd numbers\n\n# Rotate the binary string the given number of times\n    # Remove the last character from the binary string and prepend it to the front\n\n# Convert the rotated binary string back to a string\n# Iterate through each character in the rotated binary string\n    # Convert the character to an integer\n    # Check if the integer value is odd\n        # If so, increment the counter\n\n# Return the counter value",
            "requirements": "",
            "final_plan": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ",
            "code": "function count_odd_numbers(binary_str, rotations)\n    local binary_list = {}\n    local counter = 0\n\n    -- Convert the binary string to a list of characters\n    for char in string.gmatch(binary_str, \".\") do\n        table.insert(binary_list, char)\n    end\n\n    -- Rotate the binary string the given number of times\n    for i = 1, rotations do\n        local last_char = table.remove(binary_list)\n        table.insert(binary_list, 1, last_char)\n    end\n\n    -- Convert the rotated binary string back to a string\n    local rotated_binary_str = table.concat(binary_list)\n\n    -- Iterate through each character in the rotated binary string\n    for i = 1, string.len(rotated_binary_str) do\n        local char = string.sub(rotated_binary_str, i, i)\n        local num = tonumber(char)\n        \n        -- Check if the integer value is odd\n        if num % 2 == 1 then\n            counter = counter + 1\n        end\n    end\n\n    return counter\nend",
            "gen_tc": "",
            "sim_score": "0.4575"
        },
        {
            "id": "267",
            "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of squares\n# Initialize a counter variable to keep track of the odd numbers\n# Initialize a variable to store the current odd number\n\n# Iterate from 1 to n (inclusive)\n    # Check if the current number is odd\n        # If it is, square the number and add it to the sum of squares\n        # Increase the counter variable by 1\n        # Check if the counter variable is equal to n\n            # If it is, break the loop\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
            "code": "function sum_of_squares(n)\n    local sum = 0\n    local counter = 0\n    local odd_number = 1\n\n    for i = 1, n do\n        if odd_number % 2 == 1 then\n            sum = sum + odd_number^2\n            counter = counter + 1\n        end\n\n        if counter == n then\n            break\n        end\n\n        odd_number = odd_number + 1\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4570"
        },
        {
            "id": "287",
            "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
            "draft_plan": "# Initialize the sum of squares variable to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Add the square of the current number to the sum of squares variable\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
            "code": "function sum_of_squares(n)\n    local sum = 0\n\n    for i = 1, n do\n        if i % 2 == 0 then\n            sum = sum + (i * i)\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4516"
        }
    ],
    "HumanEval/124": [
        {
            "id": "455",
            "prompt": "Write a function to check whether the given month number contains 31 days or not.",
            "draft_plan": "# Create a list of months with 31 days\n    # Use the month numbers from 1 to 12\n\n# Check if the given month number is in the list of months with 31 days\n    # If it is, return True\n    # Otherwise, return False",
            "requirements": "",
            "final_plan": "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False",
            "code": "function has_31_days(month)\n    local months_with_31_days = {1, 3, 5, 7, 8, 10, 12}\n\n    for i = 1, #months_with_31_days do\n        if month == months_with_31_days[i] then\n            return true\n        end\n    end\n\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.6647"
        },
        {
            "id": "427",
            "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
            "draft_plan": "# Split the input date string by '-' to get year, month, and day\n# Create a new date string in the format of dd-mm-yyyy using day, month, and year obtained from the split\n# Return the new date string",
            "requirements": "",
            "final_plan": "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)",
            "code": "function convert_date(date)\n    local parts = {}\n    for part in string.gmatch(date, \"[^-]+\") do\n        table.insert(parts, part)\n    end\n\n    local year = parts[1]\n    local month = parts[2]\n    local day = parts[3]\n\n    local new_date = day .. \"-\" .. month .. \"-\" .. year\n\n    return new_date\nend",
            "gen_tc": "",
            "sim_score": "0.5553"
        },
        {
            "id": "113",
            "prompt": "Write a function to check if a string represents an integer or not.",
            "draft_plan": "# Check if the string is empty or None\n    # If so, return False\n\n# Check if the string starts with a '+' or '-'\n    # If so, remove the sign from the string\n\n# Check if the string consists only of digits\n    # If so, return True\n\n# If the string is non-empty and does not start with a sign, it is not a valid integer representation\n    # Return False",
            "requirements": "",
            "final_plan": "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False",
            "code": "function isInteger(str)\n    if str == \"\" or str == nil then\n        return false\n    end\n    \n    if str:sub(1, 1) == '+' or str:sub(1, 1) == '-' then\n        str = str:sub(2)\n    end\n    \n    if str:match(\"^%d+$\") then\n        return true\n    end\n    \n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.3942"
        },
        {
            "id": "77",
            "prompt": "Write a python function to find whether a number is divisible by 11.",
            "draft_plan": "To determine whether a number is divisible by 11, we can use the following logic:\n\n1. Convert the number to a string.\n2. Iterate through the digits of the number.\n3. Add the digits in odd positions (starting from the rightmost digit) and subtract the sum of the digits in even positions.\n4. If the result is divisible by 11, the original number is also divisible by 11.\n\nHere is the code implementing this logic:\n\n```python\ndef is_divisible_by_11(number):\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Iterate through the digits of the number\n    sum_odd = 0\n    sum_even = 0\n    for i in range(len(number_str)):\n        digit = int(number_str[i])\n        \n        # Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0:\n            sum_odd += digit\n        else:\n            sum_even += digit\n    \n    # Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0:\n        return True\n    else:\n        return False\n```\n\nYou can use this function to check if a number is divisible by 11. For example:\n\n```python\nprint(is_divisible_by_11(121))  # Output: True\nprint(is_divisible_by_11(123))  # Output: False\n```",
            "requirements": "",
            "final_plan": "def is_Diff(n): \n    return (n % 11 == 0) ",
            "code": "function is_divisible_by_11(number)\n    -- Convert the number to a string\n    local number_str = tostring(number)\n    \n    -- Iterate through the digits of the number\n    local sum_odd = 0\n    local sum_even = 0\n    for i = 1, string.len(number_str) do\n        local digit = tonumber(string.sub(number_str, i, i))\n        \n        -- Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0 then\n            sum_even = sum_even + digit\n        else\n            sum_odd = sum_odd + digit\n        end\n    end\n    \n    -- Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0 then\n        return true\n    else\n        return false\n    end\nend\n\nprint(is_divisible_by_11(121))  -- Output: true\nprint(is_divisible_by_11(123))  -- Output: false",
            "gen_tc": "",
            "sim_score": "0.3724"
        },
        {
            "id": "264",
            "prompt": "Write a function to calculate a dog's age in dog's years.",
            "draft_plan": "# Define a function called calculate_dog_age that takes in one parameter: human_age\n\n# Define a variable called dog_age and set it to 0\n\n# If human_age is less than or equal to 2, set dog_age to human_age multiplied by 10.5\n# If human_age is greater than 2, calculate the dog's age in dog's years by adding:\n    # 2 (for the first two years) multiplied by 10.5\n    # The remaining years multiplied by 4\n\n# Return the value of dog_age as the result of the function",
            "requirements": "",
            "final_plan": "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age",
            "code": "function calculate_dog_age(human_age)\n    local dog_age = 0\n\n    if human_age <= 2 then\n        dog_age = human_age * 10.5\n    else\n        dog_age = (2 * 10.5) + ((human_age - 2) * 4)\n    end\n\n    return dog_age\nend",
            "gen_tc": "",
            "sim_score": "0.3629"
        },
        {
            "id": "56",
            "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
            "draft_plan": "# Convert the given number to a string and reverse it\n# Convert the reversed string back to an integer\n# Check if the given number is equal to twice the reversed number plus 1\n# If the condition is true, return True. Otherwise, return False.",
            "requirements": "",
            "final_plan": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
            "code": "function is_one_less_twice_reverse(number)\n    local reverse = tonumber(string.reverse(tostring(number)))\n    if number == (2 * reverse + 1) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.3520"
        },
        {
            "id": "434",
            "prompt": "Write a function that matches a string that has an a followed by one or more b's.",
            "draft_plan": "import re\n\ndef match_string(string):\n    pattern = r'a+b+'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n",
            "code": "function match_string(str)\n    local pattern = \"a+b+\"\n    if string.match(str, pattern) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.3511"
        },
        {
            "id": "283",
            "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
            "draft_plan": "# Convert the input integer to a string\n# Initialize a dictionary to store the frequency of each digit\n\n# Iterate through each digit in the string\n    # Increment the frequency of the digit in the dictionary\n\n# Iterate through each digit in the string\n    # Check if the frequency of the digit is greater than the digit itself\n        # If yes, return False\n\n# If all frequencies are less than or equal to their respective digits, return True",
            "requirements": "",
            "final_plan": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
            "code": "function check_frequency(num)\n    local str_num = tostring(num)\n    local freq_dict = {}\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        freq_dict[digit] = (freq_dict[digit] or 0) + 1\n    end\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        if freq_dict[digit] > tonumber(digit) then\n            return false\n        end\n    end\n\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.3496"
        },
        {
            "id": "404",
            "prompt": "Write a python function to find the minimum of two numbers.",
            "draft_plan": "# Define a function to find the minimum of two numbers\n    # Check if the first number is less than the second number\n        # If true, return the first number\n        # If false, return the second number\n\n# Call the function and pass two numbers as arguments",
            "requirements": "",
            "final_plan": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ",
            "code": "function find_minimum(a, b)\n    if a < b then\n        return a\n    else\n        return b\n    end\nend\n\n-- Example usage\nlocal num1 = 10\nlocal num2 = 5\nlocal min = find_minimum(num1, num2)\nprint(min)  -- Output: 5",
            "gen_tc": "",
            "sim_score": "0.3320"
        },
        {
            "id": "138",
            "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
            "draft_plan": "# Initialize a variable 'n' with the given number\n\n# Iterate while 'n' is greater than 0\n    # Check if 'n' is divisible by 2\n        # If 'n' is divisible by 2, divide 'n' by 2\n        # Otherwise, subtract the largest power of 2 less than 'n' from 'n'\n\n# If 'n' becomes 0, return True\n# Otherwise, return False",
            "requirements": "",
            "final_plan": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True",
            "code": "function canRepresentAsPowerOf2(n)\n    while n > 0 do\n        if n % 2 == 0 then\n            n = n / 2\n        else\n            n = n - math.pow(2, math.floor(math.log(n, 2)))\n        end\n    end\n    \n    return n == 0\nend",
            "gen_tc": "",
            "sim_score": "0.3304"
        }
    ],
    "HumanEval/125": [
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.5897"
        },
        {
            "id": "118",
            "prompt": "Write a function to convert a string to a list of strings split on the space character.",
            "draft_plan": "# Initialize an empty list to store the split strings\n\n# Split the input string on the space character and store the result in a variable\n\n# Iterate through each element in the split result\n    # Append the element to the list\n\n# Return the list of split strings",
            "requirements": "",
            "final_plan": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst",
            "code": "function split_string(str)\n    local split_result = {}\n    for word in string.gmatch(str, \"%S+\") do\n        table.insert(split_result, word)\n    end\n    return split_result\nend",
            "gen_tc": "",
            "sim_score": "0.5779"
        },
        {
            "id": "461",
            "prompt": "Write a python function to count the upper case characters in a given string.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of uppercase characters\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter variable\n\n# Return the counter variable, which represents the number of uppercase characters in the string",
            "requirements": "",
            "final_plan": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
            "code": "function count_uppercase_chars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= 'A' and char <= 'Z' then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5645"
        },
        {
            "id": "305",
            "prompt": "Write a function to return two words from a list of words starting with letter 'p'.",
            "draft_plan": "# Initialize an empty list to store the words starting with 'p'\n\n# Iterate through each word in the list\n    # Check if the first letter of the word is 'p'\n        # If yes, append the word to the list\n\n# Check if the list has at least two words\n    # If yes, return the first two words from the list\n    # If no, return None or an appropriate message",
            "requirements": "",
            "final_plan": "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()",
            "code": "function words_starting_with_p(word_list)\n    local p_words = {}\n\n    for _, word in ipairs(word_list) do\n        if string.sub(word, 1, 1) == \"p\" then\n            table.insert(p_words, word)\n        end\n    end\n\n    if #p_words >= 2 then\n        return p_words[1], p_words[2]\n    else\n        return nil\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5583"
        },
        {
            "id": "90",
            "prompt": "Write a python function to find the length of the longest word.",
            "draft_plan": "# Split the input sentence into words using the split() function\n# Initialize a variable maxLength to 0\n\n# Iterate through each word in the list of words\n    # Check if the length of the current word is greater than maxLength\n        # If it is, update maxLength with the length of the current word\n\n# Return maxLength",
            "requirements": "",
            "final_plan": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max",
            "code": "function find_longest_word(sentence)\n    local words = split_sentence(sentence)\n    local max_length = 0\n\n    for _, word in ipairs(words) do\n        local length = string.len(word)\n        if length > max_length then\n            max_length = length\n        end\n    end\n\n    return max_length\nend\n\nfunction split_sentence(sentence)\n    local words = {}\n    for word in string.gmatch(sentence, \"%S+\") do\n        table.insert(words, word)\n    end\n    return words\nend",
            "gen_tc": "",
            "sim_score": "0.5397"
        },
        {
            "id": "165",
            "prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
            "draft_plan": "# Initialize a variable to keep track of the count of characters at the same position in the English alphabet\n# Iterate through each character in the input string\n    # Convert the character to lowercase\n    # Check if the character is an alphabet character\n        # Get the position of the character in the English alphabet by subtracting the ASCII value of 'a' or 'A'\n        # Check if the position is equal to the index of the character in the string\n            # If the condition is true, increment the count\n\n# Return the count of characters at the same position in the English alphabet",
            "requirements": "",
            "final_plan": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ",
            "code": "function countSamePositionChars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local c = string.lower(string.sub(str, i, i))\n        if c >= \"a\" and c <= \"z\" then\n            local position = string.byte(c) - string.byte(\"a\") + 1\n            if position == i then\n                count = count + 1\n            end\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5355"
        },
        {
            "id": "128",
            "prompt": "Write a function to find words that are longer than n characters from a given list of words.",
            "draft_plan": "# Create an empty list to store the result\n\n# Iterate through each word in the given list\n    # Check if the length of the current word is greater than n\n        # If the condition is satisfied, append the word to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t",
            "code": "function find_longer_words(word_list, n)\n    local result = {}\n\n    for _, word in ipairs(word_list) do\n        if string.len(word) > n then\n            table.insert(result, word)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5323"
        },
        {
            "id": "238",
            "prompt": "Write a python function to count the number of non-empty substrings of a given string.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each character and its index in the input string\n    # Iterate through each substring starting from the current character\n        # Increment the counter variable by 1 for each non-empty substring\n\n# Return the counter variable",
            "requirements": "",
            "final_plan": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ",
            "code": "function count_substrings(str)\n    local count = 0\n    for i = 1, #str do\n        for j = i, #str do\n            local substring = string.sub(str, i, j)\n            if substring ~= \"\" then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4971"
        },
        {
            "id": "454",
            "prompt": "Write a function that matches a word containing 'z'.",
            "draft_plan": "# Iterate through each word in the given list\n    # Check if the character 'z' is present in the word\n        # If 'z' is found, add the word to a new list\n\n# Return the new list containing words with 'z'",
            "requirements": "",
            "final_plan": "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function match_word_with_z(word_list)\n    local z_words = {}\n\n    for _, word in ipairs(word_list) do\n        if string.find(word, 'z') ~= nil then\n            table.insert(z_words, word)\n        end\n    end\n\n    return z_words\nend",
            "gen_tc": "",
            "sim_score": "0.4912"
        },
        {
            "id": "226",
            "prompt": "Write a python function to remove the characters which have odd index values of a given string.",
            "draft_plan": "# Initialize an empty string to store the result\n\n# Iterate through each character and its index in the input string\n    # Check if the index of the current character is even\n        # If it is even, append the character to the result string\n\n# Return the result string",
            "requirements": "",
            "final_plan": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result",
            "code": "function remove_odd_index_chars(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        if i % 2 == 0 then\n            result = result .. string.sub(str, i, i)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4867"
        }
    ],
    "HumanEval/126": [
        {
            "id": "472",
            "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.",
            "draft_plan": "# Sort the input list in ascending order\n\n# Iterate through each number in the sorted list, starting from the second number\n    # Check if the current number is consecutive to the previous number\n        # If not, return False\n\n# If all numbers are consecutive, return True",
            "requirements": "",
            "final_plan": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ",
            "code": "function checkConsecutive(lst)\n    table.sort(lst)\n    \n    for i = 2, #lst do\n        if lst[i] ~= lst[i-1] + 1 then\n            return false\n        end\n    end\n    \n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.6448"
        },
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.6150"
        },
        {
            "id": "119",
            "prompt": "Write a python function to find the element that appears only once in a sorted array.",
            "draft_plan": "# Initialize a variable to keep track of the unique element\n# Iterate through the sorted array\n    # Check if the current element is equal to the next element and the previous element\n        # If not, assign the current element to the unique variable\n\n# Return the unique element",
            "requirements": "",
            "final_plan": "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)",
            "code": "function find_unique_element(arr)\n    local unique = nil\n\n    for i = 1, #arr do\n        if (i == 1 or arr[i] ~= arr[i-1]) and (i == #arr or arr[i] ~= arr[i+1]) then\n            unique = arr[i]\n            break\n        end\n    end\n\n    return unique\nend",
            "gen_tc": "",
            "sim_score": "0.5748"
        },
        {
            "id": "71",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Use the built-in sorted() function to sort the list in ascending order\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums",
            "code": "function sort_list(elements)\n    return sorted(elements)\nend",
            "gen_tc": "",
            "sim_score": "0.5730"
        },
        {
            "id": "141",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Implement a sorting algorithm such as bubble sort, insertion sort, merge sort, quick sort, etc.\n\n# Define a function to take a list of elements as input\n    # Iterate through the list to compare each element with its adjacent element(s)\n        # Swap elements if they are in the wrong order\n    # Repeat the above steps until the list is sorted\n\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums",
            "code": "-- Bubble Sort implementation\nfunction sort_list(list)\n    local n = #list\n    for i = 1, n-1 do\n        for j = 1, n-i do\n            if list[j] > list[j+1] then\n                list[j], list[j+1] = list[j+1], list[j]\n            end\n        end\n    end\n    return list\nend",
            "gen_tc": "",
            "sim_score": "0.5680"
        },
        {
            "id": "56",
            "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
            "draft_plan": "# Convert the given number to a string and reverse it\n# Convert the reversed string back to an integer\n# Check if the given number is equal to twice the reversed number plus 1\n# If the condition is true, return True. Otherwise, return False.",
            "requirements": "",
            "final_plan": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
            "code": "function is_one_less_twice_reverse(number)\n    local reverse = tonumber(string.reverse(tostring(number)))\n    if number == (2 * reverse + 1) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5610"
        },
        {
            "id": "281",
            "prompt": "Write a python function to check if the elements of a given list are unique or not.",
            "draft_plan": "# Convert the input list into a set\n# Compare the length of the input list with the length of the set\n    # If they are equal, return True (all elements are unique)\n    # If they are not equal, return False (there are duplicate elements)",
            "requirements": "",
            "final_plan": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True",
            "code": "function are_elements_unique(lst)\n    local unique_set = {}\n    for _, elem in ipairs(lst) do\n        if unique_set[elem] then\n            return false\n        else\n            unique_set[elem] = true\n        end\n    end\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.5578"
        },
        {
            "id": "436",
            "prompt": "Write a python function to return the negative numbers in a list.",
            "draft_plan": "# Initialize an empty list to store the negative numbers\n\n# Iterate through each element in the input list\n    # Check if the current element is less than 0\n        # If the element is negative, append it to the list of negative numbers\n\n# Return the list of negative numbers",
            "requirements": "",
            "final_plan": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ",
            "code": "function getNegativeNumbers(numbers)\n    local negativeNumbers = {}\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            table.insert(negativeNumbers, num)\n        end\n    end\n\n    return negativeNumbers\nend",
            "gen_tc": "",
            "sim_score": "0.5338"
        },
        {
            "id": "443",
            "prompt": "Write a python function to find the largest negative number from the given list.",
            "draft_plan": "# Initialize a variable 'largest_negative' to None\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If 'largest_negative' is None or the current number is greater than 'largest_negative', update 'largest_negative' to the current number\n\n# Return 'largest_negative'",
            "requirements": "",
            "final_plan": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
            "code": "function find_largest_negative(numbers)\n    local largest_negative = nil\n\n    for _, number in ipairs(numbers) do\n        if number < 0 then\n            if largest_negative == nil or number > largest_negative then\n                largest_negative = number\n            end\n        end\n    end\n\n    return largest_negative\nend",
            "gen_tc": "",
            "sim_score": "0.5276"
        },
        {
            "id": "104",
            "prompt": "Write a function to sort each sublist of strings in a given list of lists.",
            "draft_plan": "# Iterate through each sublist in the given list\n    # Sort the sublist using the sorted() function and assign the sorted sublist back to the original sublist\n\n# Return the modified list with sorted sublists",
            "requirements": "",
            "final_plan": "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n",
            "code": "function sort_sublists(list_of_lists)\n    for i = 1, #list_of_lists do\n        list_of_lists[i] = table.sort(list_of_lists[i])\n    end\n    return list_of_lists\nend",
            "gen_tc": "",
            "sim_score": "0.5273"
        }
    ],
    "HumanEval/127": [
        {
            "id": "473",
            "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
            "draft_plan": "# Initialize the intersection as the first tuple in the given tuple list\n\n# Iterate through each tuple in the given tuple list starting from the second tuple\n    # Initialize the current intersection as an empty list\n\n    # Iterate through each element in the current tuple\n        # Check if the element is present in the previous intersection\n            # If yes, append the element to the current intersection\n\n    # Update the intersection as the current intersection\n\n# Return the intersection",
            "requirements": "",
            "final_plan": "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)",
            "code": "function tupleIntersection(tuple_list)\n    local intersection = tuple_list[1]\n\n    for i = 2, #tuple_list do\n        local current_tuple = tuple_list[i]\n        local current_intersection = {}\n\n        for _, element in ipairs(current_tuple) do\n            if contains(intersection, element) then\n                table.insert(current_intersection, element)\n            end\n        end\n\n        intersection = current_intersection\n    end\n\n    return intersection\nend\n\nfunction contains(list, element)\n    for _, value in ipairs(list) do\n        if value == element then\n            return true\n        end\n    end\n\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5405"
        },
        {
            "id": "256",
            "prompt": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
            "draft_plan": "# Define a function to check if a number is prime\n    # Check if the number is less than 2, return False\n    # Iterate from 2 to the square root of the number\n        # Check if the number is divisible by any number in the range\n            # If divisible, return False\n    # If the number is not divisible by any number in the range, return True\n\n# Define a function to count the number of primes less than a given number\n    # Initialize a count variable to 0\n    # Iterate from 2 to the given number\n        # Check if the current number is prime\n            # If prime, increment the count\n    # Return the count",
            "requirements": "",
            "final_plan": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr",
            "code": "function isPrime(n)\n    if n < 2 then\n        return false\n    end\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            return false\n        end\n    end\n    return true\nend\n\nfunction countPrimes(n)\n    local count = 0\n    for i = 2, n - 1 do\n        if isPrime(i) then\n            count = count + 1\n        end\n    end\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5266"
        },
        {
            "id": "249",
            "prompt": "Write a function to find the intersection of two arrays.",
            "draft_plan": "# Initialize an empty result array\n\n# Iterate through each element in the first array\n    # Check if the current element is present in the second array\n        # If it is present, append it to the result array\n\n# Return the result array",
            "requirements": "",
            "final_plan": "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result",
            "code": "function findIntersection(array1, array2)\n    local result = {}\n\n    for _, elem1 in ipairs(array1) do\n        for _, elem2 in ipairs(array2) do\n            if elem1 == elem2 then\n                table.insert(result, elem1)\n                break\n            end\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4886"
        },
        {
            "id": "414",
            "prompt": "Write a python function to check whether any value in a sequence exists in a sequence or not.",
            "draft_plan": "# Iterate through each value in the first sequence\n    # Check if the value exists in the second sequence\n        # If the value exists, return True\n\n# If no matching value is found, return False",
            "requirements": "",
            "final_plan": "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False",
            "code": "function checkValueExistence(seq1, seq2)\n    for _, value1 in ipairs(seq1) do\n        for _, value2 in ipairs(seq2) do\n            if value1 == value2 then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4582"
        },
        {
            "id": "431",
            "prompt": "Write a function that takes two lists and returns true if they have at least one common element.",
            "draft_plan": "# Iterate through each element in the first list\n    # Check if the current element is in the second list\n        # If found, return True\n\n# If no common element is found, return False",
            "requirements": "",
            "final_plan": "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result",
            "code": "function have_common_element(list1, list2)\n    for _, element1 in ipairs(list1) do\n        for _, element2 in ipairs(list2) do\n            if element1 == element2 then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4473"
        },
        {
            "id": "58",
            "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
            "draft_plan": "# Check if the product of the two integers is negative\n    # If the product is negative, it means the two integers have opposite signs\n        # Return True\n\n# If the product is not negative, it means the two integers have the same sign\n    # Return False",
            "requirements": "",
            "final_plan": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ",
            "code": "function haveOppositeSigns(a, b)\n    if a * b < 0 then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4272"
        },
        {
            "id": "283",
            "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
            "draft_plan": "# Convert the input integer to a string\n# Initialize a dictionary to store the frequency of each digit\n\n# Iterate through each digit in the string\n    # Increment the frequency of the digit in the dictionary\n\n# Iterate through each digit in the string\n    # Check if the frequency of the digit is greater than the digit itself\n        # If yes, return False\n\n# If all frequencies are less than or equal to their respective digits, return True",
            "requirements": "",
            "final_plan": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
            "code": "function check_frequency(num)\n    local str_num = tostring(num)\n    local freq_dict = {}\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        freq_dict[digit] = (freq_dict[digit] or 0) + 1\n    end\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        if freq_dict[digit] > tonumber(digit) then\n            return false\n        end\n    end\n\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.4271"
        },
        {
            "id": "404",
            "prompt": "Write a python function to find the minimum of two numbers.",
            "draft_plan": "# Define a function to find the minimum of two numbers\n    # Check if the first number is less than the second number\n        # If true, return the first number\n        # If false, return the second number\n\n# Call the function and pass two numbers as arguments",
            "requirements": "",
            "final_plan": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ",
            "code": "function find_minimum(a, b)\n    if a < b then\n        return a\n    else\n        return b\n    end\nend\n\n-- Example usage\nlocal num1 = 10\nlocal num2 = 5\nlocal min = find_minimum(num1, num2)\nprint(min)  -- Output: 5",
            "gen_tc": "",
            "sim_score": "0.4259"
        },
        {
            "id": "472",
            "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.",
            "draft_plan": "# Sort the input list in ascending order\n\n# Iterate through each number in the sorted list, starting from the second number\n    # Check if the current number is consecutive to the previous number\n        # If not, return False\n\n# If all numbers are consecutive, return True",
            "requirements": "",
            "final_plan": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ",
            "code": "function checkConsecutive(lst)\n    table.sort(lst)\n    \n    for i = 2, #lst do\n        if lst[i] ~= lst[i-1] + 1 then\n            return false\n        end\n    end\n    \n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.4227"
        },
        {
            "id": "69",
            "prompt": "Write a function to check whether a list contains the given sublist or not.",
            "draft_plan": "# Iterate through each index in the main list\n    # Check if the current index and the sublist length is less than or equal to the main list length\n        # Check if the sublist matches the elements starting from the current index in the main list\n\n# If the sublist is found, return True\n# Otherwise, return False",
            "requirements": "",
            "final_plan": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set",
            "code": "function contains_sublist(main_list, sublist)\n    for i = 1, #main_list do\n        if (i + #sublist - 1) <= #main_list then\n            local match = true\n            for j = 1, #sublist do\n                if main_list[i + j - 1] ~= sublist[j] then\n                    match = false\n                    break\n                end\n            end\n            if match then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4161"
        }
    ],
    "HumanEval/128": [
        {
            "id": "58",
            "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
            "draft_plan": "# Check if the product of the two integers is negative\n    # If the product is negative, it means the two integers have opposite signs\n        # Return True\n\n# If the product is not negative, it means the two integers have the same sign\n    # Return False",
            "requirements": "",
            "final_plan": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ",
            "code": "function haveOppositeSigns(a, b)\n    if a * b < 0 then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.6022"
        },
        {
            "id": "133",
            "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
            "draft_plan": "# Initialize the sum of negative numbers to 0\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If it is negative, add it to the sum\n\n# Return the sum of negative numbers",
            "requirements": "",
            "final_plan": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)",
            "code": "function sum_of_negative_numbers(numbers)\n    local sum = 0\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            sum = sum + num\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5764"
        },
        {
            "id": "471",
            "prompt": "Write a python function to find the product of the array multiplication modulo n.",
            "draft_plan": "# Initialize the product to 1\n\n# Iterate through each element in the array\n    # Multiply the current element with the product\n    # Take the modulo of the product with n\n\n# Return the final product modulo n",
            "requirements": "",
            "final_plan": "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ",
            "code": "function arrayProductModuloN(arr, n)\n    local product = 1\n\n    for _, num in ipairs(arr) do\n        product = (product * num) % n\n    end\n\n    return product\nend",
            "gen_tc": "",
            "sim_score": "0.5682"
        },
        {
            "id": "436",
            "prompt": "Write a python function to return the negative numbers in a list.",
            "draft_plan": "# Initialize an empty list to store the negative numbers\n\n# Iterate through each element in the input list\n    # Check if the current element is less than 0\n        # If the element is negative, append it to the list of negative numbers\n\n# Return the list of negative numbers",
            "requirements": "",
            "final_plan": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ",
            "code": "function getNegativeNumbers(numbers)\n    local negativeNumbers = {}\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            table.insert(negativeNumbers, num)\n        end\n    end\n\n    return negativeNumbers\nend",
            "gen_tc": "",
            "sim_score": "0.5433"
        },
        {
            "id": "120",
            "prompt": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.",
            "draft_plan": "# Initialize the maximum product to 0\n\n# Iterate through each pair of tuples in the given list\n    # Calculate the product of the absolute values of the numbers in the current pair\n    # If the calculated product is greater than the maximum product, update the maximum product\n\n# Return the maximum product",
            "requirements": "",
            "final_plan": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max",
            "code": "function maxAbsoluteProduct(list)\n    local maxProduct = 0\n\n    for _, pair in ipairs(list) do\n        local product = math.abs(pair[1]) * math.abs(pair[2])\n        if product > maxProduct then\n            maxProduct = product\n        end\n    end\n\n    return maxProduct\nend",
            "gen_tc": "",
            "sim_score": "0.5397"
        },
        {
            "id": "415",
            "prompt": "Write a python function to find a pair with highest product from a given array of integers.",
            "draft_plan": "# Initialize the maximum product to -infinity\n\n# Iterate through each pair of numbers in the array\n    # Calculate the product of the current pair\n    # Update the maximum product if the current product is greater\n\n# Return the pair with the highest product",
            "requirements": "",
            "final_plan": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ",
            "code": "function find_highest_product(arr)\n    local max_product = -math.huge\n    local pair = {}\n\n    for i = 1, #arr-1 do\n        for j = i+1, #arr do\n            local product = arr[i] * arr[j]\n            if product > max_product then\n                max_product = product\n                pair = {arr[i], arr[j]}\n            end\n        end\n    end\n\n    return pair\nend",
            "gen_tc": "",
            "sim_score": "0.5343"
        },
        {
            "id": "127",
            "prompt": "Write a function to multiply two integers.",
            "draft_plan": "# Initialize the result to 0\n\n# If either of the integers is 0, return 0\n\n# If both integers are negative, convert them to positive\n    # Multiply the positive integers and change the sign of the result to negative\n\n# If only one integer is negative, convert it to positive\n    # Multiply the positive integers and change the sign of the result to negative\n\n# If both integers are positive, multiply them normally\n\n# Return the result",
            "requirements": "",
            "final_plan": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)",
            "code": "function multiply(a, b)\n    local result = 0\n    \n    if a == 0 or b == 0 then\n        return 0\n    end\n    \n    if a < 0 and b < 0 then\n        a = -a\n        b = -b\n    elseif a < 0 then\n        a = -a\n        result = -result\n    elseif b < 0 then\n        b = -b\n        result = -result\n    end\n    \n    while b > 0 do\n        if b % 2 == 1 then\n            result = result + a\n        end\n        a = a * 2\n        b = math.floor(b / 2)\n    end\n    \n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5299"
        },
        {
            "id": "468",
            "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
            "draft_plan": "# Initialize the maximum product as 1\n# Initialize an empty list to store the increasing subsequence\n\n# Iterate through each number in the array\n    # Initialize a temporary list to store the current increasing subsequence\n    # Iterate through each number before the current number\n        # Check if the current number is greater than the previous number and if the product of the current number and the previous maximum product is greater than the current maximum product\n            # If the condition is satisfied, update the maximum product and the temporary list with the current increasing subsequence\n    # Append the current number to the temporary list\n\n# Return the maximum product and the increasing subsequence list",
            "requirements": "",
            "final_plan": "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)",
            "code": "function findMaxProduct(nums)\n    local maxProduct = 1\n    local subsequence = {}\n    \n    for i = 1, #nums do\n        local temp = {nums[i]}\n        \n        for j = 1, i-1 do\n            if nums[i] > nums[j] and nums[i] * maxProduct > maxProduct then\n                maxProduct = nums[i] * maxProduct\n                temp = table.copy(subsequence)\n            end\n        end\n        \n        table.insert(temp, nums[i])\n        subsequence = table.copy(temp)\n    end\n    \n    return maxProduct, subsequence\nend\n\n-- Helper function to copy a table\nfunction table.copy(t)\n    local copy = {}\n    for key, value in pairs(t) do\n        copy[key] = value\n    end\n    return copy\nend",
            "gen_tc": "",
            "sim_score": "0.5064"
        },
        {
            "id": "463",
            "prompt": "Write a function to find the maximum product subarray of the given array.",
            "draft_plan": "# Initialize variables to store the maximum product, current maximum product, current minimum product, and the result\n# Set the maximum product and current maximum product to the first element of the array\n# Iterate through each element in the array starting from the second element\n    # Update the current maximum product and current minimum product by considering the current element\n    # Check if the current element is negative\n        # If it is negative, swap the current maximum product and current minimum product\n    # Check if the current maximum product is greater than the maximum product\n        # If it is, update the maximum product\n    # Check if the current element is greater than the current maximum product\n        # If it is, update the current maximum product\n    # Check if the current element is less than the current minimum product\n        # If it is, update the current minimum product\n    # Check if the maximum product is greater than the result\n        # If it is, update the result\n\n# Return the result",
            "requirements": "",
            "final_plan": "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far",
            "code": "function maxProductSubarray(nums)\n    local maxProduct = nums[1]\n    local currMaxProduct = nums[1]\n    local currMinProduct = nums[1]\n    local result = nums[1]\n    \n    for i = 2, #nums do\n        local num = nums[i]\n        local tempMaxProduct = math.max(num, math.max(currMaxProduct * num, currMinProduct * num))\n        currMinProduct = math.min(num, math.min(currMaxProduct * num, currMinProduct * num))\n        currMaxProduct = tempMaxProduct\n        maxProduct = math.max(maxProduct, currMaxProduct)\n        result = math.max(result, maxProduct)\n    end\n    \n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4942"
        },
        {
            "id": "443",
            "prompt": "Write a python function to find the largest negative number from the given list.",
            "draft_plan": "# Initialize a variable 'largest_negative' to None\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If 'largest_negative' is None or the current number is greater than 'largest_negative', update 'largest_negative' to the current number\n\n# Return 'largest_negative'",
            "requirements": "",
            "final_plan": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
            "code": "function find_largest_negative(numbers)\n    local largest_negative = nil\n\n    for _, number in ipairs(numbers) do\n        if number < 0 then\n            if largest_negative == nil or number > largest_negative then\n                largest_negative = number\n            end\n        end\n    end\n\n    return largest_negative\nend",
            "gen_tc": "",
            "sim_score": "0.4901"
        }
    ],
    "HumanEval/129": [
        {
            "id": "408",
            "prompt": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.",
            "draft_plan": "# Create an empty list to store the pairs\n\n# Sort both arrays in ascending order\n\n# Iterate through each element in the first array\n    # Iterate through each element in the second array\n        # Add the pair (first_array[i], second_array[j]) to the list of pairs\n\n# Sort the list of pairs based on the sum of the elements in each pair\n\n# Return the first k pairs from the sorted list",
            "requirements": "",
            "final_plan": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs",
            "code": "function findSmallestPairs(first_array, second_array, k)\n    local pairs = {}\n\n    table.sort(first_array)\n    table.sort(second_array)\n\n    for i = 1, #first_array do\n        for j = 1, #second_array do\n            table.insert(pairs, {first_array[i], second_array[j]})\n        end\n    end\n\n    table.sort(pairs, function(a, b)\n        return a[1] + a[2] < b[1] + b[2]\n    end)\n\n    return pairs\nend",
            "gen_tc": "",
            "sim_score": "0.4660"
        },
        {
            "id": "457",
            "prompt": "Write a python function to find the sublist having minimum length.",
            "draft_plan": "# If the input list is empty, return an empty list\n\n# Initialize the minimum length variable to a large value and the minimum sublist to an empty list\n\n# Iterate through each sublist in the input list\n    # If the length of the current sublist is less than the minimum length\n        # Update the minimum length and the minimum sublist\n\n# Return the minimum sublist",
            "requirements": "",
            "final_plan": "def Find_Min(lst): \n    return min(lst, key=len) ",
            "code": "function find_min_sublist(input_list)\n    if #input_list == 0 then\n        return {}\n    end\n\n    local min_length = math.huge\n    local min_sublist = {}\n\n    for _, sublist in ipairs(input_list) do\n        if #sublist < min_length then\n            min_length = #sublist\n            min_sublist = sublist\n        end\n    end\n\n    return min_sublist\nend",
            "gen_tc": "",
            "sim_score": "0.4364"
        },
        {
            "id": "145",
            "prompt": "Write a python function to find the maximum difference between any two elements in a given array.",
            "draft_plan": "# If the array is empty, return None\n# Initialize the maximum difference to zero\n\n# Iterate through each element in the array\n    # Iterate through each element after the current element\n        # Calculate the difference between the current element and the subsequent element\n        # Update the maximum difference if the calculated difference is greater than the current maximum difference\n\n# Return the maximum difference",
            "requirements": "",
            "final_plan": "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ",
            "code": "function max_difference(arr)\n    if #arr == 0 then\n        return nil\n    end\n\n    local max_diff = 0\n\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            local diff = math.abs(arr[i] - arr[j])\n            if diff > max_diff then\n                max_diff = diff\n            end\n        end\n    end\n\n    return max_diff\nend",
            "gen_tc": "",
            "sim_score": "0.4345"
        },
        {
            "id": "63",
            "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.",
            "draft_plan": "# Initialize the maximum difference variable to 0\n\n# Iterate through each pair in the list\n    # Calculate the difference between the second element and the first element of the current pair\n    # Check if the current difference is greater than the maximum difference\n        # If it is, update the maximum difference\n\n# Return the maximum difference",
            "requirements": "",
            "final_plan": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ",
            "code": "function find_max_difference(tuple_list)\n    local max_difference = 0\n\n    for _, tuple in ipairs(tuple_list) do\n        local difference = tuple[2] - tuple[1]\n        if difference > max_difference then\n            max_difference = difference\n        end\n    end\n\n    return max_difference\nend",
            "gen_tc": "",
            "sim_score": "0.4159"
        },
        {
            "id": "410",
            "prompt": "Write a function to find the minimum value in a given heterogeneous list.",
            "draft_plan": "# Initialize the minimum value to the first element in the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the minimum value\n        # If it is, update the minimum value\n\n# Return the minimum value",
            "requirements": "",
            "final_plan": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val",
            "code": "function find_minimum_value(lst)\n    local min_value = lst[1]\n    \n    for i = 2, #lst do\n        if lst[i] < min_value then\n            min_value = lst[i]\n        end\n    end\n    \n    return min_value\nend",
            "gen_tc": "",
            "sim_score": "0.4119"
        },
        {
            "id": "404",
            "prompt": "Write a python function to find the minimum of two numbers.",
            "draft_plan": "# Define a function to find the minimum of two numbers\n    # Check if the first number is less than the second number\n        # If true, return the first number\n        # If false, return the second number\n\n# Call the function and pass two numbers as arguments",
            "requirements": "",
            "final_plan": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ",
            "code": "function find_minimum(a, b)\n    if a < b then\n        return a\n    else\n        return b\n    end\nend\n\n-- Example usage\nlocal num1 = 10\nlocal num2 = 5\nlocal min = find_minimum(num1, num2)\nprint(min)  -- Output: 5",
            "gen_tc": "",
            "sim_score": "0.4117"
        },
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.4108"
        },
        {
            "id": "409",
            "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.",
            "draft_plan": "# Initialize the minimum product to positive infinity\n\n# Iterate through each pair of tuples in the list\n    # Calculate the product of the two tuples\n    # Check if the product is less than the current minimum product\n        # If yes, update the minimum product\n\n# Return the minimum product",
            "requirements": "",
            "final_plan": "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min",
            "code": "function find_minimum_product(list)\n    local min_product = math.huge\n\n    for i = 1, #list-1 do\n        local tuple1 = list[i]\n        for j = i+1, #list do\n            local tuple2 = list[j]\n            local product = calculate_product(tuple1, tuple2)\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n\n    return min_product\nend\n\nfunction calculate_product(tuple1, tuple2)\n    local product = 1\n    for _, num in ipairs(tuple1) do\n        product = product * num\n    end\n    for _, num in ipairs(tuple2) do\n        product = product * num\n    end\n    return product\nend",
            "gen_tc": "",
            "sim_score": "0.4036"
        },
        {
            "id": "94",
            "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
            "draft_plan": "# Initialize the minimum second value as positive infinity\n# Initialize the first value of the tuple with minimum second value as None\n\n# Iterate through each tuple in the list\n    # Check if the second value of the current tuple is smaller than the current minimum second value\n        # If yes, update the minimum second value and the first value of the tuple\n\n# Return the first value of the tuple with the smallest second value",
            "requirements": "",
            "final_plan": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ",
            "code": "function get_first_smallest_value(test_list)\n    local min_second = math.huge\n    local first_value = nil\n    \n    for _, tup in ipairs(test_list) do\n        local second_value = tup[2]\n        \n        if second_value < min_second then\n            min_second = second_value\n            first_value = tup[1]\n        end\n    end\n    \n    return first_value\nend",
            "gen_tc": "",
            "sim_score": "0.3952"
        },
        {
            "id": "95",
            "prompt": "Write a python function to find the length of the smallest list in a list of lists.",
            "draft_plan": "# Initialize the minimum length to a large number\n\n# Iterate through each list in the input list\n    # Check the length of the current list\n        # If the length is smaller than the current minimum length, update the minimum length\n\n# Return the minimum length",
            "requirements": "",
            "final_plan": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength ",
            "code": "function find_smallest_list_length(list_of_lists)\n    local min_length = math.huge\n\n    for _, list in ipairs(list_of_lists) do\n        local length = #list\n        if length < min_length then\n            min_length = length\n        end\n    end\n\n    return min_length\nend",
            "gen_tc": "",
            "sim_score": "0.3935"
        }
    ],
    "HumanEval/130": [
        {
            "id": "59",
            "prompt": "Write a function to find the nth octagonal number.",
            "draft_plan": "# Function to find the nth octagonal number\ndef find_octagonal_number(n):\n    # Calculate the nth octagonal number using the formula\n    octagonal_number = 3 * n * (n - 1) + 1\n    \n    # Return the result\n    return octagonal_number\n\n# Test the function\nn = 5\nresult = find_octagonal_number(n)\nprint(f\"The {n}th octagonal number is: {result}\")",
            "requirements": "",
            "final_plan": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ",
            "code": "-- Function to find the nth octagonal number\nfunction find_octagonal_number(n)\n    -- Calculate the nth octagonal number using the formula\n    local octagonal_number = 3 * n * (n - 1) + 1\n    \n    -- Return the result\n    return octagonal_number\nend\n\n-- Test the function\nlocal n = 5\nlocal result = find_octagonal_number(n)\nprint(\"The \"..n..\"th octagonal number is: \"..result)",
            "gen_tc": "",
            "sim_score": "0.5885"
        },
        {
            "id": "420",
            "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of the cube of even numbers\n# Iterate through each even number from 2 to (2*n) with a step size of 2\n    # Calculate the cube of the current even number\n    # Add the cube to the sum\n\n# Return the sum of the cube of even numbers",
            "requirements": "",
            "final_plan": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
            "code": "function cube_sum_of_even(n)\n    local sum = 0\n    \n    for i = 2, 2 * n, 2 do\n        local cube = i * i * i\n        sum = sum + cube\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5791"
        },
        {
            "id": "84",
            "prompt": "Write a function to find the nth number in the newman conway sequence.",
            "draft_plan": "# Create a list to store the Newman-Conway sequence\n# Initialize the first two elements of the sequence\n# Iterate from index 3 up to the given number n\n    # Calculate the next element of the sequence using the previous elements\n# Return the nth element of the sequence",
            "requirements": "",
            "final_plan": "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))",
            "code": "function newmanConway(n)\n    if n <= 0 then\n        return nil\n    elseif n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        local sequence = {1, 1}\n        for i = 3, n do\n            sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n        end\n        return sequence[n]\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5563"
        },
        {
            "id": "80",
            "prompt": "Write a function to find the nth tetrahedral number.",
            "draft_plan": "# Initialize the tetrahedral number to 0\n\n# Iterate from 1 to n (inclusive)\n    # Add the current number to the tetrahedral number\n\n# Return the tetrahedral number",
            "requirements": "",
            "final_plan": "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6",
            "code": "function find_nth_tetrahedral(n)\n    local tetrahedral_number = 0\n\n    for i = 1, n do\n        tetrahedral_number = tetrahedral_number + (i * (i + 1) * (i + 2)) / 6\n    end\n\n    return tetrahedral_number\nend",
            "gen_tc": "",
            "sim_score": "0.5535"
        },
        {
            "id": "389",
            "prompt": "Write a function to find the n'th lucas number.",
            "draft_plan": "# Define a function to find the n-th Lucas number\ndef lucas_number(n):\n    # Base cases for n = 0 and n = 1\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Lucas numbers\n    lucas_0 = 2\n    lucas_1 = 1\n    \n    # Iterate from 2 to n\n    for i in range(2, n+1):\n        # Calculate the current Lucas number using the formula L(n) = L(n-1) + L(n-2)\n        lucas_n = lucas_0 + lucas_1\n        \n        # Update the values of previous Lucas numbers for the next iteration\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    \n    # Return the n-th Lucas number\n    return lucas_n",
            "requirements": "",
            "final_plan": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ",
            "code": "function lucas_number(n)\n    -- Base cases for n = 0 and n = 1\n    if n == 0 then\n        return 2\n    elseif n == 1 then\n        return 1\n    end\n    \n    -- Initialize the first two Lucas numbers\n    local lucas_0 = 2\n    local lucas_1 = 1\n    \n    -- Iterate from 2 to n\n    for i = 2, n do\n        -- Calculate the current Lucas number using the formula L(n) = L(n-1) + L(n-2)\n        local lucas_n = lucas_0 + lucas_1\n        \n        -- Update the values of previous Lucas numbers for the next iteration\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    end\n    \n    -- Return the n-th Lucas number\n    return lucas_n\nend",
            "gen_tc": "",
            "sim_score": "0.5300"
        },
        {
            "id": "135",
            "prompt": "Write a function to find the nth hexagonal number.",
            "draft_plan": "# Calculate the nth hexagonal number using the formula: n * (2 * n - 1)\n\n# Return the calculated nth hexagonal number",
            "requirements": "",
            "final_plan": "def hexagonal_num(n): \n\treturn n*(2*n - 1) ",
            "code": "function nthHexagonalNumber(n)\n    return n * (2 * n - 1)\nend",
            "gen_tc": "",
            "sim_score": "0.5098"
        },
        {
            "id": "422",
            "prompt": "Write a python function to find the average of cubes of first n natural numbers.",
            "draft_plan": "# Define a function to find the average of cubes of first n natural numbers\ndef average_of_cubes(n):\n    # Initialize sum of cubes to 0\n    sum_of_cubes = 0\n    \n    # Iterate through the range of 1 to n+1\n    for i in range(1, n+1):\n        # Calculate the cube of the current number and add it to the sum_of_cubes\n        sum_of_cubes += i**3\n    \n    # Calculate the average by dividing the sum_of_cubes by n\n    average = sum_of_cubes / n\n    \n    # Return the average\n    return average",
            "requirements": "",
            "final_plan": "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) ",
            "code": "function average_of_cubes(n)\n    local sum_of_cubes = 0\n    \n    for i = 1, n do\n        sum_of_cubes = sum_of_cubes + i^3\n    end\n    \n    local average = sum_of_cubes / n\n    \n    return average\nend",
            "gen_tc": "",
            "sim_score": "0.5094"
        },
        {
            "id": "86",
            "prompt": "Write a function to find nth centered hexagonal number.",
            "draft_plan": "# Initialize the centered hexagonal number formula: nth_centered_hexagonal = 3 * n * (n - 1) + 1\n\n# Define a function to calculate the nth centered hexagonal number\n    # Check if n is a positive integer, otherwise return None\n    # Calculate the nth centered hexagonal number using the formula\n    # Return the result\n\n# Call the function and provide the desired value of n to get the nth centered hexagonal number",
            "requirements": "",
            "final_plan": "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1",
            "code": "function find_nth_centered_hexagonal(n)\n    if type(n) ~= \"number\" or n <= 0 or n ~= math.floor(n) then\n        return nil\n    end\n\n    local nth_centered_hexagonal = 3 * n * (n - 1) + 1\n\n    return nth_centered_hexagonal\nend\n\n-- Example usage\nlocal n = 5\nlocal nth_centered_hexagonal = find_nth_centered_hexagonal(n)\nprint(\"The \" .. n .. \"th centered hexagonal number is: \" .. nth_centered_hexagonal)",
            "gen_tc": "",
            "sim_score": "0.5003"
        },
        {
            "id": "447",
            "prompt": "Write a function to find cubes of individual elements in a list.",
            "draft_plan": "# Create an empty list to store the cubes of individual elements\n# Iterate through each element in the input list\n    # Calculate the cube of the current element by raising it to the power of 3\n    # Append the cube to the result list\n\n# Return the result list containing the cubes of individual elements",
            "requirements": "",
            "final_plan": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums",
            "code": "function find_cubes(list)\n    local result = {}\n    for _, element in ipairs(list) do\n        local cube = element^3\n        table.insert(result, cube)\n    end\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4816"
        },
        {
            "id": "413",
            "prompt": "Write a function to extract the nth element from a given list of tuples.",
            "draft_plan": "# Initialize an empty list to store the nth element from each tuple\n\n# Iterate through each tuple in the given list\n    # Check if the tuple has at least n elements\n        # If yes, append the nth element to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result",
            "code": "function extract_nth_element(lst, n)\n    local result = {}\n\n    for i, tup in ipairs(lst) do\n        if #tup >= n then\n            table.insert(result, tup[n])\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4815"
        }
    ],
    "HumanEval/131": [
        {
            "id": "479",
            "prompt": "Write a python function to find the first digit of a given number.",
            "draft_plan": "# Convert the given number to a string\n\n# Iterate through each character in the string\n    # Check if the character is a digit\n        # If it is, return the character as the first digit\n\n# If no digit is found, return \"None\"",
            "requirements": "",
            "final_plan": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ",
            "code": "function firstDigit(number)\n    local numberStr = tostring(number)\n\n    for i = 1, string.len(numberStr) do\n        local char = string.sub(numberStr, i, i)\n        if string.match(char, \"%d\") then\n            return char\n        end\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.6456"
        },
        {
            "id": "453",
            "prompt": "Write a python function to find the sum of even factors of a number.",
            "draft_plan": "# Initialize the sum of even factors to 0\n\n# Iterate from 1 to the given number (inclusive)\n    # Check if the current number is a factor of the given number\n        # Check if the current number is even\n            # If the current number is even, add it to the sum of even factors\n\n# Return the sum of even factors",
            "requirements": "",
            "final_plan": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res",
            "code": "function sum_of_even_factors(number)\n    local sum = 0\n\n    for i = 1, number do\n        if number % i == 0 and i % 2 == 0 then\n            sum = sum + i\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6299"
        },
        {
            "id": "98",
            "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
            "draft_plan": "# Initialize the product variable to 1\n\n# Iterate through each number in the list\n    # Multiply the product by the current number\n\n# Divide the product by the length of the list\n\n# Return the result",
            "requirements": "",
            "final_plan": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ",
            "code": "function multiply_and_divide(numbers)\n    local product = 1\n\n    for _, num in ipairs(numbers) do\n        product = product * num\n    end\n\n    local result = product / #numbers\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.6064"
        },
        {
            "id": "77",
            "prompt": "Write a python function to find whether a number is divisible by 11.",
            "draft_plan": "To determine whether a number is divisible by 11, we can use the following logic:\n\n1. Convert the number to a string.\n2. Iterate through the digits of the number.\n3. Add the digits in odd positions (starting from the rightmost digit) and subtract the sum of the digits in even positions.\n4. If the result is divisible by 11, the original number is also divisible by 11.\n\nHere is the code implementing this logic:\n\n```python\ndef is_divisible_by_11(number):\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Iterate through the digits of the number\n    sum_odd = 0\n    sum_even = 0\n    for i in range(len(number_str)):\n        digit = int(number_str[i])\n        \n        # Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0:\n            sum_odd += digit\n        else:\n            sum_even += digit\n    \n    # Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0:\n        return True\n    else:\n        return False\n```\n\nYou can use this function to check if a number is divisible by 11. For example:\n\n```python\nprint(is_divisible_by_11(121))  # Output: True\nprint(is_divisible_by_11(123))  # Output: False\n```",
            "requirements": "",
            "final_plan": "def is_Diff(n): \n    return (n % 11 == 0) ",
            "code": "function is_divisible_by_11(number)\n    -- Convert the number to a string\n    local number_str = tostring(number)\n    \n    -- Iterate through the digits of the number\n    local sum_odd = 0\n    local sum_even = 0\n    for i = 1, string.len(number_str) do\n        local digit = tonumber(string.sub(number_str, i, i))\n        \n        -- Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0 then\n            sum_even = sum_even + digit\n        else\n            sum_odd = sum_odd + digit\n        end\n    end\n    \n    -- Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0 then\n        return true\n    else\n        return false\n    end\nend\n\nprint(is_divisible_by_11(121))  -- Output: true\nprint(is_divisible_by_11(123))  -- Output: false",
            "gen_tc": "",
            "sim_score": "0.6062"
        },
        {
            "id": "287",
            "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
            "draft_plan": "# Initialize the sum of squares variable to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Add the square of the current number to the sum of squares variable\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
            "code": "function sum_of_squares(n)\n    local sum = 0\n\n    for i = 1, n do\n        if i % 2 == 0 then\n            sum = sum + (i * i)\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5925"
        },
        {
            "id": "471",
            "prompt": "Write a python function to find the product of the array multiplication modulo n.",
            "draft_plan": "# Initialize the product to 1\n\n# Iterate through each element in the array\n    # Multiply the current element with the product\n    # Take the modulo of the product with n\n\n# Return the final product modulo n",
            "requirements": "",
            "final_plan": "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ",
            "code": "function arrayProductModuloN(arr, n)\n    local product = 1\n\n    for _, num in ipairs(arr) do\n        product = (product * num) % n\n    end\n\n    return product\nend",
            "gen_tc": "",
            "sim_score": "0.5902"
        },
        {
            "id": "435",
            "prompt": "Write a python function to find the last digit of a given number.",
            "draft_plan": "To find the last digit of a given number, you can use the modulo operator (`%`) to get the remainder when dividing the number by 10. The remainder will be the last digit of the number.\n\nHere's the code logic:\n\n1. Define a function `find_last_digit` that takes a number as input.\n2. Inside the function, calculate the remainder of the number when divided by 10 using the modulo operator: `last_digit = number % 10`.\n3. Return the value of `last_digit`.\n\nHere's the code implementation in Python:\n\n```python\ndef find_last_digit(number):\n    last_digit = number % 10\n    return last_digit\n```\n\nYou can then call this function by passing a number as an argument to get the last digit. For example:\n\n```python\nprint(find_last_digit(12345))  # Output: 5\nprint(find_last_digit(987654321))  # Output: 1\nprint(find_last_digit(0))  # Output: 0\n```",
            "requirements": "",
            "final_plan": "def last_Digit(n) :\n    return (n % 10) ",
            "code": "function find_last_digit(number)\n    local last_digit = number % 10\n    return last_digit\nend\n\nprint(find_last_digit(12345))  -- Output: 5\nprint(find_last_digit(987654321))  -- Output: 1\nprint(find_last_digit(0))  -- Output: 0",
            "gen_tc": "",
            "sim_score": "0.5900"
        },
        {
            "id": "267",
            "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of squares\n# Initialize a counter variable to keep track of the odd numbers\n# Initialize a variable to store the current odd number\n\n# Iterate from 1 to n (inclusive)\n    # Check if the current number is odd\n        # If it is, square the number and add it to the sum of squares\n        # Increase the counter variable by 1\n        # Check if the counter variable is equal to n\n            # If it is, break the loop\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
            "code": "function sum_of_squares(n)\n    local sum = 0\n    local counter = 0\n    local odd_number = 1\n\n    for i = 1, n do\n        if odd_number % 2 == 1 then\n            sum = sum + odd_number^2\n            counter = counter + 1\n        end\n\n        if counter == n then\n            break\n        end\n\n        odd_number = odd_number + 1\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5817"
        },
        {
            "id": "420",
            "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of the cube of even numbers\n# Iterate through each even number from 2 to (2*n) with a step size of 2\n    # Calculate the cube of the current even number\n    # Add the cube to the sum\n\n# Return the sum of the cube of even numbers",
            "requirements": "",
            "final_plan": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
            "code": "function cube_sum_of_even(n)\n    local sum = 0\n    \n    for i = 2, 2 * n, 2 do\n        local cube = i * i * i\n        sum = sum + cube\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5720"
        },
        {
            "id": "398",
            "prompt": "Write a function to compute the sum of digits of each number of a given list.",
            "draft_plan": "# Initialize an empty list to store the sum of digits for each number\n\n# Iterate through each number in the given list\n    # Convert the number to a string\n    # Initialize a variable to store the sum of digits\n    # Iterate through each digit in the string representation of the number\n        # Convert the digit back to an integer and add it to the sum of digits\n    # Append the sum of digits to the list\n\n# Return the list of sum of digits for each number",
            "requirements": "",
            "final_plan": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
            "code": "function compute_sum_of_digits(numbers)\n    local sum_of_digits = {}\n\n    for _, num in ipairs(numbers) do\n        local num_str = tostring(num)\n        local digits_sum = 0\n\n        for i = 1, string.len(num_str) do\n            digits_sum = digits_sum + tonumber(string.sub(num_str, i, i))\n        end\n\n        table.insert(sum_of_digits, digits_sum)\n    end\n\n    return sum_of_digits\nend",
            "gen_tc": "",
            "sim_score": "0.5632"
        }
    ],
    "HumanEval/132": [
        {
            "id": "297",
            "prompt": "Write a function to flatten a given nested list structure.",
            "draft_plan": "# Initialize an empty list to store the flattened elements\n\n# Iterate through each element in the given list\n    # If the element is a list, recursively flatten it and append each element to the flattened list\n    # If the element is not a list, append it directly to the flattened list\n\n# Return the flattened list",
            "requirements": "",
            "final_plan": "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list ",
            "code": "function flatten(nested_list)\n    local flattened = {}\n\n    for _, element in ipairs(nested_list) do\n        if type(element) == \"table\" then\n            local nested_flattened = flatten(element)\n            for _, nested_element in ipairs(nested_flattened) do\n                table.insert(flattened, nested_element)\n            end\n        else\n            table.insert(flattened, element)\n        end\n    end\n\n    return flattened\nend",
            "gen_tc": "",
            "sim_score": "0.4431"
        },
        {
            "id": "16",
            "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
            "draft_plan": "# Split the input string by the underscore character to get a list of substrings\n# Iterate through each substring in the list\n    # Check if the substring consists of lowercase letters only\n        # If not, return False\n\n# If all substrings are valid, return True",
            "requirements": "",
            "final_plan": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function contains_lowercase_sequences(str)\n    local substrings = split(str, \"_\")\n\n    for _, substr in ipairs(substrings) do\n        if not is_lowercase(substr) then\n            return false\n        end\n    end\n\n    return true\nend\n\nfunction split(str, delimiter)\n    local result = {}\n    local from = 1\n    local delim_from, delim_to = string.find(str, delimiter, from)\n\n    while delim_from do\n        table.insert(result, string.sub(str, from, delim_from - 1))\n        from = delim_to + 1\n        delim_from, delim_to = string.find(str, delimiter, from)\n    end\n\n    table.insert(result, string.sub(str, from))\n\n    return result\nend\n\nfunction is_lowercase(str)\n    return str:match(\"^[a-z]*$\") ~= nil\nend",
            "gen_tc": "",
            "sim_score": "0.4375"
        },
        {
            "id": "91",
            "prompt": "Write a function to check if a string is present as a substring in a given list of string values.",
            "draft_plan": "# Iterate through each string in the list\n    # Check if the given substring is present in the current string\n        # If found, return True\n\n# If the substring is not found in any string, return False",
            "requirements": "",
            "final_plan": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False",
            "code": "function isSubstringPresent(substring, stringList)\n    for _, str in ipairs(stringList) do\n        if string.find(str, substring) then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4266"
        },
        {
            "id": "111",
            "prompt": "Write a function to find the common elements in given nested lists.",
            "draft_plan": "# Initialize a set to store the common elements\n\n# Iterate through each sublist in the nested list\n    # If it's the first sublist, add all elements to the set\n    # For subsequent sublists, update the set with the intersection of the current set and the sublist\n    \n# Return the set containing the common elements",
            "requirements": "",
            "final_plan": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result",
            "code": "function find_common_elements(nested_list)\n    local common_elements = {}\n\n    for i, sublist in ipairs(nested_list) do\n        if i == 1 then\n            for _, element in ipairs(sublist) do\n                common_elements[element] = true\n            end\n        else\n            local current_set = {}\n\n            for _, element in ipairs(sublist) do\n                current_set[element] = true\n            end\n\n            for element, _ in pairs(common_elements) do\n                if not current_set[element] then\n                    common_elements[element] = nil\n                end\n            end\n        end\n    end\n\n    return common_elements\nend",
            "gen_tc": "",
            "sim_score": "0.4264"
        },
        {
            "id": "69",
            "prompt": "Write a function to check whether a list contains the given sublist or not.",
            "draft_plan": "# Iterate through each index in the main list\n    # Check if the current index and the sublist length is less than or equal to the main list length\n        # Check if the sublist matches the elements starting from the current index in the main list\n\n# If the sublist is found, return True\n# Otherwise, return False",
            "requirements": "",
            "final_plan": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set",
            "code": "function contains_sublist(main_list, sublist)\n    for i = 1, #main_list do\n        if (i + #sublist - 1) <= #main_list then\n            local match = true\n            for j = 1, #sublist do\n                if main_list[i + j - 1] ~= sublist[j] then\n                    match = false\n                    break\n                end\n            end\n            if match then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4221"
        },
        {
            "id": "285",
            "prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
            "draft_plan": "# Iterate through each character in the input string\n    # Check if the current character is 'a'\n        # If it is, check the next two characters (if they exist) to see if they are 'b'\n            # If they are, return True\n    # If the current character is not 'a', continue to the next character\n\n# If no 'a' followed by two or three 'b' characters is found, return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function contains_a_followed_by_b(string)\n    local len = string.len(string)\n    for i = 1, len - 3 do\n        if string.sub(string, i, i) == 'a' then\n            if string.sub(string, i+1, i+3) == 'bb' or string.sub(string, i+1, i+3) == 'bbb' then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4061"
        },
        {
            "id": "414",
            "prompt": "Write a python function to check whether any value in a sequence exists in a sequence or not.",
            "draft_plan": "# Iterate through each value in the first sequence\n    # Check if the value exists in the second sequence\n        # If the value exists, return True\n\n# If no matching value is found, return False",
            "requirements": "",
            "final_plan": "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False",
            "code": "function checkValueExistence(seq1, seq2)\n    for _, value1 in ipairs(seq1) do\n        for _, value2 in ipairs(seq2) do\n            if value1 == value2 then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.3936"
        },
        {
            "id": "461",
            "prompt": "Write a python function to count the upper case characters in a given string.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of uppercase characters\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter variable\n\n# Return the counter variable, which represents the number of uppercase characters in the string",
            "requirements": "",
            "final_plan": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
            "code": "function count_uppercase_chars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= 'A' and char <= 'Z' then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.3905"
        },
        {
            "id": "74",
            "prompt": "Write a function to check whether it follows the sequence given in the patterns array.",
            "draft_plan": "# Initialize a pointer to keep track of the current position in the patterns array\n\n# Iterate through each character in the input string\n    # Check if the current character matches the character at the pointer position in the patterns array\n        # If it matches, move the pointer to the next position in the patterns array\n        # If the pointer reaches the end of the patterns array, return True as the sequence is followed\n\n# If the loop completes without returning True, return False as the sequence is not followed",
            "requirements": "",
            "final_plan": "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True",
            "code": "function followsSequence(input, patterns)\n    local pointer = 1\n    \n    for i = 1, string.len(input) do\n        local currentChar = string.sub(input, i, i)\n        \n        if currentChar == string.sub(patterns[pointer], 1, 1) then\n            pointer = pointer + 1\n            \n            if pointer > #patterns then\n                return true\n            end\n        end\n    end\n    \n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.3796"
        },
        {
            "id": "434",
            "prompt": "Write a function that matches a string that has an a followed by one or more b's.",
            "draft_plan": "import re\n\ndef match_string(string):\n    pattern = r'a+b+'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n",
            "code": "function match_string(str)\n    local pattern = \"a+b+\"\n    if string.match(str, pattern) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.3733"
        }
    ],
    "HumanEval/133": [
        {
            "id": "287",
            "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
            "draft_plan": "# Initialize the sum of squares variable to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Add the square of the current number to the sum of squares variable\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
            "code": "function sum_of_squares(n)\n    local sum = 0\n\n    for i = 1, n do\n        if i % 2 == 0 then\n            sum = sum + (i * i)\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.7112"
        },
        {
            "id": "267",
            "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of squares\n# Initialize a counter variable to keep track of the odd numbers\n# Initialize a variable to store the current odd number\n\n# Iterate from 1 to n (inclusive)\n    # Check if the current number is odd\n        # If it is, square the number and add it to the sum of squares\n        # Increase the counter variable by 1\n        # Check if the counter variable is equal to n\n            # If it is, break the loop\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
            "code": "function sum_of_squares(n)\n    local sum = 0\n    local counter = 0\n    local odd_number = 1\n\n    for i = 1, n do\n        if odd_number % 2 == 1 then\n            sum = sum + odd_number^2\n            counter = counter + 1\n        end\n\n        if counter == n then\n            break\n        end\n\n        odd_number = odd_number + 1\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6957"
        },
        {
            "id": "419",
            "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
            "draft_plan": "# Initialize a variable to store the total sum\n# Iterate through each number in the list\n    # Round the number to the nearest integer\n    # Add the rounded number to the total sum\n\n# Calculate the total sum multiplied by the length of the list\n# Print the result",
            "requirements": "",
            "final_plan": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum",
            "code": "function round_and_multiply(numbers)\n    local total_sum = 0\n\n    for _, num in ipairs(numbers) do\n        total_sum = total_sum + math.round(num)\n    end\n\n    local result = total_sum * #numbers\n    print(result)\nend\n\nfunction math.round(num)\n    return math.floor(num + 0.5)\nend",
            "gen_tc": "",
            "sim_score": "0.6642"
        },
        {
            "id": "72",
            "prompt": "Write a python function to check whether the given number can be represented as the difference of two squares or not.",
            "draft_plan": "# Iterate through all numbers from 1 to sqrt(n)\n    # Calculate the square of the current number\n    # Check if the difference between n and the square is a perfect square\n\n# If a perfect square difference is found, return True\n# If no perfect square difference is found, return False",
            "requirements": "",
            "final_plan": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False",
            "code": "function can_be_difference_of_squares(n)\n    for i = 1, math.floor(math.sqrt(n)) do\n        local square = i * i\n        local difference = n - square\n        local square_root = math.sqrt(difference)\n        if square_root == math.floor(square_root) then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5895"
        },
        {
            "id": "244",
            "prompt": "Write a python function to find the next perfect square greater than a given number.",
            "draft_plan": "# Calculate the square root of the given number using math.sqrt() function\n\n# Increment the square root by 1\n\n# Calculate the next perfect square by squaring the incremented square root\n\n# Return the next perfect square",
            "requirements": "",
            "final_plan": "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN ",
            "code": "function nextPerfectSquare(n)\n    local sqrt = math.sqrt(n)\n    local nextRoot = math.floor(sqrt) + 1\n    local nextSquare = nextRoot * nextRoot\n    return nextSquare\nend",
            "gen_tc": "",
            "sim_score": "0.5621"
        },
        {
            "id": "170",
            "prompt": "Write a function to find the sum of numbers in a list within a range specified by two indices.",
            "draft_plan": "# Initialize a variable to store the sum\n\n# Iterate through each number in the list within the given range\n    # Add the current number to the sum\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   ",
            "code": "function sum_within_range(list, start_index, end_index)\n    local sum = 0\n\n    for i = start_index, end_index do\n        sum = sum + list[i]\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5490"
        },
        {
            "id": "65",
            "prompt": "Write a function to flatten a list and sum all of its elements.",
            "draft_plan": "# Initialize a variable to store the sum of all elements\n\n# Iterate through each element in the list\n    # Check if the current element is a list\n        # If it is a list, recursively call the flatten_and_sum function on the current element and add the result to the sum\n    # If it is not a list, add the current element to the sum\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total",
            "code": "function flatten_and_sum(lst)\n    local sum = 0\n\n    for _, element in ipairs(lst) do\n        if type(element) == \"table\" then\n            sum = sum + flatten_and_sum(element)\n        else\n            sum = sum + element\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5476"
        },
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.5247"
        },
        {
            "id": "133",
            "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
            "draft_plan": "# Initialize the sum of negative numbers to 0\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If it is negative, add it to the sum\n\n# Return the sum of negative numbers",
            "requirements": "",
            "final_plan": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)",
            "code": "function sum_of_negative_numbers(numbers)\n    local sum = 0\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            sum = sum + num\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5141"
        },
        {
            "id": "17",
            "prompt": "Write a function that returns the perimeter of a square given its side length as input.",
            "draft_plan": "# Define a function named \"square_perimeter\" that takes a parameter \"side_length\"\n    # Calculate the perimeter of the square by multiplying the side length by 4\n    # Return the perimeter\n\n# Call the function with a test value for the side length to verify the result",
            "requirements": "",
            "final_plan": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter",
            "code": "function square_perimeter(side_length)\n    local perimeter = side_length * 4\n    return perimeter\nend\n\n-- Test the function\nlocal side_length = 5\nlocal perimeter = square_perimeter(side_length)\nprint(perimeter)  -- Output: 20",
            "gen_tc": "",
            "sim_score": "0.5128"
        }
    ],
    "HumanEval/134": [
        {
            "id": "396",
            "prompt": "Write a function to check whether the given string starts and ends with the same character or not.",
            "draft_plan": "# Check if the first character of the string is equal to the last character\n    # If they are equal, return True\n    # If they are not equal, return False",
            "requirements": "",
            "final_plan": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ",
            "code": "function starts_ends_same(str)\n    local first_char = string.sub(str, 1, 1)\n    local last_char = string.sub(str, -1)\n    \n    if first_char == last_char then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.6076"
        },
        {
            "id": "11",
            "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
            "draft_plan": "# Find the index of the first occurrence of the given character in the string\n# Find the index of the last occurrence of the given character in the string\n\n# If both indices are valid\n    # Remove the first occurrence of the character from the string\n    # Decrement the index of the last occurrence by 1 to account for the removal\n    # Remove the last occurrence of the character from the string\n\n# Return the modified string",
            "requirements": "",
            "final_plan": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ",
            "code": "function removeFirstAndLastOccurrence(str, char)\n    local firstIndex = string.find(str, char)\n    local lastIndex = string.find(str:reverse(), char)\n\n    if firstIndex and lastIndex then\n        str = string.sub(str, 1, firstIndex - 1) .. string.sub(str, firstIndex + 1)\n        lastIndex = string.len(str) - lastIndex + 1\n        str = string.sub(str, 1, lastIndex - 1) .. string.sub(str, lastIndex + 1)\n    end\n\n    return str\nend",
            "gen_tc": "",
            "sim_score": "0.5879"
        },
        {
            "id": "285",
            "prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
            "draft_plan": "# Iterate through each character in the input string\n    # Check if the current character is 'a'\n        # If it is, check the next two characters (if they exist) to see if they are 'b'\n            # If they are, return True\n    # If the current character is not 'a', continue to the next character\n\n# If no 'a' followed by two or three 'b' characters is found, return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function contains_a_followed_by_b(string)\n    local len = string.len(string)\n    for i = 1, len - 3 do\n        if string.sub(string, i, i) == 'a' then\n            if string.sub(string, i+1, i+3) == 'bb' or string.sub(string, i+1, i+3) == 'bbb' then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5749"
        },
        {
            "id": "128",
            "prompt": "Write a function to find words that are longer than n characters from a given list of words.",
            "draft_plan": "# Create an empty list to store the result\n\n# Iterate through each word in the given list\n    # Check if the length of the current word is greater than n\n        # If the condition is satisfied, append the word to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t",
            "code": "function find_longer_words(word_list, n)\n    local result = {}\n\n    for _, word in ipairs(word_list) do\n        if string.len(word) > n then\n            table.insert(result, word)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5599"
        },
        {
            "id": "16",
            "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
            "draft_plan": "# Split the input string by the underscore character to get a list of substrings\n# Iterate through each substring in the list\n    # Check if the substring consists of lowercase letters only\n        # If not, return False\n\n# If all substrings are valid, return True",
            "requirements": "",
            "final_plan": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function contains_lowercase_sequences(str)\n    local substrings = split(str, \"_\")\n\n    for _, substr in ipairs(substrings) do\n        if not is_lowercase(substr) then\n            return false\n        end\n    end\n\n    return true\nend\n\nfunction split(str, delimiter)\n    local result = {}\n    local from = 1\n    local delim_from, delim_to = string.find(str, delimiter, from)\n\n    while delim_from do\n        table.insert(result, string.sub(str, from, delim_from - 1))\n        from = delim_to + 1\n        delim_from, delim_to = string.find(str, delimiter, from)\n    end\n\n    table.insert(result, string.sub(str, from))\n\n    return result\nend\n\nfunction is_lowercase(str)\n    return str:match(\"^[a-z]*$\") ~= nil\nend",
            "gen_tc": "",
            "sim_score": "0.5579"
        },
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.5564"
        },
        {
            "id": "90",
            "prompt": "Write a python function to find the length of the longest word.",
            "draft_plan": "# Split the input sentence into words using the split() function\n# Initialize a variable maxLength to 0\n\n# Iterate through each word in the list of words\n    # Check if the length of the current word is greater than maxLength\n        # If it is, update maxLength with the length of the current word\n\n# Return maxLength",
            "requirements": "",
            "final_plan": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max",
            "code": "function find_longest_word(sentence)\n    local words = split_sentence(sentence)\n    local max_length = 0\n\n    for _, word in ipairs(words) do\n        local length = string.len(word)\n        if length > max_length then\n            max_length = length\n        end\n    end\n\n    return max_length\nend\n\nfunction split_sentence(sentence)\n    local words = {}\n    for word in string.gmatch(sentence, \"%S+\") do\n        table.insert(words, word)\n    end\n    return words\nend",
            "gen_tc": "",
            "sim_score": "0.5513"
        },
        {
            "id": "131",
            "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
            "draft_plan": "# Create a list of vowels (including both lowercase and uppercase)\n# Convert the input string into a list of characters\n\n# Initialize two pointers: one at the start of the string and one at the end\n# Iterate while the pointers don't overlap\n    # Check if the character at the start pointer is a vowel\n        # If it is, then check if the character at the end pointer is also a vowel\n            # If it is, swap the characters at the start and end pointers\n            # Move the start pointer to the next character\n            # Move the end pointer to the previous character\n        # If the character at the end pointer is not a vowel, move the end pointer to the previous character\n    \n# Convert the modified list of characters back into a string and return it",
            "requirements": "",
            "final_plan": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string",
            "code": "function reverse_vowels(str)\n    local vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }\n    local chars = {}\n    for i = 1, string.len(str) do\n        table.insert(chars, string.sub(str, i, i))\n    end\n    \n    local start = 1\n    local finish = string.len(str)\n    \n    while start < finish do\n        if is_vowel(chars[start], vowels) then\n            while not is_vowel(chars[finish], vowels) and finish > start do\n                finish = finish - 1\n            end\n            if finish > start then\n                chars[start], chars[finish] = chars[finish], chars[start]\n                start = start + 1\n                finish = finish - 1\n            end\n        else\n            start = start + 1\n        end\n    end\n    \n    return table.concat(chars)\nend\n\nfunction is_vowel(char, vowels)\n    for _, vowel in ipairs(vowels) do\n        if char == vowel then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5438"
        },
        {
            "id": "395",
            "prompt": "Write a python function to find the first non-repeated character in a given string.",
            "draft_plan": "# Create an empty dictionary to store the count of each character\n# Iterate through each character in the given string\n    # If the character is already in the dictionary, increase its count by 1\n    # If the character is not in the dictionary, add it with a count of 1\n\n# Iterate through each character in the given string again\n    # Check if the count of the current character in the dictionary is 1\n        # If it is, return the current character as the first non-repeated character\n\n# If no non-repeated character is found, return \"None\"",
            "requirements": "",
            "final_plan": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None",
            "code": "function firstNonRepeatedChar(str)\n    local charCount = {}\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if charCount[char] then\n            charCount[char] = charCount[char] + 1\n        else\n            charCount[char] = 1\n        end\n    end\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if charCount[char] == 1 then\n            return char\n        end\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.5388"
        },
        {
            "id": "461",
            "prompt": "Write a python function to count the upper case characters in a given string.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of uppercase characters\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter variable\n\n# Return the counter variable, which represents the number of uppercase characters in the string",
            "requirements": "",
            "final_plan": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
            "code": "function count_uppercase_chars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= 'A' and char <= 'Z' then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5307"
        }
    ],
    "HumanEval/135": [
        {
            "id": "229",
            "prompt": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
            "draft_plan": "# Create two empty lists, one for negative elements and one for positive elements\n\n# Iterate through the first n elements of the array\n    # Check if the element is negative\n        # If it is, append it to the negative elements list\n    # Otherwise, append it to the positive elements list\n\n# Concatenate the negative elements list with the positive elements list\n# Return the resulting list",
            "requirements": "",
            "final_plan": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr",
            "code": "function rearrangeArray(arr, n)\n    local negativeElements = {}\n    local positiveElements = {}\n\n    for i = 1, n do\n        if arr[i] < 0 then\n            table.insert(negativeElements, arr[i])\n        else\n            table.insert(positiveElements, arr[i])\n        end\n    end\n\n    for i = 1, #positiveElements do\n        table.insert(negativeElements, positiveElements[i])\n    end\n\n    return negativeElements\nend",
            "gen_tc": "",
            "sim_score": "0.6625"
        },
        {
            "id": "141",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Implement a sorting algorithm such as bubble sort, insertion sort, merge sort, quick sort, etc.\n\n# Define a function to take a list of elements as input\n    # Iterate through the list to compare each element with its adjacent element(s)\n        # Swap elements if they are in the wrong order\n    # Repeat the above steps until the list is sorted\n\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums",
            "code": "-- Bubble Sort implementation\nfunction sort_list(list)\n    local n = #list\n    for i = 1, n-1 do\n        for j = 1, n-i do\n            if list[j] > list[j+1] then\n                list[j], list[j+1] = list[j+1], list[j]\n            end\n        end\n    end\n    return list\nend",
            "gen_tc": "",
            "sim_score": "0.5554"
        },
        {
            "id": "71",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Use the built-in sorted() function to sort the list in ascending order\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums",
            "code": "function sort_list(elements)\n    return sorted(elements)\nend",
            "gen_tc": "",
            "sim_score": "0.5528"
        },
        {
            "id": "428",
            "prompt": "Write a function to sort the given array by using shell sort.",
            "draft_plan": "# Define a function to perform shell sort on the given array\n    # Start with a large gap (length of array divided by 2)\n    # Iterate until the gap becomes 0\n        # Iterate through the array from the current gap to the end\n            # Compare the current element with the element at the position gap steps before it\n            # If the current element is smaller, swap them\n        # Reduce the gap by dividing it by 2\n\n# Call the shell sort function on the given array\n# Return the sorted array",
            "requirements": "",
            "final_plan": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list",
            "code": "function shellSort(arr)\n    local n = #arr\n    local gap = math.floor(n / 2)\n    \n    while gap > 0 do\n        for i = gap + 1, n do\n            local temp = arr[i]\n            local j = i\n            \n            while j > gap and arr[j - gap] > temp do\n                arr[j] = arr[j - gap]\n                j = j - gap\n            end\n            \n            arr[j] = temp\n        end\n        \n        gap = math.floor(gap / 2)\n    end\n    \n    return arr\nend\n\n-- Test the function\nlocal arr = {9, 5, 2, 7, 1, 3}\nlocal sortedArr = shellSort(arr)\nfor i = 1, #sortedArr do\n    print(sortedArr[i])\nend",
            "gen_tc": "",
            "sim_score": "0.5519"
        },
        {
            "id": "119",
            "prompt": "Write a python function to find the element that appears only once in a sorted array.",
            "draft_plan": "# Initialize a variable to keep track of the unique element\n# Iterate through the sorted array\n    # Check if the current element is equal to the next element and the previous element\n        # If not, assign the current element to the unique variable\n\n# Return the unique element",
            "requirements": "",
            "final_plan": "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)",
            "code": "function find_unique_element(arr)\n    local unique = nil\n\n    for i = 1, #arr do\n        if (i == 1 or arr[i] ~= arr[i-1]) and (i == #arr or arr[i] ~= arr[i+1]) then\n            unique = arr[i]\n            break\n        end\n    end\n\n    return unique\nend",
            "gen_tc": "",
            "sim_score": "0.5323"
        },
        {
            "id": "443",
            "prompt": "Write a python function to find the largest negative number from the given list.",
            "draft_plan": "# Initialize a variable 'largest_negative' to None\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If 'largest_negative' is None or the current number is greater than 'largest_negative', update 'largest_negative' to the current number\n\n# Return 'largest_negative'",
            "requirements": "",
            "final_plan": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
            "code": "function find_largest_negative(numbers)\n    local largest_negative = nil\n\n    for _, number in ipairs(numbers) do\n        if number < 0 then\n            if largest_negative == nil or number > largest_negative then\n                largest_negative = number\n            end\n        end\n    end\n\n    return largest_negative\nend",
            "gen_tc": "",
            "sim_score": "0.5307"
        },
        {
            "id": "280",
            "prompt": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
            "draft_plan": "# Initialize a variable to store the index position of the element, initialized to -1\n# Iterate through each element in the array along with its index\n    # Check if the current element is equal to the target element\n        # If they are equal, update the index variable with the current index and break out of the loop\n\n# Check if the index variable is still equal to -1\n    # If it is, set the boolean variable to False, indicating the element is not found\n    # If it is not, set the boolean variable to True, indicating the element is found\n\n# Return a tuple with the boolean variable and the index variable",
            "requirements": "",
            "final_plan": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos",
            "code": "function findElement(arr, element)\n    local index = -1\n\n    for i, value in ipairs(arr) do\n        if value == element then\n            index = i\n            break\n        end\n    end\n\n    local found = index ~= -1\n    return found, index\nend",
            "gen_tc": "",
            "sim_score": "0.5290"
        },
        {
            "id": "145",
            "prompt": "Write a python function to find the maximum difference between any two elements in a given array.",
            "draft_plan": "# If the array is empty, return None\n# Initialize the maximum difference to zero\n\n# Iterate through each element in the array\n    # Iterate through each element after the current element\n        # Calculate the difference between the current element and the subsequent element\n        # Update the maximum difference if the calculated difference is greater than the current maximum difference\n\n# Return the maximum difference",
            "requirements": "",
            "final_plan": "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ",
            "code": "function max_difference(arr)\n    if #arr == 0 then\n        return nil\n    end\n\n    local max_diff = 0\n\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            local diff = math.abs(arr[i] - arr[j])\n            if diff > max_diff then\n                max_diff = diff\n            end\n        end\n    end\n\n    return max_diff\nend",
            "gen_tc": "",
            "sim_score": "0.5127"
        },
        {
            "id": "476",
            "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.",
            "draft_plan": "# Sort the array in ascending order\n# Initialize variables for the smallest and largest values\n\n# Get the smallest value from the sorted array (first element)\n# Get the largest value from the sorted array (last element)\n\n# Calculate the sum of the smallest and largest values\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum",
            "code": "function sum_smallest_largest(arr)\n    table.sort(arr) -- Sort the array in ascending order\n    \n    local smallest = arr[1] -- Get the smallest value\n    local largest = arr[#arr] -- Get the largest value\n    \n    local sum = smallest + largest -- Calculate the sum\n    \n    return sum -- Return the sum\nend",
            "gen_tc": "",
            "sim_score": "0.4983"
        },
        {
            "id": "433",
            "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.",
            "draft_plan": "# Define a function that takes a number and an array as input\n    # Iterate through each element in the array\n        # Check if the number is greater than the current element\n            # If it is, return True\n    # If the number is not greater than any element in the array, return False",
            "requirements": "",
            "final_plan": "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]",
            "code": "function checkGreater(number, array)\n    for i, element in ipairs(array) do\n        if number > element then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4850"
        }
    ],
    "HumanEval/136": [
        {
            "id": "443",
            "prompt": "Write a python function to find the largest negative number from the given list.",
            "draft_plan": "# Initialize a variable 'largest_negative' to None\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If 'largest_negative' is None or the current number is greater than 'largest_negative', update 'largest_negative' to the current number\n\n# Return 'largest_negative'",
            "requirements": "",
            "final_plan": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
            "code": "function find_largest_negative(numbers)\n    local largest_negative = nil\n\n    for _, number in ipairs(numbers) do\n        if number < 0 then\n            if largest_negative == nil or number > largest_negative then\n                largest_negative = number\n            end\n        end\n    end\n\n    return largest_negative\nend",
            "gen_tc": "",
            "sim_score": "0.8334"
        },
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.6920"
        },
        {
            "id": "94",
            "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
            "draft_plan": "# Initialize the minimum second value as positive infinity\n# Initialize the first value of the tuple with minimum second value as None\n\n# Iterate through each tuple in the list\n    # Check if the second value of the current tuple is smaller than the current minimum second value\n        # If yes, update the minimum second value and the first value of the tuple\n\n# Return the first value of the tuple with the smallest second value",
            "requirements": "",
            "final_plan": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ",
            "code": "function get_first_smallest_value(test_list)\n    local min_second = math.huge\n    local first_value = nil\n    \n    for _, tup in ipairs(test_list) do\n        local second_value = tup[2]\n        \n        if second_value < min_second then\n            min_second = second_value\n            first_value = tup[1]\n        end\n    end\n    \n    return first_value\nend",
            "gen_tc": "",
            "sim_score": "0.6634"
        },
        {
            "id": "436",
            "prompt": "Write a python function to return the negative numbers in a list.",
            "draft_plan": "# Initialize an empty list to store the negative numbers\n\n# Iterate through each element in the input list\n    # Check if the current element is less than 0\n        # If the element is negative, append it to the list of negative numbers\n\n# Return the list of negative numbers",
            "requirements": "",
            "final_plan": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ",
            "code": "function getNegativeNumbers(numbers)\n    local negativeNumbers = {}\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            table.insert(negativeNumbers, num)\n        end\n    end\n\n    return negativeNumbers\nend",
            "gen_tc": "",
            "sim_score": "0.6593"
        },
        {
            "id": "309",
            "prompt": "Write a python function to find the maximum of two numbers.",
            "draft_plan": "# Define a function that takes two numbers as input\n\n# Check if the first number is greater than the second number\n    # If it is, return the first number as the maximum\n    # Otherwise, return the second number as the maximum",
            "requirements": "",
            "final_plan": "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b ",
            "code": "function find_maximum(num1, num2)\n    if num1 > num2 then\n        return num1\n    else\n        return num2\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.6216"
        },
        {
            "id": "57",
            "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.",
            "draft_plan": "# Sort the list of digits in descending order\n\n# Concatenate all the digits in the sorted list\n\n# Convert the concatenated string to an integer and return it",
            "requirements": "",
            "final_plan": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ",
            "code": "function largest_number(digits)\n    table.sort(digits, function(a, b) return a > b end)\n    return tonumber(table.concat(digits))\nend",
            "gen_tc": "",
            "sim_score": "0.6209"
        },
        {
            "id": "476",
            "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.",
            "draft_plan": "# Sort the array in ascending order\n# Initialize variables for the smallest and largest values\n\n# Get the smallest value from the sorted array (first element)\n# Get the largest value from the sorted array (last element)\n\n# Calculate the sum of the smallest and largest values\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum",
            "code": "function sum_smallest_largest(arr)\n    table.sort(arr) -- Sort the array in ascending order\n    \n    local smallest = arr[1] -- Get the smallest value\n    local largest = arr[#arr] -- Get the largest value\n    \n    local sum = smallest + largest -- Calculate the sum\n    \n    return sum -- Return the sum\nend",
            "gen_tc": "",
            "sim_score": "0.6190"
        },
        {
            "id": "58",
            "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
            "draft_plan": "# Check if the product of the two integers is negative\n    # If the product is negative, it means the two integers have opposite signs\n        # Return True\n\n# If the product is not negative, it means the two integers have the same sign\n    # Return False",
            "requirements": "",
            "final_plan": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ",
            "code": "function haveOppositeSigns(a, b)\n    if a * b < 0 then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5942"
        },
        {
            "id": "404",
            "prompt": "Write a python function to find the minimum of two numbers.",
            "draft_plan": "# Define a function to find the minimum of two numbers\n    # Check if the first number is less than the second number\n        # If true, return the first number\n        # If false, return the second number\n\n# Call the function and pass two numbers as arguments",
            "requirements": "",
            "final_plan": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ",
            "code": "function find_minimum(a, b)\n    if a < b then\n        return a\n    else\n        return b\n    end\nend\n\n-- Example usage\nlocal num1 = 10\nlocal num2 = 5\nlocal min = find_minimum(num1, num2)\nprint(min)  -- Output: 5",
            "gen_tc": "",
            "sim_score": "0.5942"
        },
        {
            "id": "409",
            "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.",
            "draft_plan": "# Initialize the minimum product to positive infinity\n\n# Iterate through each pair of tuples in the list\n    # Calculate the product of the two tuples\n    # Check if the product is less than the current minimum product\n        # If yes, update the minimum product\n\n# Return the minimum product",
            "requirements": "",
            "final_plan": "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min",
            "code": "function find_minimum_product(list)\n    local min_product = math.huge\n\n    for i = 1, #list-1 do\n        local tuple1 = list[i]\n        for j = i+1, #list do\n            local tuple2 = list[j]\n            local product = calculate_product(tuple1, tuple2)\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n\n    return min_product\nend\n\nfunction calculate_product(tuple1, tuple2)\n    local product = 1\n    for _, num in ipairs(tuple1) do\n        product = product * num\n    end\n    for _, num in ipairs(tuple2) do\n        product = product * num\n    end\n    return product\nend",
            "gen_tc": "",
            "sim_score": "0.5865"
        }
    ],
    "HumanEval/137": [
        {
            "id": "309",
            "prompt": "Write a python function to find the maximum of two numbers.",
            "draft_plan": "# Define a function that takes two numbers as input\n\n# Check if the first number is greater than the second number\n    # If it is, return the first number as the maximum\n    # Otherwise, return the second number as the maximum",
            "requirements": "",
            "final_plan": "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b ",
            "code": "function find_maximum(num1, num2)\n    if num1 > num2 then\n        return num1\n    else\n        return num2\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.6800"
        },
        {
            "id": "404",
            "prompt": "Write a python function to find the minimum of two numbers.",
            "draft_plan": "# Define a function to find the minimum of two numbers\n    # Check if the first number is less than the second number\n        # If true, return the first number\n        # If false, return the second number\n\n# Call the function and pass two numbers as arguments",
            "requirements": "",
            "final_plan": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ",
            "code": "function find_minimum(a, b)\n    if a < b then\n        return a\n    else\n        return b\n    end\nend\n\n-- Example usage\nlocal num1 = 10\nlocal num2 = 5\nlocal min = find_minimum(num1, num2)\nprint(min)  -- Output: 5",
            "gen_tc": "",
            "sim_score": "0.5898"
        },
        {
            "id": "145",
            "prompt": "Write a python function to find the maximum difference between any two elements in a given array.",
            "draft_plan": "# If the array is empty, return None\n# Initialize the maximum difference to zero\n\n# Iterate through each element in the array\n    # Iterate through each element after the current element\n        # Calculate the difference between the current element and the subsequent element\n        # Update the maximum difference if the calculated difference is greater than the current maximum difference\n\n# Return the maximum difference",
            "requirements": "",
            "final_plan": "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ",
            "code": "function max_difference(arr)\n    if #arr == 0 then\n        return nil\n    end\n\n    local max_diff = 0\n\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            local diff = math.abs(arr[i] - arr[j])\n            if diff > max_diff then\n                max_diff = diff\n            end\n        end\n    end\n\n    return max_diff\nend",
            "gen_tc": "",
            "sim_score": "0.5398"
        },
        {
            "id": "259",
            "prompt": "Write a function to maximize the given two tuples.",
            "draft_plan": "# Initialize a new tuple to store the maximum values\n\n# Iterate through each element in the tuples\n    # Compare the corresponding elements of both tuples\n    # Add the maximum value to the new tuple\n\n# Return the new tuple containing the maximum values",
            "requirements": "",
            "final_plan": "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
            "code": "function maximize_tuples(tuple1, tuple2)\n    local max_tuple = {}\n\n    for i = 1, #tuple1 do\n        max_tuple[i] = math.max(tuple1[i], tuple2[i])\n    end\n\n    return max_tuple\nend",
            "gen_tc": "",
            "sim_score": "0.5395"
        },
        {
            "id": "433",
            "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.",
            "draft_plan": "# Define a function that takes a number and an array as input\n    # Iterate through each element in the array\n        # Check if the number is greater than the current element\n            # If it is, return True\n    # If the number is not greater than any element in the array, return False",
            "requirements": "",
            "final_plan": "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]",
            "code": "function checkGreater(number, array)\n    for i, element in ipairs(array) do\n        if number > element then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5217"
        },
        {
            "id": "94",
            "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
            "draft_plan": "# Initialize the minimum second value as positive infinity\n# Initialize the first value of the tuple with minimum second value as None\n\n# Iterate through each tuple in the list\n    # Check if the second value of the current tuple is smaller than the current minimum second value\n        # If yes, update the minimum second value and the first value of the tuple\n\n# Return the first value of the tuple with the smallest second value",
            "requirements": "",
            "final_plan": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ",
            "code": "function get_first_smallest_value(test_list)\n    local min_second = math.huge\n    local first_value = nil\n    \n    for _, tup in ipairs(test_list) do\n        local second_value = tup[2]\n        \n        if second_value < min_second then\n            min_second = second_value\n            first_value = tup[1]\n        end\n    end\n    \n    return first_value\nend",
            "gen_tc": "",
            "sim_score": "0.5034"
        },
        {
            "id": "443",
            "prompt": "Write a python function to find the largest negative number from the given list.",
            "draft_plan": "# Initialize a variable 'largest_negative' to None\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If 'largest_negative' is None or the current number is greater than 'largest_negative', update 'largest_negative' to the current number\n\n# Return 'largest_negative'",
            "requirements": "",
            "final_plan": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
            "code": "function find_largest_negative(numbers)\n    local largest_negative = nil\n\n    for _, number in ipairs(numbers) do\n        if number < 0 then\n            if largest_negative == nil or number > largest_negative then\n                largest_negative = number\n            end\n        end\n    end\n\n    return largest_negative\nend",
            "gen_tc": "",
            "sim_score": "0.5030"
        },
        {
            "id": "57",
            "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.",
            "draft_plan": "# Sort the list of digits in descending order\n\n# Concatenate all the digits in the sorted list\n\n# Convert the concatenated string to an integer and return it",
            "requirements": "",
            "final_plan": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ",
            "code": "function largest_number(digits)\n    table.sort(digits, function(a, b) return a > b end)\n    return tonumber(table.concat(digits))\nend",
            "gen_tc": "",
            "sim_score": "0.4968"
        },
        {
            "id": "63",
            "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.",
            "draft_plan": "# Initialize the maximum difference variable to 0\n\n# Iterate through each pair in the list\n    # Calculate the difference between the second element and the first element of the current pair\n    # Check if the current difference is greater than the maximum difference\n        # If it is, update the maximum difference\n\n# Return the maximum difference",
            "requirements": "",
            "final_plan": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ",
            "code": "function find_max_difference(tuple_list)\n    local max_difference = 0\n\n    for _, tuple in ipairs(tuple_list) do\n        local difference = tuple[2] - tuple[1]\n        if difference > max_difference then\n            max_difference = difference\n        end\n    end\n\n    return max_difference\nend",
            "gen_tc": "",
            "sim_score": "0.4962"
        },
        {
            "id": "56",
            "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
            "draft_plan": "# Convert the given number to a string and reverse it\n# Convert the reversed string back to an integer\n# Check if the given number is equal to twice the reversed number plus 1\n# If the condition is true, return True. Otherwise, return False.",
            "requirements": "",
            "final_plan": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
            "code": "function is_one_less_twice_reverse(number)\n    local reverse = tonumber(string.reverse(tostring(number)))\n    if number == (2 * reverse + 1) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4910"
        }
    ],
    "HumanEval/138": [
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.7331"
        },
        {
            "id": "453",
            "prompt": "Write a python function to find the sum of even factors of a number.",
            "draft_plan": "# Initialize the sum of even factors to 0\n\n# Iterate from 1 to the given number (inclusive)\n    # Check if the current number is a factor of the given number\n        # Check if the current number is even\n            # If the current number is even, add it to the sum of even factors\n\n# Return the sum of even factors",
            "requirements": "",
            "final_plan": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res",
            "code": "function sum_of_even_factors(number)\n    local sum = 0\n\n    for i = 1, number do\n        if number % i == 0 and i % 2 == 0 then\n            sum = sum + i\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6942"
        },
        {
            "id": "274",
            "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
            "draft_plan": "# Import the math module\n\n# Define a function that takes in a positive integer n\n    # Initialize a variable `sum_even` to store the sum of even index binomial coefficients\n    # Iterate from 0 to n\n        # Calculate the binomial coefficient using the math module's comb function\n        # Check if the index is even\n            # If it is even, add the binomial coefficient to `sum_even`\n    # Return `sum_even`",
            "requirements": "",
            "final_plan": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ",
            "code": "import math\n\ndef sum_even_binomial_coefficients(n):\n    sum_even = 0\n    for i in range(n+1):\n        coefficient = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even += coefficient\n    return sum_even",
            "gen_tc": "",
            "sim_score": "0.6839"
        },
        {
            "id": "287",
            "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
            "draft_plan": "# Initialize the sum of squares variable to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Add the square of the current number to the sum of squares variable\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
            "code": "function sum_of_squares(n)\n    local sum = 0\n\n    for i = 1, n do\n        if i % 2 == 0 then\n            sum = sum + (i * i)\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6752"
        },
        {
            "id": "420",
            "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of the cube of even numbers\n# Iterate through each even number from 2 to (2*n) with a step size of 2\n    # Calculate the cube of the current even number\n    # Add the cube to the sum\n\n# Return the sum of the cube of even numbers",
            "requirements": "",
            "final_plan": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
            "code": "function cube_sum_of_even(n)\n    local sum = 0\n    \n    for i = 2, 2 * n, 2 do\n        local cube = i * i * i\n        sum = sum + cube\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6510"
        },
        {
            "id": "406",
            "prompt": "Write a python function to find whether the parity of a given number is odd.",
            "draft_plan": "# Check if the number modulo 2 is equal to 1\n    # If the modulo is 1, the number is odd\n    # Return True\n\n# If the modulo is not 1, the number is even\n# Return False",
            "requirements": "",
            "final_plan": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False",
            "code": "function is_odd_parity(number)\n    return number % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.6376"
        },
        {
            "id": "267",
            "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of squares\n# Initialize a counter variable to keep track of the odd numbers\n# Initialize a variable to store the current odd number\n\n# Iterate from 1 to n (inclusive)\n    # Check if the current number is odd\n        # If it is, square the number and add it to the sum of squares\n        # Increase the counter variable by 1\n        # Check if the counter variable is equal to n\n            # If it is, break the loop\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
            "code": "function sum_of_squares(n)\n    local sum = 0\n    local counter = 0\n    local odd_number = 1\n\n    for i = 1, n do\n        if odd_number % 2 == 1 then\n            sum = sum + odd_number^2\n            counter = counter + 1\n        end\n\n        if counter == n then\n            break\n        end\n\n        odd_number = odd_number + 1\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5988"
        },
        {
            "id": "138",
            "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
            "draft_plan": "# Initialize a variable 'n' with the given number\n\n# Iterate while 'n' is greater than 0\n    # Check if 'n' is divisible by 2\n        # If 'n' is divisible by 2, divide 'n' by 2\n        # Otherwise, subtract the largest power of 2 less than 'n' from 'n'\n\n# If 'n' becomes 0, return True\n# Otherwise, return False",
            "requirements": "",
            "final_plan": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True",
            "code": "function canRepresentAsPowerOf2(n)\n    while n > 0 do\n        if n % 2 == 0 then\n            n = n / 2\n        else\n            n = n - math.pow(2, math.floor(math.log(n, 2)))\n        end\n    end\n    \n    return n == 0\nend",
            "gen_tc": "",
            "sim_score": "0.5927"
        },
        {
            "id": "271",
            "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
            "draft_plan": "# Initialize a variable `sum` to 0\n# Initialize a counter variable `count` to 0\n\n# Iterate through numbers starting from 1 until `count` reaches `n`\n    # Check if the current number is even\n        # Increment the `count` variable\n        # Add the current number raised to the fifth power to the `sum` variable\n\n# Return the `sum` variable",
            "requirements": "",
            "final_plan": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ",
            "code": "function sum_of_even_powers(n)\n    local sum = 0\n    local count = 0\n\n    for i = 1, math.huge do\n        if i % 2 == 0 then\n            count = count + 1\n            sum = sum + math.pow(i, 5)\n        end\n\n        if count == n then\n            break\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5917"
        },
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.5911"
        }
    ],
    "HumanEval/139": [
        {
            "id": "80",
            "prompt": "Write a function to find the nth tetrahedral number.",
            "draft_plan": "# Initialize the tetrahedral number to 0\n\n# Iterate from 1 to n (inclusive)\n    # Add the current number to the tetrahedral number\n\n# Return the tetrahedral number",
            "requirements": "",
            "final_plan": "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6",
            "code": "function find_nth_tetrahedral(n)\n    local tetrahedral_number = 0\n\n    for i = 1, n do\n        tetrahedral_number = tetrahedral_number + (i * (i + 1) * (i + 2)) / 6\n    end\n\n    return tetrahedral_number\nend",
            "gen_tc": "",
            "sim_score": "0.4822"
        },
        {
            "id": "453",
            "prompt": "Write a python function to find the sum of even factors of a number.",
            "draft_plan": "# Initialize the sum of even factors to 0\n\n# Iterate from 1 to the given number (inclusive)\n    # Check if the current number is a factor of the given number\n        # Check if the current number is even\n            # If the current number is even, add it to the sum of even factors\n\n# Return the sum of even factors",
            "requirements": "",
            "final_plan": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res",
            "code": "function sum_of_even_factors(number)\n    local sum = 0\n\n    for i = 1, number do\n        if number % i == 0 and i % 2 == 0 then\n            sum = sum + i\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4778"
        },
        {
            "id": "389",
            "prompt": "Write a function to find the n'th lucas number.",
            "draft_plan": "# Define a function to find the n-th Lucas number\ndef lucas_number(n):\n    # Base cases for n = 0 and n = 1\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Lucas numbers\n    lucas_0 = 2\n    lucas_1 = 1\n    \n    # Iterate from 2 to n\n    for i in range(2, n+1):\n        # Calculate the current Lucas number using the formula L(n) = L(n-1) + L(n-2)\n        lucas_n = lucas_0 + lucas_1\n        \n        # Update the values of previous Lucas numbers for the next iteration\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    \n    # Return the n-th Lucas number\n    return lucas_n",
            "requirements": "",
            "final_plan": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ",
            "code": "function lucas_number(n)\n    -- Base cases for n = 0 and n = 1\n    if n == 0 then\n        return 2\n    elseif n == 1 then\n        return 1\n    end\n    \n    -- Initialize the first two Lucas numbers\n    local lucas_0 = 2\n    local lucas_1 = 1\n    \n    -- Iterate from 2 to n\n    for i = 2, n do\n        -- Calculate the current Lucas number using the formula L(n) = L(n-1) + L(n-2)\n        local lucas_n = lucas_0 + lucas_1\n        \n        -- Update the values of previous Lucas numbers for the next iteration\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    end\n    \n    -- Return the n-th Lucas number\n    return lucas_n\nend",
            "gen_tc": "",
            "sim_score": "0.4741"
        },
        {
            "id": "59",
            "prompt": "Write a function to find the nth octagonal number.",
            "draft_plan": "# Function to find the nth octagonal number\ndef find_octagonal_number(n):\n    # Calculate the nth octagonal number using the formula\n    octagonal_number = 3 * n * (n - 1) + 1\n    \n    # Return the result\n    return octagonal_number\n\n# Test the function\nn = 5\nresult = find_octagonal_number(n)\nprint(f\"The {n}th octagonal number is: {result}\")",
            "requirements": "",
            "final_plan": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ",
            "code": "-- Function to find the nth octagonal number\nfunction find_octagonal_number(n)\n    -- Calculate the nth octagonal number using the formula\n    local octagonal_number = 3 * n * (n - 1) + 1\n    \n    -- Return the result\n    return octagonal_number\nend\n\n-- Test the function\nlocal n = 5\nlocal result = find_octagonal_number(n)\nprint(\"The \"..n..\"th octagonal number is: \"..result)",
            "gen_tc": "",
            "sim_score": "0.4716"
        },
        {
            "id": "67",
            "prompt": "Write a function to find the number of ways to partition a set of Bell numbers.",
            "draft_plan": "# Import the math module to use the factorial function\nimport math\n\n# Define a function to calculate the Bell numbers\ndef calculate_bell_number(n):\n    # Create a 2D array to store the Bell numbers\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n\n    # Initialize the first Bell number as 1\n    bell[0][0] = 1\n\n    # Calculate the Bell numbers using dynamic programming\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    # Return the last Bell number\n    return bell[n][0]\n\n# Define a function to calculate the number of ways to partition a set of Bell numbers\ndef calculate_partition_ways(n):\n    # Calculate the Bell number for n\n    bell_number = calculate_bell_number(n)\n\n    # Calculate the number of ways to partition the set\n    partition_ways = math.factorial(n) * bell_number\n\n    # Return the number of ways to partition the set\n    return partition_ways",
            "requirements": "",
            "final_plan": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] ",
            "code": "-- Define a helper function to calculate the Bell numbers\nfunction calculate_bell_number(n)\n    -- Create a 2D array to store the Bell numbers\n    local bell = {}\n    for i = 0, n do\n        bell[i] = {}\n        for j = 0, n do\n            bell[i][j] = 0\n        end\n    end\n\n    -- Initialize the first Bell number as 1\n    bell[0][0] = 1\n\n    -- Calculate the Bell numbers using dynamic programming\n    for i = 1, n do\n        bell[i][0] = bell[i-1][i-1]\n        for j = 1, i do\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        end\n    end\n\n    -- Return the last Bell number\n    return bell[n][0]\nend\n\n-- Define a function to calculate the number of ways to partition a set of Bell numbers\nfunction calculate_partition_ways(n)\n    -- Calculate the Bell number for n\n    local bell_number = calculate_bell_number(n)\n\n    -- Calculate the number of ways to partition the set\n    local partition_ways = math.factorial(n) * bell_number\n\n    -- Return the number of ways to partition the set\n    return partition_ways\nend",
            "gen_tc": "",
            "sim_score": "0.4650"
        },
        {
            "id": "135",
            "prompt": "Write a function to find the nth hexagonal number.",
            "draft_plan": "# Calculate the nth hexagonal number using the formula: n * (2 * n - 1)\n\n# Return the calculated nth hexagonal number",
            "requirements": "",
            "final_plan": "def hexagonal_num(n): \n\treturn n*(2*n - 1) ",
            "code": "function nthHexagonalNumber(n)\n    return n * (2 * n - 1)\nend",
            "gen_tc": "",
            "sim_score": "0.4629"
        },
        {
            "id": "103",
            "prompt": "Write a function to find the Eulerian number a(n, m).",
            "draft_plan": "To find the Eulerian number a(n, m), you can use the following code logic:\n\n1. Define a function called eulerian_number with two parameters n and m.\n2. Create a nested list called dp with n+1 rows and m+1 columns, and initialize all values to 0.\n3. Iterate through each row i from 0 to n and each column j from 0 to m.\n4. Inside the loop, check if i is equal to 0 or j is equal to 0. If true, set dp[i][j] to 1.\n5. Otherwise, set dp[i][j] to (j+1) * dp[i-1][j] + (i-j) * dp[i-1][j-1].\n6. Finally, return dp[n][m].\n\nHere is the code implementation of the above logic:\n\n```python\ndef eulerian_number(n, m):\n    dp = [[0] * (m+1) for _ in range(n+1)]\n\n    for i in range(n+1):\n        for j in range(m+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = (j+1) * dp[i-1][j] + (i-j) * dp[i-1][j-1]\n    \n    return dp[n][m]\n```\n\nYou can call the function eulerian_number(n, m) and pass the values of n and m to find the corresponding Eulerian number a(n, m).",
            "requirements": "",
            "final_plan": "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",
            "code": "function eulerian_number(n, m)\n    local dp = {}\n    for i = 0, n do\n        dp[i] = {}\n        for j = 0, m do\n            dp[i][j] = 0\n        end\n    end\n\n    for i = 0, n do\n        for j = 0, m do\n            if i == 0 or j == 0 then\n                dp[i][j] = 1\n            else\n                dp[i][j] = (j + 1) * dp[i - 1][j] + (i - j) * dp[i - 1][j - 1]\n            end\n        end\n    end\n\n    return dp[n][m]\nend",
            "gen_tc": "",
            "sim_score": "0.4585"
        },
        {
            "id": "271",
            "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
            "draft_plan": "# Initialize a variable `sum` to 0\n# Initialize a counter variable `count` to 0\n\n# Iterate through numbers starting from 1 until `count` reaches `n`\n    # Check if the current number is even\n        # Increment the `count` variable\n        # Add the current number raised to the fifth power to the `sum` variable\n\n# Return the `sum` variable",
            "requirements": "",
            "final_plan": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ",
            "code": "function sum_of_even_powers(n)\n    local sum = 0\n    local count = 0\n\n    for i = 1, math.huge do\n        if i % 2 == 0 then\n            count = count + 1\n            sum = sum + math.pow(i, 5)\n        end\n\n        if count == n then\n            break\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4528"
        },
        {
            "id": "267",
            "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of squares\n# Initialize a counter variable to keep track of the odd numbers\n# Initialize a variable to store the current odd number\n\n# Iterate from 1 to n (inclusive)\n    # Check if the current number is odd\n        # If it is, square the number and add it to the sum of squares\n        # Increase the counter variable by 1\n        # Check if the counter variable is equal to n\n            # If it is, break the loop\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
            "code": "function sum_of_squares(n)\n    local sum = 0\n    local counter = 0\n    local odd_number = 1\n\n    for i = 1, n do\n        if odd_number % 2 == 1 then\n            sum = sum + odd_number^2\n            counter = counter + 1\n        end\n\n        if counter == n then\n            break\n        end\n\n        odd_number = odd_number + 1\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4518"
        },
        {
            "id": "98",
            "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
            "draft_plan": "# Initialize the product variable to 1\n\n# Iterate through each number in the list\n    # Multiply the product by the current number\n\n# Divide the product by the length of the list\n\n# Return the result",
            "requirements": "",
            "final_plan": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ",
            "code": "function multiply_and_divide(numbers)\n    local product = 1\n\n    for _, num in ipairs(numbers) do\n        product = product * num\n    end\n\n    local result = product / #numbers\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4517"
        }
    ],
    "HumanEval/140": [
        {
            "id": "230",
            "prompt": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
            "draft_plan": "# Define a function that takes in a string and a character as arguments\n    # Convert the string into a list of characters\n    # Iterate through each character in the list\n        # Check if the character is a blank space\n            # If it is, replace it with the given character\n    # Join the list of characters back into a string\n    # Return the modified string\n\n# Example usage:\n# string = \"Hello World\"\n# character = \"-\"\n# modified_string = replace_spaces(string, character)\n# print(modified_string) --> \"Hello-World\"",
            "requirements": "",
            "final_plan": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2",
            "code": "function replace_spaces(str, char)\n    local chars = {}\n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        if c == \" \" then\n            c = char\n        end\n        table.insert(chars, c)\n    end\n    return table.concat(chars)\nend\n\nlocal string = \"Hello World\"\nlocal character = \"-\"\nlocal modified_string = replace_spaces(string, character)\nprint(modified_string) --> \"Hello-World\"",
            "gen_tc": "",
            "sim_score": "0.7600"
        },
        {
            "id": "451",
            "prompt": "Write a function to remove all whitespaces from the given string.",
            "draft_plan": "# Initialize an empty string to store the modified string\n\n# Iterate through each character in the input string\n    # Check if the current character is a whitespace\n        # If it is not a whitespace, append it to the modified string\n\n# Return the modified string without whitespaces",
            "requirements": "",
            "final_plan": "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))",
            "code": "function remove_whitespaces(str)\n    local modified_str = \"\"\n\n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        if c ~= \" \" then\n            modified_str = modified_str .. c\n        end\n    end\n\n    return modified_str\nend",
            "gen_tc": "",
            "sim_score": "0.6421"
        },
        {
            "id": "474",
            "prompt": "Write a function to replace characters in a string.",
            "draft_plan": "# Initialize an empty string to store the modified string\n\n# Iterate through each character in the input string\n    # Check if the character needs to be replaced\n        # If replacement is required, append the replacement character to the modified string\n        # Otherwise, append the original character to the modified string\n\n# Return the modified string",
            "requirements": "",
            "final_plan": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2",
            "code": "function replaceCharacters(str, replacements)\n    local modified = \"\"\n    \n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        \n        if replacements[c] then\n            modified = modified .. replacements[c]\n        else\n            modified = modified .. c\n        end\n    end\n    \n    return modified\nend",
            "gen_tc": "",
            "sim_score": "0.5471"
        },
        {
            "id": "118",
            "prompt": "Write a function to convert a string to a list of strings split on the space character.",
            "draft_plan": "# Initialize an empty list to store the split strings\n\n# Split the input string on the space character and store the result in a variable\n\n# Iterate through each element in the split result\n    # Append the element to the list\n\n# Return the list of split strings",
            "requirements": "",
            "final_plan": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst",
            "code": "function split_string(str)\n    local split_result = {}\n    for word in string.gmatch(str, \"%S+\") do\n        table.insert(split_result, word)\n    end\n    return split_result\nend",
            "gen_tc": "",
            "sim_score": "0.5229"
        },
        {
            "id": "16",
            "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
            "draft_plan": "# Split the input string by the underscore character to get a list of substrings\n# Iterate through each substring in the list\n    # Check if the substring consists of lowercase letters only\n        # If not, return False\n\n# If all substrings are valid, return True",
            "requirements": "",
            "final_plan": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function contains_lowercase_sequences(str)\n    local substrings = split(str, \"_\")\n\n    for _, substr in ipairs(substrings) do\n        if not is_lowercase(substr) then\n            return false\n        end\n    end\n\n    return true\nend\n\nfunction split(str, delimiter)\n    local result = {}\n    local from = 1\n    local delim_from, delim_to = string.find(str, delimiter, from)\n\n    while delim_from do\n        table.insert(result, string.sub(str, from, delim_from - 1))\n        from = delim_to + 1\n        delim_from, delim_to = string.find(str, delimiter, from)\n    end\n\n    table.insert(result, string.sub(str, from))\n\n    return result\nend\n\nfunction is_lowercase(str)\n    return str:match(\"^[a-z]*$\") ~= nil\nend",
            "gen_tc": "",
            "sim_score": "0.4998"
        },
        {
            "id": "11",
            "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
            "draft_plan": "# Find the index of the first occurrence of the given character in the string\n# Find the index of the last occurrence of the given character in the string\n\n# If both indices are valid\n    # Remove the first occurrence of the character from the string\n    # Decrement the index of the last occurrence by 1 to account for the removal\n    # Remove the last occurrence of the character from the string\n\n# Return the modified string",
            "requirements": "",
            "final_plan": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ",
            "code": "function removeFirstAndLastOccurrence(str, char)\n    local firstIndex = string.find(str, char)\n    local lastIndex = string.find(str:reverse(), char)\n\n    if firstIndex and lastIndex then\n        str = string.sub(str, 1, firstIndex - 1) .. string.sub(str, firstIndex + 1)\n        lastIndex = string.len(str) - lastIndex + 1\n        str = string.sub(str, 1, lastIndex - 1) .. string.sub(str, lastIndex + 1)\n    end\n\n    return str\nend",
            "gen_tc": "",
            "sim_score": "0.4940"
        },
        {
            "id": "437",
            "prompt": "Write a function to remove odd characters in a string.",
            "draft_plan": "# Initialize an empty string to store the result\n\n# Iterate through each character in the input string\n    # Check if the index of the current character is even\n        # If the index is even, append the character to the result string\n\n# Return the result string",
            "requirements": "",
            "final_plan": "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2",
            "code": "function removeOddCharacters(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        if i % 2 == 0 then\n            result = result .. string.sub(str, i, i)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4664"
        },
        {
            "id": "226",
            "prompt": "Write a python function to remove the characters which have odd index values of a given string.",
            "draft_plan": "# Initialize an empty string to store the result\n\n# Iterate through each character and its index in the input string\n    # Check if the index of the current character is even\n        # If it is even, append the character to the result string\n\n# Return the result string",
            "requirements": "",
            "final_plan": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result",
            "code": "function remove_odd_index_chars(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        if i % 2 == 0 then\n            result = result .. string.sub(str, i, i)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4535"
        },
        {
            "id": "310",
            "prompt": "Write a function to convert a given string to a tuple of characters.",
            "draft_plan": "# Initialize an empty tuple\n\n# Iterate through each character in the input string\n    # Append the character to the tuple\n\n# Return the tuple",
            "requirements": "",
            "final_plan": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result",
            "code": "function string_to_tuple(string)\n    local tuple = {}\n    \n    for i = 1, string.len(string) do\n        local char = string.sub(string, i, i)\n        table.insert(tuple, char)\n    end\n    \n    return tuple\nend",
            "gen_tc": "",
            "sim_score": "0.4410"
        },
        {
            "id": "478",
            "prompt": "Write a function to remove lowercase substrings from a given string.",
            "draft_plan": "# Initialize an empty string to store the final result\n\n# Iterate through each character in the given string\n    # Check if the character is uppercase\n        # If the character is uppercase, append it to the final result string\n\n# Return the final result string",
            "requirements": "",
            "final_plan": "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)",
            "code": "function removeLowercaseSubstrings(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        if string.upper(c) == c then\n            result = result .. c\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4406"
        }
    ],
    "HumanEval/141": [
        {
            "id": "16",
            "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
            "draft_plan": "# Split the input string by the underscore character to get a list of substrings\n# Iterate through each substring in the list\n    # Check if the substring consists of lowercase letters only\n        # If not, return False\n\n# If all substrings are valid, return True",
            "requirements": "",
            "final_plan": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function contains_lowercase_sequences(str)\n    local substrings = split(str, \"_\")\n\n    for _, substr in ipairs(substrings) do\n        if not is_lowercase(substr) then\n            return false\n        end\n    end\n\n    return true\nend\n\nfunction split(str, delimiter)\n    local result = {}\n    local from = 1\n    local delim_from, delim_to = string.find(str, delimiter, from)\n\n    while delim_from do\n        table.insert(result, string.sub(str, from, delim_from - 1))\n        from = delim_to + 1\n        delim_from, delim_to = string.find(str, delimiter, from)\n    end\n\n    table.insert(result, string.sub(str, from))\n\n    return result\nend\n\nfunction is_lowercase(str)\n    return str:match(\"^[a-z]*$\") ~= nil\nend",
            "gen_tc": "",
            "sim_score": "0.4419"
        },
        {
            "id": "479",
            "prompt": "Write a python function to find the first digit of a given number.",
            "draft_plan": "# Convert the given number to a string\n\n# Iterate through each character in the string\n    # Check if the character is a digit\n        # If it is, return the character as the first digit\n\n# If no digit is found, return \"None\"",
            "requirements": "",
            "final_plan": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ",
            "code": "function firstDigit(number)\n    local numberStr = tostring(number)\n\n    for i = 1, string.len(numberStr) do\n        local char = string.sub(numberStr, i, i)\n        if string.match(char, \"%d\") then\n            return char\n        end\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.4407"
        },
        {
            "id": "77",
            "prompt": "Write a python function to find whether a number is divisible by 11.",
            "draft_plan": "To determine whether a number is divisible by 11, we can use the following logic:\n\n1. Convert the number to a string.\n2. Iterate through the digits of the number.\n3. Add the digits in odd positions (starting from the rightmost digit) and subtract the sum of the digits in even positions.\n4. If the result is divisible by 11, the original number is also divisible by 11.\n\nHere is the code implementing this logic:\n\n```python\ndef is_divisible_by_11(number):\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Iterate through the digits of the number\n    sum_odd = 0\n    sum_even = 0\n    for i in range(len(number_str)):\n        digit = int(number_str[i])\n        \n        # Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0:\n            sum_odd += digit\n        else:\n            sum_even += digit\n    \n    # Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0:\n        return True\n    else:\n        return False\n```\n\nYou can use this function to check if a number is divisible by 11. For example:\n\n```python\nprint(is_divisible_by_11(121))  # Output: True\nprint(is_divisible_by_11(123))  # Output: False\n```",
            "requirements": "",
            "final_plan": "def is_Diff(n): \n    return (n % 11 == 0) ",
            "code": "function is_divisible_by_11(number)\n    -- Convert the number to a string\n    local number_str = tostring(number)\n    \n    -- Iterate through the digits of the number\n    local sum_odd = 0\n    local sum_even = 0\n    for i = 1, string.len(number_str) do\n        local digit = tonumber(string.sub(number_str, i, i))\n        \n        -- Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0 then\n            sum_even = sum_even + digit\n        else\n            sum_odd = sum_odd + digit\n        end\n    end\n    \n    -- Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0 then\n        return true\n    else\n        return false\n    end\nend\n\nprint(is_divisible_by_11(121))  -- Output: true\nprint(is_divisible_by_11(123))  -- Output: false",
            "gen_tc": "",
            "sim_score": "0.4344"
        },
        {
            "id": "396",
            "prompt": "Write a function to check whether the given string starts and ends with the same character or not.",
            "draft_plan": "# Check if the first character of the string is equal to the last character\n    # If they are equal, return True\n    # If they are not equal, return False",
            "requirements": "",
            "final_plan": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ",
            "code": "function starts_ends_same(str)\n    local first_char = string.sub(str, 1, 1)\n    local last_char = string.sub(str, -1)\n    \n    if first_char == last_char then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4268"
        },
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.4197"
        },
        {
            "id": "285",
            "prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
            "draft_plan": "# Iterate through each character in the input string\n    # Check if the current character is 'a'\n        # If it is, check the next two characters (if they exist) to see if they are 'b'\n            # If they are, return True\n    # If the current character is not 'a', continue to the next character\n\n# If no 'a' followed by two or three 'b' characters is found, return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function contains_a_followed_by_b(string)\n    local len = string.len(string)\n    for i = 1, len - 3 do\n        if string.sub(string, i, i) == 'a' then\n            if string.sub(string, i+1, i+3) == 'bb' or string.sub(string, i+1, i+3) == 'bbb' then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4159"
        },
        {
            "id": "113",
            "prompt": "Write a function to check if a string represents an integer or not.",
            "draft_plan": "# Check if the string is empty or None\n    # If so, return False\n\n# Check if the string starts with a '+' or '-'\n    # If so, remove the sign from the string\n\n# Check if the string consists only of digits\n    # If so, return True\n\n# If the string is non-empty and does not start with a sign, it is not a valid integer representation\n    # Return False",
            "requirements": "",
            "final_plan": "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False",
            "code": "function isInteger(str)\n    if str == \"\" or str == nil then\n        return false\n    end\n    \n    if str:sub(1, 1) == '+' or str:sub(1, 1) == '-' then\n        str = str:sub(2)\n    end\n    \n    if str:match(\"^%d+$\") then\n        return true\n    end\n    \n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4158"
        },
        {
            "id": "434",
            "prompt": "Write a function that matches a string that has an a followed by one or more b's.",
            "draft_plan": "import re\n\ndef match_string(string):\n    pattern = r'a+b+'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n",
            "code": "function match_string(str)\n    local pattern = \"a+b+\"\n    if string.match(str, pattern) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.3911"
        },
        {
            "id": "283",
            "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
            "draft_plan": "# Convert the input integer to a string\n# Initialize a dictionary to store the frequency of each digit\n\n# Iterate through each digit in the string\n    # Increment the frequency of the digit in the dictionary\n\n# Iterate through each digit in the string\n    # Check if the frequency of the digit is greater than the digit itself\n        # If yes, return False\n\n# If all frequencies are less than or equal to their respective digits, return True",
            "requirements": "",
            "final_plan": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
            "code": "function check_frequency(num)\n    local str_num = tostring(num)\n    local freq_dict = {}\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        freq_dict[digit] = (freq_dict[digit] or 0) + 1\n    end\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        if freq_dict[digit] > tonumber(digit) then\n            return false\n        end\n    end\n\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.3909"
        },
        {
            "id": "91",
            "prompt": "Write a function to check if a string is present as a substring in a given list of string values.",
            "draft_plan": "# Iterate through each string in the list\n    # Check if the given substring is present in the current string\n        # If found, return True\n\n# If the substring is not found in any string, return False",
            "requirements": "",
            "final_plan": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False",
            "code": "function isSubstringPresent(substring, stringList)\n    for _, str in ipairs(stringList) do\n        if string.find(str, substring) then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.3800"
        }
    ],
    "HumanEval/142": [
        {
            "id": "267",
            "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of squares\n# Initialize a counter variable to keep track of the odd numbers\n# Initialize a variable to store the current odd number\n\n# Iterate from 1 to n (inclusive)\n    # Check if the current number is odd\n        # If it is, square the number and add it to the sum of squares\n        # Increase the counter variable by 1\n        # Check if the counter variable is equal to n\n            # If it is, break the loop\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
            "code": "function sum_of_squares(n)\n    local sum = 0\n    local counter = 0\n    local odd_number = 1\n\n    for i = 1, n do\n        if odd_number % 2 == 1 then\n            sum = sum + odd_number^2\n            counter = counter + 1\n        end\n\n        if counter == n then\n            break\n        end\n\n        odd_number = odd_number + 1\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6998"
        },
        {
            "id": "287",
            "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
            "draft_plan": "# Initialize the sum of squares variable to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Add the square of the current number to the sum of squares variable\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
            "code": "function sum_of_squares(n)\n    local sum = 0\n\n    for i = 1, n do\n        if i % 2 == 0 then\n            sum = sum + (i * i)\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6992"
        },
        {
            "id": "133",
            "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
            "draft_plan": "# Initialize the sum of negative numbers to 0\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If it is negative, add it to the sum\n\n# Return the sum of negative numbers",
            "requirements": "",
            "final_plan": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)",
            "code": "function sum_of_negative_numbers(numbers)\n    local sum = 0\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            sum = sum + num\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6132"
        },
        {
            "id": "420",
            "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of the cube of even numbers\n# Iterate through each even number from 2 to (2*n) with a step size of 2\n    # Calculate the cube of the current even number\n    # Add the cube to the sum\n\n# Return the sum of the cube of even numbers",
            "requirements": "",
            "final_plan": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
            "code": "function cube_sum_of_even(n)\n    local sum = 0\n    \n    for i = 2, 2 * n, 2 do\n        local cube = i * i * i\n        sum = sum + cube\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5733"
        },
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.5726"
        },
        {
            "id": "170",
            "prompt": "Write a function to find the sum of numbers in a list within a range specified by two indices.",
            "draft_plan": "# Initialize a variable to store the sum\n\n# Iterate through each number in the list within the given range\n    # Add the current number to the sum\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   ",
            "code": "function sum_within_range(list, start_index, end_index)\n    local sum = 0\n\n    for i = start_index, end_index do\n        sum = sum + list[i]\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5599"
        },
        {
            "id": "72",
            "prompt": "Write a python function to check whether the given number can be represented as the difference of two squares or not.",
            "draft_plan": "# Iterate through all numbers from 1 to sqrt(n)\n    # Calculate the square of the current number\n    # Check if the difference between n and the square is a perfect square\n\n# If a perfect square difference is found, return True\n# If no perfect square difference is found, return False",
            "requirements": "",
            "final_plan": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False",
            "code": "function can_be_difference_of_squares(n)\n    for i = 1, math.floor(math.sqrt(n)) do\n        local square = i * i\n        local difference = n - square\n        local square_root = math.sqrt(difference)\n        if square_root == math.floor(square_root) then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5561"
        },
        {
            "id": "65",
            "prompt": "Write a function to flatten a list and sum all of its elements.",
            "draft_plan": "# Initialize a variable to store the sum of all elements\n\n# Iterate through each element in the list\n    # Check if the current element is a list\n        # If it is a list, recursively call the flatten_and_sum function on the current element and add the result to the sum\n    # If it is not a list, add the current element to the sum\n\n# Return the sum",
            "requirements": "",
            "final_plan": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total",
            "code": "function flatten_and_sum(lst)\n    local sum = 0\n\n    for _, element in ipairs(lst) do\n        if type(element) == \"table\" then\n            sum = sum + flatten_and_sum(element)\n        else\n            sum = sum + element\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5556"
        },
        {
            "id": "419",
            "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
            "draft_plan": "# Initialize a variable to store the total sum\n# Iterate through each number in the list\n    # Round the number to the nearest integer\n    # Add the rounded number to the total sum\n\n# Calculate the total sum multiplied by the length of the list\n# Print the result",
            "requirements": "",
            "final_plan": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum",
            "code": "function round_and_multiply(numbers)\n    local total_sum = 0\n\n    for _, num in ipairs(numbers) do\n        total_sum = total_sum + math.round(num)\n    end\n\n    local result = total_sum * #numbers\n    print(result)\nend\n\nfunction math.round(num)\n    return math.floor(num + 0.5)\nend",
            "gen_tc": "",
            "sim_score": "0.5555"
        },
        {
            "id": "422",
            "prompt": "Write a python function to find the average of cubes of first n natural numbers.",
            "draft_plan": "# Define a function to find the average of cubes of first n natural numbers\ndef average_of_cubes(n):\n    # Initialize sum of cubes to 0\n    sum_of_cubes = 0\n    \n    # Iterate through the range of 1 to n+1\n    for i in range(1, n+1):\n        # Calculate the cube of the current number and add it to the sum_of_cubes\n        sum_of_cubes += i**3\n    \n    # Calculate the average by dividing the sum_of_cubes by n\n    average = sum_of_cubes / n\n    \n    # Return the average\n    return average",
            "requirements": "",
            "final_plan": "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) ",
            "code": "function average_of_cubes(n)\n    local sum_of_cubes = 0\n    \n    for i = 1, n do\n        sum_of_cubes = sum_of_cubes + i^3\n    end\n    \n    local average = sum_of_cubes / n\n    \n    return average\nend",
            "gen_tc": "",
            "sim_score": "0.5327"
        }
    ],
    "HumanEval/143": [
        {
            "id": "90",
            "prompt": "Write a python function to find the length of the longest word.",
            "draft_plan": "# Split the input sentence into words using the split() function\n# Initialize a variable maxLength to 0\n\n# Iterate through each word in the list of words\n    # Check if the length of the current word is greater than maxLength\n        # If it is, update maxLength with the length of the current word\n\n# Return maxLength",
            "requirements": "",
            "final_plan": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max",
            "code": "function find_longest_word(sentence)\n    local words = split_sentence(sentence)\n    local max_length = 0\n\n    for _, word in ipairs(words) do\n        local length = string.len(word)\n        if length > max_length then\n            max_length = length\n        end\n    end\n\n    return max_length\nend\n\nfunction split_sentence(sentence)\n    local words = {}\n    for word in string.gmatch(sentence, \"%S+\") do\n        table.insert(words, word)\n    end\n    return words\nend",
            "gen_tc": "",
            "sim_score": "0.6345"
        },
        {
            "id": "305",
            "prompt": "Write a function to return two words from a list of words starting with letter 'p'.",
            "draft_plan": "# Initialize an empty list to store the words starting with 'p'\n\n# Iterate through each word in the list\n    # Check if the first letter of the word is 'p'\n        # If yes, append the word to the list\n\n# Check if the list has at least two words\n    # If yes, return the first two words from the list\n    # If no, return None or an appropriate message",
            "requirements": "",
            "final_plan": "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()",
            "code": "function words_starting_with_p(word_list)\n    local p_words = {}\n\n    for _, word in ipairs(word_list) do\n        if string.sub(word, 1, 1) == \"p\" then\n            table.insert(p_words, word)\n        end\n    end\n\n    if #p_words >= 2 then\n        return p_words[1], p_words[2]\n    else\n        return nil\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5548"
        },
        {
            "id": "128",
            "prompt": "Write a function to find words that are longer than n characters from a given list of words.",
            "draft_plan": "# Create an empty list to store the result\n\n# Iterate through each word in the given list\n    # Check if the length of the current word is greater than n\n        # If the condition is satisfied, append the word to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t",
            "code": "function find_longer_words(word_list, n)\n    local result = {}\n\n    for _, word in ipairs(word_list) do\n        if string.len(word) > n then\n            table.insert(result, word)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5508"
        },
        {
            "id": "256",
            "prompt": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
            "draft_plan": "# Define a function to check if a number is prime\n    # Check if the number is less than 2, return False\n    # Iterate from 2 to the square root of the number\n        # Check if the number is divisible by any number in the range\n            # If divisible, return False\n    # If the number is not divisible by any number in the range, return True\n\n# Define a function to count the number of primes less than a given number\n    # Initialize a count variable to 0\n    # Iterate from 2 to the given number\n        # Check if the current number is prime\n            # If prime, increment the count\n    # Return the count",
            "requirements": "",
            "final_plan": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr",
            "code": "function isPrime(n)\n    if n < 2 then\n        return false\n    end\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            return false\n        end\n    end\n    return true\nend\n\nfunction countPrimes(n)\n    local count = 0\n    for i = 2, n - 1 do\n        if isPrime(i) then\n            count = count + 1\n        end\n    end\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5218"
        },
        {
            "id": "450",
            "prompt": "Write a function to extract specified size of strings from a given list of string values.",
            "draft_plan": "# Initialize an empty list to store the extracted strings\n\n# Iterate through each string in the given list\n    # Check if the length of the current string is equal to the specified size\n        # If it matches, append the string to the result list\n\n# Return the list of extracted strings",
            "requirements": "",
            "final_plan": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result",
            "code": "function extract_strings(strings, size)\n    local extracted_strings = {}\n\n    for _, str in ipairs(strings) do\n        if string.len(str) == size then\n            table.insert(extracted_strings, str)\n        end\n    end\n\n    return extracted_strings\nend",
            "gen_tc": "",
            "sim_score": "0.4934"
        },
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.4772"
        },
        {
            "id": "118",
            "prompt": "Write a function to convert a string to a list of strings split on the space character.",
            "draft_plan": "# Initialize an empty list to store the split strings\n\n# Split the input string on the space character and store the result in a variable\n\n# Iterate through each element in the split result\n    # Append the element to the list\n\n# Return the list of split strings",
            "requirements": "",
            "final_plan": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst",
            "code": "function split_string(str)\n    local split_result = {}\n    for word in string.gmatch(str, \"%S+\") do\n        table.insert(split_result, word)\n    end\n    return split_result\nend",
            "gen_tc": "",
            "sim_score": "0.4760"
        },
        {
            "id": "91",
            "prompt": "Write a function to check if a string is present as a substring in a given list of string values.",
            "draft_plan": "# Iterate through each string in the list\n    # Check if the given substring is present in the current string\n        # If found, return True\n\n# If the substring is not found in any string, return False",
            "requirements": "",
            "final_plan": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False",
            "code": "function isSubstringPresent(substring, stringList)\n    for _, str in ipairs(stringList) do\n        if string.find(str, substring) then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4300"
        },
        {
            "id": "454",
            "prompt": "Write a function that matches a word containing 'z'.",
            "draft_plan": "# Iterate through each word in the given list\n    # Check if the character 'z' is present in the word\n        # If 'z' is found, add the word to a new list\n\n# Return the new list containing words with 'z'",
            "requirements": "",
            "final_plan": "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function match_word_with_z(word_list)\n    local z_words = {}\n\n    for _, word in ipairs(word_list) do\n        if string.find(word, 'z') ~= nil then\n            table.insert(z_words, word)\n        end\n    end\n\n    return z_words\nend",
            "gen_tc": "",
            "sim_score": "0.4178"
        },
        {
            "id": "440",
            "prompt": "Write a function to find the first adverb and their positions in a given sentence.",
            "draft_plan": "# Split the sentence into a list of words\n\n# Iterate through each word and its index in the list\n    # Check if the word ends with \"ly\" (indicating it is an adverb)\n        # If it is an adverb, store its index and break the loop\n\n# If an adverb is found, return its index and the adverb itself\n# If no adverb is found, return None",
            "requirements": "",
            "final_plan": "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))",
            "code": "function findFirstAdverb(sentence)\n    local words = splitSentence(sentence)\n\n    for i = 1, #words do\n        if isAdverb(words[i]) then\n            return i, words[i]\n        end\n    end\n\n    return nil\nend\n\nfunction splitSentence(sentence)\n    local words = {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words, word)\n    end\n    return words\nend\n\nfunction isAdverb(word)\n    return word:sub(-2) == \"ly\"\nend",
            "gen_tc": "",
            "sim_score": "0.4126"
        }
    ],
    "HumanEval/144": [
        {
            "id": "292",
            "prompt": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
            "draft_plan": "To find the quotient of two numbers rounded down to the nearest integer, you can use the floor division operator `//` in Python.\n\nHere is the code logic:\n\n```python\ndef quotient(a, b):\n    return a // b\n```\n\nIn this code, the function `quotient` takes two parameters `a` and `b`, representing the numbers for which we want to find the quotient. The floor division `a // b` divides `a` by `b` and returns the quotient rounded down to the nearest integer.\n\nYou can call this function with your desired values to find the quotient. For example:\n\n```python\nresult = quotient(10, 3)\nprint(result)  # Output: 3\n```",
            "requirements": "",
            "final_plan": "def find(n,m):  \n    q = n//m \n    return (q)",
            "code": "function quotient(a, b)\n    return math.floor(a / b)\nend\n\n-- Example usage\nlocal result = quotient(10, 3)\nprint(result) -- Output: 3",
            "gen_tc": "",
            "sim_score": "0.6328"
        },
        {
            "id": "98",
            "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
            "draft_plan": "# Initialize the product variable to 1\n\n# Iterate through each number in the list\n    # Multiply the product by the current number\n\n# Divide the product by the length of the list\n\n# Return the result",
            "requirements": "",
            "final_plan": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ",
            "code": "function multiply_and_divide(numbers)\n    local product = 1\n\n    for _, num in ipairs(numbers) do\n        product = product * num\n    end\n\n    local result = product / #numbers\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5428"
        },
        {
            "id": "261",
            "prompt": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
            "draft_plan": "# Create an empty list to store the result of the division operation\n\n# Iterate through the elements of the tuples\n    # Perform the division operation on the corresponding elements of the tuples\n    # Append the result to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
            "code": "function tuple_division(t1, t2)\n    local result = {}\n\n    for i = 1, #t1 do\n        local div = t1[i] / t2[i]\n        table.insert(result, div)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5347"
        },
        {
            "id": "127",
            "prompt": "Write a function to multiply two integers.",
            "draft_plan": "# Initialize the result to 0\n\n# If either of the integers is 0, return 0\n\n# If both integers are negative, convert them to positive\n    # Multiply the positive integers and change the sign of the result to negative\n\n# If only one integer is negative, convert it to positive\n    # Multiply the positive integers and change the sign of the result to negative\n\n# If both integers are positive, multiply them normally\n\n# Return the result",
            "requirements": "",
            "final_plan": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)",
            "code": "function multiply(a, b)\n    local result = 0\n    \n    if a == 0 or b == 0 then\n        return 0\n    end\n    \n    if a < 0 and b < 0 then\n        a = -a\n        b = -b\n    elseif a < 0 then\n        a = -a\n        result = -result\n    elseif b < 0 then\n        b = -b\n        result = -result\n    end\n    \n    while b > 0 do\n        if b % 2 == 1 then\n            result = result + a\n        end\n        a = a * 2\n        b = math.floor(b / 2)\n    end\n    \n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5271"
        },
        {
            "id": "442",
            "prompt": "Write a function to find the ration of positive numbers in an array of integers.",
            "draft_plan": "# Initialize a counter for positive numbers\n# Iterate through each element in the array\n    # Check if the element is greater than 0\n        # If it is, increment the counter\n\n# Calculate the ratio of positive numbers by dividing the counter by the length of the array\n# Return the ratio",
            "requirements": "",
            "final_plan": "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)",
            "code": "function positiveRatio(array)\n    local positiveCount = 0\n\n    for _, num in ipairs(array) do\n        if num > 0 then\n            positiveCount = positiveCount + 1\n        end\n    end\n\n    local ratio = positiveCount / #array\n    return ratio\nend",
            "gen_tc": "",
            "sim_score": "0.5064"
        },
        {
            "id": "77",
            "prompt": "Write a python function to find whether a number is divisible by 11.",
            "draft_plan": "To determine whether a number is divisible by 11, we can use the following logic:\n\n1. Convert the number to a string.\n2. Iterate through the digits of the number.\n3. Add the digits in odd positions (starting from the rightmost digit) and subtract the sum of the digits in even positions.\n4. If the result is divisible by 11, the original number is also divisible by 11.\n\nHere is the code implementing this logic:\n\n```python\ndef is_divisible_by_11(number):\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Iterate through the digits of the number\n    sum_odd = 0\n    sum_even = 0\n    for i in range(len(number_str)):\n        digit = int(number_str[i])\n        \n        # Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0:\n            sum_odd += digit\n        else:\n            sum_even += digit\n    \n    # Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0:\n        return True\n    else:\n        return False\n```\n\nYou can use this function to check if a number is divisible by 11. For example:\n\n```python\nprint(is_divisible_by_11(121))  # Output: True\nprint(is_divisible_by_11(123))  # Output: False\n```",
            "requirements": "",
            "final_plan": "def is_Diff(n): \n    return (n % 11 == 0) ",
            "code": "function is_divisible_by_11(number)\n    -- Convert the number to a string\n    local number_str = tostring(number)\n    \n    -- Iterate through the digits of the number\n    local sum_odd = 0\n    local sum_even = 0\n    for i = 1, string.len(number_str) do\n        local digit = tonumber(string.sub(number_str, i, i))\n        \n        -- Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0 then\n            sum_even = sum_even + digit\n        else\n            sum_odd = sum_odd + digit\n        end\n    end\n    \n    -- Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0 then\n        return true\n    else\n        return false\n    end\nend\n\nprint(is_divisible_by_11(121))  -- Output: true\nprint(is_divisible_by_11(123))  -- Output: false",
            "gen_tc": "",
            "sim_score": "0.4905"
        },
        {
            "id": "56",
            "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
            "draft_plan": "# Convert the given number to a string and reverse it\n# Convert the reversed string back to an integer\n# Check if the given number is equal to twice the reversed number plus 1\n# If the condition is true, return True. Otherwise, return False.",
            "requirements": "",
            "final_plan": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
            "code": "function is_one_less_twice_reverse(number)\n    local reverse = tonumber(string.reverse(tostring(number)))\n    if number == (2 * reverse + 1) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4833"
        },
        {
            "id": "160",
            "prompt": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
            "draft_plan": "# Iterate through all possible values of x from 0 to n\n    # Calculate the value of y using the equation y = (n - ax) / b\n    # Check if y is an integer\n        # If y is an integer, return the values of x and y as a tuple\n\n# If no solution is found, return None",
            "requirements": "",
            "final_plan": "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None",
            "code": "function find_solution(a, b, n)\n    for x = 0, n do\n        local y = (n - a * x) / b\n        if y == math.floor(y) then\n            return x, y\n        end\n    end\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.4789"
        },
        {
            "id": "137",
            "prompt": "Write a function to find the ratio of zeroes to non-zeroes in an array of integers.",
            "draft_plan": "# Initialize zero_count to 0\n# Initialize non_zero_count to 0\n\n# Iterate through each element in the array\n    # Check if the current element is zero\n        # If it is zero, increment zero_count\n        # If it is not zero, increment non_zero_count\n\n# Calculate the ratio of zeroes to non-zeroes\n# Return the ratio",
            "requirements": "",
            "final_plan": "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)",
            "code": "function ratio_of_zeroes_to_non_zeroes(arr)\n    local zero_count = 0\n    local non_zero_count = 0\n\n    for _, num in ipairs(arr) do\n        if num == 0 then\n            zero_count = zero_count + 1\n        else\n            non_zero_count = non_zero_count + 1\n        end\n    end\n\n    local ratio = zero_count / non_zero_count\n    return ratio\nend",
            "gen_tc": "",
            "sim_score": "0.4699"
        },
        {
            "id": "126",
            "prompt": "Write a python function to find the sum of common divisors of two given numbers.",
            "draft_plan": "# Find the common divisors of the two given numbers\n    # Find the smaller number among the two\n    # Initialize an empty list to store the common divisors\n    # Iterate from 1 to the smaller number\n        # Check if the current number is a divisor of both given numbers\n            # If yes, add it to the list of common divisors\n\n# Find the sum of the common divisors\n    # Initialize a variable to store the sum\n    # Iterate through the list of common divisors\n        # Add each divisor to the sum\n\n# Return the sum of the common divisors",
            "requirements": "",
            "final_plan": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum",
            "code": "function sumCommonDivisors(a, b)\n    local smaller = math.min(a, b)\n    local divisors = {}\n\n    for i = 1, smaller do\n        if a % i == 0 and b % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n\n    local sum = 0\n    for _, divisor in ipairs(divisors) do\n        sum = sum + divisor\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.4594"
        }
    ],
    "HumanEval/145": [
        {
            "id": "398",
            "prompt": "Write a function to compute the sum of digits of each number of a given list.",
            "draft_plan": "# Initialize an empty list to store the sum of digits for each number\n\n# Iterate through each number in the given list\n    # Convert the number to a string\n    # Initialize a variable to store the sum of digits\n    # Iterate through each digit in the string representation of the number\n        # Convert the digit back to an integer and add it to the sum of digits\n    # Append the sum of digits to the list\n\n# Return the list of sum of digits for each number",
            "requirements": "",
            "final_plan": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
            "code": "function compute_sum_of_digits(numbers)\n    local sum_of_digits = {}\n\n    for _, num in ipairs(numbers) do\n        local num_str = tostring(num)\n        local digits_sum = 0\n\n        for i = 1, string.len(num_str) do\n            digits_sum = digits_sum + tonumber(string.sub(num_str, i, i))\n        end\n\n        table.insert(sum_of_digits, digits_sum)\n    end\n\n    return sum_of_digits\nend",
            "gen_tc": "",
            "sim_score": "0.5943"
        },
        {
            "id": "57",
            "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.",
            "draft_plan": "# Sort the list of digits in descending order\n\n# Concatenate all the digits in the sorted list\n\n# Convert the concatenated string to an integer and return it",
            "requirements": "",
            "final_plan": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ",
            "code": "function largest_number(digits)\n    table.sort(digits, function(a, b) return a > b end)\n    return tonumber(table.concat(digits))\nend",
            "gen_tc": "",
            "sim_score": "0.5834"
        },
        {
            "id": "12",
            "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
            "draft_plan": "# Calculate the sum of each row in the matrix\n\n# Create a list of tuples, where each tuple contains the index of the row and its corresponding sum\n\n# Sort the list of tuples based on the sum in ascending order\n\n# Create an empty sorted matrix\n\n# Iterate through the sorted list of tuples\n    # Append the corresponding row from the original matrix to the sorted matrix\n\n# Return the sorted matrix",
            "requirements": "",
            "final_plan": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result",
            "code": "function sort_matrix(matrix)\n    local sum_rows = {}\n    \n    -- Calculate the sum of each row in the matrix\n    for i, row in ipairs(matrix) do\n        local row_sum = 0\n        for _, value in ipairs(row) do\n            row_sum = row_sum + value\n        end\n        table.insert(sum_rows, {i, row_sum}) -- Create a tuple with the row index and its sum\n    end\n\n    -- Sort the list of tuples based on the sum in ascending order\n    table.sort(sum_rows, function(a, b) return a[2] < b[2] end)\n\n    local sorted_matrix = {}\n\n    -- Iterate through the sorted list of tuples\n    for _, tuple in ipairs(sum_rows) do\n        -- Append the corresponding row from the original matrix to the sorted matrix\n        table.insert(sorted_matrix, matrix[tuple[1]])\n    end\n\n    return sorted_matrix\nend",
            "gen_tc": "",
            "sim_score": "0.5727"
        },
        {
            "id": "71",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Use the built-in sorted() function to sort the list in ascending order\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums",
            "code": "function sort_list(elements)\n    return sorted(elements)\nend",
            "gen_tc": "",
            "sim_score": "0.5720"
        },
        {
            "id": "64",
            "prompt": "Write a function to sort a list of tuples using the second value of each tuple.",
            "draft_plan": "# Define a function to sort a list of tuples by the second value\n    # Use the sorted() function and a lambda function as the key parameter\n    # The lambda function will extract the second value from each tuple for sorting\n    \n# Call the sorted() function with the list of tuples and the custom sorting function as arguments\n# Return the sorted list of tuples",
            "requirements": "",
            "final_plan": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks",
            "code": "function sort_tuples_by_second_value(tuples)\n    return table.sort(tuples, function(a, b) return a[2] < b[2] end)\nend",
            "gen_tc": "",
            "sim_score": "0.5717"
        },
        {
            "id": "141",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Implement a sorting algorithm such as bubble sort, insertion sort, merge sort, quick sort, etc.\n\n# Define a function to take a list of elements as input\n    # Iterate through the list to compare each element with its adjacent element(s)\n        # Swap elements if they are in the wrong order\n    # Repeat the above steps until the list is sorted\n\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums",
            "code": "-- Bubble Sort implementation\nfunction sort_list(list)\n    local n = #list\n    for i = 1, n-1 do\n        for j = 1, n-i do\n            if list[j] > list[j+1] then\n                list[j], list[j+1] = list[j+1], list[j]\n            end\n        end\n    end\n    return list\nend",
            "gen_tc": "",
            "sim_score": "0.5603"
        },
        {
            "id": "407",
            "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.",
            "draft_plan": "# Convert the given number to a list of digits\n\n# Find the first index (from right to left) where the digit is smaller than the digit to its right\n    # If no such index is found, return \"None\" since the number is already the largest possible\n\n# Find the smallest digit to the right of the found index that is larger than the digit at the found index\n\n# Swap the found digit with the smallest larger digit to its right\n\n# Sort the digits to the right of the found index in ascending order\n\n# Concatenate the digits to form the next bigger number\n\n# Return the next bigger number",
            "requirements": "",
            "final_plan": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False",
            "code": "function nextBiggerNumber(num)\n    -- Convert the number to a list of digits\n    local digits = {}\n    local n = num\n    while n > 0 do\n        table.insert(digits, 1, n % 10)\n        n = math.floor(n / 10)\n    end\n\n    -- Find the first index where the digit is smaller than the digit to its right\n    local i = #digits - 1\n    while i >= 1 and digits[i] >= digits[i+1] do\n        i = i - 1\n    end\n\n    -- If no such index is found, return \"None\"\n    if i < 1 then\n        return \"None\"\n    end\n\n    -- Find the smallest larger digit to the right of the found index\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n\n    -- Swap the found digit with the smallest larger digit to its right\n    digits[i], digits[j] = digits[j], digits[i]\n\n    -- Sort the digits to the right of the found index in ascending order\n    for k = i+1, #digits do\n        for l = k+1, #digits do\n            if digits[k] > digits[l] then\n                digits[k], digits[l] = digits[l], digits[k]\n            end\n        end\n    end\n\n    -- Concatenate the digits to form the next bigger number\n    local nextNum = 0\n    for k = 1, #digits do\n        nextNum = nextNum * 10 + digits[k]\n    end\n\n    return nextNum\nend",
            "gen_tc": "",
            "sim_score": "0.5428"
        },
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.5424"
        },
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.5301"
        },
        {
            "id": "475",
            "prompt": "Write a function to sort a dictionary by value.",
            "draft_plan": "# Use the sorted() function with a lambda function as the key parameter\n# The lambda function takes each key-value pair from the dictionary and returns the value\n# The sorted() function will sort the dictionary based on the values in ascending order\n# Pass the sorted dictionary to the dict() function to convert it back to a dictionary type\n\ndef sort_dict_by_value(dictionary):\n    sorted_dict = dict(sorted(dictionary.items(), key=lambda item: item[1]))\n    return sorted_dict",
            "requirements": "",
            "final_plan": "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter",
            "code": "function sortDictByValue(dictionary)\n    local sortedKeys = {}\n    \n    for key, _ in pairs(dictionary) do\n        table.insert(sortedKeys, key)\n    end\n    \n    table.sort(sortedKeys, function(a, b)\n        return dictionary[a] < dictionary[b]\n    end)\n    \n    local sortedDict = {}\n    \n    for _, key in ipairs(sortedKeys) do\n        sortedDict[key] = dictionary[key]\n    end\n    \n    return sortedDict\nend",
            "gen_tc": "",
            "sim_score": "0.5183"
        }
    ],
    "HumanEval/146": [
        {
            "id": "426",
            "prompt": "Write a function to filter odd numbers.",
            "draft_plan": "# Initialize an empty list to store the filtered numbers\n\n# Iterate through each number in the input list\n    # Check if the number is odd\n        # If the number is odd, append it to the filtered list\n\n# Return the filtered list",
            "requirements": "",
            "final_plan": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums",
            "code": "function filter_odd_numbers(number_list)\n    local filtered_list = {}\n\n    for _, num in ipairs(number_list) do\n        if num % 2 ~= 0 then\n            table.insert(filtered_list, num)\n        end\n    end\n\n    return filtered_list\nend",
            "gen_tc": "",
            "sim_score": "0.7476"
        },
        {
            "id": "412",
            "prompt": "Write a python function to remove odd numbers from a given list.",
            "draft_plan": "# Create an empty list to store the even numbers\n\n# Iterate through each number in the given list\n    # Check if the number is even (number % 2 == 0)\n        # If the number is even, append it to the list of even numbers\n\n# Return the list of even numbers",
            "requirements": "",
            "final_plan": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
            "code": "function remove_odd_numbers(lst)\n    local even_lst = {}\n\n    for _, num in ipairs(lst) do\n        if num % 2 == 0 then\n            table.insert(even_lst, num)\n        end\n    end\n\n    return even_lst\nend",
            "gen_tc": "",
            "sim_score": "0.5852"
        },
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.5800"
        },
        {
            "id": "109",
            "prompt": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
            "draft_plan": "# Convert the binary string to a list of characters\n# Initialize a counter variable to keep track of the number of odd numbers\n\n# Rotate the binary string the given number of times\n    # Remove the last character from the binary string and prepend it to the front\n\n# Convert the rotated binary string back to a string\n# Iterate through each character in the rotated binary string\n    # Convert the character to an integer\n    # Check if the integer value is odd\n        # If so, increment the counter\n\n# Return the counter value",
            "requirements": "",
            "final_plan": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ",
            "code": "function count_odd_numbers(binary_str, rotations)\n    local binary_list = {}\n    local counter = 0\n\n    -- Convert the binary string to a list of characters\n    for char in string.gmatch(binary_str, \".\") do\n        table.insert(binary_list, char)\n    end\n\n    -- Rotate the binary string the given number of times\n    for i = 1, rotations do\n        local last_char = table.remove(binary_list)\n        table.insert(binary_list, 1, last_char)\n    end\n\n    -- Convert the rotated binary string back to a string\n    local rotated_binary_str = table.concat(binary_list)\n\n    -- Iterate through each character in the rotated binary string\n    for i = 1, string.len(rotated_binary_str) do\n        local char = string.sub(rotated_binary_str, i, i)\n        local num = tonumber(char)\n        \n        -- Check if the integer value is odd\n        if num % 2 == 1 then\n            counter = counter + 1\n        end\n    end\n\n    return counter\nend",
            "gen_tc": "",
            "sim_score": "0.5720"
        },
        {
            "id": "166",
            "prompt": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
            "draft_plan": "# Initialize a variable to keep track of the count of pairs\n# Iterate through each element in the list\n    # Iterate through each element after the current element\n        # Check if the xor of the current pair is an even number\n            # If it is, increment the count of pairs\n\n# Return the count of pairs",
            "requirements": "",
            "final_plan": "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count",
            "code": "function count_even_xor_pairs(list)\n    local pair_count = 0\n\n    for i = 1, #list do\n        for j = i+1, #list do\n            if (list[i] ~ list[j]) % 2 == 0 then\n                pair_count = pair_count + 1\n            end\n        end\n    end\n\n    return pair_count\nend",
            "gen_tc": "",
            "sim_score": "0.5648"
        },
        {
            "id": "406",
            "prompt": "Write a python function to find whether the parity of a given number is odd.",
            "draft_plan": "# Check if the number modulo 2 is equal to 1\n    # If the modulo is 1, the number is odd\n    # Return True\n\n# If the modulo is not 1, the number is even\n# Return False",
            "requirements": "",
            "final_plan": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False",
            "code": "function is_odd_parity(number)\n    return number % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.5488"
        },
        {
            "id": "77",
            "prompt": "Write a python function to find whether a number is divisible by 11.",
            "draft_plan": "To determine whether a number is divisible by 11, we can use the following logic:\n\n1. Convert the number to a string.\n2. Iterate through the digits of the number.\n3. Add the digits in odd positions (starting from the rightmost digit) and subtract the sum of the digits in even positions.\n4. If the result is divisible by 11, the original number is also divisible by 11.\n\nHere is the code implementing this logic:\n\n```python\ndef is_divisible_by_11(number):\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Iterate through the digits of the number\n    sum_odd = 0\n    sum_even = 0\n    for i in range(len(number_str)):\n        digit = int(number_str[i])\n        \n        # Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0:\n            sum_odd += digit\n        else:\n            sum_even += digit\n    \n    # Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0:\n        return True\n    else:\n        return False\n```\n\nYou can use this function to check if a number is divisible by 11. For example:\n\n```python\nprint(is_divisible_by_11(121))  # Output: True\nprint(is_divisible_by_11(123))  # Output: False\n```",
            "requirements": "",
            "final_plan": "def is_Diff(n): \n    return (n % 11 == 0) ",
            "code": "function is_divisible_by_11(number)\n    -- Convert the number to a string\n    local number_str = tostring(number)\n    \n    -- Iterate through the digits of the number\n    local sum_odd = 0\n    local sum_even = 0\n    for i = 1, string.len(number_str) do\n        local digit = tonumber(string.sub(number_str, i, i))\n        \n        -- Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0 then\n            sum_even = sum_even + digit\n        else\n            sum_odd = sum_odd + digit\n        end\n    end\n    \n    -- Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0 then\n        return true\n    else\n        return false\n    end\nend\n\nprint(is_divisible_by_11(121))  -- Output: true\nprint(is_divisible_by_11(123))  -- Output: false",
            "gen_tc": "",
            "sim_score": "0.5434"
        },
        {
            "id": "66",
            "prompt": "Write a python function to count the number of positive numbers in a list.",
            "draft_plan": "# Initialize a variable count to 0\n\n# Iterate through each number in the list\n    # Check if the number is greater than 0\n        # If it is, increment the count\n\n# Return the count",
            "requirements": "",
            "final_plan": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ",
            "code": "function count_positive_numbers(lst)\n    local count = 0\n\n    for _, num in ipairs(lst) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5430"
        },
        {
            "id": "277",
            "prompt": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.",
            "draft_plan": "# Initialize an empty dictionary to store the filtered entries\n\n# Iterate through each key-value pair in the input dictionary\n    # Check if the value is greater than or equal to n\n        # If it is, add the key-value pair to the filtered dictionary\n\n# Return the filtered dictionary",
            "requirements": "",
            "final_plan": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result",
            "code": "function filter_dictionary(dict, n)\n    local filtered_dict = {}\n\n    for key, value in pairs(dict) do\n        if value >= n then\n            filtered_dict[key] = value\n        end\n    end\n\n    return filtered_dict\nend",
            "gen_tc": "",
            "sim_score": "0.5323"
        },
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.5314"
        }
    ],
    "HumanEval/147": [
        {
            "id": "447",
            "prompt": "Write a function to find cubes of individual elements in a list.",
            "draft_plan": "# Create an empty list to store the cubes of individual elements\n# Iterate through each element in the input list\n    # Calculate the cube of the current element by raising it to the power of 3\n    # Append the cube to the result list\n\n# Return the result list containing the cubes of individual elements",
            "requirements": "",
            "final_plan": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums",
            "code": "function find_cubes(list)\n    local result = {}\n    for _, element in ipairs(list) do\n        local cube = element^3\n        table.insert(result, cube)\n    end\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5506"
        },
        {
            "id": "422",
            "prompt": "Write a python function to find the average of cubes of first n natural numbers.",
            "draft_plan": "# Define a function to find the average of cubes of first n natural numbers\ndef average_of_cubes(n):\n    # Initialize sum of cubes to 0\n    sum_of_cubes = 0\n    \n    # Iterate through the range of 1 to n+1\n    for i in range(1, n+1):\n        # Calculate the cube of the current number and add it to the sum_of_cubes\n        sum_of_cubes += i**3\n    \n    # Calculate the average by dividing the sum_of_cubes by n\n    average = sum_of_cubes / n\n    \n    # Return the average\n    return average",
            "requirements": "",
            "final_plan": "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) ",
            "code": "function average_of_cubes(n)\n    local sum_of_cubes = 0\n    \n    for i = 1, n do\n        sum_of_cubes = sum_of_cubes + i^3\n    end\n    \n    local average = sum_of_cubes / n\n    \n    return average\nend",
            "gen_tc": "",
            "sim_score": "0.5164"
        },
        {
            "id": "468",
            "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
            "draft_plan": "# Initialize the maximum product as 1\n# Initialize an empty list to store the increasing subsequence\n\n# Iterate through each number in the array\n    # Initialize a temporary list to store the current increasing subsequence\n    # Iterate through each number before the current number\n        # Check if the current number is greater than the previous number and if the product of the current number and the previous maximum product is greater than the current maximum product\n            # If the condition is satisfied, update the maximum product and the temporary list with the current increasing subsequence\n    # Append the current number to the temporary list\n\n# Return the maximum product and the increasing subsequence list",
            "requirements": "",
            "final_plan": "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)",
            "code": "function findMaxProduct(nums)\n    local maxProduct = 1\n    local subsequence = {}\n    \n    for i = 1, #nums do\n        local temp = {nums[i]}\n        \n        for j = 1, i-1 do\n            if nums[i] > nums[j] and nums[i] * maxProduct > maxProduct then\n                maxProduct = nums[i] * maxProduct\n                temp = table.copy(subsequence)\n            end\n        end\n        \n        table.insert(temp, nums[i])\n        subsequence = table.copy(temp)\n    end\n    \n    return maxProduct, subsequence\nend\n\n-- Helper function to copy a table\nfunction table.copy(t)\n    local copy = {}\n    for key, value in pairs(t) do\n        copy[key] = value\n    end\n    return copy\nend",
            "gen_tc": "",
            "sim_score": "0.5152"
        },
        {
            "id": "392",
            "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
            "draft_plan": "# Create a dictionary to store the maximum sum for each number\n# Set the base cases for f(0) and f(1) as 0 and 1 respectively\n\n# Define a recursive function to calculate the maximum sum for a given number\n    # Check if the maximum sum for the current number has already been calculated\n        # If yes, return the stored value\n        # If no, calculate the maximum sum using the given equation\n\n# Call the recursive function to calculate the maximum sum for the given number",
            "requirements": "",
            "final_plan": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]",
            "code": "function max_sum(n)\n    local memo = {}  -- dictionary to store the maximum sum for each number\n\n    -- base cases\n    memo[0] = 0\n    memo[1] = 1\n\n    -- recursive function to calculate maximum sum\n    local function calculate_sum(num)\n        if memo[num] ~= nil then  -- check if maximum sum is already calculated\n            return memo[num]\n        end\n\n        -- calculate maximum sum using the given equation\n        memo[num] = math.max(calculate_sum(math.floor(num/2)) + calculate_sum(math.floor(num/3)) + calculate_sum(math.floor(num/4)) + calculate_sum(math.floor(num/5)), num)\n        return memo[num]\n    end\n\n    return calculate_sum(n)  -- call the recursive function to calculate maximum sum for given number\nend",
            "gen_tc": "",
            "sim_score": "0.5041"
        },
        {
            "id": "415",
            "prompt": "Write a python function to find a pair with highest product from a given array of integers.",
            "draft_plan": "# Initialize the maximum product to -infinity\n\n# Iterate through each pair of numbers in the array\n    # Calculate the product of the current pair\n    # Update the maximum product if the current product is greater\n\n# Return the pair with the highest product",
            "requirements": "",
            "final_plan": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ",
            "code": "function find_highest_product(arr)\n    local max_product = -math.huge\n    local pair = {}\n\n    for i = 1, #arr-1 do\n        for j = i+1, #arr do\n            local product = arr[i] * arr[j]\n            if product > max_product then\n                max_product = product\n                pair = {arr[i], arr[j]}\n            end\n        end\n    end\n\n    return pair\nend",
            "gen_tc": "",
            "sim_score": "0.4875"
        },
        {
            "id": "299",
            "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.",
            "draft_plan": "# Sort the list of tuples in descending order based on the second element\n\n# Initialize the maximum aggregate to 0\n\n# Iterate through each tuple in the sorted list\n    # Calculate the current aggregate by adding the second element of the tuple to the maximum aggregate\n    # Update the maximum aggregate if the current aggregate is greater\n\n# Return the maximum aggregate",
            "requirements": "",
            "final_plan": "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])",
            "code": "function calculate_maximum_aggregate(tuples)\n    table.sort(tuples, function(a, b)\n        return a[2] > b[2]\n    end)\n\n    local maximum_aggregate = 0\n\n    for _, tuple in ipairs(tuples) do\n        local current_aggregate = maximum_aggregate + tuple[2]\n        if current_aggregate > maximum_aggregate then\n            maximum_aggregate = current_aggregate\n        end\n    end\n\n    return maximum_aggregate\nend",
            "gen_tc": "",
            "sim_score": "0.4863"
        },
        {
            "id": "227",
            "prompt": "Write a function to find minimum of three numbers.",
            "draft_plan": "# Compare the first two numbers and assign the minimum to a variable min_num\n\n# Compare the minimum of the first two numbers with the third number\n    # If the third number is smaller, assign it to min_num\n\n# Return min_num",
            "requirements": "",
            "final_plan": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ",
            "code": "function find_minimum(a, b, c)\n    local min_num = a\n\n    if b < min_num then\n        min_num = b\n    end\n\n    if c < min_num then\n        min_num = c\n    end\n\n    return min_num\nend",
            "gen_tc": "",
            "sim_score": "0.4779"
        },
        {
            "id": "75",
            "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
            "draft_plan": "# Initialize an empty list to store the resulting tuples\n\n# Iterate through each tuple in the given list of tuples\n    # Initialize a flag variable to True\n    \n    # Iterate through each element in the tuple\n        # Check if the element is not divisible by k\n            # If not divisible, set the flag variable to False and break out of the loop\n    \n    # If the flag variable is still True after checking all elements, add the tuple to the resulting list\n\n# Return the resulting list of tuples",
            "requirements": "",
            "final_plan": "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res",
            "code": "function find_tuples_divisible_by_k(list_of_tuples, k)\n    local result = {}\n\n    for _, tup in ipairs(list_of_tuples) do\n        local is_divisible = true\n\n        for _, elem in ipairs(tup) do\n            if elem % k ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n\n        if is_divisible then\n            table.insert(result, tup)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.4698"
        },
        {
            "id": "63",
            "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.",
            "draft_plan": "# Initialize the maximum difference variable to 0\n\n# Iterate through each pair in the list\n    # Calculate the difference between the second element and the first element of the current pair\n    # Check if the current difference is greater than the maximum difference\n        # If it is, update the maximum difference\n\n# Return the maximum difference",
            "requirements": "",
            "final_plan": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ",
            "code": "function find_max_difference(tuple_list)\n    local max_difference = 0\n\n    for _, tuple in ipairs(tuple_list) do\n        local difference = tuple[2] - tuple[1]\n        if difference > max_difference then\n            max_difference = difference\n        end\n    end\n\n    return max_difference\nend",
            "gen_tc": "",
            "sim_score": "0.4629"
        },
        {
            "id": "57",
            "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.",
            "draft_plan": "# Sort the list of digits in descending order\n\n# Concatenate all the digits in the sorted list\n\n# Convert the concatenated string to an integer and return it",
            "requirements": "",
            "final_plan": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ",
            "code": "function largest_number(digits)\n    table.sort(digits, function(a, b) return a > b end)\n    return tonumber(table.concat(digits))\nend",
            "gen_tc": "",
            "sim_score": "0.4595"
        }
    ],
    "HumanEval/148": [
        {
            "id": "473",
            "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
            "draft_plan": "# Initialize the intersection as the first tuple in the given tuple list\n\n# Iterate through each tuple in the given tuple list starting from the second tuple\n    # Initialize the current intersection as an empty list\n\n    # Iterate through each element in the current tuple\n        # Check if the element is present in the previous intersection\n            # If yes, append the element to the current intersection\n\n    # Update the intersection as the current intersection\n\n# Return the intersection",
            "requirements": "",
            "final_plan": "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)",
            "code": "function tupleIntersection(tuple_list)\n    local intersection = tuple_list[1]\n\n    for i = 2, #tuple_list do\n        local current_tuple = tuple_list[i]\n        local current_intersection = {}\n\n        for _, element in ipairs(current_tuple) do\n            if contains(intersection, element) then\n                table.insert(current_intersection, element)\n            end\n        end\n\n        intersection = current_intersection\n    end\n\n    return intersection\nend\n\nfunction contains(list, element)\n    for _, value in ipairs(list) do\n        if value == element then\n            return true\n        end\n    end\n\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4144"
        },
        {
            "id": "63",
            "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.",
            "draft_plan": "# Initialize the maximum difference variable to 0\n\n# Iterate through each pair in the list\n    # Calculate the difference between the second element and the first element of the current pair\n    # Check if the current difference is greater than the maximum difference\n        # If it is, update the maximum difference\n\n# Return the maximum difference",
            "requirements": "",
            "final_plan": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ",
            "code": "function find_max_difference(tuple_list)\n    local max_difference = 0\n\n    for _, tuple in ipairs(tuple_list) do\n        local difference = tuple[2] - tuple[1]\n        if difference > max_difference then\n            max_difference = difference\n        end\n    end\n\n    return max_difference\nend",
            "gen_tc": "",
            "sim_score": "0.3968"
        },
        {
            "id": "405",
            "prompt": "Write a function to check whether an element exists within a tuple.",
            "draft_plan": "# Iterate through each element in the tuple\n    # Check if the current element is equal to the target element\n        # If the element is found, return True\n\n# If the element is not found, return False",
            "requirements": "",
            "final_plan": "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False",
            "code": "function check_element_exists(tuple, element)\n    for i = 1, #tuple do\n        if tuple[i] == element then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.3892"
        },
        {
            "id": "145",
            "prompt": "Write a python function to find the maximum difference between any two elements in a given array.",
            "draft_plan": "# If the array is empty, return None\n# Initialize the maximum difference to zero\n\n# Iterate through each element in the array\n    # Iterate through each element after the current element\n        # Calculate the difference between the current element and the subsequent element\n        # Update the maximum difference if the calculated difference is greater than the current maximum difference\n\n# Return the maximum difference",
            "requirements": "",
            "final_plan": "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ",
            "code": "function max_difference(arr)\n    if #arr == 0 then\n        return nil\n    end\n\n    local max_diff = 0\n\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            local diff = math.abs(arr[i] - arr[j])\n            if diff > max_diff then\n                max_diff = diff\n            end\n        end\n    end\n\n    return max_diff\nend",
            "gen_tc": "",
            "sim_score": "0.3888"
        },
        {
            "id": "273",
            "prompt": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
            "draft_plan": "# Define a function that takes in two tuples as arguments\n    # Create an empty list to store the result of the subtraction\n\n    # Iterate through the indices of the tuples\n        # Subtract the element at the current index of the first tuple from the element at the current index of the second tuple\n        # Append the result to the list\n\n    # Return the resulting list",
            "requirements": "",
            "final_plan": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) ",
            "code": "function subtract_tuples(tuple1, tuple2)\n    local result = {}\n\n    for i = 1, #tuple1 do\n        local subtracted_value = tuple1[i] - tuple2[i]\n        table.insert(result, subtracted_value)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.3843"
        },
        {
            "id": "94",
            "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
            "draft_plan": "# Initialize the minimum second value as positive infinity\n# Initialize the first value of the tuple with minimum second value as None\n\n# Iterate through each tuple in the list\n    # Check if the second value of the current tuple is smaller than the current minimum second value\n        # If yes, update the minimum second value and the first value of the tuple\n\n# Return the first value of the tuple with the smallest second value",
            "requirements": "",
            "final_plan": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ",
            "code": "function get_first_smallest_value(test_list)\n    local min_second = math.huge\n    local first_value = nil\n    \n    for _, tup in ipairs(test_list) do\n        local second_value = tup[2]\n        \n        if second_value < min_second then\n            min_second = second_value\n            first_value = tup[1]\n        end\n    end\n    \n    return first_value\nend",
            "gen_tc": "",
            "sim_score": "0.3804"
        },
        {
            "id": "272",
            "prompt": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.",
            "draft_plan": "# Create an empty list to store the rear elements\n# Iterate through each tuple in the input list\n    # Append the rear element of the current tuple to the list\n\n# Return the list containing the rear elements",
            "requirements": "",
            "final_plan": "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) ",
            "code": "function get_rear_elements(tuples)\n    local rear_elements = {}\n    \n    for i, tuple in ipairs(tuples) do\n        table.insert(rear_elements, tuple[#tuple])\n    end\n    \n    return rear_elements\nend",
            "gen_tc": "",
            "sim_score": "0.3788"
        },
        {
            "id": "417",
            "prompt": "Write a function to find common first element in given list of tuple.",
            "draft_plan": "# Initialize a set to store the first elements of the tuples\n# Initialize a variable to store the common first element, initially None\n\n# Iterate through each tuple in the list\n    # Check if the first element of the tuple is already in the set\n        # If it is, set the common first element to the current element\n        # Break the loop as we have found the common first element\n    # If the first element is not in the set, add it to the set\n\n# Return the common first element",
            "requirements": "",
            "final_plan": "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] ",
            "code": "function findCommonFirstElement(list)\n    local firstElements = {}\n    local commonFirstElement = nil\n\n    for _, tup in ipairs(list) do\n        local first = tup[1]\n\n        if firstElements[first] then\n            commonFirstElement = first\n            break\n        else\n            firstElements[first] = true\n        end\n    end\n\n    return commonFirstElement\nend",
            "gen_tc": "",
            "sim_score": "0.3767"
        },
        {
            "id": "259",
            "prompt": "Write a function to maximize the given two tuples.",
            "draft_plan": "# Initialize a new tuple to store the maximum values\n\n# Iterate through each element in the tuples\n    # Compare the corresponding elements of both tuples\n    # Add the maximum value to the new tuple\n\n# Return the new tuple containing the maximum values",
            "requirements": "",
            "final_plan": "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
            "code": "function maximize_tuples(tuple1, tuple2)\n    local max_tuple = {}\n\n    for i = 1, #tuple1 do\n        max_tuple[i] = math.max(tuple1[i], tuple2[i])\n    end\n\n    return max_tuple\nend",
            "gen_tc": "",
            "sim_score": "0.3747"
        },
        {
            "id": "250",
            "prompt": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the tuple\n    # Check if the current element is equal to the target element\n        # If it is, increment the counter by 1\n\n# Return the value of the counter variable",
            "requirements": "",
            "final_plan": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ",
            "code": "function count_occurrences(t, element)\n    local count = 0\n    \n    for i = 1, #t do\n        if t[i] == element then\n            count = count + 1\n        end\n    end\n    \n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.3742"
        }
    ],
    "HumanEval/149": [
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.6619"
        },
        {
            "id": "412",
            "prompt": "Write a python function to remove odd numbers from a given list.",
            "draft_plan": "# Create an empty list to store the even numbers\n\n# Iterate through each number in the given list\n    # Check if the number is even (number % 2 == 0)\n        # If the number is even, append it to the list of even numbers\n\n# Return the list of even numbers",
            "requirements": "",
            "final_plan": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
            "code": "function remove_odd_numbers(lst)\n    local even_lst = {}\n\n    for _, num in ipairs(lst) do\n        if num % 2 == 0 then\n            table.insert(even_lst, num)\n        end\n    end\n\n    return even_lst\nend",
            "gen_tc": "",
            "sim_score": "0.5930"
        },
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.5848"
        },
        {
            "id": "226",
            "prompt": "Write a python function to remove the characters which have odd index values of a given string.",
            "draft_plan": "# Initialize an empty string to store the result\n\n# Iterate through each character and its index in the input string\n    # Check if the index of the current character is even\n        # If it is even, append the character to the result string\n\n# Return the result string",
            "requirements": "",
            "final_plan": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result",
            "code": "function remove_odd_index_chars(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        if i % 2 == 0 then\n            result = result .. string.sub(str, i, i)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5757"
        },
        {
            "id": "104",
            "prompt": "Write a function to sort each sublist of strings in a given list of lists.",
            "draft_plan": "# Iterate through each sublist in the given list\n    # Sort the sublist using the sorted() function and assign the sorted sublist back to the original sublist\n\n# Return the modified list with sorted sublists",
            "requirements": "",
            "final_plan": "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n",
            "code": "function sort_sublists(list_of_lists)\n    for i = 1, #list_of_lists do\n        list_of_lists[i] = table.sort(list_of_lists[i])\n    end\n    return list_of_lists\nend",
            "gen_tc": "",
            "sim_score": "0.5270"
        },
        {
            "id": "437",
            "prompt": "Write a function to remove odd characters in a string.",
            "draft_plan": "# Initialize an empty string to store the result\n\n# Iterate through each character in the input string\n    # Check if the index of the current character is even\n        # If the index is even, append the character to the result string\n\n# Return the result string",
            "requirements": "",
            "final_plan": "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2",
            "code": "function removeOddCharacters(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        if i % 2 == 0 then\n            result = result .. string.sub(str, i, i)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5235"
        },
        {
            "id": "426",
            "prompt": "Write a function to filter odd numbers.",
            "draft_plan": "# Initialize an empty list to store the filtered numbers\n\n# Iterate through each number in the input list\n    # Check if the number is odd\n        # If the number is odd, append it to the filtered list\n\n# Return the filtered list",
            "requirements": "",
            "final_plan": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums",
            "code": "function filter_odd_numbers(number_list)\n    local filtered_list = {}\n\n    for _, num in ipairs(number_list) do\n        if num % 2 ~= 0 then\n            table.insert(filtered_list, num)\n        end\n    end\n\n    return filtered_list\nend",
            "gen_tc": "",
            "sim_score": "0.5234"
        },
        {
            "id": "141",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Implement a sorting algorithm such as bubble sort, insertion sort, merge sort, quick sort, etc.\n\n# Define a function to take a list of elements as input\n    # Iterate through the list to compare each element with its adjacent element(s)\n        # Swap elements if they are in the wrong order\n    # Repeat the above steps until the list is sorted\n\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums",
            "code": "-- Bubble Sort implementation\nfunction sort_list(list)\n    local n = #list\n    for i = 1, n-1 do\n        for j = 1, n-i do\n            if list[j] > list[j+1] then\n                list[j], list[j+1] = list[j+1], list[j]\n            end\n        end\n    end\n    return list\nend",
            "gen_tc": "",
            "sim_score": "0.5084"
        },
        {
            "id": "453",
            "prompt": "Write a python function to find the sum of even factors of a number.",
            "draft_plan": "# Initialize the sum of even factors to 0\n\n# Iterate from 1 to the given number (inclusive)\n    # Check if the current number is a factor of the given number\n        # Check if the current number is even\n            # If the current number is even, add it to the sum of even factors\n\n# Return the sum of even factors",
            "requirements": "",
            "final_plan": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res",
            "code": "function sum_of_even_factors(number)\n    local sum = 0\n\n    for i = 1, number do\n        if number % i == 0 and i % 2 == 0 then\n            sum = sum + i\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5006"
        },
        {
            "id": "71",
            "prompt": "Write a function to sort a list of elements.",
            "draft_plan": "# Use the built-in sorted() function to sort the list in ascending order\n# Return the sorted list",
            "requirements": "",
            "final_plan": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums",
            "code": "function sort_list(elements)\n    return sorted(elements)\nend",
            "gen_tc": "",
            "sim_score": "0.4997"
        }
    ],
    "HumanEval/150": [
        {
            "id": "256",
            "prompt": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
            "draft_plan": "# Define a function to check if a number is prime\n    # Check if the number is less than 2, return False\n    # Iterate from 2 to the square root of the number\n        # Check if the number is divisible by any number in the range\n            # If divisible, return False\n    # If the number is not divisible by any number in the range, return True\n\n# Define a function to count the number of primes less than a given number\n    # Initialize a count variable to 0\n    # Iterate from 2 to the given number\n        # Check if the current number is prime\n            # If prime, increment the count\n    # Return the count",
            "requirements": "",
            "final_plan": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr",
            "code": "function isPrime(n)\n    if n < 2 then\n        return false\n    end\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            return false\n        end\n    end\n    return true\nend\n\nfunction countPrimes(n)\n    local count = 0\n    for i = 2, n - 1 do\n        if isPrime(i) then\n            count = count + 1\n        end\n    end\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.6135"
        },
        {
            "id": "160",
            "prompt": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
            "draft_plan": "# Iterate through all possible values of x from 0 to n\n    # Calculate the value of y using the equation y = (n - ax) / b\n    # Check if y is an integer\n        # If y is an integer, return the values of x and y as a tuple\n\n# If no solution is found, return None",
            "requirements": "",
            "final_plan": "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None",
            "code": "function find_solution(a, b, n)\n    for x = 0, n do\n        local y = (n - a * x) / b\n        if y == math.floor(y) then\n            return x, y\n        end\n    end\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.5860"
        },
        {
            "id": "404",
            "prompt": "Write a python function to find the minimum of two numbers.",
            "draft_plan": "# Define a function to find the minimum of two numbers\n    # Check if the first number is less than the second number\n        # If true, return the first number\n        # If false, return the second number\n\n# Call the function and pass two numbers as arguments",
            "requirements": "",
            "final_plan": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ",
            "code": "function find_minimum(a, b)\n    if a < b then\n        return a\n    else\n        return b\n    end\nend\n\n-- Example usage\nlocal num1 = 10\nlocal num2 = 5\nlocal min = find_minimum(num1, num2)\nprint(min)  -- Output: 5",
            "gen_tc": "",
            "sim_score": "0.5367"
        },
        {
            "id": "56",
            "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
            "draft_plan": "# Convert the given number to a string and reverse it\n# Convert the reversed string back to an integer\n# Check if the given number is equal to twice the reversed number plus 1\n# If the condition is true, return True. Otherwise, return False.",
            "requirements": "",
            "final_plan": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
            "code": "function is_one_less_twice_reverse(number)\n    local reverse = tonumber(string.reverse(tostring(number)))\n    if number == (2 * reverse + 1) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5251"
        },
        {
            "id": "126",
            "prompt": "Write a python function to find the sum of common divisors of two given numbers.",
            "draft_plan": "# Find the common divisors of the two given numbers\n    # Find the smaller number among the two\n    # Initialize an empty list to store the common divisors\n    # Iterate from 1 to the smaller number\n        # Check if the current number is a divisor of both given numbers\n            # If yes, add it to the list of common divisors\n\n# Find the sum of the common divisors\n    # Initialize a variable to store the sum\n    # Iterate through the list of common divisors\n        # Add each divisor to the sum\n\n# Return the sum of the common divisors",
            "requirements": "",
            "final_plan": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum",
            "code": "function sumCommonDivisors(a, b)\n    local smaller = math.min(a, b)\n    local divisors = {}\n\n    for i = 1, smaller do\n        if a % i == 0 and b % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n\n    local sum = 0\n    for _, divisor in ipairs(divisors) do\n        sum = sum + divisor\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5194"
        },
        {
            "id": "257",
            "prompt": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.",
            "draft_plan": "# Define the function that takes in two numbers as input\n    # Create a tuple with the second number followed by the first number\n    # Return the tuple\n\n# Call the function with the desired numbers and store the returned tuple",
            "requirements": "",
            "final_plan": "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)",
            "code": "function swap_numbers(num1, num2)\n    return num2, num1\nend\n\nlocal result = swap_numbers(3, 5)\nprint(result)  -- Output: 5   3",
            "gen_tc": "",
            "sim_score": "0.5103"
        },
        {
            "id": "406",
            "prompt": "Write a python function to find whether the parity of a given number is odd.",
            "draft_plan": "# Check if the number modulo 2 is equal to 1\n    # If the modulo is 1, the number is odd\n    # Return True\n\n# If the modulo is not 1, the number is even\n# Return False",
            "requirements": "",
            "final_plan": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False",
            "code": "function is_odd_parity(number)\n    return number % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.5102"
        },
        {
            "id": "58",
            "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
            "draft_plan": "# Check if the product of the two integers is negative\n    # If the product is negative, it means the two integers have opposite signs\n        # Return True\n\n# If the product is not negative, it means the two integers have the same sign\n    # Return False",
            "requirements": "",
            "final_plan": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ",
            "code": "function haveOppositeSigns(a, b)\n    if a * b < 0 then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5074"
        },
        {
            "id": "287",
            "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
            "draft_plan": "# Initialize the sum of squares variable to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Add the square of the current number to the sum of squares variable\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
            "code": "function sum_of_squares(n)\n    local sum = 0\n\n    for i = 1, n do\n        if i % 2 == 0 then\n            sum = sum + (i * i)\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5019"
        },
        {
            "id": "77",
            "prompt": "Write a python function to find whether a number is divisible by 11.",
            "draft_plan": "To determine whether a number is divisible by 11, we can use the following logic:\n\n1. Convert the number to a string.\n2. Iterate through the digits of the number.\n3. Add the digits in odd positions (starting from the rightmost digit) and subtract the sum of the digits in even positions.\n4. If the result is divisible by 11, the original number is also divisible by 11.\n\nHere is the code implementing this logic:\n\n```python\ndef is_divisible_by_11(number):\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Iterate through the digits of the number\n    sum_odd = 0\n    sum_even = 0\n    for i in range(len(number_str)):\n        digit = int(number_str[i])\n        \n        # Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0:\n            sum_odd += digit\n        else:\n            sum_even += digit\n    \n    # Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0:\n        return True\n    else:\n        return False\n```\n\nYou can use this function to check if a number is divisible by 11. For example:\n\n```python\nprint(is_divisible_by_11(121))  # Output: True\nprint(is_divisible_by_11(123))  # Output: False\n```",
            "requirements": "",
            "final_plan": "def is_Diff(n): \n    return (n % 11 == 0) ",
            "code": "function is_divisible_by_11(number)\n    -- Convert the number to a string\n    local number_str = tostring(number)\n    \n    -- Iterate through the digits of the number\n    local sum_odd = 0\n    local sum_even = 0\n    for i = 1, string.len(number_str) do\n        local digit = tonumber(string.sub(number_str, i, i))\n        \n        -- Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0 then\n            sum_even = sum_even + digit\n        else\n            sum_odd = sum_odd + digit\n        end\n    end\n    \n    -- Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0 then\n        return true\n    else\n        return false\n    end\nend\n\nprint(is_divisible_by_11(121))  -- Output: true\nprint(is_divisible_by_11(123))  -- Output: false",
            "gen_tc": "",
            "sim_score": "0.4942"
        }
    ],
    "HumanEval/151": [
        {
            "id": "72",
            "prompt": "Write a python function to check whether the given number can be represented as the difference of two squares or not.",
            "draft_plan": "# Iterate through all numbers from 1 to sqrt(n)\n    # Calculate the square of the current number\n    # Check if the difference between n and the square is a perfect square\n\n# If a perfect square difference is found, return True\n# If no perfect square difference is found, return False",
            "requirements": "",
            "final_plan": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False",
            "code": "function can_be_difference_of_squares(n)\n    for i = 1, math.floor(math.sqrt(n)) do\n        local square = i * i\n        local difference = n - square\n        local square_root = math.sqrt(difference)\n        if square_root == math.floor(square_root) then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.7115"
        },
        {
            "id": "287",
            "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
            "draft_plan": "# Initialize the sum of squares variable to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Add the square of the current number to the sum of squares variable\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
            "code": "function sum_of_squares(n)\n    local sum = 0\n\n    for i = 1, n do\n        if i % 2 == 0 then\n            sum = sum + (i * i)\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6921"
        },
        {
            "id": "267",
            "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of squares\n# Initialize a counter variable to keep track of the odd numbers\n# Initialize a variable to store the current odd number\n\n# Iterate from 1 to n (inclusive)\n    # Check if the current number is odd\n        # If it is, square the number and add it to the sum of squares\n        # Increase the counter variable by 1\n        # Check if the counter variable is equal to n\n            # If it is, break the loop\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
            "code": "function sum_of_squares(n)\n    local sum = 0\n    local counter = 0\n    local odd_number = 1\n\n    for i = 1, n do\n        if odd_number % 2 == 1 then\n            sum = sum + odd_number^2\n            counter = counter + 1\n        end\n\n        if counter == n then\n            break\n        end\n\n        odd_number = odd_number + 1\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6867"
        },
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.6220"
        },
        {
            "id": "412",
            "prompt": "Write a python function to remove odd numbers from a given list.",
            "draft_plan": "# Create an empty list to store the even numbers\n\n# Iterate through each number in the given list\n    # Check if the number is even (number % 2 == 0)\n        # If the number is even, append it to the list of even numbers\n\n# Return the list of even numbers",
            "requirements": "",
            "final_plan": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
            "code": "function remove_odd_numbers(lst)\n    local even_lst = {}\n\n    for _, num in ipairs(lst) do\n        if num % 2 == 0 then\n            table.insert(even_lst, num)\n        end\n    end\n\n    return even_lst\nend",
            "gen_tc": "",
            "sim_score": "0.5719"
        },
        {
            "id": "145",
            "prompt": "Write a python function to find the maximum difference between any two elements in a given array.",
            "draft_plan": "# If the array is empty, return None\n# Initialize the maximum difference to zero\n\n# Iterate through each element in the array\n    # Iterate through each element after the current element\n        # Calculate the difference between the current element and the subsequent element\n        # Update the maximum difference if the calculated difference is greater than the current maximum difference\n\n# Return the maximum difference",
            "requirements": "",
            "final_plan": "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ",
            "code": "function max_difference(arr)\n    if #arr == 0 then\n        return nil\n    end\n\n    local max_diff = 0\n\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            local diff = math.abs(arr[i] - arr[j])\n            if diff > max_diff then\n                max_diff = diff\n            end\n        end\n    end\n\n    return max_diff\nend",
            "gen_tc": "",
            "sim_score": "0.5717"
        },
        {
            "id": "273",
            "prompt": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
            "draft_plan": "# Define a function that takes in two tuples as arguments\n    # Create an empty list to store the result of the subtraction\n\n    # Iterate through the indices of the tuples\n        # Subtract the element at the current index of the first tuple from the element at the current index of the second tuple\n        # Append the result to the list\n\n    # Return the resulting list",
            "requirements": "",
            "final_plan": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) ",
            "code": "function subtract_tuples(tuple1, tuple2)\n    local result = {}\n\n    for i = 1, #tuple1 do\n        local subtracted_value = tuple1[i] - tuple2[i]\n        table.insert(result, subtracted_value)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5581"
        },
        {
            "id": "436",
            "prompt": "Write a python function to return the negative numbers in a list.",
            "draft_plan": "# Initialize an empty list to store the negative numbers\n\n# Iterate through each element in the input list\n    # Check if the current element is less than 0\n        # If the element is negative, append it to the list of negative numbers\n\n# Return the list of negative numbers",
            "requirements": "",
            "final_plan": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ",
            "code": "function getNegativeNumbers(numbers)\n    local negativeNumbers = {}\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            table.insert(negativeNumbers, num)\n        end\n    end\n\n    return negativeNumbers\nend",
            "gen_tc": "",
            "sim_score": "0.5558"
        },
        {
            "id": "133",
            "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
            "draft_plan": "# Initialize the sum of negative numbers to 0\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If it is negative, add it to the sum\n\n# Return the sum of negative numbers",
            "requirements": "",
            "final_plan": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)",
            "code": "function sum_of_negative_numbers(numbers)\n    local sum = 0\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            sum = sum + num\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5531"
        },
        {
            "id": "453",
            "prompt": "Write a python function to find the sum of even factors of a number.",
            "draft_plan": "# Initialize the sum of even factors to 0\n\n# Iterate from 1 to the given number (inclusive)\n    # Check if the current number is a factor of the given number\n        # Check if the current number is even\n            # If the current number is even, add it to the sum of even factors\n\n# Return the sum of even factors",
            "requirements": "",
            "final_plan": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res",
            "code": "function sum_of_even_factors(number)\n    local sum = 0\n\n    for i = 1, number do\n        if number % i == 0 and i % 2 == 0 then\n            sum = sum + i\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5460"
        }
    ],
    "HumanEval/152": [
        {
            "id": "145",
            "prompt": "Write a python function to find the maximum difference between any two elements in a given array.",
            "draft_plan": "# If the array is empty, return None\n# Initialize the maximum difference to zero\n\n# Iterate through each element in the array\n    # Iterate through each element after the current element\n        # Calculate the difference between the current element and the subsequent element\n        # Update the maximum difference if the calculated difference is greater than the current maximum difference\n\n# Return the maximum difference",
            "requirements": "",
            "final_plan": "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ",
            "code": "function max_difference(arr)\n    if #arr == 0 then\n        return nil\n    end\n\n    local max_diff = 0\n\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            local diff = math.abs(arr[i] - arr[j])\n            if diff > max_diff then\n                max_diff = diff\n            end\n        end\n    end\n\n    return max_diff\nend",
            "gen_tc": "",
            "sim_score": "0.4849"
        },
        {
            "id": "63",
            "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.",
            "draft_plan": "# Initialize the maximum difference variable to 0\n\n# Iterate through each pair in the list\n    # Calculate the difference between the second element and the first element of the current pair\n    # Check if the current difference is greater than the maximum difference\n        # If it is, update the maximum difference\n\n# Return the maximum difference",
            "requirements": "",
            "final_plan": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ",
            "code": "function find_max_difference(tuple_list)\n    local max_difference = 0\n\n    for _, tuple in ipairs(tuple_list) do\n        local difference = tuple[2] - tuple[1]\n        if difference > max_difference then\n            max_difference = difference\n        end\n    end\n\n    return max_difference\nend",
            "gen_tc": "",
            "sim_score": "0.4235"
        },
        {
            "id": "280",
            "prompt": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
            "draft_plan": "# Initialize a variable to store the index position of the element, initialized to -1\n# Iterate through each element in the array along with its index\n    # Check if the current element is equal to the target element\n        # If they are equal, update the index variable with the current index and break out of the loop\n\n# Check if the index variable is still equal to -1\n    # If it is, set the boolean variable to False, indicating the element is not found\n    # If it is not, set the boolean variable to True, indicating the element is found\n\n# Return a tuple with the boolean variable and the index variable",
            "requirements": "",
            "final_plan": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos",
            "code": "function findElement(arr, element)\n    local index = -1\n\n    for i, value in ipairs(arr) do\n        if value == element then\n            index = i\n            break\n        end\n    end\n\n    local found = index ~= -1\n    return found, index\nend",
            "gen_tc": "",
            "sim_score": "0.4151"
        },
        {
            "id": "20",
            "prompt": "Write a function to check if the given number is woodball or not.",
            "draft_plan": "# Check if the given number is less than or equal to 1\n    # If it is, return False as woodball numbers must be greater than 1\n\n# Initialize a variable to keep track of the previous number in the sequence\n# Start a loop from 2 to the square root of the given number\n    # Check if the given number is divisible by the current loop variable\n        # If it is, check if the current loop variable is equal to the previous number plus 1\n            # If it is, update the previous number to the current loop variable\n            # If it is not, return False as the sequence is broken\n\n# If the loop completes without returning False, return True as the given number is a woodball number",
            "requirements": "",
            "final_plan": "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False",
            "code": "function isWoodballNumber(number)\n    if number <= 1 then\n        return false\n    end\n\n    local previousNumber = 1\n\n    for i = 2, math.sqrt(number) do\n        if number % i == 0 then\n            if i == previousNumber + 1 then\n                previousNumber = i\n            else\n                return false\n            end\n        end\n    end\n\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.4116"
        },
        {
            "id": "72",
            "prompt": "Write a python function to check whether the given number can be represented as the difference of two squares or not.",
            "draft_plan": "# Iterate through all numbers from 1 to sqrt(n)\n    # Calculate the square of the current number\n    # Check if the difference between n and the square is a perfect square\n\n# If a perfect square difference is found, return True\n# If no perfect square difference is found, return False",
            "requirements": "",
            "final_plan": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False",
            "code": "function can_be_difference_of_squares(n)\n    for i = 1, math.floor(math.sqrt(n)) do\n        local square = i * i\n        local difference = n - square\n        local square_root = math.sqrt(difference)\n        if square_root == math.floor(square_root) then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.3556"
        },
        {
            "id": "415",
            "prompt": "Write a python function to find a pair with highest product from a given array of integers.",
            "draft_plan": "# Initialize the maximum product to -infinity\n\n# Iterate through each pair of numbers in the array\n    # Calculate the product of the current pair\n    # Update the maximum product if the current product is greater\n\n# Return the pair with the highest product",
            "requirements": "",
            "final_plan": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ",
            "code": "function find_highest_product(arr)\n    local max_product = -math.huge\n    local pair = {}\n\n    for i = 1, #arr-1 do\n        for j = i+1, #arr do\n            local product = arr[i] * arr[j]\n            if product > max_product then\n                max_product = product\n                pair = {arr[i], arr[j]}\n            end\n        end\n    end\n\n    return pair\nend",
            "gen_tc": "",
            "sim_score": "0.3545"
        },
        {
            "id": "414",
            "prompt": "Write a python function to check whether any value in a sequence exists in a sequence or not.",
            "draft_plan": "# Iterate through each value in the first sequence\n    # Check if the value exists in the second sequence\n        # If the value exists, return True\n\n# If no matching value is found, return False",
            "requirements": "",
            "final_plan": "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False",
            "code": "function checkValueExistence(seq1, seq2)\n    for _, value1 in ipairs(seq1) do\n        for _, value2 in ipairs(seq2) do\n            if value1 == value2 then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.3537"
        },
        {
            "id": "464",
            "prompt": "Write a function to check if all values are same in a dictionary.",
            "draft_plan": "# Get the first value from the dictionary\n# Iterate through all the values in the dictionary\n    # Check if the current value is equal to the first value\n        # If not equal, return False\n\n# If all values are equal, return True",
            "requirements": "",
            "final_plan": "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result",
            "code": "function checkAllSame(dict)\n    local firstValue = nil\n    \n    for _, value in pairs(dict) do\n        if firstValue == nil then\n            firstValue = value\n        elseif value ~= firstValue then\n            return false\n        end\n    end\n    \n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.3498"
        },
        {
            "id": "250",
            "prompt": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each element in the tuple\n    # Check if the current element is equal to the target element\n        # If it is, increment the counter by 1\n\n# Return the value of the counter variable",
            "requirements": "",
            "final_plan": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ",
            "code": "function count_occurrences(t, element)\n    local count = 0\n    \n    for i = 1, #t do\n        if t[i] == element then\n            count = count + 1\n        end\n    end\n    \n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.3428"
        },
        {
            "id": "70",
            "prompt": "Write a function to find whether all the given tuples have equal length or not.",
            "draft_plan": "# Get the length of the first tuple in the list\n\n# Iterate through each tuple in the list\n    # Check if the length of the current tuple is not equal to the length of the first tuple\n        # If lengths are not equal, return False\n\n# If all tuples have equal lengths, return True",
            "requirements": "",
            "final_plan": "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1",
            "code": "function check_tuple_lengths(tuples)\n    local first_length = #tuples[1]\n\n    for _, tuple in ipairs(tuples) do\n        if #tuple ~= first_length then\n            return false\n        end\n    end\n\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.3365"
        }
    ],
    "HumanEval/153": [
        {
            "id": "418",
            "prompt": "Write a python function to find the element of a list having maximum length.",
            "draft_plan": "# Initialize a variable to store the index of the element with maximum length\n# Initialize a variable to store the maximum length, initially set to 0\n\n# Iterate through each element in the list\n    # Check if the length of the current element is greater than the maximum length\n        # If so, update the maximum length and the index of the element\n\n# Return the element at the index with maximum length",
            "requirements": "",
            "final_plan": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList",
            "code": "function findMaxElementLength(lst)\n    local maxIndex = 1\n    local maxLength = 0\n\n    for i, element in ipairs(lst) do\n        local length = string.len(element)\n        if length > maxLength then\n            maxLength = length\n            maxIndex = i\n        end\n    end\n\n    return lst[maxIndex]\nend",
            "gen_tc": "",
            "sim_score": "0.4291"
        },
        {
            "id": "90",
            "prompt": "Write a python function to find the length of the longest word.",
            "draft_plan": "# Split the input sentence into words using the split() function\n# Initialize a variable maxLength to 0\n\n# Iterate through each word in the list of words\n    # Check if the length of the current word is greater than maxLength\n        # If it is, update maxLength with the length of the current word\n\n# Return maxLength",
            "requirements": "",
            "final_plan": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max",
            "code": "function find_longest_word(sentence)\n    local words = split_sentence(sentence)\n    local max_length = 0\n\n    for _, word in ipairs(words) do\n        local length = string.len(word)\n        if length > max_length then\n            max_length = length\n        end\n    end\n\n    return max_length\nend\n\nfunction split_sentence(sentence)\n    local words = {}\n    for word in string.gmatch(sentence, \"%S+\") do\n        table.insert(words, word)\n    end\n    return words\nend",
            "gen_tc": "",
            "sim_score": "0.4103"
        },
        {
            "id": "393",
            "prompt": "Write a function to find the list with maximum length.",
            "draft_plan": "# Initialize the maximum length and the list with maximum length to empty values\n\n# Iterate through each list in the input list of lists\n    # Check if the length of the current list is greater than the maximum length\n        # If so, update the maximum length and the list with maximum length\n\n# Return the list with maximum length",
            "requirements": "",
            "final_plan": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)",
            "code": "function findListWithMaxLength(lists)\n    local maxLength = 0\n    local listWithMaxLength = {}\n\n    for _, list in ipairs(lists) do\n        local length = #list\n\n        if length > maxLength then\n            maxLength = length\n            listWithMaxLength = list\n        end\n    end\n\n    return listWithMaxLength\nend",
            "gen_tc": "",
            "sim_score": "0.4006"
        },
        {
            "id": "290",
            "prompt": "Write a function to find the list of maximum length in a list of lists.",
            "draft_plan": "# Initialize a variable to store the maximum length and an empty list to store the list with maximum length\n\n# Iterate through each list in the input list of lists\n    # Check if the length of the current list is greater than the maximum length\n        # If so, update the maximum length and the list with maximum length\n\n# Return the list with maximum length",
            "requirements": "",
            "final_plan": "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)",
            "code": "function find_max_length_list(lists)\n    local max_length = 0\n    local max_length_list = {}\n\n    for _, list in ipairs(lists) do\n        if #list > max_length then\n            max_length = #list\n            max_length_list = list\n        end\n    end\n\n    return max_length_list\nend",
            "gen_tc": "",
            "sim_score": "0.3922"
        },
        {
            "id": "461",
            "prompt": "Write a python function to count the upper case characters in a given string.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of uppercase characters\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter variable\n\n# Return the counter variable, which represents the number of uppercase characters in the string",
            "requirements": "",
            "final_plan": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
            "code": "function count_uppercase_chars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= 'A' and char <= 'Z' then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.3826"
        },
        {
            "id": "443",
            "prompt": "Write a python function to find the largest negative number from the given list.",
            "draft_plan": "# Initialize a variable 'largest_negative' to None\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If 'largest_negative' is None or the current number is greater than 'largest_negative', update 'largest_negative' to the current number\n\n# Return 'largest_negative'",
            "requirements": "",
            "final_plan": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
            "code": "function find_largest_negative(numbers)\n    local largest_negative = nil\n\n    for _, number in ipairs(numbers) do\n        if number < 0 then\n            if largest_negative == nil or number > largest_negative then\n                largest_negative = number\n            end\n        end\n    end\n\n    return largest_negative\nend",
            "gen_tc": "",
            "sim_score": "0.3772"
        },
        {
            "id": "450",
            "prompt": "Write a function to extract specified size of strings from a given list of string values.",
            "draft_plan": "# Initialize an empty list to store the extracted strings\n\n# Iterate through each string in the given list\n    # Check if the length of the current string is equal to the specified size\n        # If it matches, append the string to the result list\n\n# Return the list of extracted strings",
            "requirements": "",
            "final_plan": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result",
            "code": "function extract_strings(strings, size)\n    local extracted_strings = {}\n\n    for _, str in ipairs(strings) do\n        if string.len(str) == size then\n            table.insert(extracted_strings, str)\n        end\n    end\n\n    return extracted_strings\nend",
            "gen_tc": "",
            "sim_score": "0.3752"
        },
        {
            "id": "57",
            "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.",
            "draft_plan": "# Sort the list of digits in descending order\n\n# Concatenate all the digits in the sorted list\n\n# Convert the concatenated string to an integer and return it",
            "requirements": "",
            "final_plan": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ",
            "code": "function largest_number(digits)\n    table.sort(digits, function(a, b) return a > b end)\n    return tonumber(table.concat(digits))\nend",
            "gen_tc": "",
            "sim_score": "0.3650"
        },
        {
            "id": "130",
            "prompt": "Write a function to find the item with maximum frequency in a given list.",
            "draft_plan": "# Create an empty dictionary to store the frequency count of each item\n# Iterate through each item in the given list\n    # If the item is already in the dictionary, increment its count by 1\n    # If the item is not in the dictionary, add it with count 1\n# Find the item with the maximum frequency by finding the key with the maximum value in the dictionary\n# Return the item with the maximum frequency",
            "requirements": "",
            "final_plan": "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]",
            "code": "function findMaxFrequency(lst)\n    local frequency = {}\n    \n    for _, item in ipairs(lst) do\n        if frequency[item] then\n            frequency[item] = frequency[item] + 1\n        else\n            frequency[item] = 1\n        end\n    end\n    \n    local maxFrequency = 0\n    local maxItem = nil\n    \n    for item, count in pairs(frequency) do\n        if count > maxFrequency then\n            maxFrequency = count\n            maxItem = item\n        end\n    end\n    \n    return maxItem\nend",
            "gen_tc": "",
            "sim_score": "0.3598"
        },
        {
            "id": "462",
            "prompt": "Write a function to find all possible combinations of the elements of a given list.",
            "draft_plan": "# Import the combinations function from the itertools module\n\n# Define the function to find all possible combinations\n    # Initialize an empty list to store the combinations\n    \n    # Use a for loop to iterate through different combination lengths\n        # Generate all combinations of the given list for the current combination length\n        # Append the combinations to the result list\n    \n    # Return the list of all possible combinations",
            "requirements": "",
            "final_plan": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result",
            "code": "Sorry, I can't generate Lua code at the moment. However, here's the Python code to find all possible combinations of elements in a given list using the `combinations` function from the `itertools` module:\n\n```python\nfrom itertools import combinations\n\ndef find_combinations(input_list):\n    result = []\n    n = len(input_list)\n\n    for r in range(1, n + 1):\n        combinations_list = list(combinations(input_list, r))\n        result.extend(combinations_list)\n\n    return result\n```\n\nYou can call this function by passing the input list as an argument, and it will return a list containing all possible combinations of the elements.",
            "gen_tc": "",
            "sim_score": "0.3593"
        }
    ],
    "HumanEval/154": [
        {
            "id": "91",
            "prompt": "Write a function to check if a string is present as a substring in a given list of string values.",
            "draft_plan": "# Iterate through each string in the list\n    # Check if the given substring is present in the current string\n        # If found, return True\n\n# If the substring is not found in any string, return False",
            "requirements": "",
            "final_plan": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False",
            "code": "function isSubstringPresent(substring, stringList)\n    for _, str in ipairs(stringList) do\n        if string.find(str, substring) then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.6172"
        },
        {
            "id": "285",
            "prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
            "draft_plan": "# Iterate through each character in the input string\n    # Check if the current character is 'a'\n        # If it is, check the next two characters (if they exist) to see if they are 'b'\n            # If they are, return True\n    # If the current character is not 'a', continue to the next character\n\n# If no 'a' followed by two or three 'b' characters is found, return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function contains_a_followed_by_b(string)\n    local len = string.len(string)\n    for i = 1, len - 3 do\n        if string.sub(string, i, i) == 'a' then\n            if string.sub(string, i+1, i+3) == 'bb' or string.sub(string, i+1, i+3) == 'bbb' then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.5709"
        },
        {
            "id": "396",
            "prompt": "Write a function to check whether the given string starts and ends with the same character or not.",
            "draft_plan": "# Check if the first character of the string is equal to the last character\n    # If they are equal, return True\n    # If they are not equal, return False",
            "requirements": "",
            "final_plan": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ",
            "code": "function starts_ends_same(str)\n    local first_char = string.sub(str, 1, 1)\n    local last_char = string.sub(str, -1)\n    \n    if first_char == last_char then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5421"
        },
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.5400"
        },
        {
            "id": "16",
            "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
            "draft_plan": "# Split the input string by the underscore character to get a list of substrings\n# Iterate through each substring in the list\n    # Check if the substring consists of lowercase letters only\n        # If not, return False\n\n# If all substrings are valid, return True",
            "requirements": "",
            "final_plan": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function contains_lowercase_sequences(str)\n    local substrings = split(str, \"_\")\n\n    for _, substr in ipairs(substrings) do\n        if not is_lowercase(substr) then\n            return false\n        end\n    end\n\n    return true\nend\n\nfunction split(str, delimiter)\n    local result = {}\n    local from = 1\n    local delim_from, delim_to = string.find(str, delimiter, from)\n\n    while delim_from do\n        table.insert(result, string.sub(str, from, delim_from - 1))\n        from = delim_to + 1\n        delim_from, delim_to = string.find(str, delimiter, from)\n    end\n\n    table.insert(result, string.sub(str, from))\n\n    return result\nend\n\nfunction is_lowercase(str)\n    return str:match(\"^[a-z]*$\") ~= nil\nend",
            "gen_tc": "",
            "sim_score": "0.5167"
        },
        {
            "id": "305",
            "prompt": "Write a function to return two words from a list of words starting with letter 'p'.",
            "draft_plan": "# Initialize an empty list to store the words starting with 'p'\n\n# Iterate through each word in the list\n    # Check if the first letter of the word is 'p'\n        # If yes, append the word to the list\n\n# Check if the list has at least two words\n    # If yes, return the first two words from the list\n    # If no, return None or an appropriate message",
            "requirements": "",
            "final_plan": "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()",
            "code": "function words_starting_with_p(word_list)\n    local p_words = {}\n\n    for _, word in ipairs(word_list) do\n        if string.sub(word, 1, 1) == \"p\" then\n            table.insert(p_words, word)\n        end\n    end\n\n    if #p_words >= 2 then\n        return p_words[1], p_words[2]\n    else\n        return nil\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5145"
        },
        {
            "id": "434",
            "prompt": "Write a function that matches a string that has an a followed by one or more b's.",
            "draft_plan": "import re\n\ndef match_string(string):\n    pattern = r'a+b+'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False",
            "requirements": "",
            "final_plan": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n",
            "code": "function match_string(str)\n    local pattern = \"a+b+\"\n    if string.match(str, pattern) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5114"
        },
        {
            "id": "238",
            "prompt": "Write a python function to count the number of non-empty substrings of a given string.",
            "draft_plan": "# Initialize a counter variable to 0\n\n# Iterate through each character and its index in the input string\n    # Iterate through each substring starting from the current character\n        # Increment the counter variable by 1 for each non-empty substring\n\n# Return the counter variable",
            "requirements": "",
            "final_plan": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ",
            "code": "function count_substrings(str)\n    local count = 0\n    for i = 1, #str do\n        for j = i, #str do\n            local substring = string.sub(str, i, j)\n            if substring ~= \"\" then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.5091"
        },
        {
            "id": "128",
            "prompt": "Write a function to find words that are longer than n characters from a given list of words.",
            "draft_plan": "# Create an empty list to store the result\n\n# Iterate through each word in the given list\n    # Check if the length of the current word is greater than n\n        # If the condition is satisfied, append the word to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t",
            "code": "function find_longer_words(word_list, n)\n    local result = {}\n\n    for _, word in ipairs(word_list) do\n        if string.len(word) > n then\n            table.insert(result, word)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5028"
        },
        {
            "id": "69",
            "prompt": "Write a function to check whether a list contains the given sublist or not.",
            "draft_plan": "# Iterate through each index in the main list\n    # Check if the current index and the sublist length is less than or equal to the main list length\n        # Check if the sublist matches the elements starting from the current index in the main list\n\n# If the sublist is found, return True\n# Otherwise, return False",
            "requirements": "",
            "final_plan": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set",
            "code": "function contains_sublist(main_list, sublist)\n    for i = 1, #main_list do\n        if (i + #sublist - 1) <= #main_list then\n            local match = true\n            for j = 1, #sublist do\n                if main_list[i + j - 1] ~= sublist[j] then\n                    match = false\n                    break\n                end\n            end\n            if match then\n                return true\n            end\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.4850"
        }
    ],
    "HumanEval/155": [
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.7349"
        },
        {
            "id": "166",
            "prompt": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
            "draft_plan": "# Initialize a variable to keep track of the count of pairs\n# Iterate through each element in the list\n    # Iterate through each element after the current element\n        # Check if the xor of the current pair is an even number\n            # If it is, increment the count of pairs\n\n# Return the count of pairs",
            "requirements": "",
            "final_plan": "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count",
            "code": "function count_even_xor_pairs(list)\n    local pair_count = 0\n\n    for i = 1, #list do\n        for j = i+1, #list do\n            if (list[i] ~ list[j]) % 2 == 0 then\n                pair_count = pair_count + 1\n            end\n        end\n    end\n\n    return pair_count\nend",
            "gen_tc": "",
            "sim_score": "0.7330"
        },
        {
            "id": "412",
            "prompt": "Write a python function to remove odd numbers from a given list.",
            "draft_plan": "# Create an empty list to store the even numbers\n\n# Iterate through each number in the given list\n    # Check if the number is even (number % 2 == 0)\n        # If the number is even, append it to the list of even numbers\n\n# Return the list of even numbers",
            "requirements": "",
            "final_plan": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
            "code": "function remove_odd_numbers(lst)\n    local even_lst = {}\n\n    for _, num in ipairs(lst) do\n        if num % 2 == 0 then\n            table.insert(even_lst, num)\n        end\n    end\n\n    return even_lst\nend",
            "gen_tc": "",
            "sim_score": "0.7246"
        },
        {
            "id": "235",
            "prompt": "Write a python function to set all even bits of a given number.",
            "draft_plan": "# Create a mask with all even bits set to 1 and odd bits set to 0\n# Perform bitwise OR operation between the given number and the mask\n# Return the updated number",
            "requirements": "",
            "final_plan": "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) ",
            "code": "function set_even_bits(n)\n    local mask = 0xAAAAAAAA -- Mask with all even bits set to 1 and odd bits set to 0\n    return bit.bor(n, mask)\nend",
            "gen_tc": "",
            "sim_score": "0.7067"
        },
        {
            "id": "109",
            "prompt": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
            "draft_plan": "# Convert the binary string to a list of characters\n# Initialize a counter variable to keep track of the number of odd numbers\n\n# Rotate the binary string the given number of times\n    # Remove the last character from the binary string and prepend it to the front\n\n# Convert the rotated binary string back to a string\n# Iterate through each character in the rotated binary string\n    # Convert the character to an integer\n    # Check if the integer value is odd\n        # If so, increment the counter\n\n# Return the counter value",
            "requirements": "",
            "final_plan": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ",
            "code": "function count_odd_numbers(binary_str, rotations)\n    local binary_list = {}\n    local counter = 0\n\n    -- Convert the binary string to a list of characters\n    for char in string.gmatch(binary_str, \".\") do\n        table.insert(binary_list, char)\n    end\n\n    -- Rotate the binary string the given number of times\n    for i = 1, rotations do\n        local last_char = table.remove(binary_list)\n        table.insert(binary_list, 1, last_char)\n    end\n\n    -- Convert the rotated binary string back to a string\n    local rotated_binary_str = table.concat(binary_list)\n\n    -- Iterate through each character in the rotated binary string\n    for i = 1, string.len(rotated_binary_str) do\n        local char = string.sub(rotated_binary_str, i, i)\n        local num = tonumber(char)\n        \n        -- Check if the integer value is odd\n        if num % 2 == 1 then\n            counter = counter + 1\n        end\n    end\n\n    return counter\nend",
            "gen_tc": "",
            "sim_score": "0.6829"
        },
        {
            "id": "426",
            "prompt": "Write a function to filter odd numbers.",
            "draft_plan": "# Initialize an empty list to store the filtered numbers\n\n# Iterate through each number in the input list\n    # Check if the number is odd\n        # If the number is odd, append it to the filtered list\n\n# Return the filtered list",
            "requirements": "",
            "final_plan": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums",
            "code": "function filter_odd_numbers(number_list)\n    local filtered_list = {}\n\n    for _, num in ipairs(number_list) do\n        if num % 2 ~= 0 then\n            table.insert(filtered_list, num)\n        end\n    end\n\n    return filtered_list\nend",
            "gen_tc": "",
            "sim_score": "0.6745"
        },
        {
            "id": "406",
            "prompt": "Write a python function to find whether the parity of a given number is odd.",
            "draft_plan": "# Check if the number modulo 2 is equal to 1\n    # If the modulo is 1, the number is odd\n    # Return True\n\n# If the modulo is not 1, the number is even\n# Return False",
            "requirements": "",
            "final_plan": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False",
            "code": "function is_odd_parity(number)\n    return number % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.6706"
        },
        {
            "id": "453",
            "prompt": "Write a python function to find the sum of even factors of a number.",
            "draft_plan": "# Initialize the sum of even factors to 0\n\n# Iterate from 1 to the given number (inclusive)\n    # Check if the current number is a factor of the given number\n        # Check if the current number is even\n            # If the current number is even, add it to the sum of even factors\n\n# Return the sum of even factors",
            "requirements": "",
            "final_plan": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res",
            "code": "function sum_of_even_factors(number)\n    local sum = 0\n\n    for i = 1, number do\n        if number % i == 0 and i % 2 == 0 then\n            sum = sum + i\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.6571"
        },
        {
            "id": "274",
            "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
            "draft_plan": "# Import the math module\n\n# Define a function that takes in a positive integer n\n    # Initialize a variable `sum_even` to store the sum of even index binomial coefficients\n    # Iterate from 0 to n\n        # Calculate the binomial coefficient using the math module's comb function\n        # Check if the index is even\n            # If it is even, add the binomial coefficient to `sum_even`\n    # Return `sum_even`",
            "requirements": "",
            "final_plan": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ",
            "code": "import math\n\ndef sum_even_binomial_coefficients(n):\n    sum_even = 0\n    for i in range(n+1):\n        coefficient = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even += coefficient\n    return sum_even",
            "gen_tc": "",
            "sim_score": "0.6553"
        },
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.6521"
        }
    ],
    "HumanEval/156": [
        {
            "id": "477",
            "prompt": "Write a python function to convert the given string to lower case.",
            "draft_plan": "# Convert the input string to lower case using the lower() method\n# Return the lower case string",
            "requirements": "",
            "final_plan": "def is_lower(string):\n  return (string.lower())",
            "code": "function convert_to_lower(str)\n    return string.lower(str)\nend",
            "gen_tc": "",
            "sim_score": "0.5212"
        },
        {
            "id": "62",
            "prompt": "Write a python function to find smallest number in a list.",
            "draft_plan": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
            "requirements": "",
            "final_plan": "def smallest_num(xs):\n  return min(xs)\n",
            "code": "function find_smallest_number(lst)\n    local smallest = lst[1]\n    for i = 2, #lst do\n        if lst[i] < smallest then\n            smallest = lst[i]\n        end\n    end\n    return smallest\nend",
            "gen_tc": "",
            "sim_score": "0.4666"
        },
        {
            "id": "479",
            "prompt": "Write a python function to find the first digit of a given number.",
            "draft_plan": "# Convert the given number to a string\n\n# Iterate through each character in the string\n    # Check if the character is a digit\n        # If it is, return the character as the first digit\n\n# If no digit is found, return \"None\"",
            "requirements": "",
            "final_plan": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ",
            "code": "function firstDigit(number)\n    local numberStr = tostring(number)\n\n    for i = 1, string.len(numberStr) do\n        local char = string.sub(numberStr, i, i)\n        if string.match(char, \"%d\") then\n            return char\n        end\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.4577"
        },
        {
            "id": "56",
            "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
            "draft_plan": "# Convert the given number to a string and reverse it\n# Convert the reversed string back to an integer\n# Check if the given number is equal to twice the reversed number plus 1\n# If the condition is true, return True. Otherwise, return False.",
            "requirements": "",
            "final_plan": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
            "code": "function is_one_less_twice_reverse(number)\n    local reverse = tonumber(string.reverse(tostring(number)))\n    if number == (2 * reverse + 1) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4366"
        },
        {
            "id": "116",
            "prompt": "Write a function to convert a given tuple of positive integers into a single integer.",
            "draft_plan": "# Initialize an empty string to store the converted integer\n\n# Iterate through each element in the tuple\n    # Convert each element to a string and concatenate it to the existing string\n\n# Convert the string to an integer and return it",
            "requirements": "",
            "final_plan": "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result",
            "code": "function convert_tuple_to_integer(tuple)\n    local str = \"\"\n    for _, num in ipairs(tuple) do\n        str = str .. tostring(num)\n    end\n    return tonumber(str)\nend",
            "gen_tc": "",
            "sim_score": "0.4357"
        },
        {
            "id": "407",
            "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.",
            "draft_plan": "# Convert the given number to a list of digits\n\n# Find the first index (from right to left) where the digit is smaller than the digit to its right\n    # If no such index is found, return \"None\" since the number is already the largest possible\n\n# Find the smallest digit to the right of the found index that is larger than the digit at the found index\n\n# Swap the found digit with the smallest larger digit to its right\n\n# Sort the digits to the right of the found index in ascending order\n\n# Concatenate the digits to form the next bigger number\n\n# Return the next bigger number",
            "requirements": "",
            "final_plan": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False",
            "code": "function nextBiggerNumber(num)\n    -- Convert the number to a list of digits\n    local digits = {}\n    local n = num\n    while n > 0 do\n        table.insert(digits, 1, n % 10)\n        n = math.floor(n / 10)\n    end\n\n    -- Find the first index where the digit is smaller than the digit to its right\n    local i = #digits - 1\n    while i >= 1 and digits[i] >= digits[i+1] do\n        i = i - 1\n    end\n\n    -- If no such index is found, return \"None\"\n    if i < 1 then\n        return \"None\"\n    end\n\n    -- Find the smallest larger digit to the right of the found index\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n\n    -- Swap the found digit with the smallest larger digit to its right\n    digits[i], digits[j] = digits[j], digits[i]\n\n    -- Sort the digits to the right of the found index in ascending order\n    for k = i+1, #digits do\n        for l = k+1, #digits do\n            if digits[k] > digits[l] then\n                digits[k], digits[l] = digits[l], digits[k]\n            end\n        end\n    end\n\n    -- Concatenate the digits to form the next bigger number\n    local nextNum = 0\n    for k = 1, #digits do\n        nextNum = nextNum * 10 + digits[k]\n    end\n\n    return nextNum\nend",
            "gen_tc": "",
            "sim_score": "0.4323"
        },
        {
            "id": "283",
            "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
            "draft_plan": "# Convert the input integer to a string\n# Initialize a dictionary to store the frequency of each digit\n\n# Iterate through each digit in the string\n    # Increment the frequency of the digit in the dictionary\n\n# Iterate through each digit in the string\n    # Check if the frequency of the digit is greater than the digit itself\n        # If yes, return False\n\n# If all frequencies are less than or equal to their respective digits, return True",
            "requirements": "",
            "final_plan": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
            "code": "function check_frequency(num)\n    local str_num = tostring(num)\n    local freq_dict = {}\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        freq_dict[digit] = (freq_dict[digit] or 0) + 1\n    end\n\n    for i = 1, #str_num do\n        local digit = string.sub(str_num, i, i)\n        if freq_dict[digit] > tonumber(digit) then\n            return false\n        end\n    end\n\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.4232"
        },
        {
            "id": "435",
            "prompt": "Write a python function to find the last digit of a given number.",
            "draft_plan": "To find the last digit of a given number, you can use the modulo operator (`%`) to get the remainder when dividing the number by 10. The remainder will be the last digit of the number.\n\nHere's the code logic:\n\n1. Define a function `find_last_digit` that takes a number as input.\n2. Inside the function, calculate the remainder of the number when divided by 10 using the modulo operator: `last_digit = number % 10`.\n3. Return the value of `last_digit`.\n\nHere's the code implementation in Python:\n\n```python\ndef find_last_digit(number):\n    last_digit = number % 10\n    return last_digit\n```\n\nYou can then call this function by passing a number as an argument to get the last digit. For example:\n\n```python\nprint(find_last_digit(12345))  # Output: 5\nprint(find_last_digit(987654321))  # Output: 1\nprint(find_last_digit(0))  # Output: 0\n```",
            "requirements": "",
            "final_plan": "def last_Digit(n) :\n    return (n % 10) ",
            "code": "function find_last_digit(number)\n    local last_digit = number % 10\n    return last_digit\nend\n\nprint(find_last_digit(12345))  -- Output: 5\nprint(find_last_digit(987654321))  -- Output: 1\nprint(find_last_digit(0))  -- Output: 0",
            "gen_tc": "",
            "sim_score": "0.4204"
        },
        {
            "id": "461",
            "prompt": "Write a python function to count the upper case characters in a given string.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of uppercase characters\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter variable\n\n# Return the counter variable, which represents the number of uppercase characters in the string",
            "requirements": "",
            "final_plan": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
            "code": "function count_uppercase_chars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= 'A' and char <= 'Z' then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4117"
        },
        {
            "id": "389",
            "prompt": "Write a function to find the n'th lucas number.",
            "draft_plan": "# Define a function to find the n-th Lucas number\ndef lucas_number(n):\n    # Base cases for n = 0 and n = 1\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Lucas numbers\n    lucas_0 = 2\n    lucas_1 = 1\n    \n    # Iterate from 2 to n\n    for i in range(2, n+1):\n        # Calculate the current Lucas number using the formula L(n) = L(n-1) + L(n-2)\n        lucas_n = lucas_0 + lucas_1\n        \n        # Update the values of previous Lucas numbers for the next iteration\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    \n    # Return the n-th Lucas number\n    return lucas_n",
            "requirements": "",
            "final_plan": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ",
            "code": "function lucas_number(n)\n    -- Base cases for n = 0 and n = 1\n    if n == 0 then\n        return 2\n    elseif n == 1 then\n        return 1\n    end\n    \n    -- Initialize the first two Lucas numbers\n    local lucas_0 = 2\n    local lucas_1 = 1\n    \n    -- Iterate from 2 to n\n    for i = 2, n do\n        -- Calculate the current Lucas number using the formula L(n) = L(n-1) + L(n-2)\n        local lucas_n = lucas_0 + lucas_1\n        \n        -- Update the values of previous Lucas numbers for the next iteration\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    end\n    \n    -- Return the n-th Lucas number\n    return lucas_n\nend",
            "gen_tc": "",
            "sim_score": "0.4073"
        }
    ],
    "HumanEval/157": [
        {
            "id": "293",
            "prompt": "Write a function to find the third side of a right angled triangle.",
            "draft_plan": "# Import the math module\n\n# Define a function to find the third side of a right-angled triangle\n    # Calculate the square of the two given sides\n    # Calculate the sum of the squares of the two given sides\n    # Take the square root of the sum to find the length of the hypotenuse\n    # Return the length of the hypotenuse\n\n# Call the function with the given sides of the triangle and print the result",
            "requirements": "",
            "final_plan": "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s",
            "code": "function findThirdSide(a, b)\n    local c = math.sqrt(a^2 + b^2)\n    return c\nend\n\nlocal a = 3\nlocal b = 4\n\nlocal c = findThirdSide(a, b)\nprint(\"The length of the hypotenuse is: \" .. c)",
            "gen_tc": "",
            "sim_score": "0.7673"
        },
        {
            "id": "14",
            "prompt": "Write a python function to find the volume of a triangular prism.",
            "draft_plan": "# Define a function to calculate the volume of a triangular prism\n    # Accept the base length, base width, and height of the prism as input parameters\n    # Calculate the area of the base triangle by multiplying the base length and base width, and dividing by 2\n    # Calculate the volume by multiplying the area of the base triangle by the height of the prism\n    # Return the calculated volume\n\n# Example usage:\n# volume = calculate_volume_of_triangular_prism(5, 6, 10)",
            "requirements": "",
            "final_plan": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ",
            "code": "function calculate_volume_of_triangular_prism(base_length, base_width, height)\n    local base_area = (base_length * base_width) / 2\n    local volume = base_area * height\n    return volume\nend\n\n-- Example usage\nlocal volume = calculate_volume_of_triangular_prism(5, 6, 10)\nprint(volume)",
            "gen_tc": "",
            "sim_score": "0.5115"
        },
        {
            "id": "17",
            "prompt": "Write a function that returns the perimeter of a square given its side length as input.",
            "draft_plan": "# Define a function named \"square_perimeter\" that takes a parameter \"side_length\"\n    # Calculate the perimeter of the square by multiplying the side length by 4\n    # Return the perimeter\n\n# Call the function with a test value for the side length to verify the result",
            "requirements": "",
            "final_plan": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter",
            "code": "function square_perimeter(side_length)\n    local perimeter = side_length * 4\n    return perimeter\nend\n\n-- Test the function\nlocal side_length = 5\nlocal perimeter = square_perimeter(side_length)\nprint(perimeter)  -- Output: 20",
            "gen_tc": "",
            "sim_score": "0.4605"
        },
        {
            "id": "59",
            "prompt": "Write a function to find the nth octagonal number.",
            "draft_plan": "# Function to find the nth octagonal number\ndef find_octagonal_number(n):\n    # Calculate the nth octagonal number using the formula\n    octagonal_number = 3 * n * (n - 1) + 1\n    \n    # Return the result\n    return octagonal_number\n\n# Test the function\nn = 5\nresult = find_octagonal_number(n)\nprint(f\"The {n}th octagonal number is: {result}\")",
            "requirements": "",
            "final_plan": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ",
            "code": "-- Function to find the nth octagonal number\nfunction find_octagonal_number(n)\n    -- Calculate the nth octagonal number using the formula\n    local octagonal_number = 3 * n * (n - 1) + 1\n    \n    -- Return the result\n    return octagonal_number\nend\n\n-- Test the function\nlocal n = 5\nlocal result = find_octagonal_number(n)\nprint(\"The \"..n..\"th octagonal number is: \"..result)",
            "gen_tc": "",
            "sim_score": "0.4345"
        },
        {
            "id": "58",
            "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
            "draft_plan": "# Check if the product of the two integers is negative\n    # If the product is negative, it means the two integers have opposite signs\n        # Return True\n\n# If the product is not negative, it means the two integers have the same sign\n    # Return False",
            "requirements": "",
            "final_plan": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ",
            "code": "function haveOppositeSigns(a, b)\n    if a * b < 0 then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4289"
        },
        {
            "id": "70",
            "prompt": "Write a function to find whether all the given tuples have equal length or not.",
            "draft_plan": "# Get the length of the first tuple in the list\n\n# Iterate through each tuple in the list\n    # Check if the length of the current tuple is not equal to the length of the first tuple\n        # If lengths are not equal, return False\n\n# If all tuples have equal lengths, return True",
            "requirements": "",
            "final_plan": "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1",
            "code": "function check_tuple_lengths(tuples)\n    local first_length = #tuples[1]\n\n    for _, tuple in ipairs(tuples) do\n        if #tuple ~= first_length then\n            return false\n        end\n    end\n\n    return true\nend",
            "gen_tc": "",
            "sim_score": "0.4162"
        },
        {
            "id": "79",
            "prompt": "Write a python function to check whether the length of the word is odd or not.",
            "draft_plan": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
            "requirements": "",
            "final_plan": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
            "code": "function is_word_length_odd(word)\n    local length = string.len(word)\n    return length % 2 == 1\nend",
            "gen_tc": "",
            "sim_score": "0.4131"
        },
        {
            "id": "56",
            "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
            "draft_plan": "# Convert the given number to a string and reverse it\n# Convert the reversed string back to an integer\n# Check if the given number is equal to twice the reversed number plus 1\n# If the condition is true, return True. Otherwise, return False.",
            "requirements": "",
            "final_plan": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
            "code": "function is_one_less_twice_reverse(number)\n    local reverse = tonumber(string.reverse(tostring(number)))\n    if number == (2 * reverse + 1) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.4068"
        },
        {
            "id": "163",
            "prompt": "Write a function to calculate the area of a regular polygon given the length and number of its sides.",
            "draft_plan": "# Import the math module for trigonometric functions\nimport math\n\n# Define a function to calculate the area of a regular polygon\ndef calculate_area(length, sides):\n    # Calculate the apothem (distance from center to midpoint of a side)\n    apothem = length / (2 * math.tan(math.pi / sides))\n    \n    # Calculate the area using the formula: area = (1/2) * apothem * perimeter\n    perimeter = length * sides\n    area = (1 / 2) * apothem * perimeter\n    \n    return area",
            "requirements": "",
            "final_plan": "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area",
            "code": "-- Define a function to calculate the area of a regular polygon\nfunction calculate_area(length, sides)\n    -- Calculate the apothem (distance from center to midpoint of a side)\n    local apothem = length / (2 * math.tan(math.pi / sides))\n    \n    -- Calculate the area using the formula: area = (1/2) * apothem * perimeter\n    local perimeter = length * sides\n    local area = (1 / 2) * apothem * perimeter\n    \n    return area\nend",
            "gen_tc": "",
            "sim_score": "0.4059"
        },
        {
            "id": "458",
            "prompt": "Write a function to find the area of a rectangle.",
            "draft_plan": "To find the area of a rectangle, we need the length and width of the rectangle. The formula to calculate the area of a rectangle is:\n\nArea = length * width\n\nHere is the code logic to find the area of a rectangle:\n\n1. Define a function named `calculate_area` that takes two parameters, `length` and `width`.\n2. Inside the function, calculate the area by multiplying the `length` and `width` parameters.\n3. Return the calculated area from the function.\n\nHere is the code implementation in Python:\n\n```python\ndef calculate_area(length, width):\n    area = length * width\n    return area\n\n# Example usage:\nlength = 5\nwidth = 3\narea = calculate_area(length, width)\nprint(\"The area of the rectangle is:\", area)\n```\n\nThis will output:\n```\nThe area of the rectangle is: 15\n```\n\nYou can replace the values of `length` and `width` with your own values to find the area of a different rectangle.",
            "requirements": "",
            "final_plan": "def rectangle_area(l,b):\n  area=l*b\n  return area",
            "code": "function calculate_area(length, width)\n    local area = length * width\n    return area\nend\n\n-- Example usage:\nlocal length = 5\nlocal width = 3\nlocal area = calculate_area(length, width)\nprint(\"The area of the rectangle is:\", area)",
            "gen_tc": "",
            "sim_score": "0.3931"
        }
    ],
    "HumanEval/158": [
        {
            "id": "90",
            "prompt": "Write a python function to find the length of the longest word.",
            "draft_plan": "# Split the input sentence into words using the split() function\n# Initialize a variable maxLength to 0\n\n# Iterate through each word in the list of words\n    # Check if the length of the current word is greater than maxLength\n        # If it is, update maxLength with the length of the current word\n\n# Return maxLength",
            "requirements": "",
            "final_plan": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max",
            "code": "function find_longest_word(sentence)\n    local words = split_sentence(sentence)\n    local max_length = 0\n\n    for _, word in ipairs(words) do\n        local length = string.len(word)\n        if length > max_length then\n            max_length = length\n        end\n    end\n\n    return max_length\nend\n\nfunction split_sentence(sentence)\n    local words = {}\n    for word in string.gmatch(sentence, \"%S+\") do\n        table.insert(words, word)\n    end\n    return words\nend",
            "gen_tc": "",
            "sim_score": "0.6782"
        },
        {
            "id": "128",
            "prompt": "Write a function to find words that are longer than n characters from a given list of words.",
            "draft_plan": "# Create an empty list to store the result\n\n# Iterate through each word in the given list\n    # Check if the length of the current word is greater than n\n        # If the condition is satisfied, append the word to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t",
            "code": "function find_longer_words(word_list, n)\n    local result = {}\n\n    for _, word in ipairs(word_list) do\n        if string.len(word) > n then\n            table.insert(result, word)\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.6163"
        },
        {
            "id": "418",
            "prompt": "Write a python function to find the element of a list having maximum length.",
            "draft_plan": "# Initialize a variable to store the index of the element with maximum length\n# Initialize a variable to store the maximum length, initially set to 0\n\n# Iterate through each element in the list\n    # Check if the length of the current element is greater than the maximum length\n        # If so, update the maximum length and the index of the element\n\n# Return the element at the index with maximum length",
            "requirements": "",
            "final_plan": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList",
            "code": "function findMaxElementLength(lst)\n    local maxIndex = 1\n    local maxLength = 0\n\n    for i, element in ipairs(lst) do\n        local length = string.len(element)\n        if length > maxLength then\n            maxLength = length\n            maxIndex = i\n        end\n    end\n\n    return lst[maxIndex]\nend",
            "gen_tc": "",
            "sim_score": "0.6080"
        },
        {
            "id": "290",
            "prompt": "Write a function to find the list of maximum length in a list of lists.",
            "draft_plan": "# Initialize a variable to store the maximum length and an empty list to store the list with maximum length\n\n# Iterate through each list in the input list of lists\n    # Check if the length of the current list is greater than the maximum length\n        # If so, update the maximum length and the list with maximum length\n\n# Return the list with maximum length",
            "requirements": "",
            "final_plan": "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)",
            "code": "function find_max_length_list(lists)\n    local max_length = 0\n    local max_length_list = {}\n\n    for _, list in ipairs(lists) do\n        if #list > max_length then\n            max_length = #list\n            max_length_list = list\n        end\n    end\n\n    return max_length_list\nend",
            "gen_tc": "",
            "sim_score": "0.5405"
        },
        {
            "id": "305",
            "prompt": "Write a function to return two words from a list of words starting with letter 'p'.",
            "draft_plan": "# Initialize an empty list to store the words starting with 'p'\n\n# Iterate through each word in the list\n    # Check if the first letter of the word is 'p'\n        # If yes, append the word to the list\n\n# Check if the list has at least two words\n    # If yes, return the first two words from the list\n    # If no, return None or an appropriate message",
            "requirements": "",
            "final_plan": "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()",
            "code": "function words_starting_with_p(word_list)\n    local p_words = {}\n\n    for _, word in ipairs(word_list) do\n        if string.sub(word, 1, 1) == \"p\" then\n            table.insert(p_words, word)\n        end\n    end\n\n    if #p_words >= 2 then\n        return p_words[1], p_words[2]\n    else\n        return nil\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5224"
        },
        {
            "id": "454",
            "prompt": "Write a function that matches a word containing 'z'.",
            "draft_plan": "# Iterate through each word in the given list\n    # Check if the character 'z' is present in the word\n        # If 'z' is found, add the word to a new list\n\n# Return the new list containing words with 'z'",
            "requirements": "",
            "final_plan": "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function match_word_with_z(word_list)\n    local z_words = {}\n\n    for _, word in ipairs(word_list) do\n        if string.find(word, 'z') ~= nil then\n            table.insert(z_words, word)\n        end\n    end\n\n    return z_words\nend",
            "gen_tc": "",
            "sim_score": "0.5206"
        },
        {
            "id": "393",
            "prompt": "Write a function to find the list with maximum length.",
            "draft_plan": "# Initialize the maximum length and the list with maximum length to empty values\n\n# Iterate through each list in the input list of lists\n    # Check if the length of the current list is greater than the maximum length\n        # If so, update the maximum length and the list with maximum length\n\n# Return the list with maximum length",
            "requirements": "",
            "final_plan": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)",
            "code": "function findListWithMaxLength(lists)\n    local maxLength = 0\n    local listWithMaxLength = {}\n\n    for _, list in ipairs(lists) do\n        local length = #list\n\n        if length > maxLength then\n            maxLength = length\n            listWithMaxLength = list\n        end\n    end\n\n    return listWithMaxLength\nend",
            "gen_tc": "",
            "sim_score": "0.5149"
        },
        {
            "id": "395",
            "prompt": "Write a python function to find the first non-repeated character in a given string.",
            "draft_plan": "# Create an empty dictionary to store the count of each character\n# Iterate through each character in the given string\n    # If the character is already in the dictionary, increase its count by 1\n    # If the character is not in the dictionary, add it with a count of 1\n\n# Iterate through each character in the given string again\n    # Check if the count of the current character in the dictionary is 1\n        # If it is, return the current character as the first non-repeated character\n\n# If no non-repeated character is found, return \"None\"",
            "requirements": "",
            "final_plan": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None",
            "code": "function firstNonRepeatedChar(str)\n    local charCount = {}\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if charCount[char] then\n            charCount[char] = charCount[char] + 1\n        else\n            charCount[char] = 1\n        end\n    end\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if charCount[char] == 1 then\n            return char\n        end\n    end\n\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.5146"
        },
        {
            "id": "130",
            "prompt": "Write a function to find the item with maximum frequency in a given list.",
            "draft_plan": "# Create an empty dictionary to store the frequency count of each item\n# Iterate through each item in the given list\n    # If the item is already in the dictionary, increment its count by 1\n    # If the item is not in the dictionary, add it with count 1\n# Find the item with the maximum frequency by finding the key with the maximum value in the dictionary\n# Return the item with the maximum frequency",
            "requirements": "",
            "final_plan": "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]",
            "code": "function findMaxFrequency(lst)\n    local frequency = {}\n    \n    for _, item in ipairs(lst) do\n        if frequency[item] then\n            frequency[item] = frequency[item] + 1\n        else\n            frequency[item] = 1\n        end\n    end\n    \n    local maxFrequency = 0\n    local maxItem = nil\n    \n    for item, count in pairs(frequency) do\n        if count > maxFrequency then\n            maxFrequency = count\n            maxItem = item\n        end\n    end\n    \n    return maxItem\nend",
            "gen_tc": "",
            "sim_score": "0.5071"
        },
        {
            "id": "294",
            "prompt": "Write a function to find the maximum value in a given heterogeneous list.",
            "draft_plan": "# Initialize the maximum value with the first element in the list\n\n# Iterate through each element in the list starting from the second element\n    # Compare the current element with the maximum value\n        # If the current element is greater than the maximum value, update the maximum value\n\n# Return the maximum value",
            "requirements": "",
            "final_plan": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)",
            "code": "function find_max_value(heterogeneous_list)\n    local max_value = heterogeneous_list[1]\n\n    for i = 2, #heterogeneous_list do\n        if heterogeneous_list[i] > max_value then\n            max_value = heterogeneous_list[i]\n        end\n    end\n\n    return max_value\nend",
            "gen_tc": "",
            "sim_score": "0.5018"
        }
    ],
    "HumanEval/159": [
        {
            "id": "264",
            "prompt": "Write a function to calculate a dog's age in dog's years.",
            "draft_plan": "# Define a function called calculate_dog_age that takes in one parameter: human_age\n\n# Define a variable called dog_age and set it to 0\n\n# If human_age is less than or equal to 2, set dog_age to human_age multiplied by 10.5\n# If human_age is greater than 2, calculate the dog's age in dog's years by adding:\n    # 2 (for the first two years) multiplied by 10.5\n    # The remaining years multiplied by 4\n\n# Return the value of dog_age as the result of the function",
            "requirements": "",
            "final_plan": "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age",
            "code": "function calculate_dog_age(human_age)\n    local dog_age = 0\n\n    if human_age <= 2 then\n        dog_age = human_age * 10.5\n    else\n        dog_age = (2 * 10.5) + ((human_age - 2) * 4)\n    end\n\n    return dog_age\nend",
            "gen_tc": "",
            "sim_score": "0.4595"
        },
        {
            "id": "160",
            "prompt": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
            "draft_plan": "# Iterate through all possible values of x from 0 to n\n    # Calculate the value of y using the equation y = (n - ax) / b\n    # Check if y is an integer\n        # If y is an integer, return the values of x and y as a tuple\n\n# If no solution is found, return None",
            "requirements": "",
            "final_plan": "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None",
            "code": "function find_solution(a, b, n)\n    for x = 0, n do\n        local y = (n - a * x) / b\n        if y == math.floor(y) then\n            return x, y\n        end\n    end\n    return nil\nend",
            "gen_tc": "",
            "sim_score": "0.4457"
        },
        {
            "id": "239",
            "prompt": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
            "draft_plan": "# Initialize a variable count to keep track of the number of possible sequences\n\n# Create a recursive function to find the number of possible sequences\n    # Base case: if n is equal to 0, return 1 (as we have found a valid sequence)\n    \n    # Initialize a variable total_count to keep track of the total number of sequences\n    \n    # Iterate through all possible values for the current element in the sequence\n        # Check if the current element is greater than or equal to twice the previous element and less than or equal to m\n            # If it is, recursively call the function with n-1 and update the total_count by adding the result\n            \n    # Return the total_count\n    \n# Call the recursive function with the given values of m and n and store the result in the variable count\n\n# Return the value of count as the final result",
            "requirements": "",
            "final_plan": "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]",
            "code": "function count_sequences(m, n)\n    local count = 0\n\n    local function find_sequences(prev, remaining)\n        if remaining == 0 then\n            return 1\n        end\n\n        local total_count = 0\n        for i = prev * 2, m do\n            total_count = total_count + find_sequences(i, remaining - 1)\n        end\n\n        return total_count\n    end\n\n    count = find_sequences(1, n)\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.4242"
        },
        {
            "id": "392",
            "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
            "draft_plan": "# Create a dictionary to store the maximum sum for each number\n# Set the base cases for f(0) and f(1) as 0 and 1 respectively\n\n# Define a recursive function to calculate the maximum sum for a given number\n    # Check if the maximum sum for the current number has already been calculated\n        # If yes, return the stored value\n        # If no, calculate the maximum sum using the given equation\n\n# Call the recursive function to calculate the maximum sum for the given number",
            "requirements": "",
            "final_plan": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]",
            "code": "function max_sum(n)\n    local memo = {}  -- dictionary to store the maximum sum for each number\n\n    -- base cases\n    memo[0] = 0\n    memo[1] = 1\n\n    -- recursive function to calculate maximum sum\n    local function calculate_sum(num)\n        if memo[num] ~= nil then  -- check if maximum sum is already calculated\n            return memo[num]\n        end\n\n        -- calculate maximum sum using the given equation\n        memo[num] = math.max(calculate_sum(math.floor(num/2)) + calculate_sum(math.floor(num/3)) + calculate_sum(math.floor(num/4)) + calculate_sum(math.floor(num/5)), num)\n        return memo[num]\n    end\n\n    return calculate_sum(n)  -- call the recursive function to calculate maximum sum for given number\nend",
            "gen_tc": "",
            "sim_score": "0.4160"
        },
        {
            "id": "415",
            "prompt": "Write a python function to find a pair with highest product from a given array of integers.",
            "draft_plan": "# Initialize the maximum product to -infinity\n\n# Iterate through each pair of numbers in the array\n    # Calculate the product of the current pair\n    # Update the maximum product if the current product is greater\n\n# Return the pair with the highest product",
            "requirements": "",
            "final_plan": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ",
            "code": "function find_highest_product(arr)\n    local max_product = -math.huge\n    local pair = {}\n\n    for i = 1, #arr-1 do\n        for j = i+1, #arr do\n            local product = arr[i] * arr[j]\n            if product > max_product then\n                max_product = product\n                pair = {arr[i], arr[j]}\n            end\n        end\n    end\n\n    return pair\nend",
            "gen_tc": "",
            "sim_score": "0.4116"
        },
        {
            "id": "308",
            "prompt": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.",
            "draft_plan": "# Create an empty list to store the products\n\n# Iterate through each element in the first list\n    # Iterate through each element in the second list\n        # Calculate the product of the current elements from both lists\n        # Append the product to the list of products\n\n# Sort the list of products in descending order\n\n# Return the specified number of largest products from the list",
            "requirements": "",
            "final_plan": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result",
            "code": "function find_largest_products(list1, list2, num_products)\n    local products = {}\n\n    for i = 1, #list1 do\n        for j = 1, #list2 do\n            local product = list1[i] * list2[j]\n            table.insert(products, product)\n        end\n    end\n\n    table.sort(products, function(a, b) return a > b end)\n\n    local largest_products = {}\n    for i = 1, num_products do\n        if i <= #products then\n            table.insert(largest_products, products[i])\n        else\n            break\n        end\n    end\n\n    return largest_products\nend",
            "gen_tc": "",
            "sim_score": "0.4104"
        },
        {
            "id": "59",
            "prompt": "Write a function to find the nth octagonal number.",
            "draft_plan": "# Function to find the nth octagonal number\ndef find_octagonal_number(n):\n    # Calculate the nth octagonal number using the formula\n    octagonal_number = 3 * n * (n - 1) + 1\n    \n    # Return the result\n    return octagonal_number\n\n# Test the function\nn = 5\nresult = find_octagonal_number(n)\nprint(f\"The {n}th octagonal number is: {result}\")",
            "requirements": "",
            "final_plan": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ",
            "code": "-- Function to find the nth octagonal number\nfunction find_octagonal_number(n)\n    -- Calculate the nth octagonal number using the formula\n    local octagonal_number = 3 * n * (n - 1) + 1\n    \n    -- Return the result\n    return octagonal_number\nend\n\n-- Test the function\nlocal n = 5\nlocal result = find_octagonal_number(n)\nprint(\"The \"..n..\"th octagonal number is: \"..result)",
            "gen_tc": "",
            "sim_score": "0.4005"
        },
        {
            "id": "468",
            "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
            "draft_plan": "# Initialize the maximum product as 1\n# Initialize an empty list to store the increasing subsequence\n\n# Iterate through each number in the array\n    # Initialize a temporary list to store the current increasing subsequence\n    # Iterate through each number before the current number\n        # Check if the current number is greater than the previous number and if the product of the current number and the previous maximum product is greater than the current maximum product\n            # If the condition is satisfied, update the maximum product and the temporary list with the current increasing subsequence\n    # Append the current number to the temporary list\n\n# Return the maximum product and the increasing subsequence list",
            "requirements": "",
            "final_plan": "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)",
            "code": "function findMaxProduct(nums)\n    local maxProduct = 1\n    local subsequence = {}\n    \n    for i = 1, #nums do\n        local temp = {nums[i]}\n        \n        for j = 1, i-1 do\n            if nums[i] > nums[j] and nums[i] * maxProduct > maxProduct then\n                maxProduct = nums[i] * maxProduct\n                temp = table.copy(subsequence)\n            end\n        end\n        \n        table.insert(temp, nums[i])\n        subsequence = table.copy(temp)\n    end\n    \n    return maxProduct, subsequence\nend\n\n-- Helper function to copy a table\nfunction table.copy(t)\n    local copy = {}\n    for key, value in pairs(t) do\n        copy[key] = value\n    end\n    return copy\nend",
            "gen_tc": "",
            "sim_score": "0.4001"
        },
        {
            "id": "309",
            "prompt": "Write a python function to find the maximum of two numbers.",
            "draft_plan": "# Define a function that takes two numbers as input\n\n# Check if the first number is greater than the second number\n    # If it is, return the first number as the maximum\n    # Otherwise, return the second number as the maximum",
            "requirements": "",
            "final_plan": "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b ",
            "code": "function find_maximum(num1, num2)\n    if num1 > num2 then\n        return num1\n    else\n        return num2\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.3982"
        },
        {
            "id": "463",
            "prompt": "Write a function to find the maximum product subarray of the given array.",
            "draft_plan": "# Initialize variables to store the maximum product, current maximum product, current minimum product, and the result\n# Set the maximum product and current maximum product to the first element of the array\n# Iterate through each element in the array starting from the second element\n    # Update the current maximum product and current minimum product by considering the current element\n    # Check if the current element is negative\n        # If it is negative, swap the current maximum product and current minimum product\n    # Check if the current maximum product is greater than the maximum product\n        # If it is, update the maximum product\n    # Check if the current element is greater than the current maximum product\n        # If it is, update the current maximum product\n    # Check if the current element is less than the current minimum product\n        # If it is, update the current minimum product\n    # Check if the maximum product is greater than the result\n        # If it is, update the result\n\n# Return the result",
            "requirements": "",
            "final_plan": "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far",
            "code": "function maxProductSubarray(nums)\n    local maxProduct = nums[1]\n    local currMaxProduct = nums[1]\n    local currMinProduct = nums[1]\n    local result = nums[1]\n    \n    for i = 2, #nums do\n        local num = nums[i]\n        local tempMaxProduct = math.max(num, math.max(currMaxProduct * num, currMinProduct * num))\n        currMinProduct = math.min(num, math.min(currMaxProduct * num, currMinProduct * num))\n        currMaxProduct = tempMaxProduct\n        maxProduct = math.max(maxProduct, currMaxProduct)\n        result = math.max(result, maxProduct)\n    end\n    \n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.3939"
        }
    ],
    "HumanEval/160": [
        {
            "id": "127",
            "prompt": "Write a function to multiply two integers.",
            "draft_plan": "# Initialize the result to 0\n\n# If either of the integers is 0, return 0\n\n# If both integers are negative, convert them to positive\n    # Multiply the positive integers and change the sign of the result to negative\n\n# If only one integer is negative, convert it to positive\n    # Multiply the positive integers and change the sign of the result to negative\n\n# If both integers are positive, multiply them normally\n\n# Return the result",
            "requirements": "",
            "final_plan": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)",
            "code": "function multiply(a, b)\n    local result = 0\n    \n    if a == 0 or b == 0 then\n        return 0\n    end\n    \n    if a < 0 and b < 0 then\n        a = -a\n        b = -b\n    elseif a < 0 then\n        a = -a\n        result = -result\n    elseif b < 0 then\n        b = -b\n        result = -result\n    end\n    \n    while b > 0 do\n        if b % 2 == 1 then\n            result = result + a\n        end\n        a = a * 2\n        b = math.floor(b / 2)\n    end\n    \n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5929"
        },
        {
            "id": "445",
            "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
            "draft_plan": "# Create an empty list to store the result of multiplication\n\n# Iterate through the indexes of the tuples using the range of the length of the tuples\n    # Multiply the elements at the current index of both tuples\n    # Append the result to the list\n\n# Return the list",
            "requirements": "",
            "final_plan": "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
            "code": "function multiply_tuples(tuple1, tuple2)\n    local result = {}\n\n    for i = 1, #tuple1 do\n        local multiplication = tuple1[i] * tuple2[i]\n        table.insert(result, multiplication)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5840"
        },
        {
            "id": "261",
            "prompt": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
            "draft_plan": "# Create an empty list to store the result of the division operation\n\n# Iterate through the elements of the tuples\n    # Perform the division operation on the corresponding elements of the tuples\n    # Append the result to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
            "code": "function tuple_division(t1, t2)\n    local result = {}\n\n    for i = 1, #t1 do\n        local div = t1[i] / t2[i]\n        table.insert(result, div)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5683"
        },
        {
            "id": "273",
            "prompt": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
            "draft_plan": "# Define a function that takes in two tuples as arguments\n    # Create an empty list to store the result of the subtraction\n\n    # Iterate through the indices of the tuples\n        # Subtract the element at the current index of the first tuple from the element at the current index of the second tuple\n        # Append the result to the list\n\n    # Return the resulting list",
            "requirements": "",
            "final_plan": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) ",
            "code": "function subtract_tuples(tuple1, tuple2)\n    local result = {}\n\n    for i = 1, #tuple1 do\n        local subtracted_value = tuple1[i] - tuple2[i]\n        table.insert(result, subtracted_value)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5617"
        },
        {
            "id": "98",
            "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
            "draft_plan": "# Initialize the product variable to 1\n\n# Iterate through each number in the list\n    # Multiply the product by the current number\n\n# Divide the product by the length of the list\n\n# Return the result",
            "requirements": "",
            "final_plan": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ",
            "code": "function multiply_and_divide(numbers)\n    local product = 1\n\n    for _, num in ipairs(numbers) do\n        product = product * num\n    end\n\n    local result = product / #numbers\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5336"
        },
        {
            "id": "436",
            "prompt": "Write a python function to return the negative numbers in a list.",
            "draft_plan": "# Initialize an empty list to store the negative numbers\n\n# Iterate through each element in the input list\n    # Check if the current element is less than 0\n        # If the element is negative, append it to the list of negative numbers\n\n# Return the list of negative numbers",
            "requirements": "",
            "final_plan": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ",
            "code": "function getNegativeNumbers(numbers)\n    local negativeNumbers = {}\n\n    for _, num in ipairs(numbers) do\n        if num < 0 then\n            table.insert(negativeNumbers, num)\n        end\n    end\n\n    return negativeNumbers\nend",
            "gen_tc": "",
            "sim_score": "0.5247"
        },
        {
            "id": "58",
            "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
            "draft_plan": "# Check if the product of the two integers is negative\n    # If the product is negative, it means the two integers have opposite signs\n        # Return True\n\n# If the product is not negative, it means the two integers have the same sign\n    # Return False",
            "requirements": "",
            "final_plan": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ",
            "code": "function haveOppositeSigns(a, b)\n    if a * b < 0 then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5141"
        },
        {
            "id": "282",
            "prompt": "Write a function to subtract two lists element-wise.",
            "draft_plan": "# Create an empty list to store the result\n\n# Iterate through the indices of the lists\n    # Subtract the elements at the corresponding indices of the two lists\n    # Append the result to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)",
            "code": "function subtract_lists(list1, list2)\n    local result = {}\n\n    for i = 1, math.min(#list1, #list2) do\n        local subtraction = list1[i] - list2[i]\n        table.insert(result, subtraction)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5082"
        },
        {
            "id": "429",
            "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.",
            "draft_plan": "# Initialize an empty list to store the elementwise AND tuples\n\n# Iterate through each element in the first tuple\n    # Iterate through each element in the second tuple\n        # Perform elementwise AND operation on the corresponding elements of the tuples\n        # Append the result to the list of elementwise AND tuples\n\n# Return the list of elementwise AND tuples",
            "requirements": "",
            "final_plan": "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
            "code": "function elementwise_and_tuples(tuple1, tuple2)\n    local result = {}\n  \n    for i=1, #tuple1 do\n        for j=1, #tuple2 do\n            local elementwise_and = tuple1[i] and tuple2[j]\n            table.insert(result, elementwise_and)\n        end\n    end\n  \n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5028"
        },
        {
            "id": "399",
            "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
            "draft_plan": "# Initialize an empty list to store the result of bitwise XOR operation on each tuple\n\n# Iterate through each tuple in the input list\n    # Initialize a variable to store the result of XOR operation\n    # Iterate through each element in the tuple\n        # Perform bitwise XOR operation with the current element and the result variable\n    # Append the result of XOR operation to the result list\n\n# Return the result list",
            "requirements": "",
            "final_plan": "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
            "code": "function bitwise_xor(tuples)\n    local result = {}\n\n    for _, tuple in ipairs(tuples) do\n        local xor_result = 0\n\n        for _, element in ipairs(tuple) do\n            xor_result = bit.bxor(xor_result, element)\n        end\n\n        table.insert(result, xor_result)\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.5000"
        }
    ],
    "HumanEval/161": [
        {
            "id": "477",
            "prompt": "Write a python function to convert the given string to lower case.",
            "draft_plan": "# Convert the input string to lower case using the lower() method\n# Return the lower case string",
            "requirements": "",
            "final_plan": "def is_lower(string):\n  return (string.lower())",
            "code": "function convert_to_lower(str)\n    return string.lower(str)\nend",
            "gen_tc": "",
            "sim_score": "0.7067"
        },
        {
            "id": "478",
            "prompt": "Write a function to remove lowercase substrings from a given string.",
            "draft_plan": "# Initialize an empty string to store the final result\n\n# Iterate through each character in the given string\n    # Check if the character is uppercase\n        # If the character is uppercase, append it to the final result string\n\n# Return the final result string",
            "requirements": "",
            "final_plan": "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)",
            "code": "function removeLowercaseSubstrings(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        if string.upper(c) == c then\n            result = result .. c\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.6496"
        },
        {
            "id": "131",
            "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
            "draft_plan": "# Create a list of vowels (including both lowercase and uppercase)\n# Convert the input string into a list of characters\n\n# Initialize two pointers: one at the start of the string and one at the end\n# Iterate while the pointers don't overlap\n    # Check if the character at the start pointer is a vowel\n        # If it is, then check if the character at the end pointer is also a vowel\n            # If it is, swap the characters at the start and end pointers\n            # Move the start pointer to the next character\n            # Move the end pointer to the previous character\n        # If the character at the end pointer is not a vowel, move the end pointer to the previous character\n    \n# Convert the modified list of characters back into a string and return it",
            "requirements": "",
            "final_plan": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string",
            "code": "function reverse_vowels(str)\n    local vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }\n    local chars = {}\n    for i = 1, string.len(str) do\n        table.insert(chars, string.sub(str, i, i))\n    end\n    \n    local start = 1\n    local finish = string.len(str)\n    \n    while start < finish do\n        if is_vowel(chars[start], vowels) then\n            while not is_vowel(chars[finish], vowels) and finish > start do\n                finish = finish - 1\n            end\n            if finish > start then\n                chars[start], chars[finish] = chars[finish], chars[start]\n                start = start + 1\n                finish = finish - 1\n            end\n        else\n            start = start + 1\n        end\n    end\n    \n    return table.concat(chars)\nend\n\nfunction is_vowel(char, vowels)\n    for _, vowel in ipairs(vowels) do\n        if char == vowel then\n            return true\n        end\n    end\n    return false\nend",
            "gen_tc": "",
            "sim_score": "0.6452"
        },
        {
            "id": "459",
            "prompt": "Write a function to remove uppercase substrings from a given string.",
            "draft_plan": "# Initialize an empty string to store the result\n\n# Iterate through each character in the input string\n    # Check if the current character is lowercase\n        # If it is lowercase, append it to the result string\n\n# Return the result string",
            "requirements": "",
            "final_plan": "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)",
            "code": "function removeUppercaseSubstrings(str)\n    local result = \"\"\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= \"a\" and char <= \"z\" then\n            result = result .. char\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.6404"
        },
        {
            "id": "461",
            "prompt": "Write a python function to count the upper case characters in a given string.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of uppercase characters\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter variable\n\n# Return the counter variable, which represents the number of uppercase characters in the string",
            "requirements": "",
            "final_plan": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
            "code": "function count_uppercase_chars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= 'A' and char <= 'Z' then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.6395"
        },
        {
            "id": "456",
            "prompt": "Write a function to reverse each string in a given list of string values.",
            "draft_plan": "# Iterate through each string in the given list\n    # Reverse the current string using string slicing\n    # Update the current string in the list with the reversed string\n\n# Return the modified list",
            "requirements": "",
            "final_plan": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result",
            "code": "function reverse_strings(str_list)\n    for i = 1, #str_list do\n        str_list[i] = string.reverse(str_list[i])\n    end\n    return str_list\nend",
            "gen_tc": "",
            "sim_score": "0.6349"
        },
        {
            "id": "102",
            "prompt": "Write a function to convert a snake case string to camel case string.",
            "draft_plan": "# Split the snake case string by underscore to get individual words\n# Capitalize the first letter of each word except the first word\n# Join the words together to form the camel case string\n# Return the camel case string",
            "requirements": "",
            "final_plan": "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
            "code": "function snake_to_camel(snake_case_str)\n    local words = {}\n    for word in string.gmatch(snake_case_str, \"[^_]+\") do\n        table.insert(words, word)\n    end\n    \n    local camel_case_str = \"\"\n    for i, word in ipairs(words) do\n        if i > 1 then\n            word = string.upper(string.sub(word, 1, 1)) .. string.sub(word, 2)\n        end\n        camel_case_str = camel_case_str .. word\n    end\n    \n    return camel_case_str\nend",
            "gen_tc": "",
            "sim_score": "0.6052"
        },
        {
            "id": "411",
            "prompt": "Write a function to convert the given snake case string to camel case string.",
            "draft_plan": "# Split the snake case string into words based on the underscore\n# Initialize an empty camel case string\n\n# Iterate through each word in the snake case string\n    # Capitalize the first letter of each word except the first word\n    # Append the capitalized word to the camel case string\n\n# Return the camel case string",
            "requirements": "",
            "final_plan": "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))",
            "code": "function snake_to_camel(snake_case_str)\n    local words = {}\n    local camel_case_str = \"\"\n\n    for word in string.gmatch(snake_case_str, \"([^_]+)\") do\n        table.insert(words, word)\n    end\n\n    for i, word in ipairs(words) do\n        if i > 1 then\n            word = string.upper(string.sub(word, 1, 1)) .. string.sub(word, 2)\n        end\n        camel_case_str = camel_case_str .. word\n    end\n\n    return camel_case_str\nend",
            "gen_tc": "",
            "sim_score": "0.5912"
        },
        {
            "id": "16",
            "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
            "draft_plan": "# Split the input string by the underscore character to get a list of substrings\n# Iterate through each substring in the list\n    # Check if the substring consists of lowercase letters only\n        # If not, return False\n\n# If all substrings are valid, return True",
            "requirements": "",
            "final_plan": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
            "code": "function contains_lowercase_sequences(str)\n    local substrings = split(str, \"_\")\n\n    for _, substr in ipairs(substrings) do\n        if not is_lowercase(substr) then\n            return false\n        end\n    end\n\n    return true\nend\n\nfunction split(str, delimiter)\n    local result = {}\n    local from = 1\n    local delim_from, delim_to = string.find(str, delimiter, from)\n\n    while delim_from do\n        table.insert(result, string.sub(str, from, delim_from - 1))\n        from = delim_to + 1\n        delim_from, delim_to = string.find(str, delimiter, from)\n    end\n\n    table.insert(result, string.sub(str, from))\n\n    return result\nend\n\nfunction is_lowercase(str)\n    return str:match(\"^[a-z]*$\") ~= nil\nend",
            "gen_tc": "",
            "sim_score": "0.5805"
        },
        {
            "id": "56",
            "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
            "draft_plan": "# Convert the given number to a string and reverse it\n# Convert the reversed string back to an integer\n# Check if the given number is equal to twice the reversed number plus 1\n# If the condition is true, return True. Otherwise, return False.",
            "requirements": "",
            "final_plan": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
            "code": "function is_one_less_twice_reverse(number)\n    local reverse = tonumber(string.reverse(tostring(number)))\n    if number == (2 * reverse + 1) then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5780"
        }
    ],
    "HumanEval/162": [
        {
            "id": "269",
            "prompt": "Write a function to find the ascii value of a character.",
            "draft_plan": "To find the ASCII value of a character in Python, you can use the `ord()` function. Here is the code logic:\n\n1. Define a function `find_ascii_value(char)` that takes a character as input.\n2. Inside the function, use the `ord()` function to find the ASCII value of the character.\n3. Return the ASCII value.\n\nHere is the code:\n\n```python\ndef find_ascii_value(char):\n    return ord(char)\n```\n\nYou can then call this function and pass the character whose ASCII value you want to find, like this:\n\n```python\nprint(find_ascii_value('A')) # Output: 65\n```\n\nNote that the `ord()` function only works with single characters. If you pass a string with multiple characters, it will raise a `TypeError`.",
            "requirements": "",
            "final_plan": "def ascii_value(k):\n  ch=k\n  return ord(ch)",
            "code": "In Lua, the `string.byte()` function can be used to find the ASCII value of a character. Here is the Lua code to find the ASCII value of a character:\n\n```lua\nfunction find_ascii_value(char)\n    return string.byte(char)\nend\n```\n\nYou can then call this function and pass the character whose ASCII value you want to find, like this:\n\n```lua\nprint(find_ascii_value(\"A\")) -- Output: 65\n```\n\nNote that in Lua, you need to pass the character as a string to the `string.byte()` function.",
            "gen_tc": "",
            "sim_score": "0.4571"
        },
        {
            "id": "477",
            "prompt": "Write a python function to convert the given string to lower case.",
            "draft_plan": "# Convert the input string to lower case using the lower() method\n# Return the lower case string",
            "requirements": "",
            "final_plan": "def is_lower(string):\n  return (string.lower())",
            "code": "function convert_to_lower(str)\n    return string.lower(str)\nend",
            "gen_tc": "",
            "sim_score": "0.4429"
        },
        {
            "id": "83",
            "prompt": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
            "draft_plan": "# Define a function to calculate the character made by adding the ASCII values modulo 26\n    # Initialize a variable to store the sum of ASCII values\n    # Iterate through each character in the given string\n        # Add the ASCII value of the current character to the sum\n    # Calculate the modulo 26 of the sum\n    # Convert the result back to a character using the ASCII value\n    # Return the resulting character",
            "requirements": "",
            "final_plan": "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)",
            "code": "function calculate_ascii_modulo_26(string)\n    local sum = 0\n    for i = 1, string.len(string) do\n        sum = sum + string.byte(string, i)\n    end\n\n    local modulo_result = sum % 26\n\n    -- Convert the modulo result to a character using the ASCII value\n    local result_char = string.char(modulo_result)\n\n    return result_char\nend",
            "gen_tc": "",
            "sim_score": "0.4144"
        },
        {
            "id": "461",
            "prompt": "Write a python function to count the upper case characters in a given string.",
            "draft_plan": "# Initialize a counter variable to keep track of the number of uppercase characters\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter variable\n\n# Return the counter variable, which represents the number of uppercase characters in the string",
            "requirements": "",
            "final_plan": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
            "code": "function count_uppercase_chars(str)\n    local count = 0\n\n    for i = 1, string.len(str) do\n        local char = string.sub(str, i, i)\n        if char >= 'A' and char <= 'Z' then\n            count = count + 1\n        end\n    end\n\n    return count\nend",
            "gen_tc": "",
            "sim_score": "0.3907"
        },
        {
            "id": "230",
            "prompt": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
            "draft_plan": "# Define a function that takes in a string and a character as arguments\n    # Convert the string into a list of characters\n    # Iterate through each character in the list\n        # Check if the character is a blank space\n            # If it is, replace it with the given character\n    # Join the list of characters back into a string\n    # Return the modified string\n\n# Example usage:\n# string = \"Hello World\"\n# character = \"-\"\n# modified_string = replace_spaces(string, character)\n# print(modified_string) --> \"Hello-World\"",
            "requirements": "",
            "final_plan": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2",
            "code": "function replace_spaces(str, char)\n    local chars = {}\n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        if c == \" \" then\n            c = char\n        end\n        table.insert(chars, c)\n    end\n    return table.concat(chars)\nend\n\nlocal string = \"Hello World\"\nlocal character = \"-\"\nlocal modified_string = replace_spaces(string, character)\nprint(modified_string) --> \"Hello-World\"",
            "gen_tc": "",
            "sim_score": "0.3810"
        },
        {
            "id": "310",
            "prompt": "Write a function to convert a given string to a tuple of characters.",
            "draft_plan": "# Initialize an empty tuple\n\n# Iterate through each character in the input string\n    # Append the character to the tuple\n\n# Return the tuple",
            "requirements": "",
            "final_plan": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result",
            "code": "function string_to_tuple(string)\n    local tuple = {}\n    \n    for i = 1, string.len(string) do\n        local char = string.sub(string, i, i)\n        table.insert(tuple, char)\n    end\n    \n    return tuple\nend",
            "gen_tc": "",
            "sim_score": "0.3792"
        },
        {
            "id": "474",
            "prompt": "Write a function to replace characters in a string.",
            "draft_plan": "# Initialize an empty string to store the modified string\n\n# Iterate through each character in the input string\n    # Check if the character needs to be replaced\n        # If replacement is required, append the replacement character to the modified string\n        # Otherwise, append the original character to the modified string\n\n# Return the modified string",
            "requirements": "",
            "final_plan": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2",
            "code": "function replaceCharacters(str, replacements)\n    local modified = \"\"\n    \n    for i = 1, string.len(str) do\n        local c = string.sub(str, i, i)\n        \n        if replacements[c] then\n            modified = modified .. replacements[c]\n        else\n            modified = modified .. c\n        end\n    end\n    \n    return modified\nend",
            "gen_tc": "",
            "sim_score": "0.3648"
        },
        {
            "id": "11",
            "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
            "draft_plan": "# Find the index of the first occurrence of the given character in the string\n# Find the index of the last occurrence of the given character in the string\n\n# If both indices are valid\n    # Remove the first occurrence of the character from the string\n    # Decrement the index of the last occurrence by 1 to account for the removal\n    # Remove the last occurrence of the character from the string\n\n# Return the modified string",
            "requirements": "",
            "final_plan": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ",
            "code": "function removeFirstAndLastOccurrence(str, char)\n    local firstIndex = string.find(str, char)\n    local lastIndex = string.find(str:reverse(), char)\n\n    if firstIndex and lastIndex then\n        str = string.sub(str, 1, firstIndex - 1) .. string.sub(str, firstIndex + 1)\n        lastIndex = string.len(str) - lastIndex + 1\n        str = string.sub(str, 1, lastIndex - 1) .. string.sub(str, lastIndex + 1)\n    end\n\n    return str\nend",
            "gen_tc": "",
            "sim_score": "0.3501"
        },
        {
            "id": "132",
            "prompt": "Write a function to convert a tuple to a string.",
            "draft_plan": "# Initialize an empty string\n\n# Iterate through each element in the tuple\n    # Convert the element to a string and append it to the result string\n    # Add a comma after each element except for the last element\n\n# Return the result string",
            "requirements": "",
            "final_plan": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str",
            "code": "function tupleToString(tuple)\n    local result = \"\"\n\n    for i, element in ipairs(tuple) do\n        result = result .. tostring(element)\n\n        if i < #tuple then\n            result = result .. \",\"\n        end\n    end\n\n    return result\nend",
            "gen_tc": "",
            "sim_score": "0.3429"
        },
        {
            "id": "390",
            "prompt": "Write a function to apply a given format string to all of the elements in a list.",
            "draft_plan": "# Define a function that takes a format string and a list of elements as input\n\n# Create an empty list to store the formatted elements\n\n# Iterate through each element in the input list\n    # Apply the format string to the current element using the format() function\n    # Append the formatted element to the new list\n\n# Return the new list with all the formatted elements",
            "requirements": "",
            "final_plan": "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string",
            "code": "function apply_format_string(format_string, element_list)\n    local formatted_list = {}\n\n    for _, element in ipairs(element_list) do\n        local formatted_element = string.format(format_string, element)\n        table.insert(formatted_list, formatted_element)\n    end\n\n    return formatted_list\nend",
            "gen_tc": "",
            "sim_score": "0.3401"
        }
    ],
    "HumanEval/163": [
        {
            "id": "270",
            "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
            "draft_plan": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
            "requirements": "",
            "final_plan": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
            "code": "function sum_even_at_even_positions(lst)\n    local sum_even = 0\n\n    for i, num in ipairs(lst) do\n        if i % 2 == 0 and num % 2 == 0 then\n            sum_even = sum_even + num\n        end\n    end\n\n    return sum_even\nend",
            "gen_tc": "",
            "sim_score": "0.6415"
        },
        {
            "id": "412",
            "prompt": "Write a python function to remove odd numbers from a given list.",
            "draft_plan": "# Create an empty list to store the even numbers\n\n# Iterate through each number in the given list\n    # Check if the number is even (number % 2 == 0)\n        # If the number is even, append it to the list of even numbers\n\n# Return the list of even numbers",
            "requirements": "",
            "final_plan": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
            "code": "function remove_odd_numbers(lst)\n    local even_lst = {}\n\n    for _, num in ipairs(lst) do\n        if num % 2 == 0 then\n            table.insert(even_lst, num)\n        end\n    end\n\n    return even_lst\nend",
            "gen_tc": "",
            "sim_score": "0.6367"
        },
        {
            "id": "166",
            "prompt": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
            "draft_plan": "# Initialize a variable to keep track of the count of pairs\n# Iterate through each element in the list\n    # Iterate through each element after the current element\n        # Check if the xor of the current pair is an even number\n            # If it is, increment the count of pairs\n\n# Return the count of pairs",
            "requirements": "",
            "final_plan": "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count",
            "code": "function count_even_xor_pairs(list)\n    local pair_count = 0\n\n    for i = 1, #list do\n        for j = i+1, #list do\n            if (list[i] ~ list[j]) % 2 == 0 then\n                pair_count = pair_count + 1\n            end\n        end\n    end\n\n    return pair_count\nend",
            "gen_tc": "",
            "sim_score": "0.5800"
        },
        {
            "id": "257",
            "prompt": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.",
            "draft_plan": "# Define the function that takes in two numbers as input\n    # Create a tuple with the second number followed by the first number\n    # Return the tuple\n\n# Call the function with the desired numbers and store the returned tuple",
            "requirements": "",
            "final_plan": "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)",
            "code": "function swap_numbers(num1, num2)\n    return num2, num1\nend\n\nlocal result = swap_numbers(3, 5)\nprint(result)  -- Output: 5   3",
            "gen_tc": "",
            "sim_score": "0.5784"
        },
        {
            "id": "235",
            "prompt": "Write a python function to set all even bits of a given number.",
            "draft_plan": "# Create a mask with all even bits set to 1 and odd bits set to 0\n# Perform bitwise OR operation between the given number and the mask\n# Return the updated number",
            "requirements": "",
            "final_plan": "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) ",
            "code": "function set_even_bits(n)\n    local mask = 0xAAAAAAAA -- Mask with all even bits set to 1 and odd bits set to 0\n    return bit.bor(n, mask)\nend",
            "gen_tc": "",
            "sim_score": "0.5746"
        },
        {
            "id": "453",
            "prompt": "Write a python function to find the sum of even factors of a number.",
            "draft_plan": "# Initialize the sum of even factors to 0\n\n# Iterate from 1 to the given number (inclusive)\n    # Check if the current number is a factor of the given number\n        # Check if the current number is even\n            # If the current number is even, add it to the sum of even factors\n\n# Return the sum of even factors",
            "requirements": "",
            "final_plan": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res",
            "code": "function sum_of_even_factors(number)\n    local sum = 0\n\n    for i = 1, number do\n        if number % i == 0 and i % 2 == 0 then\n            sum = sum + i\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5678"
        },
        {
            "id": "426",
            "prompt": "Write a function to filter odd numbers.",
            "draft_plan": "# Initialize an empty list to store the filtered numbers\n\n# Iterate through each number in the input list\n    # Check if the number is odd\n        # If the number is odd, append it to the filtered list\n\n# Return the filtered list",
            "requirements": "",
            "final_plan": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums",
            "code": "function filter_odd_numbers(number_list)\n    local filtered_list = {}\n\n    for _, num in ipairs(number_list) do\n        if num % 2 ~= 0 then\n            table.insert(filtered_list, num)\n        end\n    end\n\n    return filtered_list\nend",
            "gen_tc": "",
            "sim_score": "0.5650"
        },
        {
            "id": "58",
            "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
            "draft_plan": "# Check if the product of the two integers is negative\n    # If the product is negative, it means the two integers have opposite signs\n        # Return True\n\n# If the product is not negative, it means the two integers have the same sign\n    # Return False",
            "requirements": "",
            "final_plan": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ",
            "code": "function haveOppositeSigns(a, b)\n    if a * b < 0 then\n        return true\n    else\n        return false\n    end\nend",
            "gen_tc": "",
            "sim_score": "0.5443"
        },
        {
            "id": "420",
            "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
            "draft_plan": "# Initialize a variable to store the sum of the cube of even numbers\n# Iterate through each even number from 2 to (2*n) with a step size of 2\n    # Calculate the cube of the current even number\n    # Add the cube to the sum\n\n# Return the sum of the cube of even numbers",
            "requirements": "",
            "final_plan": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
            "code": "function cube_sum_of_even(n)\n    local sum = 0\n    \n    for i = 2, 2 * n, 2 do\n        local cube = i * i * i\n        sum = sum + cube\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5307"
        },
        {
            "id": "287",
            "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
            "draft_plan": "# Initialize the sum of squares variable to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Add the square of the current number to the sum of squares variable\n\n# Return the sum of squares",
            "requirements": "",
            "final_plan": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
            "code": "function sum_of_squares(n)\n    local sum = 0\n\n    for i = 1, n do\n        if i % 2 == 0 then\n            sum = sum + (i * i)\n        end\n    end\n\n    return sum\nend",
            "gen_tc": "",
            "sim_score": "0.5306"
        }
    ]
}