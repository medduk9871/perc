[
    {
        "id": "mbpp_cpp/247",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the length of the longest palindromic subsequence in the given string.\nlong lps(std::string str) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = lps;\n    assert(candidate((\"TENS FOR TENS\")) == (5));\n    assert(candidate((\"CARDIO FOR CARDS\")) == (7));\n    assert(candidate((\"PART OF THE JOURNEY IS PART\")) == (9));\n}\n"
        ],
        "draft_plan": [
            "# Initialize a 2D dynamic programming array of size n x n, where n is the length of the input string.\n# Initialize the diagonal elements of the array to 1, as each character is a palindrome of length 1.\n# Iterate over the array diagonally, starting from the second diagonal.\n    # For each diagonal, iterate over the elements in the current diagonal.\n        # If the characters at the current positions are equal, set the value of the current element to the value of the element in the previous diagonal plus 2.\n        # Otherwise, set the value of the current element to the maximum value between the element to the left and the element above.\n# Return the value at the top-right corner of the array, which represents the length of the longest palindromic subsequence in the input string."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the length of the longest palindromic subsequence in the given string.\nlong lps(std::string str) {\n    int n = str.length();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n\n    // Initialize the diagonal elements to 1.\n    for (int i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n\n    // Iterate diagonally over the dp array.\n    for (int len = 2; len <= n; len++) {\n        for (int i = 0; i < n - len + 1; i++) {\n            int j = i + len - 1;\n            if (str[i] == str[j]) {\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n            } else {\n                dp[i][j] = std::max(dp[i][j - 1], dp[i + 1][j]);\n            }\n        }\n    }\n\n    return dp[0][n - 1];\n}"
        ]
    },
    {
        "id": "mbpp_cpp/451",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to remove all whitespaces from the given string.\n# Initialize an empty string to store the modified string without whitespaces.\n# Iterate through each character in the given string.\n    # Check if the current character is a whitespace.\n        # If it is not a whitespace, append it to the modified string.\n# Return the modified string without whitespaces."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string modified_text;\n\n    // Iterate through each character in the given string.\n    for (char c : text1) {\n        // Check if the current character is a whitespace.\n        if (!std::isspace(c)) {\n            // If it is not a whitespace, append it to the modified string.\n            modified_text += c;\n        }\n    }\n\n    return modified_text;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/567",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a specified vector is sorted or not.\nbool issort_list(std::vector<long> list1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = issort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)6, (long)8, (long)10, (long)12, (long)14, (long)16, (long)17}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)6, (long)8, (long)10, (long)12, (long)14, (long)20, (long)17}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)6, (long)8, (long)10, (long)15, (long)14, (long)20}))) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Iterate through each element in the given vector.\n    # Check if the current element is greater than the next element.\n        # If it is, return false as the vector is not sorted.\n# If the loop completes without returning false, return true as the vector is sorted."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n// Write a function to check whether a specified vector is sorted or not.\nbool issort_list(std::vector<long> list1) {\n    for (int i = 0; i < list1.size() - 1; i++) {\n        if (list1[i] > list1[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/438",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count bidirectional tuple pairs.\nlong count_bidirectional(std::vector<std::tuple<long, long>> test_list) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = count_bidirectional;\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(5, 6), (std::tuple<long, long>)std::make_tuple(1, 2), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(9, 1), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(2, 1)}))) == (3));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(5, 6), (std::tuple<long, long>)std::make_tuple(1, 3), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(9, 1), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(2, 1)}))) == (2));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(5, 6), (std::tuple<long, long>)std::make_tuple(1, 2), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(9, 2), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(2, 1)}))) == (4));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count bidirectional tuple pairs.\n# Create a counter variable to store the count of bidirectional pairs.\n# Iterate over the input list of tuples.\n    # Retrieve the two elements of the tuple.\n    # Create both the original pair and the reverse pair.\n    # Check if the reverse pair exists in the input list.\n        # If it does, increment the bidirectional pair count.\n# Return the count of bidirectional pairs."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to count bidirectional tuple pairs.\nlong count_bidirectional(std::vector<std::tuple<long, long>> test_list) {\n    long bidirectional_count = 0;\n\n    // Iterate over the test_list to count the bidirectional pairs.\n    for (const auto& tup : test_list) {\n        long a = std::get<0>(tup);\n        long b = std::get<1>(tup);\n        std::tuple<long, long> reverse = std::make_tuple(b, a);\n\n        // Check if the reverse pair exists in the input list.\n        if (std::find(test_list.begin(), test_list.end(), reverse) != test_list.end()) {\n            bidirectional_count++;\n        }\n    }\n\n    return bidirectional_count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/441",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the surface area of a cube of a given size.\nlong surfacearea_cube(long l) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = surfacearea_cube;\n    assert(candidate((5)) == (150));\n    assert(candidate((3)) == (54));\n    assert(candidate((10)) == (600));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to calculate the surface area of a cube.\n# Calculate the surface area by multiplying the length of one side of the cube by itself and then multiplying that result by 6 (since a cube has 6 sides).\n# Return the surface area of the cube."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the surface area of a cube of a given size.\nlong surfacearea_cube(long l) {\n    // Calculate the surface area of the cube.\n    long surface_area = 6 * l * l;\n    \n    return surface_area;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/100",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the next smallest palindrome.\n# Increment the given number by 1 and assign it to a variable.\n# Iterate in a loop until a palindrome is found.\n    # Check if the number is a palindrome.\n        # If it is, return the number.\n    # If the number is not a palindrome, increment it by 1.\n# Return the next smallest palindrome."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n    num++; // Increment the given number by 1\n    while (true) {\n        std::string num_str = std::to_string(num);\n        std::string reverse_str = num_str;\n        std::reverse(reverse_str.begin(), reverse_str.end());\n\n        // Check if the number is a palindrome\n        if (num_str == reverse_str) {\n            return num;\n        }\n\n        num++; // Increment the number by 1\n    }\n}"
        ]
    },
    {
        "id": "mbpp_cpp/420",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the cube sum of first n even natural numbers.\nlong cube_Sum(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = cube_Sum;\n    assert(candidate((2)) == (72));\n    assert(candidate((3)) == (288));\n    assert(candidate((4)) == (800));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the cube sum of the first n even natural numbers.\n# Initialize a variable to store the sum.\n# Iterate from 1 to n (inclusive).\n    # Calculate the cube of the current even natural number (2 * current iteration).\n    # Add the cube to the sum variable.\n# Return the sum of the cube of the first n even natural numbers."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the cube sum of first n even natural numbers.\nlong cube_Sum(long n) {\n    long sum = 0;\n    for (long i = 1; i <= n; i++) {\n        long even_number = 2 * i;\n        long cube = even_number * even_number * even_number;\n        sum += cube;\n    }\n    return sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/633",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the sum of xor of all pairs of numbers in the given vector.\nlong pair_xor_Sum(std::vector<long> arr, long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = pair_xor_Sum;\n    assert(candidate((std::vector<long>({(long)5, (long)9, (long)7, (long)6})), (4)) == (47));\n    assert(candidate((std::vector<long>({(long)7, (long)3, (long)5})), (3)) == (12));\n    assert(candidate((std::vector<long>({(long)7, (long)3})), (2)) == (4));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the sum of XOR of all pairs of numbers.\n# Initialize a variable to store the sum.\n# Iterate over the vector of numbers.\n    # Iterate over the vector again starting from the next element.\n        # Calculate the XOR of the current pair of numbers and add it to the sum.\n# Return the sum."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the sum of XOR of all pairs of numbers in the given vector.\nlong pair_xor_Sum(std::vector<long> arr, long n) {\n    long sum = 0;\n    \n    // Iterate over the vector of numbers\n    for(int i = 0; i < n; i++) {\n        // Iterate over the vector again starting from the next element\n        for(int j = i + 1; j < n; j++) {\n            // Calculate the XOR of the current pair of numbers and add it to the sum\n            sum += arr[i] ^ arr[j];\n        }\n    }\n    \n    // Return the sum\n    return sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/751",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if the given vector represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-vector-represents-a-binary-heap/\nbool check_min_heap(std::vector<long> arr) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = check_min_heap;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)5, (long)10, (long)15}))) == (true));\n    assert(candidate((std::vector<long>({(long)2, (long)10, (long)4, (long)5, (long)3, (long)15}))) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check if the given vector represents a min heap.\n# Iterate over the vector starting from index 0.\n    # Calculate the indices of the left and right child of the current element.\n    # Check if the left child index is within the bounds of the vector.\n        # If it is, check if the value of the left child is less than or equal to the value of the current element.\n            # If it is not, return false.\n    # Check if the right child index is within the bounds of the vector.\n        # If it is, check if the value of the right child is less than or equal to the value of the current element.\n            # If it is not, return false.\n# If the loop finishes without returning false, return true."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if the given vector represents min heap or not. \nbool check_min_heap(std::vector<long> arr) {\n    int n = arr.size();\n\n    // Iterate over the array\n    for (int i = 0; i < n; i++) {\n        int left_child = 2 * i + 1;\n        int right_child = 2 * i + 2;\n\n        // Check if the left child is within bounds and smaller than the current element\n        if (left_child < n && arr[left_child] < arr[i]) {\n            return false;\n        }\n\n        // Check if the right child is within bounds and smaller than the current element\n        if (right_child < n && arr[right_child] < arr[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/479",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the first digit of a given number.\nlong first_Digit(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = first_Digit;\n    assert(candidate((123)) == (1));\n    assert(candidate((456)) == (4));\n    assert(candidate((12)) == (1));\n}\n"
        ],
        "draft_plan": [
            "# Convert the given number to a string.\n# Iterate through each character in the string.\n    # Check if the current character is a digit.\n        # If it is, convert it back to an integer and return it.\n# If no digit is found, return -1 to indicate that the number has no digits."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the first digit of a given number.\nlong first_Digit(long n) {\n    std::string num_str = std::to_string(n);\n    \n    for (char c : num_str) {\n        if (std::isdigit(c)) {\n            return c - '0';\n        }\n    }\n    \n    return -1;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/395",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the first non-repeated character in a given string.\nstd::optional<std::string> first_non_repeating_character(std::string str1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = first_non_repeating_character;\n    assert(candidate((\"abcabc\")) == std::nullopt);\n    assert(candidate((\"abc\")) == \"a\");\n    assert(candidate((\"ababc\")) == \"c\");\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the first non-repeated character in a given string.\n# Create a map to store the frequency of each character in the string.\n# Iterate over the string and increment the frequency count for each character in the map.\n# Iterate over the string again and check the frequency count for each character.\n    # If the frequency count is 1, return the character.\n# If no non-repeated character is found, return an empty optional.\n# The time complexity of this approach is O(n), where n is the length of the string."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n// Write a cppthon function to find the first non-repeated character in a given string.\nstd::optional<char> first_non_repeating_character(std::string str1) {\n    std::unordered_map<char, int> charCount;\n\n    // Iterate over the string and increment the frequency count for each character.\n    for (char c : str1) {\n        charCount[c]++;\n    }\n\n    // Iterate over the string again and check the frequency count for each character.\n    for (char c : str1) {\n        if (charCount[c] == 1) {\n            return c;\n        }\n    }\n\n    // If no non-repeated character is found, return an empty optional.\n    return std::nullopt;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/606",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert degrees to radians.\nfloat radian_degree(long degree) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = radian_degree;\n    assert(candidate((90)) == (1.5707963267948966f));\n    assert(candidate((60)) == (1.0471975511965976f));\n    assert(candidate((120)) == (2.0943951023931953f));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to convert degrees to radians.\n# Use the formula: radians = degrees * (pi / 180)\n# Return the converted value of radians."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert degrees to radians.\nfloat radian_degree(long degree) {\n    float radians = degree * (M_PI / 180);\n    return radians;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/463",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum product subvector of the given vector.\nlong max_subarray_product(std::vector<long> arr) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = max_subarray_product;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)0, (long)7, (long)-8, (long)-2}))) == (112));\n    assert(candidate((std::vector<long>({(long)6, (long)-3, (long)-10, (long)0, (long)2}))) == (180));\n    assert(candidate((std::vector<long>({(long)-2, (long)-40, (long)0, (long)-2, (long)-3}))) == (80));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the maximum product subvector.\n# Initialize two variables, max_product and min_product, to keep track of the maximum and minimum product of subvectors ending at the current index.\n# Initialize the maximum product as the first element of the input vector.\n# Iterate over the input vector starting from the second element.\n    # Calculate the new maximum and minimum products by comparing the current element with the maximum and minimum products of the subvector ending at the previous index.\n    # Update the maximum product by taking the maximum of the current element, the maximum product multiplied by the current element, and the minimum product multiplied by the current element.\n    # Update the minimum product by taking the minimum of the current element, the maximum product multiplied by the current element, and the minimum product multiplied by the current element.\n    # Update the maximum product by taking the maximum of the current maximum product and the new maximum product.\n# Return the maximum product."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum product subvector of the given vector.\nlong max_subarray_product(std::vector<long> arr) {\n    // Initialize variables\n    long max_product = arr[0];\n    long min_product = arr[0];\n    long result = arr[0];\n\n    // Iterate over the array\n    for (int i = 1; i < arr.size(); i++) {\n        // Calculate the new maximum and minimum products\n        long temp_max = std::max(arr[i], std::max(max_product * arr[i], min_product * arr[i]));\n        long temp_min = std::min(arr[i], std::min(max_product * arr[i], min_product * arr[i]));\n\n        // Update the maximum and minimum products\n        max_product = temp_max;\n        min_product = temp_min;\n\n        // Update the result\n        result = std::max(result, max_product);\n    }\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/391",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert more than one vector to nested map.\nstd::vector<std::map<std::string,std::map<std::string,long>>> convert_list_dictionary(std::vector<std::string> l1, std::vector<std::string> l2, std::vector<long> l3) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = convert_list_dictionary;\n    assert(candidate((std::vector<std::string>({(std::string)\"S001\", (std::string)\"S002\", (std::string)\"S003\", (std::string)\"S004\"})), (std::vector<std::string>({(std::string)\"Adina Park\", (std::string)\"Leyton Marsh\", (std::string)\"Duncan Boyle\", (std::string)\"Saim Richards\"})), (std::vector<long>({(long)85, (long)98, (long)89, (long)92}))) == (std::vector<std::map<std::string,std::map<std::string,long>>>({(std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"S001\", std::map<std::string,long>({{\"Adina Park\", 85}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"S002\", std::map<std::string,long>({{\"Leyton Marsh\", 98}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"S003\", std::map<std::string,long>({{\"Duncan Boyle\", 89}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"S004\", std::map<std::string,long>({{\"Saim Richards\", 92}})}})})));\n    assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"def\", (std::string)\"ghi\", (std::string)\"jkl\"})), (std::vector<std::string>({(std::string)\"python\", (std::string)\"program\", (std::string)\"language\", (std::string)\"programs\"})), (std::vector<long>({(long)100, (long)200, (long)300, (long)400}))) == (std::vector<std::map<std::string,std::map<std::string,long>>>({(std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"abc\", std::map<std::string,long>({{\"python\", 100}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"def\", std::map<std::string,long>({{\"program\", 200}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"ghi\", std::map<std::string,long>({{\"language\", 300}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"jkl\", std::map<std::string,long>({{\"programs\", 400}})}})})));\n    assert(candidate((std::vector<std::string>({(std::string)\"A1\", (std::string)\"A2\", (std::string)\"A3\", (std::string)\"A4\"})), (std::vector<std::string>({(std::string)\"java\", (std::string)\"C\", (std::string)\"C++\", (std::string)\"DBMS\"})), (std::vector<long>({(long)10, (long)20, (long)30, (long)40}))) == (std::vector<std::map<std::string,std::map<std::string,long>>>({(std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"A1\", std::map<std::string,long>({{\"java\", 10}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"A2\", std::map<std::string,long>({{\"C\", 20}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"A3\", std::map<std::string,long>({{\"C++\", 30}})}}), (std::map<std::string,std::map<std::string,long>>)std::map<std::string,std::map<std::string,long>>({{\"A4\", std::map<std::string,long>({{\"DBMS\", 40}})}})})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to convert multiple vectors into a nested map.\n# Initialize an empty vector of maps.\n# Iterate over the indices of the given vectors.\n    # Retrieve the elements at the current index from each vector.\n    # Create a map with the first element from l1 as the key.\n        # Create a nested map with the second element from l2 as the key and the element from l3 as the value.\n    # Append the created map to the vector of maps.\n# Return the vector of maps."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert more than one vector to nested map.\nstd::vector<std::map<std::string, std::map<std::string, long>>> convert_list_dictionary(std::vector<std::string> l1, std::vector<std::string> l2, std::vector<long> l3) {\n    std::vector<std::map<std::string, std::map<std::string, long>>> result;\n\n    // Iterate over the indices of the given vectors.\n    for (size_t i = 0; i < l1.size(); i++) {\n        std::string key1 = l1[i];\n        std::string key2 = l2[i];\n        long value = l3[i];\n\n        std::map<std::string, long> inner_map;\n        inner_map[key2] = value;\n\n        std::map<std::string, std::map<std::string, long>> outer_map;\n        outer_map[key1] = inner_map;\n\n        result.push_back(outer_map);\n    }\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/62",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find smallest number in a vector.\nlong smallest_num(std::vector<long> xs) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = smallest_num;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)1, (long)45, (long)99}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)45, (long)46, (long)50, (long)60}))) == (45));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the smallest number in a vector.\n# Initialize a variable to store the smallest number and set it to the first element of the vector.\n# Iterate over the remaining elements in the vector.\n    # Check if the current element is smaller than the current smallest number.\n        # If it is, update the smallest number to the current element.\n# Return the smallest number."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the smallest number in a vector.\nlong smallest_num(std::vector<long> xs) {\n    assert(!xs.empty()); // Assert that the vector is not empty\n\n    long smallest = xs[0]; // Initialize the smallest number with the first element\n\n    // Iterate over the remaining elements\n    for (size_t i = 1; i < xs.size(); i++) {\n        if (xs[i] < smallest) {\n            smallest = xs[i]; // Update the smallest number if a smaller element is found\n        }\n    }\n\n    return smallest;\n}\n"
        ]
    },
    {
        "id": "mbpp_cpp/756",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/cppthon-exercises/re/cppthon-re-exercise-3.php\nbool text_match_zero_one(std::string text) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = text_match_zero_one;\n    assert(candidate((\"ac\")) == (false));\n    assert(candidate((\"dc\")) == (false));\n    assert(candidate((\"abbbba\")) == (true));\n    assert(candidate((\"dsabbbba\")) == (true));\n    assert(candidate((\"asbbbba\")) == (false));\n    assert(candidate((\"abaaa\")) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Use regular expressions to match the given string pattern.\n# Define a regular expression pattern that matches an 'a' followed by one or more 'b's.\n# Use the regex_match function from the <regex> library to check if the given string matches the defined pattern.\n# Return true if there is a match, and false otherwise."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. \nbool text_match_zero_one(std::string text) {\n    std::regex pattern(\"ab+\"); // Regular expression pattern: an 'a' followed by one or more 'b's.\n    return std::regex_match(text, pattern);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/608",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find nth bell number.\nlong bell_Number(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = bell_Number;\n    assert(candidate((2)) == (2));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (15));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the nth Bell number.\n# Create a vector to store the Bell numbers.\n# Initialize the first Bell number as 1.\n# Iterate from the second Bell number up to the nth Bell number.\n    # Initialize the current Bell number as 0.\n    # Iterate over the previously calculated Bell numbers.\n        # Add the product of the previous Bell number and the binomial coefficient to the current Bell number.\n    # Add the current Bell number to the vector.\n# Return the nth Bell number from the vector."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth Bell number.\nlong bell_Number(long n) {\n    std::vector<long> bellNumbers(n+1);\n    bellNumbers[0] = 1;\n\n    for (int i = 1; i <= n; i++) {\n        bellNumbers[i] = 0;\n        for (int j = 0; j < i; j++) {\n            bellNumbers[i] += bellNumbers[j] * std::binomial_coefficient(i-1, j);\n        }\n    }\n\n    return bellNumbers[n];\n}\n"
        ]
    },
    {
        "id": "mbpp_cpp/447",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find cubes of individual elements in a vector.\nstd::vector<long> cube_nums(std::vector<long> nums) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = cube_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (std::vector<long>({(long)1, (long)8, (long)27, (long)64, (long)125, (long)216, (long)343, (long)512, (long)729, (long)1000})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)30}))) == (std::vector<long>({(long)1000, (long)8000, (long)27000})));\n    assert(candidate((std::vector<long>({(long)12, (long)15}))) == (std::vector<long>({(long)1728, (long)3375})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find cubes of individual elements in a vector.\n# Create a new vector to store the cube values.\n# Iterate over each element in the input vector.\n    # Calculate the cube of the current element.\n    # Append the cube value to the new vector.\n# Return the new vector with cube values."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find cubes of individual elements in a vector.\nstd::vector<long> cube_nums(std::vector<long> nums) {\n    std::vector<long> cubes;\n    \n    // Iterate over each element in the input vector.\n    for (const auto& num : nums) {\n        // Calculate the cube of the current element.\n        long cube = num * num * num;\n        // Append the cube value to the new vector.\n        cubes.push_back(cube);\n    }\n    \n    return cubes;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/577",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the last digit in factorial of a given number.\nlong last_Digit_Factorial(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = last_Digit_Factorial;\n    assert(candidate((4)) == (4));\n    assert(candidate((21)) == (0));\n    assert(candidate((30)) == (0));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the last digit in the factorial of a given number.\n# Initialize a variable \"factorial\" to 1 to store the factorial value.\n# Iterate from 1 to the given number \"n\".\n    # Multiply the current number with the factorial value.\n    # Store the result in the factorial variable.\n# Convert the factorial value to a string.\n# Get the last character of the string, which represents the last digit of the factorial.\n# Convert the last character back to an integer.\n# Return the last digit of the factorial as a long integer."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to find the last digit in the factorial of a given number.\nlong last_Digit_Factorial(long n) {\n    long factorial = 1;\n\n    // Calculate the factorial of the given number.\n    for (long i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n\n    // Get the last digit of the factorial.\n    std::string factorial_str = std::to_string(factorial);\n    char last_digit_char = factorial_str.back();\n    long last_digit = last_digit_char - '0';\n\n    return last_digit;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/629",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find even numbers from a vector of numbers.\nstd::vector<long> Split(std::vector<long> list) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)2, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)8, (long)0, (long)1}))) == (std::vector<long>({(long)4, (long)6, (long)8, (long)0})));\n    assert(candidate((std::vector<long>({(long)8, (long)12, (long)15, (long)19}))) == (std::vector<long>({(long)8, (long)12})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find even numbers from a vector of numbers.\n# Initialize an empty vector to store even numbers.\n# Iterate over the input vector.\n    # Check if the current number is even.\n        # If it is, append it to the even numbers vector.\n# Return the vector containing even numbers."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find even numbers from a vector of numbers.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> even_numbers;\n\n    // Iterate over the input vector.\n    for (long num : list) {\n        // Check if the current number is even.\n        if (num % 2 == 0) {\n            // If it is, append it to the even numbers vector.\n            even_numbers.push_back(num);\n        }\n    }\n\n    return even_numbers;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/605",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if the given integer is a prime number.\nbool prime_num(long num) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = prime_num;\n    assert(candidate((13)) == (true));\n    assert(candidate((7)) == (true));\n    assert(candidate((-1010)) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Check if the given number is less than 2\n    # If it is, return false as prime numbers are greater than or equal to 2\n# Iterate from 2 to the square root of the given number\n    # Check if the given number is divisible evenly by any number in the range\n        # If it is, return false as it is not a prime number\n# If the loop completes without finding any divisors, return true as the number is a prime number"
        ],
        "code": [
            "#include <assert.h>\n#include <cmath>\n\n// Write a function to check if the given integer is a prime number.\nbool prime_num(long num) {\n    if (num < 2) {\n        return false;\n    }\n\n    for (long i = 2; i <= std::sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n\n    return true;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/75",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find tuples which have all elements divisible by k from the given vector of tuples.\nstd::vector<std::tuple<long, long, long>> find_tuples(std::vector<std::tuple<long, long, long>> test_list, long K) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find_tuples;\n    assert(candidate((std::vector<std::tuple<long, long, long>>({(std::tuple<long, long, long>)std::make_tuple(6, 24, 12), (std::tuple<long, long, long>)std::make_tuple(7, 9, 6), (std::tuple<long, long, long>)std::make_tuple(12, 18, 21)})), (6)) == (std::vector<std::tuple<long, long, long>>({(std::tuple<long, long, long>)std::make_tuple(6, 24, 12)})));\n    assert(candidate((std::vector<std::tuple<long, long, long>>({(std::tuple<long, long, long>)std::make_tuple(5, 25, 30), (std::tuple<long, long, long>)std::make_tuple(4, 2, 3), (std::tuple<long, long, long>)std::make_tuple(7, 8, 9)})), (5)) == (std::vector<std::tuple<long, long, long>>({(std::tuple<long, long, long>)std::make_tuple(5, 25, 30)})));\n    assert(candidate((std::vector<std::tuple<long, long, long>>({(std::tuple<long, long, long>)std::make_tuple(7, 9, 16), (std::tuple<long, long, long>)std::make_tuple(8, 16, 4), (std::tuple<long, long, long>)std::make_tuple(19, 17, 18)})), (4)) == (std::vector<std::tuple<long, long, long>>({(std::tuple<long, long, long>)std::make_tuple(8, 16, 4)})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find tuples with all elements divisible by K.\n# Initialize an empty vector to store the resulting tuples.\n# Iterate over the input list of tuples.\n    # Retrieve the three elements of the tuple.\n    # Check if all three elements are divisible by K.\n        # If they are, add the tuple to the result vector.\n# Return the vector of tuples with all elements divisible by K."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find tuples which have all elements divisible by k from the given vector of tuples.\nstd::vector<std::tuple<long, long, long>> find_tuples(std::vector<std::tuple<long, long, long>> test_list, long K) {\n    std::vector<std::tuple<long, long, long>> result;\n\n    // Iterate over the test_list to find tuples with all elements divisible by K.\n    for (const auto& tup : test_list) {\n        long a = std::get<0>(tup);\n        long b = std::get<1>(tup);\n        long c = std::get<2>(tup);\n\n        // Check if all three elements are divisible by K.\n        if (a % K == 0 && b % K == 0 && c % K == 0) {\n            result.push_back(tup);\n        }\n    }\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/742",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to caluclate the area of a tetrahedron.\nfloat area_tetrahedron(long side) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = area_tetrahedron;\n    assert(candidate((3)) == (15.588457268119894f));\n    assert(candidate((20)) == (692.8203230275509f));\n    assert(candidate((10)) == (173.20508075688772f));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to calculate the area of a tetrahedron.\n# Calculate the area using the formula: area = sqrt(3) * side * side\n# Return the calculated area."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n#include <cmath>\n\n// Write a function to calculate the area of a tetrahedron.\nfloat area_tetrahedron(long side) {\n    float area = sqrt(3) * side * side;\n    return area;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/600",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given number is even or not.\nbool is_Even(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = is_Even;\n    assert(candidate((1)) == (false));\n    assert(candidate((2)) == (true));\n    assert(candidate((3)) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check whether a given number is even or not.\n# Check if the number is divisible by 2.\n    # If it is, return true (indicating that the number is even).\n    # If it is not, return false (indicating that the number is odd)."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given number is even or not.\nbool is_Even(long n) {\n    return (n % 2 == 0);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/66",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of positive numbers in a vector.\nlong pos_count(std::vector<long> list) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = pos_count;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3, (long)-4}))) == (2));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)-1}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (4));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count the number of positive numbers in a vector.\n# Initialize a counter for positive numbers.\n# Iterate over the elements in the input vector.\n    # Check if the current element is greater than 0.\n        # If it is, increment the counter for positive numbers.\n# Return the count of positive numbers."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of positive numbers in a vector.\nlong pos_count(std::vector<long> list) {\n    long count = 0;\n    for (const auto& num : list) {\n        if (num > 0) {\n            count++;\n        }\n    }\n    return count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/603",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to get all lucid numbers smaller than or equal to a given integer.\nstd::vector<long> get_ludic(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = get_ludic;\n    assert(candidate((10)) == (std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((25)) == (std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)23, (long)25})));\n    assert(candidate((45)) == (std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)23, (long)25, (long)29, (long)37, (long)41, (long)43})));\n}\n"
        ],
        "draft_plan": [
            "# Create an empty vector to store the lucid numbers.\n# Create a boolean array to keep track of the numbers that have been marked as non-lucid.\n# Iterate from 1 to n (inclusive).\n    # Mark all numbers as lucid initially.\n# Iterate from 2 to n (inclusive).\n    # If the current number is marked as lucid, add it to the vector.\n    # Mark all the multiples of the current number as non-lucid.\n# Return the vector of lucid numbers."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to get all lucid numbers smaller than or equal to a given integer.\nstd::vector<long> get_ludic(long n) {\n    std::vector<long> lucid_numbers;\n    std::vector<bool> is_lucid(n+1, true);\n\n    for (long i = 2; i <= n; i++) {\n        if (is_lucid[i]) {\n            lucid_numbers.push_back(i);\n\n            for (long j = i; j <= n; j += i) {\n                is_lucid[j] = false;\n            }\n        }\n    }\n\n    return lucid_numbers;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/739",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the index of the smallest triangular number with n digits.\n# Initialize a variable to store the current triangular number.\n# Initialize a variable to store the index of the current triangular number.\n# Iterate through each number starting from 1 until the triangular number has n digits.\n    # Calculate the triangular number by adding the current number to the previous triangular number.\n    # Check if the number of digits in the triangular number is equal to n.\n        # If it is, return the index of the current triangular number.\n    # Increment the index by 1.\n# If no triangular number with n digits is found, return -1."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to find the index of the smallest triangular number with n digits.\nlong find_Index(long n) {\n    long triangular = 0;\n    long index = 1;\n\n    while (true) {\n        triangular += index;\n        if (std::to_string(triangular).length() == n) {\n            return index;\n        }\n        index++;\n    }\n\n    // If no triangular number with n digits is found, return -1.\n    return -1;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/644",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to reverse a vector upto a given position.\nstd::vector<long> reverse_Array_Upto_K(std::vector<long> input, long k) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = reverse_Array_Upto_K;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (4)) == (std::vector<long>({(long)4, (long)3, (long)2, (long)1, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7})), (2)) == (std::vector<long>({(long)5, (long)4, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)9, (long)8, (long)7, (long)6, (long)5})), (3)) == (std::vector<long>({(long)7, (long)8, (long)9, (long)6, (long)5})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to reverse a vector up to a given position.\n# Check if the given position, k, is within the range of the input vector.\n    # If not, return the original vector without modification.\n# Create two pointers, one at the start of the vector and another at the given position, k.\n# Iterate until the two pointers meet:\n    # Swap the elements at the two pointers.\n    # Move the start pointer one step forward.\n    # Move the end pointer one step backward.\n# Return the modified vector."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to reverse a vector upto a given position.\nstd::vector<long> reverse_Array_Upto_K(std::vector<long> input, long k) {\n    // Check if the given position, k, is within the range of the input vector.\n    if (k >= input.size()) {\n        return input;\n    }\n\n    // Create two pointers, one at the start of the vector and another at the given position, k.\n    int start = 0;\n    int end = k;\n\n    // Iterate until the two pointers meet.\n    while (start < end) {\n        // Swap the elements at the two pointers.\n        std::swap(input[start], input[end]);\n\n        // Move the start pointer one step forward.\n        start++;\n\n        // Move the end pointer one step backward.\n        end--;\n    }\n\n    // Return the modified vector.\n    return input;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/64",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of tuples using the second value of each tuple.\nstd::vector<std::tuple<std::string, long>> subject_marks(std::vector<std::tuple<std::string, long>> subjectmarks) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = subject_marks;\n    assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"English\", 88), (std::tuple<std::string, long>)std::make_tuple(\"Science\", 90), (std::tuple<std::string, long>)std::make_tuple(\"Maths\", 97), (std::tuple<std::string, long>)std::make_tuple(\"Social sciences\", 82)}))) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Social sciences\", 82), (std::tuple<std::string, long>)std::make_tuple(\"English\", 88), (std::tuple<std::string, long>)std::make_tuple(\"Science\", 90), (std::tuple<std::string, long>)std::make_tuple(\"Maths\", 97)})));\n    assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Telugu\", 49), (std::tuple<std::string, long>)std::make_tuple(\"Hindhi\", 54), (std::tuple<std::string, long>)std::make_tuple(\"Social\", 33)}))) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Social\", 33), (std::tuple<std::string, long>)std::make_tuple(\"Telugu\", 49), (std::tuple<std::string, long>)std::make_tuple(\"Hindhi\", 54)})));\n    assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Physics\", 96), (std::tuple<std::string, long>)std::make_tuple(\"Chemistry\", 97), (std::tuple<std::string, long>)std::make_tuple(\"Biology\", 45)}))) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Biology\", 45), (std::tuple<std::string, long>)std::make_tuple(\"Physics\", 96), (std::tuple<std::string, long>)std::make_tuple(\"Chemistry\", 97)})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to sort a vector of tuples using the second value of each tuple.\n# Use the std::sort function with a lambda function as the comparator.\n    # The lambda function should compare the second value of each tuple.\n# Return the sorted vector of tuples."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of tuples using the second value of each tuple.\nstd::vector<std::tuple<std::string, long>> subject_marks(std::vector<std::tuple<std::string, long>> subjectmarks) {\n    // Sort the vector of tuples based on the second value of each tuple\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](const std::tuple<std::string, long>& a, const std::tuple<std::string, long>& b){\n        return std::get<1>(a) < std::get<1>(b);\n    });\n\n    return subjectmarks;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/18",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove characters from the first string which are present in the second string.\nstd::string remove_dirty_chars(std::string string, std::string second_string) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = remove_dirty_chars;\n    assert(candidate((\"probasscurve\"), (\"pros\")) == (\"bacuve\"));\n    assert(candidate((\"digitalindia\"), (\"talent\")) == (\"digiidi\"));\n    assert(candidate((\"exoticmiles\"), (\"toxic\")) == (\"emles\"));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to remove characters from the first string that are present in the second string.\n# Create a set to store the characters in the second string.\n# Initialize an empty string to store the modified first string.\n# Iterate over each character in the first string.\n    # Check if the character is not present in the set.\n        # If it is not present, append it to the modified string.\n# Return the modified string."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove characters from the first string which are present in the second string.\nstd::string remove_dirty_chars(std::string string, std::string second_string) {\n    std::unordered_set<char> char_set;\n    for (char c : second_string) {\n        char_set.insert(c);\n    }\n\n    std::string modified_string;\n    for (char c : string) {\n        if (char_set.find(c) == char_set.end()) {\n            modified_string += c;\n        }\n    }\n    return modified_string;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/419",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_float_long{\n    float f0;\n    long f1;    Union_float_long(float _f0) : f0(_f0) {}\n    Union_float_long(long _f1) : f1(_f1) {}\n    ~Union_float_long() {}\n    bool operator==(float f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Write a function to round every number of a given vector of numbers and print the total sum multiplied by the length of the vector.\nlong round_and_sum(std::vector<Union_float_long> list1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = round_and_sum;\n    assert(candidate((std::vector<Union_float_long>({(float)22.4f, (float)4.0f, (float)-16.22f, (float)-9.1f, (float)11.0f, (float)-12.22f, (float)14.2f, (float)-5.2f, (float)17.5f}))) == (243));\n    assert(candidate((std::vector<Union_float_long>({(long)5, (long)2, (long)9, (long)24.3f, (long)29}))) == (345));\n    assert(candidate((std::vector<Union_float_long>({(float)25.0f, (float)56.7f, (float)89.2f}))) == (513));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to round every number of a given vector of Union_float_long objects and print the total sum multiplied by the length of the vector.\n# Initialize a variable to store the sum of rounded numbers.\n# Iterate over the input vector of Union_float_long objects.\n    # Check the type of each object in the vector.\n        # If it is a float, round it to the nearest integer and add it to the sum variable.\n        # If it is a long, add it to the sum variable.\n# Print the total sum multiplied by the length of the vector.\n# Return the total sum multiplied by the length of the vector."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_float_long{\n    float f0;\n    long f1;\n    Union_float_long(float _f0) : f0(_f0) {}\n    Union_float_long(long _f1) : f1(_f1) {}\n    ~Union_float_long() {}\n    bool operator==(float f) {\n        return f0 == f ;\n    }\n    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n\n// Write a function to round every number of a given vector of numbers and print the total sum multiplied by the length of the vector.\nlong round_and_sum(std::vector<Union_float_long> list1) {\n    long sum = 0;\n\n    for (const auto& num : list1) {\n        if (num == static_cast<float>(num.f0)) {\n            sum += static_cast<long>(std::round(num.f0));\n        } else if (num == static_cast<long>(num.f1)) {\n            sum += num.f1;\n        }\n    }\n\n    long total = sum * list1.size();\n    std::cout << total << std::endl;\n\n    return total;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/130",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the item with maximum frequency in a given vector.\nlong max_occurrences(std::vector<long> nums) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = max_occurrences;\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)8, (long)4, (long)7, (long)9, (long)8, (long)2, (long)6, (long)5, (long)1, (long)6, (long)1, (long)2, (long)3, (long)2, (long)4, (long)6, (long)9, (long)1, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)8, (long)4, (long)7, (long)9, (long)8, (long)7, (long)9, (long)15, (long)14, (long)10, (long)12, (long)13, (long)16, (long)18}))) == (8));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)20, (long)30, (long)40, (long)90, (long)80, (long)50, (long)30, (long)20, (long)50, (long)10}))) == (20));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the item with maximum frequency in a given vector.\n# Create a map to store the frequency of each item in the vector.\n# Initialize variables to keep track of the maximum frequency and the item with maximum frequency.\n# Iterate over the input vector.\n    # Check if the current item exists in the map.\n        # If it does, increment its frequency in the map.\n        # Update the maximum frequency and the item with maximum frequency if necessary.\n        # If the current item has a higher frequency than the previous maximum frequency, update the maximum frequency and the item with maximum frequency.\n        # If the current item has the same frequency as the previous maximum frequency, update the item with maximum frequency if the current item is smaller than the previous item with maximum frequency.\n    # If the current item does not exist in the map, initialize its frequency to 1 in the map.\n# Return the item with maximum frequency.\n"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the item with maximum frequency in a given vector.\nlong max_occurrences(std::vector<long> nums) {\n    std::unordered_map<long, int> freq_map;\n    long max_frequency = 0;\n    long max_item = 0;\n\n    // Iterate over the nums vector to count the frequency of each item.\n    for (const auto& num : nums) {\n        if (freq_map.count(num) > 0) {\n            freq_map[num]++;\n        } else {\n            freq_map[num] = 1;\n        }\n\n        // Update the maximum frequency and item if necessary.\n        if (freq_map[num] > max_frequency) {\n            max_frequency = freq_map[num];\n            max_item = num;\n        } else if (freq_map[num] == max_frequency && num < max_item) {\n            max_item = num;\n        }\n    }\n\n    return max_item;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/759",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check whether a given string is a decimal number with a precision of 2.\n# Check if the string is empty or has a length less than 3 (minimum length for a valid decimal number with precision 2).\n    # If it is, return false.\n# Check if the first character is either a digit or a minus sign.\n    # If it is not, return false.\n# Iterate over each character in the string, starting from the second character.\n    # Check if the character is a digit.\n        # If it is not, return false.\n# Check if the string contains exactly one decimal point.\n    # If it does not, return false.\n# Check if the string has a maximum of 2 digits after the decimal point.\n    # If it does not, return false.\n# Return true if all the conditions are satisfied."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    // Check if the string is empty or has a length less than 3\n    if (num.empty() || num.length() < 3) {\n        return false;\n    }\n\n    // Check if the first character is a digit or a minus sign\n    if (!isdigit(num[0]) && num[0] != '-') {\n        return false;\n    }\n\n    // Iterate over each character in the string, starting from the second character\n    for (int i = 1; i < num.length(); i++) {\n        // Check if the character is a digit\n        if (!isdigit(num[i])) {\n            return false;\n        }\n    }\n\n    // Check if the string contains exactly one decimal point\n    int decimalCount = std::count(num.begin(), num.end(), '.');\n    if (decimalCount != 1) {\n        return false;\n    }\n\n    // Get the index of the decimal point\n    int decimalIndex = num.find('.');\n\n    // Check if the string has a maximum of 2 digits after the decimal point\n    int digitsAfterDecimal = num.length() - decimalIndex - 1;\n    if (digitsAfterDecimal > 2) {\n        return false;\n    }\n\n    return true;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/277",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a map and integer n and filters the map to only include entries with values greater than or equal to n.\nstd::map<std::string,long> dict_filter(std::map<std::string,long> dict, long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = dict_filter;\n    assert(candidate((std::map<std::string,long>({{\"Cierra Vega\", 175}, {\"Alden Cantrell\", 180}, {\"Kierra Gentry\", 165}, {\"Pierre Cox\", 190}})), (170)) == (std::map<std::string,long>({{\"Cierra Vega\", 175}, {\"Alden Cantrell\", 180}, {\"Pierre Cox\", 190}})));\n    assert(candidate((std::map<std::string,long>({{\"Cierra Vega\", 175}, {\"Alden Cantrell\", 180}, {\"Kierra Gentry\", 165}, {\"Pierre Cox\", 190}})), (180)) == (std::map<std::string,long>({{\"Alden Cantrell\", 180}, {\"Pierre Cox\", 190}})));\n    assert(candidate((std::map<std::string,long>({{\"Cierra Vega\", 175}, {\"Alden Cantrell\", 180}, {\"Kierra Gentry\", 165}, {\"Pierre Cox\", 190}})), (190)) == (std::map<std::string,long>({{\"Pierre Cox\", 190}})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function that takes a map and an integer as input and returns a filtered map.\n# Create an empty map to store the filtered entries.\n# Iterate over each entry in the input map.\n    # Check if the value of the current entry is greater than or equal to the given integer.\n        # If it is, add the entry to the filtered map.\n# Return the filtered map."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a map and integer n and filters the map to only include entries with values greater than or equal to n.\nstd::map<std::string,long> dict_filter(std::map<std::string,long> dict, long n) {\n    std::map<std::string, long> filtered_dict;\n\n    for (const auto& entry : dict) {\n        if (entry.second >= n) {\n            filtered_dict.insert(entry);\n        }\n    }\n\n    return filtered_dict;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/270",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the sum of even numbers at even positions of a vector.\nlong sum_even_and_even_index(std::vector<long> arr) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = sum_even_and_even_index;\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)12, (long)1, (long)18, (long)8}))) == (30));\n    assert(candidate((std::vector<long>({(long)3, (long)20, (long)17, (long)9, (long)2, (long)10, (long)18, (long)13, (long)6, (long)18}))) == (26));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)12, (long)1}))) == (12));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the sum of even numbers at even positions of a vector.\n# Initialize a variable `sum` to keep track of the sum.\n# Iterate over the vector using a for loop with a step size of 2.\n    # Check if the number at the current position is even.\n        # If it is, add it to the `sum`.\n# Return the `sum`."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to find the sum of even numbers at even positions of a vector.\nlong sum_even_and_even_index(std::vector<long> arr) {\n    long sum = 0;\n\n    // Iterate over the vector with a step size of 2\n    for (int i = 0; i < arr.size(); i += 2) {\n        // Check if the number at the current position is even\n        if (arr[i] % 2 == 0) {\n            sum += arr[i];\n        }\n    }\n\n    return sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/559",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the sum of the largest contiguous subvector in the given vector.\nlong max_sub_array_sum(std::vector<long> a, long size) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = max_sub_array_sum;\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)4, (long)-1, (long)-2, (long)1, (long)5, (long)-3})), (8)) == (7));\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5, (long)-2, (long)-3, (long)2, (long)6, (long)-4})), (8)) == (8));\n    assert(candidate((std::vector<long>({(long)-4, (long)-5, (long)6, (long)-3, (long)-4, (long)3, (long)7, (long)-5})), (8)) == (10));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the sum of the largest contiguous subvector.\n# Initialize variables to store the current maximum sum and the maximum sum seen so far.\n# Iterate over the input vector.\n    # Update the current maximum sum by adding the current element or starting a new subvector.\n    # Update the maximum sum seen so far if the current maximum sum is greater.\n# Return the maximum sum seen so far.\n"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the sum of the largest contiguous subvector in the given vector.\nlong max_sub_array_sum(std::vector<long> a, long size) {\n    long current_max = a[0];\n    long max_so_far = a[0];\n\n    for (int i = 1; i < size; i++) {\n        current_max = std::max(a[i], current_max + a[i]);\n        max_so_far = std::max(max_so_far, current_max);\n    }\n\n    return max_so_far;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/249",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the intersection of two vectors.\nstd::vector<long> intersection_array(std::vector<long> array_nums1, std::vector<long> array_nums2) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = intersection_array;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)7, (long)8, (long)9, (long)10})), (std::vector<long>({(long)1, (long)2, (long)4, (long)8, (long)9}))) == (std::vector<long>({(long)1, (long)2, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)7, (long)8, (long)9, (long)10})), (std::vector<long>({(long)3, (long)5, (long)7, (long)9}))) == (std::vector<long>({(long)3, (long)5, (long)7, (long)9})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)7, (long)8, (long)9, (long)10})), (std::vector<long>({(long)10, (long)20, (long)30, (long)40}))) == (std::vector<long>({(long)10})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the intersection of two vectors.\n# Create a set to store the unique elements of the first vector.\n# Create a result vector to store the intersection elements.\n# Iterate over the second vector.\n    # Check if the current element exists in the set.\n        # If it does, add it to the result vector and remove it from the set.\n# Return the result vector containing the intersection elements."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the intersection of two vectors.\nstd::vector<long> intersection_array(std::vector<long> array_nums1, std::vector<long> array_nums2) {\n    std::set<long> num_set;\n    std::vector<long> result;\n\n    // Insert elements from array_nums1 into the set\n    for (const auto& num : array_nums1) {\n        num_set.insert(num);\n    }\n\n    // Find intersection elements in array_nums2\n    for (const auto& num : array_nums2) {\n        if (num_set.count(num) > 0) {\n            result.push_back(num);\n            num_set.erase(num);\n        }\n    }\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/262",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector and an integer L and splits the given vector into two parts where the length of the first part of the vector is L, and returns the resulting vectors in a tuple.\nstd::any split_two_parts(std::vector<std::any> list1, long L) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = split_two_parts;\n    assert(candidate((std::vector<std::any>({(long)1, (long)1, (long)2, (long)3, (long)4, (long)4, (long)5, (long)1})), (3)) == std::make_tuple(std::vector<long>({(long)1, (long)1, (long)2}), std::vector<long>({(long)3, (long)4, (long)4, (long)5, (long)1})));\n    assert(candidate((std::vector<std::any>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\"})), (2)) == std::make_tuple(std::vector<std::string>({(std::string)\"a\", (std::string)\"b\"}), std::vector<std::string>({(std::string)\"c\", (std::string)\"d\"})));\n    assert(candidate((std::vector<std::any>({(std::string)\"p\", (std::string)\"y\", (std::string)\"t\", (std::string)\"h\", (std::string)\"o\", (std::string)\"n\"})), (4)) == std::make_tuple(std::vector<std::string>({(std::string)\"p\", (std::string)\"y\", (std::string)\"t\", (std::string)\"h\"}), std::vector<std::string>({(std::string)\"o\", (std::string)\"n\"})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function that takes in a vector and an integer L as parameters.\n# Create two empty vectors, first_part and second_part.\n# Iterate over the input vector up to index L and append each element to the first_part vector.\n# Iterate over the input vector starting from index L and append each element to the second_part vector.\n# Return a tuple containing the first_part vector and the second_part vector."
        ],
        "code": [
            "#include <cassert>\n#include <vector>\n#include <tuple>\n\n// Write a function that takes in a vector and an integer L and splits the given vector into two parts where the length of the first part of the vector is L, and returns the resulting vectors in a tuple.\nstd::tuple<std::vector<std::any>, std::vector<std::any>> split_two_parts(std::vector<std::any> list1, long L) {\n    std::vector<std::any> first_part;\n    std::vector<std::any> second_part;\n\n    // Iterate over the input vector up to index L and append each element to the first_part vector.\n    for (long i = 0; i < L; i++) {\n        first_part.push_back(list1[i]);\n    }\n\n    // Iterate over the input vector starting from index L and append each element to the second_part vector.\n    for (long i = L; i < list1.size(); i++) {\n        second_part.push_back(list1[i]);\n    }\n\n    // Return a tuple containing the first_part vector and the second_part vector.\n    return std::make_tuple(first_part, second_part);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/607",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nstd::tuple<std::string, long, long> find_literals(std::string text, std::string pattern) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find_literals;\n    assert(candidate((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")) == (std::make_tuple(\"fox\", 16, 19)));\n    assert(candidate((\"Its been a very crazy procedure right\"), (\"crazy\")) == (std::make_tuple(\"crazy\", 16, 21)));\n    assert(candidate((\"Hardest choices required strongest will\"), (\"will\")) == (std::make_tuple(\"will\", 35, 39)));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to search a string for a regex pattern and return the matching substring, start index, and end index.\n# Initialize variables to store the matching substring, start index, and end index.\n# Iterate over the input string, starting from index 0.\n    # Check if the substring starting from the current index matches the given pattern.\n        # If it does, update the matching substring, start index, and end index.\n# Return the tuple containing the matching substring, start index, and end index."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to search a string for a regex pattern. The function should return the matching substring, a start index and an end index.\nstd::tuple<std::string, long, long> find_literals(std::string text, std::string pattern) {\n    std::string matching_substring = \"\";\n    long start_index = -1;\n    long end_index = -1;\n\n    // Iterate over the input string to find the matching substring.\n    for (long i = 0; i < text.size(); i++) {\n        // Check if the substring starting from the current index matches the given pattern.\n        if (text.substr(i, pattern.size()) == pattern) {\n            if (start_index == -1) {\n                start_index = i;\n            }\n            end_index = i + pattern.size() - 1;\n        }\n    }\n\n    return std::make_tuple(matching_substring, start_index, end_index);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/14",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the volume of a triangular prism.\nlong find_Volume(long l, long b, long h) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find_Volume;\n    assert(candidate((10), (8), (6)) == (240));\n    assert(candidate((3), (2), (2)) == (6));\n    assert(candidate((1), (2), (1)) == (1));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the volume of a triangular prism.\n# Multiply the length (l), breadth (b), and height (h) of the prism.\n# Divide the product by 2 to get the area of the triangular base.\n# Multiply the area by the height (h) of the prism.\n# Return the calculated volume of the triangular prism."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the volume of a triangular prism.\nlong find_Volume(long l, long b, long h) {\n    long base_area = (l * b) / 2;\n    long volume = base_area * h;\n    return volume;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/638",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlong wind_chill(long v, long t) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = wind_chill;\n    assert(candidate((120), (35)) == (40));\n    assert(candidate((40), (20)) == (19));\n    assert(candidate((10), (8)) == (6));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to calculate the wind chill index rounded to the next integer.\n# Use the formula: wind_chill_index = 13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16)\n# Calculate the wind chill index using the given wind velocity (v) in km/h and temperature (t) in celsius.\n# Round the wind chill index to the next integer.\n# Return the rounded wind chill index."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlong wind_chill(long v, long t) {\n    double wind_chill_index = 13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16);\n    return std::ceil(wind_chill_index);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/269",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the ascii value of a character.\nlong ascii_value(std::string k) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = ascii_value;\n    assert(candidate((\"A\")) == (65));\n    assert(candidate((\"R\")) == (82));\n    assert(candidate((\"S\")) == (83));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the ASCII value of a character.\n# Convert the given string to a character array.\n# Return the ASCII value of the first character in the array."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the ascii value of a character.\nlong ascii_value(std::string k) {\n    char c = k[0];\n    return static_cast<long>(c);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/741",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether all the characters are same or not.\nbool all_Characters_Same(std::string s) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = all_Characters_Same;\n    assert(candidate((\"python\")) == (false));\n    assert(candidate((\"aaa\")) == (true));\n    assert(candidate((\"data\")) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Get the first character of the string.\n# Iterate through each character in the string starting from the second character.\n    # Check if the current character is not equal to the first character.\n        # If it is not equal, return false.\n# If all characters are the same, return true."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether all the characters are same or not.\nbool all_Characters_Same(std::string s) {\n    if (s.empty()) {\n        return true;\n    }\n    \n    char firstChar = s[0];\n    \n    for (int i = 1; i < s.length(); i++) {\n        if (s[i] != firstChar) {\n            return false;\n        }\n    }\n    \n    return true;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/619",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n"
        ],
        "draft_plan": [
            "# Create two strings: one for letters and one for numbers.\n# Iterate through each character in the given string.\n    # Check if the current character is a number.\n        # If it is, append it to the numbers string.\n        # If it is not, append it to the letters string.\n# Return the concatenation of the letters and numbers strings."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string letters, numbers;\n    \n    for (char c : test_str) {\n        if (isdigit(c)) {\n            numbers += c;\n        } else {\n            letters += c;\n        }\n    }\n    \n    return letters + numbers;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/79",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check whether the length of a word is odd or not.\n# Get the length of the input string.\n# Check if the length of the string is odd.\n    # If it is, return true.\n    # If it is not, return false."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int length = s.length();\n    if (length % 2 == 1) {\n        return true;\n    } else {\n        return false;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_cpp/465",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to drop empty items from a given map.\nstd::map<std::string,std::string> drop_empty(std::map<std::string,std::optional<std::string>> dict1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = drop_empty;\n    assert(candidate(std::map<std::string,std::string>({{\"c1\", \"Red\"}, {\"c2\", \"Green\"}, {\"c3\", std::nullopt}})) == (std::map<std::string,std::string>({{\"c1\", \"Red\"}, {\"c2\", \"Green\"}})));\n    assert(candidate(std::map<std::string,std::string>({{\"c1\", \"Red\"}, {\"c2\", std::nullopt}, {\"c3\", std::nullopt}})) == (std::map<std::string,std::string>({{\"c1\", \"Red\"}})));\n    assert(candidate(std::map<std::string,std::nullopt>({{\"c1\", std::nullopt}, {\"c2\", \"Green\"}, {\"c3\", std::nullopt}})) == (std::map<std::string,std::string>({{\"c2\", \"Green\"}})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to drop empty items from a given map.\n# Create an empty map to store the non-empty items.\n# Iterate over the key-value pairs in the input map.\n    # Check if the value of the current key is not empty.\n        # If it is not empty, add the key-value pair to the new map.\n# Return the new map without empty items."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to drop empty items from a given map.\nstd::map<std::string, std::string> drop_empty(std::map<std::string, std::optional<std::string>> dict1) {\n    std::map<std::string, std::string> non_empty_dict;\n\n    // Iterate over the key-value pairs in the input map.\n    for (const auto& kvp : dict1) {\n        std::string key = kvp.first;\n        std::optional<std::string> value = kvp.second;\n\n        // Check if the value is not empty.\n        if (value) {\n            non_empty_dict[key] = *value;\n        }\n    }\n\n    return non_empty_dict;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/251",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector and an element and inserts the element before each element in the vector, and returns the resulting vector.\nstd::vector<std::string> insert_element(std::vector<std::string> list, std::string element) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = insert_element;\n    assert(candidate((std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Black\"})), (\"c\")) == (std::vector<std::string>({(std::string)\"c\", (std::string)\"Red\", (std::string)\"c\", (std::string)\"Green\", (std::string)\"c\", (std::string)\"Black\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"python\", (std::string)\"java\"})), (\"program\")) == (std::vector<std::string>({(std::string)\"program\", (std::string)\"python\", (std::string)\"program\", (std::string)\"java\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"happy\", (std::string)\"sad\"})), (\"laugh\")) == (std::vector<std::string>({(std::string)\"laugh\", (std::string)\"happy\", (std::string)\"laugh\", (std::string)\"sad\"})));\n}\n"
        ],
        "draft_plan": [
            "# Create an empty vector to store the resulting elements.\n# Iterate over each element in the given vector.\n    # Insert the given element before the current element.\n    # Add the modified element to the resulting vector.\n# Return the resulting vector with the inserted elements."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector and an element and inserts the element before each element in the vector, and returns the resulting vector.\nstd::vector<std::string> insert_element(std::vector<std::string> list, std::string element) {\n    std::vector<std::string> result;\n\n    // Iterate over each element in the given vector.\n    for (const auto& item : list) {\n        // Insert the given element before the current element.\n        result.push_back(element);\n        result.push_back(item);\n    }\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/478",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove lowercase substrings from a given string.\nstd::string remove_lowercase(std::string str1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = remove_lowercase;\n    assert(candidate((\"PYTHon\")) == (\"PYTH\"));\n    assert(candidate((\"FInD\")) == (\"FID\"));\n    assert(candidate((\"STRinG\")) == (\"STRG\"));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to remove lowercase substrings from a given string.\n# Initialize an empty result string.\n# Iterate over each character in the given string.\n    # Check if the current character is lowercase.\n        # If it is, continue to the next character.\n        # If it is not, append the current character to the result string.\n# Return the result string without lowercase substrings."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove lowercase substrings from a given string.\nstd::string remove_lowercase(std::string str1) {\n    std::string result;\n    for (char c : str1) {\n        if (std::islower(c)) {\n            continue;\n        }\n        result += c;\n    }\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/224",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of set bits (binary digits with value 1) in a given number.\nlong count_Set_Bits(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = count_Set_Bits;\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (1));\n    assert(candidate((6)) == (2));\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable count to 0, to keep track of the number of set bits.\n# Iterate through each bit of the given number.\n    # Check if the current bit is set (i.e., equal to 1).\n        # If it is, increment the count by 1.\n# Return the count of set bits."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to count the number of set bits in a given number.\nlong count_Set_Bits(long n) {\n    long count = 0;\n\n    // Iterate through each bit of the number.\n    while (n > 0) {\n        // Check if the current bit is set.\n        if (n & 1) {\n            count++;\n        }\n\n        // Right shift the number by 1 to move to the next bit.\n        n >>= 1;\n    }\n\n    return count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/424",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract only the rear index element of each string in the given tuple.\nstd::vector<std::string> extract_rear(std::tuple<std::string, std::string, std::string> test_tuple) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = extract_rear;\n    assert(candidate((std::make_tuple(\"Mers\", \"for\", \"Vers\"))) == (std::vector<std::string>({(std::string)\"s\", (std::string)\"r\", (std::string)\"s\"})));\n    assert(candidate((std::make_tuple(\"Avenge\", \"for\", \"People\"))) == (std::vector<std::string>({(std::string)\"e\", (std::string)\"r\", (std::string)\"e\"})));\n    assert(candidate((std::make_tuple(\"Gotta\", \"get\", \"go\"))) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"t\", (std::string)\"o\"})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to extract the rear index element from each string in a tuple.\n# Create an empty vector to store the extracted elements.\n# Retrieve the three strings from the tuple.\n# Extract the rear index element from each string by using string.substr() function and push it into the vector.\n# Return the vector with the extracted elements."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract only the rear index element of each string in the given tuple.\nstd::vector<std::string> extract_rear(std::tuple<std::string, std::string, std::string> test_tuple) {\n    std::vector<std::string> extracted_elements;\n    \n    // Retrieve the three strings from the tuple.\n    std::string str1 = std::get<0>(test_tuple);\n    std::string str2 = std::get<1>(test_tuple);\n    std::string str3 = std::get<2>(test_tuple);\n    \n    // Extract the rear index element from each string and push it into the vector.\n    extracted_elements.push_back(str1.substr(str1.length() - 1));\n    extracted_elements.push_back(str2.substr(str2.length() - 1));\n    extracted_elements.push_back(str3.substr(str3.length() - 1));\n    \n    return extracted_elements;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/172",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurence of the string 'std' in a given string.\nlong count_occurance(std::string s) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = count_occurance;\n    assert(candidate((\"letstdlenstdporstd\")) == (3));\n    assert(candidate((\"truststdsolensporsd\")) == (1));\n    assert(candidate((\"makestdsostdworthit\")) == (2));\n    assert(candidate((\"stds\")) == (1));\n    assert(candidate((\"\")) == (0));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count the number of occurrences of the string 'std' in a given string.\n# Initialize a counter variable to keep track of the number of occurrences.\n# Iterate over the given string.\n    # Check if the current character is 's'.\n        # If it is, check if the next two characters form the string 'std'.\n            # If they do, increment the counter.\n# Return the counter variable."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurence of the string 'std' in a given string.\nlong count_occurance(std::string s) {\n    long count = 0;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] == 's' && i + 2 < s.size() && s[i + 1] == 't' && s[i + 2] == 'd') {\n            count++;\n        }\n    }\n    return count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/808",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if the given tuples contain the k or not.\nbool check_K(std::vector<long> test_tup, long K) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = check_K;\n    assert(candidate((std::vector<long>({(long)10, (long)4, (long)5, (long)6, (long)8})), (6)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (7)) == (false));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)44, (long)11, (long)12})), (11)) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check if the given tuples contain K or not.\n# Iterate over the input vector of tuples.\n    # Iterate over each element in the tuple.\n        # Check if the current element is equal to K.\n            # If it is, return true.\n# If the loop completes without finding K, return false."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if the given tuples contain the k or not.\nbool check_K(std::vector<long> test_tup, long K) {\n    for (const auto& tup : test_tup) {\n        for (const auto& elem : tup) {\n            if (elem == K) {\n                return true;\n            }\n        }\n    }\n    return false;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/578",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to interleave 3 vectors of the same length into a single flat vector.\nstd::vector<long> interleave_lists(std::vector<long> list1, std::vector<long> list2, std::vector<long> list3) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = interleave_lists;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})), (std::vector<long>({(long)10, (long)20, (long)30, (long)40, (long)50, (long)60, (long)70})), (std::vector<long>({(long)100, (long)200, (long)300, (long)400, (long)500, (long)600, (long)700}))) == (std::vector<long>({(long)1, (long)10, (long)100, (long)2, (long)20, (long)200, (long)3, (long)30, (long)300, (long)4, (long)40, (long)400, (long)5, (long)50, (long)500, (long)6, (long)60, (long)600, (long)7, (long)70, (long)700})));\n    assert(candidate((std::vector<long>({(long)10, (long)20})), (std::vector<long>({(long)15, (long)2})), (std::vector<long>({(long)5, (long)10}))) == (std::vector<long>({(long)10, (long)15, (long)5, (long)20, (long)2, (long)10})));\n    assert(candidate((std::vector<long>({(long)11, (long)44})), (std::vector<long>({(long)10, (long)15})), (std::vector<long>({(long)20, (long)5}))) == (std::vector<long>({(long)11, (long)10, (long)20, (long)44, (long)15, (long)5})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to interleave 3 vectors of the same length into a single flat vector.\n# Create an empty vector to store the interleaved elements.\n# Get the length of any of the input vectors.\n# Iterate over the indices from 0 to length - 1.\n    # Get the element at the current index from each input vector.\n    # Append the elements to the output vector in the order list1, list2, list3.\n# Return the output vector containing the interleaved elements."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to interleave 3 vectors of the same length into a single flat vector.\nstd::vector<long> interleave_lists(std::vector<long> list1, std::vector<long> list2, std::vector<long> list3) {\n    assert(list1.size() == list2.size() && list2.size() == list3.size());\n\n    std::vector<long> interleaved;\n    int length = list1.size();\n\n    for (int i = 0; i < length; i++) {\n        interleaved.push_back(list1[i]);\n        interleaved.push_back(list2[i]);\n        interleaved.push_back(list3[i]);\n    }\n\n    return interleaved;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/102",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n"
        ],
        "draft_plan": [
            "# Initialize an empty string to store the converted camel case string.\n# Iterate through each character in the given snake case string.\n    # Check if the current character is an underscore.\n        # If it is, remove the underscore and capitalize the next character.\n    # Append the current character or modified character to the camel case string.\n# Return the camel case string."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string camelCase;\n    bool capitalizeNext = false;\n    \n    for (char c : word) {\n        if (c == '_') {\n            capitalizeNext = true;\n        } else {\n            if (capitalizeNext) {\n                camelCase += std::toupper(c);\n                capitalizeNext = false;\n            } else {\n                camelCase += c;\n            }\n        }\n    }\n    \n    return camelCase;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/801",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of equal numbers from three given integers.\nlong test_three_equal(long x, long y, long z) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = test_three_equal;\n    assert(candidate((1), (1), (1)) == (3));\n    assert(candidate((-1), (-2), (-3)) == (0));\n    assert(candidate((1), (2), (2)) == (2));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count the number of equal numbers from three given integers.\n# Initialize a counter for equal numbers.\n# Check if the first and second numbers are equal.\n    # If they are, increment the counter.\n# Check if the first and third numbers are equal.\n    # If they are, increment the counter.\n# Check if the second and third numbers are equal.\n    # If they are, increment the counter.\n# Return the count of equal numbers."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of equal numbers from three given integers.\nlong test_three_equal(long x, long y, long z) {\n    long equal_count = 0;\n    \n    // Check if the first and second numbers are equal.\n    if (x == y) {\n        equal_count++;\n    }\n    \n    // Check if the first and third numbers are equal.\n    if (x == z) {\n        equal_count++;\n    }\n    \n    // Check if the second and third numbers are equal.\n    if (y == z) {\n        equal_count++;\n    }\n    \n    return equal_count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/782",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the sum of all odd length subvectors. https://www.geeksforgeeks.org/sum-of-all-odd-length-subvectors/\nlong odd_length_sum(std::vector<long> arr) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = odd_length_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4}))) == (14));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (15));\n    assert(candidate((std::vector<long>({(long)1, (long)7}))) == (8));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the sum of all odd length subvectors.\n# Initialize a variable to store the sum of all odd length subvectors.\n# Iterate over the input vector.\n    # Iterate over all possible subvectors starting from the current element.\n        # Check if the length of the subvector is odd.\n            # If it is, add the sum of the subvector to the total sum.\n# Return the total sum of all odd length subvectors."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to find the sum of all odd length subvectors.\nlong odd_length_sum(std::vector<long> arr) {\n    long sum = 0;\n\n    // Iterate over the input vector.\n    for (int i = 0; i < arr.size(); i++) {\n        // Iterate over all possible subvectors starting from the current element.\n        for (int j = i; j < arr.size(); j++) {\n            // Check if the length of the subvector is odd.\n            if ((j - i + 1) % 2 != 0) {\n                // Add the sum of the subvector to the total sum.\n                for (int k = i; k <= j; k++) {\n                    sum += arr[k];\n                }\n            }\n        }\n    }\n\n    return sum;\n}\n"
        ]
    },
    {
        "id": "mbpp_cpp/67",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the number of ways to partition a set of Bell numbers.\nlong bell_number(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = bell_number;\n    assert(candidate((2)) == (2));\n    assert(candidate((10)) == (115975));\n    assert(candidate((56)) == (6775685320645824322581483068371419745979053216268760300));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the number of ways to partition a set of Bell numbers.\n# Create a list to store the Bell numbers.\n# Initialize the first Bell number as 1.\n# Iterate from 1 to n.\n    # Calculate the next Bell number using the previous Bell numbers.\n# Return the nth Bell number."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the number of ways to partition a set of Bell numbers.\nlong bell_number(long n) {\n    std::vector<long> bell_numbers(n + 1, 0);\n\n    // Initialize the first Bell number as 1.\n    bell_numbers[0] = 1;\n\n    // Calculate the Bell numbers from 1 to n.\n    for (long i = 1; i <= n; i++) {\n        for (long j = 0; j < i; j++) {\n            bell_numbers[i] += bell_numbers[j] * bell_numbers[i - j - 1];\n        }\n    }\n\n    return bell_numbers[n];\n}"
        ]
    },
    {
        "id": "mbpp_cpp/458",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the area of a rectangle.\nlong rectangle_area(long l, long b) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = rectangle_area;\n    assert(candidate((10), (20)) == (200));\n    assert(candidate((10), (5)) == (50));\n    assert(candidate((4), (2)) == (8));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to calculate the area of a rectangle.\n# Multiply the length (l) of the rectangle by the width (b) of the rectangle.\n# Return the product as the area of the rectangle."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the area of a rectangle.\nlong rectangle_area(long l, long b) {\n    return l * b;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/599",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find sum and average of first n natural numbers.\nstd::tuple<long, float> sum_average(long number) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = sum_average;\n    assert(candidate((10)) == (std::make_tuple(55, 5.5f)));\n    assert(candidate((15)) == (std::make_tuple(120, 8.0f)));\n    assert(candidate((20)) == (std::make_tuple(210, 10.5f)));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the sum and average of the first n natural numbers.\n# Initialize variables for sum and count.\n# Iterate from 1 to n.\n    # Add the current number to the sum.\n    # Increment the count by 1.\n# Calculate the average by dividing the sum by the count.\n# Return a tuple containing the sum and average."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find sum and average of first n natural numbers.\nstd::tuple<long, float> sum_average(long number) {\n    long sum = 0;\n    long count = 0;\n\n    // Calculate the sum and count of the first n natural numbers.\n    for (long i = 1; i <= number; i++) {\n        sum += i;\n        count++;\n    }\n\n    // Calculate the average.\n    float average = static_cast<float>(sum) / count;\n\n    return std::make_tuple(sum, average);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/261",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nstd::tuple<long, long, long, long> division_elements(std::tuple<long, long, long, long> test_tup1, std::tuple<long, long, long, long> test_tup2) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = division_elements;\n    assert(candidate((std::make_tuple(10, 4, 6, 9)), (std::make_tuple(5, 2, 3, 3))) == (std::make_tuple(2, 2, 2, 3)));\n    assert(candidate((std::make_tuple(12, 6, 8, 16)), (std::make_tuple(6, 3, 4, 4))) == (std::make_tuple(2, 2, 2, 4)));\n    assert(candidate((std::make_tuple(20, 14, 36, 18)), (std::make_tuple(5, 7, 6, 9))) == (std::make_tuple(4, 2, 6, 2)));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to perform element-wise division on two tuples.\n# Create a new tuple to store the division results.\n# Iterate over the elements in the tuples.\n    # Retrieve the corresponding elements from both tuples.\n    # Perform the division operation.\n    # Store the result in the new tuple.\n# Return the new tuple with the division results."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nstd::tuple<long, long, long, long> division_elements(std::tuple<long, long, long, long> test_tup1, std::tuple<long, long, long, long> test_tup2) {\n    std::tuple<long, long, long, long> result;\n\n    // Perform element-wise division on the tuples\n    std::get<0>(result) = std::get<0>(test_tup1) / std::get<0>(test_tup2);\n    std::get<1>(result) = std::get<1>(test_tup1) / std::get<1>(test_tup2);\n    std::get<2>(result) = std::get<2>(test_tup1) / std::get<2>(test_tup2);\n    std::get<3>(result) = std::get<3>(test_tup1) / std::get<3>(test_tup2);\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/566",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to get the sum of the digits of a non-negative integer.\nlong sum_digits(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = sum_digits;\n    assert(candidate((345)) == (12));\n    assert(candidate((12)) == (3));\n    assert(candidate((97)) == (16));\n}\n"
        ],
        "draft_plan": [
            "# Convert the given integer to a string.\n# Iterate through each character in the string.\n    # Convert the character back to an integer.\n    # Add the integer to a running sum.\n# Return the sum of the digits."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to get the sum of the digits of a non-negative integer.\nlong sum_digits(long n) {\n    std::string str_num = std::to_string(n);\n    long sum = 0;\n\n    // Iterate through each character in the string and add its integer value to the sum.\n    for (char c : str_num) {\n        sum += c - '0';\n    }\n\n    return sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/94",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of tuples, write a function that returns the first value of the tuple with the smallest second value.\nstd::string index_minimum(std::vector<std::tuple<std::string, long>> test_list) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = index_minimum;\n    assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Rash\", 143), (std::tuple<std::string, long>)std::make_tuple(\"Manjeet\", 200), (std::tuple<std::string, long>)std::make_tuple(\"Varsha\", 100)}))) == (\"Varsha\"));\n    assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Yash\", 185), (std::tuple<std::string, long>)std::make_tuple(\"Dawood\", 125), (std::tuple<std::string, long>)std::make_tuple(\"Sanya\", 175)}))) == (\"Dawood\"));\n    assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Sai\", 345), (std::tuple<std::string, long>)std::make_tuple(\"Salman\", 145), (std::tuple<std::string, long>)std::make_tuple(\"Ayesha\", 96)}))) == (\"Ayesha\"));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the first value of the tuple with the smallest second value.\n# Initialize variables to store the index and minimum value.\n# Iterate over the input list of tuples.\n    # Retrieve the second value of each tuple.\n    # Check if it is smaller than the current minimum value.\n        # If it is, update the minimum value and store the index of the current tuple.\n# Retrieve the first value of the tuple at the stored index.\n# Return the first value."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of tuples, write a function that returns the first value of the tuple with the smallest second value.\nstd::string index_minimum(std::vector<std::tuple<std::string, long>> test_list) {\n    // Check if the input list is empty\n    assert(!test_list.empty());\n\n    // Initialize variables\n    long min_value = std::get<1>(test_list[0]);\n    size_t min_index = 0;\n\n    // Iterate over the list to find the minimum value and its index\n    for (size_t i = 1; i < test_list.size(); i++) {\n        long current_value = std::get<1>(test_list[i]);\n        if (current_value < min_value) {\n            min_value = current_value;\n            min_index = i;\n        }\n    }\n\n    // Retrieve and return the first value at the minimum index\n    return std::get<0>(test_list[min_index]);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/618",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0f, (float)2.5f, (float)2.0f})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0f, (float)0.5f})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8f, (float)1.7142857142857142f})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to divide two vectors element-wise.\n# Check if the sizes of the two input vectors are equal.\n    # If they are not equal, return an empty vector.\n# Create an empty vector to store the division results.\n# Iterate over the elements of the vectors using a loop.\n    # Divide the corresponding elements of nums1 and nums2.\n    # Store the division result in the result vector.\n# Return the result vector containing the element-wise division of the two input vectors."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    // Check if the sizes of the two input vectors are equal.\n    if (nums1.size() != nums2.size()) {\n        return {};\n    }\n\n    std::vector<float> result;\n    int n = nums1.size();\n\n    // Iterate over the elements of the vectors and perform element-wise division.\n    for (int i = 0; i < n; i++) {\n        float div = (float) nums1[i] / nums2[i];\n        result.push_back(div);\n    }\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/393",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the vector with maximum length.\nstd::tuple<long, std::vector<long>> max_length_list(std::vector<std::vector<long>> input_list) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == (std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17}))));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == (std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == (std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9}))));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the vector with the maximum length.\n# Initialize a variable to store the maximum length found and set it to 0.\n# Initialize a vector to store the vector with the maximum length.\n# Iterate over the input list of vectors.\n    # Check the length of each vector in the input list.\n    # If the length is greater than the maximum length found so far, update the maximum length and store the vector.\n# Return a tuple with the maximum length and the vector with that length."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to find the vector with the maximum length.\nstd::tuple<long, std::vector<long>> max_length_list(std::vector<std::vector<long>> input_list) {\n    long max_length = 0;\n    std::vector<long> max_length_vector;\n\n    // Iterate over the input list of vectors.\n    for (const auto& vec : input_list) {\n        // Check the length of each vector.\n        if (vec.size() > max_length) {\n            max_length = vec.size();\n            max_length_vector = vec;\n        }\n    }\n\n    return std::make_tuple(max_length, max_length_vector);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/462",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_nullopt__std_vector_std_string_{\n    std::vector<std::nullopt> f0;\n    std::vector<std::string> f1;    Union_std_vector_std_nullopt__std_vector_std_string_(std::vector<std::nullopt> _f0) : f0(_f0) {}\n    Union_std_vector_std_nullopt__std_vector_std_string_(std::vector<std::string> _f1) : f1(_f1) {}\n    ~Union_std_vector_std_nullopt__std_vector_std_string_() {}\n    bool operator==(std::vector<std::nullopt> f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<std::string> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find all possible combinations of the elements of a given vector.\nstd::vector<Union_std_vector_std_nullopt__std_vector_std_string_> combinations_list(std::vector<std::string> list1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = combinations_list;\n    assert(candidate((std::vector<std::string>({(std::string)\"orange\", (std::string)\"red\", (std::string)\"green\", (std::string)\"blue\"}))) == (std::vector<Union_std_vector_std_nullopt__std_vector_std_string_>({std::vector<long>(), std::vector<std::string>({(std::string)\"orange\"}), std::vector<std::string>({(std::string)\"red\"}), std::vector<std::string>({(std::string)\"red\", (std::string)\"orange\"}), std::vector<std::string>({(std::string)\"green\"}), std::vector<std::string>({(std::string)\"green\", (std::string)\"orange\"}), std::vector<std::string>({(std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"green\", (std::string)\"red\", (std::string)\"orange\"}), std::vector<std::string>({(std::string)\"blue\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"orange\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"red\", (std::string)\"orange\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"green\", (std::string)\"orange\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"green\", (std::string)\"red\", (std::string)\"orange\"})})));\n    assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"green\", (std::string)\"blue\", (std::string)\"white\", (std::string)\"black\", (std::string)\"orange\"}))) == (std::vector<Union_std_vector_std_nullopt__std_vector_std_string_>({std::vector<long>(), std::vector<std::string>({(std::string)\"red\"}), std::vector<std::string>({(std::string)\"green\"}), std::vector<std::string>({(std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"blue\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"blue\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"white\"}), std::vector<std::string>({(std::string)\"white\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"white\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"white\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"white\", (std::string)\"blue\"}), std::vector<std::string>({(std::string)\"white\", (std::string)\"blue\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"white\", (std::string)\"blue\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"white\", (std::string)\"blue\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"blue\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"blue\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"blue\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"blue\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"white\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"white\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"white\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"white\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"white\", (std::string)\"blue\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"white\", (std::string)\"blue\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"white\", (std::string)\"blue\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"white\", (std::string)\"blue\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"blue\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"blue\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"blue\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"blue\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"white\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"white\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"white\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"white\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"white\", (std::string)\"blue\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"white\", (std::string)\"blue\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"white\", (std::string)\"blue\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"white\", (std::string)\"blue\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"blue\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"blue\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"blue\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"blue\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"white\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"white\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"white\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"white\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"white\", (std::string)\"blue\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"white\", (std::string)\"blue\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"white\", (std::string)\"blue\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"white\", (std::string)\"blue\", (std::string)\"green\", (std::string)\"red\"})})));\n    assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"green\", (std::string)\"black\", (std::string)\"orange\"}))) == (std::vector<Union_std_vector_std_nullopt__std_vector_std_string_>({std::vector<long>(), std::vector<std::string>({(std::string)\"red\"}), std::vector<std::string>({(std::string)\"green\"}), std::vector<std::string>({(std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"black\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"green\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"red\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"green\"}), std::vector<std::string>({(std::string)\"orange\", (std::string)\"black\", (std::string)\"green\", (std::string)\"red\"})})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find all possible combinations of the elements of a given vector.\n# Create a vector to store the combinations.\n# Create a loop to iterate through each element in the input vector.\n    # Create a nested loop to iterate through the remaining elements in the input vector.\n        # Create a vector to store a combination.\n        # Add the current element to the combination vector.\n        # Add the remaining elements to the combination vector.\n        # Add the combination vector to the combinations vector.\n# Return the combinations vector."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_nullopt__std_vector_std_string_{\n    std::vector<std::nullopt> f0;\n    std::vector<std::string> f1;    Union_std_vector_std_nullopt__std_vector_std_string_(std::vector<std::nullopt> _f0) : f0(_f0) {}\n    Union_std_vector_std_nullopt__std_vector_std_string_(std::vector<std::string> _f1) : f1(_f1) {}\n    ~Union_std_vector_std_nullopt__std_vector_std_string_() {}\n    bool operator==(std::vector<std::nullopt> f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<std::string> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find all possible combinations of the elements of a given vector.\nstd::vector<Union_std_vector_std_nullopt__std_vector_std_string_> combinations_list(std::vector<std::string> list1) {\n    std::vector<Union_std_vector_std_nullopt__std_vector_std_string_> combinations;\n    \n    // Loop through each element in the input vector\n    for (size_t i = 0; i < list1.size(); i++) {\n        // Nested loop to iterate through the remaining elements\n        for (size_t j = i+1; j < list1.size(); j++) {\n            std::vector<std::string> combination;\n            \n            // Add current element to the combination vector\n            combination.push_back(list1[i]);\n            \n            // Add remaining elements to the combination vector\n            for (size_t k = j; k < list1.size(); k++) {\n                combination.push_back(list1[k]);\n            }\n            \n            // Add the combination to the combinations vector\n            combinations.push_back(Union_std_vector_std_nullopt__std_vector_std_string_(combination));\n        }\n    }\n    \n    return combinations;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/476",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the sum of the largest and smallest value in a given vector.\nlong big_sum(std::vector<long> nums) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = big_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)6}))) == (8));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the sum of the largest and smallest values in a given vector.\n# Initialize variables for the smallest and largest values, set them to the first element in the vector.\n# Iterate over the vector starting from the second element.\n    # If the current element is smaller than the smallest value, update the smallest value.\n    # If the current element is larger than the largest value, update the largest value.\n# Calculate the sum of the smallest and largest values.\n# Return the sum."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the sum of the largest and smallest value in a given vector.\nlong big_sum(std::vector<long> nums) {\n    assert(!nums.empty()); // Make sure the vector is not empty\n\n    long smallest = nums[0];\n    long largest = nums[0];\n\n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] < smallest) {\n            smallest = nums[i];\n        }\n        if (nums[i] > largest) {\n            largest = nums[i];\n        }\n    }\n\n    return smallest + largest;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/436",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to return the negative numbers in a vector.\nstd::vector<long> neg_nos(std::vector<long> list1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = neg_nos;\n    assert(candidate((std::vector<long>({(long)-1, (long)4, (long)5, (long)-6}))) == (std::vector<long>({(long)-1, (long)-6})));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)3, (long)4}))) == (std::vector<long>({(long)-1, (long)-2})));\n    assert(candidate((std::vector<long>({(long)-7, (long)-6, (long)8, (long)9}))) == (std::vector<long>({(long)-7, (long)-6})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to return the negative numbers in a vector.\n# Initialize an empty vector to store the negative numbers.\n# Iterate over each element in the input vector.\n    # Check if the current element is negative.\n        # If it is, add it to the vector of negative numbers.\n# Return the vector of negative numbers."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to return the negative numbers in a vector.\nstd::vector<long> neg_nos(std::vector<long> list1) {\n    std::vector<long> negative_nums;\n    \n    // Iterate over each element in the input vector.\n    for (const auto& num : list1) {\n        // Check if the current element is negative.\n        if (num < 0) {\n            // If it is, add it to the vector of negative numbers.\n            negative_nums.push_back(num);\n        }\n    }\n    \n    // Return the vector of negative numbers.\n    return negative_nums;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/388",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the highest power of 2 that is less than or equal to n.\nlong highest_Power_of_2(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = highest_Power_of_2;\n    assert(candidate((10)) == (8));\n    assert(candidate((19)) == (16));\n    assert(candidate((32)) == (32));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the highest power of 2 that is less than or equal to n.\n# Initialize a variable to store the highest power of 2.\n# Iterate through the powers of 2 starting from 0.\n    # Check if the current power of 2 is less than or equal to n.\n        # If it is, update the variable storing the highest power of 2.\n# Return the highest power of 2."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the highest power of 2 that is less than or equal to n.\nlong highest_Power_of_2(long n) {\n    long highest_power = 0;\n\n    // Iterate through powers of 2 starting from 0\n    for (int i = 0; i <= n; i++) {\n        // Check if the current power of 2 is less than or equal to n\n        if (std::pow(2, i) <= n) {\n            // Update the highest power of 2\n            highest_power = std::pow(2, i);\n        }\n    }\n\n    return highest_power;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/69",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a vector contains the given subvector or not.\nbool is_sublist(std::vector<long> l, std::vector<long> s) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = is_sublist;\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)5, (long)7})), (std::vector<long>({(long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)5, (long)7})), (std::vector<long>({(long)4, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)5, (long)7})), (std::vector<long>({(long)1, (long)6}))) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Iterate over each element in the main vector.\n    # Check if the current element matches the first element of the subvector.\n        # If it does, iterate over the subvector.\n            # Check if the current element of the main vector matches the current element of the subvector.\n                # If they don't match, break the loop and continue iterating over the main vector.\n        # If all elements of the subvector match the corresponding elements in the main vector, return true.\n# If no matching subvector is found, return false."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a vector contains the given subvector or not.\nbool is_sublist(std::vector<long> l, std::vector<long> s) {\n    int n = l.size();\n    int m = s.size();\n\n    for (int i = 0; i <= n - m; i++) {\n        if (l[i] == s[0]) {\n            int j;\n            for (j = 0; j < m; j++) {\n                if (l[i + j] != s[j])\n                    break;\n            }\n            if (j == m)\n                return true;\n        }\n    }\n    \n    return false;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/282",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to subtract two vectors element-wise.\nstd::vector<long> sub_list(std::vector<long> nums1, std::vector<long> nums2) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = sub_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (std::vector<long>({(long)4, (long)5, (long)6}))) == (std::vector<long>({(long)-3, (long)-3, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (std::vector<long>({(long)3, (long)4}))) == (std::vector<long>({(long)-2, (long)-2})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<long>({(long)40, (long)50})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to subtract two vectors element-wise.\n# Create an empty vector to store the result.\n# Iterate over the elements of the input vectors.\n    # Subtract the corresponding elements from nums2 from nums1.\n    # Append the result to the result vector.\n# Return the result vector."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to subtract two vectors element-wise.\nstd::vector<long> sub_list(std::vector<long> nums1, std::vector<long> nums2) {\n    assert(nums1.size() == nums2.size());\n    \n    std::vector<long> result;\n    for (size_t i = 0; i < nums1.size(); i++) {\n        long diff = nums1[i] - nums2[i];\n        result.push_back(diff);\n    }\n    \n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/58",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Check if the signs of the two integers are opposite\n    # If the signs are opposite, return true\n    # If the signs are not opposite, return false"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/616",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which takes two tuples of the same length and performs the element wise modulo.\nstd::tuple<long, long, long, long> tuple_modulo(std::tuple<long, long, long, long> test_tup1, std::tuple<long, long, long, long> test_tup2) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = tuple_modulo;\n    assert(candidate((std::make_tuple(10, 4, 5, 6)), (std::make_tuple(5, 6, 7, 5))) == (std::make_tuple(0, 4, 5, 1)));\n    assert(candidate((std::make_tuple(11, 5, 6, 7)), (std::make_tuple(6, 7, 8, 6))) == (std::make_tuple(5, 5, 6, 1)));\n    assert(candidate((std::make_tuple(12, 6, 7, 8)), (std::make_tuple(7, 8, 9, 7))) == (std::make_tuple(5, 6, 7, 1)));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to perform element-wise modulo on two tuples of the same length.\n# Create an empty tuple to store the result.\n# Iterate over the elements in the tuples.\n    # Retrieve the corresponding elements from both tuples.\n    # Calculate the modulo of the elements.\n    # Append the modulo result to the result tuple.\n# Return the result tuple."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which takes two tuples of the same length and performs the element wise modulo.\nstd::tuple<long, long, long, long> tuple_modulo(std::tuple<long, long, long, long> test_tup1, std::tuple<long, long, long, long> test_tup2) {\n    std::tuple<long, long, long, long> result;\n\n    std::get<0>(result) = std::get<0>(test_tup1) % std::get<0>(test_tup2);\n    std::get<1>(result) = std::get<1>(test_tup1) % std::get<1>(test_tup2);\n    std::get<2>(result) = std::get<2>(test_tup1) % std::get<2>(test_tup2);\n    std::get<3>(result) = std::get<3>(test_tup1) % std::get<3>(test_tup2);\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/594",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the difference of the first even and first odd number of a given vector.\nlong diff_even_odd(std::vector<long> list1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = diff_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (9));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the difference between the first even and first odd number in a vector.\n# Initialize variables to store the first even and first odd numbers.\n# Iterate over the input vector.\n    # Check if the current number is even and the first even number has not been found yet.\n        # If it is, store the current number as the first even number and break the loop.\n    # Check if the current number is odd and the first odd number has not been found yet.\n        # If it is, store the current number as the first odd number and break the loop.\n# Calculate the difference between the first even and first odd numbers.\n# Return the difference."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the difference of the first even and first odd number of a given vector.\nlong diff_even_odd(std::vector<long> list1) {\n    long first_even = 0;\n    long first_odd = 0;\n\n    // Iterate over the input vector to find the first even and first odd numbers.\n    for (const auto& num : list1) {\n        if (num % 2 == 0 && first_even == 0) {\n            first_even = num;\n            if (first_odd != 0) {\n                break;\n            }\n        } else if (num % 2 != 0 && first_odd == 0) {\n            first_odd = num;\n            if (first_even != 0) {\n                break;\n            }\n        }\n    }\n\n    // Calculate the difference between the first even and first odd numbers.\n    long difference = first_even - first_odd;\n\n    return difference;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/569",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort each subvector of strings in a given vector of vectors.\nstd::vector<std::vector<std::string>> sort_sublists(std::vector<std::vector<std::string>> list1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = sort_sublists;\n    assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"green\", (std::string)\"orange\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"black\", (std::string)\"white\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"white\", (std::string)\"black\", (std::string)\"orange\"})}))) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"green\", (std::string)\"orange\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"black\", (std::string)\"white\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"black\", (std::string)\"orange\", (std::string)\"white\"})})));\n    assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"green\", (std::string)\"orange\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"black\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"green\", (std::string)\"orange\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"white\"})}))) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"green\", (std::string)\"orange\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"black\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"green\", (std::string)\"orange\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"white\"})})));\n    assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"b\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"d\", (std::string)\"c\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"g\", (std::string)\"h\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"f\", (std::string)\"e\"})}))) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"b\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"c\", (std::string)\"d\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"g\", (std::string)\"h\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"e\", (std::string)\"f\"})})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to sort each subvector of strings in a given vector of vectors.\n# Iterate over each subvector in the given vector of vectors.\n    # Sort the current subvector in ascending order.\n# Return the modified vector of vectors with sorted subvectors."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort each subvector of strings in a given vector of vectors.\nstd::vector<std::vector<std::string>> sort_sublists(std::vector<std::vector<std::string>> list1) {\n    for (auto& sublist : list1) {\n        std::sort(sublist.begin(), sublist.end());\n    }\n    return list1;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/435",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the last digit of a given number.\nlong last_Digit(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = last_Digit;\n    assert(candidate((123)) == (3));\n    assert(candidate((25)) == (5));\n    assert(candidate((30)) == (0));\n}\n"
        ],
        "draft_plan": [
            "# Convert the given number to a string\n# Get the last character of the string, which represents the last digit of the number\n# Convert the last character back to an integer\n# Return the last digit as an integer"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the last digit of a given number.\nlong last_Digit(long n) {\n    std::string num_str = std::to_string(n);\n    char last_char = num_str.back();\n    long last_digit = last_char - '0';\n    return last_digit;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/770",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the sum of fourth power of first n odd natural numbers.\nlong odd_num_sum(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = odd_num_sum;\n    assert(candidate((2)) == (82));\n    assert(candidate((3)) == (707));\n    assert(candidate((4)) == (3108));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the sum of the fourth power of the first n odd natural numbers.\n# Initialize a variable to store the sum.\n# Iterate from 1 to n, incrementing by 2 to get the odd numbers.\n    # Compute the fourth power of the current odd number.\n    # Add the fourth power to the sum.\n# Return the sum."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to find the sum of the fourth power of the first n odd natural numbers.\nlong odd_num_sum(long n) {\n    long sum = 0;\n\n    // Iterate from 1 to n, incrementing by 2 to get the odd numbers.\n    for (long i = 1; i <= n; i += 2) {\n        // Compute the fourth power of the current odd number.\n        long fourth_power = pow(i, 4);\n        // Add the fourth power to the sum.\n        sum += fourth_power;\n    }\n\n    return sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/132",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a vector to a string.\nstd::string tup_string(std::vector<std::string> tup1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = tup_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"e\", (std::string)\"x\", (std::string)\"e\", (std::string)\"r\", (std::string)\"c\", (std::string)\"i\", (std::string)\"s\", (std::string)\"e\", (std::string)\"s\"}))) == (\"exercises\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"p\", (std::string)\"y\", (std::string)\"t\", (std::string)\"h\", (std::string)\"o\", (std::string)\"n\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"p\", (std::string)\"r\", (std::string)\"o\", (std::string)\"g\", (std::string)\"r\", (std::string)\"a\", (std::string)\"m\"}))) == (\"program\"));\n}\n"
        ],
        "draft_plan": [
            "# Initialize an empty string to store the result.\n# Iterate over each element in the given vector.\n    # Append the current element to the result string.\n    # If it is not the last element, append a comma (,) and a space.\n# Return the resulting string."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a vector to a string.\nstd::string tup_string(std::vector<std::string> tup1) {\n    std::string result;\n    for (size_t i = 0; i < tup1.size(); i++) {\n        result += tup1[i];\n        if (i != tup1.size() - 1) {\n            result += \", \";\n        }\n    }\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/161",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all elements from a given vector present in another vector.\nstd::vector<long> remove_elements(std::vector<long> list1, std::vector<long> list2) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = remove_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (std::vector<long>({(long)2, (long)4, (long)6, (long)8}))) == (std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)9, (long)10})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (std::vector<long>({(long)1, (long)3, (long)5, (long)7}))) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8, (long)9, (long)10})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (std::vector<long>({(long)5, (long)7}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)6, (long)8, (long)9, (long)10})));\n}\n"
        ],
        "draft_plan": [
            "# Iterate through each element in list2\n    # Check if the element exists in list1\n        # If it does, remove it from list1\n# Return the modified list1"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all elements from a given vector present in another vector.\nstd::vector<long> remove_elements(std::vector<long> list1, std::vector<long> list2) {\n    std::vector<long> result;\n\n    // Iterate through each element in list1\n    for (const auto& element : list1) {\n        // Check if the element exists in list2\n        auto it = std::find(list2.begin(), list2.end(), element);\n        if (it == list2.end()) {\n            // If it does not exist, add it to the result vector\n            result.push_back(element);\n        }\n    }\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/414",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether any value in a sequence exists in a sequence or not.\nbool overlapping(std::vector<long> list1, std::vector<long> list2) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = overlapping;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::vector<long>({(long)6, (long)7, (long)8, (long)9}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (std::vector<long>({(long)4, (long)5, (long)6}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)5})), (std::vector<long>({(long)1, (long)4, (long)5}))) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check whether any value in a sequence exists in another sequence.\n# Iterate over the elements in the first sequence.\n    # Check if the current element exists in the second sequence.\n        # If it does, return true.\n# If no element is found, return false."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to check whether any value in a sequence exists in another sequence.\nbool overlapping(std::vector<long> list1, std::vector<long> list2) {\n    for (long num : list1) {\n        if (std::find(list2.begin(), list2.end(), num) != list2.end()) {\n            return true;\n        }\n    }\n    return false;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/3",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to identify non-prime numbers.\nbool is_not_prime(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = is_not_prime;\n    assert(candidate((2)) == (false));\n    assert(candidate((10)) == (true));\n    assert(candidate((35)) == (true));\n    assert(candidate((37)) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to identify non-prime numbers.\n# Check if the given number is less than or equal to 1.\n    # If it is, return true since 1 is not a prime number.\n# Check if the given number is divisible by any number from 2 to the square root of the given number.\n    # If it is, return true since it is not a prime number.\n# If the given number is not divisible by any number from 2 to the square root of the given number, return false since it is a prime number."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to identify non-prime numbers.\nbool is_not_prime(long n) {\n    if (n <= 1) {\n        return true;\n    }\n    for (long i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return true;\n        }\n    }\n    return false;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/294",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the maximum value in a given heterogeneous vector.\nlong max_val(std::vector<Union_std_string_long> listval) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = max_val;\n    assert(candidate((std::vector<Union_std_string_long>({(std::string)\"Python\", (std::string)3, (std::string)2, (std::string)4, (std::string)5, (std::string)\"version\"}))) == (5));\n    assert(candidate((std::vector<Union_std_string_long>({(std::string)\"Python\", (std::string)15, (std::string)20, (std::string)25}))) == (25));\n    assert(candidate((std::vector<Union_std_string_long>({(std::string)\"Python\", (std::string)30, (std::string)20, (std::string)40, (std::string)50, (std::string)\"version\"}))) == (50));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the maximum value in a given heterogeneous vector.\n# Initialize a variable to store the maximum value, initially set to the first element in the vector.\n# Iterate over the elements in the vector starting from the second element.\n    # Check if the current element is greater than the maximum value.\n        # If it is, update the maximum value to the current element.\n# Return the maximum value."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;\n    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    \n    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n\n// Write a function to find the maximum value in a given heterogeneous vector.\nlong max_val(std::vector<Union_std_string_long> listval) {\n    long max_value = listval[0].f1;\n\n    // Iterate over the elements in the vector starting from the second element.\n    for (int i = 1; i < listval.size(); i++) {\n        // Check if the current element is greater than the maximum value.\n        if (listval[i].f1 > max_value) {\n            // Update the maximum value to the current element.\n            max_value = listval[i].f1;\n        }\n    }\n\n    return max_value;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/133",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate the sum of the negative numbers of a given vector of numbers.\nlong sum_negativenum(std::vector<long> nums) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = sum_negativenum;\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-6, (long)-9, (long)11, (long)-12, (long)14, (long)-5, (long)17}))) == (-32));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)-14, (long)13, (long)-18, (long)12, (long)-20}))) == (-52));\n    assert(candidate((std::vector<long>({(long)19, (long)-65, (long)57, (long)39, (long)152, (long)-639, (long)121, (long)44, (long)90, (long)-190}))) == (-894));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to calculate the sum of negative numbers.\n# Initialize a variable to store the sum of negative numbers.\n# Iterate over the input vector of numbers.\n    # Check if the current number is negative.\n        # If it is, add it to the sum of negative numbers.\n# Return the sum of negative numbers."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate the sum of the negative numbers of a given vector of numbers.\nlong sum_negativenum(std::vector<long> nums) {\n    long sum = 0;\n    for (long num : nums) {\n        if (num < 0) {\n            sum += num;\n        }\n    }\n    return sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/9",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the minimum number of rotations (greater than 0) required to get the same string.\nlong find_Rotations(std::string str) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find_Rotations;\n    assert(candidate((\"aaaa\")) == (1));\n    assert(candidate((\"ab\")) == (2));\n    assert(candidate((\"abc\")) == (3));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the minimum number of rotations required to get the same string.\n# Initialize a variable \"rotations\" to 0.\n# Iterate from 1 to the length of the string.\n    # Create a substring by rotating the string to the right by the current iteration.\n    # Check if the rotated substring is equal to the original string.\n        # If it is, update the value of \"rotations\" to the current iteration.\n# Return the value of \"rotations\"."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to find the minimum number of rotations required to get the same string.\nlong find_Rotations(std::string str) {\n    long rotations = 0;\n\n    // Iterate from 1 to the length of the string.\n    for (long i = 1; i <= str.length(); i++) {\n        // Create a substring by rotating the string to the right by the current iteration.\n        std::string rotated = str.substr(i) + str.substr(0, i);\n\n        // Check if the rotated substring is equal to the original string.\n        if (rotated == str) {\n            rotations = i;\n            break;\n        }\n    }\n\n    return rotations;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/427",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n"
        ],
        "draft_plan": [
            "# Split the input string by the delimiter '-' to get the year, month, and day.\n# Create a new string in the desired format by concatenating the day, month, and year with the delimiter '-'.\n# Return the new string."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::istringstream iss(dt);\n    std::string year, month, day;\n    std::getline(iss, year, '-');\n    std::getline(iss, month, '-');\n    std::getline(iss, day, '-');\n    std::string new_format = day + \"-\" + month + \"-\" + year;\n    return new_format;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/554",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function which takes a vector of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function that takes a vector of integers as input.\n# Create an empty vector to store the odd numbers.\n# Iterate over each element in the input vector.\n    # Check if the current element is odd.\n        # If it is, add it to the odd numbers vector.\n# Return the vector containing only the odd numbers."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function that takes a vector of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n    std::vector<long> odd_numbers;\n    for (const auto& num : list) {\n        if (num % 2 != 0) {\n            odd_numbers.push_back(num);\n        }\n    }\n    return odd_numbers;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/735",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to toggle the middle bits of a given number.\n# Convert the number to binary representation.\n# Iterate over the binary representation, starting from the second bit and ending at the second-to-last bit.\n    # Toggle the bit by flipping its value.\n# Convert the modified binary representation back to decimal.\n# Return the resulting decimal number."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    std::bitset<sizeof(long) * 8> binary(n); // Convert number to binary representation\n    for (int i = 1; i < binary.size() - 1; i++) {\n        binary.flip(i); // Toggle the middle bits\n    }\n    return binary.to_ulong(); // Convert binary representation back to decimal\n}"
        ]
    },
    {
        "id": "mbpp_cpp/165",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nlong count_char_position(std::string str1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = count_char_position;\n    assert(candidate((\"xbcefg\")) == (2));\n    assert(candidate((\"ABcED\")) == (3));\n    assert(candidate((\"AbgdeF\")) == (5));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n# Initialize a counter for the characters that meet the condition.\n# Iterate over each character in the given string.\n    # Check if the current character is a letter of the English alphabet (case insensitive).\n        # If it is, compare its position in the alphabet with its position in the string.\n            # If the positions match, increment the counter.\n# Return the count of characters that meet the condition."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nlong count_char_position(std::string str1) {\n    long count = 0;\n\n    // Iterate over each character in the given string.\n    for (char c : str1) {\n        // Check if the current character is a letter of the English alphabet (case insensitive).\n        if (isalpha(c)) {\n            // Convert the character to lowercase for case insensitivity.\n            c = tolower(c);\n\n            // Check if the position of the character in the string matches its position in the English alphabet.\n            if (c - 'a' == std::distance(str1.begin(), std::find(str1.begin(), str1.end(), c))) {\n                count++;\n            }\n        }\n    }\n\n    return count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/308",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given vectors, selecting one factor from each vector.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = large_product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (3)) == (std::vector<long>({(long)60, (long)54, (long)50})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (4)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)3, (long)6, (long)8, (long)9, (long)10, (long)6})), (5)) == (std::vector<long>({(long)60, (long)54, (long)50, (long)48, (long)45})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the specified number of largest products from two given vectors.\n# Create a vector to store the products.\n# Sort both input vectors in descending order.\n# Iterate over the first N elements of nums1.\n    # Iterate over the first N elements of nums2.\n        # Calculate the product of the current pair of numbers.\n        # Add the product to the products vector.\n# Sort the products vector in descending order.\n# Return the first N elements of the products vector."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the specified number of largest products from two given vectors, selecting one factor from each vector.\nstd::vector<long> large_product(std::vector<long> nums1, std::vector<long> nums2, long N) {\n    std::vector<long> products;\n    std::sort(nums1.rbegin(), nums1.rend());\n    std::sort(nums2.rbegin(), nums2.rend());\n\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            long product = nums1[i] * nums2[j];\n            products.push_back(product);\n        }\n    }\n\n    std::sort(products.rbegin(), products.rend());\n\n    return std::vector<long>(products.begin(), products.begin() + N);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/614",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the cumulative sum of all the values that are present in the given vector of vectors.\nlong cummulative_sum(std::vector<std::vector<long>> test_list) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = cummulative_sum;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)2, (long)6})}))) == (30));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)4}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)3, (long)7})}))) == (37));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)4, (long)8})}))) == (44));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the cumulative sum of all values in the vector of vectors.\n# Initialize a variable to store the cumulative sum.\n# Iterate over each inner vector in the vector of vectors.\n    # Iterate over each element in the inner vector.\n        # Add the current element to the cumulative sum.\n# Return the cumulative sum."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the cumulative sum of all the values that are present in the given vector of vectors.\nlong cummulative_sum(std::vector<std::vector<long>> test_list) {\n    long sum = 0;\n\n    // Iterate over each inner vector in the vector of vectors.\n    for (const auto& vec : test_list) {\n        // Iterate over each element in the inner vector.\n        for (const auto& num : vec) {\n            // Add the current element to the cumulative sum.\n            sum += num;\n        }\n    }\n\n    return sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/763",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the minimum difference between any two elements in a given vector. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nlong find_min_diff(std::vector<long> arr, long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find_min_diff;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)3, (long)19, (long)18, (long)25})), (6)) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)6})), (4)) == (1));\n    assert(candidate((std::vector<long>({(long)30, (long)5, (long)20, (long)9})), (4)) == (4));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the minimum difference between any two elements in a given vector.\n# Sort the vector in ascending order.\n# Initialize a variable to store the minimum difference.\n# Iterate over the vector from the second element to the last.\n    # Calculate the difference between the current element and the previous element.\n    # If the difference is less than the current minimum difference, update the minimum difference.\n# Return the minimum difference."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to find the minimum difference between any two elements in a given vector.\nlong find_min_diff(std::vector<long> arr, long n) {\n    // Sort the vector in ascending order.\n    std::sort(arr.begin(), arr.end());\n\n    // Initialize the minimum difference to a large value.\n    long min_diff = INT_MAX;\n\n    // Iterate over the vector from the second element to the last.\n    for (int i = 1; i < n; i++) {\n        // Calculate the difference between the current element and the previous element.\n        long diff = arr[i] - arr[i - 1];\n\n        // If the difference is less than the current minimum difference, update the minimum difference.\n        if (diff < min_diff) {\n            min_diff = diff;\n        }\n    }\n\n    // Return the minimum difference.\n    return min_diff;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/794",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nbool text_starta_endb(std::string text) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = text_starta_endb;\n    assert(candidate((\"aabbbb\")) == (true));\n    assert(candidate((\"aabAbbbc\")) == (false));\n    assert(candidate((\"accddbbjjj\")) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Check if the given string has at least two characters\n    # If it does not, return false since it cannot satisfy the condition\n# Check if the first character of the string is 'a'\n    # If it is not, return false since the string does not start with 'a'\n# Check if the last character of the string is 'b'\n    # If it is not, return false since the string does not end with 'b'\n# Return true if the conditions are satisfied"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nbool text_starta_endb(std::string text) {\n    if (text.length() < 2) {\n        return false;\n    }\n\n    if (text[0] != 'a') {\n        return false;\n    }\n\n    if (text[text.length() - 1] != 'b') {\n        return false;\n    }\n\n    return true;\n}\n"
        ]
    },
    {
        "id": "mbpp_cpp/799",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nlong left_rotate(long n, long d) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = left_rotate;\n    assert(candidate((16), (2)) == (64));\n    assert(candidate((10), (2)) == (40));\n    assert(candidate((99), (3)) == (792));\n    assert(candidate((99), (3)) == (792));\n    assert(candidate((1), (3)) == (8));\n    assert(candidate((5), (3)) == (40));\n    assert(candidate((29), (3)) == (232));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to rotate the bits of a given number to the left by a specified number of positions.\n# Create a mask by left shifting 1 by the number of positions to rotate and subtracting 1.\n# Create a variable to store the bits shifted out from the left side.\n# Shift the number to the left by the number of positions to rotate.\n# Bitwise OR the shifted number with the shifted out bits.\n# Return the result."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nlong left_rotate(long n, long d) {\n    long mask = (1 << d) - 1;\n    long shifted_out_bits = (n >> (32 - d)) & mask;\n    long result = (n << d) | shifted_out_bits;\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/602",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the first repeated character in a given string.\nstd::optional<std::string> first_repeated_char(std::string str1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = first_repeated_char;\n    assert(candidate((\"abcabc\")) == \"a\");\n    assert(candidate((\"abc\")) == std::nullopt);\n    assert(candidate((\"123123\")) == \"1\");\n}\n"
        ],
        "draft_plan": [
            "# Create a set to store the characters that have been encountered so far.\n# Iterate through each character in the given string.\n    # Check if the current character is already in the set.\n        # If it is, return the current character as the first repeated character.\n        # If it is not, add the current character to the set.\n# If no repeated characters are found, return an empty optional.\n"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the first repeated character in a given string.\nstd::optional<char> first_repeated_char(std::string str1) {\n    std::unordered_set<char> seen_chars;\n\n    for (char ch : str1) {\n        if (seen_chars.count(ch) > 0) {\n            return ch;\n        }\n        seen_chars.insert(ch);\n    }\n\n    return std::nullopt;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/296",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count inversions in a vector.\nlong get_Inv_Count(std::vector<long> arr) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = get_Inv_Count;\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)6, (long)4, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)6, (long)1}))) == (3));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count inversions in a vector.\n# Initialize a counter for the number of inversions.\n# Iterate over the vector from the first element to the second-to-last element.\n    # Iterate over the vector from the next element to the last element.\n        # Check if the current element is greater than the next element.\n            # If it is, increment the inversion counter.\n# Return the count of inversions."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count inversions in a vector.\nlong get_Inv_Count(std::vector<long> arr) {\n    long inv_count = 0;\n\n    // Iterate over the vector to count inversions.\n    for (int i = 0; i < arr.size() - 1; i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] > arr[j]) {\n                inv_count++;\n            }\n        }\n    }\n\n    return inv_count;\n}\n"
        ]
    },
    {
        "id": "mbpp_cpp/271",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nlong even_Power_Sum(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = even_Power_Sum;\n    assert(candidate((2)) == (1056));\n    assert(candidate((3)) == (8832));\n    assert(candidate((1)) == (32));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to calculate the sum of the first n even natural numbers raised to the fifth power.\n# Initialize a variable to store the sum.\n# Initialize a variable to store the current even number.\n# Initialize a counter to track the number of even numbers found.\n# While the counter is less than n:\n    # Check if the current even number is divisible by 2.\n        # If it is, add the current even number raised to the fifth power to the sum.\n        # Increment the counter by 1.\n    # Increment the current even number by 2.\n# Return the sum."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nlong even_Power_Sum(long n) {\n    long sum = 0;\n    long current_even = 2;\n    long counter = 0;\n\n    while (counter < n) {\n        if (current_even % 2 == 0) {\n            sum += pow(current_even, 5);\n            counter++;\n        }\n        current_even += 2;\n    }\n\n    return sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/70",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find whether all the given vectors have equal length or not.\nbool get_equal(std::vector<std::vector<long>> Input) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = get_equal;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)11, (long)22, (long)33}), (std::vector<long>)std::vector<long>({(long)44, (long)55, (long)66})}))) == (true));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6, (long)7})}))) == (false));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)4})}))) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check if all vectors have equal length.\n# Retrieve the length of the first vector in the input list.\n# Iterate over the remaining vectors in the input list.\n    # Check if the length of the current vector is equal to the length of the first vector.\n        # If it is not, return false.\n# If all vectors have equal length, return true."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find whether all the given vectors have equal length or not.\nbool get_equal(std::vector<std::vector<long>> Input) {\n    if(Input.empty()) {\n        return true; // Empty list, all vectors have equal length (0).\n    }\n    \n    size_t first_vector_length = Input[0].size();\n\n    for(size_t i = 1; i < Input.size(); i++) {\n        if(Input[i].size() != first_vector_length) {\n            return false; // Vectors have different lengths.\n        }\n    }\n\n    return true; // All vectors have equal length.\n}"
        ]
    },
    {
        "id": "mbpp_cpp/113",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if a string represents an integer or not.\nbool check_integer(std::string text) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = check_integer;\n    assert(candidate((\"python\")) == (false));\n    assert(candidate((\"1\")) == (true));\n    assert(candidate((\"12345\")) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Iterate through each character in the given string\n    # Check if the first character is a negative sign (-)\n        # If it is, skip to the next character\n    # Check if the current character is a digit (0-9)\n        # If it is not, return false\n# Return true if all characters in the string are digits or if the string is a negative number (-), otherwise return false"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if a string represents an integer or not.\nbool check_integer(std::string text) {\n    // Check if the string is empty\n    if (text.empty()) {\n        return false;\n    }\n    \n    // Check if the first character is a negative sign\n    int i = 0;\n    if (text[0] == '-') {\n        i = 1;\n    }\n    \n    // Iterate through each character in the string\n    for (; i < text.length(); i++) {\n        // Check if the current character is a digit\n        if (!isdigit(text[i])) {\n            return false;\n        }\n    }\n    \n    return true;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/757",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the pairs of reverse strings in the given string vector. https://www.geeksforgeeks.org/cppthon-program-to-count-the-pairs-of-reverse-strings/\nlong count_reverse_pairs(std::vector<std::string> test_list) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = count_reverse_pairs;\n    assert(candidate((std::vector<std::string>({(std::string)\"julia\", (std::string)\"best\", (std::string)\"tseb\", (std::string)\"for\", (std::string)\"ailuj\"}))) == (2));\n    assert(candidate((std::vector<std::string>({(std::string)\"geeks\", (std::string)\"best\", (std::string)\"for\", (std::string)\"skeeg\"}))) == (1));\n    assert(candidate((std::vector<std::string>({(std::string)\"makes\", (std::string)\"best\", (std::string)\"sekam\", (std::string)\"for\", (std::string)\"rof\"}))) == (2));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count the pairs of reverse strings in the given string vector.\n# Initialize a counter for reverse pairs.\n# Iterate over the input vector of strings.\n    # For each string, iterate over the remaining strings in the vector.\n        # Check if the current string is the reverse of the selected string.\n            # If it is, increment the reverse pair count.\n# Return the count of reverse pairs."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to count the pairs of reverse strings in the given string vector.\nlong count_reverse_pairs(std::vector<std::string> test_list) {\n    long reverse_pair_count = 0;\n\n    // Iterate over the vector of strings\n    for (int i = 0; i < test_list.size(); i++) {\n        // Iterate over the remaining strings in the vector\n        for (int j = i + 1; j < test_list.size(); j++) {\n            // Check if the current string is the reverse of the selected string\n            if (test_list[i] == std::string(test_list[j].rbegin(), test_list[j].rend())) {\n                reverse_pair_count++;\n            }\n        }\n    }\n\n    return reverse_pair_count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/632",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to move all zeroes to the end of the given vector.\nstd::vector<long> move_zero(std::vector<long> num_list) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = move_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)0, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)2, (long)0, (long)0, (long)4, (long)0, (long)5, (long)0}))) == (std::vector<long>({(long)2, (long)3, (long)2, (long)4, (long)5, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)0, (long)1, (long)1}))) == (std::vector<long>({(long)1, (long)1, (long)1, (long)0, (long)0})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to move all zeroes to the end of the given vector.\n# Initialize a new vector to store the modified vector.\n# Iterate over the input vector.\n    # Check if the current element is not equal to zero.\n        # If it is not zero, add it to the new vector.\n# Count the number of zeros in the input vector.\n# Append the counted number of zeros to the new vector.\n# Return the new vector."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to move all zeroes to the end of the given vector.\nstd::vector<long> move_zero(std::vector<long> num_list) {\n    std::vector<long> new_list;\n    int zero_count = 0;\n\n    // Iterate over the input vector.\n    for (const auto& num : num_list) {\n        // Check if the current element is not equal to zero.\n        if (num != 0) {\n            new_list.push_back(num);\n        } else {\n            zero_count++;\n        }\n    }\n\n    // Append the counted number of zeros to the new vector.\n    while (zero_count > 0) {\n        new_list.push_back(0);\n        zero_count--;\n    }\n\n    return new_list;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/394",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if given vector contains no duplicates.\nbool check_distinct(std::vector<long> test_tup) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = check_distinct;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)5, (long)6, (long)1, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check if a given vector contains no duplicates.\n# Create a set to store unique elements.\n# Iterate over the input vector.\n    # Check if the current element already exists in the set.\n        # If it does, return false as there is a duplicate.\n        # If it doesn't, add the element to the set.\n# If the loop completes without finding any duplicates, return true.\n"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if given vector contains no duplicates.\nbool check_distinct(std::vector<long> test_tup) {\n    std::unordered_set<long> unique_elements;\n\n    // Iterate over the vector\n    for (const auto& element : test_tup) {\n        // Check if the element already exists in the set\n        if (unique_elements.find(element) != unique_elements.end()) {\n            return false; // Duplicate found\n        }\n        // Add the element to the set\n        unique_elements.insert(element);\n    }\n\n    return true; // No duplicates found\n}"
        ]
    },
    {
        "id": "mbpp_cpp/637",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check whether the given amount has no profit and no loss.\n# Check if the actual cost is equal to the sale amount.\n    # If they are equal, return true.\n# Otherwise, return false."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount) {\n        return true;\n    }\n    return false;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/772",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all the words with k length in the given string.\nstd::string remove_length(std::string test_str, long K) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = remove_length;\n    assert(candidate((\"The person is most value tet\"), (3)) == (\"person is most value\"));\n    assert(candidate((\"If you told me about this ok\"), (4)) == (\"If you me about ok\"));\n    assert(candidate((\"Forces of darkeness is come into the play\"), (4)) == (\"Forces of darkeness is the\"));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to remove words with a given length from a string.\n# Create an empty string to store the modified string.\n# Create a stringstream to extract words from the input string.\n# Iterate through each word in the stringstream.\n    # Check the length of the current word.\n        # If the length is not equal to the given length K, append the word to the modified string.\n# Return the modified string."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all the words with k length in the given string.\nstd::string remove_length(std::string test_str, long K) {\n    std::string result;\n    std::stringstream ss(test_str);\n    std::string word;\n\n    while (ss >> word) {\n        if (word.length() != K) {\n            result += word + \" \";\n        }\n    }\n\n    // Remove the last space character if it exists\n    if (!result.empty()) {\n        result.pop_back();\n    }\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/764",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count number of digits in a given string.\nlong number_ctr(std::string str) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = number_ctr;\n    assert(candidate((\"program2bedone\")) == (1));\n    assert(candidate((\"3wonders\")) == (1));\n    assert(candidate((\"123\")) == (3));\n    assert(candidate((\"3wond-1ers2\")) == (3));\n}\n"
        ],
        "draft_plan": [
            "# Initialize a counter variable to keep track of the number of digits.\n# Iterate through each character in the given string.\n    # Check if the current character is a digit.\n        # If it is, increment the counter by 1.\n# Return the final count of digits."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to count number of digits in a given string.\nlong number_ctr(std::string str) {\n    long count = 0;\n    for (char c : str) {\n        if (isdigit(c)) {\n            count++;\n        }\n    }\n    return count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/242",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the total number of characters in a string.\nlong count_charac(std::string str1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = count_charac;\n    assert(candidate((\"python programming\")) == (18));\n    assert(candidate((\"language\")) == (8));\n    assert(candidate((\"words\")) == (5));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count the total number of characters in a string.\n# Initialize a counter variable to 0.\n# Iterate through each character in the string.\n    # Increment the counter variable for each character.\n# Return the counter variable."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the total number of characters in a string.\nlong count_charac(std::string str1) {\n    long count = 0;\n    for (char c : str1) {\n        count++;\n    }\n    return count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/239",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nlong get_total_number_of_sequences(long m, long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = get_total_number_of_sequences;\n    assert(candidate((10), (4)) == (4));\n    assert(candidate((5), (2)) == (6));\n    assert(candidate((16), (3)) == (84));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to get the total number of sequences.\n# Initialize a 2D array to store the number of sequences for each value of m and n.\n# Iterate over the values of n from 1 to n.\n    # Iterate over the values of m from 1 to m.\n        # If n is 1, set the value in the array for m and n to 1.\n        # If m is less than 2 times the previous element, set the value in the array for m and n to 0.\n        # Otherwise, calculate the sum of the values in the array for m/2 to m-1 and set the value in the array for m and n to this sum.\n# Return the value in the array for m and n.\n"
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n// such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nlong get_total_number_of_sequences(long m, long n) {\n    std::vector<std::vector<long>> dp(m + 1, std::vector<long>(n + 1, 0));\n\n    for (int i = 1; i <= m; i++) {\n        dp[i][1] = 1;\n    }\n\n    for (int i = 2; i <= n; i++) {\n        for (int j = 1; j <= m; j++) {\n            for (int k = j / 2; k < j; k++) {\n                dp[j][i] += dp[k][i - 1];\n            }\n        }\n    }\n\n    long total_sequences = 0;\n    for (int i = 1; i <= m; i++) {\n        total_sequences += dp[i][n];\n    }\n\n    return total_sequences;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/736",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/cppthon-exercises/data-structures-and-algorithms/cppthon-data-structure-exercise-24.php\nlong left_insertion(std::vector<long> a, long x) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = left_insertion;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5})), (6)) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5})), (3)) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5})), (7)) == (4));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to locate the left insertion point for a specified value in sorted order.\n# Initialize two variables, `low` and `high`, to represent the lower and upper bounds of the search range.\n# Iterate while `low` is less than or equal to `high`.\n    # Calculate the middle index as `(low + high) / 2`.\n    # Check if the value at the middle index is greater than or equal to the specified value.\n        # If it is, update `high` to be the middle index - 1.\n        # If it is not, update `low` to be the middle index + 1.\n# Return `low`, which represents the left insertion point for the specified value in the sorted order."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to locate the left insertion point for a specified value in sorted order.\nlong left_insertion(std::vector<long> a, long x) {\n    long low = 0;\n    long high = a.size() - 1;\n\n    while (low <= high) {\n        long mid = (low + high) / 2;\n\n        if (a[mid] >= x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n\n    return low;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/257",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in two numbers and returns a vector with the second number and then the first number.\nstd::vector<long> swap_numbers(long a, long b) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = swap_numbers;\n    assert(candidate((10), (20)) == (std::vector<long>({(long)20, (long)10})));\n    assert(candidate((15), (17)) == (std::vector<long>({(long)17, (long)15})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)200, (long)100})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function that takes in two numbers.\n# Create an empty vector to store the swapped numbers.\n# Add the second number to the vector.\n# Add the first number to the vector.\n# Return the vector with the swapped numbers."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in two numbers and returns a vector with the second number and then the first number.\nstd::vector<long> swap_numbers(long a, long b) {\n    std::vector<long> swapped_numbers;\n    swapped_numbers.push_back(b);\n    swapped_numbers.push_back(a);\n    return swapped_numbers;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/223",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Calculate the threshold for the majority element by dividing the length of the vector by 2.\n# Initialize a counter variable to keep track of the occurrence of the given element in the vector.\n# Iterate through each element in the vector.\n    # Check if the current element is equal to the given element.\n        # If it is, increment the counter.\n# Check if the counter is greater than the threshold.\n    # If it is, return true as the given element is the majority element.\n    # If it is not, return false as the given element is not the majority element."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long threshold = n / 2;\n    long count = 0;\n\n    // Iterate through each element in the vector.\n    for (long i = 0; i < n; i++) {\n        // Check if the current element is equal to the given element.\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n\n    // Check if the counter is greater than the threshold.\n    if (count > threshold) {\n        return true;\n    } else {\n        return false;\n    }\n}\n"
        ]
    },
    {
        "id": "mbpp_cpp/273",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nstd::tuple<long, long, long> substract_elements(std::tuple<long, long, long> test_tup1, std::tuple<long, long, long> test_tup2) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = substract_elements;\n    assert(candidate((std::make_tuple(10, 4, 5)), (std::make_tuple(2, 5, 18))) == (std::make_tuple(8, -1, -13)));\n    assert(candidate((std::make_tuple(11, 2, 3)), (std::make_tuple(24, 45, 16))) == (std::make_tuple(-13, -43, -13)));\n    assert(candidate((std::make_tuple(7, 18, 9)), (std::make_tuple(10, 11, 12))) == (std::make_tuple(-3, 7, -3)));\n}\n"
        ],
        "draft_plan": [
            "# Create a new tuple to store the result of the subtraction.\n# Iterate over the elements of the first tuple.\n    # Get the element at the same index from the second tuple.\n    # Subtract the two elements and store the result in the new tuple.\n# Return the new tuple with the subtracted elements."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nstd::tuple<long, long, long> subtract_elements(std::tuple<long, long, long> test_tup1, std::tuple<long, long, long> test_tup2) {\n    long element1 = std::get<0>(test_tup1) - std::get<0>(test_tup2);\n    long element2 = std::get<1>(test_tup1) - std::get<1>(test_tup2);\n    long element3 = std::get<2>(test_tup1) - std::get<2>(test_tup2);\n\n    return std::make_tuple(element1, element2, element3);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/748",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to put spaces between words starting with capital letters in a given string.\nstd::string capital_words_spaces(std::string str1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = capital_words_spaces;\n    assert(candidate((\"Python\")) == (\"Python\"));\n    assert(candidate((\"PythonProgrammingExamples\")) == (\"Python Programming Examples\"));\n    assert(candidate((\"GetReadyToBeCodingFreak\")) == (\"Get Ready To Be Coding Freak\"));\n}\n"
        ],
        "draft_plan": [
            "# Initialize an empty string to store the modified string.\n# Iterate through each character in the given string.\n    # Check if the current character is a capital letter.\n        # If it is, append a space before the current character to the modified string.\n    # Append the current character to the modified string.\n# Return the modified string with spaces between words starting with capital letters."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to put spaces between words starting with capital letters in a given string.\nstd::string capital_words_spaces(std::string str1) {\n    std::string modified_str;\n    \n    for (int i = 0; i < str1.length(); i++) {\n        if (i > 0 && std::isupper(str1[i]) && std::islower(str1[i - 1])) {\n            modified_str += \" \";\n        }\n        modified_str += str1[i];\n    }\n    \n    return modified_str;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/422",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the average of cubes of first n natural numbers.\nfloat find_Average_Of_Cube(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find_Average_Of_Cube;\n    assert(candidate((2)) == (4.5f));\n    assert(candidate((3)) == (float(12)));\n    assert(candidate((1)) == (float(1)));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the average of cubes of first n natural numbers.\n# Initialize a variable to store the sum of the cubes.\n# Iterate from 1 to n (inclusive).\n    # Calculate the cube of the current number and add it to the sum.\n# Calculate the average by dividing the sum by n.\n# Return the average."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the average of cubes of first n natural numbers.\nfloat find_Average_Of_Cube(long n) {\n    long sum = 0;\n\n    // Iterate from 1 to n and calculate the sum of cubes.\n    for (long i = 1; i <= n; i++) {\n        sum += pow(i, 3);\n    }\n\n    // Calculate the average by dividing the sum by n.\n    float average = static_cast<float>(sum) / n;\n\n    return average;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/464",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all values are same in a map.\nbool check_value(std::map<std::string,long> dict, long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = check_value;\n    assert(candidate((std::map<std::string,long>({{\"Cierra Vega\", 12}, {\"Alden Cantrell\", 12}, {\"Kierra Gentry\", 12}, {\"Pierre Cox\", 12}})), (10)) == (false));\n    assert(candidate((std::map<std::string,long>({{\"Cierra Vega\", 12}, {\"Alden Cantrell\", 12}, {\"Kierra Gentry\", 12}, {\"Pierre Cox\", 12}})), (12)) == (true));\n    assert(candidate((std::map<std::string,long>({{\"Cierra Vega\", 12}, {\"Alden Cantrell\", 12}, {\"Kierra Gentry\", 12}, {\"Pierre Cox\", 12}})), (5)) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Iterate over the values of the input map.\n    # Check if the current value is equal to the given value.\n        # If it is not, return false.\n# If all values are equal to the given value, return true."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all values are same in a map.\nbool check_value(std::map<std::string,long> dict, long n) {\n    for (const auto& pair : dict) {\n        if (pair.second != n) {\n            return false;\n        }\n    }\n    return true;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/80",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth tetrahedral number.\nlong tetrahedral_number(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = tetrahedral_number;\n    assert(candidate((5)) == (35));\n    assert(candidate((6)) == (56));\n    assert(candidate((7)) == (84));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the nth tetrahedral number.\n# Initialize a variable to store the sum of the tetrahedral numbers.\n# Iterate from 1 to n.\n    # Add the current number to the sum.\n# Return the sum of the tetrahedral numbers."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth tetrahedral number.\nlong tetrahedral_number(long n) {\n    long sum = 0;\n    for (long i = 1; i <= n; i++) {\n        sum += (i * (i + 1) * (i + 2)) / 6;\n    }\n    return sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/129",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate whether the matrix is a magic square.\nbool magic_square_test(std::vector<std::vector<long>> my_matrix) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = magic_square_test;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)12, (long)1, (long)14}), (std::vector<long>)std::vector<long>({(long)2, (long)13, (long)8, (long)11}), (std::vector<long>)std::vector<long>({(long)16, (long)3, (long)10, (long)5}), (std::vector<long>)std::vector<long>({(long)9, (long)6, (long)15, (long)4})}))) == (true));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)7, (long)6}), (std::vector<long>)std::vector<long>({(long)9, (long)5, (long)1}), (std::vector<long>)std::vector<long>({(long)4, (long)3, (long)8})}))) == (true));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)7, (long)6}), (std::vector<long>)std::vector<long>({(long)9, (long)5, (long)1}), (std::vector<long>)std::vector<long>({(long)4, (long)3, (long)7})}))) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to test whether the given matrix is a magic square.\n# Check if the matrix is a square matrix (number of rows equals number of columns).\n    # If not, return false.\n# Calculate the sum of the first row and assign it to a variable called \"magic_sum\".\n# Check if the sum of every row is equal to \"magic_sum\".\n    # If not, return false.\n# Check if the sum of every column is equal to \"magic_sum\".\n    # If not, return false.\n# Check if the sum of the main diagonal is equal to \"magic_sum\".\n    # If not, return false.\n# Check if the sum of the secondary diagonal is equal to \"magic_sum\".\n    # If not, return false.\n# If all conditions are met, return true."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate whether the matrix is a magic square.\nbool magic_square_test(std::vector<std::vector<long>> my_matrix) {\n    // Check if the matrix is a square matrix\n    int n = my_matrix.size();\n    if (n == 0 || n != my_matrix[0].size()) {\n        return false;\n    }\n\n    long magic_sum = 0;\n\n    // Calculate the sum of the first row\n    for (int j = 0; j < n; j++) {\n        magic_sum += my_matrix[0][j];\n    }\n\n    // Check if the sum of every row is equal to magic_sum\n    for (int i = 1; i < n; i++) {\n        long row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != magic_sum) {\n            return false;\n        }\n    }\n\n    // Check if the sum of every column is equal to magic_sum\n    for (int j = 0; j < n; j++) {\n        long col_sum = 0;\n        for (int i = 0; i < n; i++) {\n            col_sum += my_matrix[i][j];\n        }\n        if (col_sum != magic_sum) {\n            return false;\n        }\n    }\n\n    // Check if the sum of the main diagonal is equal to magic_sum\n    long main_diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        main_diag_sum += my_matrix[i][i];\n    }\n    if (main_diag_sum != magic_sum) {\n        return false;\n    }\n\n    // Check if the sum of the secondary diagonal is equal to magic_sum\n    long sec_diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        sec_diag_sum += my_matrix[i][n - 1 - i];\n    }\n    if (sec_diag_sum != magic_sum) {\n        return false;\n    }\n\n    // If all conditions are met, return true\n    return true;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/459",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove uppercase substrings from a given string.\nstd::string remove_uppercase(std::string str1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = remove_uppercase;\n    assert(candidate((\"cAstyoUrFavoRitETVshoWs\")) == (\"cstyoravoitshos\"));\n    assert(candidate((\"wAtchTheinTernEtrAdIo\")) == (\"wtchheinerntrdo\"));\n    assert(candidate((\"VoicESeaRchAndreComMendaTionS\")) == (\"oiceachndreomendaion\"));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to remove uppercase substrings from a given string.\n# Initialize an empty string to store the modified string.\n# Iterate over each character in the given string.\n    # Check if the current character is lowercase.\n        # If it is, append it to the modified string.\n# Return the modified string without uppercase substrings."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove uppercase substrings from a given string.\nstd::string remove_uppercase(std::string str1) {\n    std::string modified_str;\n    for (char c : str1) {\n        if (std::islower(c)) {\n            modified_str += c;\n        }\n    }\n    return modified_str;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/405",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Write a function to check whether an element exists within a tuple.\nbool check_tuplex(std::vector<Union_std_string_long> tuplex, std::any tuple1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = check_tuplex;\n    assert(candidate((std::vector<Union_std_string_long>({(std::string)\"w\", (std::string)3, (std::string)\"r\", (std::string)\"e\", (std::string)\"s\", (std::string)\"o\", (std::string)\"u\", (std::string)\"r\", (std::string)\"c\", (std::string)\"e\"})), (std::any(\"r\"))) == (true));\n    assert(candidate((std::vector<Union_std_string_long>({(std::string)\"w\", (std::string)3, (std::string)\"r\", (std::string)\"e\", (std::string)\"s\", (std::string)\"o\", (std::string)\"u\", (std::string)\"r\", (std::string)\"c\", (std::string)\"e\"})), (std::any(\"5\"))) == (false));\n    assert(candidate((std::vector<Union_std_string_long>({(std::string)\"w\", (std::string)3, (std::string)\"r\", (std::string)\"e\", (std::string)\"s\", (std::string)\"o\", (std::string)\"u\", (std::string)\"r\", (std::string)\"c\", (std::string)\"e\"})), (std::any(3))) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check whether an element exists within a tuple.\n# Iterate over each element in the input vector.\n    # Check if the element is equal to the given tuple.\n        # If it is, return true.\n# If no matching element is found, return false."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;\n    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }\n    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n\n// Write a function to check whether an element exists within a tuple.\nbool check_tuplex(std::vector<Union_std_string_long> tuplex, std::any tuple1) {\n    for (const auto& element : tuplex) {\n        if (element == tuple1) {\n            return true;\n        }\n    }\n    return false;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/264",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate a dog's age in dog's years.\nlong dog_age(long h_age) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = dog_age;\n    assert(candidate((12)) == (61));\n    assert(candidate((15)) == (73));\n    assert(candidate((24)) == (109));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to calculate a dog's age in dog's years.\n# If the human age is less than or equal to 2, multiply it by 10. This accounts for the first two years of a dog's life.\n# If the human age is greater than 2, subtract 2 from it and multiply the result by 4. This accounts for the additional years beyond the first two.\n# Return the calculated dog age."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate a dog's age in dog's years.\nlong dog_age(long h_age) {\n    if (h_age <= 2) {\n        return h_age * 10;\n    } else {\n        return (h_age - 2) * 4 + 20;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_cpp/244",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the next perfect square greater than a given number.\n# Initialize a variable to store the result.\n# Iterate from the given number + 1 until infinity.\n    # Check if the current number is a perfect square.\n        # If it is, assign it to the result variable and break the loop.\n# Return the result."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long result = 0;\n    \n    for (long i = N + 1; ; i++) {\n        long sqrt_i = sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            result = i;\n            break;\n        }\n    }\n    \n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/568",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to create a vector of N empty dictionaries.\nstd::vector<std::map<std::nullopt,std::nullopt>> empty_list(long length) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = empty_list;\n    assert(candidate((5)) == (std::vector<std::map<std::nullopt,std::nullopt>>({(std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>()})));\n    assert(candidate((6)) == (std::vector<std::map<std::nullopt,std::nullopt>>({(std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>()})));\n    assert(candidate((7)) == (std::vector<std::map<std::nullopt,std::nullopt>>({(std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>(), (std::map<long,long>)std::map<long,long>()})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to create a vector of N empty dictionaries.\n# Create an empty vector to store the dictionaries.\n# Iterate N times, where N is the length parameter.\n    # Create an empty dictionary.\n    # Append the dictionary to the vector.\n# Return the vector of empty dictionaries."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to create a vector of N empty dictionaries.\nstd::vector<std::map<std::nullopt,std::nullopt>> empty_list(long length) {\n    std::vector<std::map<std::nullopt,std::nullopt>> vec;\n    for (long i = 0; i < length; i++) {\n        std::map<std::nullopt, std::nullopt> dict;\n        vec.push_back(dict);\n    }\n    return vec;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/624",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = is_upper;\n    assert(candidate((\"person\")) == (\"PERSON\"));\n    assert(candidate((\"final\")) == (\"FINAL\"));\n    assert(candidate((\"Valid\")) == (\"VALID\"));\n}\n"
        ],
        "draft_plan": [
            "# Iterate through each character in the given string\n    # Check if the current character is a lowercase letter\n        # If it is, convert it to uppercase\n# Return the modified string with all characters converted to uppercase"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to convert a given string to uppercase.\nstd::string is_upper(std::string string) {\n    std::transform(string.begin(), string.end(), string.begin(), ::toupper);\n    return string;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/109",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nlong odd_Equivalent(std::string s, long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = odd_Equivalent;\n    assert(candidate((\"011001\"), (6)) == (3));\n    assert(candidate((\"11011\"), (5)) == (4));\n    assert(candidate((\"1010\"), (4)) == (2));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n# Initialize a counter for odd numbers.\n# Iterate n times to rotate the binary string.\n    # Rotate the string by moving the last character to the front.\n    # Convert the rotated string to an integer.\n    # Check if the integer is odd.\n        # If it is, increment the odd number count.\n# Return the count of odd numbers."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nlong odd_Equivalent(std::string s, long n) {\n    long odd_count = 0;\n\n    for (long i = 0; i < n; i++) {\n        // Rotate the string by moving the last character to the front.\n        std::rotate(s.begin(), s.end() - 1, s.end());\n\n        // Convert the rotated string to an integer.\n        long num = std::stoi(s, nullptr, 2);\n\n        // Check if the integer is odd.\n        if (num % 2 != 0) {\n            odd_count++;\n        }\n    }\n\n    return odd_count;\n}\n"
        ]
    },
    {
        "id": "mbpp_cpp/229",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector and an integer n, and re-arranges the first n elements of the given vector so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nstd::vector<long> re_arrange_array(std::vector<long> arr, long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = re_arrange_array;\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)-3, (long)4, (long)5, (long)6, (long)-7, (long)8, (long)9})), (9)) == (std::vector<long>({(long)-1, (long)-3, (long)-7, (long)4, (long)5, (long)6, (long)2, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)12, (long)-14, (long)-26, (long)13, (long)15})), (5)) == (std::vector<long>({(long)-14, (long)-26, (long)12, (long)13, (long)15})));\n    assert(candidate((std::vector<long>({(long)10, (long)24, (long)36, (long)-42, (long)-39, (long)-78, (long)85})), (7)) == (std::vector<long>({(long)-42, (long)-39, (long)-78, (long)10, (long)24, (long)36, (long)85})));\n}\n"
        ],
        "draft_plan": [
            "# Create two separate vectors to store negative and positive elements.\n# Iterate over the first n elements of the given vector.\n    # Check if the current element is negative.\n        # If it is, add it to the negative vector.\n        # If it is positive, add it to the positive vector.\n# Concatenate the negative and positive vectors.\n# Return the concatenated vector."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector and an integer n, and re-arranges the first n elements of the given vector so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nstd::vector<long> re_arrange_array(std::vector<long> arr, long n) {\n    std::vector<long> negative;\n    std::vector<long> positive;\n\n    // Iterate over the first n elements of the array\n    for (long i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            negative.push_back(arr[i]);\n        } else {\n            positive.push_back(arr[i]);\n        }\n    }\n\n    // Concatenate the negative and positive vectors\n    negative.insert(negative.end(), positive.begin(), positive.end());\n\n    return negative;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/760",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Get the first element from the vector and store it as the reference value.\n# Iterate over the vector starting from the second element.\n    # Check if the current element is different from the reference value.\n        # If it is, return false.\n# If the loop completes without returning false, return true."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    if(arr.empty()) {\n        return true;\n    }\n\n    long reference = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        if(arr[i] != reference) {\n            return false;\n        }\n    }\n    return true;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/563",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract values between quotation marks from a string.\nstd::vector<std::string> extract_values(std::string text) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = extract_values;\n    assert(candidate((\"\"Python\", \"PHP\", \"Java\"\")) == (std::vector<std::string>({(std::string)\"Python\", (std::string)\"PHP\", (std::string)\"Java\"})));\n    assert(candidate((\"\"python\",\"program\",\"language\"\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"program\", (std::string)\"language\"})));\n    assert(candidate((\"\"red\",\"blue\",\"green\",\"yellow\"\")) == (std::vector<std::string>({(std::string)\"red\", (std::string)\"blue\", (std::string)\"green\", (std::string)\"yellow\"})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to extract values between quotation marks from a string.\n# Create an empty vector to store the extracted values.\n# Initialize two pointers, start and end, to keep track of the quotation marks.\n# Iterate over the characters of the string.\n    # If a quotation mark is found, set the start pointer to the index of that quotation mark.\n    # Increment the start pointer to skip the quotation mark itself.\n    # Iterate from the start pointer to find the next quotation mark.\n        # If a quotation mark is found, set the end pointer to the index of that quotation mark.\n        # Extract the substring between the start and end pointers and add it to the vector.\n        # Increment the end pointer to skip the quotation mark itself.\n        # Set the start pointer to the end pointer for the next iteration.\n# Return the vector of extracted values."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to extract values between quotation marks from a string.\nstd::vector<std::string> extract_values(std::string text) {\n    std::vector<std::string> extracted_values;\n    int start = 0, end = 0;\n\n    // Iterate over the characters of the string.\n    while (start < text.length()) {\n        // Find the first quotation mark.\n        start = text.find(\"\\\"\", start);\n        if (start == std::string::npos) {\n            break;\n        }\n        start++;\n\n        // Find the second quotation mark.\n        end = text.find(\"\\\"\", start);\n        if (end == std::string::npos) {\n            break;\n        }\n\n        // Extract the substring between the quotation marks.\n        std::string value = text.substr(start, end - start);\n        extracted_values.push_back(value);\n        start = end + 1;\n    }\n\n    return extracted_values;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/105",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count true booleans in the given vector.\nlong count(std::vector<bool> lst) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = count;\n    assert(candidate((std::vector<bool>({(bool)true, (bool)false, (bool)true}))) == (2));\n    assert(candidate((std::vector<bool>({(bool)false, (bool)false}))) == (0));\n    assert(candidate((std::vector<bool>({(bool)true, (bool)true, (bool)true}))) == (3));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count the number of true booleans in the given vector.\n# Initialize a counter for true booleans.\n# Iterate over the elements in the vector.\n    # Check if the current element is true.\n        # If it is, increment the counter.\n# Return the count of true booleans."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count true booleans in the given vector.\nlong count(std::vector<bool> lst) {\n    long true_count = 0;\n\n    // Iterate over the elements in the vector.\n    for (const auto& boolean : lst) {\n        // Check if the current element is true.\n        if (boolean) {\n            // Increment the counter.\n            true_count++;\n        }\n    }\n\n    return true_count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/166",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a vector that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find_even_pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1}))) == (4));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11}))) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (1));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count the number of pairs of integers in a vector that xor to an even number.\n# Initialize a counter for the number of even pairs.\n# Iterate over the vector elements.\n    # Iterate over the remaining elements in the vector.\n        # Calculate the xor of the current element and the remaining element.\n        # Check if the xor result is an even number.\n            # If it is, increment the counter for even pairs.\n# Return the count of even pairs."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that counts the number of pairs of integers in a vector that xor to an even number.\nlong find_even_pair(std::vector<long> A) {\n    long even_pair_count = 0;\n\n    // Iterate over the vector elements.\n    for (int i = 0; i < A.size(); i++) {\n        // Iterate over the remaining elements in the vector.\n        for (int j = i + 1; j < A.size(); j++) {\n            // Calculate the xor of the current element and the remaining element.\n            long xor_result = A[i] ^ A[j];\n\n            // Check if the xor result is an even number.\n            if (xor_result % 2 == 0) {\n                // If it is, increment the counter for even pairs.\n                even_pair_count++;\n            }\n        }\n    }\n\n    return even_pair_count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/598",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = armstrong_number;\n    assert(candidate((153)) == (true));\n    assert(candidate((259)) == (false));\n    assert(candidate((4458)) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Convert the given number to a string.\n# Calculate the length of the string.\n# Initialize a variable 'sum' to 0.\n# Iterate through each character in the string.\n    # Convert the character to an integer.\n    # Raise the integer to the power of the length of the string.\n    # Add the result to the 'sum' variable.\n# Check if the 'sum' variable is equal to the given number.\n    # If it is, return true (the number is an Armstrong number).\n    # If it is not, return false (the number is not an Armstrong number)."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is armstrong or not.\nbool armstrong_number(long number) {\n    std::string num_str = std::to_string(number);\n    int length = num_str.length();\n    int sum = 0;\n\n    for (char c : num_str) {\n        int digit = c - '0';\n        sum += std::pow(digit, length);\n    }\n\n    return (sum == number);\n}\n"
        ]
    },
    {
        "id": "mbpp_cpp/461",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the upper case characters in a given string.\nlong upper_ctr(std::string str) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = upper_ctr;\n    assert(candidate((\"PYthon\")) == (1));\n    assert(candidate((\"BigData\")) == (1));\n    assert(candidate((\"program\")) == (0));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count the number of uppercase characters in a given string.\n# Initialize a counter for uppercase characters.\n# Iterate over each character in the string.\n    # Check if the current character is uppercase.\n        # If it is, increment the counter for uppercase characters.\n# Return the counter for uppercase characters."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the upper case characters in a given string.\nlong upper_ctr(std::string str) {\n    long count = 0;\n    \n    // Iterate over each character in the string.\n    for (char c : str) {\n        // Check if the current character is uppercase.\n        if (std::isupper(c)) {\n            // Increment the counter for uppercase characters.\n            count++;\n        }\n    }\n    \n    return count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/429",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract the elementwise and tuples from the given two tuples.\nstd::tuple<long, long, long, long> and_tuples(std::tuple<long, long, long, long> test_tup1, std::tuple<long, long, long, long> test_tup2) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = and_tuples;\n    assert(candidate((std::make_tuple(10, 4, 6, 9)), (std::make_tuple(5, 2, 3, 3))) == (std::make_tuple(0, 0, 2, 1)));\n    assert(candidate((std::make_tuple(1, 2, 3, 4)), (std::make_tuple(5, 6, 7, 8))) == (std::make_tuple(1, 2, 3, 0)));\n    assert(candidate((std::make_tuple(8, 9, 11, 12)), (std::make_tuple(7, 13, 14, 17))) == (std::make_tuple(0, 9, 10, 0)));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to extract the elementwise 'and' of two tuples.\n# Initialize a new tuple to store the elementwise 'and' results.\n# Iterate over the elements of the two input tuples.\n    # Retrieve the corresponding elements from both tuples.\n    # Perform the elementwise 'and' operation on the elements.\n    # Add the result to the new tuple.\n# Return the new tuple containing the elementwise 'and' results."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract the elementwise 'and' of two tuples.\nstd::tuple<long, long, long, long> and_tuples(std::tuple<long, long, long, long> test_tup1, std::tuple<long, long, long, long> test_tup2) {\n    std::tuple<long, long, long, long> result;\n\n    std::get<0>(result) = std::get<0>(test_tup1) & std::get<0>(test_tup2);\n    std::get<1>(result) = std::get<1>(test_tup1) & std::get<1>(test_tup2);\n    std::get<2>(result) = std::get<2>(test_tup1) & std::get<2>(test_tup2);\n    std::get<3>(result) = std::get<3>(test_tup1) & std::get<3>(test_tup2);\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/74",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether it follows the sequence given in the patterns vector.\nbool is_samepatterns(std::vector<std::string> colors, std::vector<std::string> patterns) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = is_samepatterns;\n    assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"green\", (std::string)\"green\"})), (std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"b\"}))) == (true));\n    assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"green\", (std::string)\"greenn\"})), (std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"b\"}))) == (false));\n    assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"green\", (std::string)\"greenn\"})), (std::vector<std::string>({(std::string)\"a\", (std::string)\"b\"}))) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check if the given colors follow the patterns.\n# Iterate over each color and pattern in parallel.\n    # Check if the current color is equal to the current pattern.\n        # If it is not, return false.\n# If all colors match their corresponding patterns, return true."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether it follows the sequence given in the patterns vector.\nbool is_samepatterns(std::vector<std::string> colors, std::vector<std::string> patterns) {\n    if (colors.size() != patterns.size()) {\n        return false;\n    }\n\n    for (size_t i = 0; i < colors.size(); i++) {\n        if (colors[i] != patterns[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/792",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of vectors in a given number of vectors.\nlong count_list(std::vector<std::vector<long>> input_list) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = count_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5})}))) == (3));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)2, (long)0})}))) == (2));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count the number of vectors in a given list of vectors.\n# Initialize a counter for the number of vectors.\n# Iterate over the input list of vectors.\n    # Check if the current element is a vector.\n        # If it is, increment the counter.\n# Return the count of vectors."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of vectors in a given list of vectors.\nlong count_list(std::vector<std::vector<long>> input_list) {\n    long count = 0;\n    \n    // Iterate over the input_list to count the vectors.\n    for (const auto& vec : input_list) {\n        if (std::is_vector<std::vector<long>>::value) {\n            count++;\n        }\n    }\n    \n    return count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/615",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which takes a vectors of vectors and returns the average value for each subvector as a vector.\nstd::vector<float> average_tuple(std::vector<std::vector<long>> nums) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = average_tuple;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)10, (long)10, (long)10, (long)12}), (std::vector<long>)std::vector<long>({(long)30, (long)45, (long)56, (long)45}), (std::vector<long>)std::vector<long>({(long)81, (long)80, (long)39, (long)32}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4})}))) == (std::vector<float>({(float)30.5f, (float)34.25f, (float)27.0f, (float)23.25f})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)-5}), (std::vector<long>)std::vector<long>({(long)30, (long)-15, (long)56}), (std::vector<long>)std::vector<long>({(long)81, (long)-60, (long)-39}), (std::vector<long>)std::vector<long>({(long)-10, (long)2, (long)3})}))) == (std::vector<float>({(float)25.5f, (float)-18.0f, (float)3.75f})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)100, (long)100, (long)100, (long)120}), (std::vector<long>)std::vector<long>({(long)300, (long)450, (long)560, (long)450}), (std::vector<long>)std::vector<long>({(long)810, (long)800, (long)390, (long)320}), (std::vector<long>)std::vector<long>({(long)10, (long)20, (long)30, (long)40})}))) == (std::vector<float>({(float)305.0f, (float)342.5f, (float)270.0f, (float)232.5f})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to calculate the average value for each subvector.\n# Initialize an empty vector to store the average values.\n# Iterate over each subvector in the input vector.\n    # Calculate the sum of all values in the subvector.\n    # Calculate the average by dividing the sum by the number of elements in the subvector.\n    # Append the average value to the result vector.\n# Return the result vector with the average values."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function which takes a vectors of vectors and returns the average value for each subvector as a vector.\nstd::vector<float> average_tuple(std::vector<std::vector<long>> nums) {\n    std::vector<float> averages;\n\n    // Iterate over each subvector\n    for (const auto& subvector : nums) {\n        // Calculate the sum of the values in the subvector\n        long sum = std::accumulate(subvector.begin(), subvector.end(), 0);\n\n        // Calculate the average by dividing the sum by the number of elements\n        float average = static_cast<float>(sum) / subvector.size();\n\n        // Append the average value to the result vector\n        averages.push_back(average);\n    }\n\n    return averages;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/747",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nlong lcs_of_three(std::string X, std::string Y, std::string Z) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = lcs_of_three;\n    assert(candidate((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2));\n    assert(candidate((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5));\n    assert(candidate((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the longest common subsequence for the given three string sequence.\n# Create a three-dimensional vector to store the lengths of the common subsequences.\n# Initialize the vector with zeros for the base cases.\n# Iterate over the three strings.\n    # Iterate over the lengths of the strings.\n        # Iterate over the possible characters of each string.\n            # Check if the characters are equal.\n                # If they are, increment the length of the common subsequence by 1.\n                # Otherwise, take the maximum length from the previous cells.\n# Return the length of the longest common subsequence."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to find the longest common subsequence for the given three string sequence.\nlong lcs_of_three(std::string X, std::string Y, std::string Z) {\n    int m = X.length();\n    int n = Y.length();\n    int p = Z.length();\n\n    // Create a three-dimensional vector to store the lengths of the common subsequences.\n    std::vector<std::vector<std::vector<int>>> dp(m + 1, std::vector<std::vector<int>>(n + 1, std::vector<int>(p + 1, 0)));\n\n    // Iterate over the three strings.\n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            for (int k = 1; k <= p; k++) {\n                // Check if the characters are equal.\n                if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                    // If they are, increment the length of the common subsequence by 1.\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    // Otherwise, take the maximum length from the previous cells.\n                    dp[i][j][k] = std::max({dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1]});\n                }\n            }\n        }\n    }\n\n    // Return the length of the longest common subsequence.\n    return dp[m][n][p];\n}"
        ]
    },
    {
        "id": "mbpp_cpp/268",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the n'th star number.\nlong find_star_num(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find_star_num;\n    assert(candidate((3)) == (37));\n    assert(candidate((4)) == (73));\n    assert(candidate((5)) == (121));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the n'th star number.\n# Initialize a variable to store the current number.\n# Initialize a variable to keep track of the count of star numbers found.\n# Start a loop that will continue until the count of star numbers is equal to n.\n    # Increment the current number by 1.\n    # Check if the current number is a star number.\n        # If it is, increment the count of star numbers found.\n# Return the current number as the n'th star number."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to find the n'th star number.\nlong find_star_num(long n) {\n    long current_num = 0;\n    long star_count = 0;\n\n    // Loop until the count of star numbers is equal to n.\n    while (star_count < n) {\n        current_num++;\n        long temp = current_num;\n        bool is_star = true;\n\n        // Check if the current number is a star number.\n        while (temp > 0) {\n            long digit = temp % 10;\n            temp /= 10;\n            if (digit != 2 && digit != 3 && digit != 5) {\n                is_star = false;\n                break;\n            }\n        }\n\n        if (is_star) {\n            star_count++;\n        }\n    }\n\n    return current_num;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/798",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the sum of a vector.\nlong _sum(std::vector<long> arr) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = _sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (6));\n    assert(candidate((std::vector<long>({(long)15, (long)12, (long)13, (long)10}))) == (50));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2}))) == (3));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the sum of a vector.\n# Initialize a variable to store the sum.\n# Iterate over the elements of the vector.\n    # Add each element to the sum variable.\n# Return the sum."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to find the sum of a vector.\nlong _sum(std::vector<long> arr) {\n    long sum = 0;\n\n    // Iterate over the elements of the vector and add them to the sum variable.\n    for (const auto& num : arr) {\n        sum += num;\n    }\n\n    return sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/472",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector contains consecutive numbers or not.\nbool check_Consecutive(std::vector<long> l) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = check_Consecutive;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)6}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Sort the given vector in ascending order.\n# Iterate through the sorted vector.\n    # Check if the current element is equal to the next element minus 1.\n        # If it is, continue to the next iteration.\n        # If it is not, return false.\n# If the loop completes without returning false, return true."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to check whether the given vector contains consecutive numbers or not.\nbool check_Consecutive(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i] != l[i + 1] - 1) {\n            return false;\n        }\n    }\n\n    return true;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/440",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the first adverb and their positions in a given sentence.\nstd::tuple<long, long, std::string> find_adverb_position(std::string text) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find_adverb_position;\n    assert(candidate((\"clearly!! we can see the sky\")) == (std::make_tuple(0, 7, \"clearly\")));\n    assert(candidate((\"seriously!! there are many roses\")) == (std::make_tuple(0, 9, \"seriously\")));\n    assert(candidate((\"unfortunately!! sita is going to home\")) == (std::make_tuple(0, 13, \"unfortunately\")));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the first adverb and its position in a given sentence.\n# Initialize variables to store the position and adverb.\n# Iterate through each word in the sentence.\n    # Check if the current word is an adverb.\n        # If it is, store its position and the adverb itself.\n        # Break the loop.\n# Return a tuple containing the position, length of the adverb, and the adverb itself."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the first adverb and their positions in a given sentence.\nstd::tuple<long, long, std::string> find_adverb_position(std::string text) {\n    std::istringstream iss(text);\n    std::string word;\n    long position = 0;\n    long adverb_position = -1;\n    std::string adverb = \"\";\n\n    // Iterate through each word in the sentence.\n    while (iss >> word) {\n        position++;\n\n        // Check if the current word is an adverb.\n        if (is_adverb(word)) {\n            adverb_position = position;\n            adverb = word;\n            break;\n        }\n    }\n\n    return std::make_tuple(adverb_position, adverb.length(), adverb);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/743",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given vector by specified number of items to the right direction. https://www.geeksforgeeks.org/cppthon-program-right-rotate-vector-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = rotate_right;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (3)) == (std::vector<long>({(long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (5)) == (std::vector<long>({(long)6, (long)7, (long)8, (long)9, (long)10, (long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to rotate a given vector by a specified number of items to the right direction.\n# Create a new vector to store the rotated elements.\n# Calculate the effective rotation index by taking the modulus of the rotation number with the size of the vector.\n# Iterate over the vector from the effective rotation index to the end.\n    # Append each element to the new vector.\n# Iterate over the vector from index 0 to the effective rotation index.\n    # Append each element to the new vector.\n# Return the new vector with the rotated elements."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to rotate a given vector by specified number of items to the right direction. https://www.geeksforgeeks.org/cppthon-program-right-rotate-vector-n/\nstd::vector<long> rotate_right(std::vector<long> list, long m) {\n    std::vector<long> rotated_list;\n\n    // Calculate the effective rotation index\n    long effective_rotation = m % list.size();\n\n    // Iterate from the effective rotation index to the end of the vector\n    for (long i = effective_rotation; i < list.size(); i++) {\n        rotated_list.push_back(list[i]);\n    }\n\n    // Iterate from index 0 to the effective rotation index\n    for (long i = 0; i < effective_rotation; i++) {\n        rotated_list.push_back(list[i]);\n    }\n\n    return rotated_list;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/238",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of non-empty substrings of a given string.\nlong number_of_substrings(std::string str) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = number_of_substrings;\n    assert(candidate((\"abc\")) == (6));\n    assert(candidate((\"abcd\")) == (10));\n    assert(candidate((\"abcde\")) == (15));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count the number of non-empty substrings in a given string.\n# Initialize a counter for the number of substrings.\n# Iterate over the string using two nested loops.\n    # The first loop selects the starting index of the substring.\n    # The second loop selects the ending index of the substring.\n    # Add 1 to the counter for each substring.\n# Return the counter."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to count the number of non-empty substrings of a given string.\nlong number_of_substrings(std::string str) {\n    long count = 0;\n\n    // Iterate over the string using two nested loops.\n    for (int i = 0; i < str.size(); i++) {\n        for (int j = i; j < str.size(); j++) {\n            // Add 1 to the counter for each substring.\n            count++;\n        }\n    }\n\n    return count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/265",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector and an integer n and splits a vector for every nth element, returning a vector of the resulting vectors.\nstd::vector<std::vector<std::any>> list_split(std::vector<std::any> S, long step) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = list_split;\n    assert(candidate((std::vector<std::any>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"e\", (std::string)\"f\", (std::string)\"g\", (std::string)\"h\", (std::string)\"i\", (std::string)\"j\", (std::string)\"k\", (std::string)\"l\", (std::string)\"m\", (std::string)\"n\"})), (3)) == (std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"d\", (std::string)\"g\", (std::string)\"j\", (std::string)\"m\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"b\", (std::string)\"e\", (std::string)\"h\", (std::string)\"k\", (std::string)\"n\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"c\", (std::string)\"f\", (std::string)\"i\", (std::string)\"l\"})})));\n    assert(candidate((std::vector<std::any>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11, (long)12, (long)13, (long)14})), (3)) == (std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)1, (long)4, (long)7, (long)10, (long)13}), (std::vector<long>)std::vector<long>({(long)2, (long)5, (long)8, (long)11, (long)14}), (std::vector<long>)std::vector<long>({(long)3, (long)6, (long)9, (long)12})})));\n    assert(candidate((std::vector<std::any>({(std::string)\"python\", (std::string)\"java\", (std::string)\"C\", (std::string)\"C++\", (std::string)\"DBMS\", (std::string)\"SQL\"})), (2)) == (std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"python\", (std::string)\"C\", (std::string)\"DBMS\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"java\", (std::string)\"C++\", (std::string)\"SQL\"})})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to split a vector into multiple vectors based on a given step size.\n# Create an empty vector to store the resulting vectors.\n# Create a temporary vector to store elements for each individual vector.\n# Iterate over the input vector.\n    # Add the current element to the temporary vector.\n    # Check if the size of the temporary vector is equal to the given step size.\n        # If it is, add the temporary vector to the resulting vectors vector and clear the temporary vector.\n# Check if there are any remaining elements in the temporary vector.\n    # If there are, add the temporary vector to the resulting vectors vector.\n# Return the resulting vectors vector."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector and an integer n and splits a vector for every nth element, returning a vector of the resulting vectors.\nstd::vector<std::vector<std::any>> list_split(std::vector<std::any> S, long step) {\n    std::vector<std::vector<std::any>> result;\n    std::vector<std::any> temp;\n\n    for (const auto& elem : S) {\n        temp.push_back(elem);\n        \n        if (temp.size() == step) {\n            result.push_back(temp);\n            temp.clear();\n        }\n    }\n\n    if (!temp.empty()) {\n        result.push_back(temp);\n    }\n\n    return result;\n}\n"
        ]
    },
    {
        "id": "mbpp_cpp/281",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Create an empty set to store unique elements.\n# Iterate over each element in the input vector.\n    # Check if the current element is already in the set.\n        # If it is, return false as it is not unique.\n        # If it is not, add it to the set.\n# If the loop completes without returning false, return true as all elements are unique."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> unique_elements;\n    \n    for (const auto& element : test_list) {\n        if (unique_elements.count(element) > 0) {\n            return false;\n        }\n        unique_elements.insert(element);\n    }\n    \n    return true;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/252",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to convert complex numbers to polar coordinates.\nstd::tuple<float, float> convert(long numbers) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = convert;\n    assert(candidate((1)) == (std::make_tuple(1.0f, 0.0f)));\n    assert(candidate((4)) == (std::make_tuple(4.0f, 0.0f)));\n    assert(candidate((5)) == (std::make_tuple(5.0f, 0.0f)));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to convert complex numbers to polar coordinates.\n# Split the given complex number into its real and imaginary parts.\n# Calculate the magnitude (r) of the complex number using the formula sqrt(real^2 + imaginary^2).\n# Calculate the phase angle (theta) of the complex number using the formula atan2(imaginary, real).\n# Return a tuple with the magnitude and phase angle of the complex number."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to convert complex numbers to polar coordinates.\nstd::tuple<float, float> convert(long numbers) {\n    // Split the given complex number into its real and imaginary parts.\n    float real = std::real(numbers);\n    float imaginary = std::imag(numbers);\n    \n    // Calculate the magnitude (r) of the complex number.\n    float magnitude = std::sqrt(real * real + imaginary * imaginary);\n    \n    // Calculate the phase angle (theta) of the complex number.\n    float phase_angle = std::atan2(imaginary, real);\n    \n    // Return a tuple with the magnitude and phase angle.\n    return std::make_tuple(magnitude, phase_angle);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/722",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nstd::map<std::string,std::tuple<float, long>> filter_data(std::map<std::string,std::tuple<float, long>> students, float h, long w) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = filter_data;\n    assert(candidate((std::map<std::string,std::tuple<float, long>>({{\"Cierra Vega\", std::make_tuple(6.2f, 70)}, {\"Alden Cantrell\", std::make_tuple(5.9f, 65)}, {\"Kierra Gentry\", std::make_tuple(6.0f, 68)}, {\"Pierre Cox\", std::make_tuple(5.8f, 66)}})), (6.0f), (70)) == (std::map<std::string,std::tuple<float, long>>({{\"Cierra Vega\", std::make_tuple(6.2f, 70)}})));\n    assert(candidate((std::map<std::string,std::tuple<float, long>>({{\"Cierra Vega\", std::make_tuple(6.2f, 70)}, {\"Alden Cantrell\", std::make_tuple(5.9f, 65)}, {\"Kierra Gentry\", std::make_tuple(6.0f, 68)}, {\"Pierre Cox\", std::make_tuple(5.8f, 66)}})), (5.9f), (67)) == (std::map<std::string,std::tuple<float, long>>({{\"Cierra Vega\", std::make_tuple(6.2f, 70)}, {\"Kierra Gentry\", std::make_tuple(6.0f, 68)}})));\n    assert(candidate((std::map<std::string,std::tuple<float, long>>({{\"Cierra Vega\", std::make_tuple(6.2f, 70)}, {\"Alden Cantrell\", std::make_tuple(5.9f, 65)}, {\"Kierra Gentry\", std::make_tuple(6.0f, 68)}, {\"Pierre Cox\", std::make_tuple(5.8f, 66)}})), (5.7f), (64)) == (std::map<std::string,std::tuple<float, long>>({{\"Cierra Vega\", std::make_tuple(6.2f, 70)}, {\"Alden Cantrell\", std::make_tuple(5.9f, 65)}, {\"Kierra Gentry\", std::make_tuple(6.0f, 68)}, {\"Pierre Cox\", std::make_tuple(5.8f, 66)}})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to filter students based on height and weight.\n# Create an empty map to store the filtered students.\n# Iterate over each student in the input map.\n    # Retrieve the height and weight of the student from the tuple.\n    # Check if the student's height is above the minimum height and weight is above the minimum weight.\n        # If both conditions are true, add the student to the filtered map.\n# Return the filtered map of students."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nstd::map<std::string,std::tuple<float, long>> filter_data(std::map<std::string,std::tuple<float, long>> students, float h, long w) {\n    std::map<std::string,std::tuple<float, long>> filtered_students;\n\n    // Iterate over each student in the input map.\n    for (const auto& student : students) {\n        std::string name = student.first;\n        float height = std::get<0>(student.second);\n        long weight = std::get<1>(student.second);\n\n        // Check if the student's height is above the minimum height and weight is above the minimum weight.\n        if (height > h && weight > w) {\n            filtered_students[name] = std::make_tuple(height, weight);\n        }\n    }\n\n    return filtered_students;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/477",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = is_lower;\n    assert(candidate((\"InValid\")) == (\"invalid\"));\n    assert(candidate((\"TruE\")) == (\"true\"));\n    assert(candidate((\"SenTenCE\")) == (\"sentence\"));\n}\n"
        ],
        "draft_plan": [
            "# Iterate through each character in the given string\n    # Check if the current character is an uppercase letter\n        # If it is, convert it to lowercase\n# Return the modified string in lowercase"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to convert the given string to lower case.\nstd::string is_lower(std::string string) {\n    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n    return string;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/167",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the smallest power of 2 greater than or equal to n.\n# Initialize a variable to hold the result.\n# Check if n is already a power of 2.\n    # If it is, return n.\n# Iterate through the powers of 2 starting from 1.\n    # Check if the current power of 2 is greater than or equal to n.\n        # If it is, assign the current power of 2 to the result variable and break the loop.\n# Return the result."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Check if n is already a power of 2.\n    if ((n & (n - 1)) == 0) {\n        return n;\n    }\n\n    long result = 1;\n    // Iterate through the powers of 2 starting from 1.\n    while (result < n) {\n        result *= 2;\n    }\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/91",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if a string is present as a substring in a given vector of string values.\nbool find_substring(std::vector<std::string> str1, std::string sub_str) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find_substring;\n    assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"black\", (std::string)\"white\", (std::string)\"green\", (std::string)\"orange\"})), (\"ack\")) == (true));\n    assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"black\", (std::string)\"white\", (std::string)\"green\", (std::string)\"orange\"})), (\"abc\")) == (false));\n    assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"black\", (std::string)\"white\", (std::string)\"green\", (std::string)\"orange\"})), (\"ange\")) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check if a string is present as a substring in a given vector of string values.\n# Iterate over each string in the vector.\n    # Check if the current string contains the substring.\n        # If it does, return true.\n# If the substring is not found in any of the strings, return false."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if a string is present as a substring in a given vector of string values.\nbool find_substring(std::vector<std::string> str1, std::string sub_str) {\n    for (const std::string& str : str1) {\n        if (str.find(sub_str) != std::string::npos) {\n            return true;\n        }\n    }\n    return false;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/474",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace characters in a string.\nstd::string replace_char(std::string str1, std::string ch, std::string newch) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = replace_char;\n    assert(candidate((\"polygon\"), (\"y\"), (\"l\")) == (\"pollgon\"));\n    assert(candidate((\"character\"), (\"c\"), (\"a\")) == (\"aharaater\"));\n    assert(candidate((\"python\"), (\"l\"), (\"a\")) == (\"python\"));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to replace characters in a string.\n# Iterate through each character in the string.\n    # Check if the current character is equal to the character to be replaced.\n        # If it is, replace the character with the new character.\n# Return the modified string with replaced characters."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to replace characters in a string.\nstd::string replace_char(std::string str1, std::string ch, std::string newch) {\n    size_t pos = 0;\n\n    // Iterate through the string and replace the characters.\n    while ((pos = str1.find(ch, pos)) != std::string::npos) {\n        str1.replace(pos, ch.length(), newch);\n        pos += newch.length();\n    }\n\n    return str1;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/784",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the product of the first even and odd numbers in a given vector.\n# Initialize variables to store the first even and odd numbers found.\n# Iterate over the elements in the vector.\n    # Check if the current element is even and if the first even number has not been found yet.\n        # If it is, store the current element as the first even number.\n    # Check if the current element is odd and if the first odd number has not been found yet.\n        # If it is, store the current element as the first odd number.\n    # Check if both the first even and odd numbers have been found.\n        # If they have, break the loop.\n# Check if both the first even and odd numbers have been found.\n    # If they have, return their product.\n    # If either of them has not been found, return -1 to indicate that they could not be found in the vector."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long first_even = -1;\n    long first_odd = -1;\n\n    // Iterate over the vector to find the first even and odd numbers.\n    for (const auto& num : list1) {\n        if (num % 2 == 0 && first_even == -1) {\n            first_even = num;\n        }\n        else if (num % 2 != 0 && first_odd == -1) {\n            first_odd = num;\n        }\n        \n        // Check if both the first even and odd numbers have been found.\n        if (first_even != -1 && first_odd != -1) {\n            break;\n        }\n    }\n\n    // Check if both the first even and odd numbers have been found.\n    if (first_even != -1 && first_odd != -1) {\n        return first_even * first_odd;\n    }\n    else {\n        return -1;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_cpp/587",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a vector to a tuple.\nstd::any list_tuple(std::vector<long> listx) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = list_tuple;\n    assert(candidate((std::vector<long>({(long)5, (long)10, (long)7, (long)4, (long)15, (long)3}))) == std::make_tuple(5, 10, 7, 4, 15, 3));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)5, (long)6, (long)2, (long)3, (long)4, (long)4, (long)7}))) == std::make_tuple(2, 4, 5, 6, 2, 3, 4, 4, 7));\n    assert(candidate((std::vector<long>({(long)58, (long)44, (long)56}))) == std::make_tuple(58, 44, 56));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to convert a vector to a tuple.\n# Create an empty tuple.\n# Iterate over the elements in the input vector.\n    # Append each element to the tuple.\n# Return the tuple."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a vector to a tuple.\nstd::any list_tuple(std::vector<long> listx) {\n    std::tuple<long, long> result;\n\n    // Iterate over the elements in the vector and append them to the tuple.\n    for (int i = 0; i < listx.size(); i++) {\n        std::get<i>(result) = listx[i];\n    }\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/274",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nlong even_binomial_Coeff_Sum(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = even_binomial_Coeff_Sum;\n    assert(candidate((4)) == (8));\n    assert(candidate((6)) == (32));\n    assert(candidate((2)) == (2));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the sum of even index binomial coefficients.\n# Initialize a variable to store the sum.\n# Iterate from 0 to n (inclusive) with step size 2.\n    # Calculate the binomial coefficient using the formula C(n, k) = n! / (k! * (n-k)!), where k is the current iteration variable.\n    # Add the current binomial coefficient to the sum.\n# Return the sum of even index binomial coefficients."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nlong even_binomial_Coeff_Sum(long n) {\n    long sum = 0;\n    \n    // Iterate from 0 to n with step size 2\n    for (long k = 0; k <= n; k += 2) {\n        // Calculate the binomial coefficient using the formula C(n, k) = n! / (k! * (n-k)!)\n        long coeff = 1;\n        for (long i = 1; i <= k; i++) {\n            coeff *= (n - i + 1);\n            coeff /= i;\n        }\n        \n        // Add the current binomial coefficient to the sum\n        sum += coeff;\n    }\n    \n    return sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/399",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to perform the mathematical bitwise xor operation across the given tuples.\nstd::tuple<long, long, long, long> bitwise_xor(std::tuple<long, long, long, long> test_tup1, std::tuple<long, long, long, long> test_tup2) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = bitwise_xor;\n    assert(candidate((std::make_tuple(10, 4, 6, 9)), (std::make_tuple(5, 2, 3, 3))) == (std::make_tuple(15, 6, 5, 10)));\n    assert(candidate((std::make_tuple(11, 5, 7, 10)), (std::make_tuple(6, 3, 4, 4))) == (std::make_tuple(13, 6, 3, 14)));\n    assert(candidate((std::make_tuple(12, 6, 8, 11)), (std::make_tuple(7, 4, 5, 6))) == (std::make_tuple(11, 2, 13, 13)));\n}\n"
        ],
        "draft_plan": [
            "# Retrieve the elements from both tuples.\n# Perform the bitwise xor operation on each corresponding element of the tuples.\n# Create a new tuple with the results of the bitwise xor operation.\n# Return the new tuple."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to perform the mathematical bitwise xor operation across the given tuples.\nstd::tuple<long, long, long, long> bitwise_xor(std::tuple<long, long, long, long> test_tup1, std::tuple<long, long, long, long> test_tup2) {\n    long a1 = std::get<0>(test_tup1);\n    long b1 = std::get<1>(test_tup1);\n    long c1 = std::get<2>(test_tup1);\n    long d1 = std::get<3>(test_tup1);\n\n    long a2 = std::get<0>(test_tup2);\n    long b2 = std::get<1>(test_tup2);\n    long c2 = std::get<2>(test_tup2);\n    long d2 = std::get<3>(test_tup2);\n\n    long xor_a = a1 ^ a2;\n    long xor_b = b1 ^ b2;\n    long xor_c = c1 ^ c2;\n    long xor_d = d1 ^ d2;\n\n    return std::make_tuple(xor_a, xor_b, xor_c, xor_d);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/576",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check if vector B is a subvector of vector A.\n# Initialize two pointers, i and j, to iterate through vectors A and B, respectively.\n# Iterate through vector A using pointer i.\n    # Check if the current element in vector A is equal to the current element in vector B.\n        # If they are equal, increment both pointers i and j.\n        # If pointer j reaches the end of vector B, return true.\n# If the iteration completes without finding a subvector, return false."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    int n = A.size();\n    int m = B.size();\n\n    // Iterate through vector A to check for subvector B.\n    while (i < n && j < m) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n            j = 0;\n        }\n    }\n\n    // Check if the iteration completes without finding a subvector.\n    if (j == m) {\n        return true;\n    } else {\n        return false;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_cpp/286",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the largest sum of a contiguous vector in the modified vector.\n# Create a new vector by repeating the given vector k times.\n# Initialize variables to track the current sum and the maximum sum.\n# Iterate through the new vector.\n    # Add the current element to the current sum.\n    # If the current sum is greater than the maximum sum, update the maximum sum.\n    # If the current sum becomes negative, reset the current sum to 0.\n# Return the maximum sum."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    std::vector<long> modified_vector;\n    for (long i = 0; i < k; i++) {\n        modified_vector.insert(modified_vector.end(), a.begin(), a.end());\n    }\n\n    long current_sum = 0;\n    long max_sum = INT_MIN;\n\n    for (long i = 0; i < n * k; i++) {\n        current_sum += modified_vector[i];\n\n        if (current_sum > max_sum) {\n            max_sum = current_sum;\n        }\n\n        if (current_sum < 0) {\n            current_sum = 0;\n        }\n    }\n\n    return max_sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/409",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the minimum product from the pairs of tuples within a given vector.\nlong min_product_tuple(std::vector<std::tuple<long, long>> list1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = min_product_tuple;\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 7), (std::tuple<long, long>)std::make_tuple(2, 6), (std::tuple<long, long>)std::make_tuple(1, 8), (std::tuple<long, long>)std::make_tuple(4, 9)}))) == (8));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(10, 20), (std::tuple<long, long>)std::make_tuple(15, 2), (std::tuple<long, long>)std::make_tuple(5, 10)}))) == (30));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(11, 44), (std::tuple<long, long>)std::make_tuple(10, 15), (std::tuple<long, long>)std::make_tuple(20, 5), (std::tuple<long, long>)std::make_tuple(12, 9)}))) == (100));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the minimum product from pairs of tuples.\n# Initialize a variable to store the minimum product.\n# Iterate over the input vector of tuples.\n    # Retrieve the two elements of the tuple.\n    # Calculate the product of the two elements.\n    # Check if the calculated product is less than the current minimum product.\n        # If it is, update the minimum product with the calculated product.\n# Return the minimum product.\n"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the minimum product from the pairs of tuples within a given vector.\nlong min_product_tuple(std::vector<std::tuple<long, long>> list1) {\n    long min_product = std::numeric_limits<long>::max();\n\n    // Iterate over the list1 to find the minimum product.\n    for (const auto& tup : list1) {\n        long a = std::get<0>(tup);\n        long b = std::get<1>(tup);\n        long product = a * b;\n        \n        // Update the minimum product if necessary.\n        if (product < min_product) {\n            min_product = product;\n        }\n    }\n\n    return min_product;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/781",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the count of divisors is even. https://www.w3resource.com/cppthon-exercises/basic/cppthon-basic-1-exercise-24.php\nbool count_divisors(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = count_divisors;\n    assert(candidate((10)) == (true));\n    assert(candidate((100)) == (false));\n    assert(candidate((125)) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check whether the count of divisors is even.\n# Initialize a counter for divisors.\n# Iterate from 1 to the square root of n.\n    # Check if i is a divisor of n.\n        # If it is, increment the divisor count by 2.\n# Check if the square root of n is a divisor.\n    # If it is, increment the divisor count by 1.\n# Check if the divisor count is even.\n    # If it is, return true.\n    # If it isn't, return false."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the count of divisors is even.\nbool count_divisors(long n) {\n    int divisor_count = 0;\n    \n    // Iterate from 1 to square root of n\n    for (int i = 1; i <= sqrt(n); i++) {\n        // Check if i is a divisor of n\n        if (n % i == 0) {\n            divisor_count += 2;\n        }\n    }\n    \n    // Check if the square root of n is a divisor\n    if (sqrt(n) * sqrt(n) == n) {\n        divisor_count++;\n    }\n    \n    // Check if the divisor count is even\n    if (divisor_count % 2 == 0) {\n        return true;\n    }\n    \n    return false;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/626",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nstd::optional<long> triangle_area(long r) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((-1)) == std::nullopt);\n    assert(candidate((0)) == 0);\n    assert(candidate((2)) == 4);\n}\n"
        ],
        "draft_plan": [
            "# Check if the given radius is non-negative.\n    # If it is negative, return std::nullopt to indicate an invalid input.\n# Calculate the area of the largest triangle inscribed in a semicircle.\n    # The base of the triangle is equal to the diameter of the semicircle, which is 2 times the radius.\n    # The height of the triangle can be calculated using the Pythagorean theorem: sqrt(r^2 - (r/2)^2)\n    # The area of the triangle is given by the formula: (base * height) / 2\n# Return the calculated area as an optional value."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n// Write a cppthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nstd::optional<long> triangle_area(long r) {\n    if (r < 0) {\n        return std::nullopt;\n    }\n\n    double base = 2 * r;\n    double height = std::sqrt(r * r - (r/2) * (r/2));\n    double area = (base * height) / 2;\n\n    return static_cast<long>(area);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/310",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a given string to a vector of characters.\nstd::vector<std::string> string_to_tuple(std::string str1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = string_to_tuple;\n    assert(candidate((\"python 3.0\")) == (std::vector<std::string>({(std::string)\"p\", (std::string)\"y\", (std::string)\"t\", (std::string)\"h\", (std::string)\"o\", (std::string)\"n\", (std::string)\"3\", (std::string)\".\", (std::string)\"0\"})));\n    assert(candidate((\"item1\")) == (std::vector<std::string>({(std::string)\"i\", (std::string)\"t\", (std::string)\"e\", (std::string)\"m\", (std::string)\"1\"})));\n    assert(candidate((\"15.10\")) == (std::vector<std::string>({(std::string)\"1\", (std::string)\"5\", (std::string)\".\", (std::string)\"1\", (std::string)\"0\"})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to convert a given string to a vector of characters.\n# Initialize an empty vector to store the characters.\n# Iterate over each character in the given string.\n    # Create a string object with the current character.\n    # Add the string object to the vector.\n# Return the vector of characters."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a given string to a vector of characters.\nstd::vector<std::string> string_to_tuple(std::string str1) {\n    std::vector<std::string> result;\n    for (char c : str1) {\n        std::string s(1, c);\n        result.push_back(s);\n    }\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/125",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n# Initialize a variable to store the maximum difference.\n# Initialize two variables to store the current count of 0s and 1s.\n# Iterate over each character in the string.\n    # If the character is '0', increment the count of 0s.\n    # If the character is '1', increment the count of 1s.\n    # Calculate the difference between the count of 0s and 1s.\n    # Update the maximum difference if the current difference is greater than the maximum difference.\n# Return the maximum difference."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long max_diff = 0;\n    long count_0s = 0;\n    long count_1s = 0;\n\n    // Iterate over each character in the string.\n    for (char c : string) {\n        if (c == '0') {\n            count_0s++;\n        } else {\n            count_1s++;\n        }\n\n        // Calculate the difference between the count of 0s and 1s.\n        long diff = count_0s - count_1s;\n\n        // Update the maximum difference if the current difference is greater than the maximum difference.\n        if (diff > max_diff) {\n            max_diff = diff;\n        }\n    }\n\n    return max_diff;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/256",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nlong count_Primes_nums(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = count_Primes_nums;\n    assert(candidate((5)) == (2));\n    assert(candidate((10)) == (4));\n    assert(candidate((100)) == (25));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count prime numbers less than a given number.\n# Initialize a variable to store the count of prime numbers.\n# Iterate through numbers from 2 to n-1.\n    # Check if the current number is prime.\n        # If it is, increment the count of prime numbers.\n# Return the count of prime numbers."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Helper function to check if a number is prime\nbool is_prime(int num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Function to count prime numbers less than a given number\nlong count_Primes_nums(long n) {\n    long prime_count = 0;\n\n    for (int i = 2; i < n; i++) {\n        if (is_prime(i)) {\n            prime_count++;\n        }\n    }\n\n    return prime_count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/592",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the sum of the product of consecutive binomial co-efficients.\nlong sum_Of_product(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = sum_Of_product;\n    assert(candidate((3)) == (15));\n    assert(candidate((4)) == (56));\n    assert(candidate((1)) == (1));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the sum of the product of consecutive binomial coefficients.\n# Initialize a variable to store the sum.\n# Iterate from i = 0 to n-1 (inclusive).\n    # Calculate the binomial coefficient for i and i+1.\n    # Multiply the binomial coefficients and add the result to the sum.\n# Return the final sum."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the sum of the product of consecutive binomial coefficients.\nlong sum_Of_product(long n) {\n    long sum = 0;\n    \n    for (long i = 0; i < n; i++) {\n        long coeff1 = 1;\n        long coeff2 = 1;\n        \n        for (long j = 0; j < i+1; j++) {\n            coeff1 *= (n - j);\n            coeff1 /= (j + 1);\n        }\n        \n        for (long j = 0; j < i+2; j++) {\n            coeff2 *= (n - j);\n            coeff2 /= (j + 1);\n        }\n        \n        sum += (coeff1 * coeff2);\n    }\n    \n    return sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/299",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate the maximum aggregate from the vector of tuples.\nstd::tuple<std::string, long> max_aggregate(std::vector<std::tuple<std::string, long>> stdata) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = max_aggregate;\n    assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 90), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 88), (std::tuple<std::string, long>)std::make_tuple(\"Peter Nichols\", 7), (std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 122), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 84)}))) == (std::make_tuple(\"Juan Whelan\", 212)));\n    assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 50), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 48), (std::tuple<std::string, long>)std::make_tuple(\"Peter Nichols\", 37), (std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 22), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 14)}))) == (std::make_tuple(\"Juan Whelan\", 72)));\n    assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 10), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 20), (std::tuple<std::string, long>)std::make_tuple(\"Peter Nichols\", 30), (std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 40), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 50)}))) == (std::make_tuple(\"Sabah Colley\", 70)));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to calculate the maximum aggregate from the vector of tuples.\n# Initialize variables to store the maximum aggregate value and its corresponding student name.\n# Iterate over the input vector of tuples.\n    # Retrieve the student name and aggregate score from each tuple.\n    # Check if the current aggregate score is greater than the maximum aggregate value.\n        # If it is, update the maximum aggregate value and store the corresponding student name.\n# Return a tuple containing the student name with the maximum aggregate and its corresponding aggregate score."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate the maximum aggregate from the vector of tuples.\nstd::tuple<std::string, long> max_aggregate(std::vector<std::tuple<std::string, long>> stdata) {\n    std::string max_name;\n    long max_aggregate = 0;\n\n    // Iterate over the vector of tuples to find the maximum aggregate.\n    for (const auto& st : stdata) {\n        std::string name = std::get<0>(st);\n        long aggregate = std::get<1>(st);\n\n        // Check if the current aggregate is greater than the maximum aggregate.\n        if (aggregate > max_aggregate) {\n            max_name = name;\n            max_aggregate = aggregate;\n        }\n    }\n\n    return std::make_tuple(max_name, max_aggregate);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/71",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> comb_sort(std::vector<long> nums) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = comb_sort;\n    assert(candidate((std::vector<long>({(long)5, (long)15, (long)37, (long)25, (long)79}))) == (std::vector<long>({(long)5, (long)15, (long)25, (long)37, (long)79})));\n    assert(candidate((std::vector<long>({(long)41, (long)32, (long)15, (long)19, (long)22}))) == (std::vector<long>({(long)15, (long)19, (long)22, (long)32, (long)41})));\n    assert(candidate((std::vector<long>({(long)99, (long)15, (long)13, (long)47}))) == (std::vector<long>({(long)13, (long)15, (long)47, (long)99})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to sort a vector of elements.\n# Implement the comb sort algorithm.\n    # Initialize the gap size to the length of the input vector.\n    # Create a flag variable to track if any swaps were made during a pass.\n    # Iterate over the vector while the gap size is greater than 1 or the flag variable is true.\n        # Set the gap size to the next gap size.\n        # If the current element and the next element are out of order, swap them and set the flag variable to true.\n    # Return the sorted vector."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to sort a vector of elements.\nstd::vector<long> comb_sort(std::vector<long> nums) {\n    int n = nums.size();\n    int gap = n;\n    bool flag = true;\n\n    while (gap > 1 || flag) {\n        gap = (gap * 10) / 13; // Shrink the gap size\n\n        if (gap < 1)\n            gap = 1;\n\n        flag = false;\n\n        for (int i = 0; i < n - gap; i++) {\n            if (nums[i] > nums[i + gap]) {\n                std::swap(nums[i], nums[i + gap]);\n                flag = true;\n            }\n        }\n    }\n\n    return nums;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/771",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nbool check_expression(std::string exp) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = check_expression;\n    assert(candidate((\"{()}[{}]\")) == (true));\n    assert(candidate((\"{()}[{]\")) == (false));\n    assert(candidate((\"{()}[{}][]({})\")) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check if the given expression is balanced or not.\n# Create a stack to store opening brackets.\n# Iterate through each character in the expression.\n    # If the current character is an opening bracket, push it onto the stack.\n    # If the current character is a closing bracket, check if the stack is empty.\n        # If the stack is empty, return false since there is no opening bracket to match with the closing bracket.\n        # If the stack is not empty, pop the top element from the stack and check if it matches the closing bracket.\n            # If it does not match, return false.\n# After iterating through all the characters, check if the stack is empty.\n    # If the stack is empty, return true since all opening brackets have been matched with closing brackets.\n    # If the stack is not empty, return false since there are unmatched opening brackets.\n# Return true or false depending on the balance of the expression."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if the given expression is balanced or not.\nbool check_expression(std::string exp) {\n    std::stack<char> brackets;\n\n    // Iterate through each character in the expression.\n    for (char c : exp) {\n        // If the current character is an opening bracket, push it onto the stack.\n        if (c == '(' || c == '[' || c == '{') {\n            brackets.push(c);\n        }\n        // If the current character is a closing bracket, check if the stack is empty.\n        else if (c == ')' || c == ']' || c == '}') {\n            if (brackets.empty()) {\n                return false;\n            }\n            // Pop the top element from the stack and check if it matches the closing bracket.\n            char top = brackets.top();\n            brackets.pop();\n            if ((c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{')) {\n                return false;\n            }\n        }\n    }\n\n    // Check if the stack is empty.\n    if (!brackets.empty()) {\n        return false;\n    }\n\n    return true;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/454",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that matches a word containing 'z'.\nbool text_match_wordz(std::string text) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = text_match_wordz;\n    assert(candidate((\"pythonz.\")) == (true));\n    assert(candidate((\"xyz.\")) == (true));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Iterate through each character in the given string\n    # Check if the current character is 'z' or 'Z'\n        # If it is, check if the next character is a letter or the end of the string\n            # If it is, return true\n# If no match is found, return false"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that matches a word containing 'z'.\nbool text_match_wordz(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == 'z' || text[i] == 'Z') {\n            if (isalpha(text[i+1]) || i+1 == text.length()) {\n                return true;\n            }\n        }\n    }\n    return false;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/728",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function takes as input two vectors [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nstd::vector<long> sum_list(std::vector<long> lst1, std::vector<long> lst2) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = sum_list;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)30})), (std::vector<long>({(long)15, (long)25, (long)35}))) == (std::vector<long>({(long)25, (long)45, (long)65})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (std::vector<long>({(long)5, (long)6, (long)7}))) == (std::vector<long>({(long)6, (long)8, (long)10})));\n    assert(candidate((std::vector<long>({(long)15, (long)20, (long)30})), (std::vector<long>({(long)15, (long)45, (long)75}))) == (std::vector<long>({(long)30, (long)65, (long)105})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function that takes two vectors as input.\n# Create an empty vector to store the sums.\n# Iterate over the elements in the input vectors using a loop.\n    # Add the corresponding elements from both vectors and store the sum in the result vector.\n# Return the result vector containing the element-wise sums."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function takes as input two vectors [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nstd::vector<long> sum_list(std::vector<long> lst1, std::vector<long> lst2) {\n    assert(lst1.size() == lst2.size());\n\n    std::vector<long> result;\n    for (int i = 0; i < lst1.size(); i++) {\n        result.push_back(lst1[i] + lst2[i]);\n    }\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/260",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth newman\u2013shanks\u2013williams prime number.\nlong newman_prime(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = newman_prime;\n    assert(candidate((3)) == (7));\n    assert(candidate((4)) == (17));\n    assert(candidate((5)) == (41));\n}\n"
        ],
        "draft_plan": [
            "# Define a helper function to check if a number is prime.\n# Initialize a counter for the number of newman\u2013shanks\u2013williams prime numbers found.\n# Initialize a variable to store the current number being checked.\n# Iterate while the counter is less than or equal to n.\n    # Check if the current number is a newman\u2013shanks\u2013williams prime number.\n        # If it is, increment the counter.\n    # Increment the current number.\n# Return the last newman\u2013shanks\u2013williams prime number found."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Helper function to check if a number is prime.\nbool is_prime(long num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (long i = 2; i * i <= num; i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Write a function to find the nth newman\u2013shanks\u2013williams prime number.\nlong newman_prime(long n) {\n    int count = 0;\n    long num = 0;\n\n    while (count <= n) {\n        num++;\n        if (is_prime(num) && is_prime(pow(2, num) - 1)) {\n            count++;\n        }\n    }\n\n    return num;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/390",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to apply a given format string to all of the elements in a vector.\nstd::vector<std::string> add_string(std::vector<std::any> list_, std::string string) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = add_string;\n    assert(candidate((std::vector<std::any>({(long)1, (long)2, (long)3, (long)4})), (\"temp{0}\")) == (std::vector<std::string>({(std::string)\"temp1\", (std::string)\"temp2\", (std::string)\"temp3\", (std::string)\"temp4\"})));\n    assert(candidate((std::vector<std::any>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\"})), (\"python{0}\")) == (std::vector<std::string>({(std::string)\"pythona\", (std::string)\"pythonb\", (std::string)\"pythonc\", (std::string)\"pythond\"})));\n    assert(candidate((std::vector<std::any>({(long)5, (long)6, (long)7, (long)8})), (\"string{0}\")) == (std::vector<std::string>({(std::string)\"string5\", (std::string)\"string6\", (std::string)\"string7\", (std::string)\"string8\"})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to apply a given format string to all elements in a vector.\n# Create an empty vector to store the formatted strings.\n# Iterate over each element in the input vector.\n    # Convert the element to a string.\n    # Apply the given format string to the element.\n    # Append the formatted string to the result vector.\n# Return the vector of formatted strings."
        ],
        "code": [
            "#include <cassert>\n#include <iostream>\n#include <sstream>\n#include <vector>\n#include <any>\n\n// Write a function to apply a given format string to all elements in a vector.\nstd::vector<std::string> add_string(std::vector<std::any> list_, std::string format_string) {\n    std::vector<std::string> result;\n\n    // Iterate over each element in the input vector.\n    for (const auto& element : list_) {\n        // Convert the element to a string.\n        std::stringstream ss;\n        ss << element;\n        std::string str = ss.str();\n\n        // Apply the given format string to the element.\n        std::string formatted_string = format_string + str;\n\n        // Append the formatted string to the result vector.\n        result.push_back(formatted_string);\n    }\n\n    // Return the vector of formatted strings.\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/581",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the surface area of a square cppramid with a given base edge and height.\nlong surface_Area(long b, long s) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = surface_Area;\n    assert(candidate((3), (4)) == (33));\n    assert(candidate((4), (5)) == (56));\n    assert(candidate((1), (2)) == (5));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to calculate the surface area of a square pyramid.\n# Calculate the area of the base by squaring the given base edge.\n# Calculate the area of each triangular face by multiplying the base edge by the slant height and dividing by 2.\n# Multiply the area of each triangular face by 4, as there are 4 triangular faces in a square pyramid.\n# Sum the area of the base and the area of the 4 triangular faces to get the total surface area.\n# Return the total surface area."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the surface area of a square pyramid with a given base edge and height.\nlong surface_Area(long b, long s) {\n    long base_area = b * b;\n    long triangular_area = (b * s) / 2;\n    long total_area = base_area + (4 * triangular_area);\n    return total_area;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/95",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the length of the smallest vector in a vector of vectors.\nlong Find_Min_Length(std::vector<std::vector<long>> lst) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = Find_Min_Length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2})}))) == (1));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4})}))) == (2));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)3, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)4, (long)4, (long)4})}))) == (3));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the length of the smallest vector in a vector of vectors.\n# Initialize a variable min_length to a very large value.\n# Iterate over each vector in the input vector of vectors.\n    # Get the length of the current vector.\n    # If the length is smaller than min_length, update min_length to the current length.\n# Return min_length."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the length of the smallest vector in a vector of vectors.\nlong Find_Min_Length(std::vector<std::vector<long>> lst) {\n    long min_length = INT_MAX;\n\n    // Iterate over each vector in the input vector of vectors.\n    for (const auto& vec : lst) {\n        // Get the length of the current vector.\n        long length = vec.size();\n        // If the length is smaller than min_length, update min_length to the current length.\n        if (length < min_length) {\n            min_length = length;\n        }\n    }\n\n    return min_length;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/283",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Convert the given integer into a string.\n# Create a map to store the frequency of each digit.\n# Iterate through each character in the string.\n    # Convert the character back into an integer.\n    # Increment the frequency of that digit in the map.\n# Iterate through each digit in the map.\n    # Check if the frequency of the digit is greater than the digit itself.\n        # If it is, return false.\n# If all frequencies are less than or equal to their respective digits, return true."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    std::string numStr = std::to_string(n);\n    std::unordered_map<char, int> digitFreq;\n\n    for (char digit : numStr) {\n        digitFreq[digit]++;\n    }\n\n    for (const auto& pair : digitFreq) {\n        char digit = pair.first;\n        int freq = pair.second;\n\n        if (freq > (digit - '0')) {\n            return false;\n        }\n    }\n\n    return true;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/135",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth hexagonal number.\nlong hexagonal_num(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = hexagonal_num;\n    assert(candidate((10)) == (190));\n    assert(candidate((5)) == (45));\n    assert(candidate((7)) == (91));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the nth hexagonal number.\n# If n is less than or equal to 0, return 0.\n# Otherwise, use the formula for the nth hexagonal number: n(2n-1)\n# Return the result."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth hexagonal number.\nlong hexagonal_num(long n) {\n    if (n <= 0) {\n        return 0;\n    }\n    return n * (2 * n - 1);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/389",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the n'th lucas number.\nlong find_lucas(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find_lucas;\n    assert(candidate((9)) == (76));\n    assert(candidate((4)) == (7));\n    assert(candidate((3)) == (4));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the n'th lucas number.\n# Check for base cases:\n    # If n is 0, return 2 as the 0'th lucas number.\n    # If n is 1, return 1 as the 1'st lucas number.\n# Initialize two variables, prev1 and prev2, with values 2 and 1 respectively.\n# Iterate from 2 to n:\n    # Calculate the current lucas number by adding prev1 and prev2.\n    # Update prev1 with the value of prev2.\n    # Update prev2 with the value of the current lucas number.\n# Return the value of prev2 as the n'th lucas number."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the n'th lucas number.\nlong find_lucas(long n) {\n    if (n == 0) {\n        return 2;\n    }\n    if (n == 1) {\n        return 1;\n    }\n\n    long prev1 = 2;\n    long prev2 = 1;\n    long lucas = 0;\n\n    for (long i = 2; i <= n; i++) {\n        lucas = prev1 + prev2;\n        prev1 = prev2;\n        prev2 = lucas;\n    }\n\n    return lucas;\n}\n"
        ]
    },
    {
        "id": "mbpp_cpp/769",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to get the difference between two vectors.\nstd::vector<long> Diff(std::vector<long> li1, std::vector<long> li2) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = Diff;\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25, (long)30, (long)35, (long)40})), (std::vector<long>({(long)25, (long)40, (long)35}))) == (std::vector<long>({(long)10, (long)20, (long)30, (long)15})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::vector<long>({(long)6, (long)7, (long)1}))) == (std::vector<long>({(long)2, (long)3, (long)4, (long)5, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (std::vector<long>({(long)6, (long)7, (long)1}))) == (std::vector<long>({(long)2, (long)3, (long)6, (long)7})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to get the difference between two vectors.\n# Create an empty vector to store the difference.\n# Iterate over each element in the first vector.\n    # Check if the element is present in the second vector.\n        # If it is not present, add it to the difference vector.\n# Return the difference vector."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to get the difference between two vectors.\nstd::vector<long> Diff(std::vector<long> li1, std::vector<long> li2) {\n    std::vector<long> difference;\n\n    // Iterate over each element in the first vector.\n    for (const auto& element : li1) {\n        // Check if the element is present in the second vector.\n        if (std::find(li2.begin(), li2.end(), element) == li2.end()) {\n            // If it is not present, add it to the difference vector.\n            difference.push_back(element);\n        }\n    }\n\n    return difference;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/725",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract values between quotation marks \" \" of the given string.\nstd::vector<std::any> extract_quotation(std::string text1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = extract_quotation;\n    assert(candidate((\"Cortex \"A53\" Based \"multi\" tasking \"Processor\"\")) == (std::vector<std::any>({(std::string)\"A53\", (std::string)\"multi\", (std::string)\"Processor\"})));\n    assert(candidate((\"Cast your \"favorite\" entertainment \"apps\"\")) == (std::vector<std::any>({(std::string)\"favorite\", (std::string)\"apps\"})));\n    assert(candidate((\"Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support\")) == (std::vector<std::any>({(std::string)\"4k Ultra HD\", (std::string)\"HDR 10\"})));\n    assert(candidate((\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\")) == (std::vector<std::any>()));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to extract values between quotation marks from a string.\n# Initialize an empty vector to store the extracted values.\n# Initialize two pointers, start and end, to track the positions of the quotation marks.\n# Iterate through the string character by character.\n    # Check if the current character is a quotation mark.\n        # If it is, update the start pointer if it is not set, and update the end pointer if it is set.\n        # If both start and end pointers are set, extract the substring between the quotation marks and add it to the vector.\n            # Convert the extracted substring to the appropriate data type if necessary.\n            # Reset the start and end pointers to null.\n# Return the vector containing the extracted values."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract values between quotation marks \" \" of the given string.\nstd::vector<std::any> extract_quotation(std::string text1) {\n    std::vector<std::any> extracted_values;\n    std::string::size_type start = std::string::npos;\n    std::string::size_type end = std::string::npos;\n\n    for (std::string::size_type i = 0; i < text1.size(); i++) {\n        if (text1[i] == '\\\"') {\n            if (start == std::string::npos) {\n                start = i;\n            } else {\n                end = i;\n                std::string extracted_value = text1.substr(start + 1, end - start - 1);\n                extracted_values.push_back(extracted_value);\n                start = std::string::npos;\n                end = std::string::npos;\n            }\n        }\n    }\n\n    return extracted_values;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/65",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to recursively flatten a vector and sum all of its elements.\n# Initialize a variable to store the sum of the elements.\n# Iterate over the input list.\n    # Check the type of the current element in the list.\n        # If it is a single long value, add it to the sum.\n        # If it is a vector, recursively call the function on that vector and add the returned sum to the total sum.\n# Return the total sum of all elements in the flattened vector."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_ {\n    long f0;\n    std::vector<long> f1;\n    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f;\n    }\n    bool operator==(std::vector<long> f) {\n        return f1 == f;\n    }\n};\n\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    \n    // Iterate over the data_list\n    for (const auto& data : data_list) {\n        if (data.f0) {\n            sum += data.f0; // If it is a single long value, add it to the sum.\n        } else {\n            sum += recursive_list_sum(data.f1); // If it is a vector, recursively call the function and add the returned sum.\n        }\n    }\n    \n    return sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/6",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the two numbers differ at one bit position only or not.\nbool differ_At_One_Bit_Pos(long a, long b) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = differ_At_One_Bit_Pos;\n    assert(candidate((13), (9)) == (true));\n    assert(candidate((15), (8)) == (false));\n    assert(candidate((2), (4)) == (false));\n    assert(candidate((2), (3)) == (true));\n    assert(candidate((5), (1)) == (true));\n    assert(candidate((1), (5)) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Convert the two numbers to binary strings.\n# If the lengths of the binary strings are not equal, return False.\n# Initialize a counter for the number of different bit positions.\n# Iterate over the characters of the binary strings.\n    # If the characters at the same position are different, increment the counter.\n    # If the counter is greater than 1, return False.\n# If the counter is equal to 1, return True. Otherwise, return False."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to check whether the two numbers differ at one bit position only or not.\nbool differ_At_One_Bit_Pos(long a, long b) {\n    std::bitset<64> binaryA(a);\n    std::bitset<64> binaryB(b);\n\n    if (binaryA.size() != binaryB.size()) {\n        return false;\n    }\n\n    int count = 0;\n    for (int i = 0; i < binaryA.size(); i++) {\n        if (binaryA[i] != binaryB[i]) {\n            count++;\n            if (count > 1) {\n                return false;\n            }\n        }\n    }\n\n    return count == 1;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/787",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that matches a string that has an a followed by three 'b'.\nbool text_match_three(std::string text) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = text_match_three;\n    assert(candidate((\"ac\")) == (false));\n    assert(candidate((\"dc\")) == (false));\n    assert(candidate((\"abbbba\")) == (true));\n    assert(candidate((\"caacabbbba\")) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Iterate through each character in the given string starting from the second character.\n    # Check if the current character is 'b' and the previous character is 'a'\n        # If it is, continue iterating and check if the next three characters are also 'b'\n            # If they are, return true\n# If no match is found, return false"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that matches a string that has an 'a' followed by three 'b'.\nbool text_match_three(std::string text) {\n    int n = text.size();\n    \n    for (int i = 1; i < n - 3; i++) {\n        if (text[i - 1] == 'a' && text[i] == 'b' && text[i + 1] == 'b' && text[i + 2] == 'b') {\n            return true;\n        }\n    }\n    \n    return false;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/468",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nlong max_product(std::vector<long> arr) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = max_product;\n    assert(candidate((std::vector<long>({(long)3, (long)100, (long)4, (long)5, (long)150, (long)6}))) == (3000));\n    assert(candidate((std::vector<long>({(long)4, (long)42, (long)55, (long)68, (long)80}))) == (50265600));\n    assert(candidate((std::vector<long>({(long)10, (long)22, (long)9, (long)33, (long)21, (long)50, (long)41, (long)60}))) == (2460));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the maximum product of an increasing subsequence.\n# Initialize a variable to store the maximum product.\n# Iterate over the input array.\n    # Initialize a variable to store the current product.\n    # Iterate over all the previous elements of the array.\n        # If the current element is greater than the previous element, update the current product by multiplying it with the previous element.\n    # Update the maximum product if the current product is greater than the maximum product.\n# Return the maximum product."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nlong max_product(std::vector<long> arr) {\n    long maxProd = 0;\n\n    // Iterate over the input array\n    for (int i = 0; i < arr.size(); i++) {\n        long currProd = arr[i];\n\n        // Iterate over all the previous elements of the array\n        for (int j = 0; j < i; j++) {\n            // If the current element is greater than the previous element,\n            // update the current product by multiplying it with the previous element\n            if (arr[i] > arr[j]) {\n                currProd *= arr[j];\n            }\n        }\n\n        // Update the maximum product if the current product is greater\n        if (currProd > maxProd) {\n            maxProd = currProd;\n        }\n    }\n\n    return maxProd;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/586",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to split a vector at the nth eelment and add the first part to the end.\nstd::vector<long> split_Arr(std::vector<long> l, long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = split_Arr;\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)5, (long)6, (long)52, (long)36})), (2)) == (std::vector<long>({(long)5, (long)6, (long)52, (long)36, (long)12, (long)10})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (1)) == (std::vector<long>({(long)2, (long)3, (long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})), (3)) == (std::vector<long>({(long)3, (long)4, (long)5, (long)6, (long)7, (long)0, (long)1, (long)2})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to split a vector at the nth element and add the first part to the end.\n# Create a new vector to store the result.\n# Check if the given vector is empty or if the value of n is out of range.\n    # If either condition is true, return the original vector as it is.\n# Iterate over the elements in the given vector starting from index n.\n    # Add each element to the new vector.\n# Iterate over the elements in the given vector from index 0 to n-1.\n    # Add each element to the new vector.\n# Return the new vector."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to split a vector at the nth element and add the first part to the end.\nstd::vector<long> split_Arr(std::vector<long> l, long n) {\n    std::vector<long> result;\n\n    // Check if the given vector is empty or if n is out of range\n    if (l.empty() || n < 0 || n >= l.size()) {\n        return l;\n    }\n\n    // Iterate over the elements starting from index n and add them to the result vector\n    for (long i = n; i < l.size(); i++) {\n        result.push_back(l[i]);\n    }\n\n    // Iterate over the elements from index 0 to n-1 and add them to the result vector\n    for (long i = 0; i < n; i++) {\n        result.push_back(l[i]);\n    }\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/96",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the number of divisors of a given integer.\nlong divisor(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = divisor;\n    assert(candidate((15)) == (4));\n    assert(candidate((12)) == (6));\n    assert(candidate((9)) == (3));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the number of divisors of a given integer.\n# Initialize a variable to count the number of divisors.\n# Iterate from 1 to the square root of the given integer.\n    # Check if the current number is a divisor of the given integer.\n        # If it is, increment the count of divisors by 2.\n# Check if the square root of the given integer is an integer.\n    # If it is, decrement the count of divisors by 1.\n# Return the count of divisors."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the number of divisors of a given integer.\nlong divisor(long n) {\n    long count = 0;\n    for (long i = 1; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            count += 2;\n        }\n    }\n    if (sqrt(n) == floor(sqrt(n))) {\n        count--;\n    }\n    return count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/588",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the difference between largest and smallest value in a given vector.\nlong big_diff(std::vector<long> nums) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = big_diff;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)12}))) == (8));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)3}))) == (7));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the difference between the largest and smallest values in a given vector.\n# Initialize variables to store the maximum and minimum values. Set both to the first element in the vector.\n# Iterate over the vector starting from the second element.\n    # If the current element is larger than the maximum value, update the maximum value.\n    # If the current element is smaller than the minimum value, update the minimum value.\n# Calculate the difference between the maximum and minimum values.\n# Return the difference."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to find the difference between the largest and smallest values in a given vector.\nlong big_diff(std::vector<long> nums) {\n    assert(nums.size() > 0);\n\n    long max_val = nums[0];\n    long min_val = nums[0];\n\n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] > max_val) {\n            max_val = nums[i];\n        }\n        if (nums[i] < min_val) {\n            min_val = nums[i];\n        }\n    }\n\n    return max_val - min_val;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/8",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find squares of individual elements in a vector.\nstd::vector<long> square_nums(std::vector<long> nums) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = square_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25, (long)36, (long)49, (long)64, (long)81, (long)100})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)30}))) == (std::vector<long>({(long)100, (long)400, (long)900})));\n    assert(candidate((std::vector<long>({(long)12, (long)15}))) == (std::vector<long>({(long)144, (long)225})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find squares of individual elements in a vector.\n# Create an empty vector to store the squared numbers.\n# Iterate over the input vector.\n    # Square each element and add it to the new vector.\n# Return the new vector containing the squared numbers."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find squares of individual elements in a vector.\nstd::vector<long> square_nums(std::vector<long> nums) {\n    std::vector<long> result;\n    \n    // Iterate over the input vector and square each element\n    for (const auto& num : nums) {\n        result.push_back(num * num);\n    }\n    \n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/744",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if the given tuple has any none value or not.\nbool check_none(std::any test_tup) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = check_none;\n    assert(candidate(std::make_tuple(std::optional<long>(10), std::optional<long>(4), std::optional<long>(5), std::optional<long>(6), std::optional<long>(std::nullopt))) == (true));\n    assert(candidate(std::make_tuple(7, 8, 9, 11, 14)) == (false));\n    assert(candidate(std::make_tuple(std::optional<long>(1), std::optional<long>(2), std::optional<long>(3), std::optional<long>(4), std::optional<long>(std::nullopt))) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Convert the given tuple to a vector using std::any_cast.\n# Iterate over each element in the vector.\n    # Check if the element is of type std::nullopt.\n        # If it is, return true (indicating that the tuple contains a None value).\n# If no None value is found, return false."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if the given tuple has any none value or not.\nbool check_none(std::any test_tup) {\n    // Convert the given tuple to a vector\n    std::vector<std::any> elements = std::any_cast<std::vector<std::any>>(test_tup);\n\n    // Iterate over each element in the vector\n    for (const auto& element : elements) {\n        // Check if the element is of type std::nullopt\n        if (element.type() == typeid(std::nullopt)) {\n            return true;\n        }\n    }\n\n    // If no None value is found, return false\n    return false;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/68",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check whether the given vector is monotonic or not.\n# Initialize two boolean variables to track the monotonicity of the vector.\n    # Initialize `isIncreasing` as true to track increasing monotonicity.\n    # Initialize `isDecreasing` as true to track decreasing monotonicity.\n# Iterate over the vector starting from the second element.\n    # Check if the current element is greater than the previous element.\n        # If it is, set `isDecreasing` as false.\n    # Check if the current element is less than the previous element.\n        # If it is, set `isIncreasing` as false.\n# Check if either `isIncreasing` or `isDecreasing` is true.\n    # If it is, return true.\n# If neither `isIncreasing` nor `isDecreasing` is true, return false."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool isIncreasing = true;\n    bool isDecreasing = true;\n\n    for (int i = 1; i < A.size(); i++) {\n        if (A[i] > A[i - 1]) {\n            isDecreasing = false;\n        }\n        if (A[i] < A[i - 1]) {\n            isIncreasing = false;\n        }\n    }\n\n    return isIncreasing || isDecreasing;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/803",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nbool is_perfect_square(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = is_perfect_square;\n    assert(candidate((10)) == (false));\n    assert(candidate((36)) == (true));\n    assert(candidate((14)) == (false));\n    assert(candidate((196)) == (true));\n    assert(candidate((125)) == (false));\n    assert(candidate((15625)) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Check if the given number is less than 0\n    # If it is, return false since negative numbers cannot be perfect squares\n# Initialize two variables, start and end, with values 0 and n respectively\n# Use a loop to continue until start is less than or equal to end\n    # Calculate the middle value using the formula (start + end) / 2\n    # Calculate the square of the middle value\n    # Check if the square is equal to the given number\n        # If it is, return true since the number is a perfect square\n    # If the square is less than the given number, update start to be one more than the middle value\n    # If the square is greater than the given number, update end to be one less than the middle value\n# If the loop completes without finding a perfect square, return false"
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to check whether the given number is a perfect square or not.\nbool is_perfect_square(long n) {\n    // Check if the number is less than 0\n    if (n < 0) {\n        return false;\n    }\n\n    long start = 0;\n    long end = n;\n\n    while (start <= end) {\n        long mid = (start + end) / 2;\n        long square = mid * mid;\n\n        if (square == n) {\n            return true;\n        } else if (square < n) {\n            start = mid + 1;\n        } else {\n            end = mid - 1;\n        }\n    }\n\n    return false;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/126",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the sum of common divisors of two given numbers.\nlong sum(long a, long b) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = sum;\n    assert(candidate((10), (15)) == (6));\n    assert(candidate((100), (150)) == (93));\n    assert(candidate((4), (6)) == (3));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the sum of common divisors of two given numbers.\n# Initialize a variable to store the sum of common divisors.\n# Iterate from 1 to the minimum of the two input numbers.\n    # Check if both input numbers are divisible by the current number.\n        # If they are, add the current number to the sum of common divisors.\n# Return the sum of common divisors."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the sum of common divisors of two given numbers.\nlong sum(long a, long b) {\n    long sum = 0;\n    for (long i = 1; i <= std::min(a, b); i++) {\n        if (a % i == 0 && b % i == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/290",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the vector of maximum length in a vector of vectors.\nstd::tuple<long, std::vector<long>> max_length(std::vector<std::vector<long>> list1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == (std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17}))));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == (std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15}))));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == (std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25}))));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the vector of maximum length in a vector of vectors.\n# Initialize a variable to keep track of the maximum length found so far.\n# Initialize an empty vector to store the vector of maximum length.\n# Iterate over the input vector of vectors.\n    # Check the length of each vector.\n    # If the length is greater than the current maximum length, update the maximum length and store the vector.\n# Return a tuple containing the maximum length and the vector of maximum length."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the vector of maximum length in a vector of vectors.\nstd::tuple<long, std::vector<long>> max_length(std::vector<std::vector<long>> list1) {\n    long max_len = 0;\n    std::vector<long> max_vec;\n\n    // Iterate over the vector of vectors\n    for (const auto& vec : list1) {\n        // Check the length of each vector\n        if (vec.size() > max_len) {\n            max_len = vec.size();\n            max_vec = vec;\n        }\n    }\n\n    return std::make_tuple(max_len, max_vec);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/237",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector of tuples and returns a map mapping each unique tuple to the number of times it occurs in the vector.\nstd::map<std::tuple<long, long>,long> check_occurences(std::vector<std::tuple<long, long>> test_list) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = check_occurences;\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(3, 1), (std::tuple<long, long>)std::make_tuple(1, 3), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(5, 2), (std::tuple<long, long>)std::make_tuple(6, 3)}))) == (std::map<std::tuple<long, long>,long>({{std::make_tuple(1, 3), 2}, {std::make_tuple(2, 5), 2}, {std::make_tuple(3, 6), 1}})));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(4, 2), (std::tuple<long, long>)std::make_tuple(2, 4), (std::tuple<long, long>)std::make_tuple(3, 6), (std::tuple<long, long>)std::make_tuple(6, 3), (std::tuple<long, long>)std::make_tuple(7, 4)}))) == (std::map<std::tuple<long, long>,long>({{std::make_tuple(2, 4), 2}, {std::make_tuple(3, 6), 2}, {std::make_tuple(4, 7), 1}})));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(13, 2), (std::tuple<long, long>)std::make_tuple(11, 23), (std::tuple<long, long>)std::make_tuple(12, 25), (std::tuple<long, long>)std::make_tuple(25, 12), (std::tuple<long, long>)std::make_tuple(16, 23)}))) == (std::map<std::tuple<long, long>,long>({{std::make_tuple(2, 13), 1}, {std::make_tuple(11, 23), 1}, {std::make_tuple(12, 25), 2}, {std::make_tuple(16, 23), 1}})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check occurrences of tuples.\n# Create a map to store each unique tuple and its occurrence count.\n# Iterate over the input vector of tuples.\n    # Check if the current tuple exists in the map.\n        # If it does, increment its occurrence count.\n        # If it doesn't, add it to the map with an initial occurrence count of 1.\n# Return the map containing the unique tuples and their occurrence counts."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector of tuples and returns a map mapping each unique tuple to the number of times it occurs in the vector.\nstd::map<std::tuple<long, long>, long> check_occurrences(std::vector<std::tuple<long, long>> test_list) {\n    std::map<std::tuple<long, long>, long> occurrences;\n\n    // Iterate over the test_list to check the occurrences of tuples.\n    for (const auto& tup : test_list) {\n        occurrences[tup]++;\n    }\n\n    return occurrences;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/430",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the directrix of a parabola.\nlong parabola_directrix(long a, long b, long c) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = parabola_directrix;\n    assert(candidate((5), (3), (2)) == (-198));\n    assert(candidate((9), (8), (4)) == (-2336));\n    assert(candidate((2), (4), (6)) == (-130));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the directrix of a parabola.\n# Calculate the coefficient of x^2, which is 'a' in the parabola equation.\n# Calculate the coefficient of x, which is 'b' in the parabola equation.\n# Calculate the constant term, which is 'c' in the parabola equation.\n# Calculate the value of the directrix using the formula: -b / (2*a)\n# Return the value of the directrix."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the directrix of a parabola.\nlong parabola_directrix(long a, long b, long c) {\n    double directrix = -b / (2.0 * a);\n    return directrix;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/773",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nstd::optional<std::tuple<std::string, long, long>> occurance_substring(std::string text, std::string pattern) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = occurance_substring;\n    assert(candidate((\"python programming, python language\"), (\"python\")) == std::make_tuple(\"python\", 0, 6));\n    assert(candidate((\"python programming,programming language\"), (\"programming\")) == std::make_tuple(\"programming\", 7, 18));\n    assert(candidate((\"python programming,programming language\"), (\"language\")) == std::make_tuple(\"language\", 31, 39));\n    assert(candidate((\"c++ programming, c++ language\"), (\"python\")) == std::nullopt);\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the occurrence and position of substrings within a string.\n# Initialize variables to store the occurrence count and position.\n# Iterate over the string, checking each substring of length equal to the pattern.\n    # If the substring matches the pattern, increment the occurrence count and store the position.\n# If the occurrence count is greater than 0, return a tuple containing the pattern, occurrence count, and position.\n# If no match is found, return None."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nstd::optional<std::tuple<std::string, long, long>> occurance_substring(std::string text, std::string pattern) {\n    long occurrence_count = 0;\n    long position = -1;\n\n    // Iterate over the string to find the occurrences.\n    for (long i = 0; i <= text.size() - pattern.size(); i++) {\n        std::string substring = text.substr(i, pattern.size());\n        if (substring == pattern) {\n            occurrence_count++;\n            if (position == -1) {\n                position = i;\n            }\n        }\n    }\n\n    // Check if any occurrences were found.\n    if (occurrence_count > 0) {\n        return std::make_tuple(pattern, occurrence_count, position);\n    } else {\n        return std::nullopt;\n    }\n}\n"
        ]
    },
    {
        "id": "mbpp_cpp/791",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove tuples from the given tuple.\nstd::tuple<long, long, long, long> remove_nested(std::any test_tup) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = remove_nested;\n    assert(candidate(std::make_tuple(1, 5, 7, std::make_tuple(4, 6), 10)) == (std::make_tuple(1, 5, 7, 10)));\n    assert(candidate(std::make_tuple(2, 6, 8, std::make_tuple(5, 7), 11)) == (std::make_tuple(2, 6, 8, 11)));\n    assert(candidate(std::make_tuple(3, 7, 9, std::make_tuple(6, 8), 12)) == (std::make_tuple(3, 7, 9, 12)));\n    assert(candidate(std::make_tuple(3, 7, 9, std::make_tuple(6, 8), std::make_tuple(5, 12), 12)) == (std::make_tuple(3, 7, 9, 12)));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to remove tuples from the given tuple.\n# Create an empty list to store non-tuple elements.\n# Iterate over each element in the given tuple.\n    # Check if the current element is a tuple.\n        # If it is not a tuple, add it to the list.\n# Convert the list to a tuple and return it."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to remove tuples from the given tuple.\nstd::tuple<long, long, long, long> remove_nested(std::any test_tup) {\n    std::vector<long> elements;\n\n    // Iterate over each element in the given tuple.\n    for (const auto& element : test_tup) {\n        // Check if the current element is a tuple.\n        if (std::any_cast<std::tuple<long, long, long, long>>(&element) == nullptr) {\n            // If it is not a tuple, add it to the list.\n            elements.push_back(std::any_cast<long>(element));\n        }\n    }\n\n    // Convert the list to a tuple and return it.\n    return std::make_tuple(elements[0], elements[1], elements[2], elements[3]);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/104",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort each subvector of strings in a given vector of vectors.\nstd::vector<std::vector<std::string>> sort_sublists(std::vector<std::vector<std::string>> input_list) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = sort_sublists;\n    assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"green\", (std::string)\"orange\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"black\", (std::string)\"white\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"white\", (std::string)\"black\", (std::string)\"orange\"})}))) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"green\", (std::string)\"orange\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"black\", (std::string)\"white\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"black\", (std::string)\"orange\", (std::string)\"white\"})})));\n    assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\" red \", (std::string)\"green\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"blue \", (std::string)\" black\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\" orange\", (std::string)\"brown\"})}))) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\" red \", (std::string)\"green\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\" black\", (std::string)\"blue \"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\" orange\", (std::string)\"brown\"})})));\n    assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"zilver\", (std::string)\"gold\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"magnesium\", (std::string)\"aluminium\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"steel\", (std::string)\"bronze\"})}))) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"gold\", (std::string)\"zilver\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"aluminium\", (std::string)\"magnesium\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"bronze\", (std::string)\"steel\"})})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to sort each subvector of strings in a given vector of vectors.\n# Iterate over each subvector in the input vector.\n    # Sort the subvector using the std::sort function.\n# Return the modified input vector with sorted subvectors."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort each subvector of strings in a given vector of vectors.\nstd::vector<std::vector<std::string>> sort_sublists(std::vector<std::vector<std::string>> input_list) {\n    for (auto& sublist : input_list) {\n        std::sort(sublist.begin(), sublist.end());\n    }\n    return input_list;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/610",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function which takes a vector and returns a vector with the same elements, but the k'th element removed.\nstd::vector<long> remove_kth_element(std::vector<long> list1, long L) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = remove_kth_element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)3, (long)4, (long)4, (long)5, (long)1})), (3)) == (std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)4, (long)5, (long)1})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)1, (long)2, (long)3, (long)4, (long)4, (long)5, (long)6, (long)6, (long)6, (long)7, (long)8, (long)9, (long)4, (long)4})), (4)) == (std::vector<long>({(long)0, (long)0, (long)1, (long)3, (long)4, (long)4, (long)5, (long)6, (long)6, (long)6, (long)7, (long)8, (long)9, (long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)10, (long)10, (long)15, (long)19, (long)18, (long)18, (long)17, (long)26, (long)26, (long)17, (long)18, (long)10})), (5)) == (std::vector<long>({(long)10, (long)10, (long)15, (long)19, (long)18, (long)17, (long)26, (long)26, (long)17, (long)18, (long)10})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to remove the kth element from a vector.\n# Create a new vector to store the modified elements.\n# Iterate over the input vector.\n    # Check if the current index is equal to L-1 (since indices start from 0).\n        # If it is, skip adding the element to the new vector.\n        # If it is not, add the element to the new vector.\n# Return the new vector without the kth element."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function which takes a vector and returns a vector with the same elements, but the k'th element removed.\nstd::vector<long> remove_kth_element(std::vector<long> list1, long L) {\n    std::vector<long> result;\n    for (long i = 0; i < list1.size(); i++) {\n        if (i == L-1) {\n            continue;\n        }\n        result.push_back(list1[i]);\n    }\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/720",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to add a map to the tuple. The output should be a tuple.\nstd::tuple<long, long, long, std::map<std::string,long>> add_dict_to_tuple(std::tuple<long, long, long> test_tup, std::map<std::string,long> test_dict) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = add_dict_to_tuple;\n    assert(candidate((std::make_tuple(4, 5, 6)), (std::map<std::string,long>({{\"MSAM\", 1}, {\"is\", 2}, {\"best\", 3}}))) == (std::make_tuple(4, 5, 6, std::map<std::string,long>({{\"MSAM\", 1}, {\"is\", 2}, {\"best\", 3}}))));\n    assert(candidate((std::make_tuple(1, 2, 3)), (std::map<std::string,long>({{\"UTS\", 2}, {\"is\", 3}, {\"Worst\", 4}}))) == (std::make_tuple(1, 2, 3, std::map<std::string,long>({{\"UTS\", 2}, {\"is\", 3}, {\"Worst\", 4}}))));\n    assert(candidate((std::make_tuple(8, 9, 10)), (std::map<std::string,long>({{\"POS\", 3}, {\"is\", 4}, {\"Okay\", 5}}))) == (std::make_tuple(8, 9, 10, std::map<std::string,long>({{\"POS\", 3}, {\"is\", 4}, {\"Okay\", 5}}))));\n}\n"
        ],
        "draft_plan": [
            "# Create a new tuple with the original elements from the input tuple and the map.\n# Return the new tuple."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to add a map to the tuple. The output should be a tuple.\nstd::tuple<long, long, long, std::map<std::string,long>> add_dict_to_tuple(std::tuple<long, long, long> test_tup, std::map<std::string,long> test_dict) {\n    long a = std::get<0>(test_tup);\n    long b = std::get<1>(test_tup);\n    long c = std::get<2>(test_tup);\n\n    std::tuple<long, long, long, std::map<std::string,long>> result_tuple(a, b, c, test_dict);\n    return result_tuple;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/292",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find quotient of two numbers (rounded down to the nearest integer).\nlong find(long n, long m) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find;\n    assert(candidate((10), (3)) == (3));\n    assert(candidate((4), (2)) == (2));\n    assert(candidate((20), (5)) == (4));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the quotient of two numbers.\n# Divide the first number by the second number.\n# Use integer division to round down the result to the nearest integer.\n# Return the rounded down quotient."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find quotient of two numbers (rounded down to the nearest integer).\nlong find(long n, long m) {\n    return n / m;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/285",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nbool text_match_two_three(std::string text) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = text_match_two_three;\n    assert(candidate((\"ac\")) == (false));\n    assert(candidate((\"dc\")) == (false));\n    assert(candidate((\"abbbba\")) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check if a string contains the pattern 'abb' or 'abbb'.\n# Iterate over the characters in the string up to the second-to-last character.\n    # Check if the current character is 'a' and the next two characters are 'b'.\n        # If the condition is met, return true.\n# Return false if the pattern is not found in the string."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nbool text_match_two_three(std::string text) {\n    for (int i = 0; i < text.length() - 2; i++) {\n        if (text[i] == 'a' && text[i+1] == 'b' && (text[i+2] == 'b' || text[i+2] == 'b')) {\n            return true;\n        }\n    }\n    return false;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/446",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the occurence of all elements of vector in a tuple.\nlong count_Occurrence(std::any tup, std::vector<std::any> lst) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = count_Occurrence;\n    assert(candidate(std::make_tuple(\"a\", \"a\", \"c\", \"b\", \"d\"), (std::vector<std::any>({(std::string)\"a\", (std::string)\"b\"}))) == (3));\n    assert(candidate(std::make_tuple(1, 2, 3, 1, 4, 6, 7, 1, 4), (std::vector<std::any>({(long)1, (long)4, (long)7}))) == (6));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6), (std::vector<std::any>({(long)1, (long)2}))) == (2));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count the occurrence of elements in a tuple.\n# Initialize a map to store the counts of each element.\n# Iterate over the elements in the tuple.\n    # Check if the current element exists in the map.\n        # If it does, increment its count.\n        # If it doesn't, add it to the map with a count of 1.\n# Initialize a variable to store the total count.\n# Iterate over the elements in the vector.\n    # Check if the current element exists in the map.\n        # If it does, add its count to the total count.\n# Return the total count."
        ],
        "code": [
            "#include <cassert>\n#include <iostream>\n#include <map>\n#include <vector>\n#include <any>\n\n// Write a function to count the occurrence of elements in a tuple.\nlong count_Occurrence(std::any tup, std::vector<std::any> lst) {\n    std::map<std::any, int> countMap;\n    \n    // Iterate over the elements in the tuple\n    for (const auto& elem : std::any_cast<std::tuple<decltype(lst[0])>>(tup)) {\n        countMap[elem]++;\n    }\n\n    long totalCount = 0;\n    \n    // Iterate over the elements in the vector\n    for (const auto& elem : lst) {\n        if (countMap.count(elem) > 0) {\n            totalCount += countMap[elem];\n        }\n    }\n\n    return totalCount;\n}\n"
        ]
    },
    {
        "id": "mbpp_cpp/142",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count number items that are identical in the same position of three given vectors.\nlong count_samepair(std::vector<long> list1, std::vector<long> list2, std::vector<long> list3) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = count_samepair;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})), (std::vector<long>({(long)2, (long)2, (long)3, (long)1, (long)2, (long)6, (long)7, (long)9})), (std::vector<long>({(long)2, (long)1, (long)3, (long)1, (long)2, (long)6, (long)7, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})), (std::vector<long>({(long)2, (long)2, (long)3, (long)1, (long)2, (long)6, (long)7, (long)8})), (std::vector<long>({(long)2, (long)1, (long)3, (long)1, (long)2, (long)6, (long)7, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2, (long)6, (long)7, (long)8})), (std::vector<long>({(long)2, (long)2, (long)3, (long)1, (long)2, (long)6, (long)7, (long)8})), (std::vector<long>({(long)2, (long)1, (long)3, (long)1, (long)2, (long)6, (long)7, (long)8}))) == (5));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count the number of items that are identical in the same position of three given vectors.\n# Initialize a counter for the identical items.\n# Iterate over the indices of the vectors.\n    # Check if the item at the current index is identical in all three vectors.\n        # If it is, increment the counter.\n# Return the count of identical items."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count number items that are identical in the same position of three given vectors.\nlong count_samepair(std::vector<long> list1, std::vector<long> list2, std::vector<long> list3) {\n    assert(list1.size() == list2.size() && list1.size() == list3.size());\n\n    long identical_count = 0;\n\n    // Iterate over the indices of the vectors.\n    for (size_t i = 0; i < list1.size(); i++) {\n        // Check if the item at the current index is identical in all three vectors.\n        if (list1[i] == list2[i] && list2[i] == list3[i]) {\n            identical_count++;\n        }\n    }\n\n    return identical_count;\n}\n"
        ]
    },
    {
        "id": "mbpp_cpp/434",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that matches a string that has an a followed by one or more b's.\nbool text_match_one(std::string text) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = text_match_one;\n    assert(candidate((\"ac\")) == (false));\n    assert(candidate((\"dc\")) == (false));\n    assert(candidate((\"abba\")) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Iterate through each character in the given string.\n    # Check if the current character is 'a'.\n        # If it is, continue iterating to check if there is at least one 'b' following it.\n            # If there is, return true.\n    # If the iteration finishes without finding a match, return false."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that matches a string that has an a followed by one or more b's.\nbool text_match_one(std::string text) {\n    bool found_a = false;\n    bool found_b = false;\n\n    for (char ch : text) {\n        if (ch == 'a') {\n            found_a = true;\n        } else if (ch == 'b' && found_a) {\n            found_b = true;\n        } else {\n            found_a = false;\n            found_b = false;\n        }\n    }\n\n    return found_a && found_b;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/555",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nlong difference(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = difference;\n    assert(candidate((3)) == (30));\n    assert(candidate((5)) == (210));\n    assert(candidate((2)) == (6));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n# Calculate the sum of cubes of the first n natural numbers using the formula: sum_of_cubes = (n * (n + 1) / 2) ^ 2\n# Calculate the sum of the first n natural numbers using the formula: sum_of_numbers = (n * (n + 1)) / 2\n# Calculate the difference by subtracting the sum_of_numbers from the sum_of_cubes\n# Return the difference."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nlong difference(long n) {\n    long sum_of_cubes = (n * (n + 1) / 2) * (n * (n + 1) / 2);\n    long sum_of_numbers = (n * (n + 1)) / 2;\n    long difference = sum_of_cubes - sum_of_numbers;\n    return difference;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/557",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to toggle the case of all characters in a string.\nstd::string toggle_string(std::string string) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = toggle_string;\n    assert(candidate((\"Python\")) == (\"pYTHON\"));\n    assert(candidate((\"Pangram\")) == (\"pANGRAM\"));\n    assert(candidate((\"LIttLE\")) == (\"liTTle\"));\n}\n"
        ],
        "draft_plan": [
            "# Iterate through each character in the given string\n    # Check if the current character is uppercase or lowercase\n        # If it is uppercase, convert it to lowercase\n        # If it is lowercase, convert it to uppercase\n# Return the modified string with toggled cases of all characters"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to toggle the case of all characters in a string.\nstd::string toggle_string(std::string string) {\n    for (char& c : string) {\n        if (islower(c)) {\n            c = toupper(c);\n        } else if (isupper(c)) {\n            c = tolower(c);\n        }\n    }\n    return string;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/418",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element of a vector having maximum length.\nstd::vector<std::any> Find_Max(std::vector<std::vector<std::any>> lst) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = Find_Max;\n    assert(candidate((std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"A\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"B\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"B\", (std::string)\"C\"})}))) == (std::vector<std::any>({(std::string)\"A\", (std::string)\"B\", (std::string)\"C\"})));\n    assert(candidate((std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})}))) == (std::vector<std::any>({(long)1, (long)2, (long)3})));\n    assert(candidate((std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)5, (long)6, (long)1})}))) == (std::vector<std::any>({(long)1, (long)5, (long)6, (long)1})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the element of a vector having maximum length.\n# Initialize a variable to store the maximum length found so far.\n# Initialize a variable to store the element with the maximum length.\n# Iterate over the input vector.\n    # Check the length of each element.\n    # If the length is greater than the current maximum length, update the maximum length and the element with the maximum length.\n# Return the element with the maximum length."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element of a vector having maximum length.\nstd::vector<std::any> Find_Max(std::vector<std::vector<std::any>> lst) {\n    std::vector<std::any> max_element;\n    int max_length = 0;\n\n    // Iterate over the input vector.\n    for (const auto& element : lst) {\n        // Check the length of each element.\n        int length = element.size();\n        \n        // If the length is greater than the current maximum length, update the maximum length and the element with the maximum length.\n        if (length > max_length) {\n            max_length = length;\n            max_element = element;\n        }\n    }\n    \n    // Return the element with the maximum length.\n    return max_element;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/103",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the Eulerian number a(n, m).\nlong eulerian_num(long n, long m) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = eulerian_num;\n    assert(candidate((3), (1)) == (4));\n    assert(candidate((4), (1)) == (11));\n    assert(candidate((5), (3)) == (26));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the Eulerian number a(n, m).\n# Create a 2D vector of size (n+1) x (m+1) to store the Eulerian numbers.\n# Initialize the vector with all elements set to 0.\n# Iterate over the rows and columns of the vector.\n    # If either the row index or column index is 0, set the current element to 1.\n    # Otherwise, calculate the current element using the formula: Eulerian(n, m) = (m-n) * Eulerian(n-1, m-1) + (n+1) * Eulerian(n, m-1)\n# Return the Eulerian number a(n, m) from the last element of the vector."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the Eulerian number a(n, m).\nlong eulerian_num(long n, long m) {\n    std::vector<std::vector<long>> eulerian(n+1, std::vector<long>(m+1, 0));\n\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            if (i == 0 || j == 0) {\n                eulerian[i][j] = 1;\n            } else {\n                eulerian[i][j] = (m - n) * eulerian[i-1][j-1] + (n + 1) * eulerian[i][j-1];\n            }\n        }\n    }\n\n    return eulerian[n][m];\n}\n"
        ]
    },
    {
        "id": "mbpp_cpp/168",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count the number of occurrences of a number in a given vector.\n# Initialize a counter variable to keep track of the frequency of the number.\n# Iterate over the vector.\n    # Check if the current element is equal to the target number.\n        # If it is, increment the counter.\n# Return the final count of occurrences."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n\n    // Iterate over the vector to count the occurrences of the number.\n    for (const auto& num : a) {\n        if (num == x) {\n            count++;\n        }\n    }\n\n    return count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/749",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a given vector of strings of numbers numerically. https://www.geeksforgeeks.org/cppthon-sort-numeric-strings-in-a-vector/\nstd::vector<long> sort_numeric_strings(std::vector<std::string> nums_str) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = sort_numeric_strings;\n    assert(candidate((std::vector<std::string>({(std::string)\"4\", (std::string)\"12\", (std::string)\"45\", (std::string)\"7\", (std::string)\"0\", (std::string)\"100\", (std::string)\"200\", (std::string)\"-12\", (std::string)\"-500\"}))) == (std::vector<long>({(long)-500, (long)-12, (long)0, (long)4, (long)7, (long)12, (long)45, (long)100, (long)200})));\n    assert(candidate((std::vector<std::string>({(std::string)\"2\", (std::string)\"3\", (std::string)\"8\", (std::string)\"4\", (std::string)\"7\", (std::string)\"9\", (std::string)\"8\", (std::string)\"2\", (std::string)\"6\", (std::string)\"5\", (std::string)\"1\", (std::string)\"6\", (std::string)\"1\", (std::string)\"2\", (std::string)\"3\", (std::string)\"4\", (std::string)\"6\", (std::string)\"9\", (std::string)\"1\", (std::string)\"2\"}))) == (std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4, (long)5, (long)6, (long)6, (long)6, (long)7, (long)8, (long)8, (long)9, (long)9})));\n    assert(candidate((std::vector<std::string>({(std::string)\"1\", (std::string)\"3\", (std::string)\"5\", (std::string)\"7\", (std::string)\"1\", (std::string)\"3\", (std::string)\"13\", (std::string)\"15\", (std::string)\"17\", (std::string)\"5\", (std::string)\"7 \", (std::string)\"9\", (std::string)\"1\", (std::string)\"11\"}))) == (std::vector<long>({(long)1, (long)1, (long)1, (long)3, (long)3, (long)5, (long)5, (long)7, (long)7, (long)9, (long)11, (long)13, (long)15, (long)17})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to sort a given vector of strings numerically.\n# Convert each string in the input vector to a numeric value.\n# Sort the vector of numeric values in ascending order.\n# Convert the sorted numeric values back to strings.\n# Return the sorted vector of strings."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a given vector of strings of numbers numerically.\nstd::vector<long> sort_numeric_strings(std::vector<std::string> nums_str) {\n    std::vector<long> nums;\n\n    // Convert each string in the input vector to a numeric value\n    for (const auto& str : nums_str) {\n        long num = std::stol(str);\n        nums.push_back(num);\n    }\n\n    // Sort the vector of numeric values in ascending order\n    std::sort(nums.begin(), nums.end());\n\n    return nums;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/738",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/cppthon-exercises/data-structures-and-algorithms/cppthon-recursion-exercise-9.php\nfloat geometric_sum(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = geometric_sum;\n    assert(candidate((7)) == (1.9921875f));\n    assert(candidate((4)) == (1.9375f));\n    assert(candidate((8)) == (1.99609375f));\n}\n"
        ],
        "draft_plan": [
            "# Define a recursive function to calculate the geometric sum.\n# Base case: If n is 0, return 1.\n# Recursive case: Calculate the geometric sum by adding 1/(2^n) to the sum of the geometric sum for n-1.\n# Return the calculated geometric sum.\n"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate the geometric sum of n-1.\nfloat geometric_sum(long n) {\n    // Base case\n    if (n == 0) {\n        return 1;\n    }\n    // Recursive case\n    return 1 / pow(2, n) + geometric_sum(n - 1);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/745",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/cppthon-exercises/lambda/cppthon-lambda-exercise-24.php\nstd::vector<long> divisible_by_digits(long startnum, long endnum) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = divisible_by_digits;\n    assert(candidate((1), (22)) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)11, (long)12, (long)15, (long)22})));\n    assert(candidate((1), (15)) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)11, (long)12, (long)15})));\n    assert(candidate((20), (25)) == (std::vector<long>({(long)22, (long)24})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find numbers within a given range that are divisible by every digit they contain.\n# Initialize an empty vector to store the divisible numbers.\n# Iterate over the range from startnum to endnum.\n    # Convert the current number to a string.\n    # Check if the number is divisible by every digit it contains.\n        # Create a lambda function to check divisibility.\n        # Iterate over each digit in the string representation of the number.\n            # Convert the current digit back to an integer.\n            # Check if the digit is not zero and if the number is not divisible by the digit.\n                # If it is not divisible, break the loop.\n        # If the loop completes without breaking, the number is divisible by every digit it contains.\n        # Append the number to the vector.\n# Return the vector of divisible numbers."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\nstd::vector<long> divisible_by_digits(long startnum, long endnum) {\n    std::vector<long> divisible_numbers;\n\n    // Iterate over the range from startnum to endnum.\n    for (long num = startnum; num <= endnum; num++) {\n        // Convert the current number to a string.\n        std::string num_str = std::to_string(num);\n\n        // Check if the number is divisible by every digit it contains.\n        auto divisible_check = [&](int digit) {\n            // Iterate over each digit in the string representation of the number.\n            for (char c : num_str) {\n                int num_digit = c - '0';\n                // Check if the digit is not zero and if the number is not divisible by the digit.\n                if (num_digit != 0 && num % num_digit != 0) {\n                    return false;\n                }\n            }\n            return true;\n        };\n\n        // Check if the number is divisible by every digit it contains.\n        if (divisible_check(num)) {\n            divisible_numbers.push_back(num);\n        }\n    }\n\n    return divisible_numbers;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/573",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to calculate the product of the unique numbers in a given vector.\nlong unique_product(std::vector<long> list_data) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = unique_product;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)30, (long)40, (long)20, (long)50, (long)60, (long)40}))) == (720000000));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1}))) == (6));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)0, (long)1, (long)1}))) == (0));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to calculate the product of unique numbers in a given vector.\n# Create a set to store unique numbers.\n# Initialize a variable for the product.\n# Iterate over the input vector.\n    # Check if the current number is already in the set.\n        # If it is, continue to the next iteration.\n    # If the number is not in the set, add it to the set and multiply it with the product.\n# Return the product of unique numbers."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to calculate the product of the unique numbers in a given vector.\nlong unique_product(std::vector<long> list_data) {\n    std::set<long> unique_numbers;\n    long product = 1;\n\n    // Iterate over the input vector.\n    for (const auto& num : list_data) {\n        // Check if the current number is already in the set.\n        if (unique_numbers.count(num) > 0) {\n            continue;\n        }\n\n        // If the number is not in the set, add it to the set and multiply it with the product.\n        unique_numbers.insert(num);\n        product *= num;\n    }\n\n    return product;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/443",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the largest negative number from the given vector.\nlong largest_neg(std::vector<long> list1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = largest_neg;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)-4, (long)-6}))) == (-6));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)-8, (long)-9}))) == (-9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)-1}))) == (-1));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the largest negative number from the given vector.\n# Initialize a variable to store the largest negative number and set it to a value lower than the minimum possible negative number.\n# Iterate over the elements in the vector.\n    # Check if the current element is negative and larger than the current largest negative number.\n        # If it is, update the largest negative number.\n# Return the largest negative number found.\n"
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to find the largest negative number from the given vector.\nlong largest_neg(std::vector<long> list1) {\n    long largest_negative = INT64_MIN;\n\n    // Iterate over the elements in the vector.\n    for (long num : list1) {\n        // Check if the current element is negative and larger than the current largest negative number.\n        if (num < 0 && num > largest_negative) {\n            largest_negative = num;\n        }\n    }\n\n    return largest_negative;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/730",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove consecutive duplicates of a given vector.\nstd::vector<std::any> consecutive_duplicates(std::vector<std::any> nums) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = consecutive_duplicates;\n    assert(candidate((std::vector<std::any>({(long)0, (long)0, (long)1, (long)2, (long)3, (long)4, (long)4, (long)5, (long)6, (long)6, (long)6, (long)7, (long)8, (long)9, (long)4, (long)4}))) == (std::vector<std::any>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)4})));\n    assert(candidate((std::vector<std::any>({(long)10, (long)10, (long)15, (long)19, (long)18, (long)18, (long)17, (long)26, (long)26, (long)17, (long)18, (long)10}))) == (std::vector<std::any>({(long)10, (long)15, (long)19, (long)18, (long)17, (long)26, (long)17, (long)18, (long)10})));\n    assert(candidate((std::vector<std::any>({(std::string)\"a\", (std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"d\"}))) == (std::vector<std::any>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\"})));\n    assert(candidate((std::vector<std::any>({(std::string)\"a\", (std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"d\", (std::string)\"a\", (std::string)\"a\"}))) == (std::vector<std::any>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"a\"})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to remove consecutive duplicates from a given vector.\n# Create an empty result vector to store the unique values.\n# Iterate over the input vector.\n    # Check if the current element is the same as the previous element.\n        # If it is, skip adding it to the result vector.\n        # If it is not, add it to the result vector.\n# Return the result vector without consecutive duplicates."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove consecutive duplicates of a given vector.\nstd::vector<std::any> consecutive_duplicates(std::vector<std::any> nums) {\n    std::vector<std::any> result;\n    result.push_back(nums[0]);\n\n    // Iterate over the nums vector to remove consecutive duplicates.\n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] != nums[i - 1]) {\n            result.push_back(nums[i]);\n        }\n    }\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/617",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nfloat min_Jumps(std::tuple<long, long> steps, long d) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = min_Jumps;\n    assert(candidate((std::make_tuple(3, 4)), (11)) == (3.5f));\n    assert(candidate((std::make_tuple(3, 4)), (0)) == (float(0)));\n    assert(candidate((std::make_tuple(11, 14)), (11)) == (float(1)));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to calculate the minimum number of jumps required to reach a point of the form (d, 0) from the origin in a 2D plane.\n# Extract the x and y coordinates from the steps tuple.\n# Calculate the distance from the origin to the point (d, 0) using the distance formula sqrt(x^2 + y^2).\n# Divide the distance by the length of each jump to get the minimum number of jumps required.\n# Return the minimum number of jumps as a floating-point value."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nfloat min_Jumps(std::tuple<long, long> steps, long d) {\n    long x = std::get<0>(steps);\n    long y = std::get<1>(steps);\n\n    float distance = std::sqrt(x*x + y*y);\n    float min_jumps = distance / d;\n\n    return min_jumps;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/415",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find a pair with highest product from a given vector of integers.\nstd::tuple<long, long> max_Product(std::vector<long> arr) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = max_Product;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)7, (long)0, (long)8, (long)4}))) == (std::make_tuple(7, 8)));\n    assert(candidate((std::vector<long>({(long)0, (long)-1, (long)-2, (long)-4, (long)5, (long)0, (long)-6}))) == (std::make_tuple(-4, -6)));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::make_tuple(2, 3)));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find a pair with the highest product from a given vector of integers.\n# Initialize variables to store the maximum product, as well as the pair of integers that produce the maximum product.\n# Iterate over the vector using two nested loops to compare each pair of integers.\n    # Calculate the product of the current pair of integers.\n    # Check if the product is greater than the maximum product found so far.\n        # If it is, update the maximum product and the pair of integers.\n# Return the tuple containing the pair of integers that produce the maximum product."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a cppthon function to find a pair with highest product from a given vector of integers.\nstd::tuple<long, long> max_Product(std::vector<long> arr) {\n    assert(arr.size() >= 2);\n  \n    long max_product = INT_MIN;\n    std::pair<long, long> max_pair;\n\n    // Iterate over the vector to compare each pair of integers.\n    for (int i = 0; i < arr.size() - 1; i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            long product = arr[i] * arr[j];\n\n            // Check if the current product is greater than the maximum product.\n            if (product > max_product) {\n                max_product = product;\n                max_pair = std::make_pair(arr[i], arr[j]);\n            }\n        }\n    }\n\n    return std::make_tuple(max_pair.first, max_pair.second);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/413",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract the nth element from a given vector of tuples.\nstd::vector<std::any> extract_nth_element(std::vector<std::tuple<std::string, long, long>> list1, long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = extract_nth_element;\n    assert(candidate((std::vector<std::tuple<std::string, long, long>>({(std::tuple<std::string, long, long>)std::make_tuple(\"Greyson Fulton\", 98, 99), (std::tuple<std::string, long, long>)std::make_tuple(\"Brady Kent\", 97, 96), (std::tuple<std::string, long, long>)std::make_tuple(\"Wyatt Knott\", 91, 94), (std::tuple<std::string, long, long>)std::make_tuple(\"Beau Turnbull\", 94, 98)})), (0)) == (std::vector<std::any>({(std::string)\"Greyson Fulton\", (std::string)\"Brady Kent\", (std::string)\"Wyatt Knott\", (std::string)\"Beau Turnbull\"})));\n    assert(candidate((std::vector<std::tuple<std::string, long, long>>({(std::tuple<std::string, long, long>)std::make_tuple(\"Greyson Fulton\", 98, 99), (std::tuple<std::string, long, long>)std::make_tuple(\"Brady Kent\", 97, 96), (std::tuple<std::string, long, long>)std::make_tuple(\"Wyatt Knott\", 91, 94), (std::tuple<std::string, long, long>)std::make_tuple(\"Beau Turnbull\", 94, 98)})), (2)) == (std::vector<std::any>({(long)99, (long)96, (long)94, (long)98})));\n    assert(candidate((std::vector<std::tuple<std::string, long, long>>({(std::tuple<std::string, long, long>)std::make_tuple(\"Greyson Fulton\", 98, 99), (std::tuple<std::string, long, long>)std::make_tuple(\"Brady Kent\", 97, 96), (std::tuple<std::string, long, long>)std::make_tuple(\"Wyatt Knott\", 91, 94), (std::tuple<std::string, long, long>)std::make_tuple(\"Beau Turnbull\", 94, 98)})), (1)) == (std::vector<std::any>({(long)98, (long)97, (long)91, (long)94})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to extract the nth element from a vector of tuples.\n# Initialize an empty vector to store the extracted elements.\n# Iterate over the input vector of tuples.\n    # Check if the given index n is within the range of the tuple size.\n        # If it is, extract the nth element from the tuple and add it to the result vector.\n# Return the vector of extracted elements."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract the nth element from a given vector of tuples.\nstd::vector<std::any> extract_nth_element(std::vector<std::tuple<std::string, long, long>> list1, long n) {\n    std::vector<std::any> extracted_elements;\n\n    // Iterate over the input vector of tuples.\n    for (const auto& tup : list1) {\n        // Check if the given index n is within the range of the tuple size.\n        if (n >= 0 && n < std::tuple_size<decltype(tup)>::value) {\n            // Extract the nth element from the tuple and add it to the result vector.\n            extracted_elements.push_back(std::get<n>(tup));\n        }\n    }\n\n    return extracted_elements;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/641",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth nonagonal number.\nlong is_nonagonal(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = is_nonagonal;\n    assert(candidate((10)) == (325));\n    assert(candidate((15)) == (750));\n    assert(candidate((18)) == (1089));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the nth nonagonal number.\n# Check if the input number is less than or equal to 0.\n    # If it is, return 0 as the nonagonal number does not exist.\n# Calculate the nonagonal number using the formula: n * (7 * n - 5) / 2.\n# Return the calculated nonagonal number."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth nonagonal number.\nlong is_nonagonal(long n) {\n    if (n <= 0) {\n        return 0;\n    }\n    return n * (7 * n - 5) / 2;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/145",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the maximum difference between any two elements in a given vector.\nlong max_Abs_Diff(std::vector<long> arr) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = max_Abs_Diff;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)5, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)9, (long)3, (long)2, (long)5, (long)1}))) == (8));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (2));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the maximum difference between any two elements in a given vector.\n# Initialize two variables, min_value and max_diff, to keep track of the minimum value and maximum difference.\n# Iterate over the elements in the vector.\n    # Check if the current element is smaller than the current minimum value.\n        # If it is, update the minimum value.\n    # Check if the difference between the current element and the minimum value is greater than the current maximum difference.\n        # If it is, update the maximum difference.\n# Return the maximum difference."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the maximum difference between any two elements in a given vector.\nlong max_Abs_Diff(std::vector<long> arr) {\n    assert(arr.size() >= 2);\n\n    long min_value = arr[0];\n    long max_diff = arr[1] - arr[0];\n\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < min_value) {\n            min_value = arr[i];\n        }\n        if (arr[i] - min_value > max_diff) {\n            max_diff = arr[i] - min_value;\n        }\n    }\n\n    return max_diff;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/778",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to pack consecutive duplicates of a given vector elements into subvectors.\nstd::vector<std::vector<std::any>> pack_consecutive_duplicates(std::vector<std::any> list1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = pack_consecutive_duplicates;\n    assert(candidate((std::vector<std::any>({(long)0, (long)0, (long)1, (long)2, (long)3, (long)4, (long)4, (long)5, (long)6, (long)6, (long)6, (long)7, (long)8, (long)9, (long)4, (long)4}))) == (std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)2}), (std::vector<long>)std::vector<long>({(long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)4}), (std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)6, (long)6}), (std::vector<long>)std::vector<long>({(long)7}), (std::vector<long>)std::vector<long>({(long)8}), (std::vector<long>)std::vector<long>({(long)9}), (std::vector<long>)std::vector<long>({(long)4, (long)4})})));\n    assert(candidate((std::vector<std::any>({(long)10, (long)10, (long)15, (long)19, (long)18, (long)18, (long)17, (long)26, (long)26, (long)17, (long)18, (long)10}))) == (std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)10, (long)10}), (std::vector<long>)std::vector<long>({(long)15}), (std::vector<long>)std::vector<long>({(long)19}), (std::vector<long>)std::vector<long>({(long)18, (long)18}), (std::vector<long>)std::vector<long>({(long)17}), (std::vector<long>)std::vector<long>({(long)26, (long)26}), (std::vector<long>)std::vector<long>({(long)17}), (std::vector<long>)std::vector<long>({(long)18}), (std::vector<long>)std::vector<long>({(long)10})})));\n    assert(candidate((std::vector<std::any>({(std::string)\"a\", (std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"d\"}))) == (std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"a\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"b\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"c\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"d\", (std::string)\"d\"})})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to pack consecutive duplicates of vector elements into subvectors.\n# Create an empty result vector to store subvectors.\n# Check if the input vector is empty.\n    # If it is, return the empty result vector.\n# Initialize a variable to store the current element and set it to the first element of the input vector.\n# Initialize a subvector and add the first element to it.\n# Iterate over the remaining elements of the input vector.\n    # Check if the current element is equal to the previous element.\n        # If it is, add the current element to the subvector.\n        # If it is not, add the subvector to the result vector and create a new subvector with the current element.\n# Add the last subvector to the result vector.\n# Return the result vector with consecutive duplicates packed into subvectors."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to pack consecutive duplicates of a given vector elements into subvectors.\nstd::vector<std::vector<std::any>> pack_consecutive_duplicates(std::vector<std::any> list1) {\n    std::vector<std::vector<std::any>> result;\n    \n    if (list1.empty()) {\n        return result;\n    }\n    \n    std::any prev = list1[0];\n    std::vector<std::any> subvector;\n    subvector.push_back(prev);\n    \n    for (int i = 1; i < list1.size(); i++) {\n        std::any current = list1[i];\n        \n        if (current == prev) {\n            subvector.push_back(current);\n        } else {\n            result.push_back(subvector);\n            subvector.clear();\n            subvector.push_back(current);\n        }\n        \n        prev = current;\n    }\n    \n    result.push_back(subvector);\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/448",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate the sum of perrin numbers.\nlong cal_sum(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = cal_sum;\n    assert(candidate((9)) == (49));\n    assert(candidate((10)) == (66));\n    assert(candidate((11)) == (88));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to calculate the sum of Perrin numbers.\n# Initialize three variables to hold the first three Perrin numbers: a=3, b=0, c=2.\n# Initialize a variable to hold the sum of Perrin numbers.\n# Iterate from 3 to n (inclusive).\n    # Calculate the next Perrin number by adding the previous three numbers: next = a + b.\n    # Update the variables: a = b, b = c, c = next.\n    # Add the current Perrin number to the sum.\n# Return the sum of Perrin numbers."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate the sum of Perrin numbers.\nlong cal_sum(long n) {\n    if (n <= 0) return 0;\n    if (n <= 2) return n;\n\n    long a = 3;\n    long b = 0;\n    long c = 2;\n    long sum = a + b + c;\n\n    for (long i = 3; i <= n; i++) {\n        long next = a + b;\n        sum += next;\n        a = b;\n        b = c;\n        c = next;\n    }\n\n    return sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/226",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to remove the characters which have odd index values of a given string.\nstd::string odd_values_string(std::string str) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = odd_values_string;\n    assert(candidate((\"abcdef\")) == (\"ace\"));\n    assert(candidate((\"python\")) == (\"pto\"));\n    assert(candidate((\"data\")) == (\"dt\"));\n    assert(candidate((\"lambs\")) == (\"lms\"));\n}\n"
        ],
        "draft_plan": [
            "# Create an empty string to store the modified string.\n# Iterate over the given string.\n    # Check if the index of the current character is odd.\n        # If it is odd, append the character to the modified string.\n# Return the modified string."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to remove the characters which have odd index values of a given string.\nstd::string odd_values_string(std::string str) {\n    std::string modified_str = \"\";\n    for (int i = 0; i < str.length(); i++) {\n        if (i % 2 == 1) {\n            modified_str += str[i];\n        }\n    }\n    return modified_str;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/597",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find kth element from the given two sorted vectors.\nlong find_kth(std::vector<long> arr1, std::vector<long> arr2, long k) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find_kth;\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)6, (long)7, (long)9})), (std::vector<long>({(long)1, (long)4, (long)8, (long)10})), (5)) == (6));\n    assert(candidate((std::vector<long>({(long)100, (long)112, (long)256, (long)349, (long)770})), (std::vector<long>({(long)72, (long)86, (long)113, (long)119, (long)265, (long)445, (long)892})), (7)) == (256));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)7, (long)8, (long)10})), (std::vector<long>({(long)2, (long)5, (long)9, (long)11})), (6)) == (8));\n}\n"
        ],
        "draft_plan": [
            "# Combine the two sorted arrays into a single sorted array.\n# Initialize two pointers, one for each array, to keep track of the current element being considered.\n# Iterate until one of the arrays is exhausted or until the kth element is found:\n    # Compare the current elements from both arrays.\n    # If the element from the first array is smaller or equal, add it to the combined array and move the pointer of the first array.\n    # If the element from the second array is smaller, add it to the combined array and move the pointer of the second array.\n    # If the kth element is found, return it.\n# If the iteration is completed without finding the kth element, return -1 (indicating that the kth element does not exist in the combined array)."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find kth element from the given two sorted vectors.\nlong find_kth(std::vector<long> arr1, std::vector<long> arr2, long k) {\n    std::vector<long> combined;\n    int ptr1 = 0, ptr2 = 0;\n    \n    while (ptr1 < arr1.size() && ptr2 < arr2.size()) {\n        if (arr1[ptr1] <= arr2[ptr2]) {\n            combined.push_back(arr1[ptr1]);\n            ptr1++;\n        } else {\n            combined.push_back(arr2[ptr2]);\n            ptr2++;\n        }\n        if (combined.size() == k) {\n            return combined[k - 1];\n        }\n    }\n\n    while (ptr1 < arr1.size()) {\n        combined.push_back(arr1[ptr1]);\n        ptr1++;\n        if (combined.size() == k) {\n            return combined[k - 1];\n        }\n    }\n\n    while (ptr2 < arr2.size()) {\n        combined.push_back(arr2[ptr2]);\n        ptr2++;\n        if (combined.size() == k) {\n            return combined[k - 1];\n        }\n    }\n\n    return -1;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/752",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nlong jacobsthal_num(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = jacobsthal_num;\n    assert(candidate((5)) == (11));\n    assert(candidate((2)) == (1));\n    assert(candidate((4)) == (5));\n    assert(candidate((13)) == (2731));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the nth Jacobsthal number.\n# Check if n is 0 or 1.\n    # If it is, return n.\n# Initialize two variables to store the previous two numbers in the sequence, initialized with values 0 and 1.\n# Iterate from 2 to n.\n    # Calculate the current Jacobsthal number by adding twice the value of the previous number to the value of the number before the previous number.\n    # Update the previous two numbers with the current number.\n# Return the nth Jacobsthal number."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nlong jacobsthal_num(long n) {\n    if (n == 0 || n == 1) {\n        return n;\n    }\n    long prev1 = 0;\n    long prev2 = 1;\n    for (long i = 2; i <= n; i++) {\n        long curr = 2 * prev1 + prev2;\n        prev1 = prev2;\n        prev2 = curr;\n    }\n    return prev2;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/97",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find frequency of each element in a flattened vector of vectors, returned in a map.\nstd::map<long,long> frequency_lists(std::vector<std::vector<long>> list1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = frequency_lists;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)2}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6, (long)2}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9, (long)5})}))) == (std::map<long,long>({{1, 1}, {2, 3}, {3, 1}, {4, 1}, {5, 2}, {6, 1}, {7, 1}, {8, 1}, {9, 1}})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)9, (long)10, (long)11, (long)12})}))) == (std::map<long,long>({{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)20, (long)30, (long)40, (long)17}), (std::vector<long>)std::vector<long>({(long)18, (long)16, (long)14, (long)13}), (std::vector<long>)std::vector<long>({(long)10, (long)20, (long)30, (long)40})}))) == (std::map<long,long>({{20, 2}, {30, 2}, {40, 2}, {17, 1}, {18, 1}, {16, 1}, {14, 1}, {13, 1}, {10, 1}})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the frequency of each element in a flattened vector of vectors, returned in a map.\n# Create a map to store the frequencies of each element.\n# Iterate over the input vector of vectors.\n    # Iterate over each element in the inner vector.\n        # Check if the element exists in the map.\n            # If it does, increment its frequency in the map.\n            # If it does not, add it to the map with a frequency of 1.\n# Return the map of element frequencies."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find frequency of each element in a flattened vector of vectors, returned in a map.\nstd::map<long, long> frequency_lists(std::vector<std::vector<long>> list1) {\n    std::map<long, long> frequency_map;\n\n    // Iterate over the vector of vectors\n    for (const auto& inner_vec : list1) {\n        // Iterate over each element in the inner vector\n        for (const auto& element : inner_vec) {\n            // Check if the element exists in the map\n            if (frequency_map.find(element) != frequency_map.end()) {\n                // If it does, increment its frequency in the map\n                frequency_map[element]++;\n            } else {\n                // If it does not, add it to the map with a frequency of 1\n                frequency_map[element] = 1;\n            }\n        }\n    }\n\n    return frequency_map;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/589",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find perfect squares between two given numbers.\n# Initialize an empty vector to store the perfect squares.\n# Iterate over the range of numbers from `a` to `b`.\n    # Check if the current number is a perfect square.\n        # If it is, add it to the vector of perfect squares.\n# Return the vector of perfect squares."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n\n    // Iterate over the range of numbers from `a` to `b`.\n    for (long i = a; i <= b; i++) {\n        // Check if the current number is a perfect square.\n        long sqrt_i = sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/734",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find sum of products of all possible subvectors of a given vector. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subvectors/\nlong sum_Of_Subarray_Prod(std::vector<long> arr) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = sum_Of_Subarray_Prod;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (20));\n    assert(candidate((std::vector<long>({(long)1, (long)2}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (84));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to calculate the sum of products of all possible subvectors of a given vector.\n# Initialize a variable to store the sum.\n# Iterate over the vector from the first element to the last element.\n    # For each element, calculate the product of all subvectors starting from that element.\n    # Add the product to the sum.\n# Return the sum."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate the sum of products of all possible subvectors of a given vector.\nlong sum_Of_Subarray_Prod(std::vector<long> arr) {\n    long sum = 0;\n\n    // Iterate over the vector from the first element to the last element.\n    for (int i = 0; i < arr.size(); i++) {\n        long product = 1;\n\n        // Calculate the product of all subvectors starting from the current element.\n        for (int j = i; j < arr.size(); j++) {\n            product *= arr[j];\n            sum += product;\n        }\n    }\n\n    return sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/807",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the first odd number in a given vector of numbers.\nlong first_odd(std::vector<long> nums) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = first_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5}))) == (1));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)9, (long)1}))) == (9));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the first odd number in a given vector of numbers.\n# Iterate over the elements in the vector.\n    # Check if the current element is odd.\n        # If it is, return the element.\n# If no odd number is found, return -1."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the first odd number in a given vector of numbers.\nlong first_odd(std::vector<long> nums) {\n    for (const auto& num : nums) {\n        if (num % 2 != 0) {\n            return num;\n        }\n    }\n    return -1;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/401",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to perform index wise addition of vector elements in the given two nested vectors.\nstd::vector<std::vector<long>> add_nested_tuples(std::vector<std::vector<long>> test_tup1, std::vector<std::vector<long>> test_tup2) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = add_nested_tuples;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)2, (long)9}), (std::vector<long>)std::vector<long>({(long)1, (long)10})})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)3, (long)9}), (std::vector<long>)std::vector<long>({(long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)7, (long)3})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)10}), (std::vector<long>)std::vector<long>({(long)7, (long)14}), (std::vector<long>)std::vector<long>({(long)3, (long)10}), (std::vector<long>)std::vector<long>({(long)8, (long)13})})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)3, (long)10}), (std::vector<long>)std::vector<long>({(long)2, (long)11})})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)4, (long)10}), (std::vector<long>)std::vector<long>({(long)2, (long)2}), (std::vector<long>)std::vector<long>({(long)8, (long)4})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)9, (long)12}), (std::vector<long>)std::vector<long>({(long)9, (long)16}), (std::vector<long>)std::vector<long>({(long)5, (long)12}), (std::vector<long>)std::vector<long>({(long)10, (long)15})})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)4, (long)11}), (std::vector<long>)std::vector<long>({(long)3, (long)12})})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)5, (long)11}), (std::vector<long>)std::vector<long>({(long)3, (long)3}), (std::vector<long>)std::vector<long>({(long)9, (long)5})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)11, (long)14}), (std::vector<long>)std::vector<long>({(long)11, (long)18}), (std::vector<long>)std::vector<long>({(long)7, (long)14}), (std::vector<long>)std::vector<long>({(long)12, (long)17})})));\n}\n"
        ],
        "draft_plan": [
            "# Create an empty nested vector to store the result of the addition.\n# Iterate over the outer vector of the first input nested vector.\n    # Create a temporary vector to store the current row of the result.\n    # Iterate over the inner vector of the current row.\n        # Add the corresponding elements from both input nested vectors and append the result to the temporary vector.\n    # Append the temporary vector to the result nested vector.\n# Return the result nested vector."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to perform index wise addition of vector elements in the given two nested vectors.\nstd::vector<std::vector<long>> add_nested_tuples(std::vector<std::vector<long>> test_tup1, std::vector<std::vector<long>> test_tup2) {\n    std::vector<std::vector<long>> result;\n\n    // Iterate over the outer vector of the first input nested vector.\n    for (size_t i = 0; i < test_tup1.size(); i++) {\n        std::vector<long> temp;\n\n        // Iterate over the inner vector of the current row.\n        for (size_t j = 0; j < test_tup1[i].size(); j++) {\n            // Add the corresponding elements from both input nested vectors.\n            long sum = test_tup1[i][j] + test_tup2[i][j];\n            temp.push_back(sum);\n        }\n\n        // Append the temporary vector to the result nested vector.\n        result.push_back(temp);\n    }\n\n    // Return the result nested vector.\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/612",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function which takes a vector of vectors, where each subvector has two elements, and returns a vector of two vectors where the first vector has the first element of each subvector and the second one has the second.\nstd::vector<std::vector<std::any>> merge(std::vector<std::vector<std::any>> lst) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = merge;\n    assert(candidate((std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"y\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"b\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"m\", (std::string)\"n\"})}))) == (std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"a\", (std::string)\"m\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"y\", (std::string)\"b\", (std::string)\"n\"})})));\n    assert(candidate((std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8})}))) == (std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)1, (long)3, (long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)2, (long)4, (long)6, (long)8})})));\n    assert(candidate((std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"m\", (std::string)\"n\", (std::string)\"o\"})}))) == (std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"a\", (std::string)\"m\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"y\", (std::string)\"b\", (std::string)\"n\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"z\", (std::string)\"c\", (std::string)\"o\"})})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to merge the vector of vectors.\n# Create two empty vectors to store the first and second elements of each subvector.\n# Iterate over the input vector of vectors.\n    # Retrieve the first and second elements of each subvector.\n    # Append the first element to the first vector and the second element to the second vector.\n# Create a vector to store the two vectors.\n# Append the first and second vectors to the result vector.\n# Return the result vector."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to merge the vector of vectors.\nstd::vector<std::vector<std::any>> merge(std::vector<std::vector<std::any>> lst) {\n    std::vector<std::any> first_vector;\n    std::vector<std::any> second_vector;\n\n    // Iterate over the input vector of vectors.\n    for (const auto& subvector : lst) {\n        // Retrieve the first and second elements of each subvector.\n        std::any first_element = subvector[0];\n        std::any second_element = subvector[1];\n\n        // Append the first element to the first vector and the second element to the second vector.\n        first_vector.push_back(first_element);\n        second_vector.push_back(second_element);\n    }\n\n    // Create a vector to store the two vectors.\n    std::vector<std::vector<std::any>> result;\n    result.push_back(first_vector);\n    result.push_back(second_vector);\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/72",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given number can be represented as the difference of two squares or not.\nbool dif_Square(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = dif_Square;\n    assert(candidate((5)) == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((15)) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check if a given number can be represented as the difference of two squares.\n# Iterate through all possible values of x from 0 to sqrt(n)\n    # Calculate the square of x.\n    # Calculate the difference between n and the square of x.\n    # Check if the difference is a perfect square.\n        # If it is, return true.\n# If no valid difference is found, return false."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number can be represented as the difference of two squares or not.\nbool dif_Square(long n) {\n    for (long x = 0; x <= sqrt(n); x++) {\n        long square_x = x * x;\n        long difference = n - square_x;\n        long square_root = sqrt(difference);\n        \n        if (square_root * square_root == difference) {\n            return true;\n        }\n    }\n    \n    return false;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/809",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nbool check_smaller(std::tuple<long, long, long> test_tup1, std::tuple<long, long, long> test_tup2) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = check_smaller;\n    assert(candidate((std::make_tuple(1, 2, 3)), (std::make_tuple(2, 3, 4))) == (false));\n    assert(candidate((std::make_tuple(4, 5, 6)), (std::make_tuple(3, 4, 5))) == (true));\n    assert(candidate((std::make_tuple(11, 12, 13)), (std::make_tuple(10, 11, 12))) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check if each element of the second tuple is smaller than its corresponding element in the first tuple.\n# Iterate over the elements of the tuples.\n    # Compare the corresponding elements of the two tuples.\n        # If the element in the second tuple is greater than or equal to the element in the first tuple, return false.\n# If all elements pass the comparison, return true."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if each element of the second tuple is smaller than its corresponding element in the first tuple.\nbool check_smaller(std::tuple<long, long, long> test_tup1, std::tuple<long, long, long> test_tup2) {\n    if (std::get<0>(test_tup2) >= std::get<0>(test_tup1)) {\n        return false;\n    }\n    if (std::get<1>(test_tup2) >= std::get<1>(test_tup1)) {\n        return false;\n    }\n    if (std::get<2>(test_tup2) >= std::get<2>(test_tup1)) {\n        return false;\n    }\n    return true;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/88",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to get the frequency of all the elements in a vector, returned as a map.\nstd::map<long,long> freq_count(std::vector<long> list1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = freq_count;\n    assert(candidate((std::vector<long>({(long)10, (long)10, (long)10, (long)10, (long)20, (long)20, (long)20, (long)20, (long)40, (long)40, (long)50, (long)50, (long)30}))) == (std::map<long,long>({{10, 4}, {20, 4}, {40, 2}, {50, 2}, {30, 1}})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3, (long)2, (long)4, (long)1, (long)3, (long)1, (long)4}))) == (std::map<long,long>({{1, 3}, {2, 2}, {3, 3}, {4, 3}})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)4, (long)9, (long)10, (long)4, (long)5, (long)6, (long)7, (long)9, (long)5}))) == (std::map<long,long>({{10, 1}, {5, 3}, {6, 2}, {7, 2}, {4, 2}, {9, 2}})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to get the frequency of all elements in a vector and return it as a map.\n# Create an empty map to store the frequencies.\n# Iterate over the input vector.\n    # Check if the current element exists as a key in the map.\n        # If it does, increment the frequency count for that element.\n        # If it does not, add the element as a key in the map with a frequency count of 1.\n# Return the map of frequencies."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to get the frequency of all the elements in a vector, returned as a map.\nstd::map<long,long> freq_count(std::vector<long> list1) {\n    std::map<long, long> frequency_map;\n    \n    // Iterate over the input vector\n    for (const auto& element : list1) {\n        // Check if the current element exists as a key in the map\n        if (frequency_map.count(element) > 0) {\n            // If it does, increment the frequency count for that element\n            frequency_map[element]++;\n        } else {\n            // If it does not, add the element as a key in the map with a frequency count of 1\n            frequency_map[element] = 1;\n        }\n    }\n    \n    return frequency_map;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/783",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nstd::vector<float> rgb_to_hsv(long r, long g, long b) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = rgb_to_hsv;\n    assert(candidate((255), (255), (255)) == (std::vector<float>({(float)0.0f, (float)0.0f, (float)100.0f})));\n    assert(candidate((0), (215), (0)) == (std::vector<float>({(float)120.0f, (float)100.0f, (float)84.31372549019608f})));\n    assert(candidate((10), (215), (110)) == (std::vector<float>({(float)149.26829268292684f, (float)95.34883720930233f, (float)84.31372549019608f})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to convert RGB color to HSV color.\n# Convert the RGB values to the range of 0-1 by dividing each value by 255.\n# Find the maximum and minimum values among the RGB values.\n# Calculate the value (V) as the maximum value.\n# Calculate the saturation (S) as (V - min) / V, unless V is 0, in which case S is 0.\n# Calculate the hue (H) based on the maximum value.\n    # If the maximum value is equal to the minimum value, set H to 0.\n    # If the maximum value is equal to r, calculate H as (g - b) / (max - min).\n    # If the maximum value is equal to g, calculate H as 2 + (b - r) / (max - min).\n    # If the maximum value is equal to b, calculate H as 4 + (r - g) / (max - min).\n    # Multiply H by 60 and add 360 if it is negative.\n    # Take the remainder of H divided by 360.\n# Return the HSV values as a vector [H, S, V]."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Helper function to calculate the maximum value among three numbers\nlong max_value(long a, long b, long c) {\n    return std::max(std::max(a, b), c);\n}\n\n// Helper function to calculate the minimum value among three numbers\nlong min_value(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\n\n// Write a function to convert RGB color to HSV color\nstd::vector<float> rgb_to_hsv(long r, long g, long b) {\n    // Convert RGB values to the range of 0-1\n    float R = r / 255.0;\n    float G = g / 255.0;\n    float B = b / 255.0;\n\n    // Find maximum and minimum values among RGB values\n    float max_val = max_value(R, G, B);\n    float min_val = min_value(R, G, B);\n\n    float V = max_val; // Value (V) is the maximum value\n\n    float S = (max_val == 0) ? 0 : (max_val - min_val) / max_val; // Saturation (S)\n\n    float H; // Hue (H)\n\n    if (max_val == min_val) {\n        H = 0; // Hue is 0 if max and min values are equal\n    } else {\n        if (max_val == R) {\n            H = (G - B) / (max_val - min_val);\n        } else if (max_val == G) {\n            H = 2 + (B - R) / (max_val - min_val);\n        } else {\n            H = 4 + (R - G) / (max_val - min_val);\n        }\n\n        H *= 60; // Multiply H by 60\n\n        if (H < 0) {\n            H += 360; // Add 360 if H is negative\n        }\n    }\n\n    // Return HSV values as a vector [H, S, V]\n    return {H, S, V};\n}"
        ]
    },
    {
        "id": "mbpp_cpp/297",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a given nested vector structure.\nstd::vector<long> flatten_list(std::vector<Union_long_std_vector_long_> list1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = flatten_list;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({0, 10, std::vector<long>({(long)20, (long)30}), 40, 50, std::vector<long>({(long)60, (long)70, (long)80}), std::vector<long>({(long)90, (long)100, (long)110, (long)120})}))) == (std::vector<long>({(long)0, (long)10, (long)20, (long)30, (long)40, (long)50, (long)60, (long)70, (long)80, (long)90, (long)100, (long)110, (long)120})));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({(std::vector<long>)std::vector<long>({(long)10, (long)20}), (std::vector<long>)std::vector<long>({(long)40}), (std::vector<long>)std::vector<long>({(long)30, (long)56, (long)25}), (std::vector<long>)std::vector<long>({(long)10, (long)20}), (std::vector<long>)std::vector<long>({(long)33}), (std::vector<long>)std::vector<long>({(long)40})}))) == (std::vector<long>({(long)10, (long)20, (long)40, (long)30, (long)56, (long)25, (long)10, (long)20, (long)33, (long)40})));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)10, (long)11, (long)12, (long)7, (long)8, (long)9})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to flatten a given nested vector structure.\n# Create an empty vector to store the flattened elements.\n# Iterate over the input list.\n    # Check if the current element is a single long value or a vector.\n        # If it is a single long value, add it to the flattened vector.\n        # If it is a vector, iterate over its elements and add them to the flattened vector.\n# Return the flattened vector."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n\nunion Union_long_std_vector_long_ {\n    long f0;\n    std::vector<long> f1;\n\n    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n\n    bool operator==(long f) {\n        return f0 == f;\n    }\n\n    bool operator==(std::vector<long> f) {\n        return f1 == f;\n    }\n};\n\n// Write a function to flatten a given nested vector structure.\nstd::vector<long> flatten_list(std::vector<Union_long_std_vector_long_> list1) {\n    std::vector<long> flattened_list;\n\n    // Iterate over the input list\n    for (const auto& element : list1) {\n        // Check if the current element is a single long value or a vector\n        if (element == element.f0) {\n            flattened_list.push_back(element.f0);\n        } else {\n            for (const auto& nested_element : element.f1) {\n                flattened_list.push_back(nested_element);\n            }\n        }\n    }\n\n    return flattened_list;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/737",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nbool check_str(std::string string) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = check_str;\n    assert(candidate((\"annie\")) == (true));\n    assert(candidate((\"dawood\")) == (false));\n    assert(candidate((\"Else\")) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Import the necessary libraries for regular expressions.\n# Define a function to check whether the given string starts with a vowel or not.\n# Create a regular expression pattern to match vowels at the beginning of the string.\n# Use the regex pattern to search for a match in the given string.\n# If a match is found, return true indicating that the string starts with a vowel.\n# If no match is found, return false indicating that the string does not start with a vowel."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nbool check_str(std::string string) {\n    std::regex vowel_pattern(\"^[aeiouAEIOU].*\");\n    return std::regex_search(string, vowel_pattern);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/762",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nbool check_monthnumber_number(long monthnum3) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = check_monthnumber_number;\n    assert(candidate((6)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((12)) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check whether the given month number contains 30 days or not.\n# Check if the month number is between 1 and 12.\n    # If it is not, return false.\n# Check if the month number is in the set {4, 6, 9, 11}.\n    # If it is, return true.\n# Otherwise, return false."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nbool check_monthnumber_number(long monthnum3) {\n    if (monthnum3 >= 1 && monthnum3 <= 12) {\n        return (monthnum3 == 4 || monthnum3 == 6 || monthnum3 == 9 || monthnum3 == 11);\n    }\n    return false;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/635",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort the given vector.\nstd::vector<long> heap_sort(std::vector<long> iterable) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = heap_sort;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)9, (long)2, (long)4, (long)6, (long)8, (long)0}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)25, (long)35, (long)22, (long)85, (long)14, (long)65, (long)75, (long)25, (long)58}))) == (std::vector<long>({(long)14, (long)22, (long)25, (long)25, (long)35, (long)58, (long)65, (long)75, (long)85})));\n    assert(candidate((std::vector<long>({(long)7, (long)1, (long)9, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)7, (long)9})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to perform heap sort on a given vector.\n# Build a max heap from the input vector.\n# Iterate over the input vector in reverse order (from the last non-leaf node to the root).\n    # Perform heapify operation on each node to ensure the max heap property is maintained.\n# Swap the root element with the last element in the vector.\n# Decrease the size of the heap by 1.\n# Repeat steps 2-5 until the heap is empty.\n# Return the sorted vector."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Heapify function to maintain the max heap property\nvoid heapify(std::vector<long>& arr, long n, long i) {\n    long largest = i;      // Initialize largest as root\n    long left = 2 * i + 1; // Left child\n    long right = 2 * i + 2; // Right child\n\n    // If left child is larger than root\n    if (left < n && arr[left] > arr[largest])\n        largest = left;\n\n    // If right child is larger than largest so far\n    if (right < n && arr[right] > arr[largest])\n        largest = right;\n\n    // If largest is not root\n    if (largest != i) {\n        std::swap(arr[i], arr[largest]);\n\n        // Recursively heapify the affected sub-tree\n        heapify(arr, n, largest);\n    }\n}\n\n// Heap Sort function\nstd::vector<long> heap_sort(std::vector<long> iterable) {\n    long n = iterable.size();\n\n    // Build max heap\n    for (long i = n / 2 - 1; i >= 0; i--)\n        heapify(iterable, n, i);\n\n    // Extract elements from the heap one by one\n    for (long i = n - 1; i >= 0; i--) {\n        std::swap(iterable[0], iterable[i]);\n\n        // Heapify the reduced heap\n        heapify(iterable, i, 0);\n    }\n\n    return iterable;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/408",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nstd::vector<std::vector<long>> k_smallest_pairs(std::vector<long> nums1, std::vector<long> nums2, long k) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = k_smallest_pairs;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)7})), (std::vector<long>({(long)2, (long)4, (long)6})), (2)) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1, (long)4})})));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)7})), (std::vector<long>({(long)2, (long)4, (long)6})), (1)) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2})})));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)7})), (std::vector<long>({(long)2, (long)4, (long)6})), (7)) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)2}), (std::vector<long>)std::vector<long>({(long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)2})})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the k number of smallest pairs.\n# Create a min-heap to store the pairs.\n# Initialize an empty result vector to store the k smallest pairs.\n# Iterate over each element in the first vector.\n    # Iterate over each element in the second vector.\n        # Calculate the sum of the current pair from the two vectors.\n        # Add the current pair to the min-heap.\n# While the result vector size is less than k and the min-heap is not empty:\n    # Retrieve the smallest pair from the min-heap.\n    # Add the smallest pair to the result vector.\n# Return the result vector containing the k smallest pairs."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find k number of smallest pairs which consist of one element from the first vector and one element from the second vector.\nstd::vector<std::vector<long>> k_smallest_pairs(std::vector<long> nums1, std::vector<long> nums2, long k) {\n    std::priority_queue<std::vector<long>, std::vector<std::vector<long>>, std::greater<std::vector<long>>> min_heap;\n    std::vector<std::vector<long>> result;\n    \n    // Iterate over each element in nums1\n    for (long i = 0; i < nums1.size(); i++) {\n        // Iterate over each element in nums2\n        for (long j = 0; j < nums2.size(); j++) {\n            std::vector<long> pair = {nums1[i], nums2[j]};\n            min_heap.push(pair);\n        }\n    }\n    \n    // Retrieve the k smallest pairs\n    while (result.size() < k && !min_heap.empty()) {\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    \n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/160",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nstd::optional<std::tuple<long, long>> find_solution(long a, long b, long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find_solution;\n    assert(candidate((2), (3), (7)) == std::make_tuple(2, 1));\n    assert(candidate((4), (2), (7)) == std::nullopt);\n    assert(candidate((1), (13), (17)) == std::make_tuple(4, 1));\n}\n"
        ],
        "draft_plan": [
            "# Define a function that takes in three parameters: a, b, and n.\n# Check if a and b are both zero.\n    # If they are, return None since no solution exists.\n# Check if n is divisible by the greatest common divisor of a and b.\n    # If it is not, return None since no solution exists.\n# Find the coefficients x and y that satisfy the equation ax + by = n.\n    # Use the extended Euclidean algorithm to find the coefficients.\n# Return the coefficients x and y as a tuple."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nstd::optional<std::tuple<long, long>> find_solution(long a, long b, long n) {\n    // Check if a and b are both zero\n    if (a == 0 && b == 0) {\n        return std::nullopt;\n    }\n    \n    // Check if n is divisible by the greatest common divisor of a and b\n    long gcd = std::__gcd(a, b);\n    if (n % gcd != 0) {\n        return std::nullopt;\n    }\n    \n    // Find the coefficients x and y that satisfy the equation ax + by = n\n    long x0, y0;\n    std::tie(x0, y0) = std::make_tuple(1, 0);\n    long x = 0, y = 1;\n    \n    while (b != 0) {\n        long q = a / b;\n        std::tie(x, x0) = std::make_tuple(x0 - q * x, x);\n        std::tie(y, y0) = std::make_tuple(y0 - q * y, y);\n        std::tie(a, b) = std::make_tuple(b, a % b);\n    }\n    \n    long factor = n / gcd;\n    long x_sol = x0 * factor;\n    long y_sol = y0 * factor;\n    \n    return std::make_tuple(x_sol, y_sol);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/57",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the largest number that can be formed with the given vector of digits.\nlong find_Max_Num(std::vector<long> arr) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find_Max_Num;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (321));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)1}))) == (6541));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)9}))) == (9321));\n}\n"
        ],
        "draft_plan": [
            "# Sort the vector in descending order.\n# Convert the sorted vector into a string.\n# Return the converted string as a long integer."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the largest number that can be formed with the given vector of digits.\nlong find_Max_Num(std::vector<long> arr) {\n    // Sort the vector in descending order.\n    std::sort(arr.begin(), arr.end(), std::greater<int>());\n    \n    // Convert the sorted vector into a string.\n    std::string result = \"\";\n    for (const auto& digit : arr) {\n        result += std::to_string(digit);\n    }\n    \n    // Return the converted string as a long integer.\n    return std::stol(result);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/805",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns the vector in a vector of vectors whose sum of elements is the highest.\nstd::vector<long> max_sum_list(std::vector<std::vector<long>> lists) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = max_sum_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})}))) == (std::vector<long>({(long)10, (long)11, (long)12})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)2, (long)1}), (std::vector<long>)std::vector<long>({(long)6, (long)5, (long)4}), (std::vector<long>)std::vector<long>({(long)12, (long)11, (long)10})}))) == (std::vector<long>({(long)12, (long)11, (long)10})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)3, (long)1})}))) == (std::vector<long>({(long)2, (long)3, (long)1})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the vector in a vector of vectors with the highest sum of elements.\n# Initialize a variable to store the maximum sum.\n# Initialize a variable to store the index of the vector with the maximum sum.\n# Iterate over each vector in the input vector of vectors.\n    # Calculate the sum of the elements in the current vector.\n    # If the sum is greater than the maximum sum, update the maximum sum and the index of the vector.\n# Return the vector at the index with the maximum sum."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns the vector in a vector of vectors whose sum of elements is the highest.\nstd::vector<long> max_sum_list(std::vector<std::vector<long>> lists) {\n    long max_sum = std::numeric_limits<long>::min();\n    int max_index = -1;\n    \n    for (int i = 0; i < lists.size(); i++) {\n        long sum = std::accumulate(lists[i].begin(), lists[i].end(), 0);\n        \n        if (sum > max_sum) {\n            max_sum = sum;\n            max_index = i;\n        }\n    }\n    \n    assert(max_index != -1);\n    return lists[max_index];\n}"
        ]
    },
    {
        "id": "mbpp_cpp/591",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to interchange the first and last elements in a vector.\nstd::vector<long> swap_List(std::vector<long> newList) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = swap_List;\n    assert(candidate((std::vector<long>({(long)12, (long)35, (long)9, (long)56, (long)24}))) == (std::vector<long>({(long)24, (long)35, (long)9, (long)56, (long)12})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)3, (long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6}))) == (std::vector<long>({(long)6, (long)5, (long)4})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to swap the first and last elements of a vector.\n# Check if the vector is not empty.\n    # If it is empty, return the same vector.\n# Swap the first and last elements of the vector using the swap() function.\n# Return the modified vector."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to interchange the first and last elements in a vector.\nstd::vector<long> swap_List(std::vector<long> newList) {\n    if (newList.empty()) {\n        return newList;\n    }\n    std::swap(newList.front(), newList.back());\n    return newList;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/622",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0f));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5f));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0f));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the median of two sorted vectors of the same size.\n# Calculate the index of the median element.\n# Initialize variables to store the median elements.\n# Iterate over the vectors using a loop.\n    # Check if the current index is equal to the index of the median element.\n        # If it is, store the current elements of both vectors as the median elements.\n# Calculate the average of the median elements and return it as the median."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    int median_index = n / 2;\n    long median1, median2;\n    int i = 0, j = 0;\n\n    while (i < n && j < n) {\n        if (arr1[i] <= arr2[j]) {\n            if (i + j == median_index) {\n                median1 = arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == median_index) {\n                median1 = arr2[j];\n            }\n            j++;\n        }\n        if (i + j == median_index + 1) {\n            median2 = std::min(arr1[i], arr2[j]);\n            break;\n        }\n    }\n\n    return (median1 + median2) / 2.0;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/631",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n"
        ],
        "draft_plan": [
            "# Iterate through each character in the given string\n    # Check if the current character is a whitespace\n        # If it is, replace it with an underscore\n        # If it is an underscore, replace it with a whitespace\n# Return the modified string with spaces and underscores replaced"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/164",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to determine if the sum of the divisors of two integers are the same.\nbool are_equivalent(long num1, long num2) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = are_equivalent;\n    assert(candidate((36), (57)) == (false));\n    assert(candidate((2), (4)) == (false));\n    assert(candidate((23), (47)) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to determine if the sum of the divisors of two integers are the same.\n# Create a helper function to calculate the sum of the divisors of a given number.\n# Calculate the sum of divisors for both num1 and num2 using the helper function.\n# Compare the sums of divisors for num1 and num2.\n    # If they are equal, return true.\n    # If they are not equal, return false."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Helper function to calculate the sum of divisors of a given number.\nlong sum_of_divisors(long num) {\n    long sum = 0;\n    for (long i = 1; i <= num; i++) {\n        if (num % i == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n// Function to determine if the sum of the divisors of two integers are the same.\nbool are_equivalent(long num1, long num2) {\n    long sum1 = sum_of_divisors(num1);\n    long sum2 = sum_of_divisors(num2);\n    return sum1 == sum2;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/456",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to reverse each string in a given vector of string values.\nstd::vector<std::string> reverse_string_list(std::vector<std::string> stringlist) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = reverse_string_list;\n    assert(candidate((std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Blue\", (std::string)\"White\", (std::string)\"Black\"}))) == (std::vector<std::string>({(std::string)\"deR\", (std::string)\"neerG\", (std::string)\"eulB\", (std::string)\"etihW\", (std::string)\"kcalB\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"john\", (std::string)\"amal\", (std::string)\"joel\", (std::string)\"george\"}))) == (std::vector<std::string>({(std::string)\"nhoj\", (std::string)\"lama\", (std::string)\"leoj\", (std::string)\"egroeg\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"jack\", (std::string)\"john\", (std::string)\"mary\"}))) == (std::vector<std::string>({(std::string)\"kcaj\", (std::string)\"nhoj\", (std::string)\"yram\"})));\n}\n"
        ],
        "draft_plan": [
            "# Create an empty vector to store the reversed strings.\n# Iterate over each string in the given vector.\n    # Reverse the current string.\n    # Add the reversed string to the new vector.\n# Return the new vector of reversed strings."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to reverse each string in a given vector of string values.\nstd::vector<std::string> reverse_string_list(std::vector<std::string> stringlist) {\n    std::vector<std::string> reversed_list;\n    \n    for (const std::string& str : stringlist) {\n        std::string reversed_str = str;\n        std::reverse(reversed_str.begin(), reversed_str.end());\n        reversed_list.push_back(reversed_str);\n    }\n    \n    return reversed_list;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/398",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to compute the sum of digits of each number of a given vector.\nlong sum_of_digits(std::vector<std::any> nums) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = sum_of_digits;\n    assert(candidate((std::vector<std::any>({(long)10, (long)2, (long)56}))) == (14));\n    assert(candidate((std::vector<std::any>({(std::vector<long>)std::vector<std::any>({10, 20, 4, 5, \"b\", 70, \"a\"})}))) == (19));\n    assert(candidate((std::vector<std::any>({(long)10, (long)20, (long)-4, (long)5, (long)-70}))) == (19));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to compute the sum of digits of each number in a given vector.\n# Initialize a variable to store the total sum of digits.\n# Iterate over each element in the vector.\n    # Check if the current element is a number.\n        # If it is, convert it to a string.\n        # Iterate over each character in the string.\n            # Check if the current character is a digit.\n                # If it is, convert it to an integer and add it to the total sum of digits.\n# Return the total sum of digits."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n\n// Write a function to compute the sum of digits of each number of a given vector.\nlong sum_of_digits(std::vector<std::any> nums) {\n    long total_sum = 0;\n\n    // Iterate over each element in the vector.\n    for (const auto& num : nums) {\n        // Check if the current element is a number.\n        if (num.type() == typeid(int) || num.type() == typeid(long) || num.type() == typeid(float) || num.type() == typeid(double)) {\n            // Convert the number to a string.\n            std::string num_str = std::to_string(std::any_cast<double>(num));\n\n            // Iterate over each character in the string.\n            for (const auto& ch : num_str) {\n                // Check if the current character is a digit.\n                if (isdigit(ch)) {\n                    // Convert the character to an integer and add it to the total sum of digits.\n                    total_sum += ch - '0';\n                }\n            }\n        }\n    }\n\n    return total_sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/84",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth number in the newman conway sequence.\nlong sequence(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = sequence;\n    assert(candidate((10)) == (6));\n    assert(candidate((2)) == (1));\n    assert(candidate((3)) == (2));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the nth number in the Newman-Conway sequence.\n# Check if n is less than or equal to 0.\n    # If it is, return an error or throw an exception.\n# Create a list to store the sequence.\n# Initialize the first two elements of the sequence as 1.\n# Iterate from index 3 to n.\n    # Calculate the next element in the sequence using the formula: sequence[i] = sequence[sequence[i-1]] + sequence[i - sequence[i-1]].\n# Return the nth element in the sequence.\n"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth number in the Newman-Conway sequence.\nlong sequence(long n) {\n    if (n <= 0) {\n        // Error: Invalid input\n        // Handle error appropriately, such as throwing an exception or returning an error code\n        // For simplicity, we will return -1 indicating an error\n        return -1;\n    }\n\n    std::vector<long> seq(n + 1);\n\n    // Initialize the first two elements of the sequence\n    seq[1] = 1;\n    seq[2] = 1;\n\n    // Calculate the next elements in the sequence\n    for (int i = 3; i <= n; i++) {\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]];\n    }\n\n    return seq[n];\n}"
        ]
    },
    {
        "id": "mbpp_cpp/4",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the n largest integers from a given vector of numbers, returned in descending order.\nstd::vector<long> heap_queue_largest(std::vector<long> nums, long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = heap_queue_largest;\n    assert(candidate((std::vector<long>({(long)25, (long)35, (long)22, (long)85, (long)14, (long)65, (long)75, (long)22, (long)58})), (3)) == (std::vector<long>({(long)85, (long)75, (long)65})));\n    assert(candidate((std::vector<long>({(long)25, (long)35, (long)22, (long)85, (long)14, (long)65, (long)75, (long)22, (long)58})), (2)) == (std::vector<long>({(long)85, (long)75})));\n    assert(candidate((std::vector<long>({(long)25, (long)35, (long)22, (long)85, (long)14, (long)65, (long)75, (long)22, (long)58})), (5)) == (std::vector<long>({(long)85, (long)75, (long)65, (long)58, (long)35})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the n largest integers from a given vector of numbers, returned in descending order.\n# Create a priority queue (max heap) to store the largest elements.\n# Iterate over the input vector of numbers.\n    # Push each number into the priority queue.\n    # If the size of the priority queue exceeds n, pop the smallest element.\n# Create a result vector to store the n largest elements in descending order.\n# Iterate over the priority queue.\n    # Push each element into the result vector.\n# Reverse the result vector to get the largest elements in descending order.\n# Return the result vector."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the n largest integers from a given vector of numbers, returned in descending order.\nstd::vector<long> heap_queue_largest(std::vector<long> nums, long n) {\n    std::priority_queue<long> pq;\n    \n    // Push each number into the priority queue.\n    for (const auto& num : nums) {\n        pq.push(num);\n        \n        // If the size of the priority queue exceeds n, pop the smallest element.\n        if (pq.size() > n) {\n            pq.pop();\n        }\n    }\n    \n    std::vector<long> result;\n    \n    // Push each element from the priority queue into the result vector.\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    \n    // Reverse the result vector to get the largest elements in descending order.\n    std::reverse(result.begin(), result.end());\n    \n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/452",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to calculate the loss amount on a sale.\n# Calculate the difference between the actual cost and the sale amount.\n# Check if the difference is positive.\n    # If it is, return the difference as the loss amount.\n# If the difference is not positive, return 0 as there is no loss.\n"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    long difference = actual_cost - sale_amount;\n    if (difference > 0) {\n        return difference;\n    } else {\n        return 0;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_cpp/560",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the union of the elements of two given vectors and output them in sorted order.\nstd::vector<long> union_elements(std::vector<long> test_tup1, std::vector<long> test_tup2) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = union_elements;\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)6})), (std::vector<long>({(long)5, (long)7, (long)4, (long)10}))) == (std::vector<long>({(long)3, (long)4, (long)5, (long)6, (long)7, (long)10})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)11, (long)12, (long)13, (long)14})), (std::vector<long>({(long)13, (long)15, (long)16, (long)17}))) == (std::vector<long>({(long)11, (long)12, (long)13, (long)14, (long)15, (long)16, (long)17})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the union of elements in two given vectors and output them in sorted order.\n# Create a set to store unique elements from both vectors.\n# Iterate over the first vector and insert each element into the set.\n# Iterate over the second vector and insert each element into the set.\n# Convert the set back into a vector and sort it in ascending order.\n# Return the sorted vector of union elements."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the union of the elements of two given vectors and output them in sorted order.\nstd::vector<long> union_elements(std::vector<long> test_tup1, std::vector<long> test_tup2) {\n    std::set<long> unique_elements;\n\n    // Insert elements from the first vector into the set.\n    for (const auto& num : test_tup1) {\n        unique_elements.insert(num);\n    }\n\n    // Insert elements from the second vector into the set.\n    for (const auto& num : test_tup2) {\n        unique_elements.insert(num);\n    }\n\n    // Convert the set back to a vector and sort it.\n    std::vector<long> union_vector(unique_elements.begin(), unique_elements.end());\n    std::sort(union_vector.begin(), union_vector.end());\n\n    return union_vector;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/562",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the length of the longest subvectors.\nlong Find_Max_Length(std::vector<std::vector<long>> lst) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = Find_Max_Length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7, (long)8})}))) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)1}), (std::vector<long>)std::vector<long>({(long)2, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)2, (long)1})}))) == (3));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7}), (std::vector<long>)std::vector<long>({(long)22, (long)23}), (std::vector<long>)std::vector<long>({(long)13, (long)14, (long)15}), (std::vector<long>)std::vector<long>({(long)10, (long)20, (long)30, (long)40, (long)50})}))) == (5));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the length of the longest subvectors.\n# Initialize a variable to store the maximum length of the subvectors.\n# Iterate over the list of subvectors.\n    # Get the length of the current subvector.\n    # If the length is greater than the maximum length, update the maximum length.\n# Return the maximum length of the subvectors."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the length of the longest subvectors.\nlong Find_Max_Length(std::vector<std::vector<long>> lst) {\n    long max_length = 0;\n\n    // Iterate over the list of subvectors.\n    for (const auto& subvec : lst) {\n        long length = subvec.size();\n        // If the length is greater than the maximum length, update the maximum length.\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n\n    return max_length;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/640",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to remove parenthesis and what is in between them from a string.\n# Iterate over each string in the input vector.\n    # Initialize a stack to store opening parenthesis.\n    # Initialize an empty string to store the modified string.\n    # Iterate over each character in the current string.\n        # If the current character is an opening parenthesis, push it into the stack.\n        # If the current character is a closing parenthesis,\n            # Check if the stack is empty.\n                # If it is, skip this character.\n                # If it is not, pop the opening parenthesis from the stack.\n        # If the current character is not a parenthesis,\n            # Check if the stack is empty.\n                # If it is, append the current character to the modified string.\n    # Append a newline character to the modified string.\n# Return the modified string."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is in between them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n\n    for (const std::string& item : items) {\n        std::stack<char> parentheses;\n        std::string modified_string;\n\n        for (char c : item) {\n            if (c == '(') {\n                parentheses.push(c);\n            } else if (c == ')') {\n                if (!parentheses.empty()) {\n                    parentheses.pop();\n                }\n            } else if (parentheses.empty()) {\n                modified_string += c;\n            }\n        }\n\n        result += modified_string + '\\n';\n    }\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/406",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find whether the parity of a given number is odd.\nbool find_Parity(long x) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find_Parity;\n    assert(candidate((12)) == (false));\n    assert(candidate((7)) == (true));\n    assert(candidate((10)) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the parity of a given number.\n# Calculate the remainder when the number is divided by 2.\n# Check if the remainder is 1.\n    # If it is, the parity is odd, so return true.\n    # If it is not, the parity is even, so return false."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find whether the parity of a given number is odd.\nbool find_Parity(long x) {\n    return x % 2 == 1;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/432",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median length of a trapezium.\nfloat median_trapezium(long base1, long base2, long height) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = median_trapezium;\n    assert(candidate((15), (25), (35)) == (float(20)));\n    assert(candidate((10), (20), (30)) == (float(15)));\n    assert(candidate((6), (9), (4)) == (7.5f));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the median length of a trapezium.\n# Calculate the sum of the lengths of the two bases.\n# Divide the sum by 2 to get the average length.\n# Multiply the average length by the height of the trapezium.\n# Return the result as the median length of the trapezium."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to find the median length of a trapezium.\nfloat median_trapezium(long base1, long base2, long height) {\n    float average_length = (base1 + base2) / 2.0;\n    float median_length = average_length * height;\n    return median_length;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/86",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find nth centered hexagonal number.\nlong centered_hexagonal_number(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = centered_hexagonal_number;\n    assert(candidate((10)) == (271));\n    assert(candidate((2)) == (7));\n    assert(candidate((9)) == (217));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the nth centered hexagonal number.\n# Check if the input n is equal to 1.\n    # If it is, return 1 as the first centered hexagonal number.\n# Compute the nth centered hexagonal number using the formula: 3n^2 - 3n + 1.\n# Return the computed centered hexagonal number."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find nth centered hexagonal number.\nlong centered_hexagonal_number(long n) {\n    if (n == 1) {\n        return 1;\n    }\n    \n    long centered_hexagonal = 3 * n * n - 3 * n + 1;\n    return centered_hexagonal;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/143",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find number of vectors present in the given vector.\nlong find_lists(std::vector<std::any> Input) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find_lists;\n    assert(candidate((std::vector<std::any>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7, (long)8})}))) == (2));\n    assert(candidate((std::vector<std::any>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6})}))) == (3));\n    assert(candidate((std::vector<std::any>({(long)9, (long)8, (long)7, (long)6, (long)5, (long)4, (long)3, (long)2, (long)1}))) == (1));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the number of vectors in the given vector.\n# Initialize a counter for the number of vectors.\n# Iterate over each element in the input vector.\n    # Check if the current element is a vector.\n        # If it is, increment the counter.\n# Return the count of vectors found in the input vector."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find number of vectors present in the given vector.\nlong find_lists(std::vector<std::any> Input) {\n    long vector_count = 0;\n\n    // Iterate over the elements in the input vector.\n    for (const auto& element : Input) {\n        // Check if the current element is a vector.\n        if (element.type() == typeid(std::vector<std::any>)) {\n            vector_count++;\n        }\n    }\n\n    return vector_count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/392",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlong get_max_sum(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = get_max_sum;\n    assert(candidate((60)) == (106));\n    assert(candidate((10)) == (12));\n    assert(candidate((2)) == (2));\n}\n"
        ],
        "draft_plan": [
            "# Define a recursive function to calculate the maximum sum.\n# Base case: if n is less than or equal to 5, return n as the maximum sum.\n# Recursively calculate f(n/2), f(n/3), f(n/4), and f(n/5) by calling the function on each of the divisions.\n# Calculate the maximum sum by taking the maximum of the sum of f(n/2), f(n/3), f(n/4), and f(n/5) plus n.\n# Return the maximum sum.\n"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlong get_max_sum(long n) {\n    // Base case: if n is less than or equal to 5, return n as the maximum sum.\n    if (n <= 5) {\n        return n;\n    }\n\n    // Recursively calculate f(n/2), f(n/3), f(n/4), and f(n/5).\n    long f_n_2 = get_max_sum(n / 2);\n    long f_n_3 = get_max_sum(n / 3);\n    long f_n_4 = get_max_sum(n / 4);\n    long f_n_5 = get_max_sum(n / 5);\n\n    // Calculate the maximum sum.\n    long max_sum = std::max({f_n_2 + f_n_3 + f_n_4 + f_n_5, n});\n\n    return max_sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/90",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the length of the longest word.\nlong len_log(std::vector<std::string> list1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = len_log;\n    assert(candidate((std::vector<std::string>({(std::string)\"python\", (std::string)\"PHP\", (std::string)\"bigdata\"}))) == (7));\n    assert(candidate((std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"abc\"}))) == (3));\n    assert(candidate((std::vector<std::string>({(std::string)\"small\", (std::string)\"big\", (std::string)\"tall\"}))) == (5));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the length of the longest word.\n# Initialize a variable to store the length of the longest word.\n# Iterate over the input list of strings.\n    # Retrieve each word from the list.\n    # Check if the length of the current word is greater than the length of the longest word.\n        # If it is, update the length of the longest word.\n# Return the length of the longest word."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the length of the longest word.\nlong len_log(std::vector<std::string> list1) {\n    long longest_length = 0;\n\n    // Iterate over the list to find the longest word length.\n    for (const std::string& word : list1) {\n        long word_length = word.length();\n        if (word_length > longest_length) {\n            longest_length = word_length;\n        }\n    }\n\n    return longest_length;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/746",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nstd::optional<float> sector_area(long r, long a) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = sector_area;\n    assert(candidate((4), (45)) == 6.283185307179586f);\n    assert(candidate((9), (45)) == 31.808625617596654f);\n    assert(candidate((9), (361)) == std::nullopt);\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the area of a sector.\n# Check if the angle is larger than 360 degrees.\n    # If it is, return None.\n# Calculate the area of the sector using the formula: (pi * r^2 * a) / 360.\n# Return the calculated area as an optional float."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n#include <optional>\n\n// Write a function to find the area of a sector. \n// The function takes the radius and angle as inputs. \n// Function should return None if the angle is larger than 360 degrees.\nstd::optional<float> sector_area(long r, long a) {\n    if (a > 360) {\n        return std::nullopt;\n    }\n\n    float area = (3.14159 * r * r * a) / 360;\n    return area;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/775",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether every odd index contains odd numbers of a given vector.\nbool odd_position(std::vector<long> nums) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = odd_position;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)4, (long)3, (long)6, (long)7, (long)6, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)2}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check whether every odd index contains odd numbers in a given vector.\n# Iterate over the vector starting from index 1 with a step size of 2.\n    # Check if the number at the current odd index is odd.\n        # If it is not odd, return false.\n# If the loop completes without returning false, return true."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether every odd index contains odd numbers of a given vector.\nbool odd_position(std::vector<long> nums) {\n    for (int i = 1; i < nums.size(); i += 2) {\n        if (nums[i] % 2 != 1) {\n            return false;\n        }\n    }\n    return true;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/439",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to join a vector of multiple integers into a single integer.\n# Initialize an empty string to store the concatenated integers.\n# Iterate over the elements in the input vector.\n    # Convert each element to a string and append it to the string.\n# Convert the concatenated string to a long integer and return it."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    std::string concatenated;\n    \n    // Iterate over the elements in the input vector.\n    for (const auto& num : L) {\n        concatenated += std::to_string(num);\n    }\n    \n    // Convert the concatenated string to a long integer and return it.\n    return std::stol(concatenated);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/77",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find whether a number is divisible by 11.\nbool is_Diff(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = is_Diff;\n    assert(candidate((12345)) == (false));\n    assert(candidate((1212112)) == (true));\n    assert(candidate((1212)) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check if a number is divisible by 11.\n# Convert the number to a string.\n# Check if the length of the string is less than 2.\n    # If it is, return True if the number is 0, else return False.\n# Initialize a variable to keep track of the sum of alternate digits.\n# Iterate through each digit in the string.\n    # Convert the digit to an integer.\n    # If the index of the digit is even, add it to the sum.\n    # If the index of the digit is odd, subtract it from the sum.\n# Check if the sum is divisible by 11.\n    # If it is, return True.\n    # If it is not, return False."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find whether a number is divisible by 11.\nbool is_Diff(long n) {\n    std::string num_str = std::to_string(n);\n    if (num_str.length() < 2) {\n        return n == 0;\n    }\n    \n    int sum = 0;\n    for (int i = 0; i < num_str.length(); i++) {\n        int digit = num_str[i] - '0';\n        if (i % 2 == 0) {\n            sum += digit;\n        } else {\n            sum -= digit;\n        }\n    }\n    \n    return sum % 11 == 0;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/445",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to perform index wise multiplication of vector elements in the given two vectors.\nstd::vector<std::vector<long>> index_multiplication(std::vector<std::vector<long>> test_tup1, std::vector<std::vector<long>> test_tup2) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = index_multiplication;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)2, (long)9}), (std::vector<long>)std::vector<long>({(long)1, (long)10})})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)3, (long)9}), (std::vector<long>)std::vector<long>({(long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)7, (long)3})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)21}), (std::vector<long>)std::vector<long>({(long)12, (long)45}), (std::vector<long>)std::vector<long>({(long)2, (long)9}), (std::vector<long>)std::vector<long>({(long)7, (long)30})})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)3, (long)10}), (std::vector<long>)std::vector<long>({(long)2, (long)11})})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)4, (long)10}), (std::vector<long>)std::vector<long>({(long)2, (long)2}), (std::vector<long>)std::vector<long>({(long)8, (long)4})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)14, (long)32}), (std::vector<long>)std::vector<long>({(long)20, (long)60}), (std::vector<long>)std::vector<long>({(long)6, (long)20}), (std::vector<long>)std::vector<long>({(long)16, (long)44})})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)4, (long)11}), (std::vector<long>)std::vector<long>({(long)3, (long)12})})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)5, (long)11}), (std::vector<long>)std::vector<long>({(long)3, (long)3}), (std::vector<long>)std::vector<long>({(long)9, (long)5})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)24, (long)45}), (std::vector<long>)std::vector<long>({(long)30, (long)77}), (std::vector<long>)std::vector<long>({(long)12, (long)33}), (std::vector<long>)std::vector<long>({(long)27, (long)60})})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to perform index wise multiplication of vector elements.\n# Create an empty result vector of vectors to store the multiplied values.\n# Iterate over the rows of the first vector.\n    # Create a temporary vector to store the multiplied values for each row.\n    # Iterate over the elements of each row.\n        # Multiply the corresponding elements from both input vectors and store the result in the temporary vector.\n    # Add the temporary vector to the result vector.\n# Return the result vector."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to perform index wise multiplication of vector elements in the given two vectors.\nstd::vector<std::vector<long>> index_multiplication(std::vector<std::vector<long>> test_tup1, std::vector<std::vector<long>> test_tup2) {\n    std::vector<std::vector<long>> result;\n    int n = test_tup1.size();\n    int m = test_tup1[0].size();\n\n    for (int i = 0; i < n; i++) {\n        std::vector<long> temp;\n        for (int j = 0; j < m; j++) {\n            long product = test_tup1[i][j] * test_tup2[i][j];\n            temp.push_back(product);\n        }\n        result.push_back(temp);\n    }\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/785",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert tuple string to integer tuple.\nstd::tuple<long, long, long> tuple_str_int(std::string test_str) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = tuple_str_int;\n    assert(candidate((\"(7, 8, 9)\")) == (std::make_tuple(7, 8, 9)));\n    assert(candidate((\"(1, 2, 3)\")) == (std::make_tuple(1, 2, 3)));\n    assert(candidate((\"(4, 5, 6)\")) == (std::make_tuple(4, 5, 6)));\n    assert(candidate((\"(7, 81, 19)\")) == (std::make_tuple(7, 81, 19)));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to convert a tuple string to an integer tuple.\n# Split the input string by the comma delimiter to obtain individual elements.\n# Convert each element from string to integer.\n# Create a tuple using the converted elements.\n# Return the tuple."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert tuple string to integer tuple.\nstd::tuple<long, long, long> tuple_str_int(std::string test_str) {\n    std::stringstream ss(test_str);\n    std::vector<long> values;\n    std::string token;\n    \n    // Split the input string by the comma delimiter and convert each element to integer.\n    while(std::getline(ss, token, ',')) {\n        values.push_back(std::stoi(token));\n    }\n    \n    // Create and return the tuple.\n    return std::make_tuple(values[0], values[1], values[2]);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/123",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum all amicable numbers from 1 to a specified number.\nlong amicable_numbers_sum(long limit) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = amicable_numbers_sum;\n    assert(candidate((999)) == (504));\n    assert(candidate((9999)) == (31626));\n    assert(candidate((99)) == (0));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to calculate the sum of all amicable numbers within a specified limit.\n# Create a variable to store the sum of amicable numbers.\n# Iterate through each number from 1 to the specified limit.\n    # Calculate the sum of the proper divisors of the current number.\n    # Check if the sum of the proper divisors is equal to a different number and if the sum of the proper divisors of that different number is equal to the current number.\n        # If both conditions are true, add the current number to the sum of amicable numbers.\n# Return the sum of amicable numbers."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum all amicable numbers from 1 to a specified number.\nlong amicable_numbers_sum(long limit) {\n    long amicable_sum = 0;\n\n    for (long num = 1; num <= limit; num++) {\n        long sum_divisors = 0;\n\n        // Calculate the sum of proper divisors of the current number.\n        for (long i = 1; i < num; i++) {\n            if (num % i == 0) {\n                sum_divisors += i;\n            }\n        }\n\n        // Check if the sum of proper divisors is equal to a different number and if the sum of proper divisors of that different number is equal to the current number.\n        if (sum_divisors != num && sum_divisors <= limit && sum_divisors > 0) {\n            long sum_divisors_other = 0;\n\n            for (long i = 1; i < sum_divisors; i++) {\n                if (sum_divisors % i == 0) {\n                    sum_divisors_other += i;\n                }\n            }\n\n            if (sum_divisors_other == num) {\n                amicable_sum += num;\n            }\n        }\n    }\n\n    return amicable_sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/437",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove odd characters in a string.\nstd::string remove_odd(std::string str1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((\"python\")) == (\"yhn\"));\n    assert(candidate((\"program\")) == (\"rga\"));\n    assert(candidate((\"language\")) == (\"agae\"));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to remove odd characters in a string.\n# Create an empty string to store the modified string.\n# Iterate over each character in the input string.\n    # Check if the index of the character is even.\n        # If it is, append the character to the modified string.\n# Return the modified string."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove odd characters in a string.\nstd::string remove_odd(std::string str1) {\n    std::string modified_str = \"\";\n    for (int i = 0; i < str1.length(); i++) {\n        if (i % 2 == 0) {\n            modified_str += str1[i];\n        }\n    }\n    return modified_str;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/726",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes as input a vector of numbers (t_1,...,t_{N+1}) and returns a vector of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nstd::vector<std::any> multiply_elements(std::vector<long> test_tup) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = multiply_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)8, (long)10}))) == (std::vector<std::any>({(long)5, (long)35, (long)56, (long)80})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)5, (long)6, (long)7}))) == (std::vector<std::any>({(long)8, (long)20, (long)30, (long)42})));\n    assert(candidate((std::vector<long>({(long)12, (long)13, (long)14, (long)9, (long)15}))) == (std::vector<std::any>({(long)156, (long)182, (long)126, (long)135})));\n    assert(candidate((std::vector<long>({(long)12}))) == (std::vector<std::any>()));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to multiply elements of a vector.\n# Create an empty vector to store the multiplied values.\n# Iterate over the input vector, excluding the last element.\n    # Multiply the current element with the next element.\n    # Append the result to the new vector.\n# Return the new vector with the multiplied values.\n"
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function that takes as input a vector of numbers and returns a vector of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nstd::vector<std::any> multiply_elements(std::vector<long> test_tup) {\n    std::vector<std::any> result;\n\n    for (size_t i = 0; i < test_tup.size() - 1; i++) {\n        result.push_back(test_tup[i] * test_tup[i + 1]);\n    }\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/802",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nlong count_rotation(std::vector<long> arr) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = count_rotation;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)1, (long)2, (long)3}))) == (2));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (2));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count the number of rotations required to generate a sorted vector.\n# Initialize variables to store the starting and ending indices of the vector.\n# Use binary search to find the index of the smallest element in the vector.\n# The number of rotations required will be equal to the index of the smallest element.\n# Return the number of rotations required."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to count the number of rotations required to generate a sorted vector.\nlong count_rotation(std::vector<long> arr) {\n    long n = arr.size();\n    long start = 0;\n    long end = n - 1;\n\n    // Use binary search to find the index of the smallest element\n    while (start <= end) {\n        long mid = start + (end - start) / 2;\n\n        // Check if the middle element is the smallest element\n        if (arr[mid] < arr[(mid + 1) % n] && arr[mid] < arr[(mid + n - 1) % n]) {\n            return mid;\n        }\n\n        // If the middle element is greater than the last element, search in the right half\n        if (arr[mid] > arr[end]) {\n            start = mid + 1;\n        }\n        // If the middle element is smaller than the first element, search in the left half\n        else if (arr[mid] < arr[start]) {\n            end = mid - 1;\n        }\n        // If the first and last elements are equal, decrement the end index\n        else {\n            end--;\n        }\n    }\n\n    // If no rotation is required, return 0\n    return 0;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/400",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract the number of unique tuples in the given vector.\nlong extract_freq(std::vector<std::tuple<long, long>> test_list) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = extract_freq;\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(3, 4), (std::tuple<long, long>)std::make_tuple(1, 2), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(5, 6)}))) == (3));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(4, 15), (std::tuple<long, long>)std::make_tuple(2, 3), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(6, 7)}))) == (4));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(5, 16), (std::tuple<long, long>)std::make_tuple(2, 3), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6, 9)}))) == (4));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to extract the number of unique tuples.\n# Create a set to store unique tuples.\n# Iterate over the input list of tuples.\n    # Add each tuple to the set.\n# Return the size of the set, which represents the number of unique tuples."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract the number of unique tuples in the given vector.\nlong extract_freq(std::vector<std::tuple<long, long>> test_list) {\n    std::set<std::tuple<long, long>> unique_tuples;\n\n    // Iterate over the test_list to extract unique tuples.\n    for (const auto& tup : test_list) {\n        unique_tuples.insert(tup);\n    }\n\n    return unique_tuples.size();\n}"
        ]
    },
    {
        "id": "mbpp_cpp/723",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nlong count_same_pair(std::vector<long> nums1, std::vector<long> nums2) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = count_same_pair;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})), (std::vector<long>({(long)2, (long)2, (long)3, (long)1, (long)2, (long)6, (long)7, (long)9}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)-1, (long)-5, (long)6, (long)0, (long)-3, (long)-2, (long)3, (long)4, (long)6, (long)8})), (std::vector<long>({(long)2, (long)1, (long)2, (long)-1, (long)-5, (long)6, (long)4, (long)-3, (long)-2, (long)3, (long)4, (long)6, (long)8}))) == (11));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-6, (long)-9, (long)11, (long)-12, (long)14, (long)-5, (long)17})), (std::vector<long>({(long)2, (long)1, (long)2, (long)-1, (long)-5, (long)6, (long)4, (long)-3, (long)-2, (long)3, (long)4, (long)6, (long)8}))) == (1));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)1, (long)2})), (std::vector<long>({(long)0, (long)1, (long)2, (long)2}))) == (3));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count indices where the vectors have the same values.\n# Initialize a counter for the number of same pairs.\n# Iterate over the indices of the input vectors.\n    # Check if the value at the current index is the same in both vectors.\n        # If it is, increment the counter.\n# Return the count of same pairs."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nlong count_same_pair(std::vector<long> nums1, std::vector<long> nums2) {\n    assert(nums1.size() == nums2.size());\n    \n    long same_pair_count = 0;\n    \n    for (size_t i = 0; i < nums1.size(); i++) {\n        if (nums1[i] == nums2[i]) {\n            same_pair_count++;\n        }\n    }\n    \n    return same_pair_count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/93",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate the value of 'a' to the power 'b'.\nlong power(long a, long b) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = power;\n    assert(candidate((3), (4)) == (81));\n    assert(candidate((2), (3)) == (8));\n    assert(candidate((5), (5)) == (3125));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to calculate the value of 'a' to the power 'b'.\n# If 'b' is equal to 0, return 1 (since any number to the power 0 is 1).\n# If 'b' is equal to 1, return 'a'.\n# If 'b' is negative, calculate the reciprocal of 'a' raised to the power of the absolute value of 'b'.\n# If 'b' is positive, initialize a variable 'result' to 1.\n# Iterate 'b' number of times.\n    # Multiply 'result' by 'a' in each iteration.\n# Return the final value of 'result'."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate the value of 'a' to the power 'b'.\nlong power(long a, long b) {\n    if (b == 0) {\n        return 1;\n    } else if (b == 1) {\n        return a;\n    } else if (b < 0) {\n        return 1 / power(a, -b);\n    } else {\n        long result = 1;\n        for (int i = 0; i < b; i++) {\n            result *= a;\n        }\n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_cpp/796",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write function to find the sum of all items in the given map.\nlong return_sum(std::map<std::string,long> dict) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = return_sum;\n    assert(candidate((std::map<std::string,long>({{\"a\", 100}, {\"b\", 200}, {\"c\", 300}}))) == (600));\n    assert(candidate((std::map<std::string,long>({{\"a\", 25}, {\"b\", 18}, {\"c\", 45}}))) == (88));\n    assert(candidate((std::map<std::string,long>({{\"a\", 36}, {\"b\", 39}, {\"c\", 49}}))) == (124));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the sum of all items in the given map.\n# Initialize a variable to store the sum of the items.\n# Iterate over each key-value pair in the map.\n    # Add the value to the sum.\n# Return the sum of all items in the map."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write function to find the sum of all items in the given map.\nlong return_sum(std::map<std::string,long> dict) {\n    long sum = 0;\n\n    // Iterate over each key-value pair in the map.\n    for (const auto& pair : dict) {\n        sum += pair.second;\n    }\n\n    return sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/766",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to return a vector of all pairs of consecutive items in a given vector.\nstd::vector<std::tuple<long, long>> pair_wise(std::vector<long> l1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = pair_wise;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)3, (long)3, (long)4, (long)4, (long)5}))) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(1, 1), (std::tuple<long, long>)std::make_tuple(1, 2), (std::tuple<long, long>)std::make_tuple(2, 3), (std::tuple<long, long>)std::make_tuple(3, 3), (std::tuple<long, long>)std::make_tuple(3, 4), (std::tuple<long, long>)std::make_tuple(4, 4), (std::tuple<long, long>)std::make_tuple(4, 5)})));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(1, 5), (std::tuple<long, long>)std::make_tuple(5, 7), (std::tuple<long, long>)std::make_tuple(7, 9), (std::tuple<long, long>)std::make_tuple(9, 10)})));\n    assert(candidate((std::vector<long>({(long)5, (long)1, (long)9, (long)7, (long)10}))) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(5, 1), (std::tuple<long, long>)std::make_tuple(1, 9), (std::tuple<long, long>)std::make_tuple(9, 7), (std::tuple<long, long>)std::make_tuple(7, 10)})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(1, 2), (std::tuple<long, long>)std::make_tuple(2, 3), (std::tuple<long, long>)std::make_tuple(3, 4), (std::tuple<long, long>)std::make_tuple(4, 5), (std::tuple<long, long>)std::make_tuple(5, 6), (std::tuple<long, long>)std::make_tuple(6, 7), (std::tuple<long, long>)std::make_tuple(7, 8), (std::tuple<long, long>)std::make_tuple(8, 9), (std::tuple<long, long>)std::make_tuple(9, 10)})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to return a vector of all pairs of consecutive items.\n# Initialize an empty vector to store the pairs.\n# Iterate over the input vector up to the second-to-last element.\n    # Create a tuple with the current element and the next element.\n    # Add the tuple to the vector of pairs.\n# Return the vector of pairs."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to return a vector of all pairs of consecutive items in a given vector.\nstd::vector<std::tuple<long, long>> pair_wise(std::vector<long> l1) {\n    std::vector<std::tuple<long, long>> pairs;\n    for (int i = 0; i < l1.size() - 1; i++) {\n        pairs.push_back(std::make_tuple(l1[i], l1[i+1]));\n    }\n    return pairs;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/565",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to split a string into characters.\nstd::vector<std::string> split(std::string word) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = split;\n    assert(candidate((\"python\")) == (std::vector<std::string>({(std::string)\"p\", (std::string)\"y\", (std::string)\"t\", (std::string)\"h\", (std::string)\"o\", (std::string)\"n\"})));\n    assert(candidate((\"Name\")) == (std::vector<std::string>({(std::string)\"N\", (std::string)\"a\", (std::string)\"m\", (std::string)\"e\"})));\n    assert(candidate((\"program\")) == (std::vector<std::string>({(std::string)\"p\", (std::string)\"r\", (std::string)\"o\", (std::string)\"g\", (std::string)\"r\", (std::string)\"a\", (std::string)\"m\"})));\n}\n"
        ],
        "draft_plan": [
            "# Create an empty vector to store the individual characters\n# Iterate through each character in the given string\n    # Convert the character to a string and add it to the vector\n# Return the vector of individual characters"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to split a string into characters.\nstd::vector<std::string> split(std::string word) {\n    std::vector<std::string> characters;\n    \n    for (char c : word) {\n        characters.push_back(std::string(1, c));\n    }\n    \n    return characters;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/227",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the minimum of three numbers.\n# Compare the first number with the second number.\n    # If the first number is smaller, compare it with the third number.\n        # If the first number is smaller than the third number, return the first number as the minimum.\n        # If the first number is greater than or equal to the third number, return the third number as the minimum.\n    # If the second number is smaller, compare it with the third number.\n        # If the second number is smaller than the third number, return the second number as the minimum.\n        # If the second number is greater than or equal to the third number, return the third number as the minimum."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a <= b && a <= c) {\n        return a;\n    } else if (b <= a && b <= c) {\n        return b;\n    } else {\n        return c;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_cpp/138",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nbool is_Sum_Of_Powers_Of_Two(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = is_Sum_Of_Powers_Of_Two;\n    assert(candidate((10)) == (true));\n    assert(candidate((7)) == (false));\n    assert(candidate((14)) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check if a given number can be represented as the sum of non-zero powers of 2.\n# Initialize a variable to keep track of the current power of 2.\n# Iterate while the given number is greater than 0.\n    # Check if the least significant bit of the number is set.\n        # If it is, subtract the current power of 2 from the number.\n    # Shift the number to the right to check the next bit.\n    # Increment the current power of 2.\n# Check if the number is now 0.\n    # If it is, return true.\n    # If it is not, return false."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nbool is_Sum_Of_Powers_Of_Two(long n) {\n    int power = 0;\n    while (n > 0) {\n        if (n & 1) { // Check if the least significant bit is set\n            n -= pow(2, power);\n        }\n        n >>= 1; // Shift the number to the right\n        power++;\n    }\n    return n == 0;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/83",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nstd::string get_Char(std::string strr) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = get_Char;\n    assert(candidate((\"abc\")) == (\"f\"));\n    assert(candidate((\"gfg\")) == (\"t\"));\n    assert(candidate((\"ab\")) == (\"c\"));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n# Initialize a variable to store the sum of ASCII values.\n# Iterate over each character in the given string.\n    # Calculate the ASCII value of the current character and add it to the sum.\n# Take the sum modulo 26.\n# Convert the resulting value back to a character using ASCII representation.\n# Return the resulting character."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nstd::string get_Char(std::string strr) {\n    int sum = 0;\n\n    // Calculate the sum of ASCII values of all characters in the string\n    for (char c : strr) {\n        sum += c;\n    }\n\n    // Take the sum modulo 26\n    int mod = sum % 26;\n\n    // Convert the resulting value back to a character using ASCII representation\n    char result = 'A' + mod;\n\n    // Return the resulting character\n    return std::string(1, result);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/295",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to return the sum of all divisors of a number.\nlong sum_div(long number) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = sum_div;\n    assert(candidate((8)) == (7));\n    assert(candidate((12)) == (16));\n    assert(candidate((7)) == (1));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to calculate the sum of divisors of a given number.\n# Initialize a variable to store the sum of divisors.\n# Iterate through each number from 1 to the given number.\n    # Check if the current number is a divisor of the given number.\n        # If it is, add it to the sum of divisors.\n# Return the sum of divisors."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to return the sum of all divisors of a number.\nlong sum_div(long number) {\n    long sum = 0;\n    \n    // Iterate through each number from 1 to the given number.\n    for (long i = 1; i <= number; i++) {\n        // Check if the current number is a divisor of the given number.\n        if (number % i == 0) {\n            sum += i;\n        }\n    }\n    \n    return sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/253",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_string_float{\n    long f0;\n    std::string f1;\n    float f2;    Union_long_std_string_float(long _f0) : f0(_f0) {}\n    Union_long_std_string_float(std::string _f1) : f1(_f1) {}\n    Union_long_std_string_float(float _f2) : f2(_f2) {}\n    ~Union_long_std_string_float() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::string f) {\n        return f1 == f ;\n    }    bool operator==(float f) {\n        return f2 == f ;\n    }\n};\n// Write a cppthon function that returns the number of integer elements in a given vector.\nlong count_integer(std::vector<Union_long_std_string_float> list1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = count_integer;\n    assert(candidate((std::vector<Union_long_std_string_float>({1, 2, \"abc\", 1.2f}))) == (2));\n    assert(candidate((std::vector<Union_long_std_string_float>({(long)1, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<Union_long_std_string_float>({(long)1, (long)1.2f, (long)4, (long)5.1f}))) == (2));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count the number of integer elements in a given vector.\n# Initialize a counter for integer elements.\n# Iterate over each element in the vector.\n    # Check if the current element is of type 'long'.\n        # If it is, increment the counter.\n# Return the count of integer elements."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n\nunion Union_long_std_string_float{\n    long f0;\n    std::string f1;\n    float f2;    \n    Union_long_std_string_float(long _f0) : f0(_f0) {}\n    Union_long_std_string_float(std::string _f1) : f1(_f1) {}\n    Union_long_std_string_float(float _f2) : f2(_f2) {}\n    ~Union_long_std_string_float() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    \n    bool operator==(std::string f) {\n        return f1 == f ;\n    }    \n    bool operator==(float f) {\n        return f2 == f ;\n    }\n};\n\n// Write a function that returns the number of integer elements in a given vector.\nlong count_integer(std::vector<Union_long_std_string_float> list1) {\n    long integer_count = 0;\n    \n    // Iterate over the elements in the vector.\n    for (const auto& element : list1) {\n        // Check if the current element is of type 'long'.\n        if (element == long(element.f0)) {\n            integer_count++;\n        }\n    }\n    \n    return integer_count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/572",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to remove duplicate numbers from a given number of vectors.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to remove duplicate numbers from a given vector.\n# Create a set to store unique numbers.\n# Iterate over the input vector.\n    # Check if the current number is already in the set.\n        # If it is not, add it to the set.\n# Convert the set back to a vector and return it."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to remove duplicate numbers from a given vector.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n    std::set<long> unique_nums;\n\n    // Iterate over the input vector to find unique numbers.\n    for (long num : nums) {\n        unique_nums.insert(num);\n    }\n\n    // Convert the set back to a vector and return it.\n    std::vector<long> result(unique_nums.begin(), unique_nums.end());\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/19",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find whether a given vector of integers contains any duplicate element.\nbool test_duplicate(std::vector<long> arraynums) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = test_duplicate;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4, (long)5}))) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check if a given vector of integers contains any duplicate elements.\n# Create a set to store unique elements.\n# Iterate over the input vector.\n    # Check if the current element is already present in the set.\n        # If it is, return true (indicating a duplicate element).\n        # If it is not, add the element to the set.\n# If the iteration completes without finding any duplicate elements, return false.\n"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find whether a given vector of integers contains any duplicate element.\nbool test_duplicate(std::vector<long> arraynums) {\n    std::unordered_set<long> uniqueElements;\n\n    // Iterate over the input vector.\n    for (const auto& num : arraynums) {\n        // Check if the current element is already present in the set.\n        if (uniqueElements.count(num) > 0) {\n            return true; // Duplicate element found.\n        }\n        uniqueElements.insert(num);\n    }\n\n    return false; // No duplicate element found.\n}"
        ]
    },
    {
        "id": "mbpp_cpp/583",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n"
        ],
        "draft_plan": [
            "# Define a recursive function to calculate the nth Catalan number.\n# If the input number is less than or equal to 1, return 1.\n# Initialize a variable to store the result.\n# Iterate from 0 to num-1.\n    # Recursively calculate the Catalan number for each index and multiply it with the Catalan number for the remaining indices.\n    # Add the product to the result.\n# Return the result."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n    // Base case\n    if (num <= 1) {\n        return 1;\n    }\n\n    long result = 0;\n    for (int i = 0; i < num; i++) {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/724",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlong power_base_sum(long base, long power) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = power_base_sum;\n    assert(candidate((2), (100)) == (115));\n    assert(candidate((8), (10)) == (37));\n    assert(candidate((8), (15)) == (62));\n    assert(candidate((3), (3)) == (9));\n}\n"
        ],
        "draft_plan": [
            "# Convert the base to a string.\n# Raise each digit of the base to the power.\n# Sum up all the digits raised to the power.\n# Return the sum."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlong power_base_sum(long base, long power) {\n    std::string base_str = std::to_string(base);\n    long sum = 0;\n\n    // Iterate over each digit of the base.\n    for (char digit : base_str) {\n        int num = digit - '0';\n        // Raise the digit to the power and add it to the sum.\n        sum += std::pow(num, power);\n    }\n\n    return sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/240",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in two vectors and replaces the last element of the first vector with the elements of the second vector.\nstd::vector<std::any> replace_list(std::vector<std::any> list1, std::vector<std::any> list2) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = replace_list;\n    assert(candidate((std::vector<std::any>({(long)1, (long)3, (long)5, (long)7, (long)9, (long)10})), (std::vector<std::any>({(long)2, (long)4, (long)6, (long)8}))) == (std::vector<std::any>({(long)1, (long)3, (long)5, (long)7, (long)9, (long)2, (long)4, (long)6, (long)8})));\n    assert(candidate((std::vector<std::any>({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::vector<std::any>({(long)5, (long)6, (long)7, (long)8}))) == (std::vector<std::any>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})));\n    assert(candidate((std::vector<std::any>({(std::string)\"red\", (std::string)\"blue\", (std::string)\"green\"})), (std::vector<std::any>({(std::string)\"yellow\"}))) == (std::vector<std::any>({(std::string)\"red\", (std::string)\"blue\", (std::string)\"yellow\"})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function that takes in two vectors.\n# Replace the last element of the first vector with the elements of the second vector.\n    # Get the last element of the first vector.\n    # Remove the last element from the first vector.\n    # Append the elements of the second vector to the first vector.\n# Return the modified first vector."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in two vectors and replaces the last element of the first vector with the elements of the second vector.\nstd::vector<std::any> replace_list(std::vector<std::any> list1, std::vector<std::any> list2) {\n    if (!list1.empty()) {\n        list1.pop_back(); // Remove the last element of list1\n    }\n    for (const auto& elem : list2) {\n        list1.push_back(elem); // Append elements of list2 to list1\n    }\n    return list1;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/59",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth octagonal number.\nlong is_octagonal(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = is_octagonal;\n    assert(candidate((5)) == (65));\n    assert(candidate((10)) == (280));\n    assert(candidate((15)) == (645));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the nth octagonal number.\n# Use the formula for octagonal numbers: n(3n-2)\n# Return the calculated octagonal number."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth octagonal number.\nlong is_octagonal(long n) {\n    return n * (3 * n - 2);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/230",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nstd::string replace_blank(std::string str1, std::string char) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = replace_blank;\n    assert(candidate((\"hello people\"), (\"@\")) == (\"hello@people\"));\n    assert(candidate((\"python program language\"), (\"$\")) == (\"python$program$language\"));\n    assert(candidate((\"blank space\"), (\"-\")) == (\"blank-space\"));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to replace blank spaces in a string with a given character.\n# Iterate through each character in the string.\n    # Check if the current character is a blank space.\n        # If it is, replace it with the given character.\n# Return the modified string with replaced blank spaces."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nstd::string replace_blank(std::string str1, std::string ch) {\n    for (int i = 0; i < str1.length(); i++) {\n        if (str1[i] == ' ') {\n            str1[i] = ch[0];\n        }\n    }\n    return str1;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/732",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nstd::string replace_specialchar(std::string text) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = replace_specialchar;\n    assert(candidate((\"Python language, Programming language.\")) == (\"Python:language::Programming:language:\"));\n    assert(candidate((\"a b c,d e f\")) == (\"a:b:c:d:e:f\"));\n    assert(candidate((\"ram reshma,ram rahim\")) == (\"ram:reshma:ram:rahim\"));\n}\n"
        ],
        "draft_plan": [
            "# Iterate through each character in the given string\n    # Check if the current character is a space, comma, or dot\n        # If it is, replace it with a colon\n# Return the modified string with replaced special characters."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nstd::string replace_specialchar(std::string text) {\n    std::replace_if(text.begin(), text.end(), [](char c) {\n        return (c == ' ' || c == ',' || c == '.');\n    }, ':');\n    return text;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/116",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a given tuple of positive integers into a single integer.\nlong tuple_to_int(std::tuple<long, long, long> nums) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = tuple_to_int;\n    assert(candidate((std::make_tuple(1, 2, 3))) == (123));\n    assert(candidate((std::make_tuple(4, 5, 6))) == (456));\n    assert(candidate((std::make_tuple(5, 6, 7))) == (567));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to convert a given tuple of positive integers into a single integer.\n# Retrieve the three elements from the tuple.\n# Create a string representation of each element.\n# Concatenate the string representations of the elements.\n# Convert the concatenated string into a long integer.\n# Return the long integer."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a given tuple of positive integers into a single integer.\nlong tuple_to_int(std::tuple<long, long, long> nums) {\n    long a = std::get<0>(nums);\n    long b = std::get<1>(nums);\n    long c = std::get<2>(nums);\n\n    std::string str_a = std::to_string(a);\n    std::string str_b = std::to_string(b);\n    std::string str_c = std::to_string(c);\n\n    std::string concatenated_str = str_a + str_b + str_c;\n\n    long converted_int = std::stol(concatenated_str);\n\n    return converted_int;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/293",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the third side of a right angled triangle.\nfloat otherside_rightangle(long w, long h) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = otherside_rightangle;\n    assert(candidate((7), (8)) == (10.63014581273465f));\n    assert(candidate((3), (4)) == (float(5)));\n    assert(candidate((7), (15)) == (16.55294535724685f));\n}\n"
        ],
        "draft_plan": [
            "# Use the Pythagorean theorem to find the length of the hypotenuse (c) of the right-angled triangle.\n    # The Pythagorean theorem states that in a right-angled triangle, the square of the hypotenuse is equal to the sum of the squares of the other two sides.\n    # The formula is c = sqrt(a^2 + b^2), where a and b are the lengths of the other two sides.\n# Return the length of the hypotenuse (c) as the result."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the third side of a right angled triangle.\nfloat otherside_rightangle(long w, long h) {\n    float c = sqrt(w * w + h * h);\n    return c;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/585",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_float{\n    std::string f0;\n    float f1;    Union_std_string_float(std::string _f0) : f0(_f0) {}\n    Union_std_string_float(float _f1) : f1(_f1) {}\n    ~Union_std_string_float() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the n most expensive items in a given dataset.\nstd::vector<std::map<std::string,Union_std_string_float>> expensive_items(std::vector<std::map<std::string,Union_std_string_float>> items, long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = expensive_items;\n    assert(candidate((std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-1\"}, {\"price\", 101.1f}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22f}})})), (1)) == (std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22f}})})));\n    assert(candidate((std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-1\"}, {\"price\", 101.1f}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22f}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-3\"}, {\"price\", 45.09f}})})), (2)) == (std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22f}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-1\"}, {\"price\", 101.1f}})})));\n    assert(candidate((std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-1\"}, {\"price\", 101.1f}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22f}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-3\"}, {\"price\", 45.09f}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-4\"}, {\"price\", 22.75f}})})), (1)) == (std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22f}})})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the n most expensive items in a given dataset.\n# Sort the items in descending order based on their prices.\n# Create a new vector to store the n most expensive items.\n# Iterate over the sorted items.\n    # Check if the number of items added to the new vector is equal to n.\n        # If it is, break the loop.\n    # Add the current item to the new vector.\n# Return the new vector containing the n most expensive items."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_float{\n    std::string f0;\n    float f1;\n    Union_std_string_float(std::string _f0) : f0(_f0) {}\n    Union_std_string_float(float _f1) : f1(_f1) {}\n    ~Union_std_string_float() {}\n    bool operator==(std::string f) {\n        return f0 == f;\n    }\n    bool operator==(float f) {\n        return f1 == f;\n    }\n};\n\n// Write a function to find the n most expensive items in a given dataset.\nstd::vector<std::map<std::string, Union_std_string_float>> expensive_items(std::vector<std::map<std::string, Union_std_string_float>> items, long n) {\n    // Sort the items in descending order based on their prices.\n    std::sort(items.begin(), items.end(), [](const std::map<std::string, Union_std_string_float>& a, const std::map<std::string, Union_std_string_float>& b) {\n        return a[\"price\"].f1 > b[\"price\"].f1;\n    });\n\n    // Create a new vector to store the n most expensive items.\n    std::vector<std::map<std::string, Union_std_string_float>> result;\n\n    // Iterate over the sorted items.\n    for (const auto& item : items) {\n        // Check if the number of items added to the new vector is equal to n.\n        if (result.size() == n) {\n            break;\n        }\n\n        // Add the current item to the new vector.\n        result.push_back(item);\n    }\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/558",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the sum of the per-digit difference between two integers.\nlong digit_distance_nums(long n1, long n2) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = digit_distance_nums;\n    assert(candidate((1), (2)) == (1));\n    assert(candidate((23), (56)) == (6));\n    assert(candidate((123), (256)) == (7));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the sum of the per-digit difference between two integers.\n# Convert the two integers to strings.\n# Initialize a sum variable to store the result.\n# Iterate over the digits of the first integer.\n    # Get the corresponding digit from the second integer.\n    # Calculate the absolute difference between the two digits.\n    # Add the difference to the sum variable.\n# Return the sum variable."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the sum of the per-digit difference between two integers.\nlong digit_distance_nums(long n1, long n2) {\n    std::string str1 = std::to_string(n1);\n    std::string str2 = std::to_string(n2);\n\n    long sum = 0;\n\n    for (int i = 0; i < str1.length(); i++) {\n        int digit1 = str1[i] - '0';\n        int digit2 = str2[i] - '0';\n        int difference = abs(digit1 - digit2);\n        sum += difference;\n    }\n\n    return sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/643",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Check if the length of the string is less than 3, return false if it is.\n# Iterate through each character in the string, starting from the second character and ending at the second-to-last character.\n    # Check if the current character is 'z'.\n        # If it is, check if the previous and next characters are not equal to 'z'.\n            # If they are not, return true.\n# If the loop completes without finding a valid 'z' in the middle of the word, return false."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int n = text.length();\n    if (n < 3) {\n        return false;\n    }\n    \n    for (int i = 1; i < n - 1; i++) {\n        if (text[i] == 'z' && text[i-1] != 'z' && text[i+1] != 'z') {\n            return true;\n        }\n    }\n    \n    return false;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/593",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to remove leading zeroes from an IP address.\n# Split the IP address into octets using the '.' delimiter.\n# Iterate over each octet.\n    # Remove any leading zeroes from the octet.\n    # Convert the octet back to string format.\n# Join the modified octets back together using the '.' delimiter.\n# Return the modified IP address without leading zeroes."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to remove leading zeroes from an IP address.\nstd::string removezero_ip(std::string ip) {\n    std::vector<std::string> octets;\n    std::stringstream ss(ip);\n    std::string octet;\n\n    // Split the IP address into octets using the '.' delimiter.\n    while (std::getline(ss, octet, '.')) {\n        // Remove leading zeroes from the octet.\n        octet.erase(0, std::min(octet.find_first_not_of('0'), octet.size() - 1));\n        octets.push_back(octet);\n    }\n\n    // Join the modified octets back together using the '.' delimiter.\n    std::string result = \"\";\n    for (const auto& oct : octets) {\n        result += oct + \".\";\n    }\n\n    // Remove the trailing '.' character from the result.\n    result.pop_back();\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/425",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of subvectors containing a particular element.\nlong count_element_in_list(std::vector<std::vector<std::any>> list1, std::any x) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = count_element_in_list;\n    assert(candidate((std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)1, (long)11}), (std::vector<long>)std::vector<long>({(long)1, (long)15, (long)7})})), (std::any(1))) == (3));\n    assert(candidate((std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"B\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"C\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"D\", (std::string)\"E\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"B\", (std::string)\"C\", (std::string)\"D\"})})), (std::any(\"A\"))) == (3));\n    assert(candidate((std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"B\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"C\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"A\", (std::string)\"D\", (std::string)\"E\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"B\", (std::string)\"C\", (std::string)\"D\"})})), (std::any(\"E\"))) == (1));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count the number of subvectors containing a particular element.\n# Initialize a counter for the number of subvectors containing the element.\n# Iterate over each subvector in the input list.\n    # Check if the element exists in the current subvector.\n        # If it does, increment the counter.\n# Return the count of subvectors containing the element."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of subvectors containing a particular element.\nlong count_element_in_list(std::vector<std::vector<std::any>> list1, std::any x) {\n    long count = 0;\n\n    // Iterate over each subvector in the input list.\n    for (const auto& subvector : list1) {\n        // Check if the element exists in the current subvector.\n        if (std::find(subvector.begin(), subvector.end(), x) != subvector.end()) {\n            count++;\n        }\n    }\n\n    return count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/127",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to multiply two integers.\nlong multiply_int(long x, long y) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = multiply_int;\n    assert(candidate((10), (20)) == (200));\n    assert(candidate((5), (10)) == (50));\n    assert(candidate((4), (8)) == (32));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to multiply two integers.\n# Multiply the two input integers.\n# Return the result of the multiplication."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to multiply two integers.\nlong multiply_int(long x, long y) {\n    return x * y;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/470",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nstd::tuple<long, long, long, long> add_pairwise(std::tuple<long, long, long, long, long> test_tup) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = add_pairwise;\n    assert(candidate((std::make_tuple(1, 5, 7, 8, 10))) == (std::make_tuple(6, 12, 15, 18)));\n    assert(candidate((std::make_tuple(2, 6, 8, 9, 11))) == (std::make_tuple(8, 14, 17, 20)));\n    assert(candidate((std::make_tuple(3, 7, 9, 10, 12))) == (std::make_tuple(10, 16, 19, 22)));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the pairwise addition of neighboring elements in the tuple.\n# Create a new tuple to store the pairwise additions.\n# Iterate over the given tuple, starting from the second element.\n    # Retrieve the current element and the previous element.\n    # Add the current element and the previous element together.\n    # Append the result to the new tuple.\n# Return the new tuple containing the pairwise additions."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nstd::tuple<long, long, long, long> add_pairwise(std::tuple<long, long, long, long, long> test_tup) {\n    std::tuple<long, long, long, long> result;\n\n    // Iterate over the given tuple, starting from the second element.\n    for (int i = 1; i < 5; i++) {\n        // Retrieve the current element and the previous element.\n        long current = std::get<i>(test_tup);\n        long previous = std::get<i-1>(test_tup);\n\n        // Add the current element and the previous element together.\n        long sum = current + previous;\n\n        // Append the result to the new tuple.\n        std::get<i-1>(result) = sum;\n    }\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/120",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum absolute product between numbers in pairs of tuples within a given vector.\nlong max_product_tuple(std::vector<std::tuple<long, long>> list1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = max_product_tuple;\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 7), (std::tuple<long, long>)std::make_tuple(2, 6), (std::tuple<long, long>)std::make_tuple(1, 8), (std::tuple<long, long>)std::make_tuple(4, 9)}))) == (36));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(10, 20), (std::tuple<long, long>)std::make_tuple(15, 2), (std::tuple<long, long>)std::make_tuple(5, 10)}))) == (200));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(11, 44), (std::tuple<long, long>)std::make_tuple(10, 15), (std::tuple<long, long>)std::make_tuple(20, 5), (std::tuple<long, long>)std::make_tuple(12, 9)}))) == (484));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the maximum absolute product between numbers in pairs of tuples.\n# Initialize a variable to store the maximum product.\n# Iterate over the input vector of tuples.\n    # Retrieve the two elements of the tuple.\n    # Calculate the absolute product of the two elements.\n    # Check if the absolute product is greater than the current maximum product.\n        # If it is, update the maximum product.\n# Return the maximum product."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum absolute product between numbers in pairs of tuples within a given vector.\nlong max_product_tuple(std::vector<std::tuple<long, long>> list1) {\n    long max_product = 0;\n\n    // Iterate over the list1 to find the maximum product.\n    for (const auto& tup : list1) {\n        long a = std::get<0>(tup);\n        long b = std::get<1>(tup);\n        long product = std::abs(a * b);\n\n        // Update the maximum product if the current product is greater.\n        if (product > max_product) {\n            max_product = product;\n        }\n    }\n\n    return max_product;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/101",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the kth element in the given vector using 1-based indexing.\nlong kth_element(std::vector<long> arr, long k) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = kth_element;\n    assert(candidate((std::vector<long>({(long)12, (long)3, (long)5, (long)7, (long)19})), (2)) == (3));\n    assert(candidate((std::vector<long>({(long)17, (long)24, (long)8, (long)23})), (3)) == (8));\n    assert(candidate((std::vector<long>({(long)16, (long)21, (long)25, (long)36, (long)4})), (4)) == (36));\n}\n"
        ],
        "draft_plan": [
            "# Sort the given vector in non-decreasing order.\n# Return the element at index k-1 from the sorted vector.\n"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the kth element in the given vector using 1-based indexing.\nlong kth_element(std::vector<long> arr, long k) {\n    std::sort(arr.begin(), arr.end());\n    return arr[k - 1];\n}"
        ]
    },
    {
        "id": "mbpp_cpp/625",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to interchange the first and last element in a given vector.\nstd::vector<long> swap_List(std::vector<long> newList) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = swap_List;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)3, (long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)4}))) == (std::vector<long>({(long)4, (long)2, (long)3, (long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6}))) == (std::vector<long>({(long)6, (long)5, (long)4})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to swap the first and last elements in a given vector.\n# Check if the vector has at least two elements.\n    # If it does, swap the first and last elements using the std::swap function.\n# Return the modified vector."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to interchange the first and last element in a given vector.\nstd::vector<long> swap_List(std::vector<long> newList) {\n    if (newList.size() >= 2) {\n        std::swap(newList[0], newList[newList.size() - 1]);\n    }\n    return newList;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/278",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_tuple_long, long_{\n    long f0;\n    std::tuple<long, long> f1;    Union_long_std_tuple_long, long_(long _f0) : f0(_f0) {}\n    Union_long_std_tuple_long, long_(std::tuple<long, long> _f1) : f1(_f1) {}\n    ~Union_long_std_tuple_long, long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::tuple<long, long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the number of elements that occurs before the vector element in the given tuple.\nlong count_first_elements(std::vector<Union_long_std_tuple_long, long_> test_tup) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = count_first_elements;\n    assert(candidate((std::vector<Union_long_std_tuple_long, long_>({1, 5, 7, std::make_tuple(4, 6), 10}))) == (3));\n    assert(candidate((std::vector<Union_long_std_tuple_long, long_>({2, 9, std::make_tuple(5, 7), 11}))) == (2));\n    assert(candidate((std::vector<Union_long_std_tuple_long, long_>({11, 15, 5, 8, std::make_tuple(2, 3), 8}))) == (4));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count the number of elements that occur before the vector element in the given tuple.\n# Initialize a counter variable for the count.\n# Iterate over the elements in the input tuple.\n    # Check the type of the current element.\n        # If it is of type 'long', compare it with the vector element.\n            # If they are equal, break the loop.\n            # Otherwise, increment the counter.\n        # If it is of type 'std::tuple<long, long>', compare the first element of the tuple with the vector element.\n            # If they are equal, break the loop.\n            # Otherwise, increment the counter.\n# Return the value of the counter as the result."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n\nunion Union_long_std_tuple_long {\n    long f0;\n    std::tuple<long, long> f1;\n\n    Union_long_std_tuple_long(long _f0) : f0(_f0) {}\n    Union_long_std_tuple_long(std::tuple<long, long> _f1) : f1(_f1) {}\n    ~Union_long_std_tuple_long() {}\n\n    bool operator==(long f) {\n        return f0 == f;\n    }\n\n    bool operator==(std::tuple<long, long> f) {\n        return f1 == f;\n    }\n};\n\n// Write a function to find the number of elements that occur before the vector element in the given tuple.\nlong count_first_elements(std::vector<Union_long_std_tuple_long> test_tup) {\n    long count = 0;\n    for (const auto& elem : test_tup) {\n        if (elem == test_tup.back()) {\n            break;\n        }\n        count++;\n    }\n    return count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/786",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to locate the right insertion point for a specified value in sorted order.\nlong right_insertion(std::vector<long> a, long x) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = right_insertion;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5})), (6)) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5})), (3)) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5})), (7)) == (4));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to locate the right insertion point for a specified value in sorted order.\n# Initialize two pointers, start and end, to the first and last indices of the given vector, respectively.\n# While start is less than or equal to end:\n    # Calculate the middle index as the average of start and end.\n    # Check if the value at the middle index is less than the specified value.\n        # If it is, update start to be the middle index plus one.\n        # If it is not, update end to be the middle index minus one.\n# Return the updated start pointer as the right insertion point for the specified value."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to locate the right insertion point for a specified value in sorted order.\nlong right_insertion(std::vector<long> a, long x) {\n    long start = 0;\n    long end = a.size() - 1;\n\n    while (start <= end) {\n        long mid = (start + end) / 2;\n        if (a[mid] < x) {\n            start = mid + 1;\n        } else {\n            end = mid - 1;\n        }\n    }\n\n    return start;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/20",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if the given number is woodball or not.\nbool is_woodall(long x) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = is_woodall;\n    assert(candidate((383)) == (true));\n    assert(candidate((254)) == (false));\n    assert(candidate((200)) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check if the given number is a Woodall number.\n# Calculate the Woodall number using the formula: x = n * 2^n - 1\n# Initialize a variable to hold the exponent value, starting from 1.\n# Iterate while the calculated Woodall number is less than or equal to the given number.\n    # Calculate the Woodall number using the formula.\n    # Check if the calculated Woodall number is equal to the given number.\n        # If it is, return true.\n    # Increment the exponent value.\n# If no matching Woodall number is found, return false."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if the given number is a Woodall number.\nbool is_woodall(long x) {\n    long n = 1;\n    long woodall = n * std::pow(2, n) - 1;\n\n    while (woodall <= x) {\n        if (woodall == x) {\n            return true;\n        }\n        n++;\n        woodall = n * std::pow(2, n) - 1;\n    }\n\n    return false;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/428",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort the given vector by using shell sort.\nstd::vector<long> shell_sort(std::vector<long> my_list) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = shell_sort;\n    assert(candidate((std::vector<long>({(long)12, (long)23, (long)4, (long)5, (long)3, (long)2, (long)12, (long)81, (long)56, (long)95}))) == (std::vector<long>({(long)2, (long)3, (long)4, (long)5, (long)12, (long)12, (long)23, (long)56, (long)81, (long)95})));\n    assert(candidate((std::vector<long>({(long)24, (long)22, (long)39, (long)34, (long)87, (long)73, (long)68}))) == (std::vector<long>({(long)22, (long)24, (long)34, (long)39, (long)68, (long)73, (long)87})));\n    assert(candidate((std::vector<long>({(long)32, (long)30, (long)16, (long)96, (long)82, (long)83, (long)74}))) == (std::vector<long>({(long)16, (long)30, (long)32, (long)74, (long)82, (long)83, (long)96})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to perform shell sort on a given vector.\n# Calculate the gap value for the initial iteration.\n# Iterate over the gaps until the gap value is 0.\n    # Divide the gap value by 2 to get the next gap value.\n    # Iterate over the subarrays with the current gap value.\n        # Perform insertion sort on the subarray.\n# Return the sorted vector."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort the given vector by using shell sort.\nstd::vector<long> shell_sort(std::vector<long> my_list) {\n    int n = my_list.size();\n \n    // Start with a large gap value\n    for (int gap = n/2; gap > 0; gap /= 2) {\n        // Perform insertion sort on subarrays defined by the current gap value\n        for (int i = gap; i < n; i++) {\n            int temp = my_list[i];\n            int j;\n            for (j = i; j >= gap && my_list[j - gap] > temp; j -= gap) {\n                my_list[j] = my_list[j - gap];\n            }\n            my_list[j] = temp;\n        }\n    }\n \n    return my_list;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/556",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of pairs whose xor value is odd.\nlong find_Odd_Pair(std::vector<long> A, long N) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find_Odd_Pair;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)7, (long)2, (long)1})), (5)) == (6));\n    assert(candidate((std::vector<long>({(long)7, (long)2, (long)8, (long)1, (long)0, (long)5, (long)11})), (7)) == (12));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (3)) == (2));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count the number of pairs whose XOR value is odd.\n# Initialize a counter for the number of odd XOR pairs.\n# Iterate over the list of numbers, A.\n    # Iterate again over the list of numbers, A, starting from the next index.\n        # Compute the XOR value of the current pair of numbers.\n        # Check if the XOR value is odd.\n            # If it is, increment the counter for odd XOR pairs.\n# Return the count of odd XOR pairs."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to count the number of pairs whose XOR value is odd.\nlong find_Odd_Pair(std::vector<long> A, long N) {\n    long odd_count = 0;\n\n    // Iterate over the list of numbers A\n    for (long i = 0; i < N; i++) {\n        // Iterate over the list of numbers A starting from the next index\n        for (long j = i + 1; j < N; j++) {\n            // Compute the XOR value of the current pair of numbers\n            long xor_val = A[i] ^ A[j];\n            // Check if the XOR value is odd\n            if (xor_val % 2 != 0) {\n                odd_count++;\n            }\n        }\n    }\n\n    return odd_count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/797",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the sum of all odd natural numbers within the range l and r.\nlong sum_in_range(long l, long r) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = sum_in_range;\n    assert(candidate((2), (5)) == (8));\n    assert(candidate((5), (7)) == (12));\n    assert(candidate((7), (13)) == (40));\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable to store the sum of the odd numbers and set it to 0.\n# Iterate over the range of numbers from l to r.\n    # Check if the current number is odd.\n        # If it is, add it to the sum variable.\n# Return the sum of the odd numbers."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cpp function to find the sum of all odd natural numbers within the range l and r.\nlong sum_in_range(long l, long r) {\n    long sum = 0;\n\n    // Iterate over the range of numbers from l to r.\n    for (long i = l; i <= r; i++) {\n        // Check if the current number is odd.\n        if (i % 2 != 0) {\n            // If it is, add it to the sum variable.\n            sum += i;\n        }\n    }\n\n    return sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/17",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns the perimeter of a square given its side length as input.\nlong square_perimeter(long a) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = square_perimeter;\n    assert(candidate((10)) == (40));\n    assert(candidate((5)) == (20));\n    assert(candidate((4)) == (16));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to calculate the perimeter of a square given its side length.\n# Multiply the side length by 4 to obtain the perimeter.\n# Return the calculated perimeter."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns the perimeter of a square given its side length as input.\nlong square_perimeter(long a) {\n    return 4 * a;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/765",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nlong is_polite(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = is_polite;\n    assert(candidate((7)) == (11));\n    assert(candidate((4)) == (7));\n    assert(candidate((9)) == (13));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check if a number is polite.\n# Initialize a variable to track the count of polite divisors.\n# Iterate from 2 to the square root of the given number.\n    # Check if the current number is a divisor of the given number.\n        # If it is, increment the count of polite divisors.\n        # If the count exceeds 2, return false.\n# Check if the count of polite divisors is equal to 2.\n    # If it is, return true.\n    # If it is not, return false."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nlong is_polite(long n) {\n    int polite_divisors = 0;\n\n    // Iterate from 2 to the square root of n\n    for (int i = 2; i * i <= n; i++) {\n        // Check if i is a divisor of n\n        if (n % i == 0) {\n            polite_divisors++;\n            // If the number of divisors exceeds 2, return false\n            if (polite_divisors > 2) {\n                return false;\n            }\n        }\n    }\n\n    // Check if there are exactly 2 polite divisors\n    return polite_divisors == 2;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/162",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nlong sum_series(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = sum_series;\n    assert(candidate((6)) == (12));\n    assert(candidate((10)) == (30));\n    assert(candidate((9)) == (25));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to calculate the sum of the series.\n# Initialize a variable to store the sum of the series.\n# Iterate from i = 0 to n // 2 (inclusive).\n    # Calculate the value (n - 2*i) and add it to the sum.\n# Return the sum of the series."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to calculate the sum (n - 2*i) from i=0 to n // 2.\nlong sum_series(long n) {\n    long sum = 0;\n    for (long i = 0; i <= n / 2; i++) {\n        sum += (n - 2 * i);\n    }\n    return sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/579",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the dissimilar elements in the given two tuples.\nstd::tuple<long, long, long, long> find_dissimilar(std::tuple<long, long, long, long> test_tup1, std::tuple<long, long, long, long> test_tup2) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find_dissimilar;\n    assert(candidate((std::make_tuple(3, 4, 5, 6)), (std::make_tuple(5, 7, 4, 10))) == (std::make_tuple(3, 6, 7, 10)));\n    assert(candidate((std::make_tuple(1, 2, 3, 4)), (std::make_tuple(7, 2, 3, 9))) == (std::make_tuple(1, 4, 7, 9)));\n    assert(candidate((std::make_tuple(21, 11, 25, 26)), (std::make_tuple(26, 34, 21, 36))) == (std::make_tuple(34, 36, 11, 25)));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find dissimilar elements in two tuples.\n# Initialize a new tuple to store the dissimilar elements.\n# Iterate over the elements of the tuples.\n    # Check if the corresponding elements in the two tuples are different.\n        # If they are different, add the element to the new tuple.\n# Return the new tuple containing the dissimilar elements."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the dissimilar elements in the given two tuples.\nstd::tuple<long, long, long, long> find_dissimilar(std::tuple<long, long, long, long> test_tup1, std::tuple<long, long, long, long> test_tup2) {\n    std::tuple<long, long, long, long> dissimilar_elements;\n\n    // Iterate over the elements of the tuples.\n    for (int i = 0; i < 4; i++) {\n        // Check if the corresponding elements in the two tuples are different.\n        if (std::get<i>(test_tup1) != std::get<i>(test_tup2)) {\n            // Add the element to the new tuple.\n            std::get<i>(dissimilar_elements) = std::get<i>(test_tup1);\n        }\n    }\n\n    return dissimilar_elements;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/305",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to return two words from a vector of words starting with letter 'p'.\nstd::tuple<std::string, std::string> start_withp(std::vector<std::string> words) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = start_withp;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python PHP\", (std::string)\"Java JavaScript\", (std::string)\"c c++\"}))) == (std::make_tuple(\"Python\", \"PHP\")));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python Programming\", (std::string)\"Java Programming\"}))) == (std::make_tuple(\"Python\", \"Programming\")));\n    assert(candidate((std::vector<std::string>({(std::string)\"Pqrst Pqr\", (std::string)\"qrstuv\"}))) == (std::make_tuple(\"Pqrst\", \"Pqr\")));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to return two words starting with the letter 'p'.\n# Initialize two empty strings to store the words.\n# Iterate over the input vector of words.\n    # Check if the current word starts with the letter 'p'.\n        # If it does, add the word to one of the empty strings.\n        # If the first empty string is already filled, add the word to the second empty string.\n        # Break the loop if both strings are filled.\n# Return a tuple containing the two words."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to return two words from a vector of words starting with letter 'p'.\nstd::tuple<std::string, std::string> start_withp(std::vector<std::string> words) {\n    std::string word1, word2;\n\n    for (const auto& word : words) {\n        if (word[0] == 'p' || word[0] == 'P') {\n            if (word1.empty()) {\n                word1 = word;\n            } else if (word2.empty()) {\n                word2 = word;\n                break;\n            }\n        }\n    }\n\n    return std::make_tuple(word1, word2);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/411",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"android_tv\")) == (\"AndroidTv\"));\n    assert(candidate((\"google_pixel\")) == (\"GooglePixel\"));\n    assert(candidate((\"apple_watch\")) == (\"AppleWatch\"));\n}\n"
        ],
        "draft_plan": [
            "# Initialize an empty string to store the camel case result.\n# Iterate through each character in the given snake case string.\n    # Check if the current character is an underscore.\n        # If it is, skip it and convert the next character to uppercase, then append it to the result string.\n        # If it is the first character, convert it to lowercase and append it to the result string.\n    # If the current character is not an underscore, append it to the result string as is.\n# Return the camel case result string."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    \n    // Iterate through each character in the given string\n    for (int i = 0; i < word.length(); i++) {\n        // Check if the current character is an underscore\n        if (word[i] == '_') {\n            // If it is, skip it and convert the next character to uppercase\n            result += std::toupper(word[i+1]);\n            // Skip the underscore by incrementing the index\n            i++;\n        } else {\n            // If the current character is not an underscore, append it to the result string as is\n            result += word[i];\n        }\n    }\n    \n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/234",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the volume of a cube given its side length.\nlong volume_cube(long l) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = volume_cube;\n    assert(candidate((3)) == (27));\n    assert(candidate((2)) == (8));\n    assert(candidate((5)) == (125));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the volume of a cube given its side length.\n# Calculate the volume of the cube by raising the side length to the power of 3.\n# Return the calculated volume."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the volume of a cube given its side length.\nlong volume_cube(long l) {\n    long volume = l * l * l;\n    return volume;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/455",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given month number contains 31 days or not.\nbool check_monthnumb_number(long monthnum2) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = check_monthnumb_number;\n    assert(candidate((5)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((6)) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check whether the given month number contains 31 days or not.\n# Use a switch statement to evaluate the given month number.\n    # For months with 31 days (January, March, May, July, August, October, December), return true.\n    # For all other months, return false."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given month number contains 31 days or not.\nbool check_monthnumb_number(long monthnum2) {\n    switch (monthnum2) {\n        case 1: // January\n        case 3: // March\n        case 5: // May\n        case 7: // July\n        case 8: // August\n        case 10: // October\n        case 12: // December\n            return true;\n        default:\n            return false;\n    }\n}\n"
        ]
    },
    {
        "id": "mbpp_cpp/228",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether all the bits are unset in the given range or not.\nbool all_Bits_Set_In_The_Given_Range(long n, long l, long r) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = all_Bits_Set_In_The_Given_Range;\n    assert(candidate((4), (1), (2)) == (true));\n    assert(candidate((17), (2), (4)) == (true));\n    assert(candidate((39), (4), (6)) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check if all bits are set in the given range.\n# Create a mask with all bits set in the given range.\n# Perform a bitwise AND operation between the given number and the mask.\n# Check if the result is equal to the mask.\n    # If it is, return true.\n    # If it is not, return false."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether all the bits are unset in the given range or not.\nbool all_Bits_Set_In_The_Given_Range(long n, long l, long r) {\n    long mask = ((1 << (r - l + 1)) - 1) << l;\n    return ((n & mask) == mask);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/460",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to get the first element of each subvector.\nstd::vector<long> Extract(std::vector<std::vector<long>> lst) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = Extract;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9})}))) == (std::vector<long>({(long)1, (long)3, (long)6})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5})}))) == (std::vector<long>({(long)1, (long)4})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)9, (long)8, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2})}))) == (std::vector<long>({(long)9, (long)1})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to extract the first element of each subvector.\n# Initialize an empty vector to store the extracted elements.\n# Iterate over each subvector in the input vector.\n    # Check if the subvector is empty.\n        # If it is, skip to the next subvector.\n    # Retrieve the first element of the subvector and append it to the result vector.\n# Return the result vector containing the extracted elements."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to get the first element of each subvector.\nstd::vector<long> Extract(std::vector<std::vector<long>> lst) {\n    std::vector<long> result;\n\n    // Iterate over each subvector in the input vector.\n    for (const auto& subvector : lst) {\n        // Check if the subvector is empty.\n        if (subvector.empty()) {\n            continue;\n        }\n        // Retrieve the first element of the subvector and append it to the result vector.\n        result.push_back(subvector.front());\n    }\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/574",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the surface area of a cylinder.\nfloat surfacearea_cylinder(long r, long h) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = surfacearea_cylinder;\n    assert(candidate((10), (5)) == (942.45f));\n    assert(candidate((4), (5)) == (226.18800000000002f));\n    assert(candidate((4), (10)) == (351.848f));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to calculate the surface area of a cylinder.\n# Calculate the area of the two circular bases of the cylinder: 2 * \u03c0 * r^2\n# Calculate the area of the lateral surface of the cylinder: 2 * \u03c0 * r * h\n# Add the areas of the bases and the lateral surface to get the total surface area of the cylinder.\n# Return the total surface area."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the surface area of a cylinder.\nfloat surfacearea_cylinder(long r, long h) {\n    float base_area = 2 * M_PI * r * r;\n    float lateral_area = 2 * M_PI * r * h;\n    float total_area = base_area + lateral_area;\n    return total_area;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/639",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to sum the length of names after removing names starting with a lowercase letter.\n# Initialize a variable to store the sum of lengths.\n# Iterate over each name in the given vector of names.\n    # Check if the first character of the name is lowercase.\n        # If it is not, add the length of the name to the sum.\n# Return the sum of lengths."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum_length = 0;\n\n    // Iterate over each name in the vector.\n    for (const auto& name : sample_names) {\n        // Check if the first character is lowercase.\n        if (std::islower(name[0]) == 0) {\n            sum_length += name.length();\n        }\n    }\n\n    return sum_length;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/407",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nstd::any rearrange_bigger(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = rearrange_bigger;\n    assert(candidate((12)) == (std::any(21)));\n    assert(candidate((10)) == (std::any(false)));\n    assert(candidate((102)) == (std::any(120)));\n}\n"
        ],
        "draft_plan": [
            "# Convert the given number to a string\n# Initialize a variable to store the next bigger number (initialized as -1)\n# Iterate from the rightmost digit to the leftmost digit\n    # Compare each digit with the digit to its right\n        # If the current digit is greater than the digit to its right, swap them\n        # Sort all the digits to the right of the current digit in ascending order\n        # Convert the modified string back to a number\n        # Update the value of the next bigger number if it is greater than the previous value\n# Return the next bigger number, or -1 if no such number exists"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nstd::any rearrange_bigger(long n) {\n    std::string str = std::to_string(n);\n    int len = str.length();\n    \n    // Find the first digit from the right that is smaller than its right neighbor\n    int i = len - 2;\n    while (i >= 0 && str[i] >= str[i + 1]) {\n        i--;\n    }\n\n    if (i < 0) {\n        return -1;\n    }\n    \n    // Find the smallest digit greater than the digit at index i among the digits to the right of index i\n    int j = len - 1;\n    while (j > i && str[j] <= str[i]) {\n        j--;\n    }\n    \n    // Swap the digit at index i with the smallest digit greater than it\n    std::swap(str[i], str[j]);\n    \n    // Sort all the digits to the right of index i in ascending order\n    std::sort(str.begin() + i + 1, str.end());\n    \n    // Convert the modified string back to a number\n    long next_bigger = std::stol(str);\n    \n    return next_bigger;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/171",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the perimeter of a regular pentagon from the length of its sides.\nlong perimeter_pentagon(long a) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = perimeter_pentagon;\n    assert(candidate((5)) == (25));\n    assert(candidate((10)) == (50));\n    assert(candidate((15)) == (75));\n}\n"
        ],
        "draft_plan": [
            "# Calculate the perimeter of a regular pentagon using the formula: perimeter = 5 * side length\n# Return the calculated perimeter"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the perimeter of a regular pentagon from the length of its sides.\nlong perimeter_pentagon(long a) {\n    return 5 * a;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/245",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the maximum sum of a bitonic subsequence.\n# Initialize two arrays, increasing and decreasing, to store the maximum sum of increasing and decreasing subsequences respectively.\n# Initialize the maximum sum to 0.\n# Iterate over the input array from left to right.\n    # For each element, find the maximum sum of increasing subsequences ending at that element.\n        # Iterate over all previous elements and find the maximum sum of increasing subsequences that can be extended to the current element.\n            # If the current element is greater than the previous element, update the maximum sum for the current element.\n    # Store the maximum sum of increasing subsequences ending at the current element in the increasing array.\n# Iterate over the input array from right to left.\n    # For each element, find the maximum sum of decreasing subsequences starting at that element.\n        # Iterate over all following elements and find the maximum sum of decreasing subsequences that can be extended from the current element.\n            # If the current element is greater than the following element, update the maximum sum for the current element.\n    # Store the maximum sum of decreasing subsequences starting at the current element in the decreasing array.\n# Iterate over the input array and find the maximum sum of bitonic subsequences.\n    # For each element, calculate the sum of the maximum increasing subsequence ending at that element and the maximum decreasing subsequence starting from that element.\n    # Update the maximum sum if the calculated sum is greater than the current maximum sum.\n# Return the maximum sum of bitonic subsequences."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> increasing(n, 0);\n    std::vector<long> decreasing(n, 0);\n\n    // Calculate the maximum sum of increasing subsequences\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                increasing[i] = std::max(increasing[i], increasing[j]);\n            }\n        }\n        increasing[i] += arr[i];\n    }\n\n    // Calculate the maximum sum of decreasing subsequences\n    for (int i = n - 1; i >= 0; i--) {\n        for (int j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j]) {\n                decreasing[i] = std::max(decreasing[i], decreasing[j]);\n            }\n        }\n        decreasing[i] += arr[i];\n    }\n\n    long max_sum = 0;\n\n    // Calculate the maximum sum of bitonic subsequences\n    for (int i = 0; i < n; i++) {\n        long current_sum = increasing[i] + decreasing[i] - arr[i];\n        max_sum = std::max(max_sum, current_sum);\n    }\n\n    return max_sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/580",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove uneven elements in the nested mixed tuple.\nstd::any extract_even(std::tuple<long, long, std::tuple<long, long, std::tuple<long, long>>, long, long> test_tuple) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = extract_even;\n    assert(candidate((std::make_tuple(4, 5, std::make_tuple(7, 6, std::make_tuple(2, 4)), 6, 8))) == std::make_tuple(4, std::make_tuple(6, std::make_tuple(2, 4)), 6, 8));\n    assert(candidate((std::make_tuple(5, 6, std::make_tuple(8, 7, std::make_tuple(4, 8)), 7, 9))) == std::make_tuple(6, std::make_tuple(8, std::make_tuple(4, 8))));\n    assert(candidate((std::make_tuple(5, 6, std::make_tuple(9, 8, std::make_tuple(4, 6)), 8, 10))) == std::make_tuple(6, std::make_tuple(8, std::make_tuple(4, 6)), 8, 10));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to extract even elements from the nested mixed tuple.\n# Retrieve the first two elements from the outer tuple as they are even.\n# Retrieve the nested tuple from the third element of the outer tuple.\n# Retrieve the first two elements from the nested tuple as they are even.\n# Retrieve the nested tuple from the third element of the nested tuple.\n# Retrieve the first two elements from the nested tuple as they are even.\n# Return the extracted even elements as a new tuple."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove uneven elements in the nested mixed tuple.\nstd::any extract_even(std::tuple<long, long, std::tuple<long, long, std::tuple<long, long>>, long, long> test_tuple) {\n    long outer_a = std::get<0>(test_tuple);\n    long outer_b = std::get<1>(test_tuple);\n\n    std::tuple<long, long, std::tuple<long, long>> nested_tuple = std::get<2>(test_tuple);\n    long nested_a = std::get<0>(nested_tuple);\n    long nested_b = std::get<1>(nested_tuple);\n\n    std::tuple<long, long> inner_tuple = std::get<2>(nested_tuple);\n    long inner_a = std::get<0>(inner_tuple);\n    long inner_b = std::get<1>(inner_tuple);\n\n    return std::make_tuple(outer_a, outer_b, nested_a, nested_b, inner_a, inner_b);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/117",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert all possible convertible elements in a vector of vectors to floats.\nstd::vector<std::tuple<float, float>> list_to_float(std::vector<std::tuple<std::string, std::string>> test_list) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = list_to_float;\n    assert(candidate((std::vector<std::tuple<std::string, std::string>>({(std::tuple<std::string, std::string>)std::make_tuple(\"3\", \"4\"), (std::tuple<std::string, std::string>)std::make_tuple(\"1\", \"26.45\"), (std::tuple<std::string, std::string>)std::make_tuple(\"7.32\", \"8\"), (std::tuple<std::string, std::string>)std::make_tuple(\"4\", \"8\")}))) == (std::vector<std::tuple<float, float>>({(std::tuple<float, float>)std::make_tuple(3.0f, 4.0f), (std::tuple<float, float>)std::make_tuple(1.0f, 26.45f), (std::tuple<float, float>)std::make_tuple(7.32f, 8.0f), (std::tuple<float, float>)std::make_tuple(4.0f, 8.0f)})));\n    assert(candidate((std::vector<std::tuple<std::string, std::string>>({(std::tuple<std::string, std::string>)std::make_tuple(\"4\", \"4\"), (std::tuple<std::string, std::string>)std::make_tuple(\"2\", \"27\"), (std::tuple<std::string, std::string>)std::make_tuple(\"4.12\", \"9\"), (std::tuple<std::string, std::string>)std::make_tuple(\"7\", \"11\")}))) == (std::vector<std::tuple<float, float>>({(std::tuple<float, float>)std::make_tuple(4.0f, 4.0f), (std::tuple<float, float>)std::make_tuple(2.0f, 27.0f), (std::tuple<float, float>)std::make_tuple(4.12f, 9.0f), (std::tuple<float, float>)std::make_tuple(7.0f, 11.0f)})));\n    assert(candidate((std::vector<std::tuple<std::string, std::string>>({(std::tuple<std::string, std::string>)std::make_tuple(\"6\", \"78\"), (std::tuple<std::string, std::string>)std::make_tuple(\"5\", \"26.45\"), (std::tuple<std::string, std::string>)std::make_tuple(\"1.33\", \"4\"), (std::tuple<std::string, std::string>)std::make_tuple(\"82\", \"13\")}))) == (std::vector<std::tuple<float, float>>({(std::tuple<float, float>)std::make_tuple(6.0f, 78.0f), (std::tuple<float, float>)std::make_tuple(5.0f, 26.45f), (std::tuple<float, float>)std::make_tuple(1.33f, 4.0f), (std::tuple<float, float>)std::make_tuple(82.0f, 13.0f)})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to convert convertible elements in a vector of tuples to floats.\n# Create an empty vector to store the converted tuples.\n# Iterate over the input vector of tuples.\n    # Retrieve the two elements of the tuple.\n    # Convert both elements to floats if they are convertible.\n        # If conversion is successful, create a new tuple with the converted elements and add it to the result vector.\n# Return the vector of converted tuples."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert all possible convertible elements in a vector of vectors to floats.\nstd::vector<std::tuple<float, float>> list_to_float(std::vector<std::tuple<std::string, std::string>> test_list) {\n    std::vector<std::tuple<float, float>> converted_list;\n\n    // Iterate over the test_list to convert elements to floats.\n    for (const auto& tup : test_list) {\n        std::string str1 = std::get<0>(tup);\n        std::string str2 = std::get<1>(tup);\n        try {\n            float num1 = std::stof(str1);\n            float num2 = std::stof(str2);\n            converted_list.push_back(std::make_tuple(num1, num2));\n        } catch (const std::exception& e) {\n            // Ignore elements that cannot be converted to floats.\n        }\n    }\n\n    return converted_list;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/287",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\nlong square_Sum(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = square_Sum;\n    assert(candidate((2)) == (20));\n    assert(candidate((3)) == (56));\n    assert(candidate((4)) == (120));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to calculate the sum of squares of first n even natural numbers.\n# Initialize a variable to store the sum.\n# Iterate from 2 to 2n (inclusive) with a step of 2.\n    # Calculate the square of the current number.\n    # Add the square to the sum.\n# Return the sum."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate the sum of squares of first n even natural numbers.\nlong square_Sum(long n) {\n    long sum = 0;\n\n    // Iterate from 2 to 2n (inclusive) with a step of 2.\n    for (long i = 2; i <= 2 * n; i += 2) {\n        // Calculate the square of the current number.\n        long square = i * i;\n        // Add the square to the sum.\n        sum += square;\n    }\n\n    return sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/767",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a vector of numbers and the sum,\nlong get_pairs_count(std::vector<long> arr, long sum) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = get_pairs_count;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1})), (2)) == (6));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)-1, (long)5})), (6)) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3})), (1)) == (1));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)3})), (-3)) == (1));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count the number of pairs whose sum is equal to the given sum.\n# Initialize a counter for the pair count.\n# Iterate over the input vector of numbers.\n    # Iterate again from the current index + 1 to the end of the vector.\n        # Check if the sum of the current number and the number at the inner loop index is equal to the given sum.\n            # If it is, increment the pair count.\n# Return the final pair count."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to count the number of pairs whose sum is equal to 'sum'.\nlong get_pairs_count(std::vector<long> arr, long sum) {\n    long pair_count = 0;\n\n    // Iterate over the vector to find pairs.\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] + arr[j] == sum) {\n                pair_count++;\n            }\n        }\n    }\n\n    return pair_count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/291",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n"
        ],
        "draft_plan": [
            "# If n is 0, return 0 (no posts to paint)\n# If n is 1, return k (only one post, k color options)\n# If n is 2, return k * k (two posts, k options for the first post, k options for the second post)\n# Initialize two variables, same and diff, both equal to k (number of ways to paint the first post)\n# Iterate from 3 to n\n    # Calculate the new value for diff by multiplying (same + diff) by (k-1)\n    # Update same to the previous value of diff\n# Return the sum of same and diff (total number of ways to paint the fence)"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 0) return 0;\n    if (n == 1) return k;\n    if (n == 2) return k * k;\n\n    long same = k;\n    long diff = k;\n    \n    for (long i = 3; i <= n; i++) {\n        long new_diff = (same + diff) * (k - 1);\n        same = diff;\n        diff = new_diff;\n    }\n    \n    return same + diff;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/604",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to reverse words seperated by spaces in a given string.\nstd::string reverse_words(std::string s) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = reverse_words;\n    assert(candidate((\"python program\")) == (\"program python\"));\n    assert(candidate((\"java language\")) == (\"language java\"));\n    assert(candidate((\"indian man\")) == (\"man indian\"));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to reverse words separated by spaces in a given string.\n# Create a vector to store individual words.\n# Create a stringstream object to split the string into words.\n# Iterate over each word in the stringstream.\n    # Add each word to the vector.\n# Reverse the order of the words in the vector.\n# Concatenate the reversed words with spaces between them.\n# Return the final reversed string."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to reverse words separated by spaces in a given string.\nstd::string reverse_words(std::string s) {\n    std::vector<std::string> words;\n    std::stringstream ss(s);\n    std::string word;\n\n    // Split the string into words and store them in the vector.\n    while (ss >> word) {\n        words.push_back(word);\n    }\n\n    // Reverse the order of the words in the vector.\n    std::reverse(words.begin(), words.end());\n\n    // Concatenate the reversed words with spaces between them.\n    std::string reversed_string;\n    for (const auto& w : words) {\n        reversed_string += w + \" \";\n    }\n\n    // Remove the trailing space and return the final reversed string.\n    return reversed_string.substr(0, reversed_string.size() - 1);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/56",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Convert the given number to a string.\n# Reverse the string.\n# Convert the reversed string back to a number.\n# Calculate twice the reversed number.\n# Check if the given number is one less than twice the reversed number.\n# Return true if the condition is satisfied, else return false."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    std::string num_str = std::to_string(n);\n    std::reverse(num_str.begin(), num_str.end());\n    long reversed_num = std::stol(num_str);\n    long twice_reversed = 2 * reversed_num;\n    return n == twice_reversed - 1;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/793",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the last position of an element in a sorted vector.\nlong last(std::vector<long> arr, long x) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = last;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (1)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)4})), (1)) == (2));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)2, (long)3, (long)6, (long)8, (long)9})), (3)) == (3));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the last position of an element in a sorted vector.\n# Initialize two pointers, `start` and `end`, to the first and last index of the vector respectively.\n# Iterate while `start` is less than or equal to `end`.\n    # Calculate the middle index as the average of `start` and `end`.\n    # If the middle element is equal to the target element, check if it is the last occurrence of the target element.\n        # If it is not the last occurrence, update `start` to `middle + 1` to search in the right half of the vector.\n        # If it is the last occurrence, return the middle index as the last position of the target element.\n    # If the middle element is greater than the target element, update `end` to `middle - 1` to search in the left half of the vector.\n    # If the middle element is less than the target element, update `start` to `middle + 1` to search in the right half of the vector.\n# If the target element is not found in the vector, return -1.\n"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the last position of an element in a sorted vector.\nlong last(std::vector<long> arr, long x) {\n    long start = 0;\n    long end = arr.size() - 1;\n    long last_pos = -1;\n\n    // Binary search to find the last position of the element\n    while (start <= end) {\n        long middle = start + (end - start) / 2;\n        \n        if (arr[middle] == x) {\n            last_pos = middle;\n            start = middle + 1;\n        }\n        else if (arr[middle] > x) {\n            end = middle - 1;\n        }\n        else {\n            start = middle + 1;\n        }\n    }\n\n    return last_pos;\n}\n"
        ]
    },
    {
        "id": "mbpp_cpp/250",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function that takes in a tuple and an element and counts the occcurences of the element in the vector.\nlong count_X(std::vector<long> tup, long x) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = count_X;\n    assert(candidate((std::vector<long>({(long)10, (long)8, (long)5, (long)2, (long)10, (long)15, (long)10, (long)8, (long)5, (long)8, (long)8, (long)2})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)10, (long)8, (long)5, (long)2, (long)10, (long)15, (long)10, (long)8, (long)5, (long)8, (long)8, (long)2})), (10)) == (3));\n    assert(candidate((std::vector<long>({(long)10, (long)8, (long)5, (long)2, (long)10, (long)15, (long)10, (long)8, (long)5, (long)8, (long)8, (long)2})), (8)) == (4));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count the occurrences of an element in a vector.\n# Initialize a counter for the occurrences.\n# Iterate over the vector.\n    # Check if the current element is equal to the given element.\n        # If it is, increment the occurrence counter.\n# Return the count of occurrences."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function that takes in a tuple and an element and counts the occcurences of the element in the vector.\nlong count_X(std::vector<long> tup, long x) {\n    long count = 0;\n    for (long element : tup) {\n        if (element == x) {\n            count++;\n        }\n    }\n    return count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/754",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// We say that an element is common for vectors l1, l2, l3 if it appears in all three vectors under the same index. Write a function to find common elements from three vectors. The function should return a vector.\nstd::vector<std::any> extract_index_list(std::vector<long> l1, std::vector<long> l2, std::vector<long> l3) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = extract_index_list;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)5, (long)6, (long)7})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)7})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)7}))) == (std::vector<std::any>({(long)1, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)5, (long)6, (long)7})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)6, (long)5})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)6, (long)7}))) == (std::vector<std::any>({(long)1, (long)6})));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)6, (long)5, (long)6})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)7})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)7}))) == (std::vector<std::any>({(long)1, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)6, (long)6, (long)6})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)7})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)7}))) == (std::vector<std::any>()));\n}\n"
        ],
        "draft_plan": [
            "# Create an empty vector to store the common elements.\n# Iterate over the indices of the vectors (assuming all vectors have the same size).\n    # Check if the element at the current index is common for all three vectors.\n        # If it is, add it to the common elements vector.\n# Return the common elements vector."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// We say that an element is common for vectors l1, l2, l3 if it appears in all three vectors under the same index. Write a function to find common elements from three vectors. The function should return a vector.\nstd::vector<std::any> extract_index_list(std::vector<long> l1, std::vector<long> l2, std::vector<long> l3) {\n    std::vector<std::any> common_elements;\n\n    // Iterate over the indices of the vectors\n    for (size_t i = 0; i < l1.size(); i++) {\n        // Check if the element at the current index is common for all three vectors\n        if (l1[i] == l2[i] && l2[i] == l3[i]) {\n            common_elements.push_back(l1[i]);\n        }\n    }\n\n    return common_elements;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/755",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_float{\n    long f0;\n    float f1;    Union_long_float(long _f0) : f0(_f0) {}\n    Union_long_float(float _f1) : f1(_f1) {}\n    ~Union_long_float() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the second smallest number in a vector.\nstd::optional<float> second_smallest(std::vector<Union_long_float> numbers) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = second_smallest;\n    assert(candidate((std::vector<Union_long_float>({(long)1, (long)2, (long)-8, (long)-2, (long)0, (long)-2}))) == -2);\n    assert(candidate((std::vector<Union_long_float>({(long)1, (long)1, (long)-0.5f, (long)0, (long)2, (long)-2, (long)-2}))) == -0.5f);\n    assert(candidate((std::vector<Union_long_float>({(long)2, (long)2}))) == std::nullopt);\n    assert(candidate((std::vector<Union_long_float>({(long)2, (long)2, (long)2}))) == std::nullopt);\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the second smallest number in a vector.\n# Initialize two variables, `smallest` and `second_smallest`, with the maximum possible value.\n# Iterate over the vector of numbers.\n    # Check if the current number is smaller than `smallest`.\n        # If it is, update `second_smallest` with the value of `smallest` and update `smallest` with the current number.\n    # Check if the current number is greater than `smallest` but smaller than `second_smallest`.\n        # If it is, update `second_smallest` with the current number.\n# Check if `second_smallest` is still the maximum possible value.\n    # If it is, return an empty optional since there is no second smallest number.\n    # If it is not, return `second_smallest` as the second smallest number.\n"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_float{\n    long f0;\n    float f1;\n    Union_long_float(long _f0) : f0(_f0) {}\n    Union_long_float(float _f1) : f1(_f1) {}\n    ~Union_long_float() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }\n    bool operator==(float f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the second smallest number in a vector.\nstd::optional<float> second_smallest(std::vector<Union_long_float> numbers) {\n    float smallest = std::numeric_limits<float>::max();\n    float second_smallest = std::numeric_limits<float>::max();\n\n    for (const auto& num : numbers) {\n        if (num.f1 < smallest) {\n            second_smallest = smallest;\n            smallest = num.f1;\n        } else if (num.f1 > smallest && num.f1 < second_smallest) {\n            second_smallest = num.f1;\n        }\n    }\n\n    if (second_smallest == std::numeric_limits<float>::max()) {\n        return std::nullopt;\n    } else {\n        return second_smallest;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_cpp/421",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to concatenate each element of tuple by the delimiter.\nstd::string concatenate_tuple(std::tuple<std::string, std::string, long, std::string> test_tup) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = concatenate_tuple;\n    assert(candidate((std::make_tuple(\"ID\", \"is\", 4, \"UTS\"))) == (\"ID-is-4-UTS\"));\n    assert(candidate((std::make_tuple(\"QWE\", \"is\", 4, \"RTY\"))) == (\"QWE-is-4-RTY\"));\n    assert(candidate((std::make_tuple(\"ZEN\", \"is\", 4, \"OP\"))) == (\"ZEN-is-4-OP\"));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to concatenate elements of a tuple.\n# Retrieve the elements of the tuple.\n# Concatenate the elements using the specified delimiter.\n# Return the concatenated string."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to concatenate each element of tuple by the delimiter.\nstd::string concatenate_tuple(std::tuple<std::string, std::string, long, std::string> test_tup) {\n    std::string result;\n    std::string delimiter = \",\";\n    \n    result += std::get<0>(test_tup) + delimiter;\n    result += std::get<1>(test_tup) + delimiter;\n    result += std::to_string(std::get<2>(test_tup)) + delimiter;\n    result += std::get<3>(test_tup);\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/628",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace all spaces in the given string with '%20'.\nstd::string replace_spaces(std::string string) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"My Name is Dawood\")) == (\"My%20Name%20is%20Dawood\"));\n    assert(candidate((\"I am a Programmer\")) == (\"I%20am%20a%20Programmer\"));\n    assert(candidate((\"I love Coding\")) == (\"I%20love%20Coding\"));\n}\n"
        ],
        "draft_plan": [
            "# Initialize an empty string to store the modified string.\n# Iterate through each character in the given string.\n    # Check if the current character is a space.\n        # If it is, append \"%20\" to the modified string.\n        # If it is not, append the current character to the modified string.\n# Return the modified string."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace all spaces in the given string with '%20'.\nstd::string replace_spaces(std::string text) {\n    std::string modified;\n    for (char c : text) {\n        if (c == ' ') {\n            modified += \"%20\";\n        } else {\n            modified += c;\n        }\n    }\n    return modified;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/170",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the sum of numbers in a vector within a range specified by two indices.\nlong sum_range_list(std::vector<long> list1, long m, long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = sum_range_list;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)5, (long)6, (long)8, (long)3, (long)4, (long)9, (long)10, (long)11, (long)8, (long)12})), (8), (10)) == (29));\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)5, (long)6, (long)8, (long)3, (long)4, (long)9, (long)10, (long)11, (long)8, (long)12})), (5), (7)) == (16));\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)5, (long)6, (long)8, (long)3, (long)4, (long)9, (long)10, (long)11, (long)8, (long)12})), (7), (10)) == (38));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the sum of numbers in a vector within a range specified by two indices.\n# Initialize a variable to store the sum.\n# Iterate over the elements in the vector from index m to index n.\n    # Add each element to the sum variable.\n# Return the sum of the numbers within the specified range."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to find the sum of numbers in a vector within a range specified by two indices.\nlong sum_range_list(std::vector<long> list1, long m, long n) {\n    assert(m >= 0 && m < list1.size() && n >= 0 && n < list1.size() && m <= n);\n\n    long sum = 0;\n    for (long i = m; i <= n; i++) {\n        sum += list1[i];\n    }\n\n    return sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/87",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to merge three dictionaries into a single map.\nstd::map<std::string,std::string> merge_dictionaries_three(std::map<std::string,std::string> dict1, std::map<std::string,std::string> dict2, std::map<std::string,std::string> dict3) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = merge_dictionaries_three;\n    assert(candidate((std::map<std::string,std::string>({{\"R\", \"Red\"}, {\"B\", \"Black\"}, {\"P\", \"Pink\"}})), (std::map<std::string,std::string>({{\"G\", \"Green\"}, {\"W\", \"White\"}})), (std::map<std::string,std::string>({{\"O\", \"Orange\"}, {\"W\", \"White\"}, {\"B\", \"Black\"}}))) == (std::map<std::string,std::string>({{\"B\", \"Black\"}, {\"R\", \"Red\"}, {\"P\", \"Pink\"}, {\"G\", \"Green\"}, {\"W\", \"White\"}, {\"O\", \"Orange\"}})));\n    assert(candidate((std::map<std::string,std::string>({{\"R\", \"Red\"}, {\"B\", \"Black\"}, {\"P\", \"Pink\"}})), (std::map<std::string,std::string>({{\"G\", \"Green\"}, {\"W\", \"White\"}})), (std::map<std::string,std::string>({{\"L\", \"lavender\"}, {\"B\", \"Blue\"}}))) == (std::map<std::string,std::string>({{\"W\", \"White\"}, {\"P\", \"Pink\"}, {\"B\", \"Black\"}, {\"R\", \"Red\"}, {\"G\", \"Green\"}, {\"L\", \"lavender\"}})));\n    assert(candidate((std::map<std::string,std::string>({{\"R\", \"Red\"}, {\"B\", \"Black\"}, {\"P\", \"Pink\"}})), (std::map<std::string,std::string>({{\"L\", \"lavender\"}, {\"B\", \"Blue\"}})), (std::map<std::string,std::string>({{\"G\", \"Green\"}, {\"W\", \"White\"}}))) == (std::map<std::string,std::string>({{\"B\", \"Black\"}, {\"P\", \"Pink\"}, {\"R\", \"Red\"}, {\"G\", \"Green\"}, {\"L\", \"lavender\"}, {\"W\", \"White\"}})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to merge three dictionaries into a single map.\n# Create an empty map to store the merged dictionaries.\n# Iterate over the keys and values of the first dictionary.\n    # Add each key-value pair to the merged map.\n# Iterate over the keys and values of the second dictionary.\n    # Add each key-value pair to the merged map.\n# Iterate over the keys and values of the third dictionary.\n    # Add each key-value pair to the merged map.\n# Return the merged map."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to merge three dictionaries into a single map.\nstd::map<std::string, std::string> merge_dictionaries_three(std::map<std::string, std::string> dict1, std::map<std::string, std::string> dict2, std::map<std::string, std::string> dict3) {\n    std::map<std::string, std::string> merged_dict;\n\n    // Iterate over the keys and values of the first dictionary.\n    for (const auto& entry : dict1) {\n        merged_dict[entry.first] = entry.second;\n    }\n\n    // Iterate over the keys and values of the second dictionary.\n    for (const auto& entry : dict2) {\n        merged_dict[entry.first] = entry.second;\n    }\n\n    // Iterate over the keys and values of the third dictionary.\n    for (const auto& entry : dict3) {\n        merged_dict[entry.first] = entry.second;\n    }\n\n    return merged_dict;\n}\n"
        ]
    },
    {
        "id": "mbpp_cpp/404",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the minimum of two numbers.\nlong minimum(long a, long b) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = minimum;\n    assert(candidate((1), (2)) == (1));\n    assert(candidate((-5), (-4)) == (-5));\n    assert(candidate((0), (0)) == (0));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the minimum of two numbers.\n# Check if the first number is less than the second number.\n    # If it is, return the first number.\n    # If it is not, return the second number."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the minimum of two numbers.\nlong minimum(long a, long b) {\n    if (a < b) {\n        return a;\n    } else {\n        return b;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_cpp/63",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between available pairs in the given tuple vector.\nlong max_difference(std::vector<std::tuple<long, long>> test_list) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = max_difference;\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(3, 5), (std::tuple<long, long>)std::make_tuple(1, 7), (std::tuple<long, long>)std::make_tuple(10, 3), (std::tuple<long, long>)std::make_tuple(1, 2)}))) == (7));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(4, 6), (std::tuple<long, long>)std::make_tuple(2, 17), (std::tuple<long, long>)std::make_tuple(9, 13), (std::tuple<long, long>)std::make_tuple(11, 12)}))) == (15));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(12, 35), (std::tuple<long, long>)std::make_tuple(21, 27), (std::tuple<long, long>)std::make_tuple(13, 23), (std::tuple<long, long>)std::make_tuple(41, 22)}))) == (23));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the maximum difference between available pairs in the given tuple vector.\n# Initialize a variable to store the maximum difference.\n# Iterate over the input list of tuples.\n    # Retrieve the two elements of the tuple.\n    # Compute the difference between the two elements.\n    # Check if the computed difference is greater than the current maximum difference.\n        # If it is, update the maximum difference.\n# Return the maximum difference."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between available pairs in the given tuple vector.\nlong max_difference(std::vector<std::tuple<long, long>> test_list) {\n    long max_diff = 0;\n\n    // Iterate over the test_list to find the maximum difference.\n    for (const auto& tup : test_list) {\n        long a = std::get<0>(tup);\n        long b = std::get<1>(tup);\n        long diff = std::abs(a - b);\n\n        // Update the maximum difference if necessary.\n        if (diff > max_diff) {\n            max_diff = diff;\n        }\n    }\n\n    return max_diff;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/304",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find element at a given index after number of rotations.\nlong find_Element(std::vector<long> arr, std::vector<std::vector<long>> ranges, long rotations, long index) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)2}), (std::vector<long>)std::vector<long>({(long)0, (long)3})})), (2), (1)) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)2})})), (1), (2)) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)2})})), (1), (1)) == (1));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find an element at a given index after a number of rotations.\n# Iterate over the given range of rotations.\n    # For each rotation, iterate over the ranges.\n        # For each range, update the element at the end index with the element at the start index.\n# Return the element at the given index after the rotations."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to find an element at a given index after a number of rotations.\nlong find_Element(std::vector<long> arr, std::vector<std::vector<long>> ranges, long rotations, long index) {\n    long n = arr.size();\n    \n    // Iterate over the given range of rotations.\n    for (long r = 0; r < rotations; r++) {\n        // Iterate over the ranges.\n        for (const auto& range : ranges) {\n            long start = range[0];\n            long end = range[1];\n            \n            // Perform the rotation for the current range.\n            long temp = arr[end];\n            for (long i = end; i > start; i--) {\n                arr[i] = arr[i-1];\n            }\n            arr[start] = temp;\n        }\n    }\n    \n    return arr[index];\n}"
        ]
    },
    {
        "id": "mbpp_cpp/118",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a vector of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string string) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = string_to_list;\n    assert(candidate((\"python programming\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\"})));\n    assert(candidate((\"lists tuples strings\")) == (std::vector<std::string>({(std::string)\"lists\", (std::string)\"tuples\", (std::string)\"strings\"})));\n    assert(candidate((\"write a program\")) == (std::vector<std::string>({(std::string)\"write\", (std::string)\"a\", (std::string)\"program\"})));\n}\n"
        ],
        "draft_plan": [
            "# Initialize an empty vector to store the individual words.\n# Initialize a variable to store the starting index of each word.\n# Iterate through each character in the given string.\n    # Check if the current character is a space.\n        # If it is, extract the word from the starting index up to the current index and add it to the vector.\n        # Update the starting index to the next character.\n# Extract the last word from the starting index to the end of the string and add it to the vector.\n# Return the vector of words."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a string to a vector of strings split on the space character.\nstd::vector<std::string> string_to_list(std::string str) {\n    std::vector<std::string> words;\n    int start = 0;\n    \n    for (int i = 0; i < str.length(); i++) {\n        if (str[i] == ' ') {\n            std::string word = str.substr(start, i - start);\n            words.push_back(word);\n            start = i + 1;\n        }\n    }\n    \n    std::string last_word = str.substr(start);\n    words.push_back(last_word);\n    \n    return words;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/119",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the element that appears only once in a sorted vector.\n# Initialize a variable to store the result.\n# Iterate over the vector, starting from the first element.\n    # Check if the current element is equal to the next element.\n        # If it is not, assign the current element to the result variable and break the loop.\n        # If it is, skip to the next element by incrementing the loop variable by one.\n# Return the result."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long result = 0;\n\n    // Iterate over the vector to find the element that appears only once.\n    for (int i = 0; i < arr.size(); i += 2) {\n        if (i == arr.size() - 1 || arr[i] != arr[i + 1]) {\n            result = arr[i];\n            break;\n        }\n    }\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/475",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a map by value.\nstd::vector<std::tuple<std::string, long>> sort_counter(std::map<std::string,long> dict1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = sort_counter;\n    assert(candidate((std::map<std::string,long>({{\"Math\", 81}, {\"Physics\", 83}, {\"Chemistry\", 87}}))) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Chemistry\", 87), (std::tuple<std::string, long>)std::make_tuple(\"Physics\", 83), (std::tuple<std::string, long>)std::make_tuple(\"Math\", 81)})));\n    assert(candidate((std::map<std::string,long>({{\"Math\", 400}, {\"Physics\", 300}, {\"Chemistry\", 250}}))) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Math\", 400), (std::tuple<std::string, long>)std::make_tuple(\"Physics\", 300), (std::tuple<std::string, long>)std::make_tuple(\"Chemistry\", 250)})));\n    assert(candidate((std::map<std::string,long>({{\"Math\", 900}, {\"Physics\", 1000}, {\"Chemistry\", 1250}}))) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Chemistry\", 1250), (std::tuple<std::string, long>)std::make_tuple(\"Physics\", 1000), (std::tuple<std::string, long>)std::make_tuple(\"Math\", 900)})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to sort a map by value.\n# Create a vector of tuples to store the key-value pairs from the map.\n# Sort the vector of tuples based on the second element of each tuple (the value).\n# Return the sorted vector of tuples."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a map by value.\nstd::vector<std::tuple<std::string, long>> sort_counter(std::map<std::string,long> dict1) {\n    // Create a vector of tuples to store the key-value pairs\n    std::vector<std::tuple<std::string, long>> sorted_pairs;\n\n    // Iterate over the map and add each key-value pair to the vector\n    for (const auto& pair : dict1) {\n        sorted_pairs.push_back(std::make_tuple(pair.first, pair.second));\n    }\n\n    // Sort the vector of tuples based on the second element of each tuple (the value)\n    std::sort(sorted_pairs.begin(), sorted_pairs.end(), [](const auto& a, const auto& b) {\n        return std::get<1>(a) > std::get<1>(b);\n    });\n\n    return sorted_pairs;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/11",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n"
        ],
        "draft_plan": [
            "# Find the first occurrence of the given character in the string.\n# If the character is found, remove it from the string.\n# Find the last occurrence of the given character in the string.\n# If the character is found, remove it from the string.\n# Return the modified string."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    size_t first_occurrence = s.find(ch);\n    if (first_occurrence != std::string::npos) {\n        s.erase(first_occurrence, ch.length());\n    }\n\n    size_t last_occurrence = s.rfind(ch);\n    if (last_occurrence != std::string::npos) {\n        s.erase(last_occurrence, ch.length());\n    }\n\n    return s;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/266",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the lateral surface area of a cube given its side length.\nlong lateralsurface_cube(long l) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = lateralsurface_cube;\n    assert(candidate((5)) == (100));\n    assert(candidate((9)) == (324));\n    assert(candidate((10)) == (400));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to calculate the lateral surface area of a cube.\n# Calculate the lateral surface area by multiplying the side length by itself and then multiplying by 4.\n# Return the lateral surface area."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the lateral surface area of a cube given its side length.\nlong lateralsurface_cube(long l) {\n    return 4 * l * l;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/431",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes two vectors and returns true if they have at least one common element.\nstd::optional<bool> common_element(std::vector<std::any> list1, std::vector<std::any> list2) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = common_element;\n    assert(candidate((std::vector<std::any>({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::vector<std::any>({(long)5, (long)6, (long)7, (long)8, (long)9}))) == true);\n    assert(candidate((std::vector<std::any>({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::vector<std::any>({(long)6, (long)7, (long)8, (long)9}))) == std::nullopt);\n    assert(candidate((std::vector<std::any>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})), (std::vector<std::any>({(std::string)\"d\", (std::string)\"b\", (std::string)\"e\"}))) == true);\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check if two vectors have at least one common element.\n# Iterate over each element in the first vector.\n    # Check if the current element exists in the second vector.\n        # If it does, return true.\n# If no common element is found, return false."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function that takes two vectors and returns true if they have at least one common element.\nstd::optional<bool> common_element(std::vector<std::any> list1, std::vector<std::any> list2) {\n    for (const auto& elem : list1) {\n        auto it = std::find(list2.begin(), list2.end(), elem);\n        if (it != list2.end()) {\n            return true;\n        }\n    }\n    return false;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/106",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to append the given vector to the given tuples.\nstd::tuple<long, long, long, long, long> add_lists(std::vector<long> test_list, std::tuple<long, long> test_tup) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = add_lists;\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7})), (std::make_tuple(9, 10))) == (std::make_tuple(9, 10, 5, 6, 7)));\n    assert(candidate((std::vector<long>({(long)6, (long)7, (long)8})), (std::make_tuple(10, 11))) == (std::make_tuple(10, 11, 6, 7, 8)));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9})), (std::make_tuple(11, 12))) == (std::make_tuple(11, 12, 7, 8, 9)));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to append the given vector to the given tuple.\n# Create a new tuple with the elements from the input tuple and the elements from the input vector.\n# Return the new tuple."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to append the given vector to the given tuples.\nstd::tuple<long, long, long, long, long> add_lists(std::vector<long> test_list, std::tuple<long, long> test_tup) {\n    // Create a new tuple with the elements from the input tuple and the elements from the input vector.\n    std::tuple<long, long, long, long, long> new_tuple = std::make_tuple(std::get<0>(test_tup), std::get<1>(test_tup), test_list[0], test_list[1], test_list[2]);\n    return new_tuple;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/623",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to compute the n-th power of each number in a vector.\nstd::vector<long> nth_nums(std::vector<long> nums, long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = nth_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (2)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25, (long)36, (long)49, (long)64, (long)81, (long)100})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)30})), (3)) == (std::vector<long>({(long)1000, (long)8000, (long)27000})));\n    assert(candidate((std::vector<long>({(long)12, (long)15})), (5)) == (std::vector<long>({(long)248832, (long)759375})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to compute the n-th power of each number in a vector.\n# Create an empty vector to store the computed results.\n# Iterate over each number in the input vector.\n    # Compute the n-th power of the current number.\n    # Add the computed result to the output vector.\n# Return the output vector containing the n-th power of each number."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to compute the n-th power of each number in a vector.\nstd::vector<long> nth_nums(std::vector<long> nums, long n) {\n    std::vector<long> result;\n\n    // Iterate over each number in the input vector.\n    for (const auto& num : nums) {\n        // Compute the n-th power of the current number.\n        long power = std::pow(num, n);\n        // Add the computed result to the output vector.\n        result.push_back(power);\n    }\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/141",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to sort a vector of elements using pancake sort.\n# Initialize a variable to keep track of the current index.\n# Iterate over the vector from the last index to the first index.\n    # Find the index of the maximum element in the unsorted part of the vector.\n    # If the index of the maximum element is not the current index, flip the vector from the start to the maximum element index.\n    # Flip the vector from the start to the current index.\n# Return the sorted vector."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to sort a vector of elements using pancake sort.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for (int i = n - 1; i > 0; i--) {\n        // Find the index of the maximum element in the unsorted part of the vector.\n        int max_idx = 0;\n        for (int j = 1; j <= i; j++) {\n            if (nums[j] > nums[max_idx]) {\n                max_idx = j;\n            }\n        }\n\n        // If the index of the maximum element is not the current index, flip the vector.\n        if (max_idx != i) {\n            std::reverse(nums.begin(), nums.begin() + max_idx + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n\n    return nums;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/397",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of three numbers.\nfloat median_numbers(long a, long b, long c) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = median_numbers;\n    assert(candidate((25), (55), (65)) == (55.0f));\n    assert(candidate((20), (10), (30)) == (20.0f));\n    assert(candidate((15), (45), (75)) == (45.0f));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the median of three numbers.\n# Sort the three numbers in ascending order.\n# Check if the middle number is greater than or equal to the first number and less than or equal to the third number.\n    # If it is, return the middle number as the median.\n# Check if the first number is greater than or equal to the second number and less than or equal to the third number.\n    # If it is, return the first number as the median.\n# Otherwise, return the third number as the median."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of three numbers.\nfloat median_numbers(long a, long b, long c) {\n    // Sort the three numbers in ascending order.\n    std::vector<long> nums = {a, b, c};\n    std::sort(nums.begin(), nums.end());\n\n    // Check if the middle number is the median.\n    if (nums[1] >= nums[0] && nums[1] <= nums[2]) {\n        return nums[1];\n    }\n\n    // Check if the first number is the median.\n    if (nums[0] >= nums[1] && nums[0] <= nums[2]) {\n        return nums[0];\n    }\n\n    // Otherwise, the third number is the median.\n    return nums[2];\n}"
        ]
    },
    {
        "id": "mbpp_cpp/433",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the entered number is greater than the elements of the given vector.\nbool check_greater(std::vector<long> arr, long number) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = check_greater;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)5, (long)6})), (8)) == (true));\n    assert(candidate((std::vector<long>({(long)9, (long)7, (long)4, (long)8, (long)6, (long)1})), (11)) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check if a number is greater than the elements in a vector.\n# Iterate over each element in the vector.\n    # Check if the current element is greater than the given number.\n        # If it is, return true.\n# If the loop completes without finding any element greater than the given number, return false."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the entered number is greater than the elements of the given vector.\nbool check_greater(std::vector<long> arr, long number) {\n    for (const auto& element : arr) {\n        if (element > number) {\n            return true;\n        }\n    }\n    return false;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/284",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector and element and checks whether all items in the vector are equal to the given element.\nbool check_element(std::vector<std::any> list, std::any element) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = check_element;\n    assert(candidate((std::vector<std::any>({(std::string)\"green\", (std::string)\"orange\", (std::string)\"black\", (std::string)\"white\"})), (std::any(\"blue\"))) == (false));\n    assert(candidate((std::vector<std::any>({(long)1, (long)2, (long)3, (long)4})), (std::any(7))) == (false));\n    assert(candidate((std::vector<std::any>({(std::string)\"green\", (std::string)\"green\", (std::string)\"green\", (std::string)\"green\"})), (std::any(\"green\"))) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check whether all items in a vector are equal to a given element.\n# Iterate over each item in the vector.\n    # Check if the current item is equal to the given element.\n        # If it is not, return false.\n# If all items are equal to the given element, return true."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector and element and checks whether all items in the vector are equal to the given element.\nbool check_element(std::vector<std::any> list, std::any element) {\n    for (const auto& item : list) {\n        if (item != element) {\n            return false;\n        }\n    }\n    return true;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/450",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given vector of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = extract_string;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (8)) == (std::vector<std::string>({(std::string)\"practice\", (std::string)\"solution\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (6)) == (std::vector<std::string>({(std::string)\"Python\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python\", (std::string)\"list\", (std::string)\"exercises\", (std::string)\"practice\", (std::string)\"solution\"})), (9)) == (std::vector<std::string>({(std::string)\"exercises\"})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to extract specified size of strings from a given vector.\n# Create an empty vector to store the extracted strings.\n# Iterate over the input vector of strings.\n    # Check if the current string has a length greater than or equal to the specified size.\n        # If it does, add the string to the new vector.\n# Return the new vector containing the extracted strings."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract specified size of strings from a given vector of string values.\nstd::vector<std::string> extract_string(std::vector<std::string> str, long l) {\n    std::vector<std::string> extracted_strings;\n\n    // Iterate over the input vector of strings.\n    for (const auto& s : str) {\n        // Check if the current string has a length greater than or equal to the specified size.\n        if (s.length() >= l) {\n            extracted_strings.push_back(s);\n        }\n    }\n\n    return extracted_strings;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/16",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Iterate through each character in the given string starting from the second character.\n    # Check if the current character is a lowercase letter.\n        # If it is, check if the previous character is also a lowercase letter or an underscore.\n            # If it is not, return false.\n# If the loop completes without returning false, return true."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 1; i < text.length(); i++) {\n        if (islower(text[i])) {\n            if (!islower(text[i-1]) && text[i-1] != '_') {\n                return false;\n            }\n        }\n    }\n    return true;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/444",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to trim each vector by k in the given vectors.\nstd::vector<std::vector<long>> trim_tuple(std::vector<std::vector<long>> test_list, long K) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = trim_tuple;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)3, (long)2, (long)1, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)4, (long)9, (long)2, (long)1}), (std::vector<long>)std::vector<long>({(long)9, (long)1, (long)2, (long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)4, (long)8, (long)2, (long)1, (long)7})})), (2)) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2}), (std::vector<long>)std::vector<long>({(long)9}), (std::vector<long>)std::vector<long>({(long)2}), (std::vector<long>)std::vector<long>({(long)2})})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)3, (long)2, (long)1, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)4, (long)9, (long)2, (long)1}), (std::vector<long>)std::vector<long>({(long)9, (long)1, (long)2, (long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)4, (long)8, (long)2, (long)1, (long)7})})), (1)) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)2, (long)1}), (std::vector<long>)std::vector<long>({(long)4, (long)9, (long)2}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)8, (long)2, (long)1})})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)8, (long)4, (long)9}), (std::vector<long>)std::vector<long>({(long)11, (long)8, (long)12, (long)4}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)3, (long)6, (long)9, (long)7})})), (1)) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)4}), (std::vector<long>)std::vector<long>({(long)8, (long)12}), (std::vector<long>)std::vector<long>({(long)1, (long)7}), (std::vector<long>)std::vector<long>({(long)6, (long)9})})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to trim each vector by k.\n# Iterate over the input list of vectors.\n    # Iterate over each vector.\n        # Check if the vector size is greater than k.\n            # If it is, erase the first k elements from the vector.\n# Return the modified list of vectors."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to trim each vector by k in the given vectors.\nstd::vector<std::vector<long>> trim_tuple(std::vector<std::vector<long>> test_list, long K) {\n    for (auto& vec : test_list) {\n        if (vec.size() > K) {\n            vec.erase(vec.begin(), vec.begin() + K);\n        }\n    }\n    return test_list;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/457",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the subvector having minimum length.\nstd::vector<std::any> Find_Min(std::vector<std::vector<std::any>> lst) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = Find_Min;\n    assert(candidate((std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})}))) == (std::vector<std::any>({(long)1})));\n    assert(candidate((std::vector<std::vector<std::any>>({(std::vector<long>)std::vector<long>({(long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)7, (long)8})}))) == (std::vector<std::any>({(long)1, (long)1})));\n    assert(candidate((std::vector<std::vector<std::any>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"x\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"y\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\"})}))) == (std::vector<std::any>({(std::string)\"x\"})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the subvector having minimum length.\n# Initialize a variable to store the minimum length found so far.\n# Initialize a variable to store the subvector with minimum length.\n# Iterate over each vector in the given list.\n    # Check if the length of the current vector is less than the minimum length found so far.\n        # If it is, update the minimum length and store the current vector as the subvector with minimum length.\n# Return the subvector with minimum length."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to find the subvector having minimum length.\nstd::vector<std::any> Find_Min(std::vector<std::vector<std::any>> lst) {\n    int min_length = INT_MAX;\n    std::vector<std::any> min_subvector;\n\n    // Iterate over each vector in the given list.\n    for (const auto& subvector : lst) {\n        int length = subvector.size();\n\n        // Check if the length of the current vector is less than the minimum length found so far.\n        if (length < min_length) {\n            min_length = length;\n            min_subvector = subvector;\n        }\n    }\n\n    return min_subvector;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/426",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to filter odd numbers.\nstd::vector<long> filter_oddnumbers(std::vector<long> nums) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = filter_oddnumbers;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)9})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)45, (long)67, (long)84, (long)93}))) == (std::vector<long>({(long)45, (long)67, (long)93})));\n    assert(candidate((std::vector<long>({(long)5, (long)7, (long)9, (long)8, (long)6, (long)4, (long)3}))) == (std::vector<long>({(long)5, (long)7, (long)9, (long)3})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to filter odd numbers.\n# Create an empty vector to store the filtered numbers.\n# Iterate over the input vector of numbers.\n    # Check if the current number is odd.\n        # If it is, add it to the filtered vector.\n# Return the filtered vector of odd numbers."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to filter odd numbers.\nstd::vector<long> filter_oddnumbers(std::vector<long> nums) {\n    std::vector<long> filtered_nums;\n    \n    // Iterate over the nums vector to filter odd numbers.\n    for (const auto& num : nums) {\n        if (num % 2 != 0) {\n            filtered_nums.push_back(num);\n        }\n    }\n    \n    return filtered_nums;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/584",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the first adverb ending with ly and its positions in a given string.\nstd::string find_adverbs(std::string text) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find_adverbs;\n    assert(candidate((\"Clearly, he has no excuse for such behavior.\")) == (\"0-7: Clearly\"));\n    assert(candidate((\"Please handle the situation carefuly\")) == (\"28-36: carefuly\"));\n    assert(candidate((\"Complete the task quickly\")) == (\"18-25: quickly\"));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the first adverb ending with \"ly\" and its positions in a given string.\n# Initialize an empty vector to store the positions of adverbs.\n# Split the given string into words.\n# Iterate over each word in the list of words.\n    # Check if the word ends with \"ly\".\n        # If it does, add its position to the vector.\n            # If the vector is not empty, return the word and its positions.\n            # If the vector is empty, return a string indicating no adverbs found.\n# If no adverbs are found, return a string indicating no adverbs found."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to find the first adverb ending with \"ly\" and its positions in a given string.\nstd::string find_adverbs(std::string text) {\n    std::vector<int> positions;\n    std::istringstream iss(text);\n    std::string word;\n    int position = 0;\n\n    // Split the text into words and check for adverbs ending with \"ly\".\n    while (iss >> word) {\n        if (word.size() >= 2 && word.substr(word.size() - 2) == \"ly\") {\n            positions.push_back(position);\n            return word;\n        }\n        position += word.size() + 1;\n    }\n\n    // Return the result based on whether adverbs were found or not.\n    if (!positions.empty()) {\n        std::stringstream ss;\n        ss << \"Adverb: \" << word << \", Positions: \";\n        for (int pos : positions) {\n            ss << pos << \" \";\n        }\n        return ss.str();\n    } else {\n        return \"No adverbs found.\";\n    }\n}"
        ]
    },
    {
        "id": "mbpp_cpp/611",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nlong max_of_nth(std::vector<std::vector<long>> test_list, long N) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = max_of_nth;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)1, (long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)8, (long)9, (long)19})})), (2)) == (19));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)2, (long)4, (long)6}), (std::vector<long>)std::vector<long>({(long)9, (long)10, (long)20})})), (1)) == (10));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)3, (long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)21})})), (1)) == (11));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the maximum value in the n'th column of a matrix.\n# Initialize a variable max_value to store the maximum value.\n# Iterate over the rows of the matrix.\n    # Check if the n'th column exists in the current row.\n        # If it does, compare the current value with max_value and update max_value if necessary.\n# Return max_value as the maximum value in the n'th column."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function which given a matrix represented as a vector of vectors returns the max of the n'th column.\nlong max_of_nth(std::vector<std::vector<long>> test_list, long N) {\n    long max_value = std::numeric_limits<long>::min();\n\n    // Iterate over the rows of the matrix.\n    for (const auto& row : test_list) {\n        // Check if the n'th column exists in the current row.\n        if (N < row.size()) {\n            // Compare the current value with max_value and update max_value if necessary.\n            max_value = std::max(max_value, row[N]);\n        }\n    }\n\n    return max_value;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/99",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nstd::string decimal_to_binary(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((8)) == (\"1000\"));\n    assert(candidate((18)) == (\"10010\"));\n    assert(candidate((7)) == (\"111\"));\n}\n"
        ],
        "draft_plan": [
            "# Initialize an empty string to store the binary representation.\n# While the given decimal number is greater than 0:\n    # Get the remainder of the number divided by 2.\n    # Append the remainder to the front of the binary representation string.\n    # Divide the number by 2 to get the next digit.\n# Return the binary representation string."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nstd::string decimal_to_binary(long n) {\n    std::string binary = \"\";\n\n    // Convert decimal to binary\n    while (n > 0) {\n        int remainder = n % 2;\n        binary = std::to_string(remainder) + binary;\n        n /= 2;\n    }\n\n    return binary;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/255",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector and length n, and generates all combinations (with repetition) of the elements of the vector and returns a vector with a vector for each combination.\nstd::vector<std::vector<std::string>> combinations_colors(std::vector<std::string> l, long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = combinations_colors;\n    assert(candidate((std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Blue\"})), (1)) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Green\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Blue\"})})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Blue\"})), (2)) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\", (std::string)\"Red\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\", (std::string)\"Blue\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Green\", (std::string)\"Green\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Green\", (std::string)\"Blue\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Blue\", (std::string)\"Blue\"})})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Blue\"})), (3)) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\", (std::string)\"Red\", (std::string)\"Red\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\", (std::string)\"Red\", (std::string)\"Green\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\", (std::string)\"Red\", (std::string)\"Blue\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Green\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Blue\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Red\", (std::string)\"Blue\", (std::string)\"Blue\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Green\", (std::string)\"Green\", (std::string)\"Green\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Green\", (std::string)\"Green\", (std::string)\"Blue\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Green\", (std::string)\"Blue\", (std::string)\"Blue\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"Blue\", (std::string)\"Blue\", (std::string)\"Blue\"})})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to generate all combinations of elements from a given vector.\n# Create an empty vector to store the combinations.\n# Define a helper function to recursively generate combinations.\n    # Base case: if the length of the current combination is equal to n, add it to the combinations vector.\n    # Recursive case:\n        # Iterate through each element in the input vector.\n        # Append the current element to the current combination.\n        # Recursively call the helper function with the updated combination and the remaining elements in the vector.\n        # Remove the last element from the current combination to backtrack.\n# Call the helper function with an empty combination and the input vector.\n# Return the combinations vector."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Define a function to generate all combinations of elements from a given vector.\nstd::vector<std::vector<std::string>> combinations_colors(std::vector<std::string> l, long n) {\n    std::vector<std::vector<std::string>> combinations;\n    std::vector<std::string> current_combination;\n\n    // Define a helper function to recursively generate combinations.\n    std::function<void(int)> generate_combinations = [&](int index) {\n        // Base case: if the length of the current combination is equal to n, add it to the combinations vector.\n        if (current_combination.size() == n) {\n            combinations.push_back(current_combination);\n            return;\n        }\n\n        // Recursive case:\n        // Iterate through each element in the input vector.\n        for (int i = index; i < l.size(); i++) {\n            // Append the current element to the current combination.\n            current_combination.push_back(l[i]);\n\n            // Recursively call the helper function with the updated combination and the remaining elements in the vector.\n            generate_combinations(i);\n\n            // Remove the last element from the current combination to backtrack.\n            current_combination.pop_back();\n        }\n    };\n\n    // Call the helper function with an empty combination and the input vector.\n    generate_combinations(0);\n\n    // Return the combinations vector.\n    return combinations;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/800",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from a string.\nstd::string remove_all_spaces(std::string text) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = remove_all_spaces;\n    assert(candidate((\"python  program\")) == (\"pythonprogram\"));\n    assert(candidate((\"python   programming    language\")) == (\"pythonprogramminglanguage\"));\n    assert(candidate((\"python                     program\")) == (\"pythonprogram\"));\n    assert(candidate((\"   python                     program\")) == (\"pythonprogram\"));\n}\n"
        ],
        "draft_plan": [
            "# Create an empty string to store the modified string without whitespaces.\n# Iterate through each character in the given string.\n    # Check if the current character is a whitespace.\n        # If it is, skip it and continue to the next character.\n        # If it is not, append it to the modified string.\n# Return the modified string without whitespaces."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to remove all whitespaces from a string.\nstd::string remove_all_spaces(std::string text) {\n    std::string result = \"\";\n\n    // Iterate through each character in the given string.\n    for (char c : text) {\n        // Check if the current character is a whitespace.\n        if (c != ' ') {\n            // If it is not, append it to the modified string.\n            result += c;\n        }\n    }\n\n    // Return the modified string without whitespaces.\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/595",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nstd::any min_Swaps(std::string str1, std::string str2) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = min_Swaps;\n    assert(candidate((\"1101\"), (\"1110\")) == (std::any(1)));\n    assert(candidate((\"111\"), (\"000\")) == (std::any(\"Not Possible\")));\n    assert(candidate((\"111\"), (\"110\")) == (std::any(\"Not Possible\")));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count the minimum number of swaps required to convert one binary number represented as a string to another.\n# Create a vector to store the indices of the positions where the two strings differ.\n# Check if the lengths of the two strings are equal.\n    # If not, return -1 to indicate that the two strings cannot be converted by swapping.\n# Iterate over the characters of the two strings simultaneously.\n    # If the characters at the current index are not equal, add the index to the vector.\n# Check if the size of the vector is odd.\n    # If it is, return -1 to indicate that the two strings cannot be converted by swapping.\n# Calculate the minimum number of swaps required by dividing the size of the vector by 2.\n# Return the minimum number of swaps."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to count the minimum number of swaps required to convert one binary number represented as a string to another.\nint min_Swaps(std::string str1, std::string str2) {\n    std::vector<int> diff_indices;\n\n    // Check if the lengths of the two strings are equal.\n    if (str1.length() != str2.length()) {\n        return -1;\n    }\n\n    // Iterate over the characters of the two strings simultaneously.\n    for (int i = 0; i < str1.length(); i++) {\n        // If the characters at the current index are not equal, add the index to the vector.\n        if (str1[i] != str2[i]) {\n            diff_indices.push_back(i);\n        }\n    }\n\n    // Check if the size of the vector is odd.\n    if (diff_indices.size() % 2 != 0) {\n        return -1;\n    }\n\n    // Calculate the minimum number of swaps required.\n    int min_swaps = diff_indices.size() / 2;\n    return min_swaps;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/788",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to create a new tuple from the given string and vector.\nstd::tuple<std::string, std::string, std::string> new_tuple(std::vector<std::string> test_list, std::string test_str) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = new_tuple;\n    assert(candidate((std::vector<std::string>({(std::string)\"WEB\", (std::string)\"is\"})), (\"best\")) == (std::make_tuple(\"WEB\", \"is\", \"best\")));\n    assert(candidate((std::vector<std::string>({(std::string)\"We\", (std::string)\"are\"})), (\"Developers\")) == (std::make_tuple(\"We\", \"are\", \"Developers\")));\n    assert(candidate((std::vector<std::string>({(std::string)\"Part\", (std::string)\"is\"})), (\"Wrong\")) == (std::make_tuple(\"Part\", \"is\", \"Wrong\")));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to create a new tuple from the given string and vector.\n# Initialize three empty strings to store the elements of the tuple.\n# Check if the vector has at least three elements.\n    # If it does, assign the first three elements of the vector to the strings in the tuple.\n    # If it doesn't, assign empty strings to the remaining elements of the tuple.\n# Return the tuple with the three strings."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to create a new tuple from the given string and vector.\nstd::tuple<std::string, std::string, std::string> new_tuple(std::vector<std::string> test_list, std::string test_str) {\n    std::tuple<std::string, std::string, std::string> new_tuple;\n\n    // Check if the vector has at least three elements.\n    if (test_list.size() >= 3) {\n        std::get<0>(new_tuple) = test_list[0];\n        std::get<1>(new_tuple) = test_list[1];\n        std::get<2>(new_tuple) = test_list[2];\n    } else {\n        std::get<0>(new_tuple) = test_list.size() > 0 ? test_list[0] : \"\";\n        std::get<1>(new_tuple) = test_list.size() > 1 ? test_list[1] : \"\";\n        std::get<2>(new_tuple) = \"\";\n    }\n\n    return new_tuple;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/471",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the product of the vector multiplication modulo n.\nlong find_remainder(std::vector<long> arr, long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find_remainder;\n    assert(candidate((std::vector<long>({(long)100, (long)10, (long)5, (long)25, (long)35, (long)14})), (11)) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1})), (1)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (2)) == (0));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the product of the vector multiplication modulo n.\n# Initialize a variable to store the product, starting with 1.\n# Iterate over each element in the input vector.\n    # Calculate the product of the element and the current product variable.\n    # Take the modulo of the result with n.\n    # Update the product variable with the new value.\n# Return the final product modulo n."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the product of the vector multiplication modulo n.\nlong find_remainder(std::vector<long> arr, long n) {\n    long product = 1;\n\n    // Iterate over each element in the vector.\n    for (long num : arr) {\n        product = (product * num) % n;\n    }\n\n    return product;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/410",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the minimum value in a given heterogeneous vector.\nlong min_val(std::vector<Union_std_string_long> listval) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = min_val;\n    assert(candidate((std::vector<Union_std_string_long>({(std::string)\"Python\", (std::string)3, (std::string)2, (std::string)4, (std::string)5, (std::string)\"version\"}))) == (2));\n    assert(candidate((std::vector<Union_std_string_long>({(std::string)\"Python\", (std::string)15, (std::string)20, (std::string)25}))) == (15));\n    assert(candidate((std::vector<Union_std_string_long>({(std::string)\"Python\", (std::string)30, (std::string)20, (std::string)40, (std::string)50, (std::string)\"version\"}))) == (20));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the minimum value in a given heterogeneous vector.\n# Initialize a variable `minValue` with the first element of the vector.\n# Iterate over the remaining elements of the vector.\n    # Check the type of the current element.\n        # If it is a string, convert it to a long and compare it with `minValue`.\n        # If it is a long, compare it with `minValue`.\n    # If the current element is smaller than `minValue`, update `minValue`.\n# Return the value of `minValue`."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    \n    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    \n    bool operator==(std::string f) {\n        return f0 == f ;\n    }\n    \n    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n\n// Write a function to find the minimum value in a given heterogeneous vector.\nlong min_val(std::vector<Union_std_string_long> listval) {\n    long minValue = listval[0].f1;\n    \n    for (int i = 1; i < listval.size(); i++) {\n        if (listval[i].f0 == \"\") {\n            if (listval[i].f1 < minValue) {\n                minValue = listval[i].f1;\n            }\n        } else {\n            long convertedVal = std::stol(listval[i].f0);\n            if (convertedVal < minValue) {\n                minValue = convertedVal;\n            }\n        }\n    }\n    \n    return minValue;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/442",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the ration of positive numbers in a vector of integers.\nfloat positive_count(std::vector<long> nums) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = positive_count;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)-1, (long)-5, (long)6, (long)0, (long)-3, (long)-2, (long)3, (long)4, (long)6, (long)8}))) == (0.54f));\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)2, (long)-1, (long)-5, (long)6, (long)4, (long)-3, (long)-2, (long)3, (long)4, (long)6, (long)8}))) == (0.69f));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-6, (long)-9, (long)11, (long)-12, (long)14, (long)-5, (long)17}))) == (0.56f));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the ratio of positive numbers in a vector of integers.\n# Initialize a counter for positive numbers.\n# Iterate over the input vector.\n    # Check if the current number is positive.\n        # If it is, increment the positive number count.\n# Calculate the ratio of positive numbers by dividing the positive number count by the total number of elements in the vector.\n# Return the ratio of positive numbers."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to find the ratio of positive numbers in a vector of integers.\nfloat positive_count(std::vector<long> nums) {\n    int positive_count = 0;\n\n    // Iterate over the nums vector to count the positive numbers.\n    for (const auto& num : nums) {\n        if (num > 0) {\n            positive_count++;\n        }\n    }\n\n    // Calculate the ratio of positive numbers.\n    float ratio = static_cast<float>(positive_count) / nums.size();\n\n    return ratio;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/750",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to add the given tuple to the given vector.\nstd::vector<long> add_tuple(std::vector<long> test_list, std::tuple<long, long> test_tup) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = add_tuple;\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7})), (std::make_tuple(9, 10))) == (std::vector<long>({(long)5, (long)6, (long)7, (long)9, (long)10})));\n    assert(candidate((std::vector<long>({(long)6, (long)7, (long)8})), (std::make_tuple(10, 11))) == (std::vector<long>({(long)6, (long)7, (long)8, (long)10, (long)11})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9})), (std::make_tuple(11, 12))) == (std::vector<long>({(long)7, (long)8, (long)9, (long)11, (long)12})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to add the given tuple to the given vector.\n# Extract the two elements from the tuple.\n# Add the extracted elements to the vector using the `push_back()` function.\n# Return the modified vector."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to add the given tuple to the given vector.\nstd::vector<long> add_tuple(std::vector<long> test_list, std::tuple<long, long> test_tup) {\n    long a = std::get<0>(test_tup);\n    long b = std::get<1>(test_tup);\n    \n    test_list.push_back(a);\n    test_list.push_back(b);\n    \n    return test_list;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/806",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the maximum run of uppercase characters in a given string.\n# Initialize a counter variable to keep track of the current run length.\n# Initialize a maximum run length variable to store the maximum run found so far.\n# Iterate through each character in the given string.\n    # Check if the current character is an uppercase letter.\n        # If it is, increment the run length counter.\n            # Update the maximum run length if the current run length is greater than the maximum run length.\n        # If it is not, reset the run length counter to 0.\n# Return the maximum run length."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n    int current_run = 0;\n    int max_run = 0;\n\n    for (char c : test_str) {\n        if (std::isupper(c)) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n\n    return max_run;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/12",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nstd::vector<std::vector<long>> sort_matrix(std::vector<std::vector<long>> M) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = sort_matrix;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)2, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)2, (long)4, (long)5})})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)-2, (long)4, (long)-5}), (std::vector<long>)std::vector<long>({(long)1, (long)-1, (long)1})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)-2, (long)4, (long)-5}), (std::vector<long>)std::vector<long>({(long)1, (long)-1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)6, (long)4, (long)3}), (std::vector<long>)std::vector<long>({(long)2, (long)1, (long)4})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)1, (long)4}), (std::vector<long>)std::vector<long>({(long)6, (long)4, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)8, (long)9})})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to sort a given matrix in ascending order according to the sum of its rows.\n# Create a custom comparator function that compares the sums of two rows.\n# Sort the matrix using the custom comparator function.\n# Return the sorted matrix."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nstd::vector<std::vector<long>> sort_matrix(std::vector<std::vector<long>> M) {\n    // Define a custom comparator function to compare the sums of two rows.\n    auto row_sum_compare = [](const std::vector<long>& row1, const std::vector<long>& row2) {\n        long sum1 = std::accumulate(row1.begin(), row1.end(), 0);\n        long sum2 = std::accumulate(row2.begin(), row2.end(), 0);\n        return sum1 < sum2;\n    };\n\n    // Sort the matrix using the custom comparator function.\n    std::sort(M.begin(), M.end(), row_sum_compare);\n\n    return M;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/776",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nlong count_vowels(std::string test_str) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = count_vowels;\n    assert(candidate((\"bestinstareels\")) == (7));\n    assert(candidate((\"partofthejourneyistheend\")) == (12));\n    assert(candidate((\"amazonprime\")) == (5));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count characters with vowels as their neighbors.\n# Initialize a counter for the number of characters with vowels as neighbors.\n# Iterate over the characters in the input string.\n    # Check if the current character is a vowel.\n        # If it is, check if the previous character or the next character (if it exists) is also a vowel.\n            # If either of them is a vowel, increment the counter.\n# Return the count of characters with vowels as neighbors."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nlong count_vowels(std::string test_str) {\n    std::string vowels = \"aeiouAEIOU\";\n    long count = 0;\n\n    // Iterate over the characters in the string\n    for (int i = 0; i < test_str.length(); i++) {\n        char current = test_str[i];\n\n        // Check if the current character is a vowel\n        if (vowels.find(current) != std::string::npos) {\n            // Check if the previous character is a vowel\n            if (i > 0 && vowels.find(test_str[i - 1]) != std::string::npos) {\n                count++;\n            }\n            // Check if the next character is a vowel\n            else if (i < test_str.length() - 1 && vowels.find(test_str[i + 1]) != std::string::npos) {\n                count++;\n            }\n        }\n    }\n\n    return count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/306",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the maximum sum of an increasing subsequence.\n# Create a dynamic programming array to store the maximum sum until each index.\n# Initialize the first element of the dynamic programming array as the element at the given index.\n# Iterate from the given index to the kth index.\n    # Iterate from the given index to the current index.\n        # Check if the current element is greater than the previous element.\n            # If it is, update the maximum sum at the current index by adding the current element to the maximum sum at the previous index.\n    # Update the maximum sum at the current index by adding the current element at the kth index.\n# Find the maximum sum in the dynamic programming array.\n# Return the maximum sum.\n"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    std::vector<long> dp(n, 0);\n    dp[index] = a[index];\n\n    for (long i = index; i < k; i++) {\n        for (long j = index; j < i; j++) {\n            if (a[i] > a[j]) {\n                dp[i] = std::max(dp[i], dp[j] + a[i]);\n            }\n        }\n        dp[i] += a[k];\n    }\n\n    long max_sum = *std::max_element(dp.begin(), dp.end());\n    return max_sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/128",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find words that are longer than n characters from a given vector of words.\nstd::vector<std::string> long_words(long n, std::string str) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = long_words;\n    assert(candidate((3), (\"python is a programming language\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\", (std::string)\"language\"})));\n    assert(candidate((2), (\"writing a program\")) == (std::vector<std::string>({(std::string)\"writing\", (std::string)\"program\"})));\n    assert(candidate((5), (\"sorting list\")) == (std::vector<std::string>({(std::string)\"sorting\"})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find words longer than n characters.\n# Create an empty vector to store the long words.\n# Split the input string into individual words.\n# Iterate over each word in the vector of words.\n    # Check if the length of the current word is greater than n.\n        # If it is, add the word to the vector of long words.\n# Return the vector of long words."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to find words that are longer than n characters from a given vector of words.\nstd::vector<std::string> long_words(long n, std::string str) {\n    std::vector<std::string> words;\n    std::stringstream ss(str);\n    std::string word;\n\n    // Split the input string into individual words.\n    while (ss >> word) {\n        // Check if the length of the current word is greater than n.\n        if (word.length() > n) {\n            words.push_back(word);\n        }\n    }\n\n    return words;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/777",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the sum of non-repeated elements in a given vector.\nlong find_sum(std::vector<long> arr) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the sum of non-repeated elements in a vector.\n# Create a map to store the count of each element in the vector.\n# Initialize a variable to store the sum of non-repeated elements.\n# Iterate over the vector.\n    # Check if the current element exists in the map.\n        # If it does, increment its count in the map.\n        # If its count is 2, remove it from the map.\n    # If the current element does not exist in the map, add it with a count of 1.\n# Iterate over the map.\n    # Add the key (non-repeated element) to the sum.\n# Return the sum of non-repeated elements."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the sum of non-repeated elements in a given vector.\nlong find_sum(std::vector<long> arr) {\n    std::map<long, int> element_count;\n    long sum = 0;\n\n    // Count the occurrences of each element in the vector\n    for (const auto& num : arr) {\n        if (element_count.find(num) != element_count.end()) {\n            element_count[num]++;\n            if (element_count[num] == 2) {\n                element_count.erase(num);\n            }\n        } else {\n            element_count[num] = 1;\n        }\n    }\n\n    // Calculate the sum of non-repeated elements\n    for (const auto& pair : element_count) {\n        sum += pair.first;\n    }\n\n    return sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/740",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(std::tuple<long, long, long, long, long, long> test_tup) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate((std::make_tuple(1, 5, 7, 10, 13, 5))) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate((std::make_tuple(1, 2, 3, 4, 5, 6))) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate((std::make_tuple(7, 8, 9, 10, 11, 12))) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to convert the given tuple to a key-value map using adjacent elements.\n# Create an empty map to store the key-value pairs.\n# Iterate over the tuple using a for loop.\n    # Retrieve the current element and the next element in the tuple.\n    # Add the current element as the key and the next element as the value to the map.\n# Return the map containing the key-value pairs."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements.\nstd::map<long,long> tuple_to_dict(std::tuple<long, long, long, long, long, long> test_tup) {\n    std::map<long, long> result;\n    \n    for (int i = 0; i < 5; i += 2) {\n        result[std::get<long>(test_tup[i])] = std::get<long>(test_tup[i+1]);\n    }\n    \n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/630",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract all the adjacent coordinates of the given coordinate tuple.\nstd::vector<std::vector<long>> get_coordinates(std::tuple<long, long> test_tup) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = get_coordinates;\n    assert(candidate((std::make_tuple(3, 4))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)2, (long)4}), (std::vector<long>)std::vector<long>({(long)2, (long)5}), (std::vector<long>)std::vector<long>({(long)3, (long)3}), (std::vector<long>)std::vector<long>({(long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)4, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)4}), (std::vector<long>)std::vector<long>({(long)4, (long)5})})));\n    assert(candidate((std::make_tuple(4, 5))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)3, (long)6}), (std::vector<long>)std::vector<long>({(long)4, (long)4}), (std::vector<long>)std::vector<long>({(long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)4, (long)6}), (std::vector<long>)std::vector<long>({(long)5, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)5}), (std::vector<long>)std::vector<long>({(long)5, (long)6})})));\n    assert(candidate((std::make_tuple(5, 6))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)4, (long)6}), (std::vector<long>)std::vector<long>({(long)4, (long)7}), (std::vector<long>)std::vector<long>({(long)5, (long)5}), (std::vector<long>)std::vector<long>({(long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)6, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)6}), (std::vector<long>)std::vector<long>({(long)6, (long)7})})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to extract adjacent coordinates.\n# Create a vector to store the adjacent coordinates.\n# Retrieve the two elements of the input tuple.\n# Iterate over all possible adjacent coordinates.\n    # Calculate the adjacent coordinate by adding or subtracting 1 from each element of the input tuple.\n    # Add the adjacent coordinate to the vector.\n# Return the vector of adjacent coordinates."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract all the adjacent coordinates of the given coordinate tuple.\nstd::vector<std::vector<long>> get_coordinates(std::tuple<long, long> test_tup) {\n    std::vector<std::vector<long>> adjacent_coordinates;\n    long x = std::get<0>(test_tup);\n    long y = std::get<1>(test_tup);\n\n    // Iterate over all possible adjacent coordinates.\n    for (long i = x - 1; i <= x + 1; i++) {\n        for (long j = y - 1; j <= y + 1; j++) {\n            if (i != x || j != y) {\n                adjacent_coordinates.push_back({i, j});\n            }\n        }\n    }\n\n    return adjacent_coordinates;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/222",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Extract the type of the first element in the tuple.\n# Iterate over the remaining elements in the tuple.\n    # Check if the type of each element matches the type of the first element.\n        # If it doesn't, return false.\n# If all elements have the same type, return true."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\ntemplate<typename T, typename... Types>\nbool check_type(const std::tuple<T, Types...>& test_tuple) {\n    std::vector<std::type_index> types = {typeid(T), typeid(Types)...};\n    std::type_index first_type = types[0];\n\n    for (const auto& type : types) {\n        if (type != first_type) {\n            return false;\n        }\n    }\n\n    return true;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/627",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the smallest missing number from a sorted vector of natural numbers.\n# Initialize a variable to store the smallest missing number.\n# Iterate over the vector from the first element to the last element.\n    # Check if the current element is not equal to the expected value.\n        # If it is not, return the expected value.\n    # Increment the expected value by 1.\n# If no missing number is found, return the next number after the last element of the vector.\n"
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long expected = 1;\n\n    // Iterate over the vector to find the smallest missing number.\n    for (const auto& num : array) {\n        if (num != expected) {\n            return expected;\n        }\n        expected++;\n    }\n\n    // If no missing number is found, return the next number after the last element.\n    return expected;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/92",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Convert the given number to a string.\n# Check if the length of the string is less than 3.\n    # If it is, return false as undulating numbers must have at least 3 digits.\n# Iterate through the characters in the string starting from index 2.\n    # Check if the current character is equal to the previous character.\n        # If it is, return false as undulating numbers must have alternating digits.\n# Iterate through the characters in the string starting from index 3.\n    # Check if the current character is not equal to the previous character.\n        # If it is not, return false as undulating numbers must have alternating digits.\n# Return true if all conditions are met."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::string num = std::to_string(n);\n\n    if (num.length() < 3) {\n        return false;\n    }\n\n    for (int i = 2; i < num.length(); i++) {\n        if (num[i] == num[i - 1]) {\n            return false;\n        }\n    }\n\n    for (int i = 3; i < num.length(); i++) {\n        if (num[i] != num[i - 1]) {\n            return false;\n        }\n    }\n\n    return true;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/753",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum k records from tuple vector. https://www.geeksforgeeks.org/cppthon-find-minimum-k-records-from-tuple-vector/ - in this case a verbatim cocpp of test cases\nstd::vector<std::tuple<std::string, long>> min_k(std::vector<std::tuple<std::string, long>> test_list, long K) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = min_k;\n    assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Manjeet\", 10), (std::tuple<std::string, long>)std::make_tuple(\"Akshat\", 4), (std::tuple<std::string, long>)std::make_tuple(\"Akash\", 2), (std::tuple<std::string, long>)std::make_tuple(\"Nikhil\", 8)})), (2)) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Akash\", 2), (std::tuple<std::string, long>)std::make_tuple(\"Akshat\", 4)})));\n    assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Sanjeev\", 11), (std::tuple<std::string, long>)std::make_tuple(\"Angat\", 5), (std::tuple<std::string, long>)std::make_tuple(\"Akash\", 3), (std::tuple<std::string, long>)std::make_tuple(\"Nepin\", 9)})), (3)) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Akash\", 3), (std::tuple<std::string, long>)std::make_tuple(\"Angat\", 5), (std::tuple<std::string, long>)std::make_tuple(\"Nepin\", 9)})));\n    assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"tanmay\", 14), (std::tuple<std::string, long>)std::make_tuple(\"Amer\", 11), (std::tuple<std::string, long>)std::make_tuple(\"Ayesha\", 9), (std::tuple<std::string, long>)std::make_tuple(\"SKD\", 16)})), (1)) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"Ayesha\", 9)})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the minimum K records from a vector of tuples.\n# Sort the input vector of tuples based on the second element of each tuple in descending order.\n# Create a new vector to store the minimum K records.\n# Iterate over the sorted vector of tuples.\n    # Append the current tuple to the new vector.\n    # Check if the new vector has reached size K.\n        # If it has, break out of the loop.\n# Return the new vector containing the minimum K records."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum k records from tuple vector.\nstd::vector<std::tuple<std::string, long>> min_k(std::vector<std::tuple<std::string, long>> test_list, long K) {\n    // Sort the input vector of tuples based on the second element in descending order.\n    std::sort(test_list.begin(), test_list.end(), [](const std::tuple<std::string, long>& a, const std::tuple<std::string, long>& b) {\n        return std::get<1>(a) > std::get<1>(b);\n    });\n\n    // Create a new vector to store the minimum K records.\n    std::vector<std::tuple<std::string, long>> result;\n    result.reserve(K);\n\n    // Iterate over the sorted vector of tuples.\n    for (const auto& record : test_list) {\n        // Append the current tuple to the new vector.\n        result.push_back(record);\n\n        // Check if the new vector has reached size K.\n        if (result.size() == K) {\n            break;\n        }\n    }\n\n    // Return the new vector containing the minimum K records.\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/61",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count the number of substrings with the sum of digits equal to their length.\n# Initialize a counter for the number of valid substrings.\n# Iterate over all possible substrings of the given string.\n    # Initialize a variable to store the sum of digits in the current substring.\n    # Iterate over each character in the substring.\n        # Convert the character to an integer and add it to the sum.\n    # Check if the sum of digits is equal to the length of the substring.\n        # If it is, increment the counter.\n# Return the count of valid substrings."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n\n    // Iterate over all possible substrings of the given string.\n    for (int i = 0; i < s.length(); i++) {\n        for (int j = i; j < s.length(); j++) {\n            std::string substr = s.substr(i, j - i + 1);\n            int sum = 0;\n\n            // Calculate the sum of digits in the current substring.\n            for (char c : substr) {\n                int digit = c - '0';\n                sum += digit;\n            }\n\n            // Check if the sum of digits is equal to the length of the substring.\n            if (sum == substr.length()) {\n                count++;\n            }\n        }\n    }\n\n    return count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/279",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth decagonal number.\nlong is_num_decagonal(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = is_num_decagonal;\n    assert(candidate((3)) == (27));\n    assert(candidate((7)) == (175));\n    assert(candidate((10)) == (370));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the nth decagonal number.\n# Calculate the decagonal number using the formula: decagonal_number = n*(3*n-1)/2\n# Return the decagonal number."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth decagonal number.\nlong find_nth_decagonal(long n) {\n    long decagonal_number = n * (3 * n - 1) / 2;\n    return decagonal_number;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/272",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector of tuples and returns a vector containing the rear element of each tuple.\nstd::vector<long> rear_extract(std::vector<std::tuple<long, std::string, long>> test_list) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = rear_extract;\n    assert(candidate((std::vector<std::tuple<long, std::string, long>>({(std::tuple<long, std::string, long>)std::make_tuple(1, \"Rash\", 21), (std::tuple<long, std::string, long>)std::make_tuple(2, \"Varsha\", 20), (std::tuple<long, std::string, long>)std::make_tuple(3, \"Kil\", 19)}))) == (std::vector<long>({(long)21, (long)20, (long)19})));\n    assert(candidate((std::vector<std::tuple<long, std::string, long>>({(std::tuple<long, std::string, long>)std::make_tuple(1, \"Sai\", 36), (std::tuple<long, std::string, long>)std::make_tuple(2, \"Ayesha\", 25), (std::tuple<long, std::string, long>)std::make_tuple(3, \"Salman\", 45)}))) == (std::vector<long>({(long)36, (long)25, (long)45})));\n    assert(candidate((std::vector<std::tuple<long, std::string, long>>({(std::tuple<long, std::string, long>)std::make_tuple(1, \"Sudeep\", 14), (std::tuple<long, std::string, long>)std::make_tuple(2, \"Vandana\", 36), (std::tuple<long, std::string, long>)std::make_tuple(3, \"Dawood\", 56)}))) == (std::vector<long>({(long)14, (long)36, (long)56})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function that takes in a vector of tuples and returns a vector containing the rear element of each tuple.\n# Initialize an empty vector to store the rear elements.\n# Iterate over the input list of tuples.\n    # Retrieve the rear element of each tuple.\n    # Append the rear element to the result vector.\n# Return the result vector containing the rear elements."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector of tuples and returns a vector containing the rear element of each tuple.\nstd::vector<long> rear_extract(std::vector<std::tuple<long, std::string, long>> test_list) {\n    std::vector<long> result;\n    \n    // Iterate over the test_list to extract the rear element of each tuple.\n    for (const auto& tup : test_list) {\n        long rear = std::get<2>(tup);\n        result.push_back(rear);\n    }\n    \n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/89",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the closest smaller number than n.\nlong closest_num(long N) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = closest_num;\n    assert(candidate((11)) == (10));\n    assert(candidate((7)) == (6));\n    assert(candidate((12)) == (11));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the closest smaller number than n.\n# Check if n is less than or equal to 0.\n    # If it is, return -1 since there is no smaller number.\n# Subtract 1 from n to get a smaller number.\n# Return the result."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the closest smaller number than n.\nlong closest_num(long N) {\n    if (N <= 0) {\n        return -1;\n    }\n    return N - 1;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/780",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the combinations of sums with tuples in the given tuple vector. https://www.geeksforgeeks.org/cppthon-combinations-of-sum-with-tuples-in-tuple-vector/\nstd::vector<std::tuple<long, long>> find_combinations(std::vector<std::tuple<long, long>> test_list) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find_combinations;\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 4), (std::tuple<long, long>)std::make_tuple(6, 7), (std::tuple<long, long>)std::make_tuple(5, 1), (std::tuple<long, long>)std::make_tuple(6, 10)}))) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(8, 11), (std::tuple<long, long>)std::make_tuple(7, 5), (std::tuple<long, long>)std::make_tuple(8, 14), (std::tuple<long, long>)std::make_tuple(11, 8), (std::tuple<long, long>)std::make_tuple(12, 17), (std::tuple<long, long>)std::make_tuple(11, 11)})));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(3, 5), (std::tuple<long, long>)std::make_tuple(7, 8), (std::tuple<long, long>)std::make_tuple(6, 2), (std::tuple<long, long>)std::make_tuple(7, 11)}))) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(10, 13), (std::tuple<long, long>)std::make_tuple(9, 7), (std::tuple<long, long>)std::make_tuple(10, 16), (std::tuple<long, long>)std::make_tuple(13, 10), (std::tuple<long, long>)std::make_tuple(14, 19), (std::tuple<long, long>)std::make_tuple(13, 13)})));\n    assert(candidate((std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(4, 6), (std::tuple<long, long>)std::make_tuple(8, 9), (std::tuple<long, long>)std::make_tuple(7, 3), (std::tuple<long, long>)std::make_tuple(8, 12)}))) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(12, 15), (std::tuple<long, long>)std::make_tuple(11, 9), (std::tuple<long, long>)std::make_tuple(12, 18), (std::tuple<long, long>)std::make_tuple(15, 12), (std::tuple<long, long>)std::make_tuple(16, 21), (std::tuple<long, long>)std::make_tuple(15, 15)})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the combinations of sums with tuples in the given tuple vector.\n# Create an empty result vector to store the combinations.\n# Iterate over the input tuple vector.\n    # Retrieve the two elements of the current tuple.\n    # Iterate over the result vector.\n        # Retrieve the two elements of the current result tuple.\n        # Compute the sum of the elements from the current tuple and the current result tuple.\n        # Create a new tuple with the sum as its elements and add it to the result vector.\n# Return the result vector with all the combinations of sums."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to find the combinations of sums with tuples in the given tuple vector.\nstd::vector<std::tuple<long, long>> find_combinations(std::vector<std::tuple<long, long>> test_list) {\n    std::vector<std::tuple<long, long>> result;\n\n    // Iterate over the input tuple vector.\n    for (const auto& tuple : test_list) {\n        long a = std::get<0>(tuple);\n        long b = std::get<1>(tuple);\n\n        // Iterate over the result vector.\n        for (const auto& res_tuple : result) {\n            long c = std::get<0>(res_tuple);\n            long d = std::get<1>(res_tuple);\n\n            // Compute the sum of the elements from the current tuple and the current result tuple.\n            long sum_a_c = a + c;\n            long sum_b_d = b + d;\n\n            // Create a new tuple with the sum as its elements and add it to the result vector.\n            result.push_back(std::make_tuple(sum_a_c, sum_b_d));\n        }\n    }\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/721",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfloat maxAverageOfPath(std::vector<std::vector<long>> cost) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = maxAverageOfPath;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)6, (long)5, (long)4}), (std::vector<long>)std::vector<long>({(long)7, (long)3, (long)9})}))) == (5.2f));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)7, (long)6, (long)5}), (std::vector<long>)std::vector<long>({(long)8, (long)4, (long)10})}))) == (6.2f));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)8, (long)7, (long)6}), (std::vector<long>)std::vector<long>({(long)9, (long)5, (long)11})}))) == (7.2f));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})}))) == (5.8f));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the maximum average of a path in a square matrix.\n# Initialize variables for the maximum average, total cost, and number of cells visited.\n# Iterate over each cell in the matrix.\n    # Update the total cost by adding the cost of the current cell.\n    # Increment the number of cells visited by 1.\n    # Check if it is possible to move right.\n        # If it is, update the total cost and number of cells visited by moving right.\n    # Check if it is possible to move down.\n        # If it is, update the total cost and number of cells visited by moving down.\n    # Calculate the average for the current path.\n    # Check if the average is greater than the maximum average.\n        # If it is, update the maximum average.\n# Return the maximum average."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfloat maxAverageOfPath(std::vector<std::vector<long>> cost) {\n    int n = cost.size();\n    int m = cost[0].size();\n\n    std::vector<std::vector<float>> dp(n, std::vector<float>(m, 0));\n\n    dp[0][0] = cost[0][0];\n\n    for (int i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n\n    for (int j = 1; j < m; j++) {\n        dp[0][j] = dp[0][j - 1] + cost[0][j];\n    }\n\n    for (int i = 1; i < n; i++) {\n        for (int j = 1; j < m; j++) {\n            dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n\n    return dp[n - 1][m - 1] / (n + m - 1);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/280",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector and element and returns a tuple containing a boolean that indicates if the element is in the vector and the index position of the element (or -1 if the element is not found).\nstd::tuple<bool, long> sequential_search(std::vector<long> dlist, long item) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = sequential_search;\n    assert(candidate((std::vector<long>({(long)11, (long)23, (long)58, (long)31, (long)56, (long)77, (long)43, (long)12, (long)65, (long)19})), (31)) == (std::make_tuple(true, 3)));\n    assert(candidate((std::vector<long>({(long)12, (long)32, (long)45, (long)62, (long)35, (long)47, (long)44, (long)61})), (61)) == (std::make_tuple(true, 7)));\n    assert(candidate((std::vector<long>({(long)9, (long)10, (long)17, (long)19, (long)22, (long)39, (long)48, (long)56})), (48)) == (std::make_tuple(true, 6)));\n}\n"
        ],
        "draft_plan": [
            "# Define a function that takes in a vector and an element.\n# Initialize a boolean variable to indicate if the element is found in the vector.\n# Initialize a variable to store the index position of the element.\n# Iterate over the vector using a for loop.\n    # Check if the current element is equal to the given element.\n        # If it is, set the boolean variable to true and store the index position.\n        # Break out of the loop.\n# If the boolean variable is true, return a tuple with true and the index position.\n# If the boolean variable is false, return a tuple with false and -1 as the index position."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector and an element and returns a tuple containing a boolean that indicates if the element is in the vector and the index position of the element (or -1 if the element is not found).\nstd::tuple<bool, long> sequential_search(std::vector<long> dlist, long item) {\n    bool found = false;\n    long index = -1;\n    \n    for (long i = 0; i < dlist.size(); i++) {\n        if (dlist[i] == item) {\n            found = true;\n            index = i;\n            break;\n        }\n    }\n    \n    return std::make_tuple(found, index);\n}"
        ]
    },
    {
        "id": "mbpp_cpp/412",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to remove odd numbers from a given vector.\nstd::vector<long> remove_odd(std::vector<long> l) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = remove_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)6}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)3}))) == (std::vector<long>({(long)10, (long)20})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to remove odd numbers from a given vector.\n# Create an empty vector to store the even numbers.\n# Iterate over the input vector.\n    # Check if the current number is even.\n        # If it is, append it to the new vector.\n# Return the new vector containing only even numbers."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove odd numbers from a given vector.\nstd::vector<long> remove_odd(std::vector<long> l) {\n    std::vector<long> even_numbers;\n\n    // Iterate over the input vector\n    for (auto num : l) {\n        // Check if the number is even\n        if (num % 2 == 0) {\n            even_numbers.push_back(num);\n        }\n    }\n\n    return even_numbers;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/804",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the product of numbers in a vector is even or not.\nbool is_product_even(std::vector<long> arr) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = is_product_even;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1}))) == (false));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check whether the product of numbers in a vector is even or not.\n# Initialize a variable to store the product of the numbers in the vector.\n# Iterate over the elements in the vector.\n    # Multiply each element with the product variable.\n# Check if the product is divisible by 2.\n    # If it is, return true (indicating that the product is even).\n    # If it is not, return false (indicating that the product is odd)."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the product of numbers in a vector is even or not.\nbool is_product_even(std::vector<long> arr) {\n    long product = 1;\n\n    // Calculate the product of the numbers in the vector.\n    for (const auto& num : arr) {\n        product *= num;\n    }\n\n    // Check if the product is even.\n    if (product % 2 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_cpp/309",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the maximum of two numbers.\nlong maximum(long a, long b) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((5), (10)) == (10));\n    assert(candidate((-1), (-2)) == (-1));\n    assert(candidate((9), (7)) == (9));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the maximum of two numbers.\n# Check if the first number is greater than or equal to the second number.\n    # If it is, return the first number as the maximum.\n# If the first number is not greater than or equal to the second number, return the second number as the maximum."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the maximum of two numbers.\nlong maximum(long a, long b) {\n    if (a >= b) {\n        return a;\n    } else {\n        return b;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_cpp/131",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to reverse only the vowels of a given string (where y is not a vowel).\nstd::string reverse_vowels(std::string str1) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = reverse_vowels;\n    assert(candidate((\"Python\")) == (\"Python\"));\n    assert(candidate((\"USA\")) == (\"ASU\"));\n    assert(candidate((\"ab\")) == (\"ab\"));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to reverse the vowels in a given string.\n# Create a set to store the vowels.\n# Create two pointers, one pointing to the start of the string and the other pointing to the end of the string.\n# Iterate until the two pointers meet or cross each other.\n    # Check if the characters at the two pointers are both vowels.\n        # If they are, swap the characters.\n        # Move the first pointer one step forward.\n        # Move the second pointer one step backward.\n    # If the character at the first pointer is not a vowel, move the first pointer one step forward.\n    # If the character at the second pointer is not a vowel, move the second pointer one step backward.\n# Return the modified string with reversed vowels."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to reverse only the vowels of a given string (where y is not a vowel).\nstd::string reverse_vowels(std::string str1) {\n    std::set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    int start = 0;\n    int end = str1.length() - 1;\n\n    while (start < end) {\n        if (vowels.count(str1[start]) && vowels.count(str1[end])) {\n            std::swap(str1[start], str1[end]);\n            start++;\n            end--;\n        } else if (!vowels.count(str1[start])) {\n            start++;\n        } else if (!vowels.count(str1[end])) {\n            end--;\n        }\n    }\n\n    return str1;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/259",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to maximize the given two vectors.\nstd::vector<std::vector<long>> maximize_elements(std::vector<std::vector<long>> test_tup1, std::vector<std::vector<long>> test_tup2) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = maximize_elements;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)2, (long)9}), (std::vector<long>)std::vector<long>({(long)1, (long)10})})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)3, (long)9}), (std::vector<long>)std::vector<long>({(long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)7, (long)3})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)4, (long)9}), (std::vector<long>)std::vector<long>({(long)2, (long)9}), (std::vector<long>)std::vector<long>({(long)7, (long)10})})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)3, (long)10}), (std::vector<long>)std::vector<long>({(long)2, (long)11})})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)4, (long)10}), (std::vector<long>)std::vector<long>({(long)2, (long)2}), (std::vector<long>)std::vector<long>({(long)8, (long)4})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)5, (long)10}), (std::vector<long>)std::vector<long>({(long)3, (long)10}), (std::vector<long>)std::vector<long>({(long)8, (long)11})})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7}), (std::vector<long>)std::vector<long>({(long)4, (long)11}), (std::vector<long>)std::vector<long>({(long)3, (long)12})})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)5, (long)11}), (std::vector<long>)std::vector<long>({(long)3, (long)3}), (std::vector<long>)std::vector<long>({(long)9, (long)5})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)6, (long)11}), (std::vector<long>)std::vector<long>({(long)4, (long)11}), (std::vector<long>)std::vector<long>({(long)9, (long)12})})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to maximize two vectors.\n# Create an empty vector to store the result.\n# Iterate over each element in the two input vectors.\n    # Compare the corresponding elements from both vectors.\n        # Append the maximum element to the result vector.\n# Return the result vector."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to maximize the given two vectors.\nstd::vector<std::vector<long>> maximize_elements(std::vector<std::vector<long>> test_tup1, std::vector<std::vector<long>> test_tup2) {\n    std::vector<std::vector<long>> result;\n    \n    // Check if the sizes of the two vectors are the same\n    assert(test_tup1.size() == test_tup2.size());\n    \n    for (int i = 0; i < test_tup1.size(); i++) {\n        std::vector<long> temp;\n        // Check if the sizes of the inner vectors are the same\n        assert(test_tup1[i].size() == test_tup2[i].size());\n        \n        for (int j = 0; j < test_tup1[i].size(); j++) {\n            // Compare the elements from both vectors\n            long max_element = std::max(test_tup1[i][j], test_tup2[i][j]);\n            temp.push_back(max_element);\n        }\n        \n        result.push_back(temp);\n    }\n    \n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/790",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether every even index contains even numbers of a given vector.\nbool even_position(std::vector<long> nums) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = even_position;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (false));\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)4}))) == (true));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to check whether every even index contains even numbers in a given vector.\n# Iterate over the vector, starting from index 0 and incrementing by 2.\n    # Check if the element at the current index is even.\n        # If it is not, return false.\n# Return true if all even indices contain even numbers, otherwise return false."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether every even index contains even numbers of a given vector.\nbool even_position(std::vector<long> nums) {\n    for (int i = 0; i < nums.size(); i += 2) {\n        if (nums[i] % 2 != 0) {\n            return false;\n        }\n    }\n    return true;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/396",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given string starts and ends with the same character or not.\nstd::string check_char(std::string string) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = check_char;\n    assert(candidate((\"abba\")) == (\"Valid\"));\n    assert(candidate((\"a\")) == (\"Valid\"));\n    assert(candidate((\"abcd\")) == (\"Invalid\"));\n}\n"
        ],
        "draft_plan": [
            "# Check if the given string is empty. If it is, return \"Empty string\".\n# Check if the first and last characters of the string are equal.\n    # If they are equal, return \"Starts and ends with the same character\".\n    # If they are not equal, return \"Does not start and end with the same character\"."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given string starts and ends with the same character or not.\nstd::string check_char(std::string string) {\n    if (string.empty()) {\n        return \"Empty string\";\n    }\n\n    if (string.front() == string.back()) {\n        return \"Starts and ends with the same character\";\n    } else {\n        return \"Does not start and end with the same character\";\n    }\n}"
        ]
    },
    {
        "id": "mbpp_cpp/453",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the sum of even factors of a number.\nlong sumofFactors(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = sumofFactors;\n    assert(candidate((18)) == (26));\n    assert(candidate((30)) == (48));\n    assert(candidate((6)) == (8));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the sum of even factors of a number.\n# Initialize a variable `sum` to store the sum of even factors.\n# Iterate from 2 to the square root of the given number.\n    # Check if the current number is a factor of the given number.\n        # If it is, check if it is an even number.\n            # If it is, add it to the `sum` variable.\n            # Also, check if the current number is not the square root of the given number.\n                # If it is not, add the quotient of the given number divided by the current number to the `sum` variable.\n# Return the final `sum` variable."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the sum of even factors of a number.\nlong sumofFactors(long n) {\n    long sum = 0;\n    for (long i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n            if (i != n / i && (n / i) % 2 == 0) {\n                sum += n / i;\n            }\n        }\n    }\n    return sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/731",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the lateral surface area of a cone given radius r and the height h.\nfloat lateralsurface_cone(long r, long h) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = lateralsurface_cone;\n    assert(candidate((5), (12)) == (204.20352248333654f));\n    assert(candidate((10), (15)) == (566.3586699569488f));\n    assert(candidate((19), (17)) == (1521.8090132193388f));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the lateral surface area of a cone.\n# Calculate the slant height of the cone using the radius and height.\n# Calculate the lateral surface area using the formula: lateral surface area = \u03c0 * r * slant height\n# Return the lateral surface area."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to find the lateral surface area of a cone given radius r and the height h.\nfloat lateralsurface_cone(long r, long h) {\n    // Calculate the slant height of the cone.\n    float slant_height = sqrt(pow(r, 2) + pow(h, 2));\n    \n    // Calculate the lateral surface area.\n    float lateral_surface_area = 3.14159 * r * slant_height;\n\n    return lateral_surface_area;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/564",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function which takes a vector of integers and counts the number of possible unordered pairs where both elements are unequal.\nlong count_Pairs(std::vector<long> arr, long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = count_Pairs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (3)) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})), (5)) == (10));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to count the number of possible unordered pairs.\n# Initialize a counter for the number of pairs.\n# Iterate over the input vector of integers.\n    # For each element, iterate over the remaining elements in the vector.\n        # Check if the two elements are not equal.\n            # If they are not equal, increment the pair count.\n# Return the number of pairs."
        ],
        "code": [
            "#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function to count the number of possible unordered pairs.\nlong count_Pairs(std::vector<long> arr, long n) {\n    long pair_count = 0;\n\n    // Iterate over the vector of integers\n    for (int i = 0; i < n; i++) {\n        // Iterate over the remaining elements\n        for (int j = i + 1; j < n; j++) {\n            // Check if the elements are not equal\n            if (arr[i] != arr[j]) {\n                pair_count++;\n            }\n        }\n    }\n\n    return pair_count;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/733",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nlong find_first_occurrence(std::vector<long> A, long x) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = find_first_occurrence;\n    assert(candidate((std::vector<long>({(long)2, (long)5, (long)5, (long)5, (long)6, (long)6, (long)8, (long)9, (long)9, (long)9})), (5)) == (1));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)5, (long)6, (long)6, (long)8, (long)9, (long)9, (long)9})), (5)) == (2));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)5, (long)6, (long)6, (long)8, (long)9, (long)9, (long)9})), (6)) == (4));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to find the index of the first occurrence of a given number in a sorted vector.\n# Implement binary search to search for the number.\n# Initialize two pointers, `start` and `end`, to the start and end indices of the vector, respectively.\n# While `start` is less than or equal to `end`:\n    # Calculate the middle index using `start` and `end`.\n    # If the middle element is equal to the target number:\n        # Check if the previous element is also equal to the target number.\n            # If it is, update `end` to the middle index - 1.\n            # If it is not, return the middle index.\n    # If the middle element is less than the target number, update `start` to the middle index + 1.\n    # If the middle element is greater than the target number, update `end` to the middle index - 1.\n# If the target number is not found, return -1."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nlong find_first_occurrence(std::vector<long> A, long x) {\n    long start = 0;\n    long end = A.size() - 1;\n\n    while (start <= end) {\n        long mid = start + (end - start) / 2;\n\n        if (A[mid] == x) {\n            if (mid > 0 && A[mid - 1] == x) {\n                end = mid - 1;\n            } else {\n                return mid;\n            }\n        } else if (A[mid] < x) {\n            start = mid + 1;\n        } else {\n            end = mid - 1;\n        }\n    }\n\n    return -1;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/267",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nlong square_Sum(long n) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = square_Sum;\n    assert(candidate((2)) == (10));\n    assert(candidate((3)) == (35));\n    assert(candidate((4)) == (84));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to calculate the sum of squares of first n odd natural numbers.\n# Initialize a variable to hold the sum.\n# Iterate from 1 to n (inclusive) with a step size of 2 (to get odd numbers).\n    # Calculate the square of the current odd number.\n    # Add the square to the sum.\n# Return the sum."
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nlong square_Sum(long n) {\n    long sum = 0;\n\n    // Iterate from 1 to n with a step size of 2\n    for (long i = 1; i <= n; i += 2) {\n        sum += (i * i);\n    }\n\n    return sum;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/417",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find common first element in given vector of vectors.\nstd::vector<std::vector<std::string>> group_tuples(std::vector<std::vector<std::string>> Input) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = group_tuples;\n    assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"y\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"z\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"w\", (std::string)\"t\"})}))) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"w\", (std::string)\"t\"})})));\n    assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"b\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"c\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"d\", (std::string)\"e\"})}))) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"d\", (std::string)\"e\"})})));\n    assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"f\", (std::string)\"g\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"f\", (std::string)\"g\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"h\", (std::string)\"i\"})}))) == (std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"f\", (std::string)\"g\", (std::string)\"g\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"h\", (std::string)\"i\"})})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to group tuples based on their first element.\n# Create a map to store the first element of each tuple and the corresponding list of tuples.\n# Iterate over the input vector of vectors.\n    # Iterate over each vector in the input vector.\n        # Retrieve the first element of the current vector.\n        # Check if the first element exists in the map.\n            # If it does, append the current vector to the list of tuples for that first element.\n            # If it does not, create a new entry in the map with the first element as the key and the current vector as the value.\n# Convert the map values to a vector and return it.\n"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find common first element in given vector of vectors.\nstd::vector<std::vector<std::string>> group_tuples(std::vector<std::vector<std::string>> Input) {\n    std::map<std::string, std::vector<std::vector<std::string>>> tuple_map;\n  \n    // Iterate over the input vector of vectors\n    for (const auto& vec : Input) {\n        std::string first_element = vec[0];\n\n        // Check if the first element exists in the map\n        if (tuple_map.count(first_element) > 0) {\n            tuple_map[first_element].push_back(vec);\n        } else {\n            tuple_map[first_element] = {vec};\n        }\n    }\n\n    // Convert map values to a vector\n    std::vector<std::vector<std::string>> result;\n    for (const auto& item : tuple_map) {\n        result.push_back(item.second);\n    }\n\n    return result;\n}"
        ]
    },
    {
        "id": "mbpp_cpp/108",
        "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to merge three vectors into a single sorted vector.\nstd::vector<long> merge_sorted_list(std::vector<long> num1, std::vector<long> num2, std::vector<long> num3) {\n",
        "solution": null,
        "test": [
            "}\nint main() {\n    auto candidate = merge_sorted_list;\n    assert(candidate((std::vector<long>({(long)25, (long)24, (long)15, (long)4, (long)5, (long)29, (long)110})), (std::vector<long>({(long)19, (long)20, (long)11, (long)56, (long)25, (long)233, (long)154})), (std::vector<long>({(long)24, (long)26, (long)54, (long)48}))) == (std::vector<long>({(long)4, (long)5, (long)11, (long)15, (long)19, (long)20, (long)24, (long)24, (long)25, (long)25, (long)26, (long)29, (long)48, (long)54, (long)56, (long)110, (long)154, (long)233})));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)6, (long)8, (long)9})), (std::vector<long>({(long)2, (long)5, (long)7, (long)11})), (std::vector<long>({(long)1, (long)4, (long)7, (long)8, (long)12}))) == (std::vector<long>({(long)1, (long)1, (long)2, (long)3, (long)4, (long)5, (long)5, (long)6, (long)7, (long)7, (long)8, (long)8, (long)9, (long)11, (long)12})));\n    assert(candidate((std::vector<long>({(long)18, (long)14, (long)10, (long)9, (long)8, (long)7, (long)9, (long)3, (long)2, (long)4, (long)1})), (std::vector<long>({(long)25, (long)35, (long)22, (long)85, (long)14, (long)65, (long)75, (long)25, (long)58})), (std::vector<long>({(long)12, (long)74, (long)9, (long)50, (long)61, (long)41}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)7, (long)8, (long)9, (long)9, (long)9, (long)10, (long)12, (long)14, (long)14, (long)18, (long)22, (long)25, (long)25, (long)35, (long)41, (long)50, (long)58, (long)61, (long)65, (long)74, (long)75, (long)85})));\n}\n"
        ],
        "draft_plan": [
            "# Define a function to merge three vectors into a single sorted vector.\n# Create an empty vector to store the merged and sorted result.\n# Initialize three indices, one for each input vector, to keep track of the current element being considered from each vector.\n# Iterate until at least one of the input vectors has been fully processed:\n    # Compare the current elements at the corresponding indices in each vector.\n    # Append the smallest element to the result vector.\n    # Increment the index of the vector from which the smallest element was taken.\n# If there are any remaining elements in any of the input vectors, append them to the result vector.\n# Return the merged and sorted vector.\n"
        ],
        "code": [
            "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to merge three vectors into a single sorted vector.\nstd::vector<long> merge_sorted_list(std::vector<long> num1, std::vector<long> num2, std::vector<long> num3) {\n    std::vector<long> merged;\n\n    int i = 0, j = 0, k = 0;\n\n    // Iterate until at least one of the input vectors has been fully processed\n    while (i < num1.size() && j < num2.size() && k < num3.size()) {\n        // Compare the current elements at the corresponding indices in each vector\n        if (num1[i] <= num2[j] && num1[i] <= num3[k]) {\n            merged.push_back(num1[i]);\n            i++;\n        } else if (num2[j] <= num1[i] && num2[j] <= num3[k]) {\n            merged.push_back(num2[j]);\n            j++;\n        } else {\n            merged.push_back(num3[k]);\n            k++;\n        }\n    }\n\n    // Append any remaining elements in the input vectors\n    while (i < num1.size()) {\n        merged.push_back(num1[i]);\n        i++;\n    }\n\n    while (j < num2.size()) {\n        merged.push_back(num2[j]);\n        j++;\n    }\n\n    while (k < num3.size()) {\n        merged.push_back(num3[k]);\n        k++;\n    }\n\n    return merged;\n}"
        ]
    },
    {
        "id": "mbpp_java/247",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    public static long lps(String str) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a 2-dimensional array `dp` of size n x n, where n is the length of the input string\n# Initialize the diagonal elements of `dp` to 1, as each character in the input string is a palindrome of length 1\n# Iterate through the input string in reverse order, starting from the second last character\n    # Iterate through the input string from the current index to the end\n        # If the characters at the current indices are the same\n            # Set `dp` at the current indices to the value of `dp` at the next indices plus 2\n        # Otherwise, set `dp` at the current indices to the maximum value between `dp` at the current index and `dp` at the next index\n# Return `dp` at indices (0, n-1), which represents the length of the longest palindromic subsequence in the input string"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long lps(String str) {\n        int n = str.length();\n        long[][] dp = new long[n][n];\n        \n        for (int i = 0; i < n; i++) {\n            dp[i][i] = 1;\n        }\n        \n        for (int i = n - 2; i >= 0; i--) {\n            for (int j = i + 1; j < n; j++) {\n                if (str.charAt(i) == str.charAt(j)) {\n                    dp[i][j] = dp[i + 1][j - 1] + 2;\n                } else {\n                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        \n        return dp[0][n - 1];\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/451",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to remove all whitespaces from the given string.\n    public static String removeWhitespaces(String text1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(removeWhitespaces((\" Google    Flutter \")).equals((\"GoogleFlutter\")));\n    assert(removeWhitespaces((\" Google    Dart \")).equals((\"GoogleDart\")));\n    assert(removeWhitespaces((\" iOS    Swift \")).equals((\"iOSSwift\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a StringBuilder object to store the modified string\n# Iterate through each character in the input string\n    # Check if the character is not a whitespace\n        # If it is not a whitespace, append it to the StringBuilder object\n# Convert the StringBuilder object to a string and return it as the modified string"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String removeWhitespaces(String text1) {\n        if (text1 == null) {\n            return null;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (char c : text1.toCharArray()) {\n            if (!Character.isWhitespace(c)) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/567",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check whether a specified array list is sorted or not.\n    public static boolean issortList(ArrayList<Long> list1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(issortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)6l, (long)8l, (long)10l, (long)12l, (long)14l, (long)16l, (long)17l)))) == (true));\n    assert(issortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)6l, (long)8l, (long)10l, (long)12l, (long)14l, (long)20l, (long)17l)))) == (false));\n    assert(issortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)6l, (long)8l, (long)10l, (long)15l, (long)14l, (long)20l)))) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input ArrayList is null or empty\n# Iterate through each element in the ArrayList starting from the second element\n    # Check if the current element is less than the previous element\n        # If the ArrayList is not sorted, return false\n# If all elements are in sorted order, return true"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean isSortedList(ArrayList<Long> list1) {\n        if (list1 == null || list1.isEmpty()) {\n            return false;\n        }\n        for (int i = 1; i < list1.size(); i++) {\n            if (list1.get(i) < list1.get(i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/438",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to count bidirectional pair pairs.\n    public static long countBidirectional(ArrayList<Pair<Long, Long>> test_list) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(countBidirectional((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(5l, 6l), (Pair<Long, Long>)Pair.with(1l, 2l), (Pair<Long, Long>)Pair.with(6l, 5l), (Pair<Long, Long>)Pair.with(9l, 1l), (Pair<Long, Long>)Pair.with(6l, 5l), (Pair<Long, Long>)Pair.with(2l, 1l))))) == (3l));\n    assert(countBidirectional((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(5l, 6l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(6l, 5l), (Pair<Long, Long>)Pair.with(9l, 1l), (Pair<Long, Long>)Pair.with(6l, 5l), (Pair<Long, Long>)Pair.with(2l, 1l))))) == (2l));\n    assert(countBidirectional((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(5l, 6l), (Pair<Long, Long>)Pair.with(1l, 2l), (Pair<Long, Long>)Pair.with(6l, 5l), (Pair<Long, Long>)Pair.with(9l, 2l), (Pair<Long, Long>)Pair.with(6l, 5l), (Pair<Long, Long>)Pair.with(2l, 1l))))) == (4l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a counter variable to keep track of the bidirectional pairs\n# Iterate through each pair in the input list\n    # Check if the reverse of the current pair exists in the list\n        # If it does, increment the counter\n# Return the value of the counter as the count of bidirectional pairs"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long countBidirectional(ArrayList<Pair<Long, Long>> test_list) {\n        long count = 0;\n        for (Pair<Long, Long> pair : test_list) {\n            if (test_list.contains(Pair.with(pair.getValue1(), pair.getValue0()))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/441",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the surface area of a cube of a given size.\n    public static long surfaceareaCube(long l) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(surfaceareaCube((5l)) == (150l));\n    assert(surfaceareaCube((3l)) == (54l));\n    assert(surfaceareaCube((10l)) == (600l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Calculate the surface area of a cube using the formula: 6 * (side length)^2\n# Return the calculated surface area as the result"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long surfaceareaCube(long l) {\n        return 6 * (l * l);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/100",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    public static long nextSmallestPalindrome(long num) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(nextSmallestPalindrome((99l)) == (101l));\n    assert(nextSmallestPalindrome((1221l)) == (1331l));\n    assert(nextSmallestPalindrome((120l)) == (121l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Increment the given number by 1 and assign it to a new variable\n# Create a loop that continues until a palindrome number is found\n    # Check if the new number is a palindrome by converting it to a string and comparing it with its reverse\n        # If it is a palindrome, return the new number\n    # If the number is not a palindrome, increment it by 1 and continue the loop"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long nextSmallestPalindrome(long num) {\n        long newNum = num + 1;\n        while (true) {\n            if (isPalindrome(newNum)) {\n                return newNum;\n            }\n            newNum++;\n        }\n    }\n\n    public static boolean isPalindrome(long num) {\n        String strNum = Long.toString(num);\n        String reversedStrNum = new StringBuilder(strNum).reverse().toString();\n        return strNum.equals(reversedStrNum);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/420",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the cube sum of first n even natural numbers.\n    public static long cubeSum(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(cubeSum((2l)) == (72l));\n    assert(cubeSum((3l)) == (288l));\n    assert(cubeSum((4l)) == (800l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `sum` to 0\n# Iterate from 2 to 2n (inclusive) with a step size of 2\n    # Compute the cube of the current number and add it to `sum`\n# Return the value of `sum`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long cubeSum(long n) {\n        long sum = 0;\n        for (long i = 2; i <= 2 * n; i += 2) {\n            sum += i * i * i;\n        }\n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/633",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the sum of xor of all pairs of numbers in the given array list.\n    public static long pairXorSum(ArrayList<Long> arr, long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(pairXorSum((new ArrayList<Long>(Arrays.asList((long)5l, (long)9l, (long)7l, (long)6l))), (4l)) == (47l));\n    assert(pairXorSum((new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)5l))), (3l)) == (12l));\n    assert(pairXorSum((new ArrayList<Long>(Arrays.asList((long)7l, (long)3l))), (2l)) == (4l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `sum` to 0\n# Iterate through each pair of numbers in the given array list\n    # Use the `xor` operator to calculate the xor of the pair of numbers\n    # Add the xor value to the `sum`\n# Return the `sum`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long pairXorSum(ArrayList<Long> arr, long n) {\n        long sum = 0;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n                sum += arr.get(i) ^ arr.get(j);\n            }\n        }\n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/751",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given array array list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array array list-represents-a-binary-heap/\n    public static boolean checkMinHeap(ArrayList<Long> arr) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(checkMinHeap((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(checkMinHeap((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l, (long)10l, (long)15l)))) == (true));\n    assert(checkMinHeap((new ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)5l, (long)3l, (long)15l)))) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Iterate through each index starting from 0 to n/2-1 (where n is the size of the array list)\n    # Check if the current element at index i is greater than its left child (2*i+1) or right child (2*i+2)\n        # If any of the above conditions are true, return false\n# If all elements satisfy the above conditions, return true"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean checkMinHeap(ArrayList<Long> arr) {\n        int n = arr.size();\n        for (int i = 0; i < n / 2 - 1; i++) {\n            if (arr.get(i) > arr.get(2 * i + 1) || arr.get(i) > arr.get(2 * i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/479",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the first digit of a given number.\n    public static long firstDigit(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(firstDigit((123l)) == (1l));\n    assert(firstDigit((456l)) == (4l));\n    assert(firstDigit((12l)) == (1l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Convert the given number to a string\n# Iterate through each character in the string\n    # Check if the current character is a digit\n        # If it is a digit, convert it back to a long and return it as the first digit\n# If no digit is found, return -1 as the first digit"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long firstDigit(long n) {\n        String numberString = Long.toString(n);\n        for (char c : numberString.toCharArray()) {\n            if (Character.isDigit(c)) {\n                return Long.parseLong(Character.toString(c));\n            }\n        }\n        return -1;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/395",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the first non-repeated character in a given string.\n    public static Optional<String> firstNonRepeatingCharacter(String str1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(firstNonRepeatingCharacter((\"abcabc\")).equals(Optional.empty()));\n    assert(firstNonRepeatingCharacter((\"abc\")).equals(Optional.of(\"a\")));\n    assert(firstNonRepeatingCharacter((\"ababc\")).equals(Optional.of(\"c\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a HashMap to store the count of each character in the input string\n# Iterate through each character in the input string\n    # If the character is already present in the HashMap, increment its count\n    # If the character is not present in the HashMap, add it with a count of 1\n# Iterate through each character in the input string again\n    # If the count of the current character in the HashMap is 1, return it as the first non-repeating character\n# If no non-repeating character is found, return an empty Optional"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Optional<String> firstNonRepeatingCharacter(String str1) {\n        HashMap<Character, Integer> charCount = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            charCount.put(c, charCount.getOrDefault(c, 0) + 1);\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (charCount.get(c) == 1) {\n                return Optional.of(Character.toString(c));\n            }\n        }\n        return Optional.empty();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/606",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert degrees to radians.\n    public static float radianDegree(long degree) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(radianDegree((90l)) == (1.5707963267948966f));\n    assert(radianDegree((60l)) == (1.0471975511965976f));\n    assert(radianDegree((120l)) == (2.0943951023931953f));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Calculate the value of the degree in radians by multiplying it with the conversion factor (pi/180)\n# Return the calculated value of the degree in radians"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static float radianDegree(long degree) {\n        return (float) (degree * Math.PI / 180);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/463",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the maximum product subarray array list of the given array array list.\n    public static long maxSubarrayProduct(ArrayList<Long> arr) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(maxSubarrayProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)0l, (long)7l, (long)-8l, (long)-2l)))) == (112l));\n    assert(maxSubarrayProduct((new ArrayList<Long>(Arrays.asList((long)6l, (long)-3l, (long)-10l, (long)0l, (long)2l)))) == (180l));\n    assert(maxSubarrayProduct((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-40l, (long)0l, (long)-2l, (long)-3l)))) == (80l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize variables to store the maximum product, current maximum product, and current minimum product\n# Iterate through each element in the array\n    # Update the current maximum product and current minimum product by multiplying them with the current element\n    # Check if the current element is negative\n        # If it is, swap the current maximum product and current minimum product\n    # Check if the current maximum product is greater than the maximum product\n        # If it is, update the maximum product\n# Return the maximum product"
        ],
        "code": [
            "import java.util.*;\n\nclass Problem {\n    public static long maxSubarrayProduct(ArrayList<Long> arr) {\n        if (arr == null || arr.size() == 0) {\n            return 0;\n        }\n\n        long maxProduct = arr.get(0);\n        long currMaxProduct = arr.get(0);\n        long currMinProduct = arr.get(0);\n\n        for (int i = 1; i < arr.size(); i++) {\n            long num = arr.get(i);\n\n            if (num < 0) {\n                long temp = currMaxProduct;\n                currMaxProduct = currMinProduct;\n                currMinProduct = temp;\n            }\n\n            currMaxProduct = Math.max(num, currMaxProduct * num);\n            currMinProduct = Math.min(num, currMinProduct * num);\n\n            maxProduct = Math.max(maxProduct, currMaxProduct);\n        }\n\n        return maxProduct;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/391",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert more than one array list to nested hash map.\n    public static ArrayList<HashMap<String,HashMap<String,Long>>> convertListDictionary(ArrayList<String> l1, ArrayList<String> l2, ArrayList<Long> l3) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(convertListDictionary((new ArrayList<String>(Arrays.asList((String)\"S001\", (String)\"S002\", (String)\"S003\", (String)\"S004\"))), (new ArrayList<String>(Arrays.asList((String)\"Adina Park\", (String)\"Leyton Marsh\", (String)\"Duncan Boyle\", (String)\"Saim Richards\"))), (new ArrayList<Long>(Arrays.asList((long)85l, (long)98l, (long)89l, (long)92l)))).equals((new ArrayList<HashMap<String,HashMap<String,Long>>>(Arrays.asList((HashMap<String,HashMap<String,Long>>)new HashMap<String,HashMap<String,Long>>(Map.of(\"S001\", new HashMap<String,Long>(Map.of(\"Adina Park\", 85l)))), (HashMap<String,HashMap<String,Long>>)new HashMap<String,HashMap<String,Long>>(Map.of(\"S002\", new HashMap<String,Long>(Map.of(\"Leyton Marsh\", 98l)))), (HashMap<String,HashMap<String,Long>>)new HashMap<String,HashMap<String,Long>>(Map.of(\"S003\", new HashMap<String,Long>(Map.of(\"Duncan Boyle\", 89l)))), (HashMap<String,HashMap<String,Long>>)new HashMap<String,HashMap<String,Long>>(Map.of(\"S004\", new HashMap<String,Long>(Map.of(\"Saim Richards\", 92l)))))))));\n    assert(convertListDictionary((new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"def\", (String)\"ghi\", (String)\"jkl\"))), (new ArrayList<String>(Arrays.asList((String)\"python\", (String)\"program\", (String)\"language\", (String)\"programs\"))), (new ArrayList<Long>(Arrays.asList((long)100l, (long)200l, (long)300l, (long)400l)))).equals((new ArrayList<HashMap<String,HashMap<String,Long>>>(Arrays.asList((HashMap<String,HashMap<String,Long>>)new HashMap<String,HashMap<String,Long>>(Map.of(\"abc\", new HashMap<String,Long>(Map.of(\"python\", 100l)))), (HashMap<String,HashMap<String,Long>>)new HashMap<String,HashMap<String,Long>>(Map.of(\"def\", new HashMap<String,Long>(Map.of(\"program\", 200l)))), (HashMap<String,HashMap<String,Long>>)new HashMap<String,HashMap<String,Long>>(Map.of(\"ghi\", new HashMap<String,Long>(Map.of(\"language\", 300l)))), (HashMap<String,HashMap<String,Long>>)new HashMap<String,HashMap<String,Long>>(Map.of(\"jkl\", new HashMap<String,Long>(Map.of(\"programs\", 400l)))))))));\n    assert(convertListDictionary((new ArrayList<String>(Arrays.asList((String)\"A1\", (String)\"A2\", (String)\"A3\", (String)\"A4\"))), (new ArrayList<String>(Arrays.asList((String)\"java\", (String)\"C\", (String)\"C++\", (String)\"DBMS\"))), (new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)30l, (long)40l)))).equals((new ArrayList<HashMap<String,HashMap<String,Long>>>(Arrays.asList((HashMap<String,HashMap<String,Long>>)new HashMap<String,HashMap<String,Long>>(Map.of(\"A1\", new HashMap<String,Long>(Map.of(\"java\", 10l)))), (HashMap<String,HashMap<String,Long>>)new HashMap<String,HashMap<String,Long>>(Map.of(\"A2\", new HashMap<String,Long>(Map.of(\"C\", 20l)))), (HashMap<String,HashMap<String,Long>>)new HashMap<String,HashMap<String,Long>>(Map.of(\"A3\", new HashMap<String,Long>(Map.of(\"C++\", 30l)))), (HashMap<String,HashMap<String,Long>>)new HashMap<String,HashMap<String,Long>>(Map.of(\"A4\", new HashMap<String,Long>(Map.of(\"DBMS\", 40l)))))))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new ArrayList to store the final result\n# Iterate over the elements in the input ArrayLists simultaneously\n    # Create a new HashMap for each iteration\n    # Put the elements from the input ArrayLists into the HashMap using the appropriate keys\n    # Put the HashMap into the final ArrayList\n# Return the final ArrayList"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<HashMap<String, HashMap<String, Long>>> convertListDictionary(ArrayList<String> l1, ArrayList<String> l2, ArrayList<Long> l3) {\n        ArrayList<HashMap<String, HashMap<String, Long>>> result = new ArrayList<>();\n        \n        int size = Math.min(Math.min(l1.size(), l2.size()), l3.size());\n        \n        for (int i = 0; i < size; i++) {\n            HashMap<String, HashMap<String, Long>> hashMap = new HashMap<>();\n            \n            HashMap<String, Long> innerHashMap = new HashMap<>();\n            innerHashMap.put(l2.get(i), l3.get(i));\n            \n            hashMap.put(l1.get(i), innerHashMap);\n            \n            result.add(hashMap);\n        }\n        \n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/62",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find smallest number in an array array list.\n    public static long smallestNum(ArrayList<Long> xs) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(smallestNum((new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)1l, (long)45l, (long)99l)))) == (1l));\n    assert(smallestNum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (1l));\n    assert(smallestNum((new ArrayList<Long>(Arrays.asList((long)45l, (long)46l, (long)50l, (long)60l)))) == (45l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `smallest` with the maximum value of a long number\n# Iterate through each number in the input array list\n    # Check if the current number is smaller than `smallest`\n        # If true, update `smallest` with the current number\n# Return the value of `smallest`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long smallestNum(ArrayList<Long> xs) {\n        long smallest = Long.MAX_VALUE;\n        for (long num : xs) {\n            if (num < smallest) {\n                smallest = num;\n            }\n        }\n        return smallest;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/756",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/javathon-exercises/re/javathon-re-exercise-3.php\n    public static boolean textMatchZeroOne(String text) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(textMatchZeroOne((\"ac\")) == (false));\n    assert(textMatchZeroOne((\"dc\")) == (false));\n    assert(textMatchZeroOne((\"abbbba\")) == (true));\n    assert(textMatchZeroOne((\"dsabbbba\")) == (true));\n    assert(textMatchZeroOne((\"asbbbba\")) == (false));\n    assert(textMatchZeroOne((\"abaaa\")) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Use a regular expression pattern to match the given string\n# The pattern should match an 'a' followed by one or more 'b's\n# Use the `matches` method of the `String` class to check if the given string matches the pattern\n# Return `true` if there is a match, `false` otherwise"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean textMatchZeroOne(String text) {\n        return text.matches(\"ab+\");\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/608",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find nth bell number.\n    public static long bellNumber(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(bellNumber((2l)) == (2l));\n    assert(bellNumber((3l)) == (5l));\n    assert(bellNumber((4l)) == (15l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a 2D array `bell` of size (n+1) x (n+1) and initialize all elements to 0\n# Set `bell[0][0]` to 1\n# Iterate from i = 1 to n\n    # Set `bell[i][0]` to `bell[i-1][i-1]`\n    # Iterate from j = 1 to i+1\n        # Set `bell[i][j]` to `bell[i-1][j-1] + bell[i][j-1]`\n# Return `bell[n][0]`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long bellNumber(long n) {\n        long[][] bell = new long[(int)n+1][(int)n+1];\n        bell[0][0] = 1;\n        \n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][(int)i-1];\n            \n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        \n        return bell[(int)n][0];\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/447",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find cubes of individual elements in an array array list.\n    public static ArrayList<Long> cubeNums(ArrayList<Long> nums) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(cubeNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)27l, (long)64l, (long)125l, (long)216l, (long)343l, (long)512l, (long)729l, (long)1000l)))));\n    assert(cubeNums((new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)30l)))).equals((new ArrayList<Long>(Arrays.asList((long)1000l, (long)8000l, (long)27000l)))));\n    assert(cubeNums((new ArrayList<Long>(Arrays.asList((long)12l, (long)15l)))).equals((new ArrayList<Long>(Arrays.asList((long)1728l, (long)3375l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create an empty ArrayList to store the cube of each number\n# Iterate through each number in the input ArrayList\n    # Compute the cube of the current number by multiplying it with itself twice\n    # Add the cube to the output ArrayList\n# Return the output ArrayList containing the cubes of all numbers in the input ArrayList"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> cubeNums(ArrayList<Long> nums) {\n        ArrayList<Long> cubes = new ArrayList<>();\n        for (Long num : nums) {\n            long cube = num * num * num;\n            cubes.add(cube);\n        }\n        return cubes;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/577",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the last digit in factorial of a given number.\n    public static long lastDigitFactorial(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(lastDigitFactorial((4l)) == (4l));\n    assert(lastDigitFactorial((21l)) == (0l));\n    assert(lastDigitFactorial((30l)) == (0l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input number is less than 0\n    # If it is, throw an IllegalArgumentException\n# Initialize a variable `factorial` to 1\n# Iterate from 1 to n\n    # Multiply `factorial` by the current iteration number\n# Convert `factorial` to a string and get the last character\n# Convert the last character to a long and return it"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long lastDigitFactorial(long n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Input number should be greater than or equal to 0\");\n        }\n        \n        long factorial = 1;\n        \n        for (long i = 1; i <= n; i++) {\n            factorial *= i;\n        }\n        \n        String factorialString = Long.toString(factorial);\n        char lastChar = factorialString.charAt(factorialString.length() - 1);\n        return Long.parseLong(Character.toString(lastChar));\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/629",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find even numbers from an array array list of numbers.\n    public static ArrayList<Long> Split(ArrayList<Long> list) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(Split((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l)))));\n    assert(Split((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)0l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)6l, (long)8l, (long)0l)))));\n    assert(Split((new ArrayList<Long>(Arrays.asList((long)8l, (long)12l, (long)15l, (long)19l)))).equals((new ArrayList<Long>(Arrays.asList((long)8l, (long)12l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create an empty ArrayList to store the even numbers\n# Iterate through each number in the input list\n    # Check if the number is even (i.e., divisible by 2 with remainder 0)\n        # If the number is even, add it to the result ArrayList\n# Return the result ArrayList containing the even numbers"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> Split(ArrayList<Long> list) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (Long number : list) {\n            if (number % 2 == 0) {\n                result.add(number);\n            }\n        }\n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/605",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given integer is a prime number.\n    public static boolean primeNum(long num) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(primeNum((13l)) == (true));\n    assert(primeNum((7l)) == (true));\n    assert(primeNum((-1010l)) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input number is less than 2\n    # If the number is less than 2, return false since prime numbers are greater than 1\n# Iterate from 2 to the square root of the input number\n    # Check if the input number is divisible by any number in the iteration\n        # If the input number is divisible by any number, return false since it is not a prime number\n# If the input number is not divisible by any number in the iteration, return true since it is a prime number"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean primeNum(long num) {\n        if (num < 2) {\n            return false;\n        }\n        for (long i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/75",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find pairs which have all elements divisible by k from the given array list of pairs.\n    public static ArrayList<Pair<Long, Long, Long>> findTuples(ArrayList<Pair<Long, Long, Long>> test_list, long K) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(findTuples((new ArrayList<Pair<Long, Long, Long>>(Arrays.asList((Pair<Long, Long, Long>)Pair.with(6l, 24l, 12l), (Pair<Long, Long, Long>)Pair.with(7l, 9l, 6l), (Pair<Long, Long, Long>)Pair.with(12l, 18l, 21l)))), (6l)).equals((new ArrayList<Pair<Long, Long, Long>>(Arrays.asList((Pair<Long, Long, Long>)Pair.with(6l, 24l, 12l))))));\n    assert(findTuples((new ArrayList<Pair<Long, Long, Long>>(Arrays.asList((Pair<Long, Long, Long>)Pair.with(5l, 25l, 30l), (Pair<Long, Long, Long>)Pair.with(4l, 2l, 3l), (Pair<Long, Long, Long>)Pair.with(7l, 8l, 9l)))), (5l)).equals((new ArrayList<Pair<Long, Long, Long>>(Arrays.asList((Pair<Long, Long, Long>)Pair.with(5l, 25l, 30l))))));\n    assert(findTuples((new ArrayList<Pair<Long, Long, Long>>(Arrays.asList((Pair<Long, Long, Long>)Pair.with(7l, 9l, 16l), (Pair<Long, Long, Long>)Pair.with(8l, 16l, 4l), (Pair<Long, Long, Long>)Pair.with(19l, 17l, 18l)))), (4l)).equals((new ArrayList<Pair<Long, Long, Long>>(Arrays.asList((Pair<Long, Long, Long>)Pair.with(8l, 16l, 4l))))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create an empty ArrayList to store the resulting pairs\n# Iterate through each pair in the input ArrayList\n    # Check if all elements in the current pair are divisible by K\n        # If true, add the pair to the resulting ArrayList\n# Return the resulting ArrayList of pairs"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Pair<Long, Long, Long>> findTuples(ArrayList<Pair<Long, Long, Long>> test_list, long K) {\n        ArrayList<Pair<Long, Long, Long>> result = new ArrayList<>();\n\n        for (Pair<Long, Long, Long> pair : test_list) {\n            if (pair.getValue0() % K == 0 && pair.getValue1() % K == 0 && pair.getValue2() % K == 0) {\n                result.add(pair);\n            }\n        }\n\n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/742",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to caluclate the area of a tetrahedron.\n    public static float areaTetrahedron(long side) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(areaTetrahedron((3l)) == (15.588457268119894f));\n    assert(areaTetrahedron((20l)) == (692.8203230275509f));\n    assert(areaTetrahedron((10l)) == (173.20508075688772f));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Calculate the area of a tetrahedron using the formula:\n    # Area = \u221a3 * (side)^2 / 4\n# Return the calculated area"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static float areaTetrahedron(long side) {\n        float area = (float) (Math.sqrt(3) * Math.pow(side, 2)) / 4;\n        return area;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/600",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to check whether the given number is even or not.\n    public static boolean isEven(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(isEven((1l)) == (false));\n    assert(isEven((2l)) == (true));\n    assert(isEven((3l)) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the given number is divisible by 2 without a remainder\n# If it is divisible, return true (since it is even)\n# If it is not divisible, return false (since it is odd)"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean isEven(long n) {\n        return n % 2 == 0;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/66",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of positive numbers in an array array list.\n    public static long posCount(ArrayList<Long> list) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(posCount((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)3l, (long)-4l)))) == (2l));\n    assert(posCount((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)-1l)))) == (3l));\n    assert(posCount((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) == (4l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a counter variable to keep track of the number of positive numbers\n# Iterate through each element in the input array list\n    # Check if the current element is greater than 0\n        # If it is, increment the counter variable\n# Return the counter variable as the result"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long posCount(ArrayList<Long> list) {\n        long count = 0;\n        for (long num : list) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/603",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to get all lucid numbers smaller than or equal to a given integer.\n    public static ArrayList<Long> getLudic(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(getLudic((10l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)7l)))));\n    assert(getLudic((25l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)23l, (long)25l)))));\n    assert(getLudic((45l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)23l, (long)25l, (long)29l, (long)37l, (long)41l, (long)43l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create an ArrayList to store the lucid numbers\n# Create a boolean array to keep track of whether a number is a lucid number or not\n# Set the first two elements of the boolean array as false, as 0 and 1 are not lucid numbers\n# Iterate from 2 to n and set all elements in the boolean array as true initially\n# Iterate from 2 to n and for each index i\n    # Check if the current number is a lucid number (i.e., the value at index i in the boolean array is true)\n        # If it is a lucid number, add it to the ArrayList\n        # Iterate from i to n with a step size of i and set the value at each index to false in the boolean array\n# Return the ArrayList containing the lucid numbers"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> getLudic(long n) {\n        ArrayList<Long> ludicNumbers = new ArrayList<>();\n        boolean[] isLucid = new boolean[(int) (n + 1)];\n        isLucid[0] = false;\n        isLucid[1] = false;\n\n        for (int i = 2; i <= n; i++) {\n            isLucid[i] = true;\n        }\n\n        for (int i = 2; i <= n; i++) {\n            if (isLucid[i]) {\n                ludicNumbers.add((long) i);\n                for (int j = i; j <= n; j += i) {\n                    isLucid[j] = false;\n                }\n            }\n        }\n\n        return ludicNumbers;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/739",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    public static long findIndex(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(findIndex((2l)) == (4l));\n    assert(findIndex((3l)) == (14l));\n    assert(findIndex((4l)) == (45l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Set a counter variable to keep track of the index of the triangular numbers\n# Iterate while the number of digits in the current triangular number is less than or equal to n\n    # Calculate the current triangular number using the formula n * (n + 1) / 2\n    # Check the number of digits in the current triangular number\n    # If the number of digits is equal to n, return the index\n    # Increment the counter variable by 1\n# If no triangular number with n digits is found, return -1"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long findIndex(long n) {\n        long index = 1;\n        while (true) {\n            long triangularNumber = index * (index + 1) / 2;\n            int digits = countDigits(triangularNumber);\n            if (digits == n) {\n                return index;\n            }\n            if (digits > n) {\n                return -1;\n            }\n            index++;\n        }\n    }\n    \n    public static int countDigits(long num) {\n        return (int) Math.floor(Math.log10(num) + 1);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/644",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse an array array list upto a given position.\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));\n    assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new ArrayList called `reversedList` to store the reversed elements\n# Iterate through the elements in the input ArrayList from index 0 to k-1\n    # Add each element to the `reversedList` at the beginning\n# Iterate through the remaining elements in the input ArrayList from index k to the end\n    # Add each element to the `reversedList` at the end\n# Return the `reversedList`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> reversedList = new ArrayList<>();\n        \n        // Iterate through the elements from index 0 to k-1\n        for (int i = 0; i < k; i++) {\n            reversedList.add(0, input.get(i)); // Add each element at the beginning of the reversedList\n        }\n        \n        // Iterate through the remaining elements from index k to end\n        for (int i = (int)k; i < input.size(); i++) {\n            reversedList.add(input.get(i)); // Add each element at the end of the reversedList\n        }\n        \n        return reversedList;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/64",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to sort an array array list of pairs using the second value of each pair.\n    public static ArrayList<Pair<String, Long>> subjectMarks(ArrayList<Pair<String, Long>> subjectmarks) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(subjectMarks((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"English\", 88l), (Pair<String, Long>)Pair.with(\"Science\", 90l), (Pair<String, Long>)Pair.with(\"Maths\", 97l), (Pair<String, Long>)Pair.with(\"Social sciences\", 82l))))).equals((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Social sciences\", 82l), (Pair<String, Long>)Pair.with(\"English\", 88l), (Pair<String, Long>)Pair.with(\"Science\", 90l), (Pair<String, Long>)Pair.with(\"Maths\", 97l))))));\n    assert(subjectMarks((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Telugu\", 49l), (Pair<String, Long>)Pair.with(\"Hindhi\", 54l), (Pair<String, Long>)Pair.with(\"Social\", 33l))))).equals((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Social\", 33l), (Pair<String, Long>)Pair.with(\"Telugu\", 49l), (Pair<String, Long>)Pair.with(\"Hindhi\", 54l))))));\n    assert(subjectMarks((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Physics\", 96l), (Pair<String, Long>)Pair.with(\"Chemistry\", 97l), (Pair<String, Long>)Pair.with(\"Biology\", 45l))))).equals((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Biology\", 45l), (Pair<String, Long>)Pair.with(\"Physics\", 96l), (Pair<String, Long>)Pair.with(\"Chemistry\", 97l))))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Sort the input ArrayList using a custom Comparator that compares the second value of each pair\n# Return the sorted ArrayList"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Pair<String, Long>> subjectMarks(ArrayList<Pair<String, Long>> subjectmarks) {\n        Collections.sort(subjectmarks, new Comparator<Pair<String, Long>>() {\n            public int compare(Pair<String, Long> pair1, Pair<String, Long> pair2) {\n                return pair1.getValue1().compareTo(pair2.getValue1());\n            }\n        });\n        return subjectmarks;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/18",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to remove characters from the first string which are present in the second string.\n    public static String removeDirtyChars(String string, String second_string) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(removeDirtyChars((\"probasscurve\"), (\"pros\")).equals((\"bacuve\")));\n    assert(removeDirtyChars((\"digitalindia\"), (\"talent\")).equals((\"digiidi\")));\n    assert(removeDirtyChars((\"exoticmiles\"), (\"toxic\")).equals((\"emles\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new StringBuilder object to store the result\n# Iterate through each character in the first string\n    # Check if the character is present in the second string\n        # If the character is not present, append it to the result StringBuilder\n# Convert the result StringBuilder to a string and return it"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String removeDirtyChars(String string, String second_string) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (!second_string.contains(String.valueOf(c))) {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/130",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the item with maximum frequency in a given array list.\n    public static long maxOccurrences(ArrayList<Long> nums) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(maxOccurrences((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)8l, (long)4l, (long)7l, (long)9l, (long)8l, (long)2l, (long)6l, (long)5l, (long)1l, (long)6l, (long)1l, (long)2l, (long)3l, (long)2l, (long)4l, (long)6l, (long)9l, (long)1l, (long)2l)))) == (2l));\n    assert(maxOccurrences((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)8l, (long)4l, (long)7l, (long)9l, (long)8l, (long)7l, (long)9l, (long)15l, (long)14l, (long)10l, (long)12l, (long)13l, (long)16l, (long)18l)))) == (8l));\n    assert(maxOccurrences((new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)20l, (long)30l, (long)40l, (long)90l, (long)80l, (long)50l, (long)30l, (long)20l, (long)50l, (long)10l)))) == (20l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a HashMap to store the frequency of each number in the input ArrayList\n# Iterate through each number in the input ArrayList\n    # Check if the number is already present in the HashMap\n        # If yes, increment its frequency by 1\n        # If no, add it to the HashMap with a frequency of 1\n# Find the number with the maximum frequency in the HashMap\n# Return the number with the maximum frequency"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long maxOccurrences(ArrayList<Long> nums) {\n        HashMap<Long, Integer> frequencyMap = new HashMap<>();\n\n        for (Long num : nums) {\n            if (frequencyMap.containsKey(num)) {\n                frequencyMap.put(num, frequencyMap.get(num) + 1);\n            } else {\n                frequencyMap.put(num, 1);\n            }\n        }\n\n        long maxNum = 0;\n        int maxFreq = 0;\n\n        for (Map.Entry<Long, Integer> entry : frequencyMap.entrySet()) {\n            long num = entry.getKey();\n            int freq = entry.getValue();\n\n            if (freq > maxFreq) {\n                maxNum = num;\n                maxFreq = freq;\n            }\n        }\n\n        return maxNum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/759",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    public static boolean isDecimal(String num) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Use a regular expression pattern to check if the given string matches the format of a decimal number with precision of 2.\n# The regular expression pattern should match:\n    # An optional minus sign\n    # One or more digits before the decimal point\n    # An optional decimal point\n    # Exactly two digits after the decimal point\n# Return true if the string matches the pattern, otherwise return false."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean isDecimal(String num) {\n        String pattern = \"-?\\\\d+(\\\\.\\\\d{2})?\";\n        return num.matches(pattern);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/277",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a hash map and integer n and filters the hash map to only include entries with values greater than or equal to n.\n    public static HashMap<String,Long> dictFilter(HashMap<String,Long> dict, long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(dictFilter((new HashMap<String,Long>(Map.of(\"Cierra Vega\", 175l, \"Alden Cantrell\", 180l, \"Kierra Gentry\", 165l, \"Pierre Cox\", 190l))), (170l)).equals((new HashMap<String,Long>(Map.of(\"Cierra Vega\", 175l, \"Alden Cantrell\", 180l, \"Pierre Cox\", 190l)))));\n    assert(dictFilter((new HashMap<String,Long>(Map.of(\"Cierra Vega\", 175l, \"Alden Cantrell\", 180l, \"Kierra Gentry\", 165l, \"Pierre Cox\", 190l))), (180l)).equals((new HashMap<String,Long>(Map.of(\"Alden Cantrell\", 180l, \"Pierre Cox\", 190l)))));\n    assert(dictFilter((new HashMap<String,Long>(Map.of(\"Cierra Vega\", 175l, \"Alden Cantrell\", 180l, \"Kierra Gentry\", 165l, \"Pierre Cox\", 190l))), (190l)).equals((new HashMap<String,Long>(Map.of(\"Pierre Cox\", 190l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new HashMap to store the filtered entries\n# Iterate through each entry in the input HashMap\n    # Check if the value of the current entry is greater than or equal to n\n        # If it is, add the entry to the filtered HashMap\n# Return the filtered HashMap"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static HashMap<String,Long> dictFilter(HashMap<String,Long> dict, long n) {\n        HashMap<String,Long> filteredDict = new HashMap<>();\n        for (Map.Entry<String,Long> entry : dict.entrySet()) {\n            if (entry.getValue() >= n) {\n                filteredDict.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return filteredDict;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/270",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the sum of even numbers at even positions of an array array list.\n    public static long sumEvenAndEvenIndex(ArrayList<Long> arr) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(sumEvenAndEvenIndex((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)12l, (long)1l, (long)18l, (long)8l)))) == (30l));\n    assert(sumEvenAndEvenIndex((new ArrayList<Long>(Arrays.asList((long)3l, (long)20l, (long)17l, (long)9l, (long)2l, (long)10l, (long)18l, (long)13l, (long)6l, (long)18l)))) == (26l));\n    assert(sumEvenAndEvenIndex((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)12l, (long)1l)))) == (12l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `sum` to store the sum of even numbers at even positions\n# Iterate through each element and its index in the input array list\n    # Check if the current index is even and the current element is even\n        # If both conditions are true, add the current element to the sum\n# Return the sum"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long sumEvenAndEvenIndex(ArrayList<Long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (i % 2 == 0 && arr.get(i) % 2 == 0) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/559",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the sum of the largest contiguous subarray list in the given array list.\n    public static long maxSubArraySum(ArrayList<Long> a, long size) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(maxSubArraySum((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l, (long)4l, (long)-1l, (long)-2l, (long)1l, (long)5l, (long)-3l))), (8l)) == (7l));\n    assert(maxSubArraySum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l, (long)-2l, (long)-3l, (long)2l, (long)6l, (long)-4l))), (8l)) == (8l));\n    assert(maxSubArraySum((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-5l, (long)6l, (long)-3l, (long)-4l, (long)3l, (long)7l, (long)-5l))), (8l)) == (10l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize variables `maxSum` and `currentSum` as the first element of the array list\n# Iterate through the array list starting from the second element\n    # Calculate the current sum by taking the maximum of the current element and the current element plus the current sum\n    # Update the maximum sum if the current sum is greater than the maximum sum\n# Return the maximum sum"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long maxSubArraySum(ArrayList<Long> a, long size) {\n        long maxSum = a.get(0);\n        long currentSum = a.get(0);\n        \n        for (int i = 1; i < size; i++) {\n            currentSum = Math.max(a.get(i), currentSum + a.get(i));\n            maxSum = Math.max(maxSum, currentSum);\n        }\n        \n        return maxSum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/249",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the intersection of two array array lists.\n    public static ArrayList<Long> intersectionArray(ArrayList<Long> array_nums1, ArrayList<Long> array_nums2) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(intersectionArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)7l, (long)8l, (long)9l, (long)10l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)8l, (long)9l)))));\n    assert(intersectionArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)7l, (long)8l, (long)9l, (long)10l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l, (long)9l)))));\n    assert(intersectionArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)7l, (long)8l, (long)9l, (long)10l))), (new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)30l, (long)40l)))).equals((new ArrayList<Long>(Arrays.asList((long)10l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new ArrayList to store the intersection of the two input ArrayLists\n# Iterate through each element in the first ArrayList\n    # Check if the current element is present in the second ArrayList\n        # If it is, add it to the intersection ArrayList\n# Return the intersection ArrayList"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> intersectionArray(ArrayList<Long> array_nums1, ArrayList<Long> array_nums2) {\n        ArrayList<Long> intersection = new ArrayList<Long>();\n        \n        for (Long num : array_nums1) {\n            if (array_nums2.contains(num)) {\n                intersection.add(num);\n            }\n        }\n        \n        return intersection;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/262",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list and an integer L and splits the given array list into two parts where the length of the first part of the array list is L, and returns the resulting array lists in a pair.\n    public static Object splitTwoParts(ArrayList<Object> list1, long L) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(splitTwoParts((new ArrayList<Object>(Arrays.asList((long)1l, (long)1l, (long)2l, (long)3l, (long)4l, (long)4l, (long)5l, (long)1l))), (3l)).equals(Pair.with(new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l)), new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)4l, (long)5l, (long)1l)))));\n    assert(splitTwoParts((new ArrayList<Object>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\", (String)\"d\"))), (2l)).equals(Pair.with(new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\")), new ArrayList<String>(Arrays.asList((String)\"c\", (String)\"d\")))));\n    assert(splitTwoParts((new ArrayList<Object>(Arrays.asList((String)\"p\", (String)\"y\", (String)\"t\", (String)\"h\", (String)\"o\", (String)\"n\"))), (4l)).equals(Pair.with(new ArrayList<String>(Arrays.asList((String)\"p\", (String)\"y\", (String)\"t\", (String)\"h\")), new ArrayList<String>(Arrays.asList((String)\"o\", (String)\"n\")))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create two new ArrayLists to store the two parts of the original ArrayList\n# Iterate over the original ArrayList and add elements to the first new ArrayList until the size reaches L\n# Continue iterating and add elements to the second new ArrayList\n# Return a Pair object containing the two new ArrayLists"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Pair<ArrayList<Object>, ArrayList<Object>> splitTwoParts(ArrayList<Object> list1, long L) {\n        ArrayList<Object> part1 = new ArrayList<>();\n        ArrayList<Object> part2 = new ArrayList<>();\n\n        for (int i = 0; i < list1.size(); i++) {\n            if (i < L) {\n                part1.add(list1.get(i));\n            } else {\n                part2.add(list1.get(i));\n            }\n        }\n\n        return new Pair<>(part1, part2);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/607",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    public static Pair<String, Long, Long> findLiterals(String text, String pattern) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((Pair.with(\"fox\", 16l, 19l))));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((Pair.with(\"crazy\", 16l, 21l))));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((Pair.with(\"will\", 35l, 39l))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Use the `Pattern` class from the `java.util.regex` package to compile the given regex pattern\n# Use the `Matcher` class from the `java.util.regex` package to find matches in the input text using the compiled pattern\n# If a match is found, return a tuple containing the matching substring, the start index of the match, and the end index of the match\n# If no match is found, return a tuple containing null values for the matching substring, start index, and end index"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.regex.*;\n\nclass Problem {\n    public static Pair<String, Long, Long> findLiterals(String text, String pattern) {\n        Pattern compiledPattern = Pattern.compile(pattern);\n        Matcher matcher = compiledPattern.matcher(text);\n        \n        if (matcher.find()) {\n            String match = matcher.group();\n            long startIndex = matcher.start();\n            long endIndex = matcher.end();\n            return new Pair<>(match, startIndex, endIndex);\n        } else {\n            return new Pair<>(null, null, null);\n        }\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/14",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the volume of a triangular prism.\n    public static long findVolume(long l, long b, long h) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(findVolume((10l), (8l), (6l)) == (240l));\n    assert(findVolume((3l), (2l), (2l)) == (6l));\n    assert(findVolume((1l), (2l), (1l)) == (1l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Calculate the area of the base of the triangular prism by multiplying the length and breadth\n# Calculate the volume of the triangular prism by multiplying the area of the base with the height\n# Return the calculated volume"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long findVolume(long l, long b, long h) {\n        long baseArea = l * b;\n        long volume = baseArea * h;\n        return volume;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/638",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    public static long windChill(long v, long t) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(windChill((120l), (35l)) == (40l));\n    assert(windChill((40l), (20l)) == (19l));\n    assert(windChill((10l), (8l)) == (6l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Calculate the wind chill index using the formula:\n    # windChillIndex = 13.12 + 0.6215 * t - 11.37 * Math.pow(v, 0.16) + 0.3965 * t * Math.pow(v, 0.16)\n# Round the wind chill index to the next integer using the `Math.ceil` method\n# Return the rounded wind chill index"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long windChill(long v, long t) {\n        double windChillIndex = 13.12 + 0.6215 * t - 11.37 * Math.pow(v, 0.16) + 0.3965 * t * Math.pow(v, 0.16);\n        long roundedWindChillIndex = (long) Math.ceil(windChillIndex);\n        return roundedWindChillIndex;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/269",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the ascii value of a character.\n    public static long asciiValue(String k) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(asciiValue((\"A\")) == (65l));\n    assert(asciiValue((\"R\")) == (82l));\n    assert(asciiValue((\"S\")) == (83l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input string is empty or null\n# Get the character at the first position of the string\n# Convert the character to its ASCII value using the `charAt` and `codePointAt` methods\n# Return the ASCII value as a long integer"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long asciiValue(String k) {\n        if (k == null || k.isEmpty()) {\n            throw new IllegalArgumentException(\"Input string is empty or null\");\n        }\n        char c = k.charAt(0);\n        return (long) c;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/741",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to check whether all the characters are same or not.\n    public static boolean allCharactersSame(String s) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(allCharactersSame((\"python\")) == (false));\n    assert(allCharactersSame((\"aaa\")) == (true));\n    assert(allCharactersSame((\"data\")) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input string is null or empty\n# Iterate through each character in the string starting from the second character\n    # If the current character is not equal to the first character, return false\n# If all characters are the same, return true"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean allCharactersSame(String s) {\n        if (s == null || s.isEmpty()) {\n            return false;\n        }\n        char firstChar = s.charAt(0);\n        for (int i = 1; i < s.length(); i++) {\n            if (s.charAt(i) != firstChar) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/619",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to move all the numbers to the end of the given string.\n    public static String moveNum(String test_str) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(moveNum((\"I1love143you55three3000thousand\")).equals((\"Iloveyouthreethousand1143553000\")));\n    assert(moveNum((\"Avengers124Assemble\")).equals((\"AvengersAssemble124\")));\n    assert(moveNum((\"Its11our12path13to14see15things16do17things\")).equals((\"Itsourpathtoseethingsdothings11121314151617\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create two StringBuilder objects: one for storing the non-numeric characters and one for storing the numeric characters.\n# Iterate through each character in the input string\n    # If the character is a digit, append it to the numeric StringBuilder\n    # Otherwise, append it to the non-numeric StringBuilder\n# Append the numeric StringBuilder to the non-numeric StringBuilder\n# Convert the StringBuilder back to a string and return it"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String moveNum(String test_str) {\n        StringBuilder nonNumeric = new StringBuilder();\n        StringBuilder numeric = new StringBuilder();\n\n        for (int i = 0; i < test_str.length(); i++) {\n            char c = test_str.charAt(i);\n            if (Character.isDigit(c)) {\n                numeric.append(c);\n            } else {\n                nonNumeric.append(c);\n            }\n        }\n\n        nonNumeric.append(numeric);\n\n        return nonNumeric.toString();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/79",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to check whether the length of the word is odd or not.\n    public static boolean wordLen(String s) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(wordLen((\"Hadoop\")) == (false));\n    assert(wordLen((\"great\")) == (true));\n    assert(wordLen((\"structure\")) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input string is null or empty\n# Get the length of the input string\n# Check if the length is odd by using the modulo operator (%)\n# Return true if the length is odd, otherwise return false"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean wordLen(String s) {\n        if (s == null || s.isEmpty()) {\n            return false;\n        }\n        return s.length() % 2 != 0;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/465",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to drop empty items from a given hash map.\n    public static HashMap<String,String> dropEmpty(HashMap<String,Optional<String>> dict1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(dropEmpty(new HashMap<String,String>(Map.of(\"c1\", \"Red\", \"c2\", \"Green\", \"c3\", Optional.empty()))).equals((new HashMap<String,String>(Map.of(\"c1\", \"Red\", \"c2\", \"Green\")))));\n    assert(dropEmpty(new HashMap<String,String>(Map.of(\"c1\", \"Red\", \"c2\", Optional.empty(), \"c3\", Optional.empty()))).equals((new HashMap<String,String>(Map.of(\"c1\", \"Red\")))));\n    assert(dropEmpty(new HashMap<String,Optional.empty()>(Map.of(\"c1\", Optional.empty(), \"c2\", \"Green\", \"c3\", Optional.empty()))).equals((new HashMap<String,String>(Map.of(\"c2\", \"Green\")))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new HashMap to store the non-empty items\n# Iterate over each entry in the input HashMap\n    # Check if the value of the current entry is not empty (i.e., present)\n        # If the value is not empty, add the entry to the new HashMap\n# Return the new HashMap with non-empty items"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static HashMap<String,String> dropEmpty(HashMap<String,Optional<String>> dict1) {\n        HashMap<String,String> result = new HashMap<>();\n        for (Map.Entry<String,Optional<String>> entry : dict1.entrySet()) {\n            if (entry.getValue().isPresent()) {\n                result.put(entry.getKey(), entry.getValue().get());\n            }\n        }\n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/251",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list and an element and inserts the element before each element in the array list, and returns the resulting array list.\n    public static ArrayList<String> insertElement(ArrayList<String> list, String element) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(insertElement((new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Green\", (String)\"Black\"))), (\"c\")).equals((new ArrayList<String>(Arrays.asList((String)\"c\", (String)\"Red\", (String)\"c\", (String)\"Green\", (String)\"c\", (String)\"Black\")))));\n    assert(insertElement((new ArrayList<String>(Arrays.asList((String)\"python\", (String)\"java\"))), (\"program\")).equals((new ArrayList<String>(Arrays.asList((String)\"program\", (String)\"python\", (String)\"program\", (String)\"java\")))));\n    assert(insertElement((new ArrayList<String>(Arrays.asList((String)\"happy\", (String)\"sad\"))), (\"laugh\")).equals((new ArrayList<String>(Arrays.asList((String)\"laugh\", (String)\"happy\", (String)\"laugh\", (String)\"sad\")))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new ArrayList to store the modified elements\n# Iterate through each element in the input ArrayList\n    # Add the given element to the new ArrayList\n    # Add the current element from the input ArrayList to the new ArrayList\n# Return the new ArrayList"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<String> insertElement(ArrayList<String> list, String element) {\n        ArrayList<String> resultList = new ArrayList<>();\n        for (String str : list) {\n            resultList.add(element);\n            resultList.add(str);\n        }\n        return resultList;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/478",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to remove lowercase substrings from a given string.\n    public static String removeLowercase(String str1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(removeLowercase((\"PYTHon\")).equals((\"PYTH\")));\n    assert(removeLowercase((\"FInD\")).equals((\"FID\")));\n    assert(removeLowercase((\"STRinG\")).equals((\"STRG\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize an empty string to store the result\n# Iterate through each character in the input string\n    # Check if the current character is lowercase\n        # If not, append it to the result string\n# Return the result string"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String removeLowercase(String str1) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < str1.length(); i++) {\n            if (!Character.isLowerCase(str1.charAt(i))) {\n                result.append(str1.charAt(i));\n            }\n        }\n        return result.toString();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/224",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of set bits (binary digits with value 1) in a given number.\n    public static long countSetBits(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a count variable to 0 to keep track of the number of set bits\n# Iterate through each bit of the given number from right to left\n    # Check if the current bit is set (i.e., equal to 1)\n        # If the bit is set, increment the count variable by 1\n# Return the final count of set bits"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long countSetBits(long n) {\n        long count = 0;\n        while (n != 0) {\n            count += n & 1;\n            n >>= 1;\n        }\n        return count;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/424",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to extract only the rear index element of each string in the given pair.\n    public static ArrayList<String> extractRear(Pair<String, String, String> test_tuple) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(extractRear((Pair.with(\"Mers\", \"for\", \"Vers\"))).equals((new ArrayList<String>(Arrays.asList((String)\"s\", (String)\"r\", (String)\"s\")))));\n    assert(extractRear((Pair.with(\"Avenge\", \"for\", \"People\"))).equals((new ArrayList<String>(Arrays.asList((String)\"e\", (String)\"r\", (String)\"e\")))));\n    assert(extractRear((Pair.with(\"Gotta\", \"get\", \"go\"))).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"t\", (String)\"o\")))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create an empty ArrayList to store the rear index elements\n# Iterate through each element in the input tuple\n    # Get the last element of the current string using the `getValue2` method\n    # Add the last element to the ArrayList\n# Return the ArrayList with the rear index elements"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<String> extractRear(Pair<String, String, String> test_tuple) {\n        ArrayList<String> rearElements = new ArrayList<>();\n        rearElements.add(test_tuple.getValue2());\n        rearElements.add(test_tuple.getValue5());\n        rearElements.add(test_tuple.getValue8());\n        return rearElements;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/172",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to count the number of occurence of the string 'std' in a given string.\n    public static long countOccurance(String s) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(countOccurance((\"letstdlenstdporstd\")) == (3l));\n    assert(countOccurance((\"truststdsolensporsd\")) == (1l));\n    assert(countOccurance((\"makestdsostdworthit\")) == (2l));\n    assert(countOccurance((\"stds\")) == (1l));\n    assert(countOccurance((\"\")) == (0l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `count` to 0 to keep track of the number of occurrences\n# Iterate through the input string `s` using a loop\n    # Check if the current index is within the bounds of the string to avoid index out of bounds exception\n        # Check if the current character and the next two characters form the string 'std'\n            # If yes, increment the `count` variable by 1\n# Return the value of `count`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long countOccurance(String s) {\n        long count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i + 2 < s.length() && s.substring(i, i + 3).equals(\"std\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/808",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given pairs contain the k or not.\n    public static boolean checkK(ArrayList<Long> test_tup, long K) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(checkK((new ArrayList<Long>(Arrays.asList((long)10l, (long)4l, (long)5l, (long)6l, (long)8l))), (6l)) == (true));\n    assert(checkK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (7l)) == (false));\n    assert(checkK((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)44l, (long)11l, (long)12l))), (11l)) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Iterate through each element in the given ArrayList\n    # Check if the difference between the current element and K is present in the ArrayList\n        # If the difference is found, return true\n# If no pair with the given difference is found, return false"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean checkK(ArrayList<Long> test_tup, long K) {\n        Set<Long> set = new HashSet<>();\n        for (long num : test_tup) {\n            long diff = K - num;\n            if (set.contains(diff)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/578",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to interleave 3 array lists of the same length into a single flat array list.\n    public static ArrayList<Long> interleaveLists(ArrayList<Long> list1, ArrayList<Long> list2, ArrayList<Long> list3) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(interleaveLists((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)30l, (long)40l, (long)50l, (long)60l, (long)70l))), (new ArrayList<Long>(Arrays.asList((long)100l, (long)200l, (long)300l, (long)400l, (long)500l, (long)600l, (long)700l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)100l, (long)2l, (long)20l, (long)200l, (long)3l, (long)30l, (long)300l, (long)4l, (long)40l, (long)400l, (long)5l, (long)50l, (long)500l, (long)6l, (long)60l, (long)600l, (long)7l, (long)70l, (long)700l)))));\n    assert(interleaveLists((new ArrayList<Long>(Arrays.asList((long)10l, (long)20l))), (new ArrayList<Long>(Arrays.asList((long)15l, (long)2l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)10l)))).equals((new ArrayList<Long>(Arrays.asList((long)10l, (long)15l, (long)5l, (long)20l, (long)2l, (long)10l)))));\n    assert(interleaveLists((new ArrayList<Long>(Arrays.asList((long)11l, (long)44l))), (new ArrayList<Long>(Arrays.asList((long)10l, (long)15l))), (new ArrayList<Long>(Arrays.asList((long)20l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)10l, (long)20l, (long)44l, (long)15l, (long)5l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new ArrayList to store the interleaved elements\n# Iterate over the indices of the input lists (assuming they all have the same length)\n    # Add the element at the current index from list1 to the new list\n    # Add the element at the current index from list2 to the new list\n    # Add the element at the current index from list3 to the new list\n# Return the new list containing the interleaved elements from all input lists"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> interleaveLists(ArrayList<Long> list1, ArrayList<Long> list2, ArrayList<Long> list3) {\n        ArrayList<Long> result = new ArrayList<>();\n        int length = list1.size();\n        \n        for (int i = 0; i < length; i++) {\n            result.add(list1.get(i));\n            result.add(list2.get(i));\n            result.add(list3.get(i));\n        }\n        \n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/102",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static String snakeToCamel(String word) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Split the input string by underscore (_) to get individual words\n# Create a StringBuilder object to store the converted camel case string\n# Iterate through each word in the split string\n    # Capitalize the first character of each word except for the first word\n    # Append the capitalized word to the StringBuilder object\n# Convert the StringBuilder object to a string and return it as the camel case string"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String snakeToCamel(String word) {\n        String[] words = word.split(\"_\");\n        StringBuilder camelCase = new StringBuilder();\n        \n        for (int i = 0; i < words.length; i++) {\n            String currentWord = words[i];\n            \n            if (i == 0) {\n                camelCase.append(currentWord);\n            } else {\n                camelCase.append(Character.toUpperCase(currentWord.charAt(0)));\n                camelCase.append(currentWord.substring(1));\n            }\n        }\n        \n        return camelCase.toString();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/801",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of equal numbers from three given integers.\n    public static long testThreeEqual(long x, long y, long z) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(testThreeEqual((1l), (1l), (1l)) == (3l));\n    assert(testThreeEqual((-1l), (-2l), (-3l)) == (0l));\n    assert(testThreeEqual((1l), (2l), (2l)) == (2l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a counter variable to 0\n# Check if x is equal to y and y is equal to z\n    # If true, increment the counter variable by 3\n# Check if x is equal to y or y is equal to z or x is equal to z\n    # If true, increment the counter variable by 2\n# Return the value of the counter variable as the number of equal numbers"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long testThreeEqual(long x, long y, long z) {\n        long count = 0;\n\n        if (x == y && y == z) {\n            count += 3;\n        } else if (x == y || y == z || x == z) {\n            count += 2;\n        }\n\n        return count;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/782",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the sum of all odd length subarray array lists. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarray array lists/\n    public static long oddLengthSum(ArrayList<Long> arr) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(oddLengthSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l)))) == (14l));\n    assert(oddLengthSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)2l)))) == (15l));\n    assert(oddLengthSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)7l)))) == (8l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `sum` to 0 to store the sum of all odd length subarrays\n# Iterate through each element in the input ArrayList\n    # For each element, iterate through each subarray starting from that element\n        # For each subarray, check if its length is odd\n            # If the length is odd, add the sum of its elements to `sum`\n# Return the final value of `sum` as the sum of all odd length subarrays"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long oddLengthSum(ArrayList<Long> arr) {\n        long sum = 0;\n        \n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i; j < arr.size(); j++) {\n                if ((j - i + 1) % 2 != 0) {\n                    sum += arr.get(j);\n                }\n            }\n        }\n        \n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/67",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the number of ways to partition a set of Bell numbers.\n    public static long bellNumber(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(bellNumber((2l)) == (2l));\n    assert(bellNumber((10l)) == (115975l));\n    assert(bellNumber((56l)) == (6775685320645824322581483068371419745979053216268760300l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a 2D array of size (n+1)x(n+1) to store the bell numbers\n# Initialize the first row and first column of the array with value 1\n# Use nested loops to fill in the remaining cells of the array\n    # For each row i from 1 to n\n        # For each column j from 1 to i\n            # Set the value of the cell at (i, j) to the sum of the value of the cell at (i-1, j-1) and the value of the cell at (i, j-1) from the previous row\n# Return the value of the cell at (n, n), which represents the bell number for n\n"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long bellNumber(long n) {\n        long[][] bell = new long[n+1][n+1];\n        \n        bell[0][0] = 1;\n        \n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            \n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        \n        return bell[n][n];\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/458",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the area of a rectangle.\n    public static long rectangleArea(long l, long b) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(rectangleArea((10l), (20l)) == (200l));\n    assert(rectangleArea((10l), (5l)) == (50l));\n    assert(rectangleArea((4l), (2l)) == (8l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Calculate the area of the rectangle by multiplying its length and breadth\n# Return the calculated area"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long rectangleArea(long l, long b) {\n        return l * b;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/599",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find sum and average of first n natural numbers.\n    public static Pair<Long, Float> sumAverage(long number) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(sumAverage((10l)).equals((Pair.with(55l, 5.5f))));\n    assert(sumAverage((15l)).equals((Pair.with(120l, 8.0f))));\n    assert(sumAverage((20l)).equals((Pair.with(210l, 10.5f))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `sum` to 0\n# Iterate from 1 to `number` (inclusive)\n    # Add each number to `sum`\n# Calculate the average by dividing `sum` by `number`\n# Return a Pair object containing `sum` and the average"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Pair<Long, Float> sumAverage(long number) {\n        long sum = 0;\n        for (long i = 1; i <= number; i++) {\n            sum += i;\n        }\n        float average = (float) sum / number;\n        return Pair.with(sum, average);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/261",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in two pairs and performs mathematical division operation element-wise across the given pairs.\n    public static Pair<Long, Long, Long, Long> divisionElements(Pair<Long, Long, Long, Long> test_tup1, Pair<Long, Long, Long, Long> test_tup2) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(divisionElements((Pair.with(10l, 4l, 6l, 9l)), (Pair.with(5l, 2l, 3l, 3l))).equals((Pair.with(2l, 2l, 2l, 3l))));\n    assert(divisionElements((Pair.with(12l, 6l, 8l, 16l)), (Pair.with(6l, 3l, 4l, 4l))).equals((Pair.with(2l, 2l, 2l, 4l))));\n    assert(divisionElements((Pair.with(20l, 14l, 36l, 18l)), (Pair.with(5l, 7l, 6l, 9l))).equals((Pair.with(4l, 2l, 6l, 2l))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Extract the elements from each pair\n# Perform division operation element-wise\n# Create a new pair with the result of the division operation\n# Return the new pair"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Pair<Long, Long, Long, Long> divisionElements(Pair<Long, Long, Long, Long> test_tup1, Pair<Long, Long, Long, Long> test_tup2) {\n        long first = test_tup1.getValue0() / test_tup2.getValue0();\n        long second = test_tup1.getValue1() / test_tup2.getValue1();\n        long third = test_tup1.getValue2() / test_tup2.getValue2();\n        long fourth = test_tup1.getValue3() / test_tup2.getValue3();\n\n        return new Pair<>(first, second, third, fourth);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/566",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to get the sum of the digits of a non-negative integer.\n    public static long sumDigits(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(sumDigits((345l)) == (12l));\n    assert(sumDigits((12l)) == (3l));\n    assert(sumDigits((97l)) == (16l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Convert the input number to a string\n# Initialize a variable to store the sum of the digits\n# Iterate through each character in the string representation of the number\n    # Convert the character back to an integer\n    # Add the integer to the sum of the digits\n# Return the sum of the digits"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long sumDigits(long n) {\n        String numberString = String.valueOf(n);\n        long sum = 0;\n        for (int i = 0; i < numberString.length(); i++) {\n            int digit = Character.getNumericValue(numberString.charAt(i));\n            sum += digit;\n        }\n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/94",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array array list of pairs, write a function that returns the first value of the pair with the smallest second value.\n    public static String indexMinimum(ArrayList<Pair<String, Long>> test_list) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(indexMinimum((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Rash\", 143l), (Pair<String, Long>)Pair.with(\"Manjeet\", 200l), (Pair<String, Long>)Pair.with(\"Varsha\", 100l))))).equals((\"Varsha\")));\n    assert(indexMinimum((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Yash\", 185l), (Pair<String, Long>)Pair.with(\"Dawood\", 125l), (Pair<String, Long>)Pair.with(\"Sanya\", 175l))))).equals((\"Dawood\")));\n    assert(indexMinimum((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Sai\", 345l), (Pair<String, Long>)Pair.with(\"Salman\", 145l), (Pair<String, Long>)Pair.with(\"Ayesha\", 96l))))).equals((\"Ayesha\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable to store the index of the pair with the smallest second value\n# Iterate through each pair in the input array list\n    # Check if the second value of the current pair is smaller than the second value of the pair at the stored index\n        # If true, update the stored index to the current index\n# Return the first value of the pair at the stored index"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String indexMinimum(ArrayList<Pair<String, Long>> test_list) {\n        int minIndex = 0;\n        for (int i = 1; i < test_list.size(); i++) {\n            if (test_list.get(i).getValue1() < test_list.get(minIndex).getValue1()) {\n                minIndex = i;\n            }\n        }\n        return test_list.get(minIndex).getValue0();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/618",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to divide two array lists element wise.\n    public static ArrayList<Float> divList(ArrayList<Long> nums1, ArrayList<Long> nums2) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(divList((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Float>(Arrays.asList((float)4.0f, (float)2.5f, (float)2.0f)))));\n    assert(divList((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))).equals((new ArrayList<Float>(Arrays.asList((float)3.0f, (float)0.5f)))));\n    assert(divList((new ArrayList<Long>(Arrays.asList((long)90l, (long)120l))), (new ArrayList<Long>(Arrays.asList((long)50l, (long)70l)))).equals((new ArrayList<Float>(Arrays.asList((float)1.8f, (float)1.7142857142857142f)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input array lists are null or empty\n# Check if the sizes of the input array lists are the same\n# Create a new ArrayList<Float> to store the division results\n# Iterate through the elements of the input array lists\n    # Check if the denominator is zero, if so, skip the division for that element and continue to the next element\n    # Calculate the division of the corresponding elements from the input array lists\n    # Add the division result to the new ArrayList<Float>\n# Return the new ArrayList<Float> containing the division results"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Float> divList(ArrayList<Long> nums1, ArrayList<Long> nums2) {\n        // Check if the input array lists are null or empty\n        if (nums1 == null || nums2 == null || nums1.isEmpty() || nums2.isEmpty()) {\n            return null;\n        }\n        \n        // Check if the sizes of the input array lists are the same\n        if (nums1.size() != nums2.size()) {\n            return null;\n        }\n        \n        ArrayList<Float> result = new ArrayList<>();\n        \n        // Iterate through the elements of the input array lists\n        for (int i = 0; i < nums1.size(); i++) {\n            // Check if the denominator is zero, if so, skip the division for that element and continue to the next element\n            if (nums2.get(i) == 0) {\n                result.add(null);\n                continue;\n            }\n            \n            // Calculate the division of the corresponding elements from the input array lists\n            float division = (float) nums1.get(i) / nums2.get(i);\n            \n            // Add the division result to the new ArrayList<Float>\n            result.add(division);\n        }\n        \n        // Return the new ArrayList<Float> containing the division results\n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/393",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the array list with maximum length.\n    public static Pair<Long, ArrayList<Long>> maxLengthList(ArrayList<ArrayList<Long>> input_list) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(maxLengthList((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)11l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)13l, (long)15l, (long)17l)))))).equals((Pair.with(3l, new ArrayList<Long>(Arrays.asList((long)13l, (long)15l, (long)17l))))));\n    assert(maxLengthList((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)))))).equals((Pair.with(5l, new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))));\n    assert(maxLengthList((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)12l)))))).equals((Pair.with(4l, new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l, (long)9l))))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `max_length` to track the maximum length of the array list\n# Initialize a variable `max_list` to store the array list with maximum length\n# Iterate through each array list in the input list\n    # Check the length of the current array list\n    # If the length is greater than `max_length`, update `max_length` and `max_list`\n# Return a tuple of `max_length` and `max_list`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Pair<Integer, ArrayList<Integer>> maxLengthList(ArrayList<ArrayList<Integer>> input_list) {\n        int max_length = 0;\n        ArrayList<Integer> max_list = null;\n        \n        for (ArrayList<Integer> list : input_list) {\n            if (list.size() > max_length) {\n                max_length = list.size();\n                max_list = list;\n            }\n        }\n        \n        return new Pair<>(max_length, max_list);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/476",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the sum of the largest and smallest value in a given array array list.\n    public static long bigSum(ArrayList<Long> nums) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(bigSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (4l));\n    assert(bigSum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)3l, (long)4l)))) == (3l));\n    assert(bigSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)6l)))) == (8l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input array list is empty\n    # If it is empty, return 0\n# Initialize variables for the smallest and largest values, setting them to the first element of the array list\n# Iterate through the remaining elements of the array list\n    # If the current element is smaller than the smallest value, update the smallest value\n    # If the current element is larger than the largest value, update the largest value\n# Calculate the sum of the smallest and largest values\n# Return the sum"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long bigSum(ArrayList<Long> nums) {\n        if (nums.isEmpty()) {\n            return 0;\n        }\n        long smallest = nums.get(0);\n        long largest = nums.get(0);\n        for (int i = 1; i < nums.size(); i++) {\n            long current = nums.get(i);\n            if (current < smallest) {\n                smallest = current;\n            }\n            if (current > largest) {\n                largest = current;\n            }\n        }\n        return smallest + largest;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/436",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to return the negative numbers in an array array list.\n    public static ArrayList<Long> negNos(ArrayList<Long> list1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(negNos((new ArrayList<Long>(Arrays.asList((long)-1l, (long)4l, (long)5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-6l)))));\n    assert(negNos((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))));\n    assert(negNos((new ArrayList<Long>(Arrays.asList((long)-7l, (long)-6l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)-7l, (long)-6l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create an empty ArrayList to store the negative numbers\n# Iterate through each element in the input ArrayList\n    # Check if the current element is less than 0\n        # If it is, add it to the new ArrayList\n# Return the new ArrayList containing the negative numbers"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> negNos(ArrayList<Long> list1) {\n        ArrayList<Long> negNumbers = new ArrayList<>();\n        for (Long num : list1) {\n            if (num < 0) {\n                negNumbers.add(num);\n            }\n        }\n        return negNumbers;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/388",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the highest power of 2 that is less than or equal to n.\n    public static long highestPowerOf2(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `power` with the value 1\n# Loop while `power` is less than or equal to `n`\n    # Multiply `power` by 2\n# Return `power` divided by 2"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long highestPowerOf2(long n) {\n        long power = 1;\n        while (power <= n) {\n            power *= 2;\n        }\n        return power / 2;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/69",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check whether an array array list contains the given subarray list or not.\n    public static boolean isSublist(ArrayList<Long> l, ArrayList<Long> s) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(isSublist((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)5l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)7l)))) == (false));\n    assert(isSublist((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)5l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)4l, (long)3l)))) == (true));\n    assert(isSublist((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)5l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)))) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the subarray list is null or empty\n# Check if the subarray list is longer than the array list\n# Iterate through each element in the array list\n    # Check if the current element matches the first element in the subarray list\n        # If the match is found, iterate through the subarray list and check if all elements match with the corresponding elements in the array list\n            # If all elements match, return true\n# If no match is found, return false"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean isSublist(ArrayList<Long> l, ArrayList<Long> s) {\n        if (s == null || s.isEmpty()) {\n            return true;\n        }\n        if (s.size() > l.size()) {\n            return false;\n        }\n        for (int i = 0; i <= l.size() - s.size(); i++) {\n            if (l.get(i).equals(s.get(0))) {\n                boolean match = true;\n                for (int j = 1; j < s.size(); j++) {\n                    if (!l.get(i + j).equals(s.get(j))) {\n                        match = false;\n                        break;\n                    }\n                }\n                if (match) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/282",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to subtract two array lists element-wise.\n    public static ArrayList<Long> subList(ArrayList<Long> nums1, ArrayList<Long> nums2) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(subList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-3l, (long)-3l)))));\n    assert(subList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-2l)))));\n    assert(subList((new ArrayList<Long>(Arrays.asList((long)90l, (long)120l))), (new ArrayList<Long>(Arrays.asList((long)50l, (long)70l)))).equals((new ArrayList<Long>(Arrays.asList((long)40l, (long)50l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input array lists have the same size\n# Create a new array list to store the result\n# Iterate through each element and its index in the input array lists\n    # Subtract the corresponding elements and add the result to the new array list\n# Return the new array list with the subtracted elements"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> subList(ArrayList<Long> nums1, ArrayList<Long> nums2) {\n        if (nums1.size() != nums2.size()) {\n            throw new IllegalArgumentException(\"Input array lists must have the same size\");\n        }\n        \n        ArrayList<Long> result = new ArrayList<>();\n        \n        for (int i = 0; i < nums1.size(); i++) {\n            result.add(nums1.get(i) - nums2.get(i));\n        }\n        \n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/58",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to check whether the given two integers have opposite sign or not.\n    public static boolean oppositeSigns(long x, long y) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(oppositeSigns((1l), (-2l)) == (true));\n    assert(oppositeSigns((3l), (2l)) == (false));\n    assert(oppositeSigns((-10l), (-10l)) == (false));\n    assert(oppositeSigns((-2l), (2l)) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the product of x and y is negative\n    # If the product is negative, then x and y have opposite signs\n        # Return true\n# If the product is not negative, then x and y have the same sign\n    # Return false"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean oppositeSigns(long x, long y) {\n        if ((x * y) < 0) {\n            return true;\n        }\n        return false;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/616",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which takes two pairs of the same length and performs the element wise modulo.\n    public static Pair<Long, Long, Long, Long> tupleModulo(Pair<Long, Long, Long, Long> test_tup1, Pair<Long, Long, Long, Long> test_tup2) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(tupleModulo((Pair.with(10l, 4l, 5l, 6l)), (Pair.with(5l, 6l, 7l, 5l))).equals((Pair.with(0l, 4l, 5l, 1l))));\n    assert(tupleModulo((Pair.with(11l, 5l, 6l, 7l)), (Pair.with(6l, 7l, 8l, 6l))).equals((Pair.with(5l, 5l, 6l, 1l))));\n    assert(tupleModulo((Pair.with(12l, 6l, 7l, 8l)), (Pair.with(7l, 8l, 9l, 7l))).equals((Pair.with(5l, 6l, 7l, 1l))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create four variables to store the elements of the input tuples\n# Perform the modulo operation on each corresponding pair of elements from the input tuples\n# Create a new tuple with the resulting modulo values\n# Return the new tuple"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Pair<Long, Long, Long, Long> tupleModulo(Pair<Long, Long, Long, Long> test_tup1, Pair<Long, Long, Long, Long> test_tup2) {\n        long elem1 = test_tup1.getValue0() % test_tup2.getValue0();\n        long elem2 = test_tup1.getValue1() % test_tup2.getValue1();\n        long elem3 = test_tup1.getValue2() % test_tup2.getValue2();\n        long elem4 = test_tup1.getValue3() % test_tup2.getValue3();\n        \n        return new Pair<>(elem1, elem2, elem3, elem4);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/594",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the difference of the first even and first odd number of a given array list.\n    public static long diffEvenOdd(ArrayList<Long> list1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(diffEvenOdd((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)7l, (long)4l, (long)1l, (long)6l, (long)8l)))) == (3l));\n    assert(diffEvenOdd((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l)))) == (1l));\n    assert(diffEvenOdd((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)7l, (long)9l, (long)10l)))) == (9l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Iterate through each number in the given array list\n    # Check if the current number is even\n        # If it is even, store it as the first even number\n    # Check if the current number is odd\n        # If it is odd, store it as the first odd number\n    # Check if both the first even and first odd numbers have been found\n        # If yes, calculate the difference between them\n        # Return the difference\n# If either the first even or first odd number is not found, return 0 as the difference"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long diffEvenOdd(ArrayList<Long> list1) {\n        long firstEven = 0;\n        long firstOdd = 0;\n\n        for (long number : list1) {\n            if (number % 2 == 0 && firstEven == 0) {\n                firstEven = number;\n            } else if (number % 2 != 0 && firstOdd == 0) {\n                firstOdd = number;\n            }\n\n            if (firstEven != 0 && firstOdd != 0) {\n                return firstEven - firstOdd;\n            }\n        }\n\n        return 0;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/569",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to sort each subarray list of strings in a given array list of array lists.\n    public static ArrayList<ArrayList<String>> sortSublists(ArrayList<ArrayList<String>> list1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(sortSublists((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"green\", (String)\"orange\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"black\", (String)\"white\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"white\", (String)\"black\", (String)\"orange\")))))).equals((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"green\", (String)\"orange\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"black\", (String)\"white\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"black\", (String)\"orange\", (String)\"white\")))))));\n    assert(sortSublists((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"green\", (String)\"orange\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"black\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"green\", (String)\"orange\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"white\")))))).equals((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"green\", (String)\"orange\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"black\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"green\", (String)\"orange\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"white\")))))));\n    assert(sortSublists((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"d\", (String)\"c\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"g\", (String)\"h\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"f\", (String)\"e\")))))).equals((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"c\", (String)\"d\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"g\", (String)\"h\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"e\", (String)\"f\")))))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Iterate through each subarray list in the input array list\n    # Sort the current subarray list in ascending order\n# Return the modified array list"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<ArrayList<String>> sortSublists(ArrayList<ArrayList<String>> list1) {\n        for (ArrayList<String> subList : list1) {\n            Collections.sort(subList);\n        }\n        return list1;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/435",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the last digit of a given number.\n    public static long lastDigit(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(lastDigit((123l)) == (3l));\n    assert(lastDigit((25l)) == (5l));\n    assert(lastDigit((30l)) == (0l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Convert the input number to a string\n# Get the last character of the string (which represents the last digit of the number)\n# Convert the last digit character back to a number and return it"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long lastDigit(long n) {\n        String str = Long.toString(n);\n        char lastChar = str.charAt(str.length() - 1);\n        return Character.getNumericValue(lastChar);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/770",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the sum of fourth power of first n odd natural numbers.\n    public static long oddNumSum(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(oddNumSum((2l)) == (82l));\n    assert(oddNumSum((3l)) == (707l));\n    assert(oddNumSum((4l)) == (3108l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `sum` to 0 to store the sum of the fourth power of odd natural numbers\n# Iterate `i` from 1 to `n`\n    # Check if `i` is an odd number\n        # If `i` is odd, add its fourth power to `sum`\n# Return `sum`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long oddNumSum(long n) {\n        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 != 0) {\n                sum += Math.pow(i, 4);\n            }\n        }\n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/132",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert an array array list to a string.\n    public static String tupString(ArrayList<String> tup1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(tupString((new ArrayList<String>(Arrays.asList((String)\"e\", (String)\"x\", (String)\"e\", (String)\"r\", (String)\"c\", (String)\"i\", (String)\"s\", (String)\"e\", (String)\"s\")))).equals((\"exercises\")));\n    assert(tupString((new ArrayList<String>(Arrays.asList((String)\"p\", (String)\"y\", (String)\"t\", (String)\"h\", (String)\"o\", (String)\"n\")))).equals((\"python\")));\n    assert(tupString((new ArrayList<String>(Arrays.asList((String)\"p\", (String)\"r\", (String)\"o\", (String)\"g\", (String)\"r\", (String)\"a\", (String)\"m\")))).equals((\"program\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create an empty string to store the converted string representation of the array list\n# Iterate through each element in the array list\n    # Append the current element to the string, followed by a comma\n# Remove the trailing comma from the string\n# Return the converted string representation"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String tupString(ArrayList<String> tup1) {\n        StringBuilder sb = new StringBuilder();\n        for (String element : tup1) {\n            sb.append(element).append(\",\");\n        }\n        if (sb.length() > 0) {\n            sb.deleteCharAt(sb.length() - 1);\n        }\n        return sb.toString();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/161",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to remove all elements from a given array list present in another array list.\n    public static ArrayList<Long> removeElements(ArrayList<Long> list1, ArrayList<Long> list2) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(removeElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)7l, (long)9l, (long)10l)))));\n    assert(removeElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)7l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l, (long)9l, (long)10l)))));\n    assert(removeElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)7l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)6l, (long)8l, (long)9l, (long)10l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new ArrayList to store the elements that are not present in list2\n# Iterate through each element in list1\n    # Check if the current element is not present in list2\n        # If not present, add it to the new ArrayList\n# Return the new ArrayList containing the elements that are not present in list2"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> removeElements(ArrayList<Long> list1, ArrayList<Long> list2) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long element : list1) {\n            if (!list2.contains(element)) {\n                result.add(element);\n            }\n        }\n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/414",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to check whether any value in a sequence exists in a sequence or not.\n    public static boolean overlapping(ArrayList<Long> list1, ArrayList<Long> list2) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(overlapping((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l, (long)9l)))) == (false));\n    assert(overlapping((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))) == (false));\n    assert(overlapping((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)5l)))) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Iterate through each element in list1\n    # Check if the element exists in list2\n        # If found, return true\n# If no overlapping element is found, return false"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean overlapping(ArrayList<Long> list1, ArrayList<Long> list2) {\n        for (Long element : list1) {\n            if (list2.contains(element)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/3",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input number `n` is less than or equal to 1. If so, return `true` since 1 is not a prime number.\n# Iterate from 2 to the square root of `n`.\n    # Check if `n` is divisible by any number in the iteration. If so, return `true` since `n` is not a prime number.\n# If `n` is not divisible by any number in the iteration, return `false` since `n` is a prime number."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) {\n            return true;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/133",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to calculate the sum of the negative numbers of a given array list of numbers.\n    public static long sumNegativenum(ArrayList<Long> nums) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(sumNegativenum((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-6l, (long)-9l, (long)11l, (long)-12l, (long)14l, (long)-5l, (long)17l)))) == (-32l));\n    assert(sumNegativenum((new ArrayList<Long>(Arrays.asList((long)10l, (long)15l, (long)-14l, (long)13l, (long)-18l, (long)12l, (long)-20l)))) == (-52l));\n    assert(sumNegativenum((new ArrayList<Long>(Arrays.asList((long)19l, (long)-65l, (long)57l, (long)39l, (long)152l, (long)-639l, (long)121l, (long)44l, (long)90l, (long)-190l)))) == (-894l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable to store the sum of negative numbers and set it to 0\n# Iterate through each number in the given array list\n    # Check if the number is negative\n        # If it is negative, add it to the sum variable\n# Return the sum of negative numbers"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long sumNegativenum(ArrayList<Long> nums) {\n        long sum = 0;\n        for (long num : nums) {\n            if (num < 0) {\n                sum += num;\n            }\n        }\n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/9",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the minimum number of rotations (greater than 0) required to get the same string.\n    public static long findRotations(String str) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(findRotations((\"aaaa\")) == (1l));\n    assert(findRotations((\"ab\")) == (2l));\n    assert(findRotations((\"abc\")) == (3l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `rotations` to keep track of the minimum number of rotations\n# Iterate from 1 to the length of the string\n    # Use the `substring` method to get the substring from index `i` to the end of the string\n    # Concatenate the substring with the substring from the start of the string to index `i`\n    # Check if the concatenated string is equal to the original string\n        # If it is equal, update the value of `rotations` to `i`\n# Return the value of `rotations`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long findRotations(String str) {\n        long rotations = -1;\n        for (int i = 1; i < str.length(); i++) {\n            String rotatedString = str.substring(i) + str.substring(0, i);\n            if (rotatedString.equals(str)) {\n                rotations = i;\n                break;\n            }\n        }\n        return rotations;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/427",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    public static String changeDateFormat(String dt) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(changeDateFormat((\"2026-01-02\")).equals((\"02-01-2026\")));\n    assert(changeDateFormat((\"2020-11-13\")).equals((\"13-11-2020\")));\n    assert(changeDateFormat((\"2021-04-26\")).equals((\"26-04-2021\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Split the input date string using the \"-\" delimiter\n# Create a StringBuilder object to store the modified date format\n# Append the third element of the split string (year) to the StringBuilder object\n# Append the second element of the split string (month) to the StringBuilder object\n# Append the first element of the split string (day) to the StringBuilder object\n# Return the modified date format as a string"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String changeDateFormat(String dt) {\n        String[] dateParts = dt.split(\"-\");\n        StringBuilder sb = new StringBuilder();\n        sb.append(dateParts[2]).append(\"-\").append(dateParts[1]).append(\"-\").append(dateParts[0]);\n        return sb.toString();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/554",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function which takes an array array list of integers and only returns the odd ones.\n    public static ArrayList<Long> Split(ArrayList<Long> list) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(Split((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)))));\n    assert(Split((new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)12l, (long)13l)))).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)13l)))));\n    assert(Split((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)9l, (long)1l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new ArrayList to store the odd numbers\n# Iterate through each element in the input ArrayList\n    # Check if the current element is odd (using modulus operator)\n        # If it is odd, add it to the new ArrayList\n# Return the new ArrayList with odd numbers"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> Split(ArrayList<Long> list) {\n        ArrayList<Long> oddNumbers = new ArrayList<>();\n        for (Long num : list) {\n            if (num % 2 != 0) {\n                oddNumbers.add(num);\n            }\n        }\n        return oddNumbers;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/735",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    public static long toggleMiddleBits(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(toggleMiddleBits((9l)) == (15l));\n    assert(toggleMiddleBits((10l)) == (12l));\n    assert(toggleMiddleBits((11l)) == (13l));\n    assert(toggleMiddleBits((65l)) == (127l));\n    assert(toggleMiddleBits((77l)) == (115l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a bitmask with all bits set to 1 except the first and last bits\n# Use the bitwise XOR operator to toggle the middle bits of the given number using the bitmask\n# Return the modified number"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long toggleMiddleBits(long n) {\n        long bitmask = (1L << (Long.SIZE - 2)) - 1;\n        return n ^ bitmask;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/165",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    public static long countCharPosition(String str1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(countCharPosition((\"xbcefg\")) == (2l));\n    assert(countCharPosition((\"ABcED\")) == (3l));\n    assert(countCharPosition((\"AbgdeF\")) == (5l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `count` to 0.\n# Iterate through each character in the input string.\n    # Check if the character is a letter.\n        # Convert the character to lowercase.\n        # Calculate the position of the character in the English alphabet (1-indexed).\n        # Check if the position is equal to the index of the character in the string (0-indexed).\n            # If it is, increment `count` by 1.\n# Return the value of `count`."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long countCharPosition(String str1) {\n        long count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (Character.isLetter(c)) {\n                c = Character.toLowerCase(c);\n                int position = c - 'a' + 1;\n                if (position == i) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/308",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the specified number of largest products from two given array lists, selecting one factor from each array list.\n    public static ArrayList<Long> largeProduct(ArrayList<Long> nums1, ArrayList<Long> nums2, long N) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(largeProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)8l, (long)9l, (long)10l, (long)6l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)60l, (long)54l, (long)50l)))));\n    assert(largeProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)8l, (long)9l, (long)10l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)60l, (long)54l, (long)50l, (long)48l)))));\n    assert(largeProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)8l, (long)9l, (long)10l, (long)6l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)60l, (long)54l, (long)50l, (long)48l, (long)45l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a priority queue to store the largest products\n# Iterate through each number in `nums1`\n    # Iterate through each number in `nums2`\n        # Calculate the product of the current numbers\n        # Add the product to the priority queue\n        # If the size of the priority queue is greater than `N`, remove the smallest element\n# Create a new array list to store the largest products\n# While the priority queue is not empty, add the elements from the priority queue to the new array list in reverse order\n# Return the new array list containing the largest products"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> largeProduct(ArrayList<Long> nums1, ArrayList<Long> nums2, long N) {\n        PriorityQueue<Long> queue = new PriorityQueue<>(Collections.reverseOrder());\n        \n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                long product = num1 * num2;\n                queue.add(product);\n                if (queue.size() > N) {\n                    queue.poll();\n                }\n            }\n        }\n        \n        ArrayList<Long> largestProducts = new ArrayList<>();\n        while (!queue.isEmpty()) {\n            largestProducts.add(0, queue.poll());\n        }\n        \n        return largestProducts;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/614",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the cumulative sum of all the values that are present in the given array list of array lists.\n    public static long cummulativeSum(ArrayList<ArrayList<Long>> test_list) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(cummulativeSum((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))))) == (30l));\n    assert(cummulativeSum((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)7l)))))) == (37l));\n    assert(cummulativeSum((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)8l)))))) == (44l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `sum` as 0 to store the cumulative sum\n# Iterate through each inner ArrayList in the input ArrayList\n    # Iterate through each value in the inner ArrayList\n        # Add the value to the `sum` variable\n# Return the `sum` variable as the cumulative sum of all the values in the input ArrayList of ArrayLists"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long cumulativeSum(ArrayList<ArrayList<Long>> test_list) {\n        long sum = 0;\n        for (ArrayList<Long> innerList : test_list) {\n            for (Long value : innerList) {\n                sum += value;\n            }\n        }\n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/763",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the minimum difference between any two elements in a given array array list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    public static long findMinDiff(ArrayList<Long> arr, long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(findMinDiff((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)3l, (long)19l, (long)18l, (long)25l))), (6l)) == (1l));\n    assert(findMinDiff((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)6l))), (4l)) == (1l));\n    assert(findMinDiff((new ArrayList<Long>(Arrays.asList((long)30l, (long)5l, (long)20l, (long)9l))), (4l)) == (4l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Sort the given array in ascending order\n# Initialize a variable `minDiff` to store the minimum difference between any two elements\n# Iterate through the array from the second element to the last element\n    # Calculate the difference between the current element and the previous element\n    # Update `minDiff` if the current difference is smaller than `minDiff`\n# Return the value of `minDiff` as the minimum difference between any two elements in the given array"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long findMinDiff(ArrayList<Long> arr, long n) {\n        Collections.sort(arr);\n        long minDiff = Long.MAX_VALUE;\n        for (int i = 1; i < n; i++) {\n            long diff = arr.get(i) - arr.get(i - 1);\n            if (diff < minDiff) {\n                minDiff = diff;\n            }\n        }\n        return minDiff;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/794",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    public static boolean textStartaEndb(String text) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(textStartaEndb((\"aabbbb\")) == (true));\n    assert(textStartaEndb((\"aabAbbbc\")) == (false));\n    assert(textStartaEndb((\"accddbbjjj\")) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Use a regular expression pattern to match the desired pattern:\n    # Start with 'a'\n    # Followed by any character(s)\n    # End with 'b'\n# Use the `matches` method of the `String` class to check if the input string matches the pattern\n# Return the result of the match (true or false)"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean textStartaEndb(String text) {\n        return text.matches(\"a.*b\");\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/799",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    public static long leftRotate(long n, long d) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(leftRotate((16l), (2l)) == (64l));\n    assert(leftRotate((10l), (2l)) == (40l));\n    assert(leftRotate((99l), (3l)) == (792l));\n    assert(leftRotate((99l), (3l)) == (792l));\n    assert(leftRotate((1l), (3l)) == (8l));\n    assert(leftRotate((5l), (3l)) == (40l));\n    assert(leftRotate((29l), (3l)) == (232l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a mask with d ones and the remaining bits as zeros\n# Perform a bitwise left shift on the input number by d bits\n# Perform a bitwise AND operation between the shifted number and the mask\n# Perform a bitwise right shift on the input number by (32-d) bits\n# Perform a bitwise OR operation between the shifted number and the result of the previous step\n# Return the final result as the rotated number"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long leftRotate(long n, long d) {\n        long mask = (1L << d) - 1L;\n        long leftShifted = (n << d) & mask;\n        long rightShifted = n >>> (32 - d);\n        return leftShifted | rightShifted;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/602",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the first repeated character in a given string.\n    public static Optional<String> firstRepeatedChar(String str1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(firstRepeatedChar((\"abcabc\")).equals(Optional.of(\"a\")));\n    assert(firstRepeatedChar((\"abc\")).equals(Optional.empty()));\n    assert(firstRepeatedChar((\"123123\")).equals(Optional.of(\"1\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a HashSet to store the characters that have already been encountered\n# Iterate through each character in the input string\n    # Check if the current character is already present in the HashSet\n        # If it is, return it as the first repeated character\n    # Add the current character to the HashSet\n# If no repeated character is found, return an empty Optional"
        ],
        "code": [
            "import java.util.*;\n\nclass Problem {\n    public static Optional<String> firstRepeatedChar(String str1) {\n        Set<Character> set = new HashSet<>();\n        for (char c : str1.toCharArray()) {\n            if (set.contains(c)) {\n                return Optional.of(String.valueOf(c));\n            }\n            set.add(c);\n        }\n        return Optional.empty();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/296",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count inversions in an array array list.\n    public static long getInvCount(ArrayList<Long> arr) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(getInvCount((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)6l, (long)4l, (long)5l)))) == (5l));\n    assert(getInvCount((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l)))) == (1l));\n    assert(getInvCount((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)6l, (long)1l)))) == (3l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `count` to keep track of the number of inversions\n# Iterate through each element and its index in the input array list\n    # Iterate through the elements after the current element\n        # Check if the current element is greater than the element at the later index\n            # If it is, increment `count` by 1\n# Return the value of `count` as the total number of inversions in the array list"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long getInvCount(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/271",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    public static long evenPowerSum(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(evenPowerSum((2l)) == (1056l));\n    assert(evenPowerSum((3l)) == (8832l));\n    assert(evenPowerSum((1l)) == (32l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `sum` to store the sum of the even powers\n# Initialize a variable `count` to keep track of the number of even powers found\n# Initialize a variable `num` to store the current number being checked, starting from 2\n# Iterate while `count` is less than `n`\n    # Check if `num` is an even number\n        # If `num` is even, add `num` raised to the fifth power to `sum`\n        # Increment `count` by 1\n    # Increment `num` by 2 to move to the next even number\n# Return the value of `sum`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long evenPowerSum(long n) {\n        long sum = 0;\n        long count = 0;\n        long num = 2;\n        \n        while (count < n) {\n            if (num % 2 == 0) {\n                sum += Math.pow(num, 5);\n                count++;\n            }\n            num += 2;\n        }\n        \n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/70",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find whether all the given array lists have equal length or not.\n    public static boolean getEqual(ArrayList<ArrayList<Long>> Input) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(getEqual((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)11l, (long)22l, (long)33l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)44l, (long)55l, (long)66l)))))) == (true));\n    assert(getEqual((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l)))))) == (false));\n    assert(getEqual((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)))))) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Get the length of the first array list in the input array list.\n# Iterate through each array list in the input array list starting from the second array list.\n    # If the length of the current array list is not equal to the length of the first array list, return false.\n# If all array lists have equal length, return true."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean getEqual(ArrayList<ArrayList<Long>> Input) {\n        int firstListLength = Input.get(0).size();\n        for (int i = 1; i < Input.size(); i++) {\n            if (Input.get(i).size() != firstListLength) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/113",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if a string represents an integer or not.\n    public static boolean checkInteger(String text) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(checkInteger((\"python\")) == (false));\n    assert(checkInteger((\"1\")) == (true));\n    assert(checkInteger((\"12345\")) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Trim the input string to remove leading and trailing whitespaces\n# Check if the trimmed string is empty. If it is, return false since an empty string cannot represent an integer.\n# Check if the first character of the trimmed string is either '+' or '-'. If it is, remove it from the string.\n# Iterate through each character in the trimmed string\n    # If any character is not a digit, return false since it cannot represent an integer.\n# If the iteration completes without returning false, return true since the string represents an integer."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean checkInteger(String text) {\n        String trimmedText = text.trim();\n        if (trimmedText.isEmpty()) {\n            return false;\n        }\n        if (trimmedText.charAt(0) == '+' || trimmedText.charAt(0) == '-') {\n            trimmedText = trimmedText.substring(1);\n        }\n        for (char c : trimmedText.toCharArray()) {\n            if (!Character.isDigit(c)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/757",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to count the pairs of reverse strings in the given string array list. https://www.geeksforgeeks.org/javathon-program-to-count-the-pairs-of-reverse-strings/\n    public static long countReversePairs(ArrayList<String> test_list) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(countReversePairs((new ArrayList<String>(Arrays.asList((String)\"julia\", (String)\"best\", (String)\"tseb\", (String)\"for\", (String)\"ailuj\")))) == (2l));\n    assert(countReversePairs((new ArrayList<String>(Arrays.asList((String)\"geeks\", (String)\"best\", (String)\"for\", (String)\"skeeg\")))) == (1l));\n    assert(countReversePairs((new ArrayList<String>(Arrays.asList((String)\"makes\", (String)\"best\", (String)\"sekam\", (String)\"for\", (String)\"rof\")))) == (2l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a counter variable to keep track of the number of reverse pairs\n# Iterate through each string in the input ArrayList\n    # Iterate through each string again, starting from the next index\n        # Check if the current string and the next string are reverse of each other\n            # If they are, increment the counter variable\n# Return the counter variable, which represents the number of reverse pairs found in the input ArrayList"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long countReversePairs(ArrayList<String> test_list) {\n        long count = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            for (int j = i + 1; j < test_list.size(); j++) {\n                if (isReverse(test_list.get(i), test_list.get(j))) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    public static boolean isReverse(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return false;\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(str2.length() - 1 - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/632",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to move all zeroes to the end of the given array list.\n    public static ArrayList<Long> moveZero(ArrayList<Long> num_list) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(moveZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)0l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)0l, (long)0l)))));\n    assert(moveZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)2l, (long)0l, (long)0l, (long)4l, (long)0l, (long)5l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)2l, (long)4l, (long)5l, (long)0l, (long)0l, (long)0l, (long)0l)))));\n    assert(moveZero((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)1l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)0l, (long)0l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new list to store the modified array list\n# Iterate through each element in the input array list\n    # Check if the element is not equal to zero\n        # If it's not zero, add it to the new list\n# Count the number of zeroes in the input array list\n# Append that many zeroes to the new list\n# Return the new list"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> moveZero(ArrayList<Long> num_list) {\n        ArrayList<Long> modified_list = new ArrayList<Long>();\n        int zero_count = 0;\n\n        for (Long num : num_list) {\n            if (num != 0) {\n                modified_list.add(num);\n            } else {\n                zero_count++;\n            }\n        }\n\n        for (int i = 0; i < zero_count; i++) {\n            modified_list.add(0L);\n        }\n\n        return modified_list;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/394",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if given array list contains no duplicates.\n    public static boolean checkDistinct(ArrayList<Long> test_tup) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(checkDistinct((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)5l, (long)6l, (long)1l, (long)4l)))) == (false));\n    assert(checkDistinct((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)5l, (long)6l)))) == (true));\n    assert(checkDistinct((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Convert the input ArrayList to a HashSet\n# Check if the size of the HashSet is equal to the size of the input ArrayList\n    # If the sizes are equal, it means there are no duplicates\n    # Return true\n# If the sizes are not equal, it means there are duplicates\n    # Return false"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean checkDistinct(ArrayList<Long> test_tup) {\n        Set<Long> set = new HashSet<>(test_tup);\n        return set.size() == test_tup.size();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/637",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check whether the given amount has no profit and no loss\n    public static boolean noprofitNoloss(long actual_cost, long sale_amount) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(noprofitNoloss((1500l), (1200l)) == (false));\n    assert(noprofitNoloss((100l), (100l)) == (true));\n    assert(noprofitNoloss((2000l), (5000l)) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the actual cost is equal to the sale amount\n    # If they are equal, return true\n    # If they are not equal, return false"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean noprofitNoloss(long actual_cost, long sale_amount) {\n        return actual_cost == sale_amount;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/772",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to remove all the words with k length in the given string.\n    public static String removeLength(String test_str, long K) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Split the input string into individual words using whitespace as the delimiter\n# Iterate through each word in the list of words\n    # Check if the length of the current word is not equal to the given length K\n        # If the length is not equal to K, add the word to a new list of valid words\n# Join the valid words using whitespace as the delimiter and return the resulting string"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String removeLength(String test_str, int K) {\n        String[] words = test_str.split(\"\\\\s+\");\n        List<String> validWords = new ArrayList<>();\n        for (String word : words) {\n            if (word.length() != K) {\n                validWords.add(word);\n            }\n        }\n        return String.join(\" \", validWords);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/764",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count number of digits in a given string.\n    public static long numberCtr(String str) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(numberCtr((\"program2bedone\")) == (1l));\n    assert(numberCtr((\"3wonders\")) == (1l));\n    assert(numberCtr((\"123\")) == (3l));\n    assert(numberCtr((\"3wond-1ers2\")) == (3l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a counter variable to 0\n# Iterate through each character in the input string\n    # Check if the character is a digit\n        # If it is, increment the counter variable by 1\n# Return the value of the counter variable"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long numberCtr(String str) {\n        long count = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (Character.isDigit(str.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/242",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to count the total number of characters in a string.\n    public static long countCharac(String str1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(countCharac((\"python programming\")) == (18l));\n    assert(countCharac((\"language\")) == (8l));\n    assert(countCharac((\"words\")) == (5l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input string is null\n# Use the `length` method of the string to get the total number of characters\n# Return the total number of characters"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long countCharac(String str1) {\n        if (str1 == null) {\n            return 0;\n        }\n        return str1.length();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/239",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    public static long getTotalNumberOfSequences(long m, long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(getTotalNumberOfSequences((10l), (4l)) == (4l));\n    assert(getTotalNumberOfSequences((5l), (2l)) == (6l));\n    assert(getTotalNumberOfSequences((16l), (3l)) == (84l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a 2D array `dp` of size `(m+1) x (n+1)` to store the number of sequences\n# Set the first row of `dp` to 1, as there is only one possible sequence of length 0\n# Iterate through each row from 2 to `m` (inclusive)\n    # Iterate through each column from 1 to `n` (inclusive)\n        # Initialize a variable `count` to 0\n        # Iterate through each value from 2 times the previous element (`dp[i-1][j-1]*2`) to `i` (inclusive)\n            # Increment `count` by the value at `dp[i][j-value]`\n        # Set `dp[i][j]` to `count`\n# Return the value at `dp[m][n]`, which represents the total number of sequences"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long getTotalNumberOfSequences(long m, long n) {\n        long[][] dp = new long[(int)m + 1][(int)n + 1];\n        \n        for (int i = 0; i <= m; i++) {\n            dp[i][0] = 1;\n        }\n        \n        for (int i = 2; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                long count = 0;\n                for (int k = 2; k <= i; k++) {\n                    if (j - k >= 0) {\n                        count += dp[i][j - k];\n                    }\n                }\n                dp[i][j] = count;\n            }\n        }\n        \n        return dp[(int)m][(int)n];\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/736",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize two pointers, `low` and `high`, to the start and end of the array respectively.\n# While `low` is less than or equal to `high`:\n    # Calculate the mid-point index as `(low + high) / 2`.\n    # Compare the value at the mid-point index with the target value `x`.\n        # If the value at the mid-point index is less than `x`, update `low` to mid + 1.\n        # If the value at the mid-point index is greater than or equal to `x`, update `high` to mid - 1.\n# After the while loop, return the value of `low` as the left insertion point for the specified value."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        int low = 0;\n        int high = a.size() - 1;\n\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (a.get(mid) < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n\n        return low;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/257",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in two numbers and returns an array array list with the second number and then the first number.\n    public static ArrayList<Long> swapNumbers(long a, long b) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(swapNumbers((10l), (20l)).equals((new ArrayList<Long>(Arrays.asList((long)20l, (long)10l)))));\n    assert(swapNumbers((15l), (17l)).equals((new ArrayList<Long>(Arrays.asList((long)17l, (long)15l)))));\n    assert(swapNumbers((100l), (200l)).equals((new ArrayList<Long>(Arrays.asList((long)200l, (long)100l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create an ArrayList to store the swapped numbers\n# Add the second number to the ArrayList\n# Add the first number to the ArrayList\n# Return the ArrayList"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> swapNumbers(long a, long b) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        result.add(b);\n        result.add(a);\n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/223",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a sorted array array list, its length (n), and an element and returns whether the element is the majority element in the given sorted array array list. (The majority element is the element that occurs more than n/2 times.)\n    public static boolean isMajority(ArrayList<Long> arr, long n, long x) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(isMajority((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l, (long)3l, (long)10l))), (7l), (3l)) == (true));\n    assert(isMajority((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l, (long)4l, (long)4l, (long)4l, (long)6l, (long)6l))), (8l), (4l)) == (false));\n    assert(isMajority((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)2l, (long)2l))), (5l), (1l)) == (true));\n    assert(isMajority((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l, (long)2l))), (5l), (1l)) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Calculate the minimum number of occurrences required for an element to be considered the majority element. This is equal to n/2 + 1.\n# Iterate through each element in the input array list\n    # Count the number of occurrences of the current element in the array list\n    # If the count is greater than or equal to the minimum required occurrences, return true\n# If no element is found with the minimum required occurrences, return false"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean isMajority(ArrayList<Long> arr, long n, long x) {\n        long minOccurrences = n / 2 + 1;\n        long count = 0;\n        for (long element : arr) {\n            if (element == x) {\n                count++;\n            }\n            if (count >= minOccurrences) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/273",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in two pairs and subtracts the elements of the first pair by the elements of the second pair with the same index.\n    public static Pair<Long, Long, Long> substractElements(Pair<Long, Long, Long> test_tup1, Pair<Long, Long, Long> test_tup2) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(substractElements((Pair.with(10l, 4l, 5l)), (Pair.with(2l, 5l, 18l))).equals((Pair.with(8l, -1l, -13l))));\n    assert(substractElements((Pair.with(11l, 2l, 3l)), (Pair.with(24l, 45l, 16l))).equals((Pair.with(-13l, -43l, -13l))));\n    assert(substractElements((Pair.with(7l, 18l, 9l)), (Pair.with(10l, 11l, 12l))).equals((Pair.with(-3l, 7l, -3l))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new Pair object to store the result of the subtraction\n# Subtract the first element of test_tup2 from the first element of test_tup1 and store it in the first element of the result Pair\n# Subtract the second element of test_tup2 from the second element of test_tup1 and store it in the second element of the result Pair\n# Subtract the third element of test_tup2 from the third element of test_tup1 and store it in the third element of the result Pair\n# Return the result Pair"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Pair<Long, Long, Long> subtractElements(Pair<Long, Long, Long> test_tup1, Pair<Long, Long, Long> test_tup2) {\n        long first = test_tup1.getValue0() - test_tup2.getValue0();\n        long second = test_tup1.getValue1() - test_tup2.getValue1();\n        long third = test_tup1.getValue2() - test_tup2.getValue2();\n\n        return new Pair<>(first, second, third);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/748",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to put spaces between words starting with capital letters in a given string.\n    public static String capitalWordsSpaces(String str1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(capitalWordsSpaces((\"Python\")).equals((\"Python\")));\n    assert(capitalWordsSpaces((\"PythonProgrammingExamples\")).equals((\"Python Programming Examples\")));\n    assert(capitalWordsSpaces((\"GetReadyToBeCodingFreak\")).equals((\"Get Ready To Be Coding Freak\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize an empty string to store the modified string\n# Iterate through each character and its index in the input string\n    # Check if the current character is uppercase and not the first character of the string\n        # If true, append a space before the current character to separate it from the previous word\n    # Append the current character to the modified string\n# Return the modified string"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String capitalWordsSpaces(String str1) {\n        StringBuilder modifiedStr = new StringBuilder();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (Character.isUpperCase(c) && i > 0) {\n                modifiedStr.append(\" \");\n            }\n            modifiedStr.append(c);\n        }\n        return modifiedStr.toString();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/422",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the average of cubes of first n natural numbers.\n    public static float findAverageOfCube(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(findAverageOfCube((2l)) == (4.5f));\n    assert(findAverageOfCube((3l)) == (float)12l);\n    assert(findAverageOfCube((1l)) == (float)1l);\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `sum` to 0\n# Iterate from 1 to n\n    # Calculate the cube of the current number and add it to `sum`\n# Calculate the average by dividing `sum` by n\n# Return the average"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static float findAverageOfCube(long n) {\n        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            sum += i*i*i;\n        }\n        return (float) sum / n;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/464",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all values are same in a hash map.\n    public static boolean checkValue(HashMap<String,Long> dict, long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(checkValue((new HashMap<String,Long>(Map.of(\"Cierra Vega\", 12l, \"Alden Cantrell\", 12l, \"Kierra Gentry\", 12l, \"Pierre Cox\", 12l))), (10l)) == (false));\n    assert(checkValue((new HashMap<String,Long>(Map.of(\"Cierra Vega\", 12l, \"Alden Cantrell\", 12l, \"Kierra Gentry\", 12l, \"Pierre Cox\", 12l))), (12l)) == (true));\n    assert(checkValue((new HashMap<String,Long>(Map.of(\"Cierra Vega\", 12l, \"Alden Cantrell\", 12l, \"Kierra Gentry\", 12l, \"Pierre Cox\", 12l))), (5l)) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Iterate through each value in the hash map\n    # Check if the current value is equal to the given value `n`\n        # If any value is not equal to `n`, return false\n# If all values are equal to `n`, return true"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean checkValue(HashMap<String,Long> dict, long n) {\n        for (Long value : dict.values()) {\n            if (value != n) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/80",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the nth tetrahedral number.\n    public static long tetrahedralNumber(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(tetrahedralNumber((5l)) == (35l));\n    assert(tetrahedralNumber((6l)) == (56l));\n    assert(tetrahedralNumber((7l)) == (84l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# If the input number n is less than or equal to 0, return 0\n# Initialize a variable sum to store the sum of tetrahedral numbers\n# Iterate from 1 to n\n    # Calculate the tetrahedral number for the current iteration by using the formula (n * (n + 1) * (n + 2)) / 6\n    # Add the current tetrahedral number to the sum\n# Return the sum as the nth tetrahedral number"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long tetrahedralNumber(long n) {\n        if (n <= 0) {\n            return 0;\n        }\n\n        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            long tetrahedral = (i * (i + 1) * (i + 2)) / 6;\n            sum += tetrahedral;\n        }\n\n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/129",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to calculate whether the matrix is a magic square.\n    public static boolean magicSquareTest(ArrayList<ArrayList<Long>> my_matrix) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(magicSquareTest((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)12l, (long)1l, (long)14l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)8l, (long)11l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)16l, (long)3l, (long)10l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)6l, (long)15l, (long)4l)))))) == (true));\n    assert(magicSquareTest((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)8l)))))) == (true));\n    assert(magicSquareTest((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)7l)))))) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the matrix is square (i.e., the number of rows is equal to the number of columns)\n# Calculate the expected sum of each row, column, and diagonal by summing the elements in the first row\n# Iterate through each row and column in the matrix\n    # Calculate the sum of the current row and compare it to the expected sum\n        # If they are not equal, return false\n    # Calculate the sum of the current column and compare it to the expected sum\n        # If they are not equal, return false\n# Calculate the sum of the main diagonal and compare it to the expected sum\n    # If they are not equal, return false\n# Calculate the sum of the anti-diagonal and compare it to the expected sum\n    # If they are not equal, return false\n# If all checks pass, return true (the matrix is a magic square)"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean magicSquareTest(ArrayList<ArrayList<Long>> my_matrix) {\n        int size = my_matrix.size();\n\n        // Check if the matrix is square\n        if (size != my_matrix.get(0).size()) {\n            return false;\n        }\n\n        // Calculate the expected sum\n        long expectedSum = calculateExpectedSum(my_matrix.get(0));\n\n        // Iterate through rows\n        for (ArrayList<Long> row : my_matrix) {\n            long rowSum = calculateRowSum(row);\n            if (rowSum != expectedSum) {\n                return false;\n            }\n        }\n\n        // Iterate through columns\n        for (int col = 0; col < size; col++) {\n            long colSum = calculateColumnSum(my_matrix, col);\n            if (colSum != expectedSum) {\n                return false;\n            }\n        }\n\n        // Calculate the sum of the main diagonal\n        long mainDiagonalSum = calculateMainDiagonalSum(my_matrix);\n        if (mainDiagonalSum != expectedSum) {\n            return false;\n        }\n\n        // Calculate the sum of the anti-diagonal\n        long antiDiagonalSum = calculateAntiDiagonalSum(my_matrix);\n        if (antiDiagonalSum != expectedSum) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public static long calculateExpectedSum(ArrayList<Long> row) {\n        long sum = 0;\n        for (long num : row) {\n            sum += num;\n        }\n        return sum;\n    }\n\n    public static long calculateRowSum(ArrayList<Long> row) {\n        long sum = 0;\n        for (long num : row) {\n            sum += num;\n        }\n        return sum;\n    }\n\n    public static long calculateColumnSum(ArrayList<ArrayList<Long>> matrix, int col) {\n        long sum = 0;\n        for (ArrayList<Long> row : matrix) {\n            sum += row.get(col);\n        }\n        return sum;\n    }\n\n    public static long calculateMainDiagonalSum(ArrayList<ArrayList<Long>> matrix) {\n        long sum = 0;\n        for (int i = 0; i < matrix.size(); i++) {\n            sum += matrix.get(i).get(i);\n        }\n        return sum;\n    }\n\n    public static long calculateAntiDiagonalSum(ArrayList<ArrayList<Long>> matrix) {\n        long sum = 0;\n        int size = matrix.size();\n        for (int i = 0; i < size; i++) {\n            sum += matrix.get(i).get(size - 1 - i);\n        }\n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/459",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to remove uppercase substrings from a given string.\n    public static String removeUppercase(String str1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(removeUppercase((\"cAstyoUrFavoRitETVshoWs\")).equals((\"cstyoravoitshos\")));\n    assert(removeUppercase((\"wAtchTheinTernEtrAdIo\")).equals((\"wtchheinerntrdo\")));\n    assert(removeUppercase((\"VoicESeaRchAndreComMendaTionS\")).equals((\"oiceachndreomendaion\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input string is null or empty. If so, return an empty string.\n# Iterate through each character in the input string.\n    # Check if the character is uppercase. If so, remove it from the string.\n# Return the modified string."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String removeUppercase(String str1) {\n        if (str1 == null || str1.isEmpty()) {\n            return \"\";\n        }\n        StringBuilder sb = new StringBuilder(str1);\n        for (int i = 0; i < sb.length(); i++) {\n            if (Character.isUpperCase(sb.charAt(i))) {\n                sb.deleteCharAt(i);\n                i--;\n            }\n        }\n        return sb.toString();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/264",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to calculate a dog's age in dog's years.\n    public static long dogAge(long h_age) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(dogAge((12l)) == (61l));\n    assert(dogAge((15l)) == (73l));\n    assert(dogAge((24l)) == (109l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input human age is less than or equal to 2\n    # If true, multiply the human age by 10.5 to get the dog's age\n# If the input human age is greater than 2\n    # Multiply the dog's age for the first two years (which is 21) by 2\n    # Subtract 2 from the input human age and multiply it by 4\n    # Add the result to the multiplied dog's age for the first two years to get the total dog's age\n# Return the calculated dog's age"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long dogAge(long h_age) {\n        if (h_age <= 2) {\n            return h_age * 10.5;\n        } else {\n            return 21 + ((h_age - 2) * 4);\n        }\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/244",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the next perfect square greater than a given number.\n    public static long nextPerfectSquare(long N) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Calculate the square root of the given number\n# Round up the square root to the nearest integer\n# Calculate the next perfect square by squaring the rounded up square root\n# Return the next perfect square"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long nextPerfectSquare(long N) {\n        long sqrt = (long) Math.ceil(Math.sqrt(N));\n        return sqrt * sqrt;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/568",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to create an array array list of N empty dictionaries.\n    public static ArrayList<HashMap<Optional.empty(),Optional.empty()>> emptyList(long length) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(emptyList((5l)).equals(Optional.of(new ArrayList<HashMap<Long,Long>>(Arrays.asList((HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()))))));\n    assert(emptyList((6l)).equals(Optional.of(new ArrayList<HashMap<Long,Long>>(Arrays.asList((HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()))))));\n    assert(emptyList((7l)).equals(Optional.of(new ArrayList<HashMap<Long,Long>>(Arrays.asList((HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()))))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create an empty ArrayList to store the dictionaries\n# Iterate from 0 to N-1\n    # Create an empty HashMap\n    # Add the empty HashMap to the ArrayList\n# Return the ArrayList"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<HashMap<Object, Object>> emptyList(int length) {\n        ArrayList<HashMap<Object, Object>> list = new ArrayList<>();\n        for (int i = 0; i < length; i++) {\n            list.add(new HashMap<>());\n        }\n        return list;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/624",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to convert a given string to uppercase.\n    public static String isUpper(String string) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(isUpper((\"person\")).equals((\"PERSON\")));\n    assert(isUpper((\"final\")).equals((\"FINAL\")));\n    assert(isUpper((\"Valid\")).equals((\"VALID\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input string is null or empty\n# Use the `toUpperCase` method to convert the given string to uppercase\n# Return the modified string"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String isUpper(String string) {\n        if (string == null || string.isEmpty()) {\n            return null;\n        }\n        return string.toUpperCase();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/109",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    public static long oddEquivalent(String s, long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(oddEquivalent((\"011001\"), (6l)) == (3l));\n    assert(oddEquivalent((\"11011\"), (5l)) == (4l));\n    assert(oddEquivalent((\"1010\"), (4l)) == (2l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a counter variable to keep track of the number of numbers with an odd value\n# Iterate through each character in the binary string\n    # Check if the character is '1'\n        # If it is, increment the counter\n# Calculate the number of complete rotations by dividing the given number of rotations by the length of the binary string\n# Multiply the counter by the number of complete rotations\n# Add the remainder of the number of rotations divided by the length of the binary string to the counter if it is odd\n# Return the final value of the counter as the result"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long oddEquivalent(String s, long n) {\n        long counter = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '1') {\n                counter++;\n            }\n        }\n        long completeRotations = n / s.length();\n        counter *= completeRotations;\n        long remainingRotations = n % s.length();\n        if (remainingRotations > 0 && s.charAt((int)remainingRotations - 1) == '1') {\n            counter++;\n        }\n        return counter;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/229",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list and an integer n, and re-arranges the first n elements of the given array array list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static ArrayList<Long> reArrangeArray(ArrayList<Long> arr, long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(reArrangeArray((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-3l, (long)4l, (long)5l, (long)6l, (long)-7l, (long)8l, (long)9l))), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-3l, (long)-7l, (long)4l, (long)5l, (long)6l, (long)2l, (long)8l, (long)9l)))));\n    assert(reArrangeArray((new ArrayList<Long>(Arrays.asList((long)12l, (long)-14l, (long)-26l, (long)13l, (long)15l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)-14l, (long)-26l, (long)12l, (long)13l, (long)15l)))));\n    assert(reArrangeArray((new ArrayList<Long>(Arrays.asList((long)10l, (long)24l, (long)36l, (long)-42l, (long)-39l, (long)-78l, (long)85l))), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)-42l, (long)-39l, (long)-78l, (long)10l, (long)24l, (long)36l, (long)85l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create two new ArrayLists: one for negative elements and one for positive elements\n# Iterate through the input ArrayList up to index n\n    # If the current element is negative, add it to the negative ArrayList\n    # If the current element is positive, add it to the positive ArrayList\n# Combine the negative and positive ArrayLists into a new ArrayList\n# Return the new ArrayList"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> reArrangeArray(ArrayList<Long> arr, long n) {\n        ArrayList<Long> negative = new ArrayList<>();\n        ArrayList<Long> positive = new ArrayList<>();\n        \n        for (int i = 0; i < n; i++) {\n            long current = arr.get(i);\n            if (current < 0) {\n                negative.add(current);\n            } else {\n                positive.add(current);\n            }\n        }\n        \n        negative.addAll(positive);\n        \n        return negative;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/760",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to check whether an array array list of numbers contains only one distinct element or not.\n    public static boolean uniqueElement(ArrayList<Long> arr) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(uniqueElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l)))) == (true));\n    assert(uniqueElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)2l)))) == (false));\n    assert(uniqueElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input array list is null or empty\n# Get the first element from the array list and assign it as the \"distinct element\"\n# Iterate through each element in the array list starting from the second element\n    # Check if the current element is equal to the \"distinct element\"\n        # If not, return false\n# If all elements are equal to the \"distinct element\", return true"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean uniqueElement(ArrayList<Long> arr) {\n        if (arr == null || arr.isEmpty()) {\n            return false;\n        }\n        \n        Long distinctElement = arr.get(0);\n        \n        for (int i = 1; i < arr.size(); i++) {\n            if (!arr.get(i).equals(distinctElement)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/563",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to extract values between quotation marks from a string.\n    public static ArrayList<String> extractValues(String text) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(extractValues((\"\"Python\", \"PHP\", \"Java\"\")).equals((new ArrayList<String>(Arrays.asList((String)\"Python\", (String)\"PHP\", (String)\"Java\")))));\n    assert(extractValues((\"\"python\",\"program\",\"language\"\")).equals((new ArrayList<String>(Arrays.asList((String)\"python\", (String)\"program\", (String)\"language\")))));\n    assert(extractValues((\"\"red\",\"blue\",\"green\",\"yellow\"\")).equals((new ArrayList<String>(Arrays.asList((String)\"red\", (String)\"blue\", (String)\"green\", (String)\"yellow\")))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize an empty ArrayList to store the extracted values\n# Initialize two pointers, start and end, both initially set to -1\n# Iterate through each character and its index in the input string\n    # Check if the current character is a quotation mark\n        # If the start pointer is -1, set it to the current index\n        # If the start pointer is not -1, set the end pointer to the current index\n            # Extract the substring between the start and end pointers, excluding the quotation marks\n            # Add the extracted value to the ArrayList\n            # Reset the start and end pointers to -1\n# Return the ArrayList of extracted values"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<String> extractValues(String text) {\n        ArrayList<String> extractedValues = new ArrayList<>();\n        int start = -1;\n        int end = -1;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == '\"') {\n                if (start == -1) {\n                    start = i;\n                } else {\n                    end = i;\n                    String extractedValue = text.substring(start + 1, end);\n                    extractedValues.add(extractedValue);\n                    start = -1;\n                    end = -1;\n                }\n            }\n        }\n        return extractedValues;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/105",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count true booleans in the given array list.\n    public static long count(ArrayList<Boolean> lst) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(count((new ArrayList<Boolean>(Arrays.asList((boolean)true, (boolean)false, (boolean)true)))) == (2l));\n    assert(count((new ArrayList<Boolean>(Arrays.asList((boolean)false, (boolean)false)))) == (0l));\n    assert(count((new ArrayList<Boolean>(Arrays.asList((boolean)true, (boolean)true, (boolean)true)))) == (3l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `count` to 0\n# Iterate through each element in the input ArrayList\n    # Check if the current element is `true`\n        # If it is, increment the `count` variable by 1\n# Return the `count` variable as the result"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long count(ArrayList<Boolean> lst) {\n        long count = 0;\n        for (Boolean bool : lst) {\n            if (bool) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/166",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that counts the number of pairs of integers in an array array list that xor to an even number.\n    public static long findEvenPair(ArrayList<Long> A) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(findEvenPair((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)7l, (long)2l, (long)1l)))) == (4l));\n    assert(findEvenPair((new ArrayList<Long>(Arrays.asList((long)7l, (long)2l, (long)8l, (long)1l, (long)0l, (long)5l, (long)11l)))) == (9l));\n    assert(findEvenPair((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (1l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a counter variable to keep track of the number of even pairs\n# Iterate through each element in the input ArrayList\n    # Iterate through the remaining elements in the ArrayList\n        # Check if the XOR of the current element and the current iteration element is even\n            # If it is even, increment the counter variable\n# Return the counter variable as the result"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long findEvenPair(ArrayList<Long> A) {\n        long count = 0;\n        for (int i = 0; i < A.size() - 1; i++) {\n            for (int j = i + 1; j < A.size(); j++) {\n                if ((A.get(i) ^ A.get(j)) % 2 == 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/598",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    public static boolean armstrongNumber(long number) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Convert the given number to a string\n# Get the length of the string\n# Initialize a variable `sum` to 0\n# Iterate through each digit in the string\n    # Convert the current digit to an integer\n    # Raise the current digit to the power of the length of the string\n    # Add the result to the `sum`\n# Check if the `sum` is equal to the given number\n    # If it is, return `true`\n    # Otherwise, return `false`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean armstrongNumber(long number) {\n        String numStr = String.valueOf(number);\n        int length = numStr.length();\n        long sum = 0;\n\n        for (int i = 0; i < length; i++) {\n            int digit = Character.getNumericValue(numStr.charAt(i));\n            sum += Math.pow(digit, length);\n        }\n\n        return sum == number;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/461",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the upper case characters in a given string.\n    public static long upperCtr(String str) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(upperCtr((\"PYthon\")) == (1l));\n    assert(upperCtr((\"BigData\")) == (1l));\n    assert(upperCtr((\"program\")) == (0l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a counter variable to keep track of the number of uppercase characters\n# Iterate through each character in the input string\n    # Check if the current character is an uppercase character\n        # If it is, increment the counter\n# Return the value of the counter as the result"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long upperCtr(String str) {\n        long counter = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (Character.isUpperCase(str.charAt(i))) {\n                counter++;\n            }\n        }\n        return counter;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/429",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to extract the elementwise and pairs from the given two pairs.\n    public static Pair<Long, Long, Long, Long> andTuples(Pair<Long, Long, Long, Long> test_tup1, Pair<Long, Long, Long, Long> test_tup2) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(andTuples((Pair.with(10l, 4l, 6l, 9l)), (Pair.with(5l, 2l, 3l, 3l))).equals((Pair.with(0l, 0l, 2l, 1l))));\n    assert(andTuples((Pair.with(1l, 2l, 3l, 4l)), (Pair.with(5l, 6l, 7l, 8l))).equals((Pair.with(1l, 2l, 3l, 0l))));\n    assert(andTuples((Pair.with(8l, 9l, 11l, 12l)), (Pair.with(7l, 13l, 14l, 17l))).equals((Pair.with(0l, 9l, 10l, 0l))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new Pair object to store the elementwise AND of the corresponding elements from the two input pairs\n    # Calculate the elementwise AND of the first elements of the input pairs\n    # Calculate the elementwise AND of the second elements of the input pairs\n    # Calculate the elementwise AND of the third elements of the input pairs\n    # Calculate the elementwise AND of the fourth elements of the input pairs\n# Return the new Pair object with the elementwise AND values"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Pair<Long, Long, Long, Long> andTuples(Pair<Long, Long, Long, Long> test_tup1, Pair<Long, Long, Long, Long> test_tup2) {\n        long and1 = test_tup1.getValue0() & test_tup2.getValue0();\n        long and2 = test_tup1.getValue1() & test_tup2.getValue1();\n        long and3 = test_tup1.getValue2() & test_tup2.getValue2();\n        long and4 = test_tup1.getValue3() & test_tup2.getValue3();\n        return new Pair<>(and1, and2, and3, and4);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/74",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check whether it follows the sequence given in the patterns array array list.\n    public static boolean isSamepatterns(ArrayList<String> colors, ArrayList<String> patterns) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(isSamepatterns((new ArrayList<String>(Arrays.asList((String)\"red\", (String)\"green\", (String)\"green\"))), (new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"b\")))) == (true));\n    assert(isSamepatterns((new ArrayList<String>(Arrays.asList((String)\"red\", (String)\"green\", (String)\"greenn\"))), (new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"b\")))) == (false));\n    assert(isSamepatterns((new ArrayList<String>(Arrays.asList((String)\"red\", (String)\"green\", (String)\"greenn\"))), (new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\")))) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the sizes of `colors` and `patterns` are equal. If not, return false.\n# Iterate through each color and pattern in `colors` and `patterns` respectively, using a for loop.\n    # Check if the length of the current color is equal to the length of the current pattern.\n        # If not, return false.\n    # Check if the characters in the current color match the pattern at the corresponding indices.\n        # If not, return false.\n# If all colors and patterns have been checked and no mismatches were found, return true."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean isSamepatterns(ArrayList<String> colors, ArrayList<String> patterns) {\n        if (colors.size() != patterns.size()) {\n            return false;\n        }\n        for (int i = 0; i < colors.size(); i++) {\n            String color = colors.get(i);\n            String pattern = patterns.get(i);\n            if (color.length() != pattern.length()) {\n                return false;\n            }\n            for (int j = 0; j < color.length(); j++) {\n                if (color.charAt(j) != pattern.charAt(j)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/792",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of array lists in a given number of array lists.\n    public static long countList(ArrayList<ArrayList<Long>> input_list) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(countList((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)11l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)13l, (long)15l, (long)17l)))))) == (4l));\n    assert(countList((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l)))))) == (3l));\n    assert(countList((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)0l)))))) == (2l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a counter variable to 0\n# Iterate through each element in the input_list\n    # Check if the current element is an instance of ArrayList\n        # If it is, increment the counter by 1\n# Return the final value of the counter as the count of array lists in the input_list"
        ],
        "code": [
            "import java.util.*;\n\nclass Problem {\n    public static long countList(ArrayList<ArrayList<Long>> input_list) {\n        long count = 0;\n        for (ArrayList<Long> list : input_list) {\n            if (list instanceof ArrayList) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/615",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which takes an array array lists of array lists and returns the average value for each subarray list as an array array list.\n    public static ArrayList<Float> averageTuple(ArrayList<ArrayList<Long>> nums) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(averageTuple((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)10l, (long)10l, (long)12l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)30l, (long)45l, (long)56l, (long)45l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)81l, (long)80l, (long)39l, (long)32l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))))).equals((new ArrayList<Float>(Arrays.asList((float)30.5f, (float)34.25f, (float)27.0f, (float)23.25f)))));\n    assert(averageTuple((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)-5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)30l, (long)-15l, (long)56l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)81l, (long)-60l, (long)-39l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)-10l, (long)2l, (long)3l)))))).equals((new ArrayList<Float>(Arrays.asList((float)25.5f, (float)-18.0f, (float)3.75f)))));\n    assert(averageTuple((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)100l, (long)100l, (long)100l, (long)120l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)300l, (long)450l, (long)560l, (long)450l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)810l, (long)800l, (long)390l, (long)320l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)30l, (long)40l)))))).equals((new ArrayList<Float>(Arrays.asList((float)305.0f, (float)342.5f, (float)270.0f, (float)232.5f)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create an empty array list to store the average values of each subarray list\n# Iterate through each subarray list in the input array list\n    # Calculate the sum of all numbers in the current subarray list\n    # Calculate the average by dividing the sum by the size of the subarray list\n    # Add the average to the output array list\n# Return the output array list"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Float> averageTuple(ArrayList<ArrayList<Long>> nums) {\n        ArrayList<Float> averages = new ArrayList<>();\n        for (ArrayList<Long> subList : nums) {\n            float sum = 0;\n            for (Long num : subList) {\n                sum += num;\n            }\n            float average = sum / subList.size();\n            averages.add(average);\n        }\n        return averages;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/747",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a 3D array to store the lengths of the longest common subsequences for the three input strings\n# Iterate through each character of the three input strings\n    # Check if the characters match\n        # If they do, increment the value of the current cell in the 3D array by 1 plus the value of the cell diagonally above and behind it\n    # Otherwise, take the maximum value of the cells directly above, behind, and above-behind the current cell and store it in the current cell\n# Return the value stored in the last cell of the 3D array as the length of the longest common subsequence for the three input strings."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static int lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n\n        int[][][] dp = new int[m + 1][n + 1][o + 1];\n\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i - 1][j][k], Math.max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n\n        return dp[m][n][o];\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/268",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n'th star number.\n    public static long findStarNum(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(findStarNum((3l)) == (37l));\n    assert(findStarNum((4l)) == (73l));\n    assert(findStarNum((5l)) == (121l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input number is less than or equal to 0\n    # If true, return -1 to indicate an invalid input\n# Initialize a variable `count` to 0 to keep track of the number of star numbers found\n# Initialize a variable `currentNum` to 1 to store the current number being checked\n# Iterate while `count` is less than `n`\n    # Check if `currentNum` is a star number\n        # If true, increment `count` by 1\n    # Increment `currentNum` by 1\n# Return the last `currentNum` checked, which is the `n`-th star number found"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long findStarNum(long n) {\n        if (n <= 0) {\n            return -1;\n        }\n        \n        long count = 0;\n        long currentNum = 1;\n        \n        while (count < n) {\n            if (isStarNum(currentNum)) {\n                count++;\n            }\n            currentNum++;\n        }\n        \n        return currentNum - 1;\n    }\n    \n    public static boolean isStarNum(long num) {\n        long sum = 0;\n        \n        while (num > 0) {\n            long digit = num % 10;\n            sum += digit * digit * digit;\n            num /= 10;\n        }\n        \n        return sum ==  num;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/798",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the sum of an array array list.\n    public static long Sum(ArrayList<Long> arr) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(Sum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (6l));\n    assert(Sum((new ArrayList<Long>(Arrays.asList((long)15l, (long)12l, (long)13l, (long)10l)))) == (50l));\n    assert(Sum((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l)))) == (3l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `sum` to 0\n# Iterate through each element in the array list\n    # Add the current element to the `sum` variable\n# Return the `sum` variable as the sum of the array list"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long Sum(ArrayList<Long> arr) {\n        long sum = 0;\n        for (long num : arr) {\n            sum += num;\n        }\n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/472",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to check whether the given array list contains consecutive numbers or not.\n    public static boolean checkConsecutive(ArrayList<Long> l) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(checkConsecutive((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    assert(checkConsecutive((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)6l)))) == (false));\n    assert(checkConsecutive((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l)))) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Sort the given array list in ascending order\n# Iterate through each element in the sorted array list, starting from the second element\n    # Check if the current element is not equal to the previous element plus 1\n        # If not, return false\n# If all elements are consecutive, return true"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean checkConsecutive(ArrayList<Long> l) {\n        if (l == null || l.size() < 2) {\n            return false;\n        }\n        Collections.sort(l);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) != l.get(i-1) + 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/440",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    public static Pair<Long, Long, String> findAdverbPosition(String text) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((Pair.with(0l, 7l, \"clearly\"))));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((Pair.with(0l, 9l, \"seriously\"))));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((Pair.with(0l, 13l, \"unfortunately\"))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Split the input sentence into words using whitespace as a delimiter\n# Iterate through each word and its index in the list of words\n    # Check if the current word ends with 'ly'\n        # If the word is an adverb, return a tuple containing the start and end positions of the adverb in the sentence, along with the adverb itself\n# If no adverb is found, return a tuple with all values set to -1 and an empty string"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Pair<Long, Long, String> findAdverbPosition(String text) {\n        String[] words = text.split(\"\\\\s+\");\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].endsWith(\"ly\")) {\n                return Pair.with((long)i, (long)i+1, words[i]);\n            }\n        }\n        return Pair.with(-1L, -1L, \"\");\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/743",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to rotate a given array list by specified number of items to the right direction. https://www.geeksforgeeks.org/javathon-program-right-rotate-array list-n/\n    public static ArrayList<Long> rotateRight(ArrayList<Long> list, long m) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(rotateRight((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)10l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))));\n    assert(rotateRight((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))));\n    assert(rotateRight((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new ArrayList to store the rotated elements\n# Calculate the effective rotation index based on the size of the list and the specified rotation amount\n# Iterate through each element in the original list starting from the calculated rotation index\n    # Add the element to the new ArrayList\n# Iterate through each element in the original list from index 0 to the calculated rotation index\n    # Add the element to the new ArrayList\n# Return the new ArrayList with the rotated elements"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> rotateRight(ArrayList<Long> list, long m) {\n        ArrayList<Long> rotatedList = new ArrayList<>();\n\n        int rotationIndex = (int) (m % list.size());\n\n        for (int i = rotationIndex; i < list.size(); i++) {\n            rotatedList.add(list.get(i));\n        }\n\n        for (int i = 0; i < rotationIndex; i++) {\n            rotatedList.add(list.get(i));\n        }\n\n        return rotatedList;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/238",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of non-empty substrings of a given string.\n    public static long numberOfSubstrings(String str) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(numberOfSubstrings((\"abc\")) == (6l));\n    assert(numberOfSubstrings((\"abcd\")) == (10l));\n    assert(numberOfSubstrings((\"abcde\")) == (15l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a counter variable to keep track of the number of non-empty substrings\n# Iterate through each character and its index in the input string\n    # Iterate through each substring starting from the current character to the end of the string\n        # Increment the counter variable for each non-empty substring\n# Return the counter variable as the result"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long numberOfSubstrings(String str) {\n        long count = 0;\n        for (int i = 0; i < str.length(); i++) {\n            for (int j = i; j < str.length(); j++) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/265",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list and an integer n and splits an array array list for every nth element, returning an array array list of the resulting array lists.\n    public static ArrayList<ArrayList<Object>> listSplit(ArrayList<Object> S, long step) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(listSplit((new ArrayList<Object>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\", (String)\"d\", (String)\"e\", (String)\"f\", (String)\"g\", (String)\"h\", (String)\"i\", (String)\"j\", (String)\"k\", (String)\"l\", (String)\"m\", (String)\"n\"))), (3l)).equals((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"d\", (String)\"g\", (String)\"j\", (String)\"m\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"e\", (String)\"h\", (String)\"k\", (String)\"n\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"c\", (String)\"f\", (String)\"i\", (String)\"l\")))))));\n    assert(listSplit((new ArrayList<Object>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l, (long)12l, (long)13l, (long)14l))), (3l)).equals((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)7l, (long)10l, (long)13l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)8l, (long)11l, (long)14l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)9l, (long)12l)))))));\n    assert(listSplit((new ArrayList<Object>(Arrays.asList((String)\"python\", (String)\"java\", (String)\"C\", (String)\"C++\", (String)\"DBMS\", (String)\"SQL\"))), (2l)).equals((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"python\", (String)\"C\", (String)\"DBMS\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"java\", (String)\"C++\", (String)\"SQL\")))))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create an empty ArrayList to store the resulting ArrayLists.\n# Iterate through the input ArrayList in chunks of size n.\n    # Create a new ArrayList and add the current chunk of elements to it.\n    # Add the new ArrayList to the resulting ArrayList of ArrayLists.\n# Return the resulting ArrayList of ArrayLists."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<ArrayList<Object>> listSplit(ArrayList<Object> S, long step) {\n        ArrayList<ArrayList<Object>> result = new ArrayList<>();\n        \n        for (int i = 0; i < S.size(); i += step) {\n            ArrayList<Object> sublist = new ArrayList<>();\n            \n            for (int j = i; j < Math.min(i + step, S.size()); j++) {\n                sublist.add(S.get(j));\n            }\n            \n            result.add(sublist);\n        }\n        \n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/281",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to check if the elements of a given array list are unique or not.\n    public static boolean allUnique(ArrayList<Long> test_list) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(allUnique((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (true));\n    assert(allUnique((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)2l)))) == (false));\n    assert(allUnique((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a HashSet to store unique elements from the input ArrayList\n# Iterate through each element in the input ArrayList\n    # Check if the current element is already present in the HashSet\n        # If it is present, return false as the elements are not unique\n        # If it is not present, add the element to the HashSet\n# If the loop completes without returning false, return true as all elements are unique"
        ],
        "code": [
            "import java.util.*;\n\nclass Problem {\n    public static boolean allUnique(ArrayList<Long> test_list) {\n        HashSet<Long> uniqueElements = new HashSet<>();\n\n        for (Long element : test_list) {\n            if (uniqueElements.contains(element)) {\n                return false;\n            }\n            uniqueElements.add(element);\n        }\n\n        return true;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/252",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to convert complex numbers to polar coordinates.\n    public static Pair<Float, Float> convert(long numbers) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(convert((1l)).equals((Pair.with(1.0f, 0.0f))));\n    assert(convert((4l)).equals((Pair.with(4.0f, 0.0f))));\n    assert(convert((5l)).equals((Pair.with(5.0f, 0.0f))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Extract the real and imaginary parts from the input complex number\n# Calculate the magnitude using the formula: sqrt(real^2 + imaginary^2)\n# Calculate the phase angle using the formula: atan2(imaginary, real)\n# Return a Pair object containing the magnitude and phase angle"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Pair<Float, Float> convert(long number) {\n        float real = (float) (number >> 32);\n        float imaginary = (float) (number & 0xFFFFFFFFL);\n        \n        float magnitude = (float) Math.sqrt(real * real + imaginary * imaginary);\n        float phase = (float) Math.atan2(imaginary, real);\n        \n        return new Pair<>(magnitude, phase);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/722",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // The input is given as - a hash map with a student name as a key and a pair of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    public static HashMap<String,Pair<Float, Long>> filterData(HashMap<String,Pair<Float, Long>> students, float h, long w) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(filterData((new HashMap<String,Pair<Float, Long>>(Map.of(\"Cierra Vega\", Pair.with(6.2f, 70l), \"Alden Cantrell\", Pair.with(5.9f, 65l), \"Kierra Gentry\", Pair.with(6.0f, 68l), \"Pierre Cox\", Pair.with(5.8f, 66l)))), (6.0f), (70l)).equals((new HashMap<String,Pair<Float, Long>>(Map.of(\"Cierra Vega\", Pair.with(6.2f, 70l))))));\n    assert(filterData((new HashMap<String,Pair<Float, Long>>(Map.of(\"Cierra Vega\", Pair.with(6.2f, 70l), \"Alden Cantrell\", Pair.with(5.9f, 65l), \"Kierra Gentry\", Pair.with(6.0f, 68l), \"Pierre Cox\", Pair.with(5.8f, 66l)))), (5.9f), (67l)).equals((new HashMap<String,Pair<Float, Long>>(Map.of(\"Cierra Vega\", Pair.with(6.2f, 70l), \"Kierra Gentry\", Pair.with(6.0f, 68l))))));\n    assert(filterData((new HashMap<String,Pair<Float, Long>>(Map.of(\"Cierra Vega\", Pair.with(6.2f, 70l), \"Alden Cantrell\", Pair.with(5.9f, 65l), \"Kierra Gentry\", Pair.with(6.0f, 68l), \"Pierre Cox\", Pair.with(5.8f, 66l)))), (5.7f), (64l)).equals((new HashMap<String,Pair<Float, Long>>(Map.of(\"Cierra Vega\", Pair.with(6.2f, 70l), \"Alden Cantrell\", Pair.with(5.9f, 65l), \"Kierra Gentry\", Pair.with(6.0f, 68l), \"Pierre Cox\", Pair.with(5.8f, 66l))))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new HashMap to store the filtered students\n# Iterate through each student in the input HashMap\n    # Get the height and weight of the current student\n    # Check if the height and weight are above the minimum values\n        # If yes, add the student to the new HashMap\n# Return the new HashMap with the filtered students"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static HashMap<String, Pair<Float, Long>> filterData(HashMap<String, Pair<Float, Long>> students, float h, long w) {\n        HashMap<String, Pair<Float, Long>> filteredStudents = new HashMap<>();\n\n        for (Map.Entry<String, Pair<Float, Long>> entry : students.entrySet()) {\n            String studentName = entry.getKey();\n            Pair<Float, Long> studentData = entry.getValue();\n\n            float studentHeight = studentData.getValue0();\n            long studentWeight = studentData.getValue1();\n\n            if (studentHeight > h && studentWeight > w) {\n                filteredStudents.put(studentName, studentData);\n            }\n        }\n\n        return filteredStudents;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/477",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to convert the given string to lower case.\n    public static String isLower(String string) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(isLower((\"InValid\")).equals((\"invalid\")));\n    assert(isLower((\"TruE\")).equals((\"true\")));\n    assert(isLower((\"SenTenCE\")).equals((\"sentence\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input string is null\n# Use the `toLowerCase` method to convert the given string to lower case\n# Return the modified string"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String toLowerCase(String string) {\n        if (string == null) {\n            return null;\n        }\n        return string.toLowerCase();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/167",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the smallest power of 2 greater than or equal to n.\n    public static long nextPowerOf2(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(nextPowerOf2((0l)) == (1l));\n    assert(nextPowerOf2((5l)) == (8l));\n    assert(nextPowerOf2((17l)) == (32l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `power` to 1\n# While `power` is less than `n`, multiply `power` by 2\n# Return `power` as the smallest power of 2 greater than or equal to `n`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long nextPowerOf2(long n) {\n        long power = 1;\n        while (power < n) {\n            power *= 2;\n        }\n        return power;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/91",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if a string is present as a substring in a given array list of string values.\n    public static boolean findSubstring(ArrayList<String> str1, String sub_str) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(findSubstring((new ArrayList<String>(Arrays.asList((String)\"red\", (String)\"black\", (String)\"white\", (String)\"green\", (String)\"orange\"))), (\"ack\")) == (true));\n    assert(findSubstring((new ArrayList<String>(Arrays.asList((String)\"red\", (String)\"black\", (String)\"white\", (String)\"green\", (String)\"orange\"))), (\"abc\")) == (false));\n    assert(findSubstring((new ArrayList<String>(Arrays.asList((String)\"red\", (String)\"black\", (String)\"white\", (String)\"green\", (String)\"orange\"))), (\"ange\")) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Iterate through each string in the input array list\n    # Check if the current string contains the given sub_str using the `contains` method\n        # If the sub_str is found in any string, return true\n# If the sub_str is not found in any string, return false"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean findSubstring(ArrayList<String> str1, String sub_str) {\n        for (String str : str1) {\n            if (str.contains(sub_str)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/474",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to replace characters in a string.\n    public static String replaceChar(String str1, String ch, String newch) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(replaceChar((\"polygon\"), (\"y\"), (\"l\")).equals((\"pollgon\")));\n    assert(replaceChar((\"character\"), (\"c\"), (\"a\")).equals((\"aharaater\")));\n    assert(replaceChar((\"python\"), (\"l\"), (\"a\")).equals((\"python\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input string is null or empty. If it is, return the input string.\n# Use the `replace` method to replace all occurrences of the given character (`ch`) with the new character (`newch`) in the input string.\n# Return the modified string."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String replaceChar(String str1, String ch, String newch) {\n        if (str1 == null || str1.isEmpty()) {\n            return str1;\n        }\n        return str1.replace(ch, newch);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/784",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the product of first even and odd number of a given array list.\n    public static long mulEvenOdd(ArrayList<Long> list1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(mulEvenOdd((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)7l, (long)4l, (long)1l, (long)6l, (long)8l)))) == (4l));\n    assert(mulEvenOdd((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l)))) == (2l));\n    assert(mulEvenOdd((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)7l, (long)9l, (long)10l)))) == (10l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize two variables to keep track of the first even and odd number in the list\n# Iterate through each number in the list\n    # Check if the current number is even and the first even number is not set\n        # If true, set the first even number to the current number\n    # Check if the current number is odd and the first odd number is not set\n        # If true, set the first odd number to the current number\n    # Break the loop if both the first even and odd numbers are found\n# Check if both the first even and odd numbers are found\n    # If true, return the product of the first even and odd numbers\n# If either the first even or odd number is not found, return 0"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long mulEvenOdd(ArrayList<Long> list1) {\n        long firstEven = 0;\n        long firstOdd = 0;\n\n        for (long num : list1) {\n            if (num % 2 == 0 && firstEven == 0) {\n                firstEven = num;\n            }\n            if (num % 2 != 0 && firstOdd == 0) {\n                firstOdd = num;\n            }\n            if (firstEven != 0 && firstOdd != 0) {\n                break;\n            }\n        }\n\n        if (firstEven != 0 && firstOdd != 0) {\n            return firstEven * firstOdd;\n        } else {\n            return 0;\n        }\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/587",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert an array array list to a pair.\n    public static Object listTuple(ArrayList<Long> listx) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(listTuple((new ArrayList<Long>(Arrays.asList((long)5l, (long)10l, (long)7l, (long)4l, (long)15l, (long)3l)))).equals(Pair.with(5l, 10l, 7l, 4l, 15l, 3l)));\n    assert(listTuple((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)5l, (long)6l, (long)2l, (long)3l, (long)4l, (long)4l, (long)7l)))).equals(Pair.with(2l, 4l, 5l, 6l, 2l, 3l, 4l, 4l, 7l)));\n    assert(listTuple((new ArrayList<Long>(Arrays.asList((long)58l, (long)44l, (long)56l)))).equals(Pair.with(58l, 44l, 56l)));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input list is null or empty\n# Get the first element from the input list\n# Create a Pair object with the first element as the first value and the second element as null\n# Return the Pair object"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Object listTuple(ArrayList<Long> listx) {\n        if (listx == null || listx.isEmpty()) {\n            return null;\n        }\n        Long firstElement = listx.get(0);\n        Pair<Long, Long> pair = new Pair<>(firstElement, null);\n        return pair;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/274",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    public static long evenBinomialCoeffSum(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(evenBinomialCoeffSum((4l)) == (8l));\n    assert(evenBinomialCoeffSum((6l)) == (32l));\n    assert(evenBinomialCoeffSum((2l)) == (2l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `sum` to store the sum of even index binomial coefficients\n# Iterate `i` from 0 to `n` with a step of 2\n    # Calculate the binomial coefficient for `n` and `i` using the `BigInteger` class\n    # Add the calculated binomial coefficient to the `sum`\n# Return the value of `sum`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long evenBinomialCoeffSum(long n) {\n        long sum = 0;\n        for (long i = 0; i <= n; i += 2) {\n            sum += binomialCoeff(n, i);\n        }\n        return sum;\n    }\n\n    public static long binomialCoeff(long n, long k) {\n        if (k == 0 || k == n) {\n            return 1;\n        }\n        return binomialCoeff(n - 1, k - 1) + binomialCoeff(n - 1, k);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/399",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given pairs.\n    public static Pair<Long, Long, Long, Long> bitwiseXor(Pair<Long, Long, Long, Long> test_tup1, Pair<Long, Long, Long, Long> test_tup2) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(bitwiseXor((Pair.with(10l, 4l, 6l, 9l)), (Pair.with(5l, 2l, 3l, 3l))).equals((Pair.with(15l, 6l, 5l, 10l))));\n    assert(bitwiseXor((Pair.with(11l, 5l, 7l, 10l)), (Pair.with(6l, 3l, 4l, 4l))).equals((Pair.with(13l, 6l, 3l, 14l))));\n    assert(bitwiseXor((Pair.with(12l, 6l, 8l, 11l)), (Pair.with(7l, 4l, 5l, 6l))).equals((Pair.with(11l, 2l, 13l, 13l))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Extract the individual elements from the given pairs.\n# Perform the bitwise XOR operation on each corresponding element from the two pairs.\n# Create a new pair with the resulting XOR values.\n# Return the new pair."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Pair<Long, Long, Long, Long> bitwiseXor(Pair<Long, Long, Long, Long> test_tup1, Pair<Long, Long, Long, Long> test_tup2) {\n        long a = test_tup1.getValue0() ^ test_tup2.getValue0();\n        long b = test_tup1.getValue1() ^ test_tup2.getValue1();\n        long c = test_tup1.getValue2() ^ test_tup2.getValue2();\n        long d = test_tup1.getValue3() ^ test_tup2.getValue3();\n        \n        return new Pair<>(a, b, c, d);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/576",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to check whether an array array list is subarray list of another or not.\n    public static boolean isSubArray(ArrayList<Long> A, ArrayList<Long> B) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(isSubArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)3l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))) == (false));\n    assert(isSubArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l)))) == (true));\n    assert(isSubArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)2l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)0l)))) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if either of the input ArrayLists is null or empty\n# Iterate through each element in ArrayList B\n    # If the current element is equal to the first element in ArrayList A\n        # Create a new sublist from ArrayList B starting from the current index\n        # Check if the sublist is equal to ArrayList A\n            # If it is, return true\n# If no subarray is found, return false"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean isSubArray(ArrayList<Long> A, ArrayList<Long> B) {\n        if (A == null || B == null || A.isEmpty() || B.isEmpty()) {\n            return false;\n        }\n        \n        for (int i = 0; i <= B.size() - A.size(); i++) {\n            if (B.get(i).equals(A.get(0))) {\n                List<Long> subList = B.subList(i, i + A.size());\n                if (subList.equals(A)) {\n                    return true;\n                }\n            }\n        }\n        \n        return false;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/286",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the largest sum of a contiguous array array list in the modified array array list which is formed by repeating the given array array list k times.\n    public static long maxSubArraySumRepeated(ArrayList<Long> a, long n, long k) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(maxSubArraySumRepeated((new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)-30l, (long)-1l))), (4l), (3l)) == (30l));\n    assert(maxSubArraySumRepeated((new ArrayList<Long>(Arrays.asList((long)-1l, (long)10l, (long)20l))), (3l), (2l)) == (59l));\n    assert(maxSubArraySumRepeated((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))), (3l), (3l)) == (-1l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize variables `maxSum` and `currSum` as 0\n# Iterate `i` from 0 to `k`\n    # Iterate `j` from 0 to `n`\n        # Update `currSum` as the maximum between `a[j]` and `currSum + a[j]`\n        # Update `maxSum` as the maximum between `maxSum` and `currSum`\n# Return `maxSum`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long maxSubArraySumRepeated(ArrayList<Long> a, long n, long k) {\n        long maxSum = 0;\n        long currSum = 0;\n        \n        for (int i = 0; i < k; i++) {\n            for (int j = 0; j < n; j++) {\n                currSum = Math.max(a.get(j), currSum + a.get(j));\n                maxSum = Math.max(maxSum, currSum);\n            }\n        }\n        \n        return maxSum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/409",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the minimum product from the pairs of pairs within a given array list.\n    public static long minProductTuple(ArrayList<Pair<Long, Long>> list1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(minProductTuple((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(2l, 7l), (Pair<Long, Long>)Pair.with(2l, 6l), (Pair<Long, Long>)Pair.with(1l, 8l), (Pair<Long, Long>)Pair.with(4l, 9l))))) == (8l));\n    assert(minProductTuple((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(10l, 20l), (Pair<Long, Long>)Pair.with(15l, 2l), (Pair<Long, Long>)Pair.with(5l, 10l))))) == (30l));\n    assert(minProductTuple((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(11l, 44l), (Pair<Long, Long>)Pair.with(10l, 15l), (Pair<Long, Long>)Pair.with(20l, 5l), (Pair<Long, Long>)Pair.with(12l, 9l))))) == (100l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `minProduct` with a very large value\n# Iterate through each pair in the input list\n    # Calculate the product of the first and second element of the current pair\n    # If the calculated product is less than `minProduct`, update `minProduct` with the new value\n# Return `minProduct` after iterating through all pairs"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long minProductTuple(ArrayList<Pair<Long, Long>> list1) {\n        long minProduct = Long.MAX_VALUE;\n        for (Pair<Long, Long> pair : list1) {\n            long product = pair.getValue0() * pair.getValue1();\n            if (product < minProduct) {\n                minProduct = product;\n            }\n        }\n        return minProduct;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/781",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to check whether the count of divisors is even. https://www.w3resource.com/javathon-exercises/basic/javathon-basic-1-exercise-24.php\n    public static boolean countDivisors(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(countDivisors((10l)) == (true));\n    assert(countDivisors((100l)) == (false));\n    assert(countDivisors((125l)) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `count` to 0 to keep track of the number of divisors\n# Iterate from 1 to the square root of `n` (inclusive)\n    # Check if `n` is divisible by the current number\n        # If it is divisible, increment `count` by 2 since there will be two divisors (the current number and `n` divided by the current number)\n# Check if the square root of `n` is an integer\n    # If it is, increment `count` by 1 since the square root will be a divisor of `n`\n# Check if `count` is even\n    # If it is, return `true`\n    # Otherwise, return `false`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean countDivisors(long n) {\n        int count = 0;\n        for (int i = 1; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                count += 2;\n            }\n        }\n        if (Math.sqrt(n) % 1 == 0) {\n            count++;\n        }\n        return count % 2 == 0;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/626",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    public static Optional<Long> triangleArea(long r) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(triangleArea((-1l)).equals(Optional.empty()));\n    assert(triangleArea((0l)).equals(Optional.of(0l)));\n    assert(triangleArea((2l)).equals(Optional.of(4l)));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Calculate the area of a triangle inscribed in a semicircle using the formula A = (r^2)/2, where r is the radius\n# Return the area as an Optional<Long> to handle the case where the radius is negative or zero"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Optional<Long> triangleArea(long r) {\n        if (r <= 0) {\n            return Optional.empty();\n        }\n        long area = (r * r) / 2;\n        return Optional.of(area);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/310",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert a given string to an array array list of characters.\n    public static ArrayList<String> stringToTuple(String str1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(stringToTuple((\"python 3.0\")).equals((new ArrayList<String>(Arrays.asList((String)\"p\", (String)\"y\", (String)\"t\", (String)\"h\", (String)\"o\", (String)\"n\", (String)\"3\", (String)\".\", (String)\"0\")))));\n    assert(stringToTuple((\"item1\")).equals((new ArrayList<String>(Arrays.asList((String)\"i\", (String)\"t\", (String)\"e\", (String)\"m\", (String)\"1\")))));\n    assert(stringToTuple((\"15.10\")).equals((new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"5\", (String)\".\", (String)\"1\", (String)\"0\")))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create an empty ArrayList to store the characters\n# Iterate through each character in the input string\n    # Convert the character to a string and add it to the ArrayList\n# Return the ArrayList"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<String> stringToTuple(String str1) {\n        ArrayList<String> charList = new ArrayList<>();\n        for (int i = 0; i < str1.length(); i++) {\n            charList.add(String.valueOf(str1.charAt(i)));\n        }\n        return charList;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/125",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    public static long findLength(String string) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(findLength((\"11000010001\")) == (6l));\n    assert(findLength((\"10111\")) == (1l));\n    assert(findLength((\"11011101100101\")) == (2l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `maxDiff` to keep track of the maximum difference\n# Iterate through each character and its index in the input string\n    # Initialize a variable `count` to keep track of the difference between the number of 0s and number of 1s\n    # Iterate through each character in the substring from the current index to the end of the string\n        # If the character is '0', increment `count` by 1\n        # If the character is '1', decrement `count` by 1\n        # Update `maxDiff` with the maximum value between `maxDiff` and `count`\n# Return `maxDiff` as the maximum difference between the number of 0s and number of 1s in any sub-string"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long findLength(String string) {\n        long maxDiff = 0;\n        for (int i = 0; i < string.length(); i++) {\n            long count = 0;\n            for (int j = i; j < string.length(); j++) {\n                if (string.charAt(j) == '0') {\n                    count++;\n                } else {\n                    count--;\n                }\n                maxDiff = Math.max(maxDiff, count);\n            }\n        }\n        return maxDiff;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/256",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    public static long countPrimesNums(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `count` to 0 to keep track of the number of prime numbers found.\n# Iterate from 2 to the given number `n`\n    # Check if the current number is prime using a helper function\n        # Increment the `count` if the current number is prime\n# Return the `count` as the result."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long countPrimesNums(long n) {\n        long count = 0;\n        for (long i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static boolean isPrime(long num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (long i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/592",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the sum of the product of consecutive binomial co-efficients.\n    public static long sumOfProduct(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(sumOfProduct((3l)) == (15l));\n    assert(sumOfProduct((4l)) == (56l));\n    assert(sumOfProduct((1l)) == (1l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `sum` to keep track of the sum of the product of consecutive binomial coefficients\n# Iterate from `k = 0` to `k = n-1`\n    # Calculate the binomial coefficient for the current `n` and `k` using the formula `C(n, k) = n! / (k! * (n-k)!)`\n    # Calculate the product of the binomial coefficients for `k` and `k+1`\n    # Add the product to the `sum`\n# Return the `sum` as the result"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long sumOfProduct(long n) {\n        long sum = 0;\n        for (long k = 0; k < n; k++) {\n            long binomialCoefficient = calculateBinomialCoefficient(n, k);\n            long nextBinomialCoefficient = calculateBinomialCoefficient(n, k + 1);\n            long product = binomialCoefficient * nextBinomialCoefficient;\n            sum += product;\n        }\n        return sum;\n    }\n\n    public static long calculateBinomialCoefficient(long n, long k) {\n        if (k > n - k) {\n            k = n - k;\n        }\n\n        long coefficient = 1;\n        for (long i = 0; i < k; i++) {\n            coefficient *= (n - i);\n            coefficient /= (i + 1);\n        }\n        return coefficient;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/299",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to calculate the maximum aggregate from the array list of pairs.\n    public static Pair<String, Long> maxAggregate(ArrayList<Pair<String, Long>> stdata) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(maxAggregate((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Juan Whelan\", 90l), (Pair<String, Long>)Pair.with(\"Sabah Colley\", 88l), (Pair<String, Long>)Pair.with(\"Peter Nichols\", 7l), (Pair<String, Long>)Pair.with(\"Juan Whelan\", 122l), (Pair<String, Long>)Pair.with(\"Sabah Colley\", 84l))))).equals((Pair.with(\"Juan Whelan\", 212l))));\n    assert(maxAggregate((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Juan Whelan\", 50l), (Pair<String, Long>)Pair.with(\"Sabah Colley\", 48l), (Pair<String, Long>)Pair.with(\"Peter Nichols\", 37l), (Pair<String, Long>)Pair.with(\"Juan Whelan\", 22l), (Pair<String, Long>)Pair.with(\"Sabah Colley\", 14l))))).equals((Pair.with(\"Juan Whelan\", 72l))));\n    assert(maxAggregate((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Juan Whelan\", 10l), (Pair<String, Long>)Pair.with(\"Sabah Colley\", 20l), (Pair<String, Long>)Pair.with(\"Peter Nichols\", 30l), (Pair<String, Long>)Pair.with(\"Juan Whelan\", 40l), (Pair<String, Long>)Pair.with(\"Sabah Colley\", 50l))))).equals((Pair.with(\"Sabah Colley\", 70l))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a hashmap to store the aggregate values for each string\n# Iterate through each pair in the input array list\n    # If the string already exists in the hashmap, add the value of the current pair to its existing aggregate\n    # If the string does not exist in the hashmap, create a new entry with the string and the value of the current pair\n# Find the entry with the maximum aggregate value in the hashmap\n# Return the pair containing the string with the maximum aggregate and its corresponding aggregate value"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Pair<String, Long> maxAggregate(ArrayList<Pair<String, Long>> stdata) {\n        HashMap<String, Long> aggregateMap = new HashMap<>();\n        \n        for (Pair<String, Long> pair : stdata) {\n            String key = pair.getValue0();\n            Long value = pair.getValue1();\n            \n            if (aggregateMap.containsKey(key)) {\n                aggregateMap.put(key, aggregateMap.get(key) + value);\n            } else {\n                aggregateMap.put(key, value);\n            }\n        }\n        \n        Pair<String, Long> maxAggregatePair = null;\n        Long maxAggregate = Long.MIN_VALUE;\n        \n        for (Map.Entry<String, Long> entry : aggregateMap.entrySet()) {\n            if (entry.getValue() > maxAggregate) {\n                maxAggregate = entry.getValue();\n                maxAggregatePair = Pair.with(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return maxAggregatePair;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/71",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to sort an array array list of elements.\n    public static ArrayList<Long> combSort(ArrayList<Long> nums) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(combSort((new ArrayList<Long>(Arrays.asList((long)5l, (long)15l, (long)37l, (long)25l, (long)79l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)15l, (long)25l, (long)37l, (long)79l)))));\n    assert(combSort((new ArrayList<Long>(Arrays.asList((long)41l, (long)32l, (long)15l, (long)19l, (long)22l)))).equals((new ArrayList<Long>(Arrays.asList((long)15l, (long)19l, (long)22l, (long)32l, (long)41l)))));\n    assert(combSort((new ArrayList<Long>(Arrays.asList((long)99l, (long)15l, (long)13l, (long)47l)))).equals((new ArrayList<Long>(Arrays.asList((long)13l, (long)15l, (long)47l, (long)99l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Define the gap size for the comb sort algorithm\n# Create a boolean variable to keep track if any swaps were made in the last iteration\n# Create a loop to iterate until the gap size becomes 1 and no swaps were made in the last iteration\n    # Update the gap size using the comb sort formula (gap = gap / 1.3)\n    # Set the boolean variable to false\n    # Create a loop to iterate through the array\n        # Calculate the indices for comparing elements based on the current gap size\n        # If the element at the first index is greater than the element at the second index\n            # Swap the elements\n            # Set the boolean variable to true to indicate a swap was made\n# Return the sorted array"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> combSort(ArrayList<Long> nums) {\n        int gap = nums.size();\n        boolean swapped = true;\n\n        while (gap > 1 || swapped) {\n            gap = (int) (gap / 1.3);\n            if (gap < 1) {\n                gap = 1;\n            }\n\n            swapped = false;\n            for (int i = 0; i < nums.size() - gap; i++) {\n                int j = i + gap;\n                if (nums.get(i) > nums.get(j)) {\n                    Collections.swap(nums, i, j);\n                    swapped = true;\n                }\n            }\n        }\n\n        return nums;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/771",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static boolean checkExpression(String exp) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create an empty stack to store opening parentheses\n# Iterate through each character in the expression\n    # If the character is an opening parenthesis, push it to the stack\n    # If the character is a closing parenthesis\n        # If the stack is empty, return false (unbalanced expression)\n        # If the top of the stack is a matching opening parenthesis, pop it from the stack\n        # If the top of the stack is not a matching opening parenthesis, return false (unbalanced expression)\n# After iterating through all characters, check if the stack is empty\n    # If the stack is empty, return true (balanced expression)\n    # If the stack is not empty, return false (unbalanced expression)"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean checkExpression(String exp) {\n        Stack<Character> stack = new Stack<>();\n\n        for (int i = 0; i < exp.length(); i++) {\n            char ch = exp.charAt(i);\n\n            if (ch == '(' || ch == '{' || ch == '[') {\n                stack.push(ch);\n            } else if (ch == ')' || ch == '}' || ch == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n\n                char top = stack.pop();\n\n                if ((ch == ')' && top != '(') || (ch == '}' && top != '{') || (ch == ']' && top != '[')) {\n                    return false;\n                }\n            }\n        }\n\n        return stack.isEmpty();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/454",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that matches a word containing 'z'.\n    public static boolean textMatchWordz(String text) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(textMatchWordz((\"pythonz.\")) == (true));\n    assert(textMatchWordz((\"xyz.\")) == (true));\n    assert(textMatchWordz((\"  lang  .\")) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Split the input string into an array of words using whitespace as the delimiter\n# Iterate through each word in the array\n    # Check if the word contains the letter 'z' (case insensitive)\n        # If a word containing 'z' is found, return true\n# If no word containing 'z' is found, return false"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean textMatchWordz(String text) {\n        String[] words = text.split(\"\\\\s+\");\n        for (String word : words) {\n            if (word.toLowerCase().contains(\"z\")) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/728",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function takes as input two array lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    public static ArrayList<Long> sumList(ArrayList<Long> lst1, ArrayList<Long> lst2) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(sumList((new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)30l))), (new ArrayList<Long>(Arrays.asList((long)15l, (long)25l, (long)35l)))).equals((new ArrayList<Long>(Arrays.asList((long)25l, (long)45l, (long)65l)))));\n    assert(sumList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)8l, (long)10l)))));\n    assert(sumList((new ArrayList<Long>(Arrays.asList((long)15l, (long)20l, (long)30l))), (new ArrayList<Long>(Arrays.asList((long)15l, (long)45l, (long)75l)))).equals((new ArrayList<Long>(Arrays.asList((long)30l, (long)65l, (long)105l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the sizes of the two input array lists are equal\n# Create a new ArrayList to store the sum of corresponding elements from the two input lists\n# Iterate through each index from 0 to size-1\n    # Get the element at the current index from lst1 and lst2\n    # Add the two elements and store the result in the new list\n# Return the new list containing the sums of corresponding elements from the two input lists"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> sumList(ArrayList<Long> lst1, ArrayList<Long> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return null;\n        }\n        \n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < lst1.size(); i++) {\n            long sum = lst1.get(i) + lst2.get(i);\n            result.add(sum);\n        }\n        \n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/260",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    public static long newmanPrime(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(newmanPrime((3l)) == (7l));\n    assert(newmanPrime((4l)) == (17l));\n    assert(newmanPrime((5l)) == (41l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a helper function `isPrime` to check if a number is prime\n# Create a variable `count` and set it to 0 to keep track of the number of newman-shanks-williams prime numbers found\n# Create a variable `num` and set it to 0 to start checking for newman-shanks-williams prime numbers\n# Iterate until `count` is equal to `n`\n    # Increment `num` by 1\n    # Calculate the formula `2^num - 1`\n    # Check if `num` is prime and `2^num - 1` is prime\n        # If both conditions are met, increment `count` by 1\n# Return `num`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean isPrime(long number) {\n        if (number < 2) {\n            return false;\n        }\n        for (long i = 2; i <= Math.sqrt(number); i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    public static long newmanPrime(long n) {\n        int count = 0;\n        long num = 0;\n        while (count < n) {\n            num++;\n            long newman = (long) Math.pow(2, num) - 1;\n            if (isPrime(num) && isPrime(newman)) {\n                count++;\n            }\n        }\n        return num;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/390",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to apply a given format string to all of the elements in an array array list.\n    public static ArrayList<String> addString(ArrayList<Object> list_, String string) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(addString((new ArrayList<Object>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (\"temp{0}\")).equals((new ArrayList<String>(Arrays.asList((String)\"temp1\", (String)\"temp2\", (String)\"temp3\", (String)\"temp4\")))));\n    assert(addString((new ArrayList<Object>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\", (String)\"d\"))), (\"python{0}\")).equals((new ArrayList<String>(Arrays.asList((String)\"pythona\", (String)\"pythonb\", (String)\"pythonc\", (String)\"pythond\")))));\n    assert(addString((new ArrayList<Object>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l))), (\"string{0}\")).equals((new ArrayList<String>(Arrays.asList((String)\"string5\", (String)\"string6\", (String)\"string7\", (String)\"string8\")))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create an empty ArrayList to store the formatted strings\n# Iterate through each element in the input ArrayList\n    # Convert the element to a string using the `toString` method\n    # Format the string using the given format string\n    # Add the formatted string to the new ArrayList\n# Return the new ArrayList with the formatted strings"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<String> addString(ArrayList<Object> list_, String string) {\n        ArrayList<String> formattedList = new ArrayList<>();\n        for (Object obj : list_) {\n            String formattedString = String.format(string, obj.toString());\n            formattedList.add(formattedString);\n        }\n        return formattedList;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/581",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the surface area of a square javaramid with a given base edge and height.\n    public static long surfaceArea(long b, long s) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(surfaceArea((3l), (4l)) == (33l));\n    assert(surfaceArea((4l), (5l)) == (56l));\n    assert(surfaceArea((1l), (2l)) == (5l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Calculate the surface area of the square javaramid using the formula:\n    # Calculate the area of the base by squaring the base edge\n    # Calculate the area of each side face by multiplying the base edge by the height and doubling it\n    # Add the area of the base and the area of the side faces to get the total surface area\n# Return the total surface area of the square javaramid"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long surfaceArea(long b, long s) {\n        long baseArea = b * b;\n        long sideArea = 2 * b * s;\n        long totalSurfaceArea = baseArea + sideArea;\n        return totalSurfaceArea;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/95",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the length of the smallest array list in an array array list of array lists.\n    public static long FindMinLength(ArrayList<ArrayList<Long>> lst) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(FindMinLength((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))) == (1l));\n    assert(FindMinLength((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))))) == (2l));\n    assert(FindMinLength((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)4l, (long)4l)))))) == (3l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `minLength` with a large value (e.g., Long.MAX_VALUE)\n# Iterate through each ArrayList<Long> in the input ArrayList<ArrayList<Long>>\n    # Get the size of the current ArrayList<Long>\n    # Check if the current size is smaller than `minLength`\n        # If yes, update `minLength` with the current size\n# Return the value of `minLength`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long FindMinLength(ArrayList<ArrayList<Long>> lst) {\n        long minLength = Long.MAX_VALUE;\n        for (ArrayList<Long> arrList : lst) {\n            int size = arrList.size();\n            if (size < minLength) {\n                minLength = size;\n            }\n        }\n        return minLength;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/283",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    public static boolean validate(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Convert the input number to a string\n# Iterate through each digit in the string\n    # Count the frequency of the current digit in the string\n    # Check if the frequency of the digit is greater than the digit itself\n        # If so, return false\n# If all frequencies are less than or equal to their respective digits, return true"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean validate(long n) {\n        String numString = String.valueOf(n);\n\n        for (int i = 0; i < numString.length(); i++) {\n            char digit = numString.charAt(i);\n            int frequency = countDigitFrequency(numString, digit);\n\n            if (frequency > Character.getNumericValue(digit)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static int countDigitFrequency(String numString, char digit) {\n        int frequency = 0;\n\n        for (int i = 0; i < numString.length(); i++) {\n            if (numString.charAt(i) == digit) {\n                frequency++;\n            }\n        }\n\n        return frequency;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/135",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the nth hexagonal number.\n    public static long hexagonalNum(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(hexagonalNum((10l)) == (190l));\n    assert(hexagonalNum((5l)) == (45l));\n    assert(hexagonalNum((7l)) == (91l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Calculate the nth hexagonal number using the formula: n*(2n-1)\n# Return the calculated value"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long hexagonalNum(long n) {\n        return n * (2 * n - 1);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/389",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n'th lucas number.\n    public static long findLucas(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(findLucas((9l)) == (76l));\n    assert(findLucas((4l)) == (7l));\n    assert(findLucas((3l)) == (4l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input number is less than or equal to 0\n    # If so, return 2 if n is 0, and return 1 if n is 1\n# Initialize two variables, lucas1 and lucas2, with values 2 and 1 respectively\n# Iterate from 2 to n\n    # Calculate the next lucas number by adding lucas1 and lucas2\n    # Update lucas1 and lucas2 with the new values\n# Return the value of lucas2, which will be the n'th lucas number"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long findLucas(long n) {\n        if (n <= 0) {\n            return n == 0 ? 2 : 1;\n        }\n        long lucas1 = 2;\n        long lucas2 = 1;\n        for (int i = 2; i <= n; i++) {\n            long nextLucas = lucas1 + lucas2;\n            lucas1 = lucas2;\n            lucas2 = nextLucas;\n        }\n        return lucas2;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/769",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to get the difference between two array lists.\n    public static ArrayList<Long> Diff(ArrayList<Long> li1, ArrayList<Long> li2) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(Diff((new ArrayList<Long>(Arrays.asList((long)10l, (long)15l, (long)20l, (long)25l, (long)30l, (long)35l, (long)40l))), (new ArrayList<Long>(Arrays.asList((long)25l, (long)40l, (long)35l)))).equals((new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)30l, (long)15l)))));\n    assert(Diff((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))));\n    assert(Diff((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)6l, (long)7l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create an empty ArrayList to store the difference between the two input ArrayLists.\n# Iterate through each element in the first ArrayList.\n    # Check if the element is not present in the second ArrayList.\n        # If not present, add the element to the difference ArrayList.\n# Return the difference ArrayList."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> Diff(ArrayList<Long> li1, ArrayList<Long> li2) {\n        ArrayList<Long> diffList = new ArrayList<>();\n\n        for (Long element : li1) {\n            if (!li2.contains(element)) {\n                diffList.add(element);\n            }\n        }\n\n        return diffList;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/725",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to extract values between quotation marks \" \" of the given string.\n    public static ArrayList<Object> extractQuotation(String text1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(extractQuotation((\"Cortex \"A53\" Based \"multi\" tasking \"Processor\"\")).equals((new ArrayList<Object>(Arrays.asList((String)\"A53\", (String)\"multi\", (String)\"Processor\")))));\n    assert(extractQuotation((\"Cast your \"favorite\" entertainment \"apps\"\")).equals((new ArrayList<Object>(Arrays.asList((String)\"favorite\", (String)\"apps\")))));\n    assert(extractQuotation((\"Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support\")).equals((new ArrayList<Object>(Arrays.asList((String)\"4k Ultra HD\", (String)\"HDR 10\")))));\n    assert(extractQuotation((\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\")).equals((new ArrayList<Object>(Arrays.asList()))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize an empty ArrayList to store the extracted values\n# Initialize variables to keep track of the start and end indices of the quotation marks\n# Iterate through each character and its index in the input string\n    # Check if the current character is a quotation mark\n        # If it is the starting quotation mark, update the start index\n        # If it is the ending quotation mark, update the end index\n            # Extract the substring between the start and end indices (excluding the quotation marks)\n            # Add the extracted value to the ArrayList\n            # Reset the start and end indices\n# Return the ArrayList containing the extracted values"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Object> extractQuotation(String text1) {\n        ArrayList<Object> extractedValues = new ArrayList<>();\n        int startIndex = -1;\n        int endIndex = -1;\n        \n        for (int index = 0; index < text1.length(); index++) {\n            char currentChar = text1.charAt(index);\n            \n            if (currentChar == '\\\"') {\n                if (startIndex == -1) {\n                    startIndex = index + 1;\n                } else {\n                    endIndex = index;\n                    String extractedValue = text1.substring(startIndex, endIndex);\n                    extractedValues.add(extractedValue);\n                    startIndex = -1;\n                    endIndex = -1;\n                }\n            }\n        }\n        \n        return extractedValues;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/6",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to check whether the two numbers differ at one bit position only or not.\n    public static boolean differAtOneBitPos(long a, long b) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Use the XOR operation to get the bit-wise difference between the two numbers\n# Use the `Long.bitCount` method to count the number of set bits in the XOR result\n# If the count is 1, return true indicating that the numbers differ at one bit position only\n# Otherwise, return false indicating that the numbers differ at more than one bit position or not at all"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean differAtOneBitPos(long a, long b) {\n        long xorResult = a ^ b;\n        return Long.bitCount(xorResult) == 1;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/787",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that matches a string that has an a followed by three 'b'.\n    public static boolean textMatchThree(String text) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(textMatchThree((\"ac\")) == (false));\n    assert(textMatchThree((\"dc\")) == (false));\n    assert(textMatchThree((\"abbbba\")) == (true));\n    assert(textMatchThree((\"caacabbbba\")) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Use a regular expression pattern to match the required string pattern: \"abbb\"\n# Use the `matches` method of the `String` class to check if the input string matches the pattern\n# Return `true` if the input string matches the pattern, otherwise return `false`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean textMatchThree(String text) {\n        return text.matches(\".*abbb.*\");\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/468",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array array list.\n    public static long maxProduct(ArrayList<Long> arr) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(maxProduct((new ArrayList<Long>(Arrays.asList((long)3l, (long)100l, (long)4l, (long)5l, (long)150l, (long)6l)))) == (3000l));\n    assert(maxProduct((new ArrayList<Long>(Arrays.asList((long)4l, (long)42l, (long)55l, (long)68l, (long)80l)))) == (50265600l));\n    assert(maxProduct((new ArrayList<Long>(Arrays.asList((long)10l, (long)22l, (long)9l, (long)33l, (long)21l, (long)50l, (long)41l, (long)60l)))) == (2460l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `maxProduct` to keep track of the maximum product found so far, and set it to 0.\n# Initialize a variable `currentProduct` to keep track of the product of the current increasing subsequence, and set it to 1.\n# Iterate through each number in the input array list.\n    # Check if the current number is greater than 0.\n        # If it is, multiply `currentProduct` by the current number.\n        # Check if `currentProduct` is greater than `maxProduct`.\n            # If it is, update `maxProduct` with the value of `currentProduct`.\n    # Check if the current number is less than 0.\n        # If it is, reset `currentProduct` to 1.\n# Return `maxProduct`."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long maxProduct(ArrayList<Long> arr) {\n        long maxProduct = 0;\n        long currentProduct = 1;\n\n        for (long num : arr) {\n            if (num > 0) {\n                currentProduct *= num;\n                if (currentProduct > maxProduct) {\n                    maxProduct = currentProduct;\n                }\n            } else {\n                currentProduct = 1;\n            }\n        }\n\n        return maxProduct;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/586",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to split an array array list at the nth eelment and add the first part to the end.\n    public static ArrayList<Long> splitArr(ArrayList<Long> l, long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(splitArr((new ArrayList<Long>(Arrays.asList((long)12l, (long)10l, (long)5l, (long)6l, (long)52l, (long)36l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)52l, (long)36l, (long)12l, (long)10l)))));\n    assert(splitArr((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l)))));\n    assert(splitArr((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)0l, (long)1l, (long)2l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input array list is null or empty\n# Check if the value of n is less than or equal to 0 or greater than the size of the array list\n    # If true, return the original array list\n# Create a new array list to store the split and rearranged elements\n# Get the sublist from the original array list starting from index n\n# Add the sublist to the new array list\n# Get the sublist from the original array list starting from index 0 and ending at index n-1\n# Add the sublist to the new array list\n# Return the new array list"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> splitArr(ArrayList<Long> l, long n) {\n        if (l == null || l.isEmpty()) {\n            return l;\n        }\n        \n        if (n <= 0 || n > l.size()) {\n            return l;\n        }\n        \n        ArrayList<Long> splitList = new ArrayList<>();\n        \n        List<Long> sublist1 = l.subList((int) n, l.size());\n        splitList.addAll(sublist1);\n        \n        List<Long> sublist2 = l.subList(0, (int) n);\n        splitList.addAll(sublist2);\n        \n        return splitList;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/96",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the number of divisors of a given integer.\n    public static long divisor(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a counter variable to 0\n# Iterate through all numbers from 1 to the given integer\n    # Check if the current number is a divisor of the given integer (i.e., if the remainder of the division is 0)\n        # If it is a divisor, increment the counter variable\n# Return the counter variable, which represents the number of divisors of the given integer"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long divisor(long n) {\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/588",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the difference between largest and smallest value in a given array list.\n    public static long bigDiff(ArrayList<Long> nums) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(bigDiff((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) == (3l));\n    assert(bigDiff((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)12l)))) == (8l));\n    assert(bigDiff((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l, (long)3l)))) == (7l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input array list is null or empty\n# Initialize variables `min` and `max` to the first element of the array list\n# Iterate through each element in the array list starting from the second element\n    # Update `min` if the current element is smaller than `min`\n    # Update `max` if the current element is larger than `max`\n# Return the difference between `max` and `min`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long bigDiff(ArrayList<Long> nums) {\n        if (nums == null || nums.isEmpty()) {\n            throw new IllegalArgumentException(\"Input list is null or empty\");\n        }\n\n        long min = nums.get(0);\n        long max = nums.get(0);\n\n        for (int i = 1; i < nums.size(); i++) {\n            long num = nums.get(i);\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n\n        return max - min;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/8",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find squares of individual elements in an array array list.\n    public static ArrayList<Long> squareNums(ArrayList<Long> nums) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(squareNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)9l, (long)16l, (long)25l, (long)36l, (long)49l, (long)64l, (long)81l, (long)100l)))));\n    assert(squareNums((new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)30l)))).equals((new ArrayList<Long>(Arrays.asList((long)100l, (long)400l, (long)900l)))));\n    assert(squareNums((new ArrayList<Long>(Arrays.asList((long)12l, (long)15l)))).equals((new ArrayList<Long>(Arrays.asList((long)144l, (long)225l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create an empty ArrayList to store the squared values\n# Iterate through each number in the input ArrayList\n    # Calculate the square of the current number\n    # Add the squared value to the new ArrayList\n# Return the new ArrayList containing the squared values"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> squareNums(ArrayList<Long> nums) {\n        ArrayList<Long> squaredNums = new ArrayList<>();\n        for (Long num : nums) {\n            Long squared = num * num;\n            squaredNums.add(squared);\n        }\n        return squaredNums;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/744",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given pair has any none value or not.\n    public static boolean checkNone(Object test_tup) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(checkNone(Pair.with(Optional.of(10l), Optional.of(4l), Optional.of(5l), Optional.of(6l), Optional.of(Optional.empty()))) == (true));\n    assert(checkNone(Pair.with(7l, 8l, 9l, 11l, 14l)) == (false));\n    assert(checkNone(Pair.with(Optional.of(1l), Optional.of(2l), Optional.of(3l), Optional.of(4l), Optional.of(Optional.empty()))) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Use reflection to get the tuple size and iterate through each element in the tuple\n# Check if any element in the tuple is null\n    # If any element is null, return true\n# If no element is null, return false"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean checkNone(Object test_tup) {\n        int size = TupleSize.of(test_tup.getClass());\n        for (int i = 0; i < size; i++) {\n            Object element = TupleElement.getValue(test_tup, i);\n            if (element == null) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/68",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to check whether the given array array list is monotonic or not.\n    public static boolean isMonotonic(ArrayList<Long> A) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(isMonotonic((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l, (long)4l)))) == (true));\n    assert(isMonotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l)))) == (true));\n    assert(isMonotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input ArrayList is empty or has only one element\n    # If so, return true since a single element or an empty list is considered monotonic\n# Check if the ArrayList is non-increasing or non-decreasing\n    # Iterate through each element in the ArrayList, starting from the second element\n        # Check if the current element is less than the previous element\n            # If so, the ArrayList is not non-increasing, so break the loop\n        # Check if the current element is greater than the previous element\n            # If so, the ArrayList is not non-decreasing, so break the loop\n# If the loop completes without breaking, the ArrayList is either non-increasing or non-decreasing, so return true\n# If the loop breaks, the ArrayList is not monotonic, so return false"
        ],
        "code": [
            "import java.util.*;\n\nclass Problem {\n    public static boolean isMonotonic(ArrayList<Long> A) {\n        if (A.isEmpty() || A.size() == 1) {\n            return true;\n        }\n\n        boolean isIncreasing = true;\n        boolean isDecreasing = true;\n\n        for (int i = 1; i < A.size(); i++) {\n            if (A.get(i) < A.get(i - 1)) {\n                isIncreasing = false;\n            }\n            if (A.get(i) > A.get(i - 1)) {\n                isDecreasing = false;\n            }\n        }\n\n        return isIncreasing || isDecreasing;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/803",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    public static boolean isPerfectSquare(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(isPerfectSquare((10l)) == (false));\n    assert(isPerfectSquare((36l)) == (true));\n    assert(isPerfectSquare((14l)) == (false));\n    assert(isPerfectSquare((196l)) == (true));\n    assert(isPerfectSquare((125l)) == (false));\n    assert(isPerfectSquare((15625l)) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `start` as 1 and `end` as the input number `n`\n# Iterate until `start` is less than or equal to `end`\n    # Calculate the middle element as `(start + end) / 2`\n    # Calculate the square of the middle element\n    # Compare the squared value with the input number `n`\n        # If the squared value is equal to `n`, return true (the number is a perfect square)\n        # If the squared value is greater than `n`, update `end` to be the middle element minus 1\n        # If the squared value is less than `n`, update `start` to be the middle element plus 1\n# If the loop ends without finding a perfect square, return false"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean isPerfectSquare(long n) {\n        long start = 1;\n        long end = n;\n        while (start <= end) {\n            long mid = (start + end) / 2;\n            long square = mid * mid;\n            if (square == n) {\n                return true;\n            } else if (square > n) {\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        return false;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/126",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the sum of common divisors of two given numbers.\n    public static long sum(long a, long b) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Find the minimum of the two given numbers\n# Initialize a variable `sum` to 0 to store the sum of common divisors\n# Iterate from 1 to the minimum number\n    # Check if the current number divides both `a` and `b` without leaving a remainder\n        # If it does, add it to the `sum`\n# Return the `sum` as the sum of common divisors"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long sum(long a, long b) {\n        long min = Math.min(a, b);\n        long sum = 0;\n        for (long i = 1; i <= min; i++) {\n            if (a % i == 0 && b % i == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/290",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the array list of maximum length in an array array list of array lists.\n    public static Pair<Long, ArrayList<Long>> maxLength(ArrayList<ArrayList<Long>> list1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(maxLength((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)11l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)13l, (long)15l, (long)17l)))))).equals((Pair.with(3l, new ArrayList<Long>(Arrays.asList((long)13l, (long)15l, (long)17l))))));\n    assert(maxLength((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)12l, (long)14l, (long)15l)))))).equals((Pair.with(4l, new ArrayList<Long>(Arrays.asList((long)10l, (long)12l, (long)14l, (long)15l))))));\n    assert(maxLength((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)15l, (long)20l, (long)25l)))))).equals((Pair.with(3l, new ArrayList<Long>(Arrays.asList((long)15l, (long)20l, (long)25l))))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a pair to store the maximum length and the corresponding array list\n# Iterate through each array list in the input array list of array lists\n    # Check if the current array list is longer than the maximum length stored in the pair\n        # If it is, update the maximum length and the corresponding array list in the pair\n# Return the pair containing the maximum length and the corresponding array list"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Pair<Long, ArrayList<Long>> maxLength(ArrayList<ArrayList<Long>> list1) {\n        Pair<Long, ArrayList<Long>> result = Pair.with(0L, new ArrayList<Long>());\n        for (ArrayList<Long> sublist : list1) {\n            if (sublist.size() > result.getValue0()) {\n                result = Pair.with((long) sublist.size(), sublist);\n            }\n        }\n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/237",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Pair<Long, Long>,Long> checkOccurences(ArrayList<Pair<Long, Long>> test_list) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Pair<Long, Long>,Long>(Map.of(Pair.with(1l, 3l), 2l, Pair.with(2l, 5l), 2l, Pair.with(3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Pair<Long, Long>,Long>(Map.of(Pair.with(2l, 4l), 2l, Pair.with(3l, 6l), 2l, Pair.with(4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Pair<Long, Long>,Long>(Map.of(Pair.with(2l, 13l), 1l, Pair.with(11l, 23l), 1l, Pair.with(12l, 25l), 2l, Pair.with(16l, 23l), 1l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a HashMap to store the pair and its occurrence count\n# Iterate through each pair in the input list\n    # Check if the pair exists in the HashMap\n        # If it exists, increment its occurrence count by 1\n        # If it doesn't exist, add it to the HashMap with an initial occurrence count of 1\n# Return the HashMap containing the unique pairs and their occurrence counts"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static HashMap<Pair<Long, Long>, Long> checkOccurrences(ArrayList<Pair<Long, Long>> test_list) {\n        HashMap<Pair<Long, Long>, Long> occurrenceMap = new HashMap<>();\n        for (Pair<Long, Long> pair : test_list) {\n            if (occurrenceMap.containsKey(pair)) {\n                occurrenceMap.put(pair, occurrenceMap.get(pair) + 1);\n            } else {\n                occurrenceMap.put(pair, 1L);\n            }\n        }\n        return occurrenceMap;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/430",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the directrix of a parabola.\n    public static long parabolaDirectrix(long a, long b, long c) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(parabolaDirectrix((5l), (3l), (2l)) == (-198l));\n    assert(parabolaDirectrix((9l), (8l), (4l)) == (-2336l));\n    assert(parabolaDirectrix((2l), (4l), (6l)) == (-130l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Calculate the discriminant using the formula `discriminant = 4 * a * c - b * b`\n# If the discriminant is positive, calculate the directrix using the formula `directrix = -b / (2 * a)`\n# If the discriminant is zero or negative, throw an exception or return a special value to indicate that the directrix does not exist\n# Return the directrix value"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long parabolaDirectrix(long a, long b, long c) {\n        long discriminant = 4 * a * c - b * b;\n        if (discriminant > 0) {\n            return -b / (2 * a);\n        } else {\n            throw new IllegalArgumentException(\"Directrix does not exist\");\n        }\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/773",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return null if there is no match.\n    public static Optional<Pair<String, Long, Long>> occuranceSubstring(String text, String pattern) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals(Optional.of(Pair.with(\"python\", 0l, 6l))));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals(Optional.of(Pair.with(\"programming\", 7l, 18l))));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals(Optional.of(Pair.with(\"language\", 31l, 39l))));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(Optional.empty()));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if either the input string `text` or the input string `pattern` is null or empty. If any of them is null or empty, return null.\n# Initialize a variable `position` to store the starting position of the substring within the string.\n# Initialize a variable `count` to store the number of occurrences of the substring within the string.\n# Iterate through the string `text` using a for loop with `i` as the index variable.\n    # Check if the substring starting from index `i` and of length equal to the length of `pattern` is equal to `pattern`.\n        # If they are equal, increment `count` by 1 and update `position` to the current index `i`.\n# Check if `count` is greater than 0.\n    # If it is, return an Optional Pair containing the `pattern`, `count`, and `position`.\n    # If it is not, return null."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Optional<Pair<String, Long, Long>> occuranceSubstring(String text, String pattern) {\n        if (text == null || pattern == null || text.isEmpty() || pattern.isEmpty()) {\n            return null;\n        }\n\n        long position = -1;\n        long count = 0;\n\n        for (int i = 0; i <= text.length() - pattern.length(); i++) {\n            if (text.substring(i, i + pattern.length()).equals(pattern)) {\n                count++;\n                if (position == -1) {\n                    position = i;\n                }\n            }\n        }\n\n        if (count > 0) {\n            return Optional.of(new Pair<>(pattern, count, position));\n        } else {\n            return null;\n        }\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/791",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to remove pairs from the given pair.\n    public static Pair<Long, Long, Long, Long> removeNested(Object test_tup) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(removeNested(Pair.with(1l, 5l, 7l, Pair.with(4l, 6l), 10l)).equals((Pair.with(1l, 5l, 7l, 10l))));\n    assert(removeNested(Pair.with(2l, 6l, 8l, Pair.with(5l, 7l), 11l)).equals((Pair.with(2l, 6l, 8l, 11l))));\n    assert(removeNested(Pair.with(3l, 7l, 9l, Pair.with(6l, 8l), 12l)).equals((Pair.with(3l, 7l, 9l, 12l))));\n    assert(removeNested(Pair.with(3l, 7l, 9l, Pair.with(6l, 8l), Pair.with(5l, 12l), 12l)).equals((Pair.with(3l, 7l, 9l, 12l))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input pair is null or not\n# Use the `instanceof` operator to check if the input pair is an instance of the `Pair` class\n# If the input pair is not an instance of the `Pair` class, throw an exception or return null\n# If the input pair is an instance of the `Pair` class, check if the first and second elements are also instances of the `Pair` class\n    # If both the first and second elements are instances of the `Pair` class, recursively call the `removeNested` function on both elements\n    # If either the first or second element is not an instance of the `Pair` class, return the input pair as is\n# Return the modified pair after removing any nested pairs"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Pair<Long, Long, Long, Long> removeNested(Object test_tup) {\n        if (test_tup == null) {\n            return null;\n        }\n        if (!(test_tup instanceof Pair)) {\n            throw new IllegalArgumentException(\"Input is not a Pair\");\n        }\n        Pair<?, ?> pair = (Pair<?, ?>) test_tup;\n        Object first = pair.getValue0();\n        Object second = pair.getValue1();\n        if (first instanceof Pair && second instanceof Pair) {\n            Pair<Long, Long, Long, Long> modifiedPair = new Pair<>(\n                    removeNested(first).getValue0(),\n                    removeNested(first).getValue1(),\n                    removeNested(second).getValue0(),\n                    removeNested(second).getValue1()\n            );\n            return modifiedPair;\n        } else {\n            return (Pair<Long, Long, Long, Long>) pair;\n        }\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/104",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to sort each subarray list of strings in a given array list of array lists.\n    public static ArrayList<ArrayList<String>> sortSublists(ArrayList<ArrayList<String>> input_list) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(sortSublists((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"green\", (String)\"orange\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"black\", (String)\"white\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"white\", (String)\"black\", (String)\"orange\")))))).equals((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"green\", (String)\"orange\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"black\", (String)\"white\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"black\", (String)\"orange\", (String)\"white\")))))));\n    assert(sortSublists((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\" red \", (String)\"green\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"blue \", (String)\" black\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\" orange\", (String)\"brown\")))))).equals((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\" red \", (String)\"green\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\" black\", (String)\"blue \")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\" orange\", (String)\"brown\")))))));\n    assert(sortSublists((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"zilver\", (String)\"gold\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"magnesium\", (String)\"aluminium\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"steel\", (String)\"bronze\")))))).equals((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"gold\", (String)\"zilver\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"aluminium\", (String)\"magnesium\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"bronze\", (String)\"steel\")))))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Iterate through each sublist in the input list\n    # Sort the sublist using the `Collections.sort` method\n# Return the modified input list"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<ArrayList<String>> sortSublists(ArrayList<ArrayList<String>> inputList) {\n        for (ArrayList<String> sublist : inputList) {\n            Collections.sort(sublist);\n        }\n        return inputList;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/610",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function which takes an array array list and returns an array array list with the same elements, but the k'th element removed.\n    public static ArrayList<Long> removeKthElement(ArrayList<Long> list1, long L) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(removeKthElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l, (long)3l, (long)4l, (long)4l, (long)5l, (long)1l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)3l, (long)4l, (long)4l, (long)5l, (long)1l)))));\n    assert(removeKthElement((new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)4l, (long)5l, (long)6l, (long)6l, (long)6l, (long)7l, (long)8l, (long)9l, (long)4l, (long)4l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)3l, (long)4l, (long)4l, (long)5l, (long)6l, (long)6l, (long)6l, (long)7l, (long)8l, (long)9l, (long)4l, (long)4l)))));\n    assert(removeKthElement((new ArrayList<Long>(Arrays.asList((long)10l, (long)10l, (long)15l, (long)19l, (long)18l, (long)18l, (long)17l, (long)26l, (long)26l, (long)17l, (long)18l, (long)10l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)10l, (long)10l, (long)15l, (long)19l, (long)18l, (long)17l, (long)26l, (long)26l, (long)17l, (long)18l, (long)10l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new ArrayList to store the modified elements\n# Iterate through each element in the input ArrayList\n    # Check if the current index is not equal to the given value of k\n        # If not equal, add the element to the new ArrayList\n# Return the modified ArrayList"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> removeKthElement(ArrayList<Long> list1, long k) {\n        ArrayList<Long> modifiedList = new ArrayList<>();\n        for (int i = 0; i < list1.size(); i++) {\n            if (i != k) {\n                modifiedList.add(list1.get(i));\n            }\n        }\n        return modifiedList;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/720",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to add a hash map to the pair. The output should be a pair.\n    public static Pair<Long, Long, Long, HashMap<String,Long>> addDictToTuple(Pair<Long, Long, Long> test_tup, HashMap<String,Long> test_dict) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(addDictToTuple((Pair.with(4l, 5l, 6l)), (new HashMap<String,Long>(Map.of(\"MSAM\", 1l, \"is\", 2l, \"best\", 3l)))).equals((Pair.with(4l, 5l, 6l, new HashMap<String,Long>(Map.of(\"MSAM\", 1l, \"is\", 2l, \"best\", 3l))))));\n    assert(addDictToTuple((Pair.with(1l, 2l, 3l)), (new HashMap<String,Long>(Map.of(\"UTS\", 2l, \"is\", 3l, \"Worst\", 4l)))).equals((Pair.with(1l, 2l, 3l, new HashMap<String,Long>(Map.of(\"UTS\", 2l, \"is\", 3l, \"Worst\", 4l))))));\n    assert(addDictToTuple((Pair.with(8l, 9l, 10l)), (new HashMap<String,Long>(Map.of(\"POS\", 3l, \"is\", 4l, \"Okay\", 5l)))).equals((Pair.with(8l, 9l, 10l, new HashMap<String,Long>(Map.of(\"POS\", 3l, \"is\", 4l, \"Okay\", 5l))))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new pair with the same values as the input pair\n# Add the input dictionary to the new pair\n# Return the new pair"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Pair<Long, Long, Long, HashMap<String, Long>> addDictToTuple(Pair<Long, Long, Long> test_tup, HashMap<String, Long> test_dict) {\n        Pair<Long, Long, Long, HashMap<String, Long>> newPair = new Pair<>(test_tup.getValue0(), test_tup.getValue1(), test_tup.getValue2(), test_dict);\n        return newPair;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/292",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long find(long n, long m) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Divide the first number `n` by the second number `m`\n# Use integer division to round down the result to the nearest integer\n# Return the rounded down quotient"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long find(long n, long m) {\n        return n / m;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/285",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    public static boolean textMatchTwoThree(String text) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(textMatchTwoThree((\"ac\")) == (false));\n    assert(textMatchTwoThree((\"dc\")) == (false));\n    assert(textMatchTwoThree((\"abbbba\")) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Iterate through each character and its index in the input string up to the second to last character\n    # Check if the current character is 'a' and the next two characters are 'bb' or the next three characters are 'bbb'\n        # If the pattern is found, return true\n# If the pattern is not found, return false"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean textMatchTwoThree(String text) {\n        for (int i = 0; i < text.length() - 2; i++) {\n            if (text.charAt(i) == 'a' && (text.charAt(i+1) == 'b' && text.charAt(i+2) == 'b' || text.charAt(i+1) == 'b' && text.charAt(i+2) == 'b' && text.charAt(i+3) == 'b')) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/446",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the occurence of all elements of array list in a pair.\n    public static long countOccurrence(Object tup, ArrayList<Object> lst) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(countOccurrence(Pair.with(\"a\", \"a\", \"c\", \"b\", \"d\"), (new ArrayList<Object>(Arrays.asList((String)\"a\", (String)\"b\")))) == (3l));\n    assert(countOccurrence(Pair.with(1l, 2l, 3l, 1l, 4l, 6l, 7l, 1l, 4l), (new ArrayList<Object>(Arrays.asList((long)1l, (long)4l, (long)7l)))) == (6l));\n    assert(countOccurrence(Pair.with(1l, 2l, 3l, 4l, 5l, 6l), (new ArrayList<Object>(Arrays.asList((long)1l, (long)2l)))) == (2l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `count` to 0\n# Iterate through each element in the array list\n    # Check if the element is equal to the first or second element of the pair\n        # If it is, increment `count` by 1\n# Return the value of `count`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long countOccurrence(Object tup, ArrayList<Object> lst) {\n        long count = 0;\n        for (Object element : lst) {\n            if (element.equals(((Pair) tup).getValue0()) || element.equals(((Pair) tup).getValue1())) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/142",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given array lists.\n    public static long countSamepair(ArrayList<Long> list1, ArrayList<Long> list2, ArrayList<Long> list3) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(countSamepair((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)3l, (long)1l, (long)2l, (long)6l, (long)7l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)3l, (long)1l, (long)2l, (long)6l, (long)7l, (long)9l)))) == (3l));\n    assert(countSamepair((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)3l, (long)1l, (long)2l, (long)6l, (long)7l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)3l, (long)1l, (long)2l, (long)6l, (long)7l, (long)8l)))) == (4l));\n    assert(countSamepair((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)2l, (long)6l, (long)7l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)3l, (long)1l, (long)2l, (long)6l, (long)7l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)3l, (long)1l, (long)2l, (long)6l, (long)7l, (long)8l)))) == (5l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `count` to 0\n# Iterate through the elements in the three input ArrayLists simultaneously using a for loop\n    # Check if the elements at the current index in all three lists are equal\n        # If they are equal, increment the `count` variable by 1\n# Return the value of `count`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long countSamepair(ArrayList<Long> list1, ArrayList<Long> list2, ArrayList<Long> list3) {\n        long count = 0;\n        int size = Math.min(Math.min(list1.size(), list2.size()), list3.size());\n        for (int i = 0; i < size; i++) {\n            if (list1.get(i).equals(list2.get(i)) && list2.get(i).equals(list3.get(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/434",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that matches a string that has an a followed by one or more b's.\n    public static boolean textMatchOne(String text) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(textMatchOne((\"ac\")) == (false));\n    assert(textMatchOne((\"dc\")) == (false));\n    assert(textMatchOne((\"abba\")) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Use a regular expression pattern to match the required pattern: \"a\" followed by one or more \"b\"s\n# Use the `matches` method of the `String` class to check if the input string matches the pattern\n# Return `true` if the string matches the pattern, `false` otherwise"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean textMatchOne(String text) {\n        return text.matches(\"a+b+\");\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/555",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    public static long difference(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(difference((3l)) == (30l));\n    assert(difference((5l)) == (210l));\n    assert(difference((2l)) == (6l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Calculate the sum of cubes of the first n natural numbers\n    # Initialize a variable `sumOfCubes` to 0\n    # Iterate from 1 to n\n        # Add the cube of the current number to `sumOfCubes`\n# Calculate the sum of the first n natural numbers\n    # Calculate the sum using the formula: sum = n * (n + 1) / 2\n# Calculate the difference between the sum of cubes and the sum of the first n natural numbers\n    # Subtract the sum of the first n natural numbers from the sum of cubes\n# Return the difference"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long difference(long n) {\n        long sumOfCubes = 0;\n        for (long i = 1; i <= n; i++) {\n            sumOfCubes += i * i * i;\n        }\n        long sumOfNumbers = n * (n + 1) / 2;\n        return sumOfCubes - sumOfNumbers;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/557",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to toggle the case of all characters in a string.\n    public static String toggleString(String string) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(toggleString((\"Python\")).equals((\"pYTHON\")));\n    assert(toggleString((\"Pangram\")).equals((\"pANGRAM\")));\n    assert(toggleString((\"LIttLE\")).equals((\"liTTle\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a StringBuilder object to store the modified string\n# Iterate through each character in the input string\n    # Check if the character is uppercase\n        # If it is, convert it to lowercase and append it to the StringBuilder object\n    # If the character is lowercase, convert it to uppercase and append it to the StringBuilder object\n# Convert the StringBuilder object to a string and return it as the modified string"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String toggleString(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else {\n                sb.append(Character.toUpperCase(c));\n            }\n        }\n        return sb.toString();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/418",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the element of an array array list having maximum length.\n    public static ArrayList<Object> FindMax(ArrayList<ArrayList<Object>> lst) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(FindMax((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"A\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"A\", (String)\"B\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"A\", (String)\"B\", (String)\"C\")))))).equals((new ArrayList<Object>(Arrays.asList((String)\"A\", (String)\"B\", (String)\"C\")))));\n    assert(FindMax((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))))).equals((new ArrayList<Object>(Arrays.asList((long)1l, (long)2l, (long)3l)))));\n    assert(FindMax((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)6l, (long)1l)))))).equals((new ArrayList<Object>(Arrays.asList((long)1l, (long)5l, (long)6l, (long)1l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `maxSize` to keep track of the maximum length encountered so far, initially set to 0.\n# Initialize a variable `maxElement` to keep track of the element with maximum length encountered so far, initially set to null.\n# Iterate through each element in the input array list.\n    # Check the length of the current element.\n    # If the length is greater than `maxSize`, update `maxSize` to the length of the current element and update `maxElement` to the current element.\n# Return `maxElement`."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Object> FindMax(ArrayList<ArrayList<Object>> lst) {\n        int maxSize = 0;\n        ArrayList<Object> maxElement = null;\n        \n        for (ArrayList<Object> element : lst) {\n            int size = element.size();\n            if (size > maxSize) {\n                maxSize = size;\n                maxElement = element;\n            }\n        }\n        \n        return maxElement;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/103",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the Eulerian number a(n, m).\n    public static long eulerianNum(long n, long m) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(eulerianNum((3l), (1l)) == (4l));\n    assert(eulerianNum((4l), (1l)) == (11l));\n    assert(eulerianNum((5l), (3l)) == (26l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if n is less than 0 or m is less than 0, return 0\n# If n is equal to 0, return 1\n# If n is equal to 1, return m + 1\n# If m is equal to 0, return 0\n# If m is equal to 1, return 0\n# Initialize a 2D array, dp, with dimensions (n+1) x (m+1) and initialize all elements to 0\n# Iterate through rows i from 0 to n\n    # Iterate through columns j from 0 to m\n        # If i is equal to 0, set dp[i][j] to 1\n        # If j is equal to 0, set dp[i][j] to 0\n        # Otherwise, set dp[i][j] to (j+1) * dp[i-1][j] + (j+1) * dp[i][j-1]\n# Return dp[n][m] as the Eulerian number a(n, m)"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long eulerianNum(long n, long m) {\n        if (n < 0 || m < 0) {\n            return 0;\n        }\n        if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n            return m + 1;\n        }\n        if (m == 0) {\n            return 0;\n        }\n        if (m == 1) {\n            return 0;\n        }\n        \n        long[][] dp = new long[(int)(n+1)][(int)(m+1)];\n        \n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= m; j++) {\n                if (i == 0) {\n                    dp[i][j] = 1;\n                } else if (j == 0) {\n                    dp[i][j] = 0;\n                } else {\n                    dp[i][j] = (j+1) * dp[i-1][j] + (j+1) * dp[i][j-1];\n                }\n            }\n        }\n        \n        return dp[(int)n][(int)m];\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/168",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to count the number of occurrences of a number in a given array list.\n    public static long frequency(ArrayList<Long> a, long x) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(frequency((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (4l)) == (0l));\n    assert(frequency((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l))), (3l)) == (3l));\n    assert(frequency((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)1l, (long)2l))), (1l)) == (2l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a count variable to 0\n# Iterate through each element in the given ArrayList\n    # Check if the current element is equal to the given number\n        # If they are equal, increment the count variable\n# Return the count variable as the frequency of the given number in the ArrayList"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long frequency(ArrayList<Long> a, long x) {\n        long count = 0;\n        for (long num : a) {\n            if (num == x) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/749",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to sort a given array list of strings of numbers numerically. https://www.geeksforgeeks.org/javathon-sort-numeric-strings-in-a-array list/\n    public static ArrayList<Long> sortNumericStrings(ArrayList<String> nums_str) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(sortNumericStrings((new ArrayList<String>(Arrays.asList((String)\"4\", (String)\"12\", (String)\"45\", (String)\"7\", (String)\"0\", (String)\"100\", (String)\"200\", (String)\"-12\", (String)\"-500\")))).equals((new ArrayList<Long>(Arrays.asList((long)-500l, (long)-12l, (long)0l, (long)4l, (long)7l, (long)12l, (long)45l, (long)100l, (long)200l)))));\n    assert(sortNumericStrings((new ArrayList<String>(Arrays.asList((String)\"2\", (String)\"3\", (String)\"8\", (String)\"4\", (String)\"7\", (String)\"9\", (String)\"8\", (String)\"2\", (String)\"6\", (String)\"5\", (String)\"1\", (String)\"6\", (String)\"1\", (String)\"2\", (String)\"3\", (String)\"4\", (String)\"6\", (String)\"9\", (String)\"1\", (String)\"2\")))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)2l, (long)2l, (long)2l, (long)2l, (long)3l, (long)3l, (long)4l, (long)4l, (long)5l, (long)6l, (long)6l, (long)6l, (long)7l, (long)8l, (long)8l, (long)9l, (long)9l)))));\n    assert(sortNumericStrings((new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"3\", (String)\"5\", (String)\"7\", (String)\"1\", (String)\"3\", (String)\"13\", (String)\"15\", (String)\"17\", (String)\"5\", (String)\"7 \", (String)\"9\", (String)\"1\", (String)\"11\")))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)3l, (long)3l, (long)5l, (long)5l, (long)7l, (long)7l, (long)9l, (long)11l, (long)13l, (long)15l, (long)17l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Convert each string element in the input array list to a long data type and store them in a new array list.\n# Sort the new array list in ascending order.\n# Convert the sorted array list back to strings and store them in a new array list.\n# Return the new array list with sorted numeric strings."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> sortNumericStrings(ArrayList<String> nums_str) {\n        ArrayList<Long> nums = new ArrayList<>();\n\n        // Convert strings to longs\n        for (String num : nums_str) {\n            nums.add(Long.parseLong(num));\n        }\n\n        // Sort the longs\n        Collections.sort(nums);\n\n        // Convert longs back to strings\n        ArrayList<String> sorted_nums_str = new ArrayList<>();\n        for (Long num : nums) {\n            sorted_nums_str.add(String.valueOf(num));\n        }\n\n        return sorted_nums_str;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/738",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-recursion-exercise-9.php\n    public static float geometricSum(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(geometricSum((7l)) == (1.9921875f));\n    assert(geometricSum((4l)) == (1.9375f));\n    assert(geometricSum((8l)) == (1.99609375f));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the value of n is less than or equal to 0\n    # If so, return 0 as the geometric sum is not defined for negative values or 0\n# Otherwise, calculate the geometric sum using the formula: 1 + 1/2 + 1/4 + 1/8 + ... + 1/(2^n)\n    # Use recursion to calculate the sum of the remaining terms\n# Return the calculated geometric sum"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static float geometricSum(long n) {\n        if (n <= 0) {\n            return 0;\n        }\n        return 1 + geometricSum(n - 1) / 2;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/745",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));\n    assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));\n    assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize an empty arraylist to store the numbers that satisfy the condition\n# Iterate through each number in the given range from startnum to endnum\n    # Convert the number to a string\n    # Check if the number is divisible by every digit it contains\n        # Iterate through each digit in the string representation of the number\n            # Check if the digit is not zero and the number is not divisible by the digit\n                # If any digit is not divisible, break out of the loop and move to the next number\n        # If all digits are divisible, add the number to the arraylist\n# Return the arraylist containing the numbers that satisfy the condition"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        \n        for (long number = startnum; number <= endnum; number++) {\n            String numberString = String.valueOf(number);\n            boolean isDivisible = true;\n            \n            for (char digitChar : numberString.toCharArray()) {\n                int digit = Character.getNumericValue(digitChar);\n                \n                if (digit != 0 && number % digit != 0) {\n                    isDivisible = false;\n                    break;\n                }\n            }\n            \n            if (isDivisible) {\n                result.add(number);\n            }\n        }\n        \n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/573",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to calculate the product of the unique numbers in a given array list.\n    public static long uniqueProduct(ArrayList<Long> list_data) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(uniqueProduct((new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)30l, (long)40l, (long)20l, (long)50l, (long)60l, (long)40l)))) == (720000000l));\n    assert(uniqueProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)1l)))) == (6l));\n    assert(uniqueProduct((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)0l, (long)1l, (long)1l)))) == (0l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a HashSet to store unique numbers\n# Initialize a variable `product` to 1\n# Iterate through each number in the input ArrayList\n    # Check if the number is already in the HashSet\n        # If it is not, add it to the HashSet and multiply it with the `product`\n# Return the `product` as the result"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long uniqueProduct(ArrayList<Long> list_data) {\n        HashSet<Long> uniqueNumbers = new HashSet<>();\n        long product = 1;\n        \n        for (long number : list_data) {\n            if (!uniqueNumbers.contains(number)) {\n                uniqueNumbers.add(number);\n                product *= number;\n            }\n        }\n        \n        return product;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/443",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the largest negative number from the given array list.\n    public static long largestNeg(ArrayList<Long> list1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(largestNeg((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)-4l, (long)-6l)))) == (-6l));\n    assert(largestNeg((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)-8l, (long)-9l)))) == (-9l));\n    assert(largestNeg((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)-1l)))) == (-1l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `largestNeg` with a value of -1\n# Iterate through each element in the input ArrayList\n    # Check if the current element is negative and larger than `largestNeg`\n        # If true, update `largestNeg` with the current element\n# Return `largestNeg`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long largestNeg(ArrayList<Long> list1) {\n        long largestNeg = -1;\n        for (long num : list1) {\n            if (num < 0 && num > largestNeg) {\n                largestNeg = num;\n            }\n        }\n        return largestNeg;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/730",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to remove consecutive duplicates of a given array list.\n    public static ArrayList<Object> consecutiveDuplicates(ArrayList<Object> nums) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(consecutiveDuplicates((new ArrayList<Object>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)4l, (long)5l, (long)6l, (long)6l, (long)6l, (long)7l, (long)8l, (long)9l, (long)4l, (long)4l)))).equals((new ArrayList<Object>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)4l)))));\n    assert(consecutiveDuplicates((new ArrayList<Object>(Arrays.asList((long)10l, (long)10l, (long)15l, (long)19l, (long)18l, (long)18l, (long)17l, (long)26l, (long)26l, (long)17l, (long)18l, (long)10l)))).equals((new ArrayList<Object>(Arrays.asList((long)10l, (long)15l, (long)19l, (long)18l, (long)17l, (long)26l, (long)17l, (long)18l, (long)10l)))));\n    assert(consecutiveDuplicates((new ArrayList<Object>(Arrays.asList((String)\"a\", (String)\"a\", (String)\"b\", (String)\"c\", (String)\"d\", (String)\"d\")))).equals((new ArrayList<Object>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\", (String)\"d\")))));\n    assert(consecutiveDuplicates((new ArrayList<Object>(Arrays.asList((String)\"a\", (String)\"a\", (String)\"b\", (String)\"c\", (String)\"d\", (String)\"d\", (String)\"a\", (String)\"a\")))).equals((new ArrayList<Object>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\", (String)\"d\", (String)\"a\")))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new ArrayList to store the modified list\n# Iterate through each element in the input ArrayList\n    # Check if the current element is equal to the next element\n        # If they are equal, continue to the next iteration\n        # If they are not equal, add the current element to the new ArrayList\n# Return the new ArrayList"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Object> consecutiveDuplicates(ArrayList<Object> nums) {\n        ArrayList<Object> result = new ArrayList<>();\n        if (nums == null || nums.size() == 0) {\n            return result;\n        }\n        \n        for (int i = 0; i < nums.size() - 1; i++) {\n            if (!nums.get(i).equals(nums.get(i + 1))) {\n                result.add(nums.get(i));\n            }\n        }\n        result.add(nums.get(nums.size() - 1));\n        \n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/617",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    public static float minJumps(Pair<Long, Long> steps, long d) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(minJumps((Pair.with(3l, 4l)), (11l)) == (3.5f));\n    assert(minJumps((Pair.with(3l, 4l)), (0l)) == (float)0l);\n    assert(minJumps((Pair.with(11l, 14l)), (11l)) == (float)1l);\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Calculate the absolute values of the x and y coordinates of the destination point\n# Divide the absolute values of the x and y coordinates by the x and y steps respectively to get the number of jumps required in each direction\n# Take the maximum of the two numbers calculated in step 2, as this represents the maximum number of jumps required in any direction\n# Round up the result to the nearest integer and return it as the minimum number of jumps required"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static float minJumps(Pair<Long, Long> steps, long d) {\n        long x = Math.abs(steps.getValue0());\n        long y = Math.abs(steps.getValue1());\n        float jumpsX = (float) x / steps.getValue0();\n        float jumpsY = (float) y / steps.getValue1();\n        float maxJumps = Math.max(jumpsX, jumpsY);\n        return (float) Math.ceil(maxJumps);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/415",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find a pair with highest product from a given array array list of integers.\n    public static Pair<Long, Long> maxProduct(ArrayList<Long> arr) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(maxProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)7l, (long)0l, (long)8l, (long)4l)))).equals((Pair.with(7l, 8l))));\n    assert(maxProduct((new ArrayList<Long>(Arrays.asList((long)0l, (long)-1l, (long)-2l, (long)-4l, (long)5l, (long)0l, (long)-6l)))).equals((Pair.with(-4l, -6l))));\n    assert(maxProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((Pair.with(2l, 3l))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize two variables to keep track of the maximum product and the pair of numbers that produce it\n# Iterate through each pair of numbers in the input array\n    # Calculate the product of the current pair of numbers\n    # If the product is greater than the maximum product found so far, update the maximum product and the pair of numbers\n# Return the pair of numbers that produce the maximum product"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Pair<Long, Long> maxProduct(ArrayList<Long> arr) {\n        long maxProduct = Long.MIN_VALUE;\n        Pair<Long, Long> maxProductPair = null;\n\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                long product = arr.get(i) * arr.get(j);\n                if (product > maxProduct) {\n                    maxProduct = product;\n                    maxProductPair = new Pair<Long, Long>(arr.get(i), arr.get(j));\n                }\n            }\n        }\n\n        return maxProductPair;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/413",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to extract the nth element from a given array list of pairs.\n    public static ArrayList<Object> extractNthElement(ArrayList<Pair<String, Long, Long>> list1, long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(extractNthElement((new ArrayList<Pair<String, Long, Long>>(Arrays.asList((Pair<String, Long, Long>)Pair.with(\"Greyson Fulton\", 98l, 99l), (Pair<String, Long, Long>)Pair.with(\"Brady Kent\", 97l, 96l), (Pair<String, Long, Long>)Pair.with(\"Wyatt Knott\", 91l, 94l), (Pair<String, Long, Long>)Pair.with(\"Beau Turnbull\", 94l, 98l)))), (0l)).equals((new ArrayList<Object>(Arrays.asList((String)\"Greyson Fulton\", (String)\"Brady Kent\", (String)\"Wyatt Knott\", (String)\"Beau Turnbull\")))));\n    assert(extractNthElement((new ArrayList<Pair<String, Long, Long>>(Arrays.asList((Pair<String, Long, Long>)Pair.with(\"Greyson Fulton\", 98l, 99l), (Pair<String, Long, Long>)Pair.with(\"Brady Kent\", 97l, 96l), (Pair<String, Long, Long>)Pair.with(\"Wyatt Knott\", 91l, 94l), (Pair<String, Long, Long>)Pair.with(\"Beau Turnbull\", 94l, 98l)))), (2l)).equals((new ArrayList<Object>(Arrays.asList((long)99l, (long)96l, (long)94l, (long)98l)))));\n    assert(extractNthElement((new ArrayList<Pair<String, Long, Long>>(Arrays.asList((Pair<String, Long, Long>)Pair.with(\"Greyson Fulton\", 98l, 99l), (Pair<String, Long, Long>)Pair.with(\"Brady Kent\", 97l, 96l), (Pair<String, Long, Long>)Pair.with(\"Wyatt Knott\", 91l, 94l), (Pair<String, Long, Long>)Pair.with(\"Beau Turnbull\", 94l, 98l)))), (1l)).equals((new ArrayList<Object>(Arrays.asList((long)98l, (long)97l, (long)91l, (long)94l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input list is null or empty\n# Initialize an empty ArrayList to store the extracted elements\n# Iterate through each pair in the input list\n    # Check if the index of the current pair is equal to n\n        # If it is, add the pair to the result list\n# Return the result list"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Object> extractNthElement(ArrayList<Pair<String, Long, Long>> list1, long n) {\n        ArrayList<Object> result = new ArrayList<>();\n        \n        if (list1 == null || list1.isEmpty()) {\n            return result;\n        }\n        \n        for (Pair<String, Long, Long> pair : list1) {\n            if (pair.getValue1() == n) {\n                result.add(pair);\n            }\n        }\n        \n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/641",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the nth nonagonal number.\n    public static long isNonagonal(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(isNonagonal((10l)) == (325l));\n    assert(isNonagonal((15l)) == (750l));\n    assert(isNonagonal((18l)) == (1089l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Calculate the nth nonagonal number using the formula: Nonagonal number = n * (7 * n - 5) / 2\n# Return the calculated nonagonal number"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long isNonagonal(long n) {\n        return n * (7 * n - 5) / 2;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/145",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the maximum difference between any two elements in a given array array list.\n    public static long maxAbsDiff(ArrayList<Long> arr) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(maxAbsDiff((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)5l, (long)3l)))) == (4l));\n    assert(maxAbsDiff((new ArrayList<Long>(Arrays.asList((long)9l, (long)3l, (long)2l, (long)5l, (long)1l)))) == (8l));\n    assert(maxAbsDiff((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (2l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input array is null or empty. If it is, return 0.\n# Initialize two variables `maxDiff` and `minElement` to track the maximum difference and the minimum element in the array.\n# Iterate through each element in the array:\n    # If the current element is greater than `minElement`, calculate the difference between the current element and `minElement` and update `maxDiff` if necessary.\n    # If the current element is smaller than `minElement`, update `minElement` to the current element.\n# Return `maxDiff`."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long maxAbsDiff(ArrayList<Long> arr) {\n        if (arr == null || arr.isEmpty()) {\n            return 0;\n        }\n        \n        long maxDiff = 0;\n        long minElement = arr.get(0);\n        \n        for (int i = 1; i < arr.size(); i++) {\n            long currentElement = arr.get(i);\n            \n            if (currentElement > minElement) {\n                maxDiff = Math.max(maxDiff, currentElement - minElement);\n            } else {\n                minElement = currentElement;\n            }\n        }\n        \n        return maxDiff;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/778",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to pack consecutive duplicates of a given array list elements into subarray lists.\n    public static ArrayList<ArrayList<Object>> packConsecutiveDuplicates(ArrayList<Object> list1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(packConsecutiveDuplicates((new ArrayList<Object>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)4l, (long)5l, (long)6l, (long)6l, (long)6l, (long)7l, (long)8l, (long)9l, (long)4l, (long)4l)))).equals((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)6l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))))));\n    assert(packConsecutiveDuplicates((new ArrayList<Object>(Arrays.asList((long)10l, (long)10l, (long)15l, (long)19l, (long)18l, (long)18l, (long)17l, (long)26l, (long)26l, (long)17l, (long)18l, (long)10l)))).equals((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)15l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)19l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)18l, (long)18l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)17l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)26l, (long)26l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)17l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)18l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l)))))));\n    assert(packConsecutiveDuplicates((new ArrayList<Object>(Arrays.asList((String)\"a\", (String)\"a\", (String)\"b\", (String)\"c\", (String)\"d\", (String)\"d\")))).equals((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"a\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"b\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"c\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"d\", (String)\"d\")))))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create an empty list to store the subarray lists\n# Create a variable to store the current element being checked\n# Create an empty subarray list\n# Iterate through each element in the input list\n    # If the current element is equal to the previous element\n        # Add the current element to the subarray list\n    # If the current element is not equal to the previous element\n        # Add the subarray list to the list of subarray lists\n        # Create a new subarray list with the current element\n    # Update the current element with the current element being checked\n# Add the last subarray list to the list of subarray lists\n# Return the list of subarray lists"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<ArrayList<Object>> packConsecutiveDuplicates(ArrayList<Object> list1) {\n        ArrayList<ArrayList<Object>> result = new ArrayList<>();\n        if (list1 == null || list1.isEmpty()) {\n            return result;\n        }\n        \n        ArrayList<Object> subList = new ArrayList<>();\n        Object current = list1.get(0);\n        subList.add(current);\n        \n        for (int i = 1; i < list1.size(); i++) {\n            Object element = list1.get(i);\n            if (element.equals(current)) {\n                subList.add(element);\n            } else {\n                result.add(subList);\n                subList = new ArrayList<>();\n                subList.add(element);\n                current = element;\n            }\n        }\n        \n        result.add(subList);\n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/448",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to calculate the sum of perrin numbers.\n    public static long calSum(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(calSum((9l)) == (49l));\n    assert(calSum((10l)) == (66l));\n    assert(calSum((11l)) == (88l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize three variables `p0`, `p1`, and `p2` with values 3, 0, and 2 respectively\n# Initialize a variable `sum` with the initial value of `p0`\n# Iterate `i` from 3 to `n`\n    # Calculate the next Perrin number `p` as the sum of the previous three numbers (`p0`, `p1`, and `p2`)\n    # Add `p` to the `sum`\n    # Update the values of `p0`, `p1`, and `p2` by shifting them one position to the right\n# Return the value of `sum` as the sum of the Perrin numbers up to `n`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long calSum(long n) {\n        if (n <= 0) {\n            return 0;\n        }\n        if (n <= 2) {\n            return n;\n        }\n        long p0 = 3;\n        long p1 = 0;\n        long p2 = 2;\n        long sum = p0;\n        for (long i = 3; i <= n; i++) {\n            long p = p0 + p1;\n            sum += p;\n            p0 = p1;\n            p1 = p2;\n            p2 = p;\n        }\n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/226",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to remove the characters which have odd index values of a given string.\n    public static String oddValuesString(String str) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(oddValuesString((\"abcdef\")).equals((\"ace\")));\n    assert(oddValuesString((\"python\")).equals((\"pto\")));\n    assert(oddValuesString((\"data\")).equals((\"dt\")));\n    assert(oddValuesString((\"lambs\")).equals((\"lms\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a StringBuilder object to store the modified string\n# Iterate through each character and its index in the input string\n    # Check if the index is odd\n        # If the index is odd, skip the character and continue to the next iteration\n        # If the index is even, append the character to the StringBuilder object\n# Convert the StringBuilder object to a string and return it"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String oddValuesString(String str) {\n        StringBuilder modifiedString = new StringBuilder();\n        for (int i = 0; i < str.length(); i++) {\n            if (i % 2 != 0) {\n                continue;\n            }\n            modifiedString.append(str.charAt(i));\n        }\n        return modifiedString.toString();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/597",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find kth element from the given two sorted array array lists.\n    public static long findKth(ArrayList<Long> arr1, ArrayList<Long> arr2, long k) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(findKth((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)6l, (long)7l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)8l, (long)10l))), (5l)) == (6l));\n    assert(findKth((new ArrayList<Long>(Arrays.asList((long)100l, (long)112l, (long)256l, (long)349l, (long)770l))), (new ArrayList<Long>(Arrays.asList((long)72l, (long)86l, (long)113l, (long)119l, (long)265l, (long)445l, (long)892l))), (7l)) == (256l));\n    assert(findKth((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)7l, (long)8l, (long)10l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)9l, (long)11l))), (6l)) == (8l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Merge the two sorted array lists into a single sorted array list\n# Check if the value of k is within the valid range for the merged array list\n    # If k is greater than the size of the merged array list, return -1\n# Return the element at index k-1 from the merged array list"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long findKth(ArrayList<Long> arr1, ArrayList<Long> arr2, long k) {\n        ArrayList<Long> mergedList = new ArrayList<>();\n        mergedList.addAll(arr1);\n        mergedList.addAll(arr2);\n        Collections.sort(mergedList);\n\n        if (k > mergedList.size()) {\n            return -1;\n        }\n\n        return mergedList.get((int) k - 1);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/752",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long jacobsthalNum(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(jacobsthalNum((5l)) == (11l));\n    assert(jacobsthalNum((2l)) == (1l));\n    assert(jacobsthalNum((4l)) == (5l));\n    assert(jacobsthalNum((13l)) == (2731l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input number is less than or equal to 0\n    # If so, return 0\n# Check if the input number is equal to 1\n    # If so, return 1\n# Initialize two variables `a` and `b` with values 0 and 1 respectively\n# Loop from 2 to n\n    # Update `a` to the current value of `b`\n    # Update `b` to the sum of `b` and twice the value of `a`\n# Return the value of `b`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long jacobsthalNum(long n) {\n        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        long a = 0;\n        long b = 1;\n        for (int i = 2; i <= n; i++) {\n            long temp = b;\n            b = b + 2 * a;\n            a = temp;\n        }\n        return b;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/97",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened array list of array lists, returned in a hash map.\n    public static HashMap<Long,Long> frequencyLists(ArrayList<ArrayList<Long>> list1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(frequencyLists((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)5l)))))).equals((new HashMap<Long,Long>(Map.of(1l, 1l, 2l, 3l, 3l, 1l, 4l, 1l, 5l, 2l, 6l, 1l, 7l, 1l, 8l, 1l, 9l, 1l)))));\n    assert(frequencyLists((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)11l, (long)12l)))))).equals((new HashMap<Long,Long>(Map.of(1l, 1l, 2l, 1l, 3l, 1l, 4l, 1l, 5l, 1l, 6l, 1l, 7l, 1l, 8l, 1l, 9l, 1l, 10l, 1l, 11l, 1l, 12l, 1l)))));\n    assert(frequencyLists((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)20l, (long)30l, (long)40l, (long)17l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)18l, (long)16l, (long)14l, (long)13l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)30l, (long)40l)))))).equals((new HashMap<Long,Long>(Map.of(20l, 2l, 30l, 2l, 40l, 2l, 17l, 1l, 18l, 1l, 16l, 1l, 14l, 1l, 13l, 1l, 10l, 1l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new HashMap to store the frequency of each element\n# Iterate through each sublist in the input list\n    # Iterate through each element in the sublist\n        # Check if the element already exists in the HashMap\n            # If it does, increment its frequency by 1\n            # If it doesn't, add it to the HashMap with a frequency of 1\n# Return the HashMap with the frequency of each element in the flattened list"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static HashMap<Long, Long> frequencyLists(ArrayList<ArrayList<Long>> list1) {\n        HashMap<Long, Long> frequencyMap = new HashMap<Long, Long>();\n\n        for (ArrayList<Long> sublist : list1) {\n            for (Long element : sublist) {\n                if (frequencyMap.containsKey(element)) {\n                    frequencyMap.put(element, frequencyMap.get(element) + 1);\n                } else {\n                    frequencyMap.put(element, 1L);\n                }\n            }\n        }\n\n        return frequencyMap;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/589",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find perfect squares between two given numbers.\n    public static ArrayList<Long> perfectSquares(long a, long b) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(perfectSquares((1l), (30l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)9l, (long)16l, (long)25l)))));\n    assert(perfectSquares((50l), (100l)).equals((new ArrayList<Long>(Arrays.asList((long)64l, (long)81l, (long)100l)))));\n    assert(perfectSquares((100l), (200l)).equals((new ArrayList<Long>(Arrays.asList((long)100l, (long)121l, (long)144l, (long)169l, (long)196l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize an empty ArrayList to store the perfect squares\n# Iterate through each number between a and b (inclusive)\n    # Check if the square root of the current number is an integer\n        # If it is, add the current number to the ArrayList\n# Return the ArrayList of perfect squares"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> perfectSquares(long a, long b) {\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = a; i <= b; i++) {\n            if (isPerfectSquare(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n    \n    public static boolean isPerfectSquare(long num) {\n        long sqrt = (long) Math.sqrt(num);\n        return sqrt * sqrt == num;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/734",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find sum of products of all possible subarray lists of a given array list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarray array lists/\n    public static long sumOfSubarrayProd(ArrayList<Long> arr) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(sumOfSubarrayProd((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (20l));\n    assert(sumOfSubarrayProd((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))) == (5l));\n    assert(sumOfSubarrayProd((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) == (84l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `sum` to store the sum of products\n# Iterate through each starting index `i` from 0 to the length of the array list\n    # Iterate through each ending index `j` from `i` to the length of the array list\n        # Initialize a variable `prod` to store the product of the subarray from index `i` to index `j`\n        # Iterate through each element `num` in the subarray from index `i` to index `j`\n            # Multiply `prod` with `num`\n        # Add `prod` to `sum`\n# Return the value of `sum`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long sumOfSubarrayProd(ArrayList<Long> arr) {\n        long sum = 0;\n        int n = arr.size();\n        \n        for (int i = 0; i < n; i++) {\n            long prod = 1;\n            for (int j = i; j < n; j++) {\n                prod *= arr.get(j);\n                sum += prod;\n            }\n        }\n        \n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/807",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the first odd number in a given array list of numbers.\n    public static long firstOdd(ArrayList<Long> nums) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(firstOdd((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)))) == (1l));\n    assert(firstOdd((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l)))) == (1l));\n    assert(firstOdd((new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)1l)))) == (9l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Iterate through each number in the input array list\n    # Check if the current number is odd\n        # If it is odd, return it\n# If no odd number is found, return -1"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long firstOdd(ArrayList<Long> nums) {\n        for (long num : nums) {\n            if (num % 2 != 0) {\n                return num;\n            }\n        }\n        return -1;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/401",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to perform index wise addition of array list elements in the given two nested array lists.\n    public static ArrayList<ArrayList<Long>> addNestedTuples(ArrayList<ArrayList<Long>> test_tup1, ArrayList<ArrayList<Long>> test_tup2) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(addNestedTuples((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)10l))))), (new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)14l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)13l)))))));\n    assert(addNestedTuples((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)11l))))), (new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)12l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)16l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)12l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)15l)))))));\n    assert(addNestedTuples((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)11l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)12l))))), (new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)11l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)11l, (long)14l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)11l, (long)18l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)14l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)12l, (long)17l)))))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new ArrayList to store the result of the addition\n# Iterate through each nested ArrayList in the input ArrayLists (test_tup1 and test_tup2)\n    # Create a new ArrayList to store the result of the nested addition\n    # Iterate through each element in the nested ArrayLists and perform the addition\n        # Add the corresponding elements from test_tup1 and test_tup2 and store the result in the new ArrayList\n    # Add the new ArrayList to the result ArrayList\n# Return the result ArrayList containing the index-wise addition of the nested elements"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<ArrayList<Long>> addNestedTuples(ArrayList<ArrayList<Long>> test_tup1, ArrayList<ArrayList<Long>> test_tup2) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n\n        for (int i = 0; i < test_tup1.size(); i++) {\n            ArrayList<Long> nestedResult = new ArrayList<>();\n            ArrayList<Long> nestedList1 = test_tup1.get(i);\n            ArrayList<Long> nestedList2 = test_tup2.get(i);\n\n            for (int j = 0; j < nestedList1.size(); j++) {\n                long sum = nestedList1.get(j) + nestedList2.get(j);\n                nestedResult.add(sum);\n            }\n\n            result.add(nestedResult);\n        }\n\n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/612",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function which takes an array array list of array lists, where each subarray list has two elements, and returns an array array list of two array lists where the first array list has the first element of each subarray list and the second one has the second.\n    public static ArrayList<ArrayList<Object>> merge(ArrayList<ArrayList<Object>> lst) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(merge((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"m\", (String)\"n\")))))).equals((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"a\", (String)\"m\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"y\", (String)\"b\", (String)\"n\")))))));\n    assert(merge((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l)))))).equals((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))))));\n    assert(merge((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"m\", (String)\"n\", (String)\"o\")))))).equals((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"a\", (String)\"m\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"y\", (String)\"b\", (String)\"n\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"z\", (String)\"c\", (String)\"o\")))))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create two new ArrayLists, one for the first elements and one for the second elements\n# Iterate through each subarray list in the input ArrayList\n    # Get the first and second elements from the subarray list\n    # Add the first element to the first elements ArrayList\n    # Add the second element to the second elements ArrayList\n# Create a new ArrayList that contains the first elements ArrayList and the second elements ArrayList\n# Return the new ArrayList"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<ArrayList<Object>> merge(ArrayList<ArrayList<Object>> lst) {\n        ArrayList<Object> firstElements = new ArrayList<>();\n        ArrayList<Object> secondElements = new ArrayList<>();\n\n        for (ArrayList<Object> subList : lst) {\n            firstElements.add(subList.get(0));\n            secondElements.add(subList.get(1));\n        }\n\n        ArrayList<ArrayList<Object>> result = new ArrayList<>();\n        result.add(firstElements);\n        result.add(secondElements);\n\n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/72",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to check whether the given number can be represented as the difference of two squares or not.\n    public static boolean difSquare(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the given number is less than 0, if so return false\n# Iterate through each number from 0 to the square root of the given number\n    # Calculate the square of the current number\n    # Calculate the difference between the given number and the square\n    # Check if the difference is a perfect square\n        # If so, return true\n# If no difference is found, return false"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean difSquare(long n) {\n        if (n < 0) {\n            return false;\n        }\n        for (int i = 0; i <= Math.sqrt(n); i++) {\n            long square = i * i;\n            long difference = n - square;\n            if (isPerfectSquare(difference)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static boolean isPerfectSquare(long num) {\n        long sqrt = (long) Math.sqrt(num);\n        return sqrt * sqrt == num;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/809",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if each element of second pair is smaller than its corresponding element in the first pair.\n    public static boolean checkSmaller(Pair<Long, Long, Long> test_tup1, Pair<Long, Long, Long> test_tup2) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(checkSmaller((Pair.with(1l, 2l, 3l)), (Pair.with(2l, 3l, 4l))) == (false));\n    assert(checkSmaller((Pair.with(4l, 5l, 6l)), (Pair.with(3l, 4l, 5l))) == (true));\n    assert(checkSmaller((Pair.with(11l, 12l, 13l)), (Pair.with(10l, 11l, 12l))) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Compare the elements of the second pair with their corresponding elements in the first pair.\n    # If any element in the second pair is greater than or equal to its corresponding element in the first pair, return false.\n# If all elements in the second pair are smaller than their corresponding elements in the first pair, return true."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean checkSmaller(Pair<Long, Long, Long> test_tup1, Pair<Long, Long, Long> test_tup2) {\n        if (test_tup1.getValue0() <= test_tup2.getValue0() ||\n            test_tup1.getValue1() <= test_tup2.getValue1() ||\n            test_tup1.getValue2() <= test_tup2.getValue2()) {\n            return false;\n        }\n        return true;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/88",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to get the frequency of all the elements in an array array list, returned as a hash map.\n    public static HashMap<Long,Long> freqCount(ArrayList<Long> list1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(freqCount((new ArrayList<Long>(Arrays.asList((long)10l, (long)10l, (long)10l, (long)10l, (long)20l, (long)20l, (long)20l, (long)20l, (long)40l, (long)40l, (long)50l, (long)50l, (long)30l)))).equals((new HashMap<Long,Long>(Map.of(10l, 4l, 20l, 4l, 40l, 2l, 50l, 2l, 30l, 1l)))));\n    assert(freqCount((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)4l, (long)1l, (long)3l, (long)1l, (long)4l)))).equals((new HashMap<Long,Long>(Map.of(1l, 3l, 2l, 2l, 3l, 3l, 4l, 3l)))));\n    assert(freqCount((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)4l, (long)9l, (long)10l, (long)4l, (long)5l, (long)6l, (long)7l, (long)9l, (long)5l)))).equals((new HashMap<Long,Long>(Map.of(10l, 1l, 5l, 3l, 6l, 2l, 7l, 2l, 4l, 2l, 9l, 2l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a HashMap to store the frequency count of each element in the ArrayList\n# Iterate through each element in the ArrayList\n    # If the element is already present in the HashMap, increment its frequency by 1\n    # If the element is not present in the HashMap, add it as a new key with a frequency of 1\n# Return the HashMap"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static HashMap<Long, Long> freqCount(ArrayList<Long> list1) {\n        HashMap<Long, Long> freqMap = new HashMap<>();\n        for (Long num : list1) {\n            if (freqMap.containsKey(num)) {\n                freqMap.put(num, freqMap.get(num) + 1);\n            } else {\n                freqMap.put(num, 1L);\n            }\n        }\n        return freqMap;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/783",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    public static ArrayList<Float> rgbToHsv(long r, long g, long b) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(rgbToHsv((255l), (255l), (255l)).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.0f, (float)100.0f)))));\n    assert(rgbToHsv((0l), (215l), (0l)).equals((new ArrayList<Float>(Arrays.asList((float)120.0f, (float)100.0f, (float)84.31372549019608f)))));\n    assert(rgbToHsv((10l), (215l), (110l)).equals((new ArrayList<Float>(Arrays.asList((float)149.26829268292684f, (float)95.34883720930233f, (float)84.31372549019608f)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Convert the RGB values to the range of 0-1 by dividing them by 255\n# Find the maximum and minimum values among the RGB values\n# Calculate the value (V) as the maximum value\n# Calculate the saturation (S) as (max - min) / max\n# Calculate the hue (H) based on the maximum value\n    # If the maximum value is equal to the red value, calculate H as (g - b) / (max - min)\n    # If the maximum value is equal to the green value, calculate H as 2 + (b - r) / (max - min)\n    # If the maximum value is equal to the blue value, calculate H as 4 + (r - g) / (max - min)\n# Adjust the hue (H) to be in the range of 0-360 by multiplying it by 60 and adding 360 if it is negative\n# Return the calculated H, S, and V values as an ArrayList of Floats"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Float> rgbToHsv(long r, long g, long b) {\n        // Convert RGB values to the range of 0-1\n        float red = (float) r / 255;\n        float green = (float) g / 255;\n        float blue = (float) b / 255;\n\n        // Find the maximum and minimum values among RGB values\n        float max = Math.max(red, Math.max(green, blue));\n        float min = Math.min(red, Math.min(green, blue));\n\n        // Calculate value (V)\n        float value = max;\n\n        // Calculate saturation (S)\n        float saturation = (max - min) / max;\n\n        // Calculate hue (H)\n        float hue = 0;\n        if (max == red) {\n            hue = (green - blue) / (max - min);\n        } else if (max == green) {\n            hue = 2 + (blue - red) / (max - min);\n        } else if (max == blue) {\n            hue = 4 + (red - green) / (max - min);\n        }\n\n        // Adjust hue (H) to be in the range of 0-360\n        hue *= 60;\n        if (hue < 0) {\n            hue += 360;\n        }\n\n        // Return H, S, and V values as ArrayList of Floats\n        ArrayList<Float> hsv = new ArrayList<>();\n        hsv.add(hue);\n        hsv.add(saturation);\n        hsv.add(value);\n        return hsv;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/737",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check whether the given string is starting with a vowel or not using regex.\n    public static boolean checkStr(String string) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(checkStr((\"annie\")) == (true));\n    assert(checkStr((\"dawood\")) == (false));\n    assert(checkStr((\"Else\")) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Use a regular expression to check if the given string starts with a vowel\n# Return true if it matches the regular expression, indicating that the string starts with a vowel\n# Return false otherwise"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.regex.*;\n\nclass Problem {\n    public static boolean checkStr(String string) {\n        String regex = \"^[aeiouAEIOU].*\";\n        return Pattern.matches(regex, string);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/762",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    public static boolean checkMonthnumberNumber(long monthnum3) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(checkMonthnumberNumber((6l)) == (true));\n    assert(checkMonthnumberNumber((2l)) == (false));\n    assert(checkMonthnumberNumber((12l)) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the given month number is between 1 and 12 (inclusive)\n# If the month number is either 4, 6, 9, or 11, return false (as these months have 30 days)\n# Otherwise, return true (as all other months have either 31 or 28/29 days)"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean checkMonthnumberNumber(long monthnum3) {\n        if (monthnum3 >= 1 && monthnum3 <= 12) {\n            return monthnum3 != 4 && monthnum3 != 6 && monthnum3 != 9 && monthnum3 != 11;\n        }\n        return false;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/635",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to sort the given array list.\n    public static ArrayList<Long> heapSort(ArrayList<Long> iterable) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(heapSort((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)7l, (long)9l, (long)2l, (long)4l, (long)6l, (long)8l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(heapSort((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)25l, (long)58l)))).equals((new ArrayList<Long>(Arrays.asList((long)14l, (long)22l, (long)25l, (long)25l, (long)35l, (long)58l, (long)65l, (long)75l, (long)85l)))));\n    assert(heapSort((new ArrayList<Long>(Arrays.asList((long)7l, (long)1l, (long)9l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)7l, (long)9l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Convert the input ArrayList to an array of type Long\n# Build a max heap using the array\n    # Start from the first non-leaf node and heapify down each node\n# Extract the maximum element from the heap and swap it with the last element in the array\n# Reduce the heap size by 1\n# Repeat steps 3 and 4 until the heap is empty\n# Convert the sorted array back to an ArrayList and return it"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> heapSort(ArrayList<Long> iterable) {\n        Long[] arr = iterable.toArray(new Long[iterable.size()]);\n        int n = arr.length;\n\n        // Build max heap\n        for (int i = n / 2 - 1; i >= 0; i--) {\n            heapify(arr, n, i);\n        }\n\n        // Extract elements from heap one by one\n        for (int i = n - 1; i >= 0; i--) {\n            // Move current root to end\n            long temp = arr[0];\n            arr[0] = arr[i];\n            arr[i] = temp;\n\n            // Call max heapify on the reduced heap\n            heapify(arr, i, 0);\n        }\n\n        // Convert array back to ArrayList\n        ArrayList<Long> sortedList = new ArrayList<>(Arrays.asList(arr));\n        return sortedList;\n    }\n\n    public static void heapify(Long[] arr, int n, int i) {\n        int largest = i; // Initialize largest as root\n        int left = 2 * i + 1; // Left child\n        int right = 2 * i + 2; // Right child\n\n        // If left child is larger than root\n        if (left < n && arr[left] > arr[largest]) {\n            largest = left;\n        }\n\n        // If right child is larger than largest so far\n        if (right < n && arr[right] > arr[largest]) {\n            largest = right;\n        }\n\n        // If largest is not root\n        if (largest != i) {\n            long swap = arr[i];\n            arr[i] = arr[largest];\n            arr[largest] = swap;\n\n            // Recursively heapify the affected sub-tree\n            heapify(arr, n, largest);\n        }\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/408",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a priority queue to store the smallest pairs\n# Iterate through each number in nums1\n    # Iterate through each number in nums2\n        # Calculate the sum of the current pair of numbers\n        # Add the pair to the priority queue\n# Create a new list to store the k smallest pairs\n# Iterate k times or until the priority queue is empty\n    # Remove the smallest pair from the priority queue\n    # Add the pair to the new list\n# Return the new list of k smallest pairs"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>((a, b) -> (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1)));\n\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(num1);\n                pair.add(num2);\n                pq.add(pair);\n            }\n        }\n\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            result.add(pq.poll());\n        }\n\n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/160",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a pair, or return null if no solution exists.\n    public static Optional<Pair<Long, Long>> findSolution(long a, long b, long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(findSolution((2l), (3l), (7l)).equals(Optional.of(Pair.with(2l, 1l))));\n    assert(findSolution((4l), (2l), (7l)).equals(Optional.empty()));\n    assert(findSolution((1l), (13l), (17l)).equals(Optional.of(Pair.with(4l, 1l))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the given values of `a`, `b`, and `n` are valid (i.e., `a` and `b` should not be zero)\n# If `n` is divisible by the greatest common divisor (gcd) of `a` and `b`, a solution exists\n    # Use the extended Euclidean algorithm to find the coefficients of `a` and `b` that satisfy `ax + by = gcd(a, b)`\n    # Multiply both sides of the equation by `n / gcd(a, b)` to obtain a solution for `ax + by = n`\n        # Let `x' = x * (n / gcd(a, b))` and `y' = y * (n / gcd(a, b))`\n        # Return the pair (`x'`, `y'`)\n# If `n` is not divisible by the gcd of `a` and `b`, no solution exists. Return `null`."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Optional<Pair<Long, Long>> findSolution(long a, long b, long n) {\n        if (a == 0 && b == 0) {\n            return Optional.empty();\n        }\n\n        long gcd = gcd(a, b);\n        if (n % gcd == 0) {\n            long x = extendedEuclidean(a, b)[0] * (n / gcd);\n            long y = extendedEuclidean(a, b)[1] * (n / gcd);\n            return Optional.of(Pair.with(x, y));\n        } else {\n            return Optional.empty();\n        }\n    }\n\n    public static long gcd(long a, long b) {\n        if (b == 0) {\n            return a;\n        }\n        return gcd(b, a % b);\n    }\n\n    public static long[] extendedEuclidean(long a, long b) {\n        if (b == 0) {\n            return new long[]{1, 0};\n        }\n\n        long[] coefficients = extendedEuclidean(b, a % b);\n        long x = coefficients[1];\n        long y = coefficients[0] - (a / b) * coefficients[1];\n        return new long[]{x, y};\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/57",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the largest number that can be formed with the given array list of digits.\n    public static long findMaxNum(ArrayList<Long> arr) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(findMaxNum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (321l));\n    assert(findMaxNum((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)1l)))) == (6541l));\n    assert(findMaxNum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)9l)))) == (9321l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Sort the array list in descending order to get the largest number possible.\n# Convert the sorted array list to a string.\n# Parse the string to a long data type and return the result."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long findMaxNum(ArrayList<Long> arr) {\n        Collections.sort(arr, Collections.reverseOrder());\n        StringBuilder sb = new StringBuilder();\n        for (Long num : arr) {\n            sb.append(num);\n        }\n        String numStr = sb.toString();\n        return Long.parseLong(numStr);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/805",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that returns the array list in an array array list of array lists whose sum of elements is the highest.\n    public static ArrayList<Long> maxSumList(ArrayList<ArrayList<Long>> lists) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(maxSumList((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)12l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))).equals((new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)12l)))));\n    assert(maxSumList((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)12l, (long)11l, (long)10l)))))).equals((new ArrayList<Long>(Arrays.asList((long)12l, (long)11l, (long)10l)))));\n    assert(maxSumList((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l)))))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `maxSum` to keep track of the maximum sum found so far, and set it to `Long.MIN_VALUE`\n# Initialize a variable `maxSumList` to keep track of the list with the maximum sum, and set it to `null`\n# Iterate through each list in the input `lists`\n    # Calculate the sum of elements in the current list\n    # If the sum is greater than `maxSum`\n        # Update `maxSum` to the new maximum sum\n        # Update `maxSumList` to the current list\n# Return `maxSumList`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> maxSumList(ArrayList<ArrayList<Long>> lists) {\n        long maxSum = Long.MIN_VALUE;\n        ArrayList<Long> maxSumList = null;\n\n        for (ArrayList<Long> list : lists) {\n            long sum = list.stream().mapToLong(Long::valueOf).sum();\n            if (sum > maxSum) {\n                maxSum = sum;\n                maxSumList = list;\n            }\n        }\n\n        return maxSumList;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/591",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to interchange the first and last elements in an array array list.\n    public static ArrayList<Long> swapList(ArrayList<Long> newList) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(swapList((new ArrayList<Long>(Arrays.asList((long)12l, (long)35l, (long)9l, (long)56l, (long)24l)))).equals((new ArrayList<Long>(Arrays.asList((long)24l, (long)35l, (long)9l, (long)56l, (long)12l)))));\n    assert(swapList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))));\n    assert(swapList((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input `newList` is null or empty\n# If the `newList` has only one element, return the same list\n# Swap the first element with the last element in the `newList`\n# Return the modified `newList`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> swapList(ArrayList<Long> newList) {\n        if (newList == null || newList.isEmpty()) {\n            return null;\n        }\n        \n        if (newList.size() == 1) {\n            return newList;\n        }\n        \n        long firstElement = newList.get(0);\n        long lastElement = newList.get(newList.size() - 1);\n        \n        newList.set(0, lastElement);\n        newList.set(newList.size() - 1, firstElement);\n        \n        return newList;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/622",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of two sorted array lists of same size.\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));\n    assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Merge the two sorted array lists into a single sorted array list\n# Calculate the middle index of the merged array list\n# If the length of the merged array list is odd, return the value at the middle index\n# If the length of the merged array list is even, return the average of the values at the middle index and the index before it"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        ArrayList<Long> merged = new ArrayList<>();\n        merged.addAll(arr1);\n        merged.addAll(arr2);\n        Collections.sort(merged);\n        int middleIndex = merged.size() / 2;\n        \n        if (merged.size() % 2 == 1) {\n            return merged.get(middleIndex);\n        } else {\n            long value1 = merged.get(middleIndex);\n            long value2 = merged.get(middleIndex - 1);\n            return (float) (value1 + value2) / 2;\n        }\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/631",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    public static String replaceSpaces(String text) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(replaceSpaces((\"Jumanji The Jungle\")).equals((\"Jumanji_The_Jungle\")));\n    assert(replaceSpaces((\"The_Avengers\")).equals((\"The Avengers\")));\n    assert(replaceSpaces((\"Fast and Furious\")).equals((\"Fast_and_Furious\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input string is null or empty\n# Iterate through each character in the input string\n    # If the current character is a whitespace, replace it with an underscore\n    # If the current character is an underscore, replace it with a whitespace\n    # If the current character is neither a whitespace nor an underscore, leave it as is\n# Return the modified string"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String replaceSpaces(String text) {\n        if (text == null || text.isEmpty()) {\n            return text;\n        }\n        \n        StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                sb.append('_');\n            } else if (c == '_') {\n                sb.append(' ');\n            } else {\n                sb.append(c);\n            }\n        }\n        \n        return sb.toString();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/164",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to determine if the sum of the divisors of two integers are the same.\n    public static boolean areEquivalent(long num1, long num2) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(areEquivalent((36l), (57l)) == (false));\n    assert(areEquivalent((2l), (4l)) == (false));\n    assert(areEquivalent((23l), (47l)) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a helper method to calculate the sum of divisors for a given number\n# Calculate the sum of divisors for both num1 and num2 using the helper method\n# Compare the sums of divisors for num1 and num2\n# If the sums are equal, return true\n# Otherwise, return false"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean areEquivalent(long num1, long num2) {\n        return sumOfDivisors(num1) == sumOfDivisors(num2);\n    }\n\n    public static long sumOfDivisors(long num) {\n        long sum = 0;\n        for (long i = 1; i <= num; i++) {\n            if (num % i == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/456",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to reverse each string in a given array list of string values.\n    public static ArrayList<String> reverseStringList(ArrayList<String> stringlist) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(reverseStringList((new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Green\", (String)\"Blue\", (String)\"White\", (String)\"Black\")))).equals((new ArrayList<String>(Arrays.asList((String)\"deR\", (String)\"neerG\", (String)\"eulB\", (String)\"etihW\", (String)\"kcalB\")))));\n    assert(reverseStringList((new ArrayList<String>(Arrays.asList((String)\"john\", (String)\"amal\", (String)\"joel\", (String)\"george\")))).equals((new ArrayList<String>(Arrays.asList((String)\"nhoj\", (String)\"lama\", (String)\"leoj\", (String)\"egroeg\")))));\n    assert(reverseStringList((new ArrayList<String>(Arrays.asList((String)\"jack\", (String)\"john\", (String)\"mary\")))).equals((new ArrayList<String>(Arrays.asList((String)\"kcaj\", (String)\"nhoj\", (String)\"yram\")))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new ArrayList to store the reversed strings\n# Iterate through each string in the input ArrayList\n    # Reverse the current string using the reverse() method of the StringBuilder class\n    # Add the reversed string to the new ArrayList\n# Return the new ArrayList with the reversed strings"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<String> reverseStringList(ArrayList<String> stringList) {\n        ArrayList<String> reversedList = new ArrayList<>();\n        \n        for (String str : stringList) {\n            StringBuilder sb = new StringBuilder(str);\n            sb.reverse();\n            reversedList.add(sb.toString());\n        }\n        \n        return reversedList;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/398",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to compute the sum of digits of each number of a given array list.\n    public static long sumOfDigits(ArrayList<Object> nums) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(sumOfDigits((new ArrayList<Object>(Arrays.asList((long)10l, (long)2l, (long)56l)))) == (14l));\n    assert(sumOfDigits((new ArrayList<Object>(Arrays.asList((ArrayList<Long>)new ArrayList<Object>(Arrays.asList(10l, 20l, 4l, 5l, \"b\", 70l, \"a\")))))) == (19l));\n    assert(sumOfDigits((new ArrayList<Object>(Arrays.asList((long)10l, (long)20l, (long)-4l, (long)5l, (long)-70l)))) == (19l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `sum` to keep track of the total sum of digits\n# Iterate through each element in the given array list\n    # Check if the current element is an integer\n        # Convert the element to a string\n        # Iterate through each character in the string representation of the number\n            # Convert the character to an integer and add it to the `sum`\n# Return the `sum` as the result"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long sumOfDigits(ArrayList<Object> nums) {\n        long sum = 0;\n        for (Object num : nums) {\n            if (num instanceof Integer) {\n                String numStr = Integer.toString((Integer) num);\n                for (int i = 0; i < numStr.length(); i++) {\n                    sum += Character.getNumericValue(numStr.charAt(i));\n                }\n            }\n        }\n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/84",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the nth number in the newman conway sequence.\n    public static long sequence(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(sequence((10l)) == (6l));\n    assert(sequence((2l)) == (1l));\n    assert(sequence((3l)) == (2l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create an array to store the sequence numbers, initialized with 0, 1, and 1 as the first three numbers\n# Iterate from index 4 to n (inclusive)\n    # Calculate the new number in the sequence by using the previous two numbers in the sequence\n    # Store the new number in the array\n# Return the nth number in the sequence from the array"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long sequence(long n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\");\n        }\n\n        if (n == 1 || n == 2) {\n            return 1;\n        }\n\n        long[] sequence = new long[(int) n];\n        sequence[0] = 0;\n        sequence[1] = 1;\n        sequence[2] = 1;\n\n        for (int i = 3; i <= n; i++) {\n            sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]];\n        }\n\n        return sequence[(int) n];\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/4",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a max heap using a priority queue\n# Iterate through each number in the input ArrayList\n    # Add the number to the priority queue\n    # If the size of the priority queue exceeds n, remove the smallest element from the queue\n# Create a new ArrayList to store the n largest numbers in descending order\n# Iterate through the priority queue\n    # Add each element to the new ArrayList\n# Return the new ArrayList of the n largest numbers in descending order"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        PriorityQueue<Long> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        \n        for (Long num : nums) {\n            maxHeap.add(num);\n            if (maxHeap.size() > n) {\n                maxHeap.poll();\n            }\n        }\n        \n        ArrayList<Long> largestNumbers = new ArrayList<>();\n        while (!maxHeap.isEmpty()) {\n            largestNumbers.add(maxHeap.poll());\n        }\n        \n        Collections.reverse(largestNumbers);\n        return largestNumbers;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/452",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    public static long lossAmount(long actual_cost, long sale_amount) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(lossAmount((1500l), (1200l)) == (0l));\n    assert(lossAmount((100l), (200l)) == (100l));\n    assert(lossAmount((2000l), (5000l)) == (3000l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Calculate the difference between the sale amount and the actual cost\n# If the difference is negative, it means there is a loss\n    # Return the absolute value of the difference\n# If the difference is positive or zero, it means there is no loss\n    # Return 0"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long lossAmount(long actual_cost, long sale_amount) {\n        long difference = sale_amount - actual_cost;\n        if (difference < 0) {\n            return Math.abs(difference);\n        } else {\n            return 0;\n        }\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/560",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the union of the elements of two given array lists and output them in sorted order.\n    public static ArrayList<Long> unionElements(ArrayList<Long> test_tup1, ArrayList<Long> test_tup2) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(unionElements((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)6l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)4l, (long)10l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)10l)))));\n    assert(unionElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))));\n    assert(unionElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)12l, (long)13l, (long)14l))), (new ArrayList<Long>(Arrays.asList((long)13l, (long)15l, (long)16l, (long)17l)))).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)12l, (long)13l, (long)14l, (long)15l, (long)16l, (long)17l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new ArrayList to store the union of elements from both input ArrayLists\n# Add all elements from the first ArrayList to the new ArrayList\n# Add all elements from the second ArrayList to the new ArrayList, but only if they are not already present in the new ArrayList\n# Sort the new ArrayList in ascending order\n# Return the new ArrayList as the output"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> unionElements(ArrayList<Long> test_tup1, ArrayList<Long> test_tup2) {\n        ArrayList<Long> union = new ArrayList<Long>();\n        union.addAll(test_tup1);\n        \n        for (Long element : test_tup2) {\n            if (!union.contains(element)) {\n                union.add(element);\n            }\n        }\n        \n        Collections.sort(union);\n        return union;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/562",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the length of the longest subarray lists.\n    public static long FindMaxLength(ArrayList<ArrayList<Long>> lst) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(FindMaxLength((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l)))))) == (4l));\n    assert(FindMaxLength((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))))) == (3l));\n    assert(FindMaxLength((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)22l, (long)23l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)13l, (long)14l, (long)15l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)30l, (long)40l, (long)50l)))))) == (5l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `maxLen` to store the maximum length of subarray lists\n# Iterate through each subarray list in the input ArrayList\n    # Get the length of the current subarray list and compare it with `maxLen`\n        # If the length is greater than `maxLen`, update `maxLen` with the new value\n# Return `maxLen` as the length of the longest subarray list"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long FindMaxLength(ArrayList<ArrayList<Long>> lst) {\n        long maxLen = 0;\n        for (ArrayList<Long> subList : lst) {\n            int length = subList.size();\n            if (length > maxLen) {\n                maxLen = length;\n            }\n        }\n        return maxLen;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/640",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to remove the parenthesis and what is inbetween them from a string.\n    public static String removeParenthesis(ArrayList<String> items) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(removeParenthesis((new ArrayList<String>(Arrays.asList((String)\"python (chrome)\")))).equals((\"python\")));\n    assert(removeParenthesis((new ArrayList<String>(Arrays.asList((String)\"string(.abc)\")))).equals((\"string\")));\n    assert(removeParenthesis((new ArrayList<String>(Arrays.asList((String)\"alpha(num)\")))).equals((\"alpha\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize an empty stack to keep track of opening parentheses\n# Iterate through each item in the input ArrayList\n    # Check if the item is an opening parenthesis (i.e., \"(\")\n        # If it is, push it onto the stack\n    # Check if the item is a closing parenthesis (i.e., \")\")\n        # If it is, pop elements from the stack until an opening parenthesis is encountered\n    # If the item is neither an opening nor closing parenthesis, add it to the result string\n# Return the final result string"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String removeParenthesis(ArrayList<String> items) {\n        Stack<String> stack = new Stack<>();\n        StringBuilder result = new StringBuilder();\n\n        for (String item : items) {\n            if (item.equals(\"(\")) {\n                stack.push(item);\n            } else if (item.equals(\")\")) {\n                while (!stack.isEmpty() && !stack.peek().equals(\"(\")) {\n                    stack.pop();\n                }\n                if (!stack.isEmpty()) {\n                    stack.pop();\n                }\n            } else {\n                result.append(item);\n            }\n        }\n        \n        return result.toString();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/406",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find whether the parity of a given number is odd.\n    public static boolean findParity(long x) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the given number is odd or even\n    # If the number is odd, return true\n    # If the number is even, return false"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean findParity(long x) {\n        if (x % 2 == 0) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/432",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median length of a trapezium.\n    public static float medianTrapezium(long base1, long base2, long height) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(medianTrapezium((15l), (25l), (35l)) == (float)20l);\n    assert(medianTrapezium((10l), (20l), (30l)) == (float)15l);\n    assert(medianTrapezium((6l), (9l), (4l)) == (7.5f));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Calculate the length of the two parallel sides of the trapezium by adding the two bases\n# Calculate the median length by dividing the sum of the two parallel sides by 2\n# Return the median length as a float"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static float medianTrapezium(long base1, long base2, long height) {\n        long parallelSides = base1 + base2;\n        float median = parallelSides / 2.0f;\n        return median;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/86",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find nth centered hexagonal number.\n    public static long centeredHexagonalNumber(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(centeredHexagonalNumber((10l)) == (271l));\n    assert(centeredHexagonalNumber((2l)) == (7l));\n    assert(centeredHexagonalNumber((9l)) == (217l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Calculate the nth centered hexagonal number using the formula n(2n-1)\n# Return the calculated value"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long centeredHexagonalNumber(long n) {\n        return n * (2 * n - 1);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/143",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find number of array lists present in the given array list.\n    public static long findLists(ArrayList<Object> Input) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(findLists((new ArrayList<Object>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l)))))) == (2l));\n    assert(findLists((new ArrayList<Object>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l)))))) == (3l));\n    assert(findLists((new ArrayList<Object>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l, (long)4l, (long)3l, (long)2l, (long)1l)))) == (1l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a count variable to keep track of the number of array lists\n# Iterate through each element in the input ArrayList\n    # Check if the current element is an instance of ArrayList\n        # If it is, increment the count variable\n# Return the count variable as the result"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long findLists(ArrayList<Object> Input) {\n        long count = 0;\n        for (Object obj : Input) {\n            if (obj instanceof ArrayList) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/392",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    public static long getMaxSum(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Base case:\n    # If n is less than or equal to 1, return n\n# Recursive case:\n    # Calculate f(n/2) by calling the getMaxSum function recursively with n/2 as the argument\n    # Calculate f(n/3) by calling the getMaxSum function recursively with n/3 as the argument\n    # Calculate f(n/4) by calling the getMaxSum function recursively with n/4 as the argument\n    # Calculate f(n/5) by calling the getMaxSum function recursively with n/5 as the argument\n    # Calculate the maximum sum by taking the maximum value among (f(n/2) + f(n/3) + f(n/4) + f(n/5)) and n\n    # Return the maximum sum"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long getMaxSum(long n) {\n        if (n <= 1) {\n            return n;\n        }\n        long sum = getMaxSum(n/2) + getMaxSum(n/3) + getMaxSum(n/4) + getMaxSum(n/5);\n        return Math.max(sum, n);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/90",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the length of the longest word.\n    public static long lenLog(ArrayList<String> list1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(lenLog((new ArrayList<String>(Arrays.asList((String)\"python\", (String)\"PHP\", (String)\"bigdata\")))) == (7l));\n    assert(lenLog((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"ab\", (String)\"abc\")))) == (3l));\n    assert(lenLog((new ArrayList<String>(Arrays.asList((String)\"small\", (String)\"big\", (String)\"tall\")))) == (5l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `maxLen` to 0 to store the length of the longest word\n# Iterate through each word in the input ArrayList\n    # Get the length of the current word\n    # If the length of the current word is greater than `maxLen`, update `maxLen` with the new length\n# Return `maxLen` as the length of the longest word"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long lenLog(ArrayList<String> list1) {\n        long maxLen = 0;\n        for (String word : list1) {\n            long wordLen = word.length();\n            if (wordLen > maxLen) {\n                maxLen = wordLen;\n            }\n        }\n        return maxLen;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/746",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Optional<Float> sectorArea(long r, long a) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(sectorArea((4l), (45l)).equals(Optional.of(6.283185307179586f)));\n    assert(sectorArea((9l), (45l)).equals(Optional.of(31.808625617596654f)));\n    assert(sectorArea((9l), (361l)).equals(Optional.empty()));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the angle is larger than 360 degrees\n    # If it is, return null\n# Calculate the area of the sector using the formula: (\u03c0 * r^2 * a) / 360\n# Return the calculated area as an Optional<Float> object"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (a > 360) {\n            return Optional.empty();\n        }\n        float area = (float) (Math.PI * r * r * a) / 360;\n        return Optional.of(area);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/775",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to check whether every odd index contains odd numbers of a given array list.\n    public static boolean oddPosition(ArrayList<Long> nums) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(oddPosition((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)4l, (long)3l, (long)6l, (long)7l, (long)6l, (long)3l)))) == (true));\n    assert(oddPosition((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l)))) == (true));\n    assert(oddPosition((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Iterate through each number and its index in the input ArrayList\n    # Check if the current index is odd\n        # Check if the current number is odd\n            # If the current index is odd and the current number is odd, continue to the next iteration\n            # If the current index is odd but the current number is not odd, return false\n# If all odd indices contain odd numbers, return true\n# If any odd index does not contain an odd number, return false"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean oddPosition(ArrayList<Long> nums) {\n        for (int index = 0; index < nums.size(); index++) {\n            if (index % 2 == 1) {\n                if (nums.get(index) % 2 != 1) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/439",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to join an array array list of multiple integers into a single integer.\n    public static long multipleToSingle(ArrayList<Long> L) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(multipleToSingle((new ArrayList<Long>(Arrays.asList((long)11l, (long)33l, (long)50l)))) == (113350l));\n    assert(multipleToSingle((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (-123456l));\n    assert(multipleToSingle((new ArrayList<Long>(Arrays.asList((long)10l, (long)15l, (long)20l, (long)25l)))) == (10152025l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input ArrayList is null or empty\n# Use a StringBuilder to concatenate all the integers in the ArrayList into a single string\n# Convert the resulting string to a long and return it"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long multipleToSingle(ArrayList<Long> L) {\n        if (L == null || L.isEmpty()) {\n            throw new IllegalArgumentException(\"Input ArrayList is null or empty\");\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Long num : L) {\n            sb.append(num);\n        }\n        return Long.parseLong(sb.toString());\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/77",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find whether a number is divisible by 11.\n    public static boolean isDiff(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(isDiff((12345l)) == (false));\n    assert(isDiff((1212112l)) == (true));\n    assert(isDiff((1212l)) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the absolute difference between the sum of the digits at odd positions and the sum of the digits at even positions is divisible by 11\n    # Convert the number to a string\n    # Iterate through each digit and its index in the string\n        # If the index is odd, add the digit to the sum of the digits at odd positions\n        # If the index is even, add the digit to the sum of the digits at even positions\n    # Calculate the absolute difference between the sums of digits at odd and even positions\n    # Check if the absolute difference is divisible by 11\n        # If it is, return true\n# If the absolute difference is not divisible by 11, return false"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean isDiff(long n) {\n        String numberString = String.valueOf(n);\n        int sumOdd = 0;\n        int sumEven = 0;\n        \n        for (int i = 0; i < numberString.length(); i++) {\n            int digit = Character.getNumericValue(numberString.charAt(i));\n            if (i % 2 == 0) {\n                sumEven += digit;\n            } else {\n                sumOdd += digit;\n            }\n        }\n        \n        int diff = Math.abs(sumOdd - sumEven);\n        \n        return diff % 11 == 0;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/445",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to perform index wise multiplication of array list elements in the given two array lists.\n    public static ArrayList<ArrayList<Long>> indexMultiplication(ArrayList<ArrayList<Long>> test_tup1, ArrayList<ArrayList<Long>> test_tup2) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(indexMultiplication((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)10l))))), (new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)21l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)12l, (long)45l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)30l)))))));\n    assert(indexMultiplication((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)11l))))), (new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)14l, (long)32l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)20l, (long)60l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)20l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)16l, (long)44l)))))));\n    assert(indexMultiplication((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)11l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)12l))))), (new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)11l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)24l, (long)45l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)30l, (long)77l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)12l, (long)33l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)27l, (long)60l)))))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create an empty result array list\n# Iterate through the elements of both input array lists\n    # Create an inner array list to store the multiplied values for the current index\n    # Iterate through the elements of the inner array lists at the current index\n        # Multiply the corresponding elements from both input array lists and add the result to the inner array list\n    # Add the inner array list to the result array list\n# Return the result array list"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<ArrayList<Long>> indexMultiplication(ArrayList<ArrayList<Long>> test_tup1, ArrayList<ArrayList<Long>> test_tup2) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n\n        for (int i = 0; i < test_tup1.size(); i++) {\n            ArrayList<Long> innerList = new ArrayList<>();\n            for (int j = 0; j < test_tup1.get(i).size(); j++) {\n                long product = test_tup1.get(i).get(j) * test_tup2.get(i).get(j);\n                innerList.add(product);\n            }\n            result.add(innerList);\n        }\n\n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/785",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert pair string to integer pair.\n    public static Pair<Long, Long, Long> tupleStrInt(String test_str) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(tupleStrInt((\"(7, 8, 9)\")).equals((Pair.with(7l, 8l, 9l))));\n    assert(tupleStrInt((\"(1, 2, 3)\")).equals((Pair.with(1l, 2l, 3l))));\n    assert(tupleStrInt((\"(4, 5, 6)\")).equals((Pair.with(4l, 5l, 6l))));\n    assert(tupleStrInt((\"(7, 81, 19)\")).equals((Pair.with(7l, 81l, 19l))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Split the input string by the comma separator to get two separate strings representing the pair\n# Convert the two strings to integers using the `Long.parseLong()` method\n# Create a new `Pair` object using the two integers as parameters\n# Return the `Pair` object"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Pair<Long, Long> tupleStrInt(String test_str) {\n        String[] pairStrings = test_str.split(\",\");\n        Long first = Long.parseLong(pairStrings[0]);\n        Long second = Long.parseLong(pairStrings[1]);\n        return new Pair<>(first, second);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/123",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    public static long amicableNumbersSum(long limit) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a helper function to calculate the sum of proper divisors of a given number\n# Initialize a variable to store the sum of all amicable numbers\n# Iterate through each number from 1 to the specified limit\n    # Calculate the sum of proper divisors of the current number\n    # Check if the sum of proper divisors is different from the current number and if the sum of proper divisors is less than or equal to the limit\n        # Calculate the sum of proper divisors of the sum of proper divisors\n        # Check if the sum of proper divisors of the sum of proper divisors is equal to the current number\n            # If so, add the current number and the sum of proper divisors to the sum of amicable numbers\n# Return the sum of amicable numbers"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long amicableNumbersSum(long limit) {\n        long sum = 0;\n        for (long i = 1; i <= limit; i++) {\n            long divisorSum = sumOfDivisors(i);\n            if (divisorSum != i && divisorSum <= limit) {\n                long secondDivisorSum = sumOfDivisors(divisorSum);\n                if (secondDivisorSum == i) {\n                    sum += i + divisorSum;\n                }\n            }\n        }\n        return sum;\n    }\n\n    public static long sumOfDivisors(long num) {\n        long sum = 0;\n        for (long i = 1; i <= num / 2; i++) {\n            if (num % i == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/437",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to remove odd characters in a string.\n    public static String removeOdd(String str1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(removeOdd((\"python\")).equals((\"yhn\")));\n    assert(removeOdd((\"program\")).equals((\"rga\")));\n    assert(removeOdd((\"language\")).equals((\"agae\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize an empty string to store the result\n# Iterate through each character in the input string\n    # Check if the index of the current character is even\n        # If the index is even, append the character to the result string\n# Return the result string"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String removeOdd(String str1) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < str1.length(); i++) {\n            if (i % 2 == 0) {\n                result.append(str1.charAt(i));\n            }\n        }\n        return result.toString();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/726",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes as input an array array list of numbers (t_1,...,t_{N+1}) and returns an array array list of length N where the i-th element of the pair is equal to t_i * t_{i+1}.\n    public static ArrayList<Object> multiplyElements(ArrayList<Long> test_tup) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(multiplyElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)7l, (long)8l, (long)10l)))).equals((new ArrayList<Object>(Arrays.asList((long)5l, (long)35l, (long)56l, (long)80l)))));\n    assert(multiplyElements((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))).equals((new ArrayList<Object>(Arrays.asList((long)8l, (long)20l, (long)30l, (long)42l)))));\n    assert(multiplyElements((new ArrayList<Long>(Arrays.asList((long)12l, (long)13l, (long)14l, (long)9l, (long)15l)))).equals((new ArrayList<Object>(Arrays.asList((long)156l, (long)182l, (long)126l, (long)135l)))));\n    assert(multiplyElements((new ArrayList<Long>(Arrays.asList((long)12l)))).equals((new ArrayList<Object>(Arrays.asList()))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new ArrayList called `result` to store the multiplied values\n# Iterate through the elements of the input ArrayList up to the second last element\n    # Multiply the current element with the next element and store the result in a variable\n    # Add the result to the `result` ArrayList\n# Return the `result` ArrayList"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> multiplyElements(ArrayList<Long> test_tup) {\n        ArrayList<Long> result = new ArrayList<>();\n\n        for (int i = 0; i < test_tup.size() - 1; i++) {\n            long multipliedValue = test_tup.get(i) * test_tup.get(i + 1);\n            result.add(multipliedValue);\n        }\n\n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/802",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/\n    public static long countRotation(ArrayList<Long> arr) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));\n    assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize two pointers, `start` and `end`, to the start and end indices of the array.\n# Use a while loop to iterate while `start` is less than or equal to `end`.\n    # Check if the array is already sorted (i.e., the element at index `start` is less than or equal to the element at index `end`).\n        # If it is sorted, return 0 as no rotation is required.\n    # Calculate the mid index as the average of `start` and `end`.\n    # Check if the element at the mid index is greater than the element at the next index.\n        # If it is, return the next index as the number of rotations required to generate a sorted array.\n    # Check if the element at the mid index is less than the element at the previous index.\n        # If it is, return the mid index as the number of rotations required to generate a sorted array.\n    # Check if the element at the mid index is greater than the element at the start index.\n        # If it is, update `start` to mid + 1.\n    # Otherwise, update `end` to mid - 1.\n# If no rotation is found, return -1 to indicate that the array is not rotated."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long countRotation(ArrayList<Long> arr) {\n        int start = 0;\n        int end = arr.size() - 1;\n\n        while (start <= end) {\n            if (arr.get(start) <= arr.get(end)) {\n                return 0;\n            }\n\n            int mid = (start + end) / 2;\n\n            if (arr.get(mid) > arr.get(mid + 1)) {\n                return mid + 1;\n            }\n\n            if (arr.get(mid) < arr.get(mid - 1)) {\n                return mid;\n            }\n\n            if (arr.get(mid) > arr.get(start)) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n\n        return -1;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/400",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to extract the number of unique pairs in the given array list.\n    public static long extractFreq(ArrayList<Pair<Long, Long>> test_list) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(extractFreq((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 4l), (Pair<Long, Long>)Pair.with(1l, 2l), (Pair<Long, Long>)Pair.with(4l, 3l), (Pair<Long, Long>)Pair.with(5l, 6l))))) == (3l));\n    assert(extractFreq((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 15l), (Pair<Long, Long>)Pair.with(2l, 3l), (Pair<Long, Long>)Pair.with(5l, 4l), (Pair<Long, Long>)Pair.with(6l, 7l))))) == (4l));\n    assert(extractFreq((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(5l, 16l), (Pair<Long, Long>)Pair.with(2l, 3l), (Pair<Long, Long>)Pair.with(6l, 5l), (Pair<Long, Long>)Pair.with(6l, 9l))))) == (4l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a HashSet to store unique pairs\n# Iterate through each pair in the input ArrayList\n    # Add the pair to the HashSet\n# Return the size of the HashSet, which represents the number of unique pairs in the input ArrayList"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long extractFreq(ArrayList<Pair<Long, Long>> test_list) {\n        HashSet<Pair<Long, Long>> uniquePairs = new HashSet<>();\n        for (Pair<Long, Long> pair : test_list) {\n            uniquePairs.add(pair);\n        }\n        return uniquePairs.size();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/723",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // The input is defined as two array lists of the same length. Write a function to count indices where the array lists have the same values.\n    public static long countSamePair(ArrayList<Long> nums1, ArrayList<Long> nums2) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(countSamePair((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)3l, (long)1l, (long)2l, (long)6l, (long)7l, (long)9l)))) == (4l));\n    assert(countSamePair((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)-1l, (long)-5l, (long)6l, (long)0l, (long)-3l, (long)-2l, (long)3l, (long)4l, (long)6l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)2l, (long)-1l, (long)-5l, (long)6l, (long)4l, (long)-3l, (long)-2l, (long)3l, (long)4l, (long)6l, (long)8l)))) == (11l));\n    assert(countSamePair((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-6l, (long)-9l, (long)11l, (long)-12l, (long)14l, (long)-5l, (long)17l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)2l, (long)-1l, (long)-5l, (long)6l, (long)4l, (long)-3l, (long)-2l, (long)3l, (long)4l, (long)6l, (long)8l)))) == (1l));\n    assert(countSamePair((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)2l))), (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)2l)))) == (3l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a count variable to 0\n# Iterate through each index i in the range of the length of the input lists\n    # Check if the values at index i in both lists are equal\n        # If they are equal, increment the count variable by 1\n# Return the count variable"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long countSamePair(ArrayList<Long> nums1, ArrayList<Long> nums2) {\n        long count = 0;\n        for (int i = 0; i < nums1.size(); i++) {\n            if (nums1.get(i).equals(nums2.get(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/93",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to calculate the value of 'a' to the power 'b'.\n    public static long power(long a, long b) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(power((3l), (4l)) == (81l));\n    assert(power((2l), (3l)) == (8l));\n    assert(power((5l), (5l)) == (3125l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if `b` is equal to 0\n    # If true, return 1\n# Check if `b` is equal to 1\n    # If true, return `a`\n# Check if `b` is less than 0\n    # If true, return 1 divided by the result of `power(a, -b)`\n# Initialize a variable `result` to 1\n# Loop `b` times\n    # Multiply `result` by `a`\n# Return `result`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long power(long a, long b) {\n        if (b == 0) {\n            return 1;\n        }\n        if (b == 1) {\n            return a;\n        }\n        if (b < 0) {\n            return 1 / power(a, -b);\n        }\n        long result = 1;\n        for (int i = 0; i < b; i++) {\n            result *= a;\n        }\n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/796",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write function to find the sum of all items in the given hash map.\n    public static long returnSum(HashMap<String,Long> dict) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(returnSum((new HashMap<String,Long>(Map.of(\"a\", 100l, \"b\", 200l, \"c\", 300l)))) == (600l));\n    assert(returnSum((new HashMap<String,Long>(Map.of(\"a\", 25l, \"b\", 18l, \"c\", 45l)))) == (88l));\n    assert(returnSum((new HashMap<String,Long>(Map.of(\"a\", 36l, \"b\", 39l, \"c\", 49l)))) == (124l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `sum` to 0\n# Iterate through each key-value pair in the input hashmap\n    # Add the value to the `sum` variable\n# Return the `sum` variable as the sum of all items in the hashmap"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long returnSum(HashMap<String, Long> dict) {\n        long sum = 0;\n        for (Map.Entry<String, Long> entry : dict.entrySet()) {\n            sum += entry.getValue();\n        }\n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/766",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to return an array array list of all pairs of consecutive items in a given array list.\n    public static ArrayList<Pair<Long, Long>> pairWise(ArrayList<Long> l1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(pairWise((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l, (long)3l, (long)3l, (long)4l, (long)4l, (long)5l)))).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(1l, 1l), (Pair<Long, Long>)Pair.with(1l, 2l), (Pair<Long, Long>)Pair.with(2l, 3l), (Pair<Long, Long>)Pair.with(3l, 3l), (Pair<Long, Long>)Pair.with(3l, 4l), (Pair<Long, Long>)Pair.with(4l, 4l), (Pair<Long, Long>)Pair.with(4l, 5l))))));\n    assert(pairWise((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)7l, (long)9l, (long)10l)))).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(1l, 5l), (Pair<Long, Long>)Pair.with(5l, 7l), (Pair<Long, Long>)Pair.with(7l, 9l), (Pair<Long, Long>)Pair.with(9l, 10l))))));\n    assert(pairWise((new ArrayList<Long>(Arrays.asList((long)5l, (long)1l, (long)9l, (long)7l, (long)10l)))).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(5l, 1l), (Pair<Long, Long>)Pair.with(1l, 9l), (Pair<Long, Long>)Pair.with(9l, 7l), (Pair<Long, Long>)Pair.with(7l, 10l))))));\n    assert(pairWise((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l)))).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(1l, 2l), (Pair<Long, Long>)Pair.with(2l, 3l), (Pair<Long, Long>)Pair.with(3l, 4l), (Pair<Long, Long>)Pair.with(4l, 5l), (Pair<Long, Long>)Pair.with(5l, 6l), (Pair<Long, Long>)Pair.with(6l, 7l), (Pair<Long, Long>)Pair.with(7l, 8l), (Pair<Long, Long>)Pair.with(8l, 9l), (Pair<Long, Long>)Pair.with(9l, 10l))))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create an empty ArrayList to store the pairs\n# Iterate through the input ArrayList up to the second last element\n    # Create a Pair with the current element and the next element\n    # Add the Pair to the ArrayList of pairs\n# Return the ArrayList of pairs"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Pair<Long, Long>> pairWise(ArrayList<Long> l1) {\n        ArrayList<Pair<Long, Long>> pairs = new ArrayList<>();\n\n        for (int i = 0; i < l1.size() - 1; i++) {\n            Pair<Long, Long> pair = new Pair<>(l1.get(i), l1.get(i + 1));\n            pairs.add(pair);\n        }\n\n        return pairs;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/565",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to split a string into characters.\n    public static ArrayList<String> split(String word) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(split((\"python\")).equals((new ArrayList<String>(Arrays.asList((String)\"p\", (String)\"y\", (String)\"t\", (String)\"h\", (String)\"o\", (String)\"n\")))));\n    assert(split((\"Name\")).equals((new ArrayList<String>(Arrays.asList((String)\"N\", (String)\"a\", (String)\"m\", (String)\"e\")))));\n    assert(split((\"program\")).equals((new ArrayList<String>(Arrays.asList((String)\"p\", (String)\"r\", (String)\"o\", (String)\"g\", (String)\"r\", (String)\"a\", (String)\"m\")))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize an empty ArrayList to store the individual characters\n# Iterate through each character in the input string\n    # Convert the current character to a string and add it to the ArrayList\n# Return the ArrayList containing the individual characters of the input string"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<String> split(String word) {\n        ArrayList<String> characters = new ArrayList<>();\n        for (int i = 0; i < word.length(); i++) {\n            characters.add(Character.toString(word.charAt(i)));\n        }\n        return characters;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/227",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find minimum of three numbers.\n    public static long minOfThree(long a, long b, long c) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(minOfThree((10l), (20l), (0l)) == (0l));\n    assert(minOfThree((19l), (15l), (18l)) == (15l));\n    assert(minOfThree((-10l), (-20l), (-30l)) == (-30l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Compare the first two numbers, `a` and `b`\n    # If `a` is smaller than `b`, compare `a` with `c`\n        # If `a` is smaller than `c`, return `a` as the minimum\n        # If `c` is smaller than `a`, return `c` as the minimum\n    # If `b` is smaller than `a`, compare `b` with `c`\n        # If `b` is smaller than `c`, return `b` as the minimum\n        # If `c` is smaller than `b`, return `c` as the minimum\n    # If `a` and `b` are equal, compare `a` with `c`\n        # If `a` is smaller than `c`, return `a` as the minimum\n        # If `c` is smaller than `a`, return `c` as the minimum"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long minOfThree(long a, long b, long c) {\n        if (a < b) {\n            if (a < c) {\n                return a;\n            } else {\n                return c;\n            }\n        } else if (b < a) {\n            if (b < c) {\n                return b;\n            } else {\n                return c;\n            }\n        } else {\n            if (a < c) {\n                return a;\n            } else {\n                return c;\n            }\n        }\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/138",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    public static boolean isSumOfPowersOfTwo(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(isSumOfPowersOfTwo((10l)) == (true));\n    assert(isSumOfPowersOfTwo((7l)) == (false));\n    assert(isSumOfPowersOfTwo((14l)) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input number is less than or equal to 0\n    # If true, return false since non-zero powers of 2 cannot be represented\n# Iterate through powers of 2 starting from 1 (2^0)\n    # Check if the current power of 2 is greater than the input number\n        # If true, return false since the number cannot be represented as a sum of powers of 2\n    # Check if the current power of 2 is equal to the input number\n        # If true, return true since the number can be represented as a single power of 2\n    # Subtract the current power of 2 from the input number\n# If none of the conditions are met, return false since the number cannot be represented as a sum of powers of 2"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean isSumOfPowersOfTwo(long n) {\n        if (n <= 0) {\n            return false;\n        }\n\n        long powerOfTwo = 1;\n        while (powerOfTwo <= n) {\n            if (powerOfTwo == n) {\n                return true;\n            }\n            powerOfTwo *= 2;\n            n -= powerOfTwo;\n        }\n\n        return false;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/83",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    public static String getChar(String strr) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(getChar((\"abc\")).equals((\"f\")));\n    assert(getChar((\"gfg\")).equals((\"t\")));\n    assert(getChar((\"ab\")).equals((\"c\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `sum` to store the sum of ASCII values of characters\n# Iterate through each character in the input string\n    # Get the ASCII value of the current character and add it to `sum`\n# Take the modulus of `sum` with 26\n# Convert the resultant value back to a character using the ASCII code\n# Return the character as a string"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String getChar(String strr) {\n        int sum = 0;\n        for (int i = 0; i < strr.length(); i++) {\n            sum += (int) strr.charAt(i);\n        }\n        char result = (char) (sum % 26);\n        return String.valueOf(result);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/295",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to return the sum of all divisors of a number.\n    public static long sumDiv(long number) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(sumDiv((8l)) == (7l));\n    assert(sumDiv((12l)) == (16l));\n    assert(sumDiv((7l)) == (1l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `sum` to 0\n# Iterate from 1 to `number` (inclusive)\n    # Check if the current number is a divisor of `number`\n        # If it is, add it to `sum`\n# Return the value of `sum`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long sumDiv(long number) {\n        long sum = 0;\n        for (long i = 1; i <= number; i++) {\n            if (number % i == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/572",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to remove duplicate numbers from a given number of array lists.\n    public static ArrayList<Long> twoUniqueNums(ArrayList<Long> nums) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(twoUniqueNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)5l)))));\n    assert(twoUniqueNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)4l, (long)5l)))));\n    assert(twoUniqueNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new ArrayList to store the unique numbers\n# Create a HashSet to keep track of the numbers that have been seen before\n# Iterate through each number in the input ArrayList\n    # Check if the number is already in the HashSet\n        # If it is, skip to the next iteration\n    # If the number is not in the HashSet, add it to the HashSet and the new ArrayList\n# Return the new ArrayList with the unique numbers"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> removeDuplicates(ArrayList<Long> nums) {\n        ArrayList<Long> uniqueNums = new ArrayList<>();\n        HashSet<Long> seenNums = new HashSet<>();\n        \n        for (Long num : nums) {\n            if (!seenNums.contains(num)) {\n                seenNums.add(num);\n                uniqueNums.add(num);\n            }\n        }\n        \n        return uniqueNums;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/19",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find whether a given array array list of integers contains any duplicate element.\n    public static boolean testDuplicate(ArrayList<Long> arraynums) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(testDuplicate((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))) == (false));\n    assert(testDuplicate((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)4l)))) == (true));\n    assert(testDuplicate((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)4l, (long)4l, (long)5l)))) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create an empty HashSet to store unique elements\n# Iterate through each element in the input array\n    # Check if the current element is already present in the HashSet\n        # If it is, return true (duplicate found)\n        # If it is not, add the element to the HashSet\n# If the loop completes without finding any duplicates, return false (no duplicates found)"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean testDuplicate(ArrayList<Long> arraynums) {\n        Set<Long> uniqueElements = new HashSet<>();\n        for (Long num : arraynums) {\n            if (uniqueElements.contains(num)) {\n                return true;\n            }\n            uniqueElements.add(num);\n        }\n        return false;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/583",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which returns nth catalan number.\n    public static long catalanNumber(long num) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input number is 0 or 1\n    # If the number is 0 or 1, return 1\n# Create an array `catalan` of size `num+1` and initialize all elements to 0\n# Set `catalan[0]` and `catalan[1]` to 1\n# Iterate from `i = 2` to `num`\n    # Iterate from `j = 0` to `i`\n        # Update `catalan[i]` by adding the product of `catalan[j]` and `catalan[i-j-1]`\n# Return `catalan[num]` as the nth catalan number"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long catalanNumber(long num) {\n        if (num == 0 || num == 1) {\n            return 1;\n        }\n        \n        long[] catalan = new long[(int) (num+1)];\n        catalan[0] = 1;\n        catalan[1] = 1;\n        \n        for (int i = 2; i <= num; i++) {\n            for (int j = 0; j < i; j++) {\n                catalan[i] += catalan[j] * catalan[i-j-1];\n            }\n        }\n        \n        return catalan[(int) num];\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/724",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    public static long powerBaseSum(long base, long power) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(powerBaseSum((2l), (100l)) == (115l));\n    assert(powerBaseSum((8l), (10l)) == (37l));\n    assert(powerBaseSum((8l), (15l)) == (62l));\n    assert(powerBaseSum((3l), (3l)) == (9l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Calculate the result of base raised to the power\n# Convert the result to a string\n# Initialize a variable sum to 0\n# Iterate through each character in the string\n    # Convert the character to an integer\n    # Add the integer to the sum\n# Return the sum as the result"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long powerBaseSum(long base, long power) {\n        long result = (long) Math.pow(base, power);\n        String resultString = String.valueOf(result);\n        long sum = 0;\n        for (int i = 0; i < resultString.length(); i++) {\n            int digit = Integer.parseInt(String.valueOf(resultString.charAt(i)));\n            sum += digit;\n        }\n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/240",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in two array lists and replaces the last element of the first array list with the elements of the second array list.\n    public static ArrayList<Object> replaceList(ArrayList<Object> list1, ArrayList<Object> list2) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(replaceList((new ArrayList<Object>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)7l, (long)9l, (long)10l))), (new ArrayList<Object>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))).equals((new ArrayList<Object>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)7l, (long)9l, (long)2l, (long)4l, (long)6l, (long)8l)))));\n    assert(replaceList((new ArrayList<Object>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))), (new ArrayList<Object>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l)))).equals((new ArrayList<Object>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))));\n    assert(replaceList((new ArrayList<Object>(Arrays.asList((String)\"red\", (String)\"blue\", (String)\"green\"))), (new ArrayList<Object>(Arrays.asList((String)\"yellow\")))).equals((new ArrayList<Object>(Arrays.asList((String)\"red\", (String)\"blue\", (String)\"yellow\")))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if either of the input lists is null or empty\n# Get the last element of the first list\n# Clear the first list\n# Add all the elements from the second list to the first list\n# Add the last element from the first list back to the end\n# Return the modified first list"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Object> replaceList(ArrayList<Object> list1, ArrayList<Object> list2) {\n        if (list1 == null || list2 == null || list1.isEmpty() || list2.isEmpty()) {\n            return list1;\n        }\n        \n        Object lastElement = list1.get(list1.size() - 1);\n        list1.clear();\n        list1.addAll(list2);\n        list1.add(lastElement);\n        \n        return list1;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/59",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the nth octagonal number.\n    public static long isOctagonal(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(isOctagonal((5l)) == (65l));\n    assert(isOctagonal((10l)) == (280l));\n    assert(isOctagonal((15l)) == (645l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Compute the nth octagonal number using the formula: n(3n - 2)\n# Return the computed octagonal number"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long isOctagonal(long n) {\n        return n * (3 * n - 2);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/230",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    public static String replaceBlank(String str1, String char) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input string is null or empty\n# Replace all occurrences of whitespace in the string with the given character\n# Return the modified string"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String replaceBlank(String str1, String character) {\n        if (str1 == null || str1.isEmpty()) {\n            return str1;\n        }\n        return str1.replaceAll(\"\\\\s\", character);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/732",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    public static String replaceSpecialchar(String text) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(replaceSpecialchar((\"Python language, Programming language.\")).equals((\"Python:language::Programming:language:\")));\n    assert(replaceSpecialchar((\"a b c,d e f\")).equals((\"a:b:c:d:e:f\")));\n    assert(replaceSpecialchar((\"ram reshma,ram rahim\")).equals((\"ram:reshma:ram:rahim\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Use the `replaceAll` method to replace all occurrences of spaces, commas, or dots with a colon in the given string\n# Return the modified string"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String replaceSpecialchar(String text) {\n        return text.replaceAll(\"[\\\\s,\\\\.]\", \":\");\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/116",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert a given pair of positive integers into a single integer.\n    public static long tupleToInt(Pair<Long, Long, Long> nums) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(tupleToInt((Pair.with(1l, 2l, 3l))) == (123l));\n    assert(tupleToInt((Pair.with(4l, 5l, 6l))) == (456l));\n    assert(tupleToInt((Pair.with(5l, 6l, 7l))) == (567l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Convert the first positive integer to a string\n# Concatenate the second positive integer to the string\n# Convert the resulting string to a long integer\n# Return the long integer"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long tupleToInt(Pair<Long, Long> nums) {\n        String num1String = String.valueOf(nums.getValue0());\n        String num2String = String.valueOf(nums.getValue1());\n        String combinedString = num1String + num2String;\n        return Long.parseLong(combinedString);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/293",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the third side of a right angled triangle.\n    public static float othersideRightangle(long w, long h) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(othersideRightangle((7l), (8l)) == (10.63014581273465f));\n    assert(othersideRightangle((3l), (4l)) == (float)5l);\n    assert(othersideRightangle((7l), (15l)) == (16.55294535724685f));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Use the Pythagorean theorem to calculate the length of the third side of a right-angled triangle\n    # Square the lengths of the two known sides\n    # Add the squared lengths together\n    # Take the square root of the sum\n# Return the calculated length of the third side"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static float othersideRightangle(long w, long h) {\n        double thirdSideSquared = Math.pow(w, 2) + Math.pow(h, 2);\n        double thirdSide = Math.sqrt(thirdSideSquared);\n        return (float) thirdSide;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/558",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the sum of the per-digit difference between two integers.\n    public static long digitDistanceNums(long n1, long n2) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(digitDistanceNums((1l), (2l)) == (1l));\n    assert(digitDistanceNums((23l), (56l)) == (6l));\n    assert(digitDistanceNums((123l), (256l)) == (7l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Convert the two input integers to strings\n# Initialize a variable `sum` to store the sum of the per-digit differences\n# Iterate through each character in the strings\n    # Convert the character to an integer\n    # Calculate the absolute difference between the two integers\n    # Add the difference to the `sum` variable\n# Return the `sum` variable as the result"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long digitDistanceNums(long n1, long n2) {\n        String str1 = String.valueOf(n1);\n        String str2 = String.valueOf(n2);\n        long sum = 0;\n        \n        for (int i = 0; i < str1.length(); i++) {\n            int digit1 = Character.getNumericValue(str1.charAt(i));\n            int digit2 = Character.getNumericValue(str2.charAt(i));\n            sum += Math.abs(digit1 - digit2);\n        }\n        \n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/643",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    public static boolean textMatchWordzMiddle(String text) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(textMatchWordzMiddle((\"pythonzabc.\")) == (true));\n    assert(textMatchWordzMiddle((\"zxyabc.\")) == (false));\n    assert(textMatchWordzMiddle((\"  lang  .\")) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input string is null or has a length less than 3\n# Use the `substring` method to get a substring of the input string, excluding the first and last character\n# Use the `contains` method to check if the substring contains the letter 'z'\n# Return true if 'z' is found in the middle of the string, otherwise return false"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean textMatchWordzMiddle(String text) {\n        if (text == null || text.length() < 3) {\n            return false;\n        }\n        \n        String substring = text.substring(1, text.length() - 1);\n        \n        return substring.contains(\"z\");\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/593",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    public static String removezeroIp(String ip) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Split the IP address into its octets using the dot (.) as the delimiter\n# Iterate through each octet\n    # Remove any leading zeroes from the octet using the `replaceAll` method\n# Join the modified octets back together using the dot (.) as the delimiter\n# Return the modified IP address"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String removeZeroIp(String ip) {\n        String[] octets = ip.split(\"\\\\.\");\n        for (int i = 0; i < octets.length; i++) {\n            octets[i] = octets[i].replaceAll(\"^0+\", \"\");\n        }\n        return String.join(\".\", octets);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/425",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to count the number of subarray lists containing a particular element.\n    public static long countElementInList(ArrayList<ArrayList<Object>> list1, Object x) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(countElementInList((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)11l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)7l))))), (Object(1l))) == (3l));\n    assert(countElementInList((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"A\", (String)\"B\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"A\", (String)\"C\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"A\", (String)\"D\", (String)\"E\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"B\", (String)\"C\", (String)\"D\"))))), (Object(\"A\"))) == (3l));\n    assert(countElementInList((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"A\", (String)\"B\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"A\", (String)\"C\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"A\", (String)\"D\", (String)\"E\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"B\", (String)\"C\", (String)\"D\"))))), (Object(\"E\"))) == (1l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `count` to 0\n# Iterate through each subarray list in the input list\n    # Check if the current subarray list contains the given element `x`\n        # If it does, increment the `count` variable by 1\n# Return the final value of `count`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long countElementInList(ArrayList<ArrayList<Object>> list1, Object x) {\n        long count = 0;\n        for (ArrayList<Object> sublist : list1) {\n            if (sublist.contains(x)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/127",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long multiplyInt(long x, long y) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Multiply the two integers `x` and `y` using the `*` operator\n# Return the result of the multiplication"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long multiplyInt(long x, long y) {\n        return x * y;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/470",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given pair.\n    public static Pair<Long, Long, Long, Long> addPairwise(Pair<Long, Long, Long, Long, Long> test_tup) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(addPairwise((Pair.with(1l, 5l, 7l, 8l, 10l))).equals((Pair.with(6l, 12l, 15l, 18l))));\n    assert(addPairwise((Pair.with(2l, 6l, 8l, 9l, 11l))).equals((Pair.with(8l, 14l, 17l, 20l))));\n    assert(addPairwise((Pair.with(3l, 7l, 9l, 10l, 12l))).equals((Pair.with(10l, 16l, 19l, 22l))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Extract the elements from the input tuple\n# Calculate the pairwise addition of the neighboring elements\n# Create a new tuple with the pairwise additions and return it"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Pair<Long, Long, Long, Long> addPairwise(Pair<Long, Long, Long, Long, Long> test_tup) {\n        long firstSum = test_tup.getValue0() + test_tup.getValue1();\n        long secondSum = test_tup.getValue1() + test_tup.getValue2();\n        long thirdSum = test_tup.getValue2() + test_tup.getValue3();\n        long fourthSum = test_tup.getValue3() + test_tup.getValue4();\n        return new Pair<>(firstSum, secondSum, thirdSum, fourthSum);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/120",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the maximum absolute product between numbers in pairs of pairs within a given array list.\n    public static long maxProductTuple(ArrayList<Pair<Long, Long>> list1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(maxProductTuple((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(2l, 7l), (Pair<Long, Long>)Pair.with(2l, 6l), (Pair<Long, Long>)Pair.with(1l, 8l), (Pair<Long, Long>)Pair.with(4l, 9l))))) == (36l));\n    assert(maxProductTuple((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(10l, 20l), (Pair<Long, Long>)Pair.with(15l, 2l), (Pair<Long, Long>)Pair.with(5l, 10l))))) == (200l));\n    assert(maxProductTuple((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(11l, 44l), (Pair<Long, Long>)Pair.with(10l, 15l), (Pair<Long, Long>)Pair.with(20l, 5l), (Pair<Long, Long>)Pair.with(12l, 9l))))) == (484l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input list is null or empty\n# Initialize a variable `maxProduct` to store the maximum absolute product\n# Iterate through each pair of pairs in the input list\n    # Calculate the absolute product of the two numbers in the current pair\n    # Check if the absolute product is greater than `maxProduct`\n        # If it is, update `maxProduct` with the new value\n# Return `maxProduct` as the maximum absolute product"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long maxProductTuple(ArrayList<Pair<Long, Long>> list1) {\n        if (list1 == null || list1.isEmpty()) {\n            return 0;\n        }\n        \n        long maxProduct = 0;\n        \n        for (Pair<Long, Long> pair : list1) {\n            long product = Math.abs(pair.getValue0()) * Math.abs(pair.getValue1());\n            if (product > maxProduct) {\n                maxProduct = product;\n            }\n        }\n        \n        return maxProduct;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/101",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the kth element in the given array array list using 1-based indexing.\n    public static long kthElement(ArrayList<Long> arr, long k) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(kthElement((new ArrayList<Long>(Arrays.asList((long)12l, (long)3l, (long)5l, (long)7l, (long)19l))), (2l)) == (3l));\n    assert(kthElement((new ArrayList<Long>(Arrays.asList((long)17l, (long)24l, (long)8l, (long)23l))), (3l)) == (8l));\n    assert(kthElement((new ArrayList<Long>(Arrays.asList((long)16l, (long)21l, (long)25l, (long)36l, (long)4l))), (4l)) == (36l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Sort the given array list in ascending order\n# Return the element at index `k-1` from the sorted array list\nNote: Since the problem statement specifies 1-based indexing, we subtract 1 from `k` to get the correct index."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long kthElement(ArrayList<Long> arr, long k) {\n        Collections.sort(arr);\n        return arr.get((int) k - 1);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/625",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to interchange the first and last element in a given array list.\n    public static ArrayList<Long> swapList(ArrayList<Long> newList) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(swapList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))));\n    assert(swapList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l, (long)4l, (long)1l)))));\n    assert(swapList((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input array list is null or empty\n# Swap the first and last elements of the array list by using the `get` and `set` methods\n# Return the modified array list"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> swapList(ArrayList<Long> newList) {\n        if (newList == null || newList.isEmpty()) {\n            return newList;\n        }\n        \n        int lastIndex = newList.size() - 1;\n        Long firstElement = newList.get(0);\n        newList.set(0, newList.get(lastIndex));\n        newList.set(lastIndex, firstElement);\n        \n        return newList;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/786",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to locate the right insertion point for a specified value in sorted order.\n    public static long rightInsertion(ArrayList<Long> a, long x) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(rightInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));\n    assert(rightInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));\n    assert(rightInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Use binary search to find the right insertion point for the specified value in the sorted list.\n# Initialize two pointers, `start` and `end`, pointing to the start and end of the list, respectively.\n# While the `start` pointer is less than or equal to the `end` pointer:\n    # Calculate the middle index as the average of the `start` and `end` pointers.\n    # If the middle value is less than the specified value, move the `start` pointer to the right of the middle index.\n    # If the middle value is greater than or equal to the specified value, move the `end` pointer to the left of the middle index.\n# After the while loop, return the `start` pointer as the right insertion point for the specified value."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long rightInsertion(ArrayList<Long> a, long x) {\n        int start = 0;\n        int end = a.size() - 1;\n\n        while (start <= end) {\n            int mid = (start + end) / 2;\n            if (a.get(mid) < x) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n\n        return start;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/20",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if the given number is woodball or not.\n    public static boolean isWoodall(long x) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(isWoodall((383l)) == (true));\n    assert(isWoodall((254l)) == (false));\n    assert(isWoodall((200l)) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the given number is less than or equal to 1\n    # If so, return false since woodball numbers are defined for numbers greater than 1\n# Initialize a variable `sum` to 0\n# Iterate through each digit in the given number\n    # Calculate the factorial of the current digit\n    # Add the factorial to the `sum`\n# Check if the `sum` is equal to the given number\n    # If so, return true since it is a woodball number\n# If the `sum` is not equal to the given number, return false since it is not a woodball number"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean isWoodall(long x) {\n        if (x <= 1) {\n            return false;\n        }\n        \n        long sum = 0;\n        long temp = x;\n        \n        while (temp != 0) {\n            long digit = temp % 10;\n            sum += factorial(digit);\n            temp /= 10;\n        }\n        \n        return sum == x;\n    }\n    \n    public static long factorial(long n) {\n        if (n == 0) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/428",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to sort the given array array list by using shell sort.\n    public static ArrayList<Long> shellSort(ArrayList<Long> my_list) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(shellSort((new ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)4l, (long)5l, (long)3l, (long)2l, (long)12l, (long)81l, (long)56l, (long)95l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l, (long)12l, (long)12l, (long)23l, (long)56l, (long)81l, (long)95l)))));\n    assert(shellSort((new ArrayList<Long>(Arrays.asList((long)24l, (long)22l, (long)39l, (long)34l, (long)87l, (long)73l, (long)68l)))).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l, (long)34l, (long)39l, (long)68l, (long)73l, (long)87l)))));\n    assert(shellSort((new ArrayList<Long>(Arrays.asList((long)32l, (long)30l, (long)16l, (long)96l, (long)82l, (long)83l, (long)74l)))).equals((new ArrayList<Long>(Arrays.asList((long)16l, (long)30l, (long)32l, (long)74l, (long)82l, (long)83l, (long)96l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Start with a gap value of half the size of the array list\n# Iterate until the gap value is greater than 0\n    # Iterate over each element in the array list, starting from the gap value\n        # Compare the current element with the element at the index gap value behind it\n        # If the current element is smaller, swap it with the element at the index gap value behind it\n        # Continue swapping until the current element is in its correct position relative to the elements behind it\n    # Divide the gap value by 2\n# Return the sorted array list"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> shellSort(ArrayList<Long> myList) {\n        int size = myList.size();\n        int gap = size / 2;\n\n        while (gap > 0) {\n            for (int i = gap; i < size; i++) {\n                long temp = myList.get(i);\n                int j;\n                for (j = i; j >= gap && myList.get(j - gap) > temp; j -= gap) {\n                    myList.set(j, myList.get(j - gap));\n                }\n                myList.set(j, temp);\n            }\n            gap /= 2;\n        }\n\n        return myList;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/556",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of pairs whose xor value is odd.\n    public static long findOddPair(ArrayList<Long> A, long N) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(findOddPair((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)7l, (long)2l, (long)1l))), (5l)) == (6l));\n    assert(findOddPair((new ArrayList<Long>(Arrays.asList((long)7l, (long)2l, (long)8l, (long)1l, (long)0l, (long)5l, (long)11l))), (7l)) == (12l));\n    assert(findOddPair((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (3l)) == (2l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `count` to 0 to keep track of the number of pairs whose xor value is odd\n# Iterate through each pair of elements in the given array list\n    # Calculate the xor value of the pair\n    # Check if the xor value is odd\n        # If it is odd, increment the count by 1\n# Return the final count of pairs whose xor value is odd"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long findOddPair(ArrayList<Long> A, long N) {\n        long count = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                long xorValue = A.get(i) ^ A.get(j);\n                if (xorValue % 2 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/797",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the sum of all odd natural numbers within the range l and r.\n    public static long sumInRange(long l, long r) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(sumInRange((2l), (5l)) == (8l));\n    assert(sumInRange((5l), (7l)) == (12l));\n    assert(sumInRange((7l), (13l)) == (40l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `sum` to 0\n# Iterate through each number from `l` to `r`\n    # Check if the current number is odd\n        # If it is odd, add it to the `sum`\n# Return the `sum`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long sumInRange(long l, long r) {\n        long sum = 0;\n        for (long num = l; num <= r; num++) {\n            if (num % 2 != 0) {\n                sum += num;\n            }\n        }\n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/17",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that returns the perimeter of a square given its side length as input.\n    public static long squarePerimeter(long a) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(squarePerimeter((10l)) == (40l));\n    assert(squarePerimeter((5l)) == (20l));\n    assert(squarePerimeter((4l)) == (16l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Calculate the perimeter of the square using the formula: perimeter = 4 * side length (a)\n# Return the calculated perimeter"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long squarePerimeter(long a) {\n        return 4 * a;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/765",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    public static long isPolite(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(isPolite((7l)) == (11l));\n    assert(isPolite((4l)) == (7l));\n    assert(isPolite((9l)) == (13l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `count` to 0 to keep track of the number of polite numbers found\n# Initialize a variable `num` to 1 to represent the current number being checked\n# Iterate while `count` is less than `n`\n    # Check if `num` is polite by calling a helper function `isPoliteNum()`\n        # If `num` is polite, increment `count` by 1\n    # Increment `num` by 1\n# Return the last polite number found"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long isPolite(long n) {\n        long count = 0;\n        long num = 1;\n        \n        while (count < n) {\n            if (isPoliteNum(num)) {\n                count++;\n            }\n            num++;\n        }\n        \n        return num - 1;\n    }\n    \n    public static boolean isPoliteNum(long num) {\n        long temp = num;\n        while (temp % 2 == 0) {\n            temp = temp / 2;\n        }\n        if (temp == 1) {\n            return true;\n        }\n        for (long i = 3; i * i <= temp; i += 2) {\n            while (temp % i == 0) {\n                temp = temp / i;\n            }\n        }\n        return temp == 1;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/162",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    public static long sumSeries(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(sumSeries((6l)) == (12l));\n    assert(sumSeries((10l)) == (30l));\n    assert(sumSeries((9l)) == (25l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Calculate the value of n // 2, where // denotes integer division\n# Initialize a variable `sum` to 0\n# Iterate from i=0 to n // 2 (inclusive)\n    # Calculate the term (n - 2 * i)\n    # Add the term to `sum`\n# Return the value of `sum`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long sumSeries(long n) {\n        long sum = 0;\n        long halfN = n / 2;\n        for (long i = 0; i <= halfN; i++) {\n            long term = n - 2 * i;\n            sum += term;\n        }\n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/579",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the dissimilar elements in the given two pairs.\n    public static Pair<Long, Long, Long, Long> findDissimilar(Pair<Long, Long, Long, Long> test_tup1, Pair<Long, Long, Long, Long> test_tup2) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(findDissimilar((Pair.with(3l, 4l, 5l, 6l)), (Pair.with(5l, 7l, 4l, 10l))).equals((Pair.with(3l, 6l, 7l, 10l))));\n    assert(findDissimilar((Pair.with(1l, 2l, 3l, 4l)), (Pair.with(7l, 2l, 3l, 9l))).equals((Pair.with(1l, 4l, 7l, 9l))));\n    assert(findDissimilar((Pair.with(21l, 11l, 25l, 26l)), (Pair.with(26l, 34l, 21l, 36l))).equals((Pair.with(34l, 36l, 11l, 25l))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize an empty tuple to store the dissimilar elements\n# Iterate through each element in the first pair\n    # If the element is not present in the second pair, add it to the dissimilar tuple\n# Iterate through each element in the second pair\n    # If the element is not present in the first pair, add it to the dissimilar tuple\n# Return the dissimilar tuple"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Pair<Long, Long, Long, Long> findDissimilar(Pair<Long, Long, Long, Long> test_tup1, Pair<Long, Long, Long, Long> test_tup2) {\n        List<Long> dissimilarElements = new ArrayList<>();\n        \n        if (!test_tup2.contains(test_tup1.getValue0())) {\n            dissimilarElements.add(test_tup1.getValue0());\n        }\n        if (!test_tup2.contains(test_tup1.getValue1())) {\n            dissimilarElements.add(test_tup1.getValue1());\n        }\n        if (!test_tup2.contains(test_tup1.getValue2())) {\n            dissimilarElements.add(test_tup1.getValue2());\n        }\n        if (!test_tup2.contains(test_tup1.getValue3())) {\n            dissimilarElements.add(test_tup1.getValue3());\n        }\n        \n        if (!test_tup1.contains(test_tup2.getValue0())) {\n            dissimilarElements.add(test_tup2.getValue0());\n        }\n        if (!test_tup1.contains(test_tup2.getValue1())) {\n            dissimilarElements.add(test_tup2.getValue1());\n        }\n        if (!test_tup1.contains(test_tup2.getValue2())) {\n            dissimilarElements.add(test_tup2.getValue2());\n        }\n        if (!test_tup1.contains(test_tup2.getValue3())) {\n            dissimilarElements.add(test_tup2.getValue3());\n        }\n        \n        return Pair.with(dissimilarElements.get(0), dissimilarElements.get(1), dissimilarElements.get(2), dissimilarElements.get(3));\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/305",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to return two words from an array array list of words starting with letter 'p'.\n    public static Pair<String, String> startWithp(ArrayList<String> words) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(startWithp((new ArrayList<String>(Arrays.asList((String)\"Python PHP\", (String)\"Java JavaScript\", (String)\"c c++\")))).equals((Pair.with(\"Python\", \"PHP\"))));\n    assert(startWithp((new ArrayList<String>(Arrays.asList((String)\"Python Programming\", (String)\"Java Programming\")))).equals((Pair.with(\"Python\", \"Programming\"))));\n    assert(startWithp((new ArrayList<String>(Arrays.asList((String)\"Pqrst Pqr\", (String)\"qrstuv\")))).equals((Pair.with(\"Pqrst\", \"Pqr\"))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create two empty strings, `word1` and `word2`\n# Iterate through each word in the input array list\n    # Check if the word starts with the letter 'p'\n        # If `word1` is still empty, assign the current word to `word1`\n        # If `word1` is not empty, assign the current word to `word2` and break out of the loop\n# Create a new pair tuple with `word1` and `word2`\n# Return the pair tuple"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Pair<String, String> startWithp(ArrayList<String> words) {\n        String word1 = \"\";\n        String word2 = \"\";\n        \n        for (String word : words) {\n            if (word.startsWith(\"p\")) {\n                if (word1.isEmpty()) {\n                    word1 = word;\n                } else {\n                    word2 = word;\n                    break;\n                }\n            }\n        }\n        \n        return new Pair<>(word1, word2);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/411",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    public static String snakeToCamel(String word) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Split the input string by underscore to get an array of words\n# Initialize an empty StringBuilder\n# Iterate through each word in the array\n    # If it is the first word, convert it to lowercase and append it to the StringBuilder\n    # If it is not the first word, capitalize the first character and append the rest of the word to the StringBuilder\n# Return the converted camel case string from the StringBuilder"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String snakeToCamel(String word) {\n        String[] words = word.split(\"_\");\n        StringBuilder camelCase = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            String currentWord = words[i];\n            if (i == 0) {\n                camelCase.append(currentWord.toLowerCase());\n            } else {\n                camelCase.append(Character.toUpperCase(currentWord.charAt(0)))\n                         .append(currentWord.substring(1).toLowerCase());\n            }\n        }\n        return camelCase.toString();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/234",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the volume of a cube given its side length.\n    public static long volumeCube(long l) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(volumeCube((3l)) == (27l));\n    assert(volumeCube((2l)) == (8l));\n    assert(volumeCube((5l)) == (125l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Calculate the volume of the cube using the formula: volume = side length^3\n# Return the calculated volume as a long integer"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long volumeCube(long l) {\n        return l * l * l;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/455",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check whether the given month number contains 31 days or not.\n    public static boolean checkMonthnumbNumber(long monthnum2) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(checkMonthnumbNumber((5l)) == (true));\n    assert(checkMonthnumbNumber((2l)) == (false));\n    assert(checkMonthnumbNumber((6l)) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the given month number is within the range of valid months (1 to 12)\n# If the month number is within the valid range, check if it corresponds to a month with 31 days (January, March, May, July, August, October, December)\n# If the month number corresponds to a month with 31 days, return true\n# Otherwise, return false"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean checkMonthNumber(long monthNum) {\n        if (monthNum >= 1 && monthNum <= 12) {\n            return monthNum == 1 || monthNum == 3 || monthNum == 5 || monthNum == 7 || monthNum == 8 || monthNum == 10 || monthNum == 12;\n        }\n        return false;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/228",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to check whether all the bits are unset in the given range or not.\n    public static boolean allBitsSetInTheGivenRange(long n, long l, long r) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(allBitsSetInTheGivenRange((4l), (1l), (2l)) == (true));\n    assert(allBitsSetInTheGivenRange((17l), (2l), (4l)) == (true));\n    assert(allBitsSetInTheGivenRange((39l), (4l), (6l)) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a mask with all bits set in the given range [l, r]\n# Perform a bitwise AND operation between the input number n and the mask\n# If the result is 0, it means all bits in the given range are unset, so return true\n# Otherwise, return false"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean allBitsSetInTheGivenRange(long n, long l, long r) {\n        long mask = ((1L << (r - l + 1)) - 1) << l;\n        return (n & mask) == 0;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/460",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to get the first element of each subarray list.\n    public static ArrayList<Long> Extract(ArrayList<ArrayList<Long>> lst) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(Extract((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l, (long)9l)))))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)6l)))));\n    assert(Extract((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l)))))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))));\n    assert(Extract((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))).equals((new ArrayList<Long>(Arrays.asList((long)9l, (long)1l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create an ArrayList to store the first element of each subarray list\n# Iterate through each subarray list in the input ArrayList\n    # Check if the current subarray list is not empty\n        # If not empty, add the first element of the subarray list to the result ArrayList\n# Return the result ArrayList"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> Extract(ArrayList<ArrayList<Long>> lst) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (ArrayList<Long> subList : lst) {\n            if (!subList.isEmpty()) {\n                result.add(subList.get(0));\n            }\n        }\n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/574",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the surface area of a cylinder.\n    public static float surfaceareaCylinder(long r, long h) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(surfaceareaCylinder((10l), (5l)) == (942.45f));\n    assert(surfaceareaCylinder((4l), (5l)) == (226.18800000000002f));\n    assert(surfaceareaCylinder((4l), (10l)) == (351.848f));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Calculate the surface area of the cylinder using the formula:\n   # `2 * pi * r * (r + h)`\n   # where `pi` is the mathematical constant and `r` and `h` are the radius and height of the cylinder respectively.\n# Return the calculated surface area."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static float surfaceareaCylinder(long r, long h) {\n        float pi = (float) Math.PI;\n        float surfaceArea = 2 * pi * r * (r + h);\n        return surfaceArea;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/639",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to sum the length of the names of a given array list of names after removing the names that start with a lowercase letter.\n    public static long sampleNam(ArrayList<String> sample_names) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(sampleNam((new ArrayList<String>(Arrays.asList((String)\"sally\", (String)\"Dylan\", (String)\"rebecca\", (String)\"Diana\", (String)\"Joanne\", (String)\"keith\")))) == (16l));\n    assert(sampleNam((new ArrayList<String>(Arrays.asList((String)\"php\", (String)\"res\", (String)\"Python\", (String)\"abcd\", (String)\"Java\", (String)\"aaa\")))) == (10l));\n    assert(sampleNam((new ArrayList<String>(Arrays.asList((String)\"abcd\", (String)\"Python\", (String)\"abba\", (String)\"aba\")))) == (6l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `sumLength` to keep track of the sum of the lengths of the names\n# Iterate through each name in the given array list\n    # Check if the first character of the name is lowercase\n        # If it is not lowercase, add the length of the name to `sumLength`\n# Return `sumLength`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long sumLengthOfNames(ArrayList<String> sample_names) {\n        long sumLength = 0;\n        for (String name : sample_names) {\n            if (!Character.isLowerCase(name.charAt(0))) {\n                sumLength += name.length();\n            }\n        }\n        return sumLength;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/407",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    public static Object rearrangeBigger(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(rearrangeBigger((12l)).equals((Object(21l))));\n    assert(rearrangeBigger((10l)).equals((Object(false))));\n    assert(rearrangeBigger((102l)).equals((Object(120l))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Convert the given number to a string\n# Convert the string to a character array\n# Iterate through the character array from right to left\n    # Find the first digit that is smaller than the digit to its right\n        # This digit is the pivot digit\n    # If no such digit is found, return null (indicating that no bigger number can be formed)\n    # Find the smallest digit to the right of the pivot digit that is greater than the pivot digit\n        # This digit will be swapped with the pivot digit\n    # Sort the digits to the right of the pivot digit in ascending order\n    # Concatenate the modified digits to form the next bigger number\n# Convert the modified string back to a number and return it"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long rearrangeBigger(long n) {\n        String numberString = String.valueOf(n);\n        char[] digits = numberString.toCharArray();\n        \n        int pivotIndex = -1;\n        for (int i = digits.length - 2; i >= 0; i--) {\n            if (digits[i] < digits[i + 1]) {\n                pivotIndex = i;\n                break;\n            }\n        }\n        \n        if (pivotIndex == -1) {\n            return -1; // No bigger number can be formed\n        }\n        \n        int swapIndex = -1;\n        for (int i = digits.length - 1; i > pivotIndex; i--) {\n            if (digits[i] > digits[pivotIndex]) {\n                swapIndex = i;\n                break;\n            }\n        }\n        \n        swap(digits, pivotIndex, swapIndex);\n        Arrays.sort(digits, pivotIndex + 1, digits.length);\n        \n        String modifiedNumberString = new String(digits);\n        long modifiedNumber = Long.parseLong(modifiedNumberString);\n        \n        return modifiedNumber;\n    }\n    \n    private static void swap(char[] digits, int i, int j) {\n        char temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/171",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    public static long perimeterPentagon(long a) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(perimeterPentagon((5l)) == (25l));\n    assert(perimeterPentagon((10l)) == (50l));\n    assert(perimeterPentagon((15l)) == (75l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Calculate the perimeter of a regular pentagon using the formula: perimeter = 5 * a, where 'a' is the length of its sides.\n# Return the calculated perimeter as a long."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long perimeterPentagon(long a) {\n        return 5 * a;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/245",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create two arrays `increasing` and `decreasing` of the same size as the input array `arr`\n# Initialize all elements of `increasing` and `decreasing` to the corresponding elements of `arr`\n# Iterate from the second element to the last element of `increasing`\n    # For each index `i`, iterate from the first element to the element at index `i` of `increasing`\n        # Check if the element at index `i` of `increasing` is greater than the element at index `j` of `increasing`\n            # If true, update the element at index `i` of `increasing` to the sum of the element at index `i` of `increasing` and the element at index `j` of `increasing`\n# Iterate from the second last element to the first element of `decreasing`\n    # For each index `i`, iterate from the last element to the element at index `i` of `decreasing`\n        # Check if the element at index `i` of `decreasing` is greater than the element at index `j` of `decreasing`\n            # If true, update the element at index `i` of `decreasing` to the sum of the element at index `i` of `decreasing` and the element at index `j` of `decreasing`\n# Find the maximum sum of a bitonic subsequence by iterating through each index of `arr` and finding the maximum sum of `increasing[i] + decreasing[i] - arr[i]`\n# Return the maximum sum"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long maxSum(ArrayList<Long> arr) {\n        int n = arr.size();\n        long[] increasing = new long[n];\n        long[] decreasing = new long[n];\n        \n        for (int i = 0; i < n; i++) {\n            increasing[i] = arr.get(i);\n            decreasing[i] = arr.get(i);\n        }\n        \n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    increasing[i] = Math.max(increasing[i], increasing[j] + arr.get(i));\n                }\n            }\n        }\n        \n        for (int i = n - 2; i >= 0; i--) {\n            for (int j = n - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    decreasing[i] = Math.max(decreasing[i], decreasing[j] + arr.get(i));\n                }\n            }\n        }\n        \n        long maxSum = 0;\n        for (int i = 0; i < n; i++) {\n            long sum = increasing[i] + decreasing[i] - arr.get(i);\n            maxSum = Math.max(maxSum, sum);\n        }\n        \n        return maxSum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/580",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to remove uneven elements in the nested mixed pair.\n    public static Object extractEven(Pair<Long, Long, Pair<Long, Long, Pair<Long, Long>>, Long, Long> test_tuple) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(extractEven((Pair.with(4l, 5l, Pair.with(7l, 6l, Pair.with(2l, 4l)), 6l, 8l))).equals(Pair.with(4l, Pair.with(6l, Pair.with(2l, 4l)), 6l, 8l)));\n    assert(extractEven((Pair.with(5l, 6l, Pair.with(8l, 7l, Pair.with(4l, 8l)), 7l, 9l))).equals(Pair.with(6l, Pair.with(8l, Pair.with(4l, 8l)))));\n    assert(extractEven((Pair.with(5l, 6l, Pair.with(9l, 8l, Pair.with(4l, 6l)), 8l, 10l))).equals(Pair.with(6l, Pair.with(8l, Pair.with(4l, 6l)), 8l, 10l)));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Extract the elements from the nested mixed pair.\n# Check if each element is even.\n    # If an element is not even, remove it from the nested pair.\n# Return the modified nested mixed pair."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Object extractEven(Pair<Long, Long, Pair<Long, Long, Pair<Long, Long>>, Long, Long> test_tuple) {\n        Pair<Long, Long> firstPair = test_tuple.getValue2();\n        Pair<Long, Long> secondPair = firstPair.getValue2();\n        Pair<Long, Long> thirdPair = secondPair.getValue2();\n\n        long firstValue = firstPair.getValue0();\n        long secondValue = firstPair.getValue1();\n        long thirdValue = secondPair.getValue0();\n        long fourthValue = secondPair.getValue1();\n        long fifthValue = thirdPair.getValue0();\n        long sixthValue = thirdPair.getValue1();\n\n        if (firstValue % 2 != 0) {\n            firstValue = 0;\n        }\n        if (secondValue % 2 != 0) {\n            secondValue = 0;\n        }\n        if (thirdValue % 2 != 0) {\n            thirdValue = 0;\n        }\n        if (fourthValue % 2 != 0) {\n            fourthValue = 0;\n        }\n        if (fifthValue % 2 != 0) {\n            fifthValue = 0;\n        }\n        if (sixthValue % 2 != 0) {\n            sixthValue = 0;\n        }\n\n        return new Pair<>(firstValue, secondValue, new Pair<>(thirdValue, fourthValue, new Pair<>(fifthValue, sixthValue)));\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/117",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert all possible convertible elements in an array array list of array lists to floats.\n    public static ArrayList<Pair<Float, Float>> listToFloat(ArrayList<Pair<String, String>> test_list) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(listToFloat((new ArrayList<Pair<String, String>>(Arrays.asList((Pair<String, String>)Pair.with(\"3\", \"4\"), (Pair<String, String>)Pair.with(\"1\", \"26.45\"), (Pair<String, String>)Pair.with(\"7.32\", \"8\"), (Pair<String, String>)Pair.with(\"4\", \"8\"))))).equals((new ArrayList<Pair<Float, Float>>(Arrays.asList((Pair<Float, Float>)Pair.with(3.0f, 4.0f), (Pair<Float, Float>)Pair.with(1.0f, 26.45f), (Pair<Float, Float>)Pair.with(7.32f, 8.0f), (Pair<Float, Float>)Pair.with(4.0f, 8.0f))))));\n    assert(listToFloat((new ArrayList<Pair<String, String>>(Arrays.asList((Pair<String, String>)Pair.with(\"4\", \"4\"), (Pair<String, String>)Pair.with(\"2\", \"27\"), (Pair<String, String>)Pair.with(\"4.12\", \"9\"), (Pair<String, String>)Pair.with(\"7\", \"11\"))))).equals((new ArrayList<Pair<Float, Float>>(Arrays.asList((Pair<Float, Float>)Pair.with(4.0f, 4.0f), (Pair<Float, Float>)Pair.with(2.0f, 27.0f), (Pair<Float, Float>)Pair.with(4.12f, 9.0f), (Pair<Float, Float>)Pair.with(7.0f, 11.0f))))));\n    assert(listToFloat((new ArrayList<Pair<String, String>>(Arrays.asList((Pair<String, String>)Pair.with(\"6\", \"78\"), (Pair<String, String>)Pair.with(\"5\", \"26.45\"), (Pair<String, String>)Pair.with(\"1.33\", \"4\"), (Pair<String, String>)Pair.with(\"82\", \"13\"))))).equals((new ArrayList<Pair<Float, Float>>(Arrays.asList((Pair<Float, Float>)Pair.with(6.0f, 78.0f), (Pair<Float, Float>)Pair.with(5.0f, 26.45f), (Pair<Float, Float>)Pair.with(1.33f, 4.0f), (Pair<Float, Float>)Pair.with(82.0f, 13.0f))))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create an empty ArrayList of Pair<Float, Float> to store the converted elements\n# Iterate through each Pair<String, String> in the input ArrayList\n    # Convert the first element of the Pair to float using Float.parseFloat() and store it in a variable\n    # Convert the second element of the Pair to float using Float.parseFloat() and store it in a variable\n    # Create a new Pair<Float, Float> with the converted values and add it to the result ArrayList\n# Return the result ArrayList"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Pair<Float, Float>> listToFloat(ArrayList<Pair<String, String>> test_list) {\n        ArrayList<Pair<Float, Float>> result = new ArrayList<>();\n        for (Pair<String, String> pair : test_list) {\n            Float first = Float.parseFloat(pair.getValue0());\n            Float second = Float.parseFloat(pair.getValue1());\n            result.add(new Pair<>(first, second));\n        }\n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/287",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    public static long squareSum(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(squareSum((2l)) == (20l));\n    assert(squareSum((3l)) == (56l));\n    assert(squareSum((4l)) == (120l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `sum` to 0 to store the sum of squares of even natural numbers\n# Iterate from 1 to n (inclusive)\n    # Check if the current number is even\n        # If it is even, square it and add it to the `sum`\n# Return the value of `sum`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long squareSum(long n) {\n        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i * i;\n            }\n        }\n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/767",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input an array array list of numbers and the sum,\n    public static long getPairsCount(ArrayList<Long> arr, long sum) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(getPairsCount((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))), (2l)) == (6l));\n    assert(getPairsCount((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)7l, (long)-1l, (long)5l))), (6l)) == (3l));\n    assert(getPairsCount((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)3l))), (1l)) == (1l));\n    assert(getPairsCount((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)3l))), (-3l)) == (1l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `count` to keep track of the number of pairs whose sum is equal to `sum`\n# Create a HashMap to store the frequency of each number in the input array\n# Iterate through each number in the input array\n    # Calculate the difference between `sum` and the current number\n    # Check if the difference exists in the HashMap and its frequency is greater than 0\n        # If it does, increment `count` by the frequency of the difference in the HashMap\n    # Increment the frequency of the current number in the HashMap\n# Return the value of `count` which represents the number of pairs whose sum is equal to `sum`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long getPairsCount(ArrayList<Long> arr, long sum) {\n        long count = 0;\n        HashMap<Long, Long> frequencyMap = new HashMap<>();\n\n        // Count the frequency of each number in the array\n        for (long num : arr) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0L) + 1);\n        }\n\n        // Iterate through each number in the array\n        for (long num : arr) {\n            long difference = sum - num;\n            \n            // Check if the difference exists in the HashMap and its frequency is greater than 0\n            if (frequencyMap.containsKey(difference) && frequencyMap.get(difference) > 0) {\n                // Increment the count by the frequency of the difference\n                count += frequencyMap.get(difference);\n            }\n            \n            // Decrement the frequency of the current number\n            frequencyMap.put(num, frequencyMap.get(num) - 1);\n        }\n\n        return count;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/291",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    public static long countNoOfWays(long n, long k) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(countNoOfWays((2l), (4l)) == (16l));\n    assert(countNoOfWays((3l), (2l)) == (6l));\n    assert(countNoOfWays((4l), (4l)) == (228l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# If the number of posts is 0, return 0\n# If the number of posts is 1, return the number of colors available (k)\n# Initialize two variables, sameColorCount and differentColorCount, both set to k\n# Iterate from the third post to the nth post\n    # Calculate the number of ways to paint the current post with the same color as the previous post (sameColorCount)\n    # Calculate the number of ways to paint the current post with a different color than the previous post (differentColorCount)\n    # Update sameColorCount to be equal to differentColorCount (since the next post can only have a different color)\n    # Update differentColorCount to be equal to the sum of sameColorCount and differentColorCount multiplied by (k-1) (since the next post can have either the same color as the previous post or a different color)\n# Return the sum of sameColorCount and differentColorCount as the final result"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long countNoOfWays(long n, long k) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return k;\n        }\n        \n        long sameColorCount = k;\n        long differentColorCount = k * (k - 1);\n        \n        for (int i = 3; i <= n; i++) {\n            long temp = differentColorCount;\n            differentColorCount = (sameColorCount + differentColorCount) * (k - 1);\n            sameColorCount = temp;\n        }\n        \n        return sameColorCount + differentColorCount;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/604",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    public static String reverseWords(String s) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Split the input string into individual words using the `split` method and store them in an array\n# Create an empty StringBuilder to store the reversed string\n# Iterate through the words array in reverse order\n    # Append each word to the StringBuilder followed by a space\n# Convert the StringBuilder to a string and return it as the reversed string of words"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String reverseWords(String s) {\n        String[] words = s.split(\" \");\n        StringBuilder reversed = new StringBuilder();\n        for (int i = words.length - 1; i >= 0; i--) {\n            reversed.append(words[i]).append(\" \");\n        }\n        return reversed.toString().trim();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/56",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to check if a given number is one less than twice its reverse.\n    public static boolean checks(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(checks((70l)) == (false));\n    assert(checks((23l)) == (false));\n    assert(checks((73l)) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Convert the given number to a string\n# Reverse the string\n# Convert the reversed string back to a number\n# Calculate twice the reversed number\n# Check if the given number is one less than twice the reversed number\n# Return true if the condition is satisfied, false otherwise"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean checks(long n) {\n        String numStr = String.valueOf(n);\n        String reversedNumStr = new StringBuilder(numStr).reverse().toString();\n        long reversedNum = Long.parseLong(reversedNumStr);\n        long twiceReversedNum = 2 * reversedNum;\n        return n == twiceReversedNum - 1;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/793",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the last position of an element in a sorted array array list.\n    public static long last(ArrayList<Long> arr, long x) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(last((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (1l)) == (0l));\n    assert(last((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)2l, (long)3l, (long)4l))), (1l)) == (2l));\n    assert(last((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)2l, (long)3l, (long)6l, (long)8l, (long)9l))), (3l)) == (3l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Get the size of the input array list\n# Iterate through the array list starting from the last index\n    # Check if the current element is equal to the target element\n        # If true, return the current index\n# If the target element is not found, return -1"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long last(ArrayList<Long> arr, long x) {\n        int size = arr.size();\n        for (int i = size - 1; i >= 0; i--) {\n            if (arr.get(i) == x) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/250",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function that takes in a pair and an element and counts the occcurences of the element in the array list.\n    public static long countX(ArrayList<Long> tup, long x) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(countX((new ArrayList<Long>(Arrays.asList((long)10l, (long)8l, (long)5l, (long)2l, (long)10l, (long)15l, (long)10l, (long)8l, (long)5l, (long)8l, (long)8l, (long)2l))), (4l)) == (0l));\n    assert(countX((new ArrayList<Long>(Arrays.asList((long)10l, (long)8l, (long)5l, (long)2l, (long)10l, (long)15l, (long)10l, (long)8l, (long)5l, (long)8l, (long)8l, (long)2l))), (10l)) == (3l));\n    assert(countX((new ArrayList<Long>(Arrays.asList((long)10l, (long)8l, (long)5l, (long)2l, (long)10l, (long)15l, (long)10l, (long)8l, (long)5l, (long)8l, (long)8l, (long)2l))), (8l)) == (4l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `count` to keep track of the number of occurrences of the element `x`\n# Iterate through each element in the array list\n    # Check if the current element is equal to `x`\n        # If it is, increment the count by 1\n# Return the value of `count` as the number of occurrences of `x` in the array list"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long countX(ArrayList<Long> tup, long x) {\n        long count = 0;\n        for (long num : tup) {\n            if (num == x) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/754",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // We say that an element is common for array lists l1, l2, l3 if it appears in all three array lists under the same index. Write a function to find common elements from three array lists. The function should return an array array list.\n    public static ArrayList<Object> extractIndexList(ArrayList<Long> l1, ArrayList<Long> l2, ArrayList<Long> l3) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(extractIndexList((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)7l)))).equals((new ArrayList<Object>(Arrays.asList((long)1l, (long)7l)))));\n    assert(extractIndexList((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)6l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)6l, (long)7l)))).equals((new ArrayList<Object>(Arrays.asList((long)1l, (long)6l)))));\n    assert(extractIndexList((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)3l, (long)4l, (long)6l, (long)5l, (long)6l))), (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)7l)))).equals((new ArrayList<Object>(Arrays.asList((long)1l, (long)5l)))));\n    assert(extractIndexList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)6l, (long)6l, (long)6l))), (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)7l)))).equals((new ArrayList<Object>(Arrays.asList()))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new ArrayList called `commonElements` to store the common elements\n# Iterate through each element and index in `l1`\n    # Check if the current index is valid for `l2` and `l3`\n        # If the current element at the same index in `l2` and `l3` is equal to the current element in `l1`\n            # Add the element to the `commonElements` list\n# Return the `commonElements` list"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Object> extractIndexList(ArrayList<Long> l1, ArrayList<Long> l2, ArrayList<Long> l3) {\n        ArrayList<Object> commonElements = new ArrayList<>();\n        for (int i = 0; i < l1.size(); i++) {\n            if (i < l2.size() && i < l3.size()) {\n                if (l1.get(i).equals(l2.get(i)) && l1.get(i).equals(l3.get(i))) {\n                    commonElements.add(l1.get(i));\n                }\n            }\n        }\n        return commonElements;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/421",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to concatenate each element of pair by the delimiter.\n    public static String concatenateTuple(Pair<String, String, Long, String> test_tup) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(concatenateTuple((Pair.with(\"ID\", \"is\", 4l, \"UTS\"))).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple((Pair.with(\"QWE\", \"is\", 4l, \"RTY\"))).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple((Pair.with(\"ZEN\", \"is\", 4l, \"OP\"))).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a StringBuilder object to store the concatenated elements\n# Append the first element of the pair to the StringBuilder\n# Append the delimiter to the StringBuilder\n# Append the second element of the pair to the StringBuilder\n# Append the delimiter to the StringBuilder\n# Append the third element of the pair to the StringBuilder\n# Append the delimiter to the StringBuilder\n# Append the fourth element of the pair to the StringBuilder\n# Convert the StringBuilder to a string and return it"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String concatenateTuple(Pair<String, String, Long, String> test_tup) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(test_tup.getValue0());\n        sb.append(\"-\");\n        sb.append(test_tup.getValue1());\n        sb.append(\"-\");\n        sb.append(test_tup.getValue2());\n        sb.append(\"-\");\n        sb.append(test_tup.getValue3());\n        return sb.toString();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/628",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to replace all spaces in the given string with '%20'.\n    public static String replaceSpaces(String string) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(replaceSpaces((\"My Name is Dawood\")).equals((\"My%20Name%20is%20Dawood\")));\n    assert(replaceSpaces((\"I am a Programmer\")).equals((\"I%20am%20a%20Programmer\")));\n    assert(replaceSpaces((\"I love Coding\")).equals((\"I%20love%20Coding\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Use the `replaceAll` method to replace all spaces in the given string with \"%20\"\n# Return the modified string"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String replaceSpaces(String string) {\n        return string.replaceAll(\" \", \"%20\");\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/170",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the sum of numbers in an array array list within a range specified by two indices.\n    public static long sumRangeList(ArrayList<Long> list1, long m, long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(sumRangeList((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)5l, (long)6l, (long)8l, (long)3l, (long)4l, (long)9l, (long)10l, (long)11l, (long)8l, (long)12l))), (8l), (10l)) == (29l));\n    assert(sumRangeList((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)5l, (long)6l, (long)8l, (long)3l, (long)4l, (long)9l, (long)10l, (long)11l, (long)8l, (long)12l))), (5l), (7l)) == (16l));\n    assert(sumRangeList((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)5l, (long)6l, (long)8l, (long)3l, (long)4l, (long)9l, (long)10l, (long)11l, (long)8l, (long)12l))), (7l), (10l)) == (38l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `sum` to 0\n# Iterate through each element in the given array list\n    # Check if the index of the current element is between the specified range m and n (inclusive)\n        # If so, add the current element to the `sum`\n# Return the `sum` value as the result of the function"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long sumRangeList(ArrayList<Long> list1, long m, long n) {\n        long sum = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            if (i >= m && i <= n) {\n                sum += list1.get(i);\n            }\n        }\n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/87",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to merge three dictionaries into a single hash map.\n    public static HashMap<String,String> mergeDictionariesThree(HashMap<String,String> dict1, HashMap<String,String> dict2, HashMap<String,String> dict3) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(mergeDictionariesThree((new HashMap<String,String>(Map.of(\"R\", \"Red\", \"B\", \"Black\", \"P\", \"Pink\"))), (new HashMap<String,String>(Map.of(\"G\", \"Green\", \"W\", \"White\"))), (new HashMap<String,String>(Map.of(\"O\", \"Orange\", \"W\", \"White\", \"B\", \"Black\")))).equals((new HashMap<String,String>(Map.of(\"B\", \"Black\", \"R\", \"Red\", \"P\", \"Pink\", \"G\", \"Green\", \"W\", \"White\", \"O\", \"Orange\")))));\n    assert(mergeDictionariesThree((new HashMap<String,String>(Map.of(\"R\", \"Red\", \"B\", \"Black\", \"P\", \"Pink\"))), (new HashMap<String,String>(Map.of(\"G\", \"Green\", \"W\", \"White\"))), (new HashMap<String,String>(Map.of(\"L\", \"lavender\", \"B\", \"Blue\")))).equals((new HashMap<String,String>(Map.of(\"W\", \"White\", \"P\", \"Pink\", \"B\", \"Black\", \"R\", \"Red\", \"G\", \"Green\", \"L\", \"lavender\")))));\n    assert(mergeDictionariesThree((new HashMap<String,String>(Map.of(\"R\", \"Red\", \"B\", \"Black\", \"P\", \"Pink\"))), (new HashMap<String,String>(Map.of(\"L\", \"lavender\", \"B\", \"Blue\"))), (new HashMap<String,String>(Map.of(\"G\", \"Green\", \"W\", \"White\")))).equals((new HashMap<String,String>(Map.of(\"B\", \"Black\", \"P\", \"Pink\", \"R\", \"Red\", \"G\", \"Green\", \"L\", \"lavender\", \"W\", \"White\")))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new empty HashMap to store the merged dictionaries\n# Iterate through each entry in the first dictionary\n    # Add each key-value pair to the new HashMap\n# Iterate through each entry in the second dictionary\n    # Check if the key already exists in the new HashMap\n        # If it does, update the value with the value from the second dictionary\n        # If it doesn't, add the key-value pair to the new HashMap\n# Iterate through each entry in the third dictionary\n    # Check if the key already exists in the new HashMap\n        # If it does, update the value with the value from the third dictionary\n        # If it doesn't, add the key-value pair to the new HashMap\n# Return the merged HashMap"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static HashMap<String, String> mergeDictionariesThree(HashMap<String, String> dict1, HashMap<String, String> dict2, HashMap<String, String> dict3) {\n        HashMap<String, String> mergedDict = new HashMap<>();\n\n        for (Map.Entry<String, String> entry : dict1.entrySet()) {\n            mergedDict.put(entry.getKey(), entry.getValue());\n        }\n\n        for (Map.Entry<String, String> entry : dict2.entrySet()) {\n            if (mergedDict.containsKey(entry.getKey())) {\n                mergedDict.put(entry.getKey(), entry.getValue());\n            } else {\n                mergedDict.putIfAbsent(entry.getKey(), entry.getValue());\n            }\n        }\n\n        for (Map.Entry<String, String> entry : dict3.entrySet()) {\n            if (mergedDict.containsKey(entry.getKey())) {\n                mergedDict.put(entry.getKey(), entry.getValue());\n            } else {\n                mergedDict.putIfAbsent(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return mergedDict;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/404",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the minimum of two numbers.\n    public static long minimum(long a, long b) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(minimum((1l), (2l)) == (1l));\n    assert(minimum((-5l), (-4l)) == (-5l));\n    assert(minimum((0l), (0l)) == (0l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the first number (a) is less than the second number (b)\n    # If a is less than b, return a\n    # Otherwise, return b"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long minimum(long a, long b) {\n        if (a < b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/63",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the maximum difference between available pairs in the given pair array list.\n    public static long maxDifference(ArrayList<Pair<Long, Long>> test_list) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(maxDifference((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 5l), (Pair<Long, Long>)Pair.with(1l, 7l), (Pair<Long, Long>)Pair.with(10l, 3l), (Pair<Long, Long>)Pair.with(1l, 2l))))) == (7l));\n    assert(maxDifference((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 6l), (Pair<Long, Long>)Pair.with(2l, 17l), (Pair<Long, Long>)Pair.with(9l, 13l), (Pair<Long, Long>)Pair.with(11l, 12l))))) == (15l));\n    assert(maxDifference((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(12l, 35l), (Pair<Long, Long>)Pair.with(21l, 27l), (Pair<Long, Long>)Pair.with(13l, 23l), (Pair<Long, Long>)Pair.with(41l, 22l))))) == (23l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `maxDiff` to store the maximum difference\n# Iterate through each pair in the given list\n    # Calculate the difference between the second element and the first element of the pair\n    # Update `maxDiff` if the calculated difference is greater than the current `maxDiff`\n# Return the value of `maxDiff`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long maxDifference(ArrayList<Pair<Long, Long>> test_list) {\n        long maxDiff = 0;\n        for (Pair<Long, Long> pair : test_list) {\n            long diff = pair.getValue1() - pair.getValue0();\n            if (diff > maxDiff) {\n                maxDiff = diff;\n            }\n        }\n        return maxDiff;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/304",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find element at a given index after number of rotations.\n    public static long findElement(ArrayList<Long> arr, ArrayList<ArrayList<Long>> ranges, long rotations, long index) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(findElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))), (new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)3l))))), (2l), (1l)) == (3l));\n    assert(findElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)2l))))), (1l), (2l)) == (3l));\n    assert(findElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)2l))))), (1l), (1l)) == (1l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a loop to iterate through the number of rotations\n    # Inside the loop, iterate through each range in the ranges list\n        # Get the start and end indices of the current range\n        # Get the value at the start index\n        # Set the value at the end index to be equal to the value at the start index\n    # After the loop, get the value at the given index from the modified array and return it"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long findElement(ArrayList<Long> arr, ArrayList<ArrayList<Long>> ranges, long rotations, long index) {\n        for (long i = 0; i < rotations; i++) {\n            for (ArrayList<Long> range : ranges) {\n                long start = range.get(0);\n                long end = range.get(1);\n                long value = arr.get((int) start);\n                arr.set((int) end, value);\n            }\n        }\n        return arr.get((int) index);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/118",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert a string to an array array list of strings split on the space character.\n    public static ArrayList<String> stringToList(String string) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(stringToList((\"python programming\")).equals((new ArrayList<String>(Arrays.asList((String)\"python\", (String)\"programming\")))));\n    assert(stringToList((\"lists tuples strings\")).equals((new ArrayList<String>(Arrays.asList((String)\"lists\", (String)\"tuples\", (String)\"strings\")))));\n    assert(stringToList((\"write a program\")).equals((new ArrayList<String>(Arrays.asList((String)\"write\", (String)\"a\", (String)\"program\")))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Split the input string using the space character as the delimiter\n# Create a new ArrayList to store the split strings\n# Iterate through each split string\n    # Add each split string to the ArrayList\n# Return the ArrayList"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<String> stringToList(String string) {\n        String[] splitStrings = string.split(\" \");\n        ArrayList<String> arrayList = new ArrayList<>();\n        for (String splitString : splitStrings) {\n            arrayList.add(splitString);\n        }\n        return arrayList;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/119",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the element that appears only once in a sorted array array list.\n    public static long search(ArrayList<Long> arr) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l, (long)2l, (long)3l)))) == (3l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)3l, (long)3l, (long)4l, (long)4l, (long)5l, (long)5l, (long)7l, (long)7l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)4l, (long)4l)))) == (1l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `result` to store the element that appears only once\n# Iterate through the elements in the input ArrayList\n    # Check if the current element is equal to the next element\n        # If they are equal, skip to the next iteration\n        # If they are not equal, assign the current element to `result` and break the loop\n# Return `result` which contains the element that appears only once"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long search(ArrayList<Long> arr) {\n        long result = 0;\n        for (int i = 0; i < arr.size() - 1; i += 2) {\n            if (arr.get(i) != arr.get(i + 1)) {\n                result = arr.get(i);\n                break;\n            }\n        }\n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/475",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to sort a hash map by value.\n    public static ArrayList<Pair<String, Long>> sortCounter(HashMap<String,Long> dict1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(sortCounter((new HashMap<String,Long>(Map.of(\"Math\", 81l, \"Physics\", 83l, \"Chemistry\", 87l)))).equals((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Chemistry\", 87l), (Pair<String, Long>)Pair.with(\"Physics\", 83l), (Pair<String, Long>)Pair.with(\"Math\", 81l))))));\n    assert(sortCounter((new HashMap<String,Long>(Map.of(\"Math\", 400l, \"Physics\", 300l, \"Chemistry\", 250l)))).equals((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Math\", 400l), (Pair<String, Long>)Pair.with(\"Physics\", 300l), (Pair<String, Long>)Pair.with(\"Chemistry\", 250l))))));\n    assert(sortCounter((new HashMap<String,Long>(Map.of(\"Math\", 900l, \"Physics\", 1000l, \"Chemistry\", 1250l)))).equals((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Chemistry\", 1250l), (Pair<String, Long>)Pair.with(\"Physics\", 1000l), (Pair<String, Long>)Pair.with(\"Math\", 900l))))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Convert the input HashMap into a List of Map.Entry objects\n# Sort the List based on the values of the Map.Entry objects using a custom Comparator\n# Convert the sorted List back into an ArrayList of Pairs\n# Return the sorted ArrayList"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Pair<String, Long>> sortCounter(HashMap<String, Long> dict1) {\n        List<Map.Entry<String, Long>> entryList = new ArrayList<>(dict1.entrySet());\n        \n        Collections.sort(entryList, new Comparator<Map.Entry<String, Long>>() {\n            public int compare(Map.Entry<String, Long> entry1, Map.Entry<String, Long> entry2) {\n                return entry1.getValue().compareTo(entry2.getValue());\n            }\n        });\n        \n        ArrayList<Pair<String, Long>> sortedList = new ArrayList<>();\n        for (Map.Entry<String, Long> entry : entryList) {\n            sortedList.add(new Pair<>(entry.getKey(), entry.getValue()));\n        }\n        \n        return sortedList;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/11",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to remove first and last occurrence of a given character from the string.\n    public static String removeOcc(String s, String ch) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Find the first occurrence of the given character in the input string\n# If the character is found, remove it from the string\n# Find the last occurrence of the given character in the modified string\n# If the character is found, remove it from the modified string\n# Return the modified string"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String removeOcc(String s, String ch) {\n        int firstIndex = s.indexOf(ch);\n        if (firstIndex != -1) {\n            s = s.substring(0, firstIndex) + s.substring(firstIndex + 1);\n        }\n\n        int lastIndex = s.lastIndexOf(ch);\n        if (lastIndex != -1) {\n            s = s.substring(0, lastIndex) + s.substring(lastIndex + 1);\n        }\n\n        return s;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/266",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the lateral surface area of a cube given its side length.\n    public static long lateralsurfaceCube(long l) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(lateralsurfaceCube((5l)) == (100l));\n    assert(lateralsurfaceCube((9l)) == (324l));\n    assert(lateralsurfaceCube((10l)) == (400l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Calculate the lateral surface area of a cube using the formula: L = 4 * l^2, where L is the lateral surface area and l is the side length of the cube.\n# Return the calculated lateral surface area."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long lateralsurfaceCube(long l) {\n        return 4 * l * l;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/431",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes two array lists and returns true if they have at least one common element.\n    public static Optional<Boolean> commonElement(ArrayList<Object> list1, ArrayList<Object> list2) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(commonElement((new ArrayList<Object>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))), (new ArrayList<Object>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))).equals(Optional.of(true)));\n    assert(commonElement((new ArrayList<Object>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))), (new ArrayList<Object>(Arrays.asList((long)6l, (long)7l, (long)8l, (long)9l)))).equals(Optional.empty()));\n    assert(commonElement((new ArrayList<Object>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\"))), (new ArrayList<Object>(Arrays.asList((String)\"d\", (String)\"b\", (String)\"e\")))).equals(Optional.of(true)));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Iterate through each element in `list1`\n    # Check if the current element exists in `list2`\n        # If it does, return `true`\n# If no common element is found, return `false`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Optional<Boolean> commonElement(ArrayList<Object> list1, ArrayList<Object> list2) {\n        for (Object obj : list1) {\n            if (list2.contains(obj)) {\n                return Optional.of(true);\n            }\n        }\n        return Optional.of(false);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/106",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to append the given array list to the given pairs.\n    public static Pair<Long, Long, Long, Long, Long> addLists(ArrayList<Long> test_list, Pair<Long, Long> test_tup) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(addLists((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l))), (Pair.with(9l, 10l))).equals((Pair.with(9l, 10l, 5l, 6l, 7l))));\n    assert(addLists((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l))), (Pair.with(10l, 11l))).equals((Pair.with(10l, 11l, 6l, 7l, 8l))));\n    assert(addLists((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l))), (Pair.with(11l, 12l))).equals((Pair.with(11l, 12l, 7l, 8l, 9l))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Extract the individual elements from the input `Pair<Long, Long>` object\n# Create a new `Pair` object with the elements from the input pair and the elements from the input array list appended\n# Return the new `Pair` object"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Pair<Long, Long, Long, Long, Long> addLists(ArrayList<Long> test_list, Pair<Long, Long> test_tup) {\n        long first = test_tup.getValue0();\n        long second = test_tup.getValue1();\n        \n        ArrayList<Long> newList = new ArrayList<>(test_list);\n        newList.add(first);\n        newList.add(second);\n        \n        Pair<Long, Long, Long, Long, Long> result = Pair.with(newList.get(0), newList.get(1), newList.get(2), newList.get(3), newList.get(4));\n        return result;\n    }\n}\n"
        ]
    },
    {
        "id": "mbpp_java/623",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to compute the n-th power of each number in an array array list.\n    public static ArrayList<Long> nthNums(ArrayList<Long> nums, long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(nthNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)9l, (long)16l, (long)25l, (long)36l, (long)49l, (long)64l, (long)81l, (long)100l)))));\n    assert(nthNums((new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)30l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)1000l, (long)8000l, (long)27000l)))));\n    assert(nthNums((new ArrayList<Long>(Arrays.asList((long)12l, (long)15l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)248832l, (long)759375l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new ArrayList to store the computed nth power of each number\n# Iterate through each number in the input ArrayList\n    # Compute the nth power of the current number using the Math.pow() method\n    # Add the computed value to the new ArrayList\n# Return the new ArrayList with the computed nth powers of each number"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> nthNums(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long num : nums) {\n            result.add((long) Math.pow(num, n));\n        }\n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/141",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to sort an array array list of elements.\n    public static ArrayList<Long> pancakeSort(ArrayList<Long> nums) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(pancakeSort((new ArrayList<Long>(Arrays.asList((long)15l, (long)79l, (long)25l, (long)38l, (long)69l)))).equals((new ArrayList<Long>(Arrays.asList((long)15l, (long)25l, (long)38l, (long)69l, (long)79l)))));\n    assert(pancakeSort((new ArrayList<Long>(Arrays.asList((long)98l, (long)12l, (long)54l, (long)36l, (long)85l)))).equals((new ArrayList<Long>(Arrays.asList((long)12l, (long)36l, (long)54l, (long)85l, (long)98l)))));\n    assert(pancakeSort((new ArrayList<Long>(Arrays.asList((long)41l, (long)42l, (long)32l, (long)12l, (long)23l)))).equals((new ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)32l, (long)41l, (long)42l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Find the maximum element in the input array list and its index\n# Reverse the sublist from the beginning of the array list to the index of the maximum element\n# Reverse the entire array list\n# Remove the last element from the array list\n# Repeat steps 1-4 until the array list is sorted in ascending order\n# Return the sorted array list"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> pancakeSort(ArrayList<Long> nums) {\n        int n = nums.size();\n        for (int i = n - 1; i >= 0; i--) {\n            int maxIndex = findMaxIndex(nums, i);\n            if (maxIndex != i) {\n                flip(nums, maxIndex);\n                flip(nums, i);\n            }\n        }\n        return nums;\n    }\n\n    private static int findMaxIndex(ArrayList<Long> nums, int end) {\n        long max = Long.MIN_VALUE;\n        int maxIndex = 0;\n        for (int i = 0; i <= end; i++) {\n            if (nums.get(i) > max) {\n                max = nums.get(i);\n                maxIndex = i;\n            }\n        }\n        return maxIndex;\n    }\n\n    private static void flip(ArrayList<Long> nums, int end) {\n        int start = 0;\n        while (start < end) {\n            long temp = nums.get(start);\n            nums.set(start, nums.get(end));\n            nums.set(end, temp);\n            start++;\n            end--;\n        }\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/397",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the median of three numbers.\n    public static float medianNumbers(long a, long b, long c) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Sort the three numbers in ascending order\n# If the middle number is an integer, return it as the median\n# If the middle number is a fraction, calculate the average of the middle two numbers and return it as the median"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static float medianNumbers(long a, long b, long c) {\n        long[] arr = {a, b, c};\n        Arrays.sort(arr);\n        \n        if (arr[1] % 1 == 0) {\n            return arr[1];\n        } else {\n            return (arr[1] + arr[2]) / 2.0f;\n        }\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/433",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check whether the entered number is greater than the elements of the given array array list.\n    public static boolean checkGreater(ArrayList<Long> arr, long number) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(checkGreater((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))), (4l)) == (false));\n    assert(checkGreater((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (8l)) == (true));\n    assert(checkGreater((new ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)4l, (long)8l, (long)6l, (long)1l))), (11l)) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Iterate through each element in the array list\n    # Check if the current element is less than or equal to the given number\n        # If any element is found that is less than or equal to the given number, return false\n# If all elements are greater than the given number, return true"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean checkGreater(ArrayList<Long> arr, long number) {\n        for (Long element : arr) {\n            if (element <= number) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/284",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list and element and checks whether all items in the array list are equal to the given element.\n    public static boolean checkElement(ArrayList<Object> list, Object element) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(checkElement((new ArrayList<Object>(Arrays.asList((String)\"green\", (String)\"orange\", (String)\"black\", (String)\"white\"))), (Object(\"blue\"))) == (false));\n    assert(checkElement((new ArrayList<Object>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (Object(7l))) == (false));\n    assert(checkElement((new ArrayList<Object>(Arrays.asList((String)\"green\", (String)\"green\", (String)\"green\", (String)\"green\"))), (Object(\"green\"))) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Iterate through each element in the array list\n    # Check if the current element is equal to the given element\n        # If not, return false\n# If all elements are equal to the given element, return true"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean checkElement(ArrayList<Object> list, Object element) {\n        for (Object obj : list) {\n            if (!obj.equals(element)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/450",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to extract specified size of strings from a given array list of string values.\n    public static ArrayList<String> extractString(ArrayList<String> str, long l) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(extractString((new ArrayList<String>(Arrays.asList((String)\"Python\", (String)\"list\", (String)\"exercises\", (String)\"practice\", (String)\"solution\"))), (8l)).equals((new ArrayList<String>(Arrays.asList((String)\"practice\", (String)\"solution\")))));\n    assert(extractString((new ArrayList<String>(Arrays.asList((String)\"Python\", (String)\"list\", (String)\"exercises\", (String)\"practice\", (String)\"solution\"))), (6l)).equals((new ArrayList<String>(Arrays.asList((String)\"Python\")))));\n    assert(extractString((new ArrayList<String>(Arrays.asList((String)\"Python\", (String)\"list\", (String)\"exercises\", (String)\"practice\", (String)\"solution\"))), (9l)).equals((new ArrayList<String>(Arrays.asList((String)\"exercises\")))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new ArrayList to store the extracted strings\n# Iterate through each string in the input ArrayList\n    # Check if the length of the current string is equal to the specified size\n        # If it is, add the string to the new ArrayList\n# Return the new ArrayList with the extracted strings"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<String> extractString(ArrayList<String> str, long l) {\n        ArrayList<String> extractedStrings = new ArrayList<>();\n\n        for (String s : str) {\n            if (s.length() == l) {\n                extractedStrings.add(s);\n            }\n        }\n        return extractedStrings;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/16",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    public static boolean textLowercaseUnderscore(String text) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(textLowercaseUnderscore((\"aab_cbbbc\")) == (true));\n    assert(textLowercaseUnderscore((\"aab_Abbbc\")) == (false));\n    assert(textLowercaseUnderscore((\"Aaab_abbbc\")) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Use the `matches` method of the `String` class and a regular expression to check if the input string matches the desired pattern.\n# The regular expression should match sequences of lowercase letters (`[a-z]`) joined with an underscore (`_`).\n# If the input string matches the pattern, return `true`.\n# Otherwise, return `false`."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean textLowercaseUnderscore(String text) {\n        return text.matches(\"[a-z]+_[a-z]+\");\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/444",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to trim each array list by k in the given array lists.\n    public static ArrayList<ArrayList<Long>> trimTuple(ArrayList<ArrayList<Long>> test_list, long K) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(trimTuple((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)9l, (long)2l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)1l, (long)2l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)8l, (long)2l, (long)1l, (long)7l))))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l)))))));\n    assert(trimTuple((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)9l, (long)2l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)1l, (long)2l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)8l, (long)2l, (long)1l, (long)7l))))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)9l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)2l, (long)1l)))))));\n    assert(trimTuple((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)4l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)11l, (long)8l, (long)12l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)9l, (long)7l))))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)12l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)9l)))))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new ArrayList to store the trimmed ArrayLists\n# Iterate through each ArrayList in the given ArrayList\n    # Create a new ArrayList to store the trimmed elements\n    # Iterate through each element in the current ArrayList\n        # Check if the element is less than or equal to K\n            # If it is, add it to the new ArrayList\n    # Add the new ArrayList to the new ArrayList of ArrayLists\n# Return the new ArrayList of ArrayLists"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<ArrayList<Long>> trimTuple(ArrayList<ArrayList<Long>> test_list, long K) {\n        ArrayList<ArrayList<Long>> trimmedList = new ArrayList<>();\n\n        for (ArrayList<Long> list : test_list) {\n            ArrayList<Long> trimmedElements = new ArrayList<>();\n\n            for (Long element : list) {\n                if (element <= K) {\n                    trimmedElements.add(element);\n                }\n            }\n\n            trimmedList.add(trimmedElements);\n        }\n\n        return trimmedList;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/457",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the subarray list having minimum length.\n    public static ArrayList<Object> FindMin(ArrayList<ArrayList<Object>> lst) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(FindMin((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))))).equals((new ArrayList<Object>(Arrays.asList((long)1l)))));\n    assert(FindMin((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)7l, (long)8l)))))).equals((new ArrayList<Object>(Arrays.asList((long)1l, (long)1l)))));\n    assert(FindMin((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"x\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\")))))).equals((new ArrayList<Object>(Arrays.asList((String)\"x\")))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `minLength` with a large number\n# Initialize a variable `minSubarray` to store the subarray list with minimum length\n# Iterate through each subarray in the input list\n    # Check the length of the current subarray\n        # If the length is smaller than `minLength`\n            # Update `minLength` with the length of the current subarray\n            # Update `minSubarray` with the current subarray\n# Return `minSubarray` as the result"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Object> findMin(ArrayList<ArrayList<Object>> lst) {\n        int minLength = Integer.MAX_VALUE;\n        ArrayList<Object> minSubarray = new ArrayList<>();\n\n        for (ArrayList<Object> subarray : lst) {\n            int length = subarray.size();\n            if (length < minLength) {\n                minLength = length;\n                minSubarray = subarray;\n            }\n        }\n\n        return minSubarray;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/426",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to filter odd numbers.\n    public static ArrayList<Long> filterOddnumbers(ArrayList<Long> nums) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(filterOddnumbers((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)7l, (long)9l)))));\n    assert(filterOddnumbers((new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)45l, (long)67l, (long)84l, (long)93l)))).equals((new ArrayList<Long>(Arrays.asList((long)45l, (long)67l, (long)93l)))));\n    assert(filterOddnumbers((new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)9l, (long)8l, (long)6l, (long)4l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)9l, (long)3l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create an empty ArrayList to store the filtered odd numbers\n# Iterate through each number in the input ArrayList\n    # Check if the number is odd (i.e., not divisible by 2)\n        # If the number is odd, add it to the filtered ArrayList\n# Return the filtered ArrayList containing only the odd numbers"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> filterOddnumbers(ArrayList<Long> nums) {\n        ArrayList<Long> filteredNums = new ArrayList<>();\n\n        for (Long num : nums) {\n            if (num % 2 != 0) {\n                filteredNums.add(num);\n            }\n        }\n\n        return filteredNums;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/584",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the first adverb ending with ly and its positions in a given string.\n    public static String findAdverbs(String text) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(findAdverbs((\"Clearly, he has no excuse for such behavior.\")).equals((\"0-7: Clearly\")));\n    assert(findAdverbs((\"Please handle the situation carefuly\")).equals((\"28-36: carefuly\")));\n    assert(findAdverbs((\"Complete the task quickly\")).equals((\"18-25: quickly\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Split the input string into an array of words using whitespace as the delimiter\n# Initialize an empty list to store the adverbs\n# Iterate through each word in the array\n    # Check if the word ends with \"ly\" and is longer than 2 characters\n        # If it is an adverb, add it to the list along with its position in the string\n# Convert the list of adverbs and their positions to a string and return it"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String findAdverbs(String text) {\n        String[] words = text.split(\" \");\n        List<Pair<String, Integer>> adverbs = new ArrayList<>();\n\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].endsWith(\"ly\") && words[i].length() > 2) {\n                adverbs.add(new Pair<>(words[i], i));\n            }\n        }\n\n        StringBuilder result = new StringBuilder();\n        for (Pair<String, Integer> adverb : adverbs) {\n            result.append(adverb.getValue0())\n                    .append(\" (\")\n                    .append(adverb.getValue1())\n                    .append(\"), \");\n        }\n\n        if (result.length() > 0) {\n            result.delete(result.length() - 2, result.length());\n        }\n\n        return result.toString();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/611",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input matrix is null or empty\n# Check if the value of N is valid (greater than 0 and less than or equal to the number of columns in the matrix)\n# Iterate through each row in the matrix\n    # Get the value of the Nth column for the current row\n    # Update the maximum value if the current value is greater than the maximum value\n# Return the maximum value found in the Nth column"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        if (test_list == null || test_list.isEmpty()) {\n            return -1;\n        }\n        \n        int numColumns = test_list.get(0).size();\n        if (N <= 0 || N > numColumns) {\n            return -1;\n        }\n        \n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.size() >= N) {\n                long value = row.get((int) N - 1);\n                max = Math.max(max, value);\n            }\n        }\n        \n        return max;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/99",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static String decimalToBinary(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(decimalToBinary((8l)).equals((\"1000\")));\n    assert(decimalToBinary((18l)).equals((\"10010\")));\n    assert(decimalToBinary((7l)).equals((\"111\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input number is zero\n    # If zero, return \"0\"\n# Create an empty string to store the binary representation\n# Iterate until the number becomes zero\n    # Get the remainder of the number divided by 2\n    # Add the remainder to the binary string\n    # Divide the number by 2\n# Reverse the binary string\n# Return the binary representation as a string"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String decimalToBinary(long n) {\n        if (n == 0) {\n            return \"0\";\n        }\n        \n        StringBuilder binary = new StringBuilder();\n        \n        while (n > 0) {\n            binary.append(n % 2);\n            n /= 2;\n        }\n        \n        return binary.reverse().toString();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/255",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list and length n, and generates all combinations (with repetition) of the elements of the array list and returns an array array list with an array array list for each combination.\n    public static ArrayList<ArrayList<String>> combinationsColors(ArrayList<String> l, long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(combinationsColors((new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Green\", (String)\"Blue\"))), (1l)).equals((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Red\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Green\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Blue\")))))));\n    assert(combinationsColors((new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Green\", (String)\"Blue\"))), (2l)).equals((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Red\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Green\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Blue\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Green\", (String)\"Green\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Green\", (String)\"Blue\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Blue\", (String)\"Blue\")))))));\n    assert(combinationsColors((new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Green\", (String)\"Blue\"))), (3l)).equals((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Red\", (String)\"Red\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Red\", (String)\"Green\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Red\", (String)\"Blue\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Green\", (String)\"Green\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Green\", (String)\"Blue\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Blue\", (String)\"Blue\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Green\", (String)\"Green\", (String)\"Green\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Green\", (String)\"Green\", (String)\"Blue\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Green\", (String)\"Blue\", (String)\"Blue\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Blue\", (String)\"Blue\", (String)\"Blue\")))))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create an empty ArrayList to store the combinations\n# Create a helper function that takes the current combination, the remaining length, and the current index\n    # Base case: If the remaining length is 0, add the current combination to the list of combinations and return\n    # Recursive case:\n        # Iterate through each element in the input ArrayList starting from the current index\n            # Add the current element to the current combination\n            # Call the helper function recursively with the updated combination, decreased remaining length, and the current index\n            # Remove the last element from the current combination to backtrack\n# Call the helper function with an empty combination, the given length, and the starting index of 0\n# Return the list of combinations"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<ArrayList<String>> combinationsColors(ArrayList<String> l, long n) {\n        ArrayList<ArrayList<String>> combinations = new ArrayList<>();\n        generateCombinations(l, new ArrayList<>(), n, 0, combinations);\n        return combinations;\n    }\n\n    public static void generateCombinations(ArrayList<String> l, ArrayList<String> current, long remaining, int index, ArrayList<ArrayList<String>> combinations) {\n        if (remaining == 0) {\n            combinations.add(new ArrayList<>(current));\n            return;\n        }\n\n        for (int i = index; i < l.size(); i++) {\n            current.add(l.get(i));\n            generateCombinations(l, current, remaining - 1, i, combinations);\n            current.remove(current.size() - 1);\n        }\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/800",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to remove all whitespaces from a string.\n    public static String removeAllSpaces(String text) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(removeAllSpaces((\"python  program\")).equals((\"pythonprogram\")));\n    assert(removeAllSpaces((\"python   programming    language\")).equals((\"pythonprogramminglanguage\")));\n    assert(removeAllSpaces((\"python                     program\")).equals((\"pythonprogram\")));\n    assert(removeAllSpaces((\"   python                     program\")).equals((\"pythonprogram\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize an empty string to store the modified text without spaces\n# Iterate through each character in the input string\n    # Check if the current character is not a whitespace\n        # If not a whitespace, append it to the modified string\n# Return the modified string without spaces"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String removeAllSpaces(String text) {\n        StringBuilder modifiedText = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (!Character.isWhitespace(text.charAt(i))) {\n                modifiedText.append(text.charAt(i));\n            }\n        }\n        return modifiedText.toString();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/595",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static Object minSwaps(String str1, String str2) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the lengths of the two input strings are equal\n    # If not, return -1 as it is not possible to convert one binary number to another with different lengths\n# Initialize a variable `count` to keep track of the number of swaps required\n# Iterate through each character and its index in the first input string\n    # If the current character in the first string is not equal to the current character in the second string\n        # Increment the `count` variable\n# Return the value of `count` as the minimum number of swaps required to convert one binary number to another"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Object minSwaps(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return -1;\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/788",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to create a new pair from the given string and array list.\n    public static Pair<String, String, String> newTuple(ArrayList<String> test_list, String test_str) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(newTuple((new ArrayList<String>(Arrays.asList((String)\"WEB\", (String)\"is\"))), (\"best\")).equals((Pair.with(\"WEB\", \"is\", \"best\"))));\n    assert(newTuple((new ArrayList<String>(Arrays.asList((String)\"We\", (String)\"are\"))), (\"Developers\")).equals((Pair.with(\"We\", \"are\", \"Developers\"))));\n    assert(newTuple((new ArrayList<String>(Arrays.asList((String)\"Part\", (String)\"is\"))), (\"Wrong\")).equals((Pair.with(\"Part\", \"is\", \"Wrong\"))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new `Pair` object with three elements: a string from the given array list, the given string, and another string from the given array list\n# Return the created `Pair` object"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Pair<String, String, String> newTuple(ArrayList<String> test_list, String test_str) {\n        if (test_list == null || test_list.isEmpty() || test_str == null) {\n            return null;\n        }\n        String str1 = test_list.get(0);\n        String str2 = test_list.get(test_list.size() - 1);\n        return new Pair<>(str1, test_str, str2);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/471",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the product of the array array list multiplication modulo n.\n    public static long findRemainder(ArrayList<Long> arr, long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(findRemainder((new ArrayList<Long>(Arrays.asList((long)100l, (long)10l, (long)5l, (long)25l, (long)35l, (long)14l))), (11l)) == (9l));\n    assert(findRemainder((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l))), (1l)) == (0l));\n    assert(findRemainder((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l))), (2l)) == (0l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `result` as 1 to store the product of the array list\n# Iterate through each element in the array list\n    # Multiply the current element with `result` and take the modulus with `n`\n    # Update `result` with the new value\n# Return `result` as the product of the array list multiplication modulo n"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long findRemainder(ArrayList<Long> arr, long n) {\n        long result = 1;\n        for (long num : arr) {\n            result = (result * num) % n;\n        }\n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/442",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the ration of positive numbers in an array array list of integers.\n    public static float positiveCount(ArrayList<Long> nums) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(positiveCount((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)-1l, (long)-5l, (long)6l, (long)0l, (long)-3l, (long)-2l, (long)3l, (long)4l, (long)6l, (long)8l)))) == (0.54f));\n    assert(positiveCount((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)2l, (long)-1l, (long)-5l, (long)6l, (long)4l, (long)-3l, (long)-2l, (long)3l, (long)4l, (long)6l, (long)8l)))) == (0.69f));\n    assert(positiveCount((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-6l, (long)-9l, (long)11l, (long)-12l, (long)14l, (long)-5l, (long)17l)))) == (0.56f));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `count` to keep track of the number of positive numbers\n# Iterate through each number in the array list\n    # Check if the number is greater than 0\n        # If it is, increment the `count` variable by 1\n# Calculate the ratio of positive numbers by dividing `count` by the total number of elements in the array list\n# Return the ratio"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static float positiveCount(ArrayList<Long> nums) {\n        int count = 0;\n        for (long num : nums) {\n            if (num > 0) {\n                count++;\n            }\n        }\n        return (float) count / nums.size();\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/750",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to add the given pair to the given array list.\n    public static ArrayList<Long> addTuple(ArrayList<Long> test_list, Pair<Long, Long> test_tup) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(addTuple((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l))), (Pair.with(9l, 10l))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)9l, (long)10l)))));\n    assert(addTuple((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l))), (Pair.with(10l, 11l))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l, (long)10l, (long)11l)))));\n    assert(addTuple((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l))), (Pair.with(11l, 12l))).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)11l, (long)12l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Append the first element of the pair to the array list\n# Append the second element of the pair to the array list\n# Return the modified array list"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> addTuple(ArrayList<Long> test_list, Pair<Long, Long> test_tup) {\n        test_list.add(test_tup.getValue0());\n        test_list.add(test_tup.getValue1());\n        return test_list;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/806",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long maxRunUppercase(String test_str) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize variables to keep track of the maximum run length and the current run length\n# Iterate through each character in the input string\n    # If the current character is an uppercase character\n        # Increment the current run length\n        # Update the maximum run length if the current run length is greater\n    # If the current character is not an uppercase character\n        # Reset the current run length to 0\n# Return the maximum run length"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long maxRunUppercase(String test_str) {\n        long maxRun = 0;\n        long currentRun = 0;\n        for (int i = 0; i < test_str.length(); i++) {\n            char c = test_str.charAt(i);\n            if (Character.isUpperCase(c)) {\n                currentRun++;\n                if (currentRun > maxRun) {\n                    maxRun = currentRun;\n                }\n            } else {\n                currentRun = 0;\n            }\n        }\n        return maxRun;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/12",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    public static ArrayList<ArrayList<Long>> sortMatrix(ArrayList<ArrayList<Long>> M) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(sortMatrix((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)5l)))))));\n    assert(sortMatrix((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)-2l, (long)4l, (long)-5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)1l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)-2l, (long)4l, (long)-5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))))));\n    assert(sortMatrix((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)4l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)9l)))))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a list to store the sums of each row in the matrix\n# Iterate through each row in the matrix\n    # Calculate the sum of the current row and add it to the list of sums\n# Sort the list of sums in ascending order\n# Create a new matrix to store the sorted matrix\n# Iterate through each sum in the sorted list\n    # Find the index of the sum in the original list of sums\n    # Add the row at that index in the original matrix to the sorted matrix\n# Return the sorted matrix"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<ArrayList<Long>> sortMatrix(ArrayList<ArrayList<Long>> M) {\n        // Create a list to store the sums of each row in the matrix\n        ArrayList<Long> rowSums = new ArrayList<>();\n\n        // Iterate through each row in the matrix\n        for (ArrayList<Long> row : M) {\n            // Calculate the sum of the current row and add it to the list of sums\n            long sum = 0;\n            for (long element : row) {\n                sum += element;\n            }\n            rowSums.add(sum);\n        }\n\n        // Sort the list of sums in ascending order\n        Collections.sort(rowSums);\n\n        // Create a new matrix to store the sorted matrix\n        ArrayList<ArrayList<Long>> sortedMatrix = new ArrayList<>();\n\n        // Iterate through each sum in the sorted list\n        for (long sum : rowSums) {\n            // Find the index of the sum in the original list of sums\n            int index = rowSums.indexOf(sum);\n            \n            // Add the row at that index in the original matrix to the sorted matrix\n            sortedMatrix.add(M.get(index));\n        }\n\n        // Return the sorted matrix\n        return sortedMatrix;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/776",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to count those characters which have vowels as their neighbors in the given string.\n    public static long countVowels(String test_str) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(countVowels((\"bestinstareels\")) == (7l));\n    assert(countVowels((\"partofthejourneyistheend\")) == (12l));\n    assert(countVowels((\"amazonprime\")) == (5l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a counter variable to keep track of the number of characters with vowels as neighbors\n# Iterate through each character and its index in the input string\n    # Check if the current character is a vowel\n        # Check if the previous and next characters (if they exist) are also vowels\n            # If they are, increment the counter variable\n# Return the counter variable as the result of the function"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long countVowels(String test_str) {\n        long count = 0;\n        for (int i = 1; i < test_str.length() - 1; i++) {\n            char currentChar = test_str.charAt(i);\n            char previousChar = test_str.charAt(i - 1);\n            char nextChar = test_str.charAt(i + 1);\n            if (isVowel(currentChar) && isVowel(previousChar) && isVowel(nextChar)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static boolean isVowel(char c) {\n        c = Character.toLowerCase(c);\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/306",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long maxSumIncreasingSubseq(ArrayList<Long> a, long n, long index, long k) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(maxSumIncreasingSubseq((new ArrayList<Long>(Arrays.asList((long)1l, (long)101l, (long)2l, (long)3l, (long)100l, (long)4l, (long)5l))), (7l), (4l), (6l)) == (11l));\n    assert(maxSumIncreasingSubseq((new ArrayList<Long>(Arrays.asList((long)1l, (long)101l, (long)2l, (long)3l, (long)100l, (long)4l, (long)5l))), (7l), (2l), (5l)) == (7l));\n    assert(maxSumIncreasingSubseq((new ArrayList<Long>(Arrays.asList((long)11l, (long)15l, (long)19l, (long)21l, (long)26l, (long)28l, (long)31l))), (7l), (2l), (4l)) == (71l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a dynamic programming array `dp` of size `n` with all elements set to 0\n# Initialize a variable `maxSum` to 0\n# Iterate from index `i` to `n-1` (inclusive)\n    # Set `dp[i]` to the value of element at index `i` in the array `a`\n    # Iterate from index `j` to `i` (inclusive)\n        # If the element at index `i` in the array `a` is greater than the element at index `j` and `dp[i]` is less than the sum of the element at index `i` in the array `a` and `dp[j]`\n            # Update `dp[i]` with the sum of the element at index `i` in the array `a` and `dp[j]`\n    # If `dp[i]` is greater than `maxSum`, update `maxSum` with the value of `dp[i]`\n# Return `maxSum` + the element at index `k` in the array `a`"
        ],
        "code": [
            "import java.util.*;\n\nclass Problem {\n    public static long maxSumIncreasingSubseq(ArrayList<Long> a, long n, long index, long k) {\n        long[] dp = new long[(int)n];\n        long maxSum = 0;\n\n        for (int i = 0; i < n; i++) {\n            dp[i] = a.get((int)i);\n            for (int j = 0; j < i; j++) {\n                if (a.get(i) > a.get(j) && dp[i] < a.get(i) + dp[j]) {\n                    dp[i] = a.get(i) + dp[j];\n                }\n            }\n            if (dp[i] > maxSum) {\n                maxSum = dp[i];\n            }\n        }\n\n        return maxSum + a.get((int)k);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/128",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find words that are longer than n characters from a given array list of words.\n    public static ArrayList<String> longWords(long n, String str) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(longWords((3l), (\"python is a programming language\")).equals((new ArrayList<String>(Arrays.asList((String)\"python\", (String)\"programming\", (String)\"language\")))));\n    assert(longWords((2l), (\"writing a program\")).equals((new ArrayList<String>(Arrays.asList((String)\"writing\", (String)\"program\")))));\n    assert(longWords((5l), (\"sorting list\")).equals((new ArrayList<String>(Arrays.asList((String)\"sorting\")))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize an empty ArrayList to store the long words\n# Iterate through each word in the given ArrayList\n    # Check if the length of the current word is greater than n\n        # If the word is longer than n characters, add it to the result ArrayList\n# Return the result ArrayList containing the long words"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<String> longWords(long n, ArrayList<String> words) {\n        ArrayList<String> longWords = new ArrayList<>();\n        for (String word : words) {\n            if (word.length() > n) {\n                longWords.add(word);\n            }\n        }\n        return longWords;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/777",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the sum of non-repeated elements in a given array list.\n    public static long findSum(ArrayList<Long> arr) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(findSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)1l, (long)1l, (long)4l, (long)5l, (long)6l)))) == (21l));\n    assert(findSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)9l, (long)4l, (long)2l, (long)10l, (long)10l, (long)45l, (long)4l)))) == (71l));\n    assert(findSum((new ArrayList<Long>(Arrays.asList((long)12l, (long)10l, (long)9l, (long)45l, (long)2l, (long)10l, (long)10l, (long)45l, (long)10l)))) == (78l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a set to store the non-repeated elements\n# Initialize a sum variable to store the sum of non-repeated elements\n# Iterate through each element in the input array list\n    # Check if the element is not present in the set\n        # If it is not present, add it to the set and add it to the sum\n# Return the sum of non-repeated elements"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long findSum(ArrayList<Long> arr) {\n        HashSet<Long> nonRepeated = new HashSet<>();\n        long sum = 0;\n        for (Long num : arr) {\n            if (!nonRepeated.contains(num)) {\n                nonRepeated.add(num);\n                sum += num;\n            }\n        }\n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/740",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(Pair<Long, Long, Long, Long, Long, Long> test_tup) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(tupleToDict((Pair.with(1l, 5l, 7l, 10l, 13l, 5l))).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((Pair.with(1l, 2l, 3l, 4l, 5l, 6l))).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((Pair.with(7l, 8l, 9l, 10l, 11l, 12l))).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new HashMap object to store the key-value pairs\n# Extract the elements from the given Pair object\n# Iterate through the elements and add them as key-value pairs to the HashMap\n# Return the HashMap"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static HashMap<Long, Long> tupleToDict(Pair<Long, Long, Long, Long, Long, Long> test_tup) {\n        HashMap<Long, Long> map = new HashMap<>();\n        map.put(test_tup.getValue0(), test_tup.getValue1());\n        map.put(test_tup.getValue2(), test_tup.getValue3());\n        map.put(test_tup.getValue4(), test_tup.getValue5());\n        return map;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/630",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate pair.\n    public static ArrayList<ArrayList<Long>> getCoordinates(Pair<Long, Long> test_tup) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(getCoordinates((Pair.with(3l, 4l))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l)))))));\n    assert(getCoordinates((Pair.with(4l, 5l))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l)))))));\n    assert(getCoordinates((Pair.with(5l, 6l))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l)))))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize an empty ArrayList to store the adjacent coordinates.\n# Get the x and y values from the input coordinate pair.\n# Generate all possible adjacent coordinates by adding or subtracting 1 from the x and y values.\n# Create a new ArrayList for each adjacent coordinate and add it to the main ArrayList.\n# Return the main ArrayList containing all the adjacent coordinates."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<ArrayList<Long>> getCoordinates(Pair<Long, Long> test_tup) {\n        ArrayList<ArrayList<Long>> adjacentCoordinates = new ArrayList<>();\n\n        long x = test_tup.getValue0();\n        long y = test_tup.getValue1();\n\n        ArrayList<Long> adjacentCoordinate1 = new ArrayList<>();\n        adjacentCoordinate1.add(x - 1);\n        adjacentCoordinate1.add(y);\n        adjacentCoordinates.add(adjacentCoordinate1);\n\n        ArrayList<Long> adjacentCoordinate2 = new ArrayList<>();\n        adjacentCoordinate2.add(x + 1);\n        adjacentCoordinate2.add(y);\n        adjacentCoordinates.add(adjacentCoordinate2);\n\n        ArrayList<Long> adjacentCoordinate3 = new ArrayList<>();\n        adjacentCoordinate3.add(x);\n        adjacentCoordinate3.add(y - 1);\n        adjacentCoordinates.add(adjacentCoordinate3);\n\n        ArrayList<Long> adjacentCoordinate4 = new ArrayList<>();\n        adjacentCoordinate4.add(x);\n        adjacentCoordinate4.add(y + 1);\n        adjacentCoordinates.add(adjacentCoordinate4);\n\n        return adjacentCoordinates;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/222",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check if all the elements in pair have same data type or not.\n    public static boolean checkType(Object test_tuple) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));\n    assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));\n    assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Get the class of the first element in the pair\n# Iterate through each pair in the input object\n    # Check if the class of the current element is the same as the class of the first element\n        # If not, return false\n# If all elements have the same class, return true"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean checkType(Object test_tuple) {\n        if (!(test_tuple instanceof Pair)) {\n            return false;\n        }\n        \n        Pair<?, ?> pair = (Pair<?, ?>) test_tuple;\n        Class<?> firstClass = pair.getValue0().getClass();\n        \n        for (Pair<?, ?> p : pair.toList()) {\n            if (p.getValue0().getClass() != firstClass) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/627",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the smallest missing number from a sorted array list of natural numbers.\n    public static long findFirstMissing(ArrayList<Long> array) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(findFirstMissing((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l)))) == (4l));\n    assert(findFirstMissing((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)6l, (long)9l)))) == (3l));\n    assert(findFirstMissing((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)8l, (long)9l)))) == (0l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input array is null or empty. If so, return 1 as the smallest missing number.\n# Iterate through the array\n    # If the current number is not equal to the expected number, return the expected number as the smallest missing number.\n    # If the current number is equal to the expected number, increment the expected number by 1.\n# If all numbers in the array are in sequence, return the next number after the last element as the smallest missing number."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long findFirstMissing(ArrayList<Long> array) {\n        if (array == null || array.isEmpty()) {\n            return 1;\n        }\n        long expected = 1;\n        for (long num : array) {\n            if (num != expected) {\n                return expected;\n            }\n            expected++;\n        }\n        return expected;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/92",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static boolean isUndulating(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(isUndulating((1212121l)) == (true));\n    assert(isUndulating((1991l)) == (false));\n    assert(isUndulating((121l)) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Convert the input number to a string\n# Check if the length of the string is less than or equal to 2\n    # If the length is 1 or 2, return false since there cannot be an undulating number with such few digits\n# Iterate through each digit in the string, starting from index 1\n    # Check if the current digit is equal to the previous digit or the next digit\n        # If it is equal to either, return false since an undulating number should have alternating digits\n# If no equal adjacent digits are found, return true since the number is undulating"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean isUndulating(long n) {\n        String numStr = String.valueOf(n);\n        int length = numStr.length();\n        if (length <= 2) {\n            return false;\n        }\n        for (int i = 1; i < length - 1; i++) {\n            if (numStr.charAt(i) == numStr.charAt(i-1) || numStr.charAt(i) == numStr.charAt(i+1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/753",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find minimum k records from pair array list. https://www.geeksforgeeks.org/javathon-find-minimum-k-records-from-pair-array list/ - in this case a verbatim cojava of test cases\n    public static ArrayList<Pair<String, Long>> minK(ArrayList<Pair<String, Long>> test_list, long K) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(minK((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Manjeet\", 10l), (Pair<String, Long>)Pair.with(\"Akshat\", 4l), (Pair<String, Long>)Pair.with(\"Akash\", 2l), (Pair<String, Long>)Pair.with(\"Nikhil\", 8l)))), (2l)).equals((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Akash\", 2l), (Pair<String, Long>)Pair.with(\"Akshat\", 4l))))));\n    assert(minK((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Sanjeev\", 11l), (Pair<String, Long>)Pair.with(\"Angat\", 5l), (Pair<String, Long>)Pair.with(\"Akash\", 3l), (Pair<String, Long>)Pair.with(\"Nepin\", 9l)))), (3l)).equals((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Akash\", 3l), (Pair<String, Long>)Pair.with(\"Angat\", 5l), (Pair<String, Long>)Pair.with(\"Nepin\", 9l))))));\n    assert(minK((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"tanmay\", 14l), (Pair<String, Long>)Pair.with(\"Amer\", 11l), (Pair<String, Long>)Pair.with(\"Ayesha\", 9l), (Pair<String, Long>)Pair.with(\"SKD\", 16l)))), (1l)).equals((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Ayesha\", 9l))))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Sort the input list of pairs in ascending order based on the second element of each pair.\n# Create a new ArrayList to store the minimum K records.\n# Iterate through the sorted list and add the first K pairs to the new ArrayList.\n# Return the new ArrayList with the minimum K records."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Pair<String, Long>> minK(ArrayList<Pair<String, Long>> test_list, long K) {\n        // Sort the input list in ascending order based on the second element of each pair\n        Collections.sort(test_list, Comparator.comparing(Pair::getValue1));\n        \n        // Create a new ArrayList to store the minimum K records\n        ArrayList<Pair<String, Long>> minKRecords = new ArrayList<>();\n        \n        // Iterate through the sorted list and add the first K pairs to the new ArrayList\n        for (int i = 0; i < K && i < test_list.size(); i++) {\n            minKRecords.add(test_list.get(i));\n        }\n        \n        // Return the new ArrayList with the minimum K records\n        return minKRecords;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/61",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the number of substrings with the sum of digits equal to their length.\n    public static long countSubstrings(String s) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(countSubstrings((\"112112\")) == (6l));\n    assert(countSubstrings((\"111\")) == (6l));\n    assert(countSubstrings((\"1101112\")) == (12l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `count` to keep track of the number of substrings\n# Iterate through each possible substring of the input string\n    # Convert the substring to an integer\n    # Calculate the sum of the digits in the integer\n    # Check if the sum of digits is equal to the length of the substring\n        # If it is, increment the `count` variable\n# Return the value of `count`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long countSubstrings(String s) {\n        long count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            for (int j = i + 1; j <= s.length(); j++) {\n                String substring = s.substring(i, j);\n                int substringValue = Integer.parseInt(substring);\n                int sumOfDigits = calculateSumOfDigits(substringValue);\n                if (sumOfDigits == substring.length()) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    public static int calculateSumOfDigits(int n) {\n        int sum = 0;\n        while (n != 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/279",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the nth decagonal number.\n    public static long isNumDecagonal(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(isNumDecagonal((3l)) == (27l));\n    assert(isNumDecagonal((7l)) == (175l));\n    assert(isNumDecagonal((10l)) == (370l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Calculate the nth decagonal number using the formula: \n    # Decagonal number = n * (3n - 1) / 2\n# Return the calculated decagonal number"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long findNthDecagonalNumber(long n) {\n        return n * (3 * n - 1) / 2;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/272",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns an array array list containing the rear element of each pair.\n    public static ArrayList<Long> rearExtract(ArrayList<Pair<Long, String, Long>> test_list) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(rearExtract((new ArrayList<Pair<Long, String, Long>>(Arrays.asList((Pair<Long, String, Long>)Pair.with(1l, \"Rash\", 21l), (Pair<Long, String, Long>)Pair.with(2l, \"Varsha\", 20l), (Pair<Long, String, Long>)Pair.with(3l, \"Kil\", 19l))))).equals((new ArrayList<Long>(Arrays.asList((long)21l, (long)20l, (long)19l)))));\n    assert(rearExtract((new ArrayList<Pair<Long, String, Long>>(Arrays.asList((Pair<Long, String, Long>)Pair.with(1l, \"Sai\", 36l), (Pair<Long, String, Long>)Pair.with(2l, \"Ayesha\", 25l), (Pair<Long, String, Long>)Pair.with(3l, \"Salman\", 45l))))).equals((new ArrayList<Long>(Arrays.asList((long)36l, (long)25l, (long)45l)))));\n    assert(rearExtract((new ArrayList<Pair<Long, String, Long>>(Arrays.asList((Pair<Long, String, Long>)Pair.with(1l, \"Sudeep\", 14l), (Pair<Long, String, Long>)Pair.with(2l, \"Vandana\", 36l), (Pair<Long, String, Long>)Pair.with(3l, \"Dawood\", 56l))))).equals((new ArrayList<Long>(Arrays.asList((long)14l, (long)36l, (long)56l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create an empty array list to store the rear elements of each pair.\n# Iterate through each pair in the input array list\n    # Get the rear element of the current pair\n    # Add the rear element to the output array list\n# Return the output array list containing the rear elements of each pair."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> rearExtract(ArrayList<Pair<Long, String, Long>> test_list) {\n        ArrayList<Long> rearElements = new ArrayList<>();\n        for (Pair<Long, String, Long> pair : test_list) {\n            rearElements.add(pair.getValue2());\n        }\n        return rearElements;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/89",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the closest smaller number than n.\n    public static long closestNum(long N) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(closestNum((11l)) == (10l));\n    assert(closestNum((7l)) == (6l));\n    assert(closestNum((12l)) == (11l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input number N is less than or equal to 0\n    # If so, return -1 since there is no smaller number\n# Find the largest power of 10 that is less than N\n# Subtract 1 from the largest power of 10 to get the closest smaller number\n# Return the closest smaller number"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long closestNum(long N) {\n        if (N <= 0) {\n            return -1;\n        }\n        long largestPowerOf10 = 1;\n        while (largestPowerOf10 * 10 <= N) {\n            largestPowerOf10 *= 10;\n        }\n        return largestPowerOf10 - 1;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/780",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the combinations of sums with pairs in the given pair array list. https://www.geeksforgeeks.org/javathon-combinations-of-sum-with-pairs-in-pair-array list/\n    public static ArrayList<Pair<Long, Long>> findCombinations(ArrayList<Pair<Long, Long>> test_list) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(findCombinations((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(6l, 7l), (Pair<Long, Long>)Pair.with(5l, 1l), (Pair<Long, Long>)Pair.with(6l, 10l))))).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(8l, 11l), (Pair<Long, Long>)Pair.with(7l, 5l), (Pair<Long, Long>)Pair.with(8l, 14l), (Pair<Long, Long>)Pair.with(11l, 8l), (Pair<Long, Long>)Pair.with(12l, 17l), (Pair<Long, Long>)Pair.with(11l, 11l))))));\n    assert(findCombinations((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 5l), (Pair<Long, Long>)Pair.with(7l, 8l), (Pair<Long, Long>)Pair.with(6l, 2l), (Pair<Long, Long>)Pair.with(7l, 11l))))).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(10l, 13l), (Pair<Long, Long>)Pair.with(9l, 7l), (Pair<Long, Long>)Pair.with(10l, 16l), (Pair<Long, Long>)Pair.with(13l, 10l), (Pair<Long, Long>)Pair.with(14l, 19l), (Pair<Long, Long>)Pair.with(13l, 13l))))));\n    assert(findCombinations((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 6l), (Pair<Long, Long>)Pair.with(8l, 9l), (Pair<Long, Long>)Pair.with(7l, 3l), (Pair<Long, Long>)Pair.with(8l, 12l))))).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(12l, 15l), (Pair<Long, Long>)Pair.with(11l, 9l), (Pair<Long, Long>)Pair.with(12l, 18l), (Pair<Long, Long>)Pair.with(15l, 12l), (Pair<Long, Long>)Pair.with(16l, 21l), (Pair<Long, Long>)Pair.with(15l, 15l))))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize an empty list to store the combinations of sums with pairs\n# Iterate through each pair in the input list\n    # Iterate through the remaining pairs in the input list\n        # Calculate the sum of the current pair and the remaining pair\n        # Create a new pair with the sum and add it to the list of combinations\n# Return the list of combinations"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Pair<Long, Long>> findCombinations(ArrayList<Pair<Long, Long>> test_list) {\n        ArrayList<Pair<Long, Long>> combinations = new ArrayList<>();\n        \n        for (int i = 0; i < test_list.size(); i++) {\n            Pair<Long, Long> currentPair = test_list.get(i);\n            \n            for (int j = i + 1; j < test_list.size(); j++) {\n                Pair<Long, Long> remainingPair = test_list.get(j);\n                \n                Long sum = currentPair.getValue0() + remainingPair.getValue0();\n                combinations.add(new Pair<>(sum, currentPair.getValue1() + remainingPair.getValue1()));\n            }\n        }\n        \n        return combinations;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/721",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a 2D array `dp` with the same dimensions as the input matrix `cost`\n# Set the first element of `dp` as the first element of `cost`\n# Iterate through each row and column of `cost`\n    # If the current cell is the top-left cell, continue to the next iteration\n    # If the current cell is in the first row, add the cost of the previous cell in the same row to the current cell in `dp`\n    # If the current cell is in the first column, add the cost of the previous cell in the same column to the current cell in `dp`\n    # Otherwise, add the maximum of the cost of the previous cell in the same row or column to the current cell in `dp`\n# Divide the last cell of `dp` by the sum of the number of rows and columns to calculate the maximum average\n# Return the maximum average of the path"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int n = cost.size();\n        int m = cost.get(0).size();\n\n        long[][] dp = new long[n][m];\n        dp[0][0] = cost.get(0).get(0);\n\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n\n        for (int j = 1; j < m; j++) {\n            dp[0][j] = dp[0][j-1] + cost.get(0).get(j);\n        }\n\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < m; j++) {\n                dp[i][j] = cost.get(i).get(j) + Math.max(dp[i-1][j], dp[i][j-1]);\n            }\n        }\n\n        return (float) dp[n-1][m-1] / (n + m - 1);\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/280",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list and element and returns a pair containing a boolean that indicates if the element is in the array array list and the index position of the element (or -1 if the element is not found).\n    public static Pair<Boolean, Long> sequentialSearch(ArrayList<Long> dlist, long item) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(sequentialSearch((new ArrayList<Long>(Arrays.asList((long)11l, (long)23l, (long)58l, (long)31l, (long)56l, (long)77l, (long)43l, (long)12l, (long)65l, (long)19l))), (31l)).equals((Pair.with(true, 3l))));\n    assert(sequentialSearch((new ArrayList<Long>(Arrays.asList((long)12l, (long)32l, (long)45l, (long)62l, (long)35l, (long)47l, (long)44l, (long)61l))), (61l)).equals((Pair.with(true, 7l))));\n    assert(sequentialSearch((new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)17l, (long)19l, (long)22l, (long)39l, (long)48l, (long)56l))), (48l)).equals((Pair.with(true, 6l))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable to store the index position of the element\n# Iterate through each element in the array list\n    # If the current element is equal to the given element, store its index position and break out of the loop\n# Check if the index position is greater than or equal to 0\n    # If it is, return a pair containing true and the index position\n    # If it is not, return a pair containing false and -1"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Pair<Boolean, Long> sequentialSearch(ArrayList<Long> dlist, long item) {\n        long index = -1;\n        for (int i = 0; i < dlist.size(); i++) {\n            if (dlist.get(i) == item) {\n                index = i;\n                break;\n            }\n        }\n        if (index >= 0) {\n            return new Pair<>(true, index);\n        } else {\n            return new Pair<>(false, -1L);\n        }\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/412",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to remove odd numbers from a given array list.\n    public static ArrayList<Long> removeOdd(ArrayList<Long> l) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(removeOdd((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(removeOdd((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)))));\n    assert(removeOdd((new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)10l, (long)20l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new ArrayList to store the even numbers\n# Iterate through each number in the input ArrayList\n    # Check if the number is even (i.e., if it is divisible by 2 with no remainder)\n        # If the number is even, add it to the new ArrayList\n# Return the new ArrayList containing only the even numbers"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> removeOdd(ArrayList<Long> l) {\n        ArrayList<Long> evenNumbers = new ArrayList<>();\n        for (Long num : l) {\n            if (num % 2 == 0) {\n                evenNumbers.add(num);\n            }\n        }\n        return evenNumbers;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/804",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check whether the product of numbers in an array array list is even or not.\n    public static boolean isProductEven(ArrayList<Long> arr) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(isProductEven((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (true));\n    assert(isProductEven((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)4l)))) == (true));\n    assert(isProductEven((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)))) == (false));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `product` to 1.\n# Iterate through each number in the input array list\n    # Multiply the `product` variable with the current number.\n# Check if the product is divisible by 2 (i.e. the remainder is 0)\n    # If so, return true (the product is even)\n# Otherwise, return false (the product is odd)"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean isProductEven(ArrayList<Long> arr) {\n        long product = 1;\n        for (long num : arr) {\n            product *= num;\n        }\n        return product % 2 == 0;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/309",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the maximum of two numbers.\n    public static long maximum(long a, long b) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if `a` is greater than `b`\n    # If true, return `a`\n    # If false, return `b`"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long maximum(long a, long b) {\n        if (a > b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/131",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to reverse only the vowels of a given string (where y is not a vowel).\n    public static String reverseVowels(String str1) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(reverseVowels((\"Python\")).equals((\"Python\")));\n    assert(reverseVowels((\"USA\")).equals((\"ASU\")));\n    assert(reverseVowels((\"ab\")).equals((\"ab\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a character array from the input string\n# Use two pointers, one starting from the beginning and the other from the end of the array\n# Iterate until the two pointers meet or cross each other:\n    # Check if the characters at the two pointers are vowels\n        # If both characters are vowels, swap them\n    # Move the first pointer to the next character\n    # Move the second pointer to the previous character\n# Convert the character array back to a string and return it"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String reverseVowels(String str1) {\n        char[] charArr = str1.toCharArray();\n        int left = 0;\n        int right = charArr.length - 1;\n\n        while (left < right) {\n            if (isVowel(charArr[left]) && isVowel(charArr[right])) {\n                char temp = charArr[left];\n                charArr[left] = charArr[right];\n                charArr[right] = temp;\n                left++;\n                right--;\n            } else if (!isVowel(charArr[left])) {\n                left++;\n            } else if (!isVowel(charArr[right])) {\n                right--;\n            }\n        }\n\n        return new String(charArr);\n    }\n\n    public static boolean isVowel(char c) {\n        c = Character.toLowerCase(c);\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/259",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to maximize the given two array lists.\n    public static ArrayList<ArrayList<Long>> maximizeElements(ArrayList<ArrayList<Long>> test_tup1, ArrayList<ArrayList<Long>> test_tup2) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(maximizeElements((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)10l))))), (new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)10l)))))));\n    assert(maximizeElements((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)11l))))), (new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)11l)))))));\n    assert(maximizeElements((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)11l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)12l))))), (new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)11l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)11l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)11l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)12l)))))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new ArrayList to store the maximized elements\n# Iterate through each pair of ArrayLists in test_tup1 and test_tup2\n    # Create a new ArrayList to store the maximized elements for the current pair\n    # Iterate through each element in the current pair of ArrayLists\n        # Find the maximum element between the corresponding elements in the two ArrayLists\n        # Add the maximum element to the new ArrayList\n    # Add the new ArrayList to the main ArrayList\n# Return the main ArrayList containing the maximized elements for each pair of ArrayLists"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<ArrayList<Long>> maximizeElements(ArrayList<ArrayList<Long>> test_tup1, ArrayList<ArrayList<Long>> test_tup2) {\n        ArrayList<ArrayList<Long>> maximizedElements = new ArrayList<>();\n        \n        for (int i = 0; i < test_tup1.size(); i++) {\n            ArrayList<Long> currentMaximizedElements = new ArrayList<>();\n            ArrayList<Long> list1 = test_tup1.get(i);\n            ArrayList<Long> list2 = test_tup2.get(i);\n            \n            for (int j = 0; j < list1.size(); j++) {\n                long maxElement = Math.max(list1.get(j), list2.get(j));\n                currentMaximizedElements.add(maxElement);\n            }\n            \n            maximizedElements.add(currentMaximizedElements);\n        }\n        \n        return maximizedElements;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/790",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to check whether every even index contains even numbers of a given array list.\n    public static boolean evenPosition(ArrayList<Long> nums) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(evenPosition((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (false));\n    assert(evenPosition((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (false));\n    assert(evenPosition((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)4l)))) == (true));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Iterate through each element and its index in the input ArrayList\n    # Check if the index is even and the element is odd\n        # If so, return false\n# If all even indices contain even numbers, return true"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean evenPosition(ArrayList<Long> nums) {\n        for (int i = 0; i < nums.size(); i++) {\n            if (i % 2 == 0 && nums.get(i) % 2 != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/396",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to check whether the given string starts and ends with the same character or not.\n    public static String checkChar(String string) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(checkChar((\"abba\")).equals((\"Valid\")));\n    assert(checkChar((\"a\")).equals((\"Valid\")));\n    assert(checkChar((\"abcd\")).equals((\"Invalid\")));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Check if the input string is null or has a length of 0\n# Check if the first character of the string is equal to the last character of the string\n    # If they are equal, return \"True\"\n    # If they are not equal, return \"False\""
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String checkChar(String string) {\n        if (string == null || string.length() == 0) {\n            return \"False\";\n        }\n        if (string.charAt(0) == string.charAt(string.length() - 1)) {\n            return \"True\";\n        } else {\n            return \"False\";\n        }\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/453",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find the sum of even factors of a number.\n    public static long sumofFactors(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(sumofFactors((18l)) == (26l));\n    assert(sumofFactors((30l)) == (48l));\n    assert(sumofFactors((6l)) == (8l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable `sum` to store the sum of even factors, and set it to 0.\n# Iterate through each number `i` from 1 to `n` (inclusive).\n    # Check if `i` is a factor of `n` by dividing `n` by `i` and checking if the remainder is 0.\n    # If `i` is a factor and it is even, add it to `sum`.\n# Return `sum`."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long sumOfFactors(long n) {\n        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (n % i == 0 && i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/731",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the lateral surface area of a cone given radius r and the height h.\n    public static float lateralsurfaceCone(long r, long h) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(lateralsurfaceCone((5l), (12l)) == (204.20352248333654f));\n    assert(lateralsurfaceCone((10l), (15l)) == (566.3586699569488f));\n    assert(lateralsurfaceCone((19l), (17l)) == (1521.8090132193388f));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Calculate the slant height of the cone using the Pythagorean theorem: s = sqrt(r^2 + h^2)\n# Calculate the lateral surface area of the cone using the formula: A = \u03c0rs\n# Return the calculated lateral surface area"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static float lateralsurfaceCone(long r, long h) {\n        double s = Math.sqrt(Math.pow(r, 2) + Math.pow(h, 2));\n        double A = Math.PI * r * s;\n        return (float) A;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/564",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function which takes an array array list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long countPairs(ArrayList<Long> arr, long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(countPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l))), (3l)) == (2l));\n    assert(countPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))), (4l)) == (0l));\n    assert(countPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))), (5l)) == (10l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a counter variable to keep track of the number of pairs\n# Iterate through each element in the array list\n    # For each element, iterate through the remaining elements in the array list\n        # Check if the current element is not equal to the other element\n            # If the elements are unequal, increment the counter by 1\n# Return the counter variable which represents the number of possible unordered pairs where both elements are unequal"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long countPairs(ArrayList<Long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                if (arr.get(i) != arr.get(j)) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/733",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array array list.\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));\n    assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize two pointers `start` and `end` to the start and end of the array respectively.\n# Iterate while `start <= end`\n    # Calculate the mid index as `mid = start + (end - start) / 2`\n    # Check if the element at mid index is equal to the given number `x`\n        # If it is, return the mid index\n    # Check if the element at mid index is greater than the given number `x`\n        # If it is, update `end` to `mid - 1`\n    # Check if the element at mid index is less than the given number `x`\n        # If it is, update `start` to `mid + 1`\n# If the given number `x` is not found, return -1."
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        int start = 0;\n        int end = A.size() - 1;\n\n        while (start <= end) {\n            int mid = start + (end - start) / 2;\n\n            if (A.get(mid) == x) {\n                return mid;\n            } else if (A.get(mid) > x) {\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n\n        return -1;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/267",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    public static long squareSum(long n) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a variable to keep track of the sum\n# Iterate from 1 to n (inclusive) in steps of 2\n    # Calculate the square of the current odd number\n    # Add the square to the sum\n# Return the sum"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long squareSum(long n) {\n        long sum = 0;\n        for (long i = 1; i <= n; i += 2) {\n            long square = i * i;\n            sum += square;\n        }\n        return sum;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/417",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find common first element in given array list of array lists.\n    public static ArrayList<ArrayList<String>> groupTuples(ArrayList<ArrayList<String>> Input) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(groupTuples((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"z\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"w\", (String)\"t\")))))).equals((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"w\", (String)\"t\")))))));\n    assert(groupTuples((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"c\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"d\", (String)\"e\")))))).equals((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"d\", (String)\"e\")))))));\n    assert(groupTuples((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"f\", (String)\"g\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"f\", (String)\"g\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"h\", (String)\"i\")))))).equals((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"f\", (String)\"g\", (String)\"g\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"h\", (String)\"i\")))))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Initialize a HashMap to store the count of each element in the input list of lists\n# Iterate through each list in the input list\n    # Iterate through each element in the current list\n        # Check if the element is already present in the HashMap\n            # If yes, increment its count\n            # If not, add it to the HashMap with a count of 1\n# Iterate through the HashMap\n    # Check if the count of any element is equal to the size of the input list of lists\n        # If yes, add the element to a result list\n# Return the result list"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<String> groupTuples(ArrayList<ArrayList<String>> Input) {\n        HashMap<String, Integer> countMap = new HashMap<>();\n        ArrayList<String> result = new ArrayList<>();\n\n        for (ArrayList<String> list : Input) {\n            for (String element : list) {\n                if (countMap.containsKey(element)) {\n                    countMap.put(element, countMap.get(element) + 1);\n                } else {\n                    countMap.put(element, 1);\n                }\n            }\n        }\n\n        for (Map.Entry<String, Integer> entry : countMap.entrySet()) {\n            if (entry.getValue() == Input.size()) {\n                result.add(entry.getKey());\n            }\n        }\n\n        return result;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_java/108",
        "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to merge three array lists into a single sorted array list.\n    public static ArrayList<Long> mergeSortedList(ArrayList<Long> num1, ArrayList<Long> num2, ArrayList<Long> num3) {\n",
        "solution": null,
        "test": [
            "    }\n    public static void main(String[] args) {\n    assert(mergeSortedList((new ArrayList<Long>(Arrays.asList((long)25l, (long)24l, (long)15l, (long)4l, (long)5l, (long)29l, (long)110l))), (new ArrayList<Long>(Arrays.asList((long)19l, (long)20l, (long)11l, (long)56l, (long)25l, (long)233l, (long)154l))), (new ArrayList<Long>(Arrays.asList((long)24l, (long)26l, (long)54l, (long)48l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)11l, (long)15l, (long)19l, (long)20l, (long)24l, (long)24l, (long)25l, (long)25l, (long)26l, (long)29l, (long)48l, (long)54l, (long)56l, (long)110l, (long)154l, (long)233l)))));\n    assert(mergeSortedList((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)6l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)7l, (long)11l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)7l, (long)8l, (long)12l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)5l, (long)6l, (long)7l, (long)7l, (long)8l, (long)8l, (long)9l, (long)11l, (long)12l)))));\n    assert(mergeSortedList((new ArrayList<Long>(Arrays.asList((long)18l, (long)14l, (long)10l, (long)9l, (long)8l, (long)7l, (long)9l, (long)3l, (long)2l, (long)4l, (long)1l))), (new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)25l, (long)58l))), (new ArrayList<Long>(Arrays.asList((long)12l, (long)74l, (long)9l, (long)50l, (long)61l, (long)41l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)7l, (long)8l, (long)9l, (long)9l, (long)9l, (long)10l, (long)12l, (long)14l, (long)14l, (long)18l, (long)22l, (long)25l, (long)25l, (long)35l, (long)41l, (long)50l, (long)58l, (long)61l, (long)65l, (long)74l, (long)75l, (long)85l)))));\n    }\n\n}\n"
        ],
        "draft_plan": [
            "# Create a new ArrayList to store the merged and sorted elements from the three input ArrayLists\n# Add all the elements from the three input ArrayLists to the new ArrayList\n# Sort the new ArrayList using the `Collections.sort()` method\n# Return the sorted ArrayList"
        ],
        "code": [
            "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> mergeSortedList(ArrayList<Long> num1, ArrayList<Long> num2, ArrayList<Long> num3) {\n        ArrayList<Long> mergedList = new ArrayList<>();\n        mergedList.addAll(num1);\n        mergedList.addAll(num2);\n        mergedList.addAll(num3);\n        Collections.sort(mergedList);\n        return mergedList;\n    }\n}"
        ]
    },
    {
        "id": "mbpp_py/11",
        "prompt": "def remove_Occ(s,ch): \n    \"\"\"Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"",
        "solution": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ",
        "test": [
            "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
            "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
            "assert remove_Occ(\"PHP\",\"P\") == \"H\""
        ],
        "code": [
            "def remove_Occ(s,ch): \n    \"\"\"Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s "
        ],
        "draft_plan": [
            "# Find the index of the first occurrence of the given character in the string\n# Find the index of the last occurrence of the given character in the string\n\n# If both indices are valid\n    # Remove the first occurrence of the character from the string\n    # Decrement the index of the last occurrence by 1 to account for the removal\n    # Remove the last occurrence of the character from the string\n\n# Return the modified string"
        ]
    },
    {
        "id": "mbpp_py/12",
        "prompt": "def sort_matrix(M):\n    \"\"\"Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"",
        "solution": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result",
        "test": [
            "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
            "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
            "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
        ],
        "code": [
            "def sort_matrix(M):\n    \"\"\"Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    result = sorted(M, key=sum)\n    return result"
        ],
        "draft_plan": [
            "# Calculate the sum of each row in the matrix\n\n# Create a list of tuples, where each tuple contains the index of the row and its corresponding sum\n\n# Sort the list of tuples based on the sum in ascending order\n\n# Create an empty sorted matrix\n\n# Iterate through the sorted list of tuples\n    # Append the corresponding row from the original matrix to the sorted matrix\n\n# Return the sorted matrix"
        ]
    },
    {
        "id": "mbpp_py/14",
        "prompt": "def find_Volume(l,b,h) : \n    \"\"\"Write a python function to find the volume of a triangular prism.\n    \"\"\"",
        "solution": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ",
        "test": [
            "assert find_Volume(10,8,6) == 240",
            "assert find_Volume(3,2,2) == 6",
            "assert find_Volume(1,2,1) == 1"
        ],
        "code": [
            "def find_Volume(l,b,h) : \n    \"\"\"Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    return ((l * b * h) / 2) "
        ],
        "draft_plan": [
            "# Define a function to calculate the volume of a triangular prism\n    # Accept the base length, base width, and height of the prism as input parameters\n    # Calculate the area of the base triangle by multiplying the base length and base width, and dividing by 2\n    # Calculate the volume by multiplying the area of the base triangle by the height of the prism\n    # Return the calculated volume\n\n# Example usage:\n# volume = calculate_volume_of_triangular_prism(5, 6, 10)"
        ]
    },
    {
        "id": "mbpp_py/16",
        "prompt": "import re\ndef text_lowercase_underscore(text):\n    \"\"\"Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"",
        "solution": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
        "test": [
            "assert text_lowercase_underscore(\"aab_cbbbc\")==(True)",
            "assert text_lowercase_underscore(\"aab_Abbbc\")==(False)",
            "assert text_lowercase_underscore(\"Aaab_abbbc\")==(False)"
        ],
        "code": [
            "import re\ndef text_lowercase_underscore(text):\n    \"\"\"Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False"
        ],
        "draft_plan": [
            "# Split the input string by the underscore character to get a list of substrings\n# Iterate through each substring in the list\n    # Check if the substring consists of lowercase letters only\n        # If not, return False\n\n# If all substrings are valid, return True"
        ]
    },
    {
        "id": "mbpp_py/17",
        "prompt": "def square_perimeter(a):\n    \"\"\"Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"",
        "solution": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter",
        "test": [
            "assert square_perimeter(10)==40",
            "assert square_perimeter(5)==20",
            "assert square_perimeter(4)==16"
        ],
        "code": [
            "def square_perimeter(a):\n    \"\"\"Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n  perimeter=4*a\n  return perimeter"
        ],
        "draft_plan": [
            "# Define a function named \"square_perimeter\" that takes a parameter \"side_length\"\n    # Calculate the perimeter of the square by multiplying the side length by 4\n    # Return the perimeter\n\n# Call the function with a test value for the side length to verify the result"
        ]
    },
    {
        "id": "mbpp_py/18",
        "prompt": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    \"\"\"Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n    \"\"\"Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n\treturn ''.join(List) \ndef get_char_count_array(string): \n    \"\"\"Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n    \"\"\"Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"",
        "solution": "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) ",
        "test": [
            "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
            "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
            "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'"
        ],
        "code": [
            "NO_OF_CHARS = 256\ndef str_to_list(string): \n    \"\"\"Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n    \"\"\"Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n\treturn ''.join(List) \ndef get_char_count_array(string): \n    \"\"\"Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n    \"\"\"Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) "
        ],
        "draft_plan": [
            "# Convert the second string into a set for efficient lookup\n\n# Initialize an empty string to store the result\n\n# Iterate through each character in the first string\n    # Check if the character is not present in the second string\n        # Append the character to the result string\n\n# Return the result string"
        ]
    },
    {
        "id": "mbpp_py/19",
        "prompt": "def test_duplicate(arraynums):\n    \"\"\"Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"",
        "solution": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ",
        "test": [
            "assert test_duplicate(([1,2,3,4,5]))==False",
            "assert test_duplicate(([1,2,3,4, 4]))==True",
            "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
        ],
        "code": [
            "def test_duplicate(arraynums):\n    \"\"\"Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     "
        ],
        "draft_plan": [
            "# Initialize an empty set\n\n# Iterate through each element in the input array\n    # Check if the element is already present in the set\n        # If yes, return True as duplicate element found\n        # If not, add the element to the set\n\n# If no duplicate element is found, return False"
        ]
    },
    {
        "id": "mbpp_py/20",
        "prompt": "def is_woodall(x): \n    \"\"\"Write a function to check if the given number is woodball or not.\n    \"\"\"",
        "solution": "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False",
        "test": [
            "assert is_woodall(383) == True",
            "assert is_woodall(254) == False",
            "assert is_woodall(200) == False"
        ],
        "code": [
            "def is_woodall(x): \n    \"\"\"Write a function to check if the given number is woodball or not.\n    \"\"\"\n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False"
        ],
        "draft_plan": [
            "# Check if the given number is less than or equal to 1\n    # If it is, return False as woodball numbers must be greater than 1\n\n# Initialize a variable to keep track of the previous number in the sequence\n# Start a loop from 2 to the square root of the given number\n    # Check if the given number is divisible by the current loop variable\n        # If it is, check if the current loop variable is equal to the previous number plus 1\n            # If it is, update the previous number to the current loop variable\n            # If it is not, return False as the sequence is broken\n\n# If the loop completes without returning False, return True as the given number is a woodball number"
        ]
    },
    {
        "id": "mbpp_py/56",
        "prompt": "def rev(num):    \n    \"\"\"Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    \"\"\"Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"",
        "solution": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
        "test": [
            "assert check(70) == False",
            "assert check(23) == False",
            "assert check(73) == True"
        ],
        "code": [
            "def rev(num):    \n    \"\"\"Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    \"\"\"Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    return (2 * rev(n) == n + 1)  "
        ],
        "draft_plan": [
            "# Convert the given number to a string and reverse it\n# Convert the reversed string back to an integer\n# Check if the given number is equal to twice the reversed number plus 1\n# If the condition is true, return True. Otherwise, return False."
        ]
    },
    {
        "id": "mbpp_py/57",
        "prompt": "def find_Max_Num(arr) : \n    \"\"\"Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"",
        "solution": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ",
        "test": [
            "assert find_Max_Num([1,2,3]) == 321",
            "assert find_Max_Num([4,5,6,1]) == 6541",
            "assert find_Max_Num([1,2,3,9]) == 9321"
        ],
        "code": [
            "def find_Max_Num(arr) : \n    \"\"\"Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num "
        ],
        "draft_plan": [
            "# Sort the list of digits in descending order\n\n# Concatenate all the digits in the sorted list\n\n# Convert the concatenated string to an integer and return it"
        ]
    },
    {
        "id": "mbpp_py/58",
        "prompt": "def opposite_Signs(x,y): \n    \"\"\"Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"",
        "solution": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ",
        "test": [
            "assert opposite_Signs(1,-2) == True",
            "assert opposite_Signs(3,2) == False",
            "assert opposite_Signs(-10,-10) == False",
            "assert opposite_Signs(-2,2) == True"
        ],
        "code": [
            "def opposite_Signs(x,y): \n    \"\"\"Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    return ((x ^ y) < 0); "
        ],
        "draft_plan": [
            "# Check if the product of the two integers is negative\n    # If the product is negative, it means the two integers have opposite signs\n        # Return True\n\n# If the product is not negative, it means the two integers have the same sign\n    # Return False"
        ]
    },
    {
        "id": "mbpp_py/59",
        "prompt": "def is_octagonal(n): \n    \"\"\"Write a function to find the nth octagonal number.\n    \"\"\"",
        "solution": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ",
        "test": [
            "assert is_octagonal(5) == 65",
            "assert is_octagonal(10) == 280",
            "assert is_octagonal(15) == 645"
        ],
        "code": [
            "def is_octagonal(n): \n    \"\"\"Write a function to find the nth octagonal number.\n    \"\"\"\n\treturn 3 * n * n - 2 * n "
        ],
        "draft_plan": [
            "# Function to find the nth octagonal number\ndef find_octagonal_number(n):\n    # Calculate the nth octagonal number using the formula\n    octagonal_number = 3 * n * (n - 1) + 1\n    \n    # Return the result\n    return octagonal_number\n\n# Test the function\nn = 5\nresult = find_octagonal_number(n)\nprint(f\"The {n}th octagonal number is: {result}\")"
        ]
    },
    {
        "id": "mbpp_py/61",
        "prompt": "from collections import defaultdict\ndef count_Substrings(s):\n    \"\"\"Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"",
        "solution": "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count",
        "test": [
            "assert count_Substrings('112112') == 6",
            "assert count_Substrings('111') == 6",
            "assert count_Substrings('1101112') == 12"
        ],
        "code": [
            "from collections import defaultdict\ndef count_Substrings(s):\n    \"\"\"Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count"
        ],
        "draft_plan": [
            "# Initialize a counter variable to keep track of the number of substrings\n\n# Iterate through each starting index of the substring\n    # Iterate through each ending index of the substring\n        # Get the substring from the starting index to the ending index\n        # Compute the sum of the digits in the substring\n        # Check if the sum of the digits is equal to the length of the substring\n            # If true, increment the counter variable\n\n# Return the counter variable with the total number of substrings"
        ]
    },
    {
        "id": "mbpp_py/62",
        "prompt": "def smallest_num(xs):\n    \"\"\"Write a python function to find smallest number in a list.\n    \"\"\"",
        "solution": "def smallest_num(xs):\n  return min(xs)\n",
        "test": [
            "assert smallest_num([10, 20, 1, 45, 99]) == 1",
            "assert smallest_num([1, 2, 3]) == 1",
            "assert smallest_num([45, 46, 50, 60]) == 45"
        ],
        "code": [
            "def smallest_num(xs):\n    \"\"\"Write a python function to find smallest number in a list.\n    \"\"\"\n  return min(xs)\n"
        ],
        "draft_plan": [
            "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number"
        ]
    },
    {
        "id": "mbpp_py/63",
        "prompt": "def max_difference(test_list):\n    \"\"\"Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"",
        "solution": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ",
        "test": [
            "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
            "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
            "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
        ],
        "code": [
            "def max_difference(test_list):\n    \"\"\"Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) "
        ],
        "draft_plan": [
            "# Initialize the maximum difference variable to 0\n\n# Iterate through each pair in the list\n    # Calculate the difference between the second element and the first element of the current pair\n    # Check if the current difference is greater than the maximum difference\n        # If it is, update the maximum difference\n\n# Return the maximum difference"
        ]
    },
    {
        "id": "mbpp_py/64",
        "prompt": "def subject_marks(subjectmarks):\n    \"\"\"Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"",
        "solution": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks",
        "test": [
            "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
            "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
            "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
        ],
        "code": [
            "def subject_marks(subjectmarks):\n    \"\"\"Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks"
        ],
        "draft_plan": [
            "# Define a function to sort a list of tuples by the second value\n    # Use the sorted() function and a lambda function as the key parameter\n    # The lambda function will extract the second value from each tuple for sorting\n    \n# Call the sorted() function with the list of tuples and the custom sorting function as arguments\n# Return the sorted list of tuples"
        ]
    },
    {
        "id": "mbpp_py/65",
        "prompt": "def recursive_list_sum(data_list):\n    \"\"\"Write a function to flatten a list and sum all of its elements.\n    \"\"\"",
        "solution": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total",
        "test": [
            "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
            "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
            "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
        ],
        "code": [
            "def recursive_list_sum(data_list):\n    \"\"\"Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total"
        ],
        "draft_plan": [
            "# Initialize a variable to store the sum of all elements\n\n# Iterate through each element in the list\n    # Check if the current element is a list\n        # If it is a list, recursively call the flatten_and_sum function on the current element and add the result to the sum\n    # If it is not a list, add the current element to the sum\n\n# Return the sum"
        ]
    },
    {
        "id": "mbpp_py/66",
        "prompt": "def pos_count(list):\n    \"\"\"Write a python function to count the number of positive numbers in a list.\n    \"\"\"",
        "solution": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ",
        "test": [
            "assert pos_count([1,-2,3,-4]) == 2",
            "assert pos_count([3,4,5,-1]) == 3",
            "assert pos_count([1,2,3,4]) == 4"
        ],
        "code": [
            "def pos_count(list):\n    \"\"\"Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count "
        ],
        "draft_plan": [
            "# Initialize a variable count to 0\n\n# Iterate through each number in the list\n    # Check if the number is greater than 0\n        # If it is, increment the count\n\n# Return the count"
        ]
    },
    {
        "id": "mbpp_py/67",
        "prompt": "def bell_number(n):   \n    \"\"\"Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"",
        "solution": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] ",
        "test": [
            "assert bell_number(2)==2",
            "assert bell_number(10)==115975",
            "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
        ],
        "code": [
            "def bell_number(n):   \n    \"\"\"Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] "
        ],
        "draft_plan": [
            "# Import the math module to use the factorial function\nimport math\n\n# Define a function to calculate the Bell numbers\ndef calculate_bell_number(n):\n    # Create a 2D array to store the Bell numbers\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n\n    # Initialize the first Bell number as 1\n    bell[0][0] = 1\n\n    # Calculate the Bell numbers using dynamic programming\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    # Return the last Bell number\n    return bell[n][0]\n\n# Define a function to calculate the number of ways to partition a set of Bell numbers\ndef calculate_partition_ways(n):\n    # Calculate the Bell number for n\n    bell_number = calculate_bell_number(n)\n\n    # Calculate the number of ways to partition the set\n    partition_ways = math.factorial(n) * bell_number\n\n    # Return the number of ways to partition the set\n    return partition_ways"
        ]
    },
    {
        "id": "mbpp_py/68",
        "prompt": "def is_Monotonic(A): \n    \"\"\"Write a python function to check whether the given array is monotonic or not.\n    \"\"\"",
        "solution": "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",
        "test": [
            "assert is_Monotonic([6, 5, 4, 4]) == True",
            "assert is_Monotonic([1, 2, 2, 3]) == True",
            "assert is_Monotonic([1, 3, 2]) == False"
        ],
        "code": [
            "def is_Monotonic(A): \n    \"\"\"Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "
        ],
        "draft_plan": [
            "# Check if the length of the array is less than or equal to 2\n    # If true, return True as any array with 0 or 1 element is considered monotonic\n\n# Initialize two variables to track if the array is non-increasing and non-decreasing\n    # Set both variables to True initially\n\n# Iterate through each element in the array starting from index 1\n    # Check if the current element is greater than the previous element\n        # If true, set the non-increasing variable to False\n    # Check if the current element is less than the previous element\n        # If true, set the non-decreasing variable to False\n\n# Check if either the non-increasing or non-decreasing variable is True\n    # If true, return True as the array is monotonic\n    # Otherwise, return False as the array is not monotonic"
        ]
    },
    {
        "id": "mbpp_py/69",
        "prompt": "def is_sublist(l, s):\n    \"\"\"Write a function to check whether a list contains the given sublist or not.\n    \"\"\"",
        "solution": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set",
        "test": [
            "assert is_sublist([2,4,3,5,7],[3,7])==False",
            "assert is_sublist([2,4,3,5,7],[4,3])==True",
            "assert is_sublist([2,4,3,5,7],[1,6])==False"
        ],
        "code": [
            "def is_sublist(l, s):\n    \"\"\"Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set"
        ],
        "draft_plan": [
            "# Iterate through each index in the main list\n    # Check if the current index and the sublist length is less than or equal to the main list length\n        # Check if the sublist matches the elements starting from the current index in the main list\n\n# If the sublist is found, return True\n# Otherwise, return False"
        ]
    },
    {
        "id": "mbpp_py/70",
        "prompt": "def find_equal_tuple(Input):\n    \"\"\"Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n    \"\"\"Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"",
        "solution": "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1",
        "test": [
            "assert get_equal([(11, 22, 33), (44, 55, 66)]) == True",
            "assert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False",
            "assert get_equal([(1, 2), (3, 4)]) == True"
        ],
        "code": [
            "def find_equal_tuple(Input):\n    \"\"\"Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n    \"\"\"Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n  return find_equal_tuple(Input) == 1"
        ],
        "draft_plan": [
            "# Get the length of the first tuple in the list\n\n# Iterate through each tuple in the list\n    # Check if the length of the current tuple is not equal to the length of the first tuple\n        # If lengths are not equal, return False\n\n# If all tuples have equal lengths, return True"
        ]
    },
    {
        "id": "mbpp_py/71",
        "prompt": "def comb_sort(nums):\n    \"\"\"Write a function to sort a list of elements.\n    \"\"\"",
        "solution": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums",
        "test": [
            "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
            "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
            "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
        ],
        "code": [
            "def comb_sort(nums):\n    \"\"\"Write a function to sort a list of elements.\n    \"\"\"\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums"
        ],
        "draft_plan": [
            "# Use the built-in sorted() function to sort the list in ascending order\n# Return the sorted list"
        ]
    },
    {
        "id": "mbpp_py/72",
        "prompt": "def dif_Square(n): \n    \"\"\"Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"",
        "solution": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False",
        "test": [
            "assert dif_Square(5) == True",
            "assert dif_Square(10) == False",
            "assert dif_Square(15) == True"
        ],
        "code": [
            "def dif_Square(n): \n    \"\"\"Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if (n % 4 != 2): \n        return True\n    return False"
        ],
        "draft_plan": [
            "# Iterate through all numbers from 1 to sqrt(n)\n    # Calculate the square of the current number\n    # Check if the difference between n and the square is a perfect square\n\n# If a perfect square difference is found, return True\n# If no perfect square difference is found, return False"
        ]
    },
    {
        "id": "mbpp_py/74",
        "prompt": "def is_samepatterns(colors, patterns):    \n    \"\"\"Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"",
        "solution": "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True",
        "test": [
            "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True",
            "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False",
            "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False"
        ],
        "code": [
            "def is_samepatterns(colors, patterns):    \n    \"\"\"Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True"
        ],
        "draft_plan": [
            "# Initialize a pointer to keep track of the current position in the patterns array\n\n# Iterate through each character in the input string\n    # Check if the current character matches the character at the pointer position in the patterns array\n        # If it matches, move the pointer to the next position in the patterns array\n        # If the pointer reaches the end of the patterns array, return True as the sequence is followed\n\n# If the loop completes without returning True, return False as the sequence is not followed"
        ]
    },
    {
        "id": "mbpp_py/75",
        "prompt": "def find_tuples(test_list, K):\n    \"\"\"Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"",
        "solution": "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res",
        "test": [
            "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]",
            "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]",
            "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]"
        ],
        "code": [
            "def find_tuples(test_list, K):\n    \"\"\"Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res"
        ],
        "draft_plan": [
            "# Initialize an empty list to store the resulting tuples\n\n# Iterate through each tuple in the given list of tuples\n    # Initialize a flag variable to True\n    \n    # Iterate through each element in the tuple\n        # Check if the element is not divisible by k\n            # If not divisible, set the flag variable to False and break out of the loop\n    \n    # If the flag variable is still True after checking all elements, add the tuple to the resulting list\n\n# Return the resulting list of tuples"
        ]
    },
    {
        "id": "mbpp_py/77",
        "prompt": "def is_Diff(n): \n    \"\"\"Write a python function to find whether a number is divisible by 11.\n    \"\"\"",
        "solution": "def is_Diff(n): \n    return (n % 11 == 0) ",
        "test": [
            "assert is_Diff (12345) == False",
            "assert is_Diff(1212112) == True",
            "assert is_Diff(1212) == False"
        ],
        "code": [
            "def is_Diff(n): \n    \"\"\"Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    return (n % 11 == 0) "
        ],
        "draft_plan": [
            "To determine whether a number is divisible by 11, we can use the following logic:\n\n1. Convert the number to a string.\n2. Iterate through the digits of the number.\n3. Add the digits in odd positions (starting from the rightmost digit) and subtract the sum of the digits in even positions.\n4. If the result is divisible by 11, the original number is also divisible by 11.\n\nHere is the code implementing this logic:\n\n```python\ndef is_divisible_by_11(number):\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Iterate through the digits of the number\n    sum_odd = 0\n    sum_even = 0\n    for i in range(len(number_str)):\n        digit = int(number_str[i])\n        \n        # Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0:\n            sum_odd += digit\n        else:\n            sum_even += digit\n    \n    # Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0:\n        return True\n    else:\n        return False\n```\n\nYou can use this function to check if a number is divisible by 11. For example:\n\n```python\nprint(is_divisible_by_11(121))  # Output: True\nprint(is_divisible_by_11(123))  # Output: False\n```"
        ]
    },
    {
        "id": "mbpp_py/79",
        "prompt": "def word_len(s): \n    \"\"\"Write a python function to check whether the length of the word is odd or not.\n    \"\"\"",
        "solution": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
        "test": [
            "assert word_len(\"Hadoop\") == False",
            "assert word_len(\"great\") == True",
            "assert word_len(\"structure\") == True"
        ],
        "code": [
            "def word_len(s): \n    \"\"\"Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False"
        ],
        "draft_plan": [
            "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False"
        ]
    },
    {
        "id": "mbpp_py/80",
        "prompt": "def tetrahedral_number(n): \n    \"\"\"Write a function to find the nth tetrahedral number.\n    \"\"\"",
        "solution": "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6",
        "test": [
            "assert tetrahedral_number(5) == 35",
            "assert tetrahedral_number(6) == 56",
            "assert tetrahedral_number(7) == 84"
        ],
        "code": [
            "def tetrahedral_number(n): \n    \"\"\"Write a function to find the nth tetrahedral number.\n    \"\"\"\n\treturn (n * (n + 1) * (n + 2)) / 6"
        ],
        "draft_plan": [
            "# Initialize the tetrahedral number to 0\n\n# Iterate from 1 to n (inclusive)\n    # Add the current number to the tetrahedral number\n\n# Return the tetrahedral number"
        ]
    },
    {
        "id": "mbpp_py/82",
        "prompt": "import math\ndef volume_sphere(r):\n    \"\"\"Write a function to find the volume of a sphere.\n    \"\"\"",
        "solution": "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume",
        "test": [
            "assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)",
            "assert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)",
            "assert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)"
        ],
        "code": [
            "import math\ndef volume_sphere(r):\n    \"\"\"Write a function to find the volume of a sphere.\n    \"\"\"\n  volume=(4/3)*math.pi*r*r*r\n  return volume"
        ],
        "draft_plan": [
            "# Define a function called calculate_sphere_volume that takes a single parameter, radius\n\n# Calculate the volume of the sphere using the formula: (4/3) * pi * radius^3\n# Store the result in a variable called volume\n\n# Return the calculated volume"
        ]
    },
    {
        "id": "mbpp_py/83",
        "prompt": "def get_Char(strr):  \n    \"\"\"Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"",
        "solution": "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)",
        "test": [
            "assert get_Char(\"abc\") == \"f\"",
            "assert get_Char(\"gfg\") == \"t\"",
            "assert get_Char(\"ab\") == \"c\""
        ],
        "code": [
            "def get_Char(strr):  \n    \"\"\"Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)"
        ],
        "draft_plan": [
            "# Define a function to calculate the character made by adding the ASCII values modulo 26\n    # Initialize a variable to store the sum of ASCII values\n    # Iterate through each character in the given string\n        # Add the ASCII value of the current character to the sum\n    # Calculate the modulo 26 of the sum\n    # Convert the result back to a character using the ASCII value\n    # Return the resulting character"
        ]
    },
    {
        "id": "mbpp_py/84",
        "prompt": "def sequence(n): \n    \"\"\"Write a function to find the nth number in the newman conway sequence.\n    \"\"\"",
        "solution": "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))",
        "test": [
            "assert sequence(10) == 6",
            "assert sequence(2) == 1",
            "assert sequence(3) == 2"
        ],
        "code": [
            "def sequence(n): \n    \"\"\"Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
        ],
        "draft_plan": [
            "# Create a list to store the Newman-Conway sequence\n# Initialize the first two elements of the sequence\n# Iterate from index 3 up to the given number n\n    # Calculate the next element of the sequence using the previous elements\n# Return the nth element of the sequence"
        ]
    },
    {
        "id": "mbpp_py/85",
        "prompt": "import math\ndef surfacearea_sphere(r):\n    \"\"\"Write a function to find the surface area of a sphere.\n    \"\"\"",
        "solution": "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea",
        "test": [
            "assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)",
            "assert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)",
            "assert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)"
        ],
        "code": [
            "import math\ndef surfacearea_sphere(r):\n    \"\"\"Write a function to find the surface area of a sphere.\n    \"\"\"\n  surfacearea=4*math.pi*r*r\n  return surfacearea"
        ],
        "draft_plan": [
            "import math\n\ndef surface_area_of_sphere(radius):\n    # Calculate the surface area of a sphere using the formula: 4\u03c0r^2\n    surface_area = 4 * math.pi * radius**2\n    \n    return surface_area"
        ]
    },
    {
        "id": "mbpp_py/86",
        "prompt": "def centered_hexagonal_number(n):\n    \"\"\"Write a function to find nth centered hexagonal number.\n    \"\"\"",
        "solution": "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1",
        "test": [
            "assert centered_hexagonal_number(10) == 271",
            "assert centered_hexagonal_number(2) == 7",
            "assert centered_hexagonal_number(9) == 217"
        ],
        "code": [
            "def centered_hexagonal_number(n):\n    \"\"\"Write a function to find nth centered hexagonal number.\n    \"\"\"\n  return 3 * n * (n - 1) + 1"
        ],
        "draft_plan": [
            "# Initialize the centered hexagonal number formula: nth_centered_hexagonal = 3 * n * (n - 1) + 1\n\n# Define a function to calculate the nth centered hexagonal number\n    # Check if n is a positive integer, otherwise return None\n    # Calculate the nth centered hexagonal number using the formula\n    # Return the result\n\n# Call the function and provide the desired value of n to get the nth centered hexagonal number"
        ]
    },
    {
        "id": "mbpp_py/87",
        "prompt": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"",
        "solution": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict",
        "test": [
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
        ],
        "code": [
            "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict"
        ],
        "draft_plan": [
            "# Initialize an empty dictionary to store the merged dictionaries\n\n# Iterate through each dictionary in the input list\n    # Iterate through each key-value pair in the current dictionary\n        # Add the key-value pair to the merged dictionary\n\n# Return the merged dictionary"
        ]
    },
    {
        "id": "mbpp_py/88",
        "prompt": "import collections\ndef freq_count(list1):\n    \"\"\"Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"",
        "solution": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count",
        "test": [
            "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})",
            "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})",
            "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})"
        ],
        "code": [
            "import collections\ndef freq_count(list1):\n    \"\"\"Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n  freq_count= collections.Counter(list1)\n  return freq_count"
        ],
        "draft_plan": [
            "# Initialize an empty dictionary\n\n# Iterate through each element in the list\n    # Check if the element is already a key in the dictionary\n        # If it is, increment its value by 1\n        # If it is not, add it as a new key with value 1\n\n# Return the dictionary containing the frequency of elements"
        ]
    },
    {
        "id": "mbpp_py/89",
        "prompt": "def closest_num(N):\n    \"\"\"Write a function to find the closest smaller number than n.\n    \"\"\"",
        "solution": "def closest_num(N):\n  return (N - 1)",
        "test": [
            "assert closest_num(11) == 10",
            "assert closest_num(7) == 6",
            "assert closest_num(12) == 11"
        ],
        "code": [
            "def closest_num(N):\n    \"\"\"Write a function to find the closest smaller number than n.\n    \"\"\"\n  return (N - 1)"
        ],
        "draft_plan": [
            "# Initialize a variable to store the closest smaller number\n# Iterate from n-1 to 1 in descending order\n    # Check if the current number is smaller than n\n        # If yes, update the closest smaller number and break the loop\n\n# Return the closest smaller number"
        ]
    },
    {
        "id": "mbpp_py/90",
        "prompt": "def len_log(list1):\n    \"\"\"Write a python function to find the length of the longest word.\n    \"\"\"",
        "solution": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max",
        "test": [
            "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
            "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
            "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
        ],
        "code": [
            "def len_log(list1):\n    \"\"\"Write a python function to find the length of the longest word.\n    \"\"\"\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max"
        ],
        "draft_plan": [
            "# Split the input sentence into words using the split() function\n# Initialize a variable maxLength to 0\n\n# Iterate through each word in the list of words\n    # Check if the length of the current word is greater than maxLength\n        # If it is, update maxLength with the length of the current word\n\n# Return maxLength"
        ]
    },
    {
        "id": "mbpp_py/91",
        "prompt": "def find_substring(str1, sub_str):\n    \"\"\"Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"",
        "solution": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False",
        "test": [
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
        ],
        "code": [
            "def find_substring(str1, sub_str):\n    \"\"\"Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n   if any(sub_str in s for s in str1):\n       return True\n   return False"
        ],
        "draft_plan": [
            "# Iterate through each string in the list\n    # Check if the given substring is present in the current string\n        # If found, return True\n\n# If the substring is not found in any string, return False"
        ]
    },
    {
        "id": "mbpp_py/92",
        "prompt": "def is_undulating(n): \n    \"\"\"Write a function to check whether the given number is undulating or not.\n    \"\"\"",
        "solution": "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True",
        "test": [
            "assert is_undulating(1212121) == True",
            "assert is_undulating(1991) == False",
            "assert is_undulating(121) == True"
        ],
        "code": [
            "def is_undulating(n): \n    \"\"\"Write a function to check whether the given number is undulating or not.\n    \"\"\"\n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True"
        ],
        "draft_plan": [
            "To check whether a given number is undulating or not, we can follow these steps:\n\n1. Convert the given number into a string.\n2. Check if the length of the string is less than or equal to 2. If it is, return False since a number with length less than or equal to 2 cannot be undulating.\n3. Iterate through each digit in the string starting from the second digit.\n    - Check if the current digit is equal to the previous digit. If it is, return False since an undulating number cannot have consecutive same digits.\n    - Check if the current digit is greater than the previous digit. If it is, check if the previous digit is greater than the digit before it. If it is not, return False since an undulating number should have a decreasing trend after an increasing trend.\n    - Check if the current digit is less than the previous digit. If it is, check if the previous digit is less than the digit before it. If it is not, return False since an undulating number should have an increasing trend after a decreasing trend.\n4. If all the checks pass, return True since the number is undulating.\n\nHere is the code implementation of the logic:\n\n```python\ndef is_undulating_number(num):\n    num_str = str(num)\n    if len(num_str) <= 2:\n        return False\n    for i in range(1, len(num_str)):\n        if num_str[i] == num_str[i-1]:\n            return False\n        if num_str[i] > num_str[i-1] and num_str[i-1] <= num_str[i-2]:\n            return False\n        if num_str[i] < num_str[i-1] and num_str[i-1] >= num_str[i-2]:\n            return False\n    return True\n```\n\nYou can use the above function to check if a given number is undulating or not by passing the number as an argument to the function `is_undulating_number()`. The function will return `True` if the number is undulating, and `False` otherwise."
        ]
    },
    {
        "id": "mbpp_py/93",
        "prompt": "def power(a,b):\n    \"\"\"Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"",
        "solution": "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)",
        "test": [
            "assert power(3,4) == 81",
            "assert power(2,3) == 8",
            "assert power(5,5) == 3125"
        ],
        "code": [
            "def power(a,b):\n    \"\"\"Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)"
        ],
        "draft_plan": [
            "# Initialize the result variable to 1\n\n# If b is positive\n    # Iterate from 1 to b\n        # Multiply the result by a\n\n# If b is negative\n    # Iterate from 1 to abs(b)\n        # Divide the result by a\n\n# Return the result"
        ]
    },
    {
        "id": "mbpp_py/94",
        "prompt": "from operator import itemgetter \ndef index_minimum(test_list):\n    \"\"\"Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"",
        "solution": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ",
        "test": [
            "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
            "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
            "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
        ],
        "code": [
            "from operator import itemgetter \ndef index_minimum(test_list):\n    \"\"\"Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) "
        ],
        "draft_plan": [
            "# Initialize the minimum second value as positive infinity\n# Initialize the first value of the tuple with minimum second value as None\n\n# Iterate through each tuple in the list\n    # Check if the second value of the current tuple is smaller than the current minimum second value\n        # If yes, update the minimum second value and the first value of the tuple\n\n# Return the first value of the tuple with the smallest second value"
        ]
    },
    {
        "id": "mbpp_py/95",
        "prompt": "def Find_Min_Length(lst):  \n    \"\"\"Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"",
        "solution": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength ",
        "test": [
            "assert Find_Min_Length([[1],[1,2]]) == 1",
            "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
            "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
        ],
        "code": [
            "def Find_Min_Length(lst):  \n    \"\"\"Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    minLength = min(len(x) for x in lst )\n    return minLength "
        ],
        "draft_plan": [
            "# Initialize the minimum length to a large number\n\n# Iterate through each list in the input list\n    # Check the length of the current list\n        # If the length is smaller than the current minimum length, update the minimum length\n\n# Return the minimum length"
        ]
    },
    {
        "id": "mbpp_py/96",
        "prompt": "def divisor(n):\n    \"\"\"Write a python function to find the number of divisors of a given integer.\n    \"\"\"",
        "solution": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x",
        "test": [
            "assert divisor(15) == 4",
            "assert divisor(12) == 6",
            "assert divisor(9) == 3"
        ],
        "code": [
            "def divisor(n):\n    \"\"\"Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x"
        ],
        "draft_plan": [
            "# Initialize a count variable to 0\n\n# Iterate through each number from 1 to the given integer\n    # Check if the current number is a divisor of the given integer\n        # If yes, increment the count variable\n\n# Return the count variable"
        ]
    },
    {
        "id": "mbpp_py/97",
        "prompt": "def frequency_lists(list1):\n    \"\"\"Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"",
        "solution": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n",
        "test": [
            "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
            "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
            "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
        ],
        "code": [
            "def frequency_lists(list1):\n    \"\"\"Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n"
        ],
        "draft_plan": [
            "# Create an empty dictionary to store the frequency of elements\n\n# Iterate through each sublist in the flattened list\n    # Iterate through each element in the sublist\n        # Check if the element is already in the dictionary\n            # If it is, increment its count by 1\n            # If it is not, add it to the dictionary with a count of 1\n\n# Return the dictionary containing the frequency of each element"
        ]
    },
    {
        "id": "mbpp_py/98",
        "prompt": "def multiply_num(numbers):  \n    \"\"\"Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"",
        "solution": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ",
        "test": [
            "assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)",
            "assert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)",
            "assert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)"
        ],
        "code": [
            "def multiply_num(numbers):  \n    \"\"\"Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) "
        ],
        "draft_plan": [
            "# Initialize the product variable to 1\n\n# Iterate through each number in the list\n    # Multiply the product by the current number\n\n# Divide the product by the length of the list\n\n# Return the result"
        ]
    },
    {
        "id": "mbpp_py/99",
        "prompt": "def decimal_to_binary(n): \n    \"\"\"Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"",
        "solution": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") ",
        "test": [
            "assert decimal_to_binary(8) == '1000'",
            "assert decimal_to_binary(18) == '10010'",
            "assert decimal_to_binary(7) == '111'"
        ],
        "code": [
            "def decimal_to_binary(n): \n    \"\"\"Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    return bin(n).replace(\"0b\",\"\") "
        ],
        "draft_plan": [
            "# Initialize an empty string to store the binary representation\n# Check if the input number is 0, if so return '0' as the binary representation\n# Iterate until the input number becomes 0\n    # Append the remainder of the input number divided by 2 to the binary representation string\n    # Update the input number by dividing it by 2, discarding the remainder\n\n# Reverse the binary representation string\n\n# Return the binary representation string"
        ]
    },
    {
        "id": "mbpp_py/100",
        "prompt": "import sys\ndef next_smallest_palindrome(num):\n    \"\"\"Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"",
        "solution": "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i",
        "test": [
            "assert next_smallest_palindrome(99)==101",
            "assert next_smallest_palindrome(1221)==1331",
            "assert next_smallest_palindrome(120)==121"
        ],
        "code": [
            "import sys\ndef next_smallest_palindrome(num):\n    \"\"\"Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i"
        ],
        "draft_plan": [
            "# Define a helper function to check if a number is palindrome\n    # Convert the number to a string\n    # Check if the string is equal to its reversed string representation\n\n# Start a loop from the next number after the specified integer\n    # Check if the current number is a palindrome\n        # If yes, return the current number\n\n# If no palindrome is found in the loop, return None"
        ]
    },
    {
        "id": "mbpp_py/101",
        "prompt": "def kth_element(arr, k):\n    \"\"\"Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"",
        "solution": "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]",
        "test": [
            "assert kth_element([12,3,5,7,19], 2) == 3",
            "assert kth_element([17,24,8,23], 3) == 8",
            "assert kth_element([16,21,25,36,4], 4) == 36"
        ],
        "code": [
            "def kth_element(arr, k):\n    \"\"\"Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]"
        ],
        "draft_plan": [
            "# Sort the array in ascending order\n\n# Check if the kth element is within the range of the array indices\n    # If it is, return the element at index k-1\n\n# If k is out of range, return None"
        ]
    },
    {
        "id": "mbpp_py/102",
        "prompt": "def snake_to_camel(word):\n    \"\"\"Write a function to convert a snake case string to camel case string.\n    \"\"\"",
        "solution": "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "test": [
            "assert snake_to_camel('python_program')=='PythonProgram'",
            "assert snake_to_camel('python_language')==('PythonLanguage')",
            "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
        ],
        "code": [
            "def snake_to_camel(word):\n    \"\"\"Write a function to convert a snake case string to camel case string.\n    \"\"\"\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))"
        ],
        "draft_plan": [
            "# Split the snake case string by underscore to get individual words\n# Capitalize the first letter of each word except the first word\n# Join the words together to form the camel case string\n# Return the camel case string"
        ]
    },
    {
        "id": "mbpp_py/103",
        "prompt": "def eulerian_num(n, m): \n    \"\"\"Write a function to find the Eulerian number a(n, m).\n    \"\"\"",
        "solution": "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",
        "test": [
            "assert eulerian_num(3, 1) == 4",
            "assert eulerian_num(4, 1) == 11",
            "assert eulerian_num(5, 3) == 26"
        ],
        "code": [
            "def eulerian_num(n, m): \n    \"\"\"Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"
        ],
        "draft_plan": [
            "To find the Eulerian number a(n, m), you can use the following code logic:\n\n1. Define a function called eulerian_number with two parameters n and m.\n2. Create a nested list called dp with n+1 rows and m+1 columns, and initialize all values to 0.\n3. Iterate through each row i from 0 to n and each column j from 0 to m.\n4. Inside the loop, check if i is equal to 0 or j is equal to 0. If true, set dp[i][j] to 1.\n5. Otherwise, set dp[i][j] to (j+1) * dp[i-1][j] + (i-j) * dp[i-1][j-1].\n6. Finally, return dp[n][m].\n\nHere is the code implementation of the above logic:\n\n```python\ndef eulerian_number(n, m):\n    dp = [[0] * (m+1) for _ in range(n+1)]\n\n    for i in range(n+1):\n        for j in range(m+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = (j+1) * dp[i-1][j] + (i-j) * dp[i-1][j-1]\n    \n    return dp[n][m]\n```\n\nYou can call the function eulerian_number(n, m) and pass the values of n and m to find the corresponding Eulerian number a(n, m)."
        ]
    },
    {
        "id": "mbpp_py/104",
        "prompt": "def sort_sublists(input_list):\n    \"\"\"Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"",
        "solution": "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n",
        "test": [
            "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
            "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
            "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
        ],
        "code": [
            "def sort_sublists(input_list):\n    \"\"\"Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n"
        ],
        "draft_plan": [
            "# Iterate through each sublist in the given list\n    # Sort the sublist using the sorted() function and assign the sorted sublist back to the original sublist\n\n# Return the modified list with sorted sublists"
        ]
    },
    {
        "id": "mbpp_py/105",
        "prompt": "def count(lst):   \n    \"\"\"Write a python function to count true booleans in the given list.\n    \"\"\"",
        "solution": "def count(lst):   \n    return sum(lst) ",
        "test": [
            "assert count([True,False,True]) == 2",
            "assert count([False,False]) == 0",
            "assert count([True,True,True]) == 3"
        ],
        "code": [
            "def count(lst):   \n    \"\"\"Write a python function to count true booleans in the given list.\n    \"\"\"\n    return sum(lst) "
        ],
        "draft_plan": [
            "# Initialize a count variable to 0\n\n# Iterate through each element in the list\n    # Check if the current element is True\n        # If it is, increment the count variable\n\n# Return the count variable"
        ]
    },
    {
        "id": "mbpp_py/106",
        "prompt": "def add_lists(test_list, test_tup):\n    \"\"\"Write a function to append the given list to the given tuples.\n    \"\"\"",
        "solution": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) ",
        "test": [
            "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
            "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
            "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
        ],
        "code": [
            "def add_lists(test_list, test_tup):\n    \"\"\"Write a function to append the given list to the given tuples.\n    \"\"\"\n  res = tuple(list(test_tup) + test_list)\n  return (res) "
        ],
        "draft_plan": [
            "# Create an empty list to store the modified tuples\n\n# Iterate through each tuple in the given list\n    # Convert the tuple to a list\n    # Append the given list to the current tuple\n    # Convert the modified tuple back to a tuple\n    # Append the modified tuple to the list of modified tuples\n\n# Return the list of modified tuples"
        ]
    },
    {
        "id": "mbpp_py/108",
        "prompt": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"Write a function to merge three lists into a single sorted list.\n    \"\"\"",
        "solution": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)",
        "test": [
            "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
            "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
            "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
        ],
        "code": [
            "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"Write a function to merge three lists into a single sorted list.\n    \"\"\"\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)"
        ],
        "draft_plan": [
            "# Concatenate all three lists into a single list\n# Sort the merged list using the sorted() function\n# Return the sorted merged list"
        ]
    },
    {
        "id": "mbpp_py/109",
        "prompt": "def odd_Equivalent(s,n): \n    \"\"\"Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"",
        "solution": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ",
        "test": [
            "assert odd_Equivalent(\"011001\",6) == 3",
            "assert odd_Equivalent(\"11011\",5) == 4",
            "assert odd_Equivalent(\"1010\",4) == 2"
        ],
        "code": [
            "def odd_Equivalent(s,n): \n    \"\"\"Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count "
        ],
        "draft_plan": [
            "# Convert the binary string to a list of characters\n# Initialize a counter variable to keep track of the number of odd numbers\n\n# Rotate the binary string the given number of times\n    # Remove the last character from the binary string and prepend it to the front\n\n# Convert the rotated binary string back to a string\n# Iterate through each character in the rotated binary string\n    # Convert the character to an integer\n    # Check if the integer value is odd\n        # If so, increment the counter\n\n# Return the counter value"
        ]
    },
    {
        "id": "mbpp_py/111",
        "prompt": "def common_in_nested_lists(nestedlist):\n    \"\"\"Write a function to find the common elements in given nested lists.\n    \"\"\"",
        "solution": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result",
        "test": [
            "assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])",
            "assert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])",
            "assert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])"
        ],
        "code": [
            "def common_in_nested_lists(nestedlist):\n    \"\"\"Write a function to find the common elements in given nested lists.\n    \"\"\"\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result"
        ],
        "draft_plan": [
            "# Initialize a set to store the common elements\n\n# Iterate through each sublist in the nested list\n    # If it's the first sublist, add all elements to the set\n    # For subsequent sublists, update the set with the intersection of the current set and the sublist\n    \n# Return the set containing the common elements"
        ]
    },
    {
        "id": "mbpp_py/113",
        "prompt": "def check_integer(text):\n    \"\"\"Write a function to check if a string represents an integer or not.\n    \"\"\"",
        "solution": "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False",
        "test": [
            "assert check_integer(\"python\")==False",
            "assert check_integer(\"1\")==True",
            "assert check_integer(\"12345\")==True"
        ],
        "code": [
            "def check_integer(text):\n    \"\"\"Write a function to check if a string represents an integer or not.\n    \"\"\"\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False"
        ],
        "draft_plan": [
            "# Check if the string is empty or None\n    # If so, return False\n\n# Check if the string starts with a '+' or '-'\n    # If so, remove the sign from the string\n\n# Check if the string consists only of digits\n    # If so, return True\n\n# If the string is non-empty and does not start with a sign, it is not a valid integer representation\n    # Return False"
        ]
    },
    {
        "id": "mbpp_py/115",
        "prompt": "def empty_dit(list1):\n    \"\"\"Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"",
        "solution": "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit",
        "test": [
            "assert empty_dit([{},{},{}])==True",
            "assert empty_dit([{1,2},{},{}])==False",
            "assert empty_dit({})==True"
        ],
        "code": [
            "def empty_dit(list1):\n    \"\"\"Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n empty_dit=all(not d for d in list1)\n return empty_dit"
        ],
        "draft_plan": [
            "# Iterate through each dictionary in the list\n    # Check if the current dictionary is empty\n        # If any dictionary is not empty, return False\n\n# If all dictionaries are empty, return True"
        ]
    },
    {
        "id": "mbpp_py/116",
        "prompt": "def tuple_to_int(nums):\n    \"\"\"Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"",
        "solution": "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result",
        "test": [
            "assert tuple_to_int((1,2,3))==123",
            "assert tuple_to_int((4,5,6))==456",
            "assert tuple_to_int((5,6,7))==567"
        ],
        "code": [
            "def tuple_to_int(nums):\n    \"\"\"Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = int(''.join(map(str,nums)))\n    return result"
        ],
        "draft_plan": [
            "# Initialize an empty string to store the converted integer\n\n# Iterate through each element in the tuple\n    # Convert each element to a string and concatenate it to the existing string\n\n# Convert the string to an integer and return it"
        ]
    },
    {
        "id": "mbpp_py/117",
        "prompt": "def list_to_float(test_list):\n    \"\"\"Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"",
        "solution": "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res",
        "test": [
            "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]",
            "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]",
            "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]"
        ],
        "code": [
            "def list_to_float(test_list):\n    \"\"\"Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res"
        ],
        "draft_plan": [
            "# Iterate through each sublist in the input list\n    # Iterate through each element in the sublist\n        # Try to convert the element to a float\n        # If successful, replace the element with the float value\n\n# Return the modified input list"
        ]
    },
    {
        "id": "mbpp_py/118",
        "prompt": "def string_to_list(string): \n    \"\"\"Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"",
        "solution": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst",
        "test": [
            "assert string_to_list(\"python programming\")==['python','programming']",
            "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
            "assert string_to_list(\"write a program\")==['write','a','program']"
        ],
        "code": [
            "def string_to_list(string): \n    \"\"\"Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    lst = list(string.split(\" \")) \n    return lst"
        ],
        "draft_plan": [
            "# Initialize an empty list to store the split strings\n\n# Split the input string on the space character and store the result in a variable\n\n# Iterate through each element in the split result\n    # Append the element to the list\n\n# Return the list of split strings"
        ]
    },
    {
        "id": "mbpp_py/119",
        "prompt": "def search(arr):\n    \"\"\"Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"",
        "solution": "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)",
        "test": [
            "assert search([1,1,2,2,3]) == 3",
            "assert search([1,1,3,3,4,4,5,5,7,7,8]) == 8",
            "assert search([1,2,2,3,3,4,4]) == 1"
        ],
        "code": [
            "def search(arr):\n    \"\"\"Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)"
        ],
        "draft_plan": [
            "# Initialize a variable to keep track of the unique element\n# Iterate through the sorted array\n    # Check if the current element is equal to the next element and the previous element\n        # If not, assign the current element to the unique variable\n\n# Return the unique element"
        ]
    },
    {
        "id": "mbpp_py/120",
        "prompt": "def max_product_tuple(list1):\n    \"\"\"Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"",
        "solution": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max",
        "test": [
            "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
            "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
            "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
        ],
        "code": [
            "def max_product_tuple(list1):\n    \"\"\"Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max"
        ],
        "draft_plan": [
            "# Initialize the maximum product to 0\n\n# Iterate through each pair of tuples in the given list\n    # Calculate the product of the absolute values of the numbers in the current pair\n    # If the calculated product is greater than the maximum product, update the maximum product\n\n# Return the maximum product"
        ]
    },
    {
        "id": "mbpp_py/123",
        "prompt": "def amicable_numbers_sum(limit):\n    \"\"\"Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"",
        "solution": "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)",
        "test": [
            "assert amicable_numbers_sum(999)==504",
            "assert amicable_numbers_sum(9999)==31626",
            "assert amicable_numbers_sum(99)==0"
        ],
        "code": [
            "def amicable_numbers_sum(limit):\n    \"\"\"Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)"
        ],
        "draft_plan": [
            "# Define a helper function to calculate the sum of proper divisors for a given number\n    # Initialize the sum to 0\n    # Iterate from 1 to the given number (excluding the number itself)\n        # Check if the current number is a proper divisor of the given number\n            # If it is, add it to the sum\n\n# Define the main function to find and sum all amicable numbers up to a specified number\n    # Initialize the sum of amicable numbers to 0\n    # Iterate from 1 to the specified number\n        # Calculate the sum of proper divisors for the current number\n        # Check if the sum of proper divisors is different from the current number\n            # If it is, calculate the sum of proper divisors for the sum of proper divisors\n            # Check if the second sum of proper divisors is equal to the current number\n                # If it is, add the current number to the sum of amicable numbers\n\n# Return the sum of amicable numbers"
        ]
    },
    {
        "id": "mbpp_py/124",
        "prompt": "import cmath\ndef angle_complex(a,b):\n    \"\"\"Write a function to get the angle of a complex number.\n    \"\"\"",
        "solution": "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle",
        "test": [
            "assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)",
            "assert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)",
            "assert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)"
        ],
        "code": [
            "import cmath\ndef angle_complex(a,b):\n    \"\"\"Write a function to get the angle of a complex number.\n    \"\"\"\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle"
        ],
        "draft_plan": [
            "import math\n\ndef get_angle(complex_num):\n    # Calculate the angle using the arctan2 function from the math module\n    angle = math.atan2(complex_num.imag, complex_num.real)\n    \n    # Convert the angle from radians to degrees\n    angle_degrees = math.degrees(angle)\n    \n    # Return the angle in degrees\n    return angle_degrees"
        ]
    },
    {
        "id": "mbpp_py/125",
        "prompt": "def find_length(string): \n    \"\"\"Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"",
        "solution": "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0",
        "test": [
            "assert find_length(\"11000010001\") == 6",
            "assert find_length(\"10111\") == 1",
            "assert find_length(\"11011101100101\") == 2"
        ],
        "code": [
            "def find_length(string): \n    \"\"\"Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0"
        ],
        "draft_plan": [
            "# Initialize the maximum difference as 0\n\n# Iterate through each character in the binary string\n    # If the current character is '0', increment a count variable by 1\n    # If the current character is '1', decrement the count variable by 1\n\n    # Check if the count variable is greater than the maximum difference\n        # If so, update the maximum difference to the count variable\n\n# Return the maximum difference as the result"
        ]
    },
    {
        "id": "mbpp_py/126",
        "prompt": "def sum(a,b): \n    \"\"\"Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"",
        "solution": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum",
        "test": [
            "assert sum(10,15) == 6",
            "assert sum(100,150) == 93",
            "assert sum(4,6) == 3"
        ],
        "code": [
            "def sum(a,b): \n    \"\"\"Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum"
        ],
        "draft_plan": [
            "# Find the common divisors of the two given numbers\n    # Find the smaller number among the two\n    # Initialize an empty list to store the common divisors\n    # Iterate from 1 to the smaller number\n        # Check if the current number is a divisor of both given numbers\n            # If yes, add it to the list of common divisors\n\n# Find the sum of the common divisors\n    # Initialize a variable to store the sum\n    # Iterate through the list of common divisors\n        # Add each divisor to the sum\n\n# Return the sum of the common divisors"
        ]
    },
    {
        "id": "mbpp_py/127",
        "prompt": "def multiply_int(x, y):\n    \"\"\"Write a function to multiply two integers.\n    \"\"\"",
        "solution": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)",
        "test": [
            "assert multiply_int(10,20)==200",
            "assert multiply_int(5,10)==50",
            "assert multiply_int(4,8)==32"
        ],
        "code": [
            "def multiply_int(x, y):\n    \"\"\"Write a function to multiply two integers.\n    \"\"\"\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)"
        ],
        "draft_plan": [
            "# Initialize the result to 0\n\n# If either of the integers is 0, return 0\n\n# If both integers are negative, convert them to positive\n    # Multiply the positive integers and change the sign of the result to negative\n\n# If only one integer is negative, convert it to positive\n    # Multiply the positive integers and change the sign of the result to negative\n\n# If both integers are positive, multiply them normally\n\n# Return the result"
        ]
    },
    {
        "id": "mbpp_py/128",
        "prompt": "def long_words(n, str):\n    \"\"\"Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"",
        "solution": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t",
        "test": [
            "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
            "assert long_words(2,\"writing a program\")==['writing','program']",
            "assert long_words(5,\"sorting list\")==['sorting']"
        ],
        "code": [
            "def long_words(n, str):\n    \"\"\"Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t"
        ],
        "draft_plan": [
            "# Create an empty list to store the result\n\n# Iterate through each word in the given list\n    # Check if the length of the current word is greater than n\n        # If the condition is satisfied, append the word to the result list\n\n# Return the result list"
        ]
    },
    {
        "id": "mbpp_py/129",
        "prompt": "def magic_square_test(my_matrix):\n    \"\"\"Write a function to calculate whether the matrix is a magic square.\n    \"\"\"",
        "solution": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True",
        "test": [
            "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
            "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
            "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
        ],
        "code": [
            "def magic_square_test(my_matrix):\n    \"\"\"Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True"
        ],
        "draft_plan": [
            "# Calculate the sum of each row, column, and diagonal of the matrix\n    # Iterate through each row of the matrix\n        # Calculate the sum of the current row\n    # Iterate through each column of the matrix\n        # Calculate the sum of the current column\n    # Calculate the sum of the main diagonal\n    # Calculate the sum of the anti-diagonal\n\n# Check if the sums of all rows, columns, and diagonals are equal and equal to the magic sum\n    # If all sums are equal to the magic sum, return True\n    # If any sum is not equal to the magic sum, return False"
        ]
    },
    {
        "id": "mbpp_py/130",
        "prompt": "from collections import defaultdict\ndef max_occurrences(nums):\n    \"\"\"Write a function to find the item with maximum frequency in a given list.\n    \"\"\"",
        "solution": "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]",
        "test": [
            "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2",
            "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8",
            "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20"
        ],
        "code": [
            "from collections import defaultdict\ndef max_occurrences(nums):\n    \"\"\"Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]"
        ],
        "draft_plan": [
            "# Create an empty dictionary to store the frequency count of each item\n# Iterate through each item in the given list\n    # If the item is already in the dictionary, increment its count by 1\n    # If the item is not in the dictionary, add it with count 1\n# Find the item with the maximum frequency by finding the key with the maximum value in the dictionary\n# Return the item with the maximum frequency"
        ]
    },
    {
        "id": "mbpp_py/131",
        "prompt": "def reverse_vowels(str1):\n    \"\"\"Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    \"\"\"",
        "solution": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string",
        "test": [
            "assert reverse_vowels(\"Python\") == \"Python\"",
            "assert reverse_vowels(\"USA\") == \"ASU\"",
            "assert reverse_vowels(\"ab\") == \"ab\""
        ],
        "code": [
            "def reverse_vowels(str1):\n    \"\"\"Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    \"\"\"\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string"
        ],
        "draft_plan": [
            "# Create a list of vowels (including both lowercase and uppercase)\n# Convert the input string into a list of characters\n\n# Initialize two pointers: one at the start of the string and one at the end\n# Iterate while the pointers don't overlap\n    # Check if the character at the start pointer is a vowel\n        # If it is, then check if the character at the end pointer is also a vowel\n            # If it is, swap the characters at the start and end pointers\n            # Move the start pointer to the next character\n            # Move the end pointer to the previous character\n        # If the character at the end pointer is not a vowel, move the end pointer to the previous character\n    \n# Convert the modified list of characters back into a string and return it"
        ]
    },
    {
        "id": "mbpp_py/132",
        "prompt": "def tup_string(tup1):\n    \"\"\"Write a function to convert a tuple to a string.\n    \"\"\"",
        "solution": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str",
        "test": [
            "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
            "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
            "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
        ],
        "code": [
            "def tup_string(tup1):\n    \"\"\"Write a function to convert a tuple to a string.\n    \"\"\"\n  str =  ''.join(tup1)\n  return str"
        ],
        "draft_plan": [
            "# Initialize an empty string\n\n# Iterate through each element in the tuple\n    # Convert the element to a string and append it to the result string\n    # Add a comma after each element except for the last element\n\n# Return the result string"
        ]
    },
    {
        "id": "mbpp_py/133",
        "prompt": "def sum_negativenum(nums):\n    \"\"\"Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"",
        "solution": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)",
        "test": [
            "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
            "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
            "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
        ],
        "code": [
            "def sum_negativenum(nums):\n    \"\"\"Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)"
        ],
        "draft_plan": [
            "# Initialize the sum of negative numbers to 0\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If it is negative, add it to the sum\n\n# Return the sum of negative numbers"
        ]
    },
    {
        "id": "mbpp_py/135",
        "prompt": "def hexagonal_num(n): \n    \"\"\"Write a function to find the nth hexagonal number.\n    \"\"\"",
        "solution": "def hexagonal_num(n): \n\treturn n*(2*n - 1) ",
        "test": [
            "assert hexagonal_num(10) == 190",
            "assert hexagonal_num(5) == 45",
            "assert hexagonal_num(7) == 91"
        ],
        "code": [
            "def hexagonal_num(n): \n    \"\"\"Write a function to find the nth hexagonal number.\n    \"\"\"\n\treturn n*(2*n - 1) "
        ],
        "draft_plan": [
            "# Calculate the nth hexagonal number using the formula: n * (2 * n - 1)\n\n# Return the calculated nth hexagonal number"
        ]
    },
    {
        "id": "mbpp_py/137",
        "prompt": "from array import array\ndef zero_count(nums):\n    \"\"\"Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"",
        "solution": "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)",
        "test": [
            "assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)",
            "assert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)",
            "assert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)"
        ],
        "code": [
            "from array import array\ndef zero_count(nums):\n    \"\"\"Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)"
        ],
        "draft_plan": [
            "# Initialize zero_count to 0\n# Initialize non_zero_count to 0\n\n# Iterate through each element in the array\n    # Check if the current element is zero\n        # If it is zero, increment zero_count\n        # If it is not zero, increment non_zero_count\n\n# Calculate the ratio of zeroes to non-zeroes\n# Return the ratio"
        ]
    },
    {
        "id": "mbpp_py/138",
        "prompt": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"",
        "solution": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True",
        "test": [
            "assert is_Sum_Of_Powers_Of_Two(10) == True",
            "assert is_Sum_Of_Powers_Of_Two(7) == False",
            "assert is_Sum_Of_Powers_Of_Two(14) == True"
        ],
        "code": [
            "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if (n % 2 == 1): \n        return False\n    else: \n        return True"
        ],
        "draft_plan": [
            "# Initialize a variable 'n' with the given number\n\n# Iterate while 'n' is greater than 0\n    # Check if 'n' is divisible by 2\n        # If 'n' is divisible by 2, divide 'n' by 2\n        # Otherwise, subtract the largest power of 2 less than 'n' from 'n'\n\n# If 'n' becomes 0, return True\n# Otherwise, return False"
        ]
    },
    {
        "id": "mbpp_py/139",
        "prompt": "def circle_circumference(r):\n    \"\"\"Write a function to find the circumference of a circle.\n    \"\"\"",
        "solution": "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter",
        "test": [
            "assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)",
            "assert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)",
            "assert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)"
        ],
        "code": [
            "def circle_circumference(r):\n    \"\"\"Write a function to find the circumference of a circle.\n    \"\"\"\n  perimeter=2*3.1415*r\n  return perimeter"
        ],
        "draft_plan": [
            "# Define a function that takes the radius of the circle as a parameter\n    # Calculate the circumference of the circle using the formula: circumference = 2 * pi * radius\n    # Return the calculated circumference\n\n# Call the function with the desired radius to find the circumference of the circle"
        ]
    },
    {
        "id": "mbpp_py/140",
        "prompt": "def extract_singly(test_list):\n    \"\"\"Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"",
        "solution": "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) ",
        "test": [
            "assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])",
            "assert set(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])",
            "assert set(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12])"
        ],
        "code": [
            "def extract_singly(test_list):\n    \"\"\"Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) "
        ],
        "draft_plan": [
            "# Create an empty set to store the flattened numbers\n\n# Iterate through each list in the input list of lists\n    # Iterate through each number in the current list\n        # Add the number to the set\n\n# Return the flattened set of numbers"
        ]
    },
    {
        "id": "mbpp_py/141",
        "prompt": "def pancake_sort(nums):\n    \"\"\"Write a function to sort a list of elements.\n    \"\"\"",
        "solution": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums",
        "test": [
            "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
            "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
            "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
        ],
        "code": [
            "def pancake_sort(nums):\n    \"\"\"Write a function to sort a list of elements.\n    \"\"\"\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums"
        ],
        "draft_plan": [
            "# Implement a sorting algorithm such as bubble sort, insertion sort, merge sort, quick sort, etc.\n\n# Define a function to take a list of elements as input\n    # Iterate through the list to compare each element with its adjacent element(s)\n        # Swap elements if they are in the wrong order\n    # Repeat the above steps until the list is sorted\n\n# Return the sorted list"
        ]
    },
    {
        "id": "mbpp_py/142",
        "prompt": "def count_samepair(list1,list2,list3):\n    \"\"\"Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"",
        "solution": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result",
        "test": [
            "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
            "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
            "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"
        ],
        "code": [
            "def count_samepair(list1,list2,list3):\n    \"\"\"Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result"
        ],
        "draft_plan": [
            "# Initialize a counter variable to keep track of the number of identical items\n# Iterate through each index from 0 to the length of any of the given lists\n    # Check if the elements at the current index in all three lists are identical\n        # If they are, increment the counter\n\n# Return the counter variable"
        ]
    },
    {
        "id": "mbpp_py/143",
        "prompt": "def find_lists(Input): \n    \"\"\"Write a function to find number of lists present in the given tuple.\n    \"\"\"",
        "solution": "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) ",
        "test": [
            "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
            "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
            "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
        ],
        "code": [
            "def find_lists(Input): \n    \"\"\"Write a function to find number of lists present in the given tuple.\n    \"\"\"\n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) "
        ],
        "draft_plan": [
            "# Initialize a variable to keep track of the count of lists\n# Iterate through each element in the tuple\n    # Check if the current element is a list\n        # If it is a list, increment the count of lists by 1\n\n# Return the count of lists"
        ]
    },
    {
        "id": "mbpp_py/145",
        "prompt": "def max_Abs_Diff(arr): \n    \"\"\"Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"",
        "solution": "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ",
        "test": [
            "assert max_Abs_Diff((2,1,5,3)) == 4",
            "assert max_Abs_Diff((9,3,2,5,1)) == 8",
            "assert max_Abs_Diff((3,2,1)) == 2"
        ],
        "code": [
            "def max_Abs_Diff(arr): \n    \"\"\"Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) "
        ],
        "draft_plan": [
            "# If the array is empty, return None\n# Initialize the maximum difference to zero\n\n# Iterate through each element in the array\n    # Iterate through each element after the current element\n        # Calculate the difference between the current element and the subsequent element\n        # Update the maximum difference if the calculated difference is greater than the current maximum difference\n\n# Return the maximum difference"
        ]
    },
    {
        "id": "mbpp_py/160",
        "prompt": "def find_solution(a, b, n):\n    \"\"\"Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"",
        "solution": "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None",
        "test": [
            "assert find_solution(2, 3, 7) == (2, 1)",
            "assert find_solution(4, 2, 7) == None",
            "assert find_solution(1, 13, 17) == (4, 1)"
        ],
        "code": [
            "def find_solution(a, b, n):\n    \"\"\"Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None"
        ],
        "draft_plan": [
            "# Iterate through all possible values of x from 0 to n\n    # Calculate the value of y using the equation y = (n - ax) / b\n    # Check if y is an integer\n        # If y is an integer, return the values of x and y as a tuple\n\n# If no solution is found, return None"
        ]
    },
    {
        "id": "mbpp_py/161",
        "prompt": "def remove_elements(list1, list2):\n    \"\"\"Write a function to remove all elements from a given list present in another list.\n    \"\"\"",
        "solution": "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result",
        "test": [
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]",
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]",
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]"
        ],
        "code": [
            "def remove_elements(list1, list2):\n    \"\"\"Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    result = [x for x in list1 if x not in list2]\n    return result"
        ],
        "draft_plan": [
            "# Initialize an empty list to store the elements not present in the other list\n\n# Iterate through each element in the given list\n    # Check if the element is not present in the other list\n        # If not present, add it to the new list\n\n# Return the new list"
        ]
    },
    {
        "id": "mbpp_py/162",
        "prompt": "def sum_series(n):\n    \"\"\"Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"",
        "solution": "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)",
        "test": [
            "assert sum_series(6) == 12",
            "assert sum_series(10) == 30",
            "assert sum_series(9) == 25"
        ],
        "code": [
            "def sum_series(n):\n    \"\"\"Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)"
        ],
        "draft_plan": [
            "# Initialize the sum to 0\n\n# Iterate from i = 0 to n // 2 (inclusive)\n    # Calculate the term (n - 2*i)\n    # Add the term to the sum\n\n# Return the sum"
        ]
    },
    {
        "id": "mbpp_py/163",
        "prompt": "from math import tan, pi\ndef area_polygon(s, l):\n    \"\"\"Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    \"\"\"",
        "solution": "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area",
        "test": [
            "assert math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)",
            "assert math.isclose(area_polygon(10, 15), 1731.197, rel_tol=0.001)",
            "assert math.isclose(area_polygon(9, 7), 302.909, rel_tol=0.001)"
        ],
        "code": [
            "from math import tan, pi\ndef area_polygon(s, l):\n    \"\"\"Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    \"\"\"\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area"
        ],
        "draft_plan": [
            "# Import the math module for trigonometric functions\nimport math\n\n# Define a function to calculate the area of a regular polygon\ndef calculate_area(length, sides):\n    # Calculate the apothem (distance from center to midpoint of a side)\n    apothem = length / (2 * math.tan(math.pi / sides))\n    \n    # Calculate the area using the formula: area = (1/2) * apothem * perimeter\n    perimeter = length * sides\n    area = (1 / 2) * apothem * perimeter\n    \n    return area"
        ]
    },
    {
        "id": "mbpp_py/164",
        "prompt": "import math \ndef div_sum(n): \n    \"\"\"Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    \"\"\"Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"",
        "solution": "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); ",
        "test": [
            "assert are_equivalent(36, 57) == False",
            "assert are_equivalent(2, 4) == False",
            "assert are_equivalent(23, 47) == True"
        ],
        "code": [
            "import math \ndef div_sum(n): \n    \"\"\"Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    \"\"\"Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    return div_sum(num1) == div_sum(num2); "
        ],
        "draft_plan": [
            "# Define a function to calculate the sum of divisors for a given number\n    # Initialize the sum to 0\n    # Iterate through each number from 1 to the given number\n        # Check if the current number is a divisor of the given number\n            # If it is, add it to the sum\n\n# Define a function to determine if the sum of divisors for two numbers are the same\n    # Calculate the sum of divisors for both numbers\n    # Check if the sums are equal\n        # If they are, return True\n        # Otherwise, return False"
        ]
    },
    {
        "id": "mbpp_py/165",
        "prompt": "def count_char_position(str1): \n    \"\"\"Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"",
        "solution": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ",
        "test": [
            "assert count_char_position(\"xbcefg\") == 2",
            "assert count_char_position(\"ABcED\") == 3",
            "assert count_char_position(\"AbgdeF\") == 5"
        ],
        "code": [
            "def count_char_position(str1): \n    \"\"\"Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars "
        ],
        "draft_plan": [
            "# Initialize a variable to keep track of the count of characters at the same position in the English alphabet\n# Iterate through each character in the input string\n    # Convert the character to lowercase\n    # Check if the character is an alphabet character\n        # Get the position of the character in the English alphabet by subtracting the ASCII value of 'a' or 'A'\n        # Check if the position is equal to the index of the character in the string\n            # If the condition is true, increment the count\n\n# Return the count of characters at the same position in the English alphabet"
        ]
    },
    {
        "id": "mbpp_py/166",
        "prompt": "def find_even_pair(A): \n    \"\"\"Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"",
        "solution": "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count",
        "test": [
            "assert find_even_pair([5, 4, 7, 2, 1]) == 4",
            "assert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9",
            "assert find_even_pair([1, 2, 3]) == 1"
        ],
        "code": [
            "def find_even_pair(A): \n    \"\"\"Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count"
        ],
        "draft_plan": [
            "# Initialize a variable to keep track of the count of pairs\n# Iterate through each element in the list\n    # Iterate through each element after the current element\n        # Check if the xor of the current pair is an even number\n            # If it is, increment the count of pairs\n\n# Return the count of pairs"
        ]
    },
    {
        "id": "mbpp_py/167",
        "prompt": "def next_power_of_2(n): \n    \"\"\"Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"",
        "solution": "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; ",
        "test": [
            "assert next_power_of_2(0) == 1",
            "assert next_power_of_2(5) == 8",
            "assert next_power_of_2(17) == 32"
        ],
        "code": [
            "def next_power_of_2(n): \n    \"\"\"Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; "
        ],
        "draft_plan": [
            "# Initialize a variable to store the smallest power of 2\n# Check if n is already a power of 2\n    # If it is, return n\n    \n# Iterate through powers of 2 starting from 2\n    # Check if the current power of 2 is greater than or equal to n\n        # If it is, return the current power of 2"
        ]
    },
    {
        "id": "mbpp_py/168",
        "prompt": "def frequency(a,x): \n    \"\"\"Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"",
        "solution": "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count ",
        "test": [
            "assert frequency([1,2,3], 4) == 0",
            "assert frequency([1,2,2,3,3,3,4], 3) == 3",
            "assert frequency([0,1,2,3,1,2], 1) == 2"
        ],
        "code": [
            "def frequency(a,x): \n    \"\"\"Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count "
        ],
        "draft_plan": [
            "# Initialize a count variable to 0\n\n# Iterate through each element in the list\n    # Check if the current element is equal to the given number\n        # If it is, increment the count variable\n\n# Return the count variable"
        ]
    },
    {
        "id": "mbpp_py/170",
        "prompt": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    \"\"\"Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"",
        "solution": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   ",
        "test": [
            "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29",
            "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16",
            "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38"
        ],
        "code": [
            "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    \"\"\"Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   "
        ],
        "draft_plan": [
            "# Initialize a variable to store the sum\n\n# Iterate through each number in the list within the given range\n    # Add the current number to the sum\n\n# Return the sum"
        ]
    },
    {
        "id": "mbpp_py/171",
        "prompt": "import math\ndef perimeter_pentagon(a):\n    \"\"\"Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"",
        "solution": "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter",
        "test": [
            "assert perimeter_pentagon(5) == 25",
            "assert perimeter_pentagon(10) == 50",
            "assert perimeter_pentagon(15) == 75"
        ],
        "code": [
            "import math\ndef perimeter_pentagon(a):\n    \"\"\"Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n  perimeter=(5*a)\n  return perimeter"
        ],
        "draft_plan": [
            "# Calculate the perimeter of a regular pentagon using the formula:\n    # perimeter = 5 * side_length\n\n# Return the calculated perimeter"
        ]
    },
    {
        "id": "mbpp_py/172",
        "prompt": "def count_occurance(s):\n    \"\"\"Write a function to count the number of occurence of the string 'std' in a given string.\n    \"\"\"",
        "solution": "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count",
        "test": [
            "assert count_occurance(\"letstdlenstdporstd\") == 3",
            "assert count_occurance(\"truststdsolensporsd\") == 1",
            "assert count_occurance(\"makestdsostdworthit\") == 2",
            "assert count_occurance(\"stds\") == 1",
            "assert count_occurance(\"\") == 0"
        ],
        "code": [
            "def count_occurance(s):\n    \"\"\"Write a function to count the number of occurence of the string 'std' in a given string.\n    \"\"\"\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count"
        ],
        "draft_plan": [
            "# Initialize a count variable to 0\n\n# Iterate through each character and its index in the input string\n    # Check if the current character and the next two characters form the string 'std'\n        # If the condition is satisfied, increment the count variable\n\n# Return the count variable"
        ]
    },
    {
        "id": "mbpp_py/222",
        "prompt": "def check_type(test_tuple):\n    \"\"\"Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"",
        "solution": "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) ",
        "test": [
            "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
            "assert check_type((1, 2, \"4\") ) == False",
            "assert check_type((3, 2, 1, 4, 5) ) == True"
        ],
        "code": [
            "def check_type(test_tuple):\n    \"\"\"Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) "
        ],
        "draft_plan": [
            "# Get the data type of the first element in the tuple\n# Iterate through each element in the tuple starting from the second element\n    # Check if the data type of the current element matches the data type of the first element\n        # If the data types don't match, return False\n\n# If all elements have the same data type, return True\n# Otherwise, return False"
        ]
    },
    {
        "id": "mbpp_py/223",
        "prompt": "def is_majority(arr, n, x):\n    \"\"\"Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n    \"\"\"Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"",
        "solution": "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1",
        "test": [
            "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
            "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
            "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
            "assert is_majority([1, 1, 2, 2], 5, 1) == False"
        ],
        "code": [
            "def is_majority(arr, n, x):\n    \"\"\"Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n    \"\"\"Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1"
        ],
        "draft_plan": [
            "# Find the index of the middle element in the array\n# If the middle element is equal to the given element and its index plus n/2 is less than or equal to the length of the array\n    # Check if the element at index (middle index + n/2) is also equal to the given element\n        # If both conditions are true, return True\n# Otherwise, return False"
        ]
    },
    {
        "id": "mbpp_py/224",
        "prompt": "def count_Set_Bits(n): \n    \"\"\"Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"",
        "solution": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ",
        "test": [
            "assert count_Set_Bits(2) == 1",
            "assert count_Set_Bits(4) == 1",
            "assert count_Set_Bits(6) == 2"
        ],
        "code": [
            "def count_Set_Bits(n): \n    \"\"\"Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count "
        ],
        "draft_plan": [
            "# Initialize a counter variable to 0\n\n# Iterate through each bit in the binary representation of the number\n    # Check if the current bit is set (equal to 1)\n        # If yes, increment the counter variable\n\n# Return the counter variable, which represents the number of set bits"
        ]
    },
    {
        "id": "mbpp_py/226",
        "prompt": "def odd_values_string(str):\n    \"\"\"Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"",
        "solution": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result",
        "test": [
            "assert odd_values_string('abcdef') == 'ace'",
            "assert odd_values_string('python') == 'pto'",
            "assert odd_values_string('data') == 'dt'",
            "assert odd_values_string('lambs') == 'lms'"
        ],
        "code": [
            "def odd_values_string(str):\n    \"\"\"Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result"
        ],
        "draft_plan": [
            "# Initialize an empty string to store the result\n\n# Iterate through each character and its index in the input string\n    # Check if the index of the current character is even\n        # If it is even, append the character to the result string\n\n# Return the result string"
        ]
    },
    {
        "id": "mbpp_py/227",
        "prompt": "def min_of_three(a,b,c): \n    \"\"\"Write a function to find minimum of three numbers.\n    \"\"\"",
        "solution": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ",
        "test": [
            "assert min_of_three(10,20,0)==0",
            "assert min_of_three(19,15,18)==15",
            "assert min_of_three(-10,-20,-30)==-30"
        ],
        "code": [
            "def min_of_three(a,b,c): \n    \"\"\"Write a function to find minimum of three numbers.\n    \"\"\"\n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest "
        ],
        "draft_plan": [
            "# Compare the first two numbers and assign the minimum to a variable min_num\n\n# Compare the minimum of the first two numbers with the third number\n    # If the third number is smaller, assign it to min_num\n\n# Return min_num"
        ]
    },
    {
        "id": "mbpp_py/228",
        "prompt": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    \"\"\"Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"",
        "solution": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False",
        "test": [
            "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
            "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
            "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
        ],
        "code": [
            "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    \"\"\"Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False"
        ],
        "draft_plan": [
            "# Convert the range into binary representation\n# Iterate through each bit in the binary representation\n    # Check if any bit is set (1)\n        # If any bit is set, return False\n\n# If all bits are unset (0), return True"
        ]
    },
    {
        "id": "mbpp_py/229",
        "prompt": "def re_arrange_array(arr, n):\n    \"\"\"Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"",
        "solution": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr",
        "test": [
            "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
            "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
            "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
        ],
        "code": [
            "def re_arrange_array(arr, n):\n    \"\"\"Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr"
        ],
        "draft_plan": [
            "# Create two empty lists, one for negative elements and one for positive elements\n\n# Iterate through the first n elements of the array\n    # Check if the element is negative\n        # If it is, append it to the negative elements list\n    # Otherwise, append it to the positive elements list\n\n# Concatenate the negative elements list with the positive elements list\n# Return the resulting list"
        ]
    },
    {
        "id": "mbpp_py/230",
        "prompt": "def replace_blank(str1,char):\n    \"\"\"Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"",
        "solution": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2",
        "test": [
            "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
            "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
            "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
        ],
        "code": [
            "def replace_blank(str1,char):\n    \"\"\"Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n str2 = str1.replace(' ', char)\n return str2"
        ],
        "draft_plan": [
            "# Define a function that takes in a string and a character as arguments\n    # Convert the string into a list of characters\n    # Iterate through each character in the list\n        # Check if the character is a blank space\n            # If it is, replace it with the given character\n    # Join the list of characters back into a string\n    # Return the modified string\n\n# Example usage:\n# string = \"Hello World\"\n# character = \"-\"\n# modified_string = replace_spaces(string, character)\n# print(modified_string) --> \"Hello-World\""
        ]
    },
    {
        "id": "mbpp_py/232",
        "prompt": "import heapq\ndef larg_nnum(list1,n):\n    \"\"\"Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"",
        "solution": "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest",
        "test": [
            "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])",
            "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])",
            "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])"
        ],
        "code": [
            "import heapq\ndef larg_nnum(list1,n):\n    \"\"\"Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n largest=heapq.nlargest(n,list1)\n return largest"
        ],
        "draft_plan": [
            "# Sort the list in descending order\n# Return the first n items from the sorted list"
        ]
    },
    {
        "id": "mbpp_py/233",
        "prompt": "def lateralsuface_cylinder(r,h):\n    \"\"\"Write a function to find the lateral surface area of a cylinder.\n    \"\"\"",
        "solution": "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface",
        "test": [
            "assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)",
            "assert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)",
            "assert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)"
        ],
        "code": [
            "def lateralsuface_cylinder(r,h):\n    \"\"\"Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface"
        ],
        "draft_plan": [
            "# Define a function to calculate the lateral surface area of a cylinder\n    # Accept the radius and height of the cylinder as arguments\n\n    # Calculate the lateral surface area using the formula: 2 * \u03c0 * radius * height\n\n    # Return the calculated lateral surface area\n\n# Call the function with the desired radius and height values and print the result"
        ]
    },
    {
        "id": "mbpp_py/234",
        "prompt": "def volume_cube(l):\n    \"\"\"Write a function to find the volume of a cube given its side length.\n    \"\"\"",
        "solution": "def volume_cube(l):\n  volume = l * l * l\n  return volume",
        "test": [
            "assert volume_cube(3)==27",
            "assert volume_cube(2)==8",
            "assert volume_cube(5)==125"
        ],
        "code": [
            "def volume_cube(l):\n    \"\"\"Write a function to find the volume of a cube given its side length.\n    \"\"\"\n  volume = l * l * l\n  return volume"
        ],
        "draft_plan": [
            "# Define a function to calculate the volume of a cube\n    # Accept a parameter for the side length of the cube\n    # Calculate the volume using the formula V = side_length^3\n    # Return the calculated volume"
        ]
    },
    {
        "id": "mbpp_py/235",
        "prompt": "def even_bit_set_number(n): \n    \"\"\"Write a python function to set all even bits of a given number.\n    \"\"\"",
        "solution": "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) ",
        "test": [
            "assert even_bit_set_number(10) == 10",
            "assert even_bit_set_number(20) == 30",
            "assert even_bit_set_number(30) == 30"
        ],
        "code": [
            "def even_bit_set_number(n): \n    \"\"\"Write a python function to set all even bits of a given number.\n    \"\"\"\n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) "
        ],
        "draft_plan": [
            "# Create a mask with all even bits set to 1 and odd bits set to 0\n# Perform bitwise OR operation between the given number and the mask\n# Return the updated number"
        ]
    },
    {
        "id": "mbpp_py/237",
        "prompt": "from collections import Counter \ndef check_occurences(test_list):\n    \"\"\"Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"",
        "solution": "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) ",
        "test": [
            "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
            "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
            "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
        ],
        "code": [
            "from collections import Counter \ndef check_occurences(test_list):\n    \"\"\"Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) "
        ],
        "draft_plan": [
            "# Initialize an empty dictionary\n\n# Iterate through each tuple in the list\n    # Check if the current tuple is already a key in the dictionary\n        # If it is, increment the count by 1\n        # If it is not, add the tuple as a key with a count of 1\n\n# Return the dictionary"
        ]
    },
    {
        "id": "mbpp_py/238",
        "prompt": "def number_of_substrings(str): \n    \"\"\"Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"",
        "solution": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ",
        "test": [
            "assert number_of_substrings(\"abc\") == 6",
            "assert number_of_substrings(\"abcd\") == 10",
            "assert number_of_substrings(\"abcde\") == 15"
        ],
        "code": [
            "def number_of_substrings(str): \n    \"\"\"Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); "
        ],
        "draft_plan": [
            "# Initialize a counter variable to 0\n\n# Iterate through each character and its index in the input string\n    # Iterate through each substring starting from the current character\n        # Increment the counter variable by 1 for each non-empty substring\n\n# Return the counter variable"
        ]
    },
    {
        "id": "mbpp_py/239",
        "prompt": "def get_total_number_of_sequences(m,n): \n    \"\"\"Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"",
        "solution": "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]",
        "test": [
            "assert get_total_number_of_sequences(10, 4) == 4",
            "assert get_total_number_of_sequences(5, 2) == 6",
            "assert get_total_number_of_sequences(16, 3) == 84"
        ],
        "code": [
            "def get_total_number_of_sequences(m,n): \n    \"\"\"Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]"
        ],
        "draft_plan": [
            "# Initialize a variable count to keep track of the number of possible sequences\n\n# Create a recursive function to find the number of possible sequences\n    # Base case: if n is equal to 0, return 1 (as we have found a valid sequence)\n    \n    # Initialize a variable total_count to keep track of the total number of sequences\n    \n    # Iterate through all possible values for the current element in the sequence\n        # Check if the current element is greater than or equal to twice the previous element and less than or equal to m\n            # If it is, recursively call the function with n-1 and update the total_count by adding the result\n            \n    # Return the total_count\n    \n# Call the recursive function with the given values of m and n and store the result in the variable count\n\n# Return the value of count as the final result"
        ]
    },
    {
        "id": "mbpp_py/240",
        "prompt": "def replace_list(list1,list2):\n    \"\"\"Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"",
        "solution": "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n",
        "test": [
            "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
            "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
            "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
        ],
        "code": [
            "def replace_list(list1,list2):\n    \"\"\"Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n"
        ],
        "draft_plan": [
            "# Define a function that takes two lists as input\ndef replace_last_element(list1, list2):\n    # Replace the last element of list1 with the elements of list2\n    list1[-1:] = list2\n    # Return the modified list1\n    return list1"
        ]
    },
    {
        "id": "mbpp_py/242",
        "prompt": "def count_charac(str1):\n    \"\"\"Write a function to count the total number of characters in a string.\n    \"\"\"",
        "solution": "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total",
        "test": [
            "assert count_charac(\"python programming\")==18",
            "assert count_charac(\"language\")==8",
            "assert count_charac(\"words\")==5"
        ],
        "code": [
            "def count_charac(str1):\n    \"\"\"Write a function to count the total number of characters in a string.\n    \"\"\"\n total = 0\n for i in str1:\n    total = total + 1\n return total"
        ],
        "draft_plan": [
            "# Initialize a variable to keep track of the character count, set it to 0\n\n# Iterate through each character in the string\n    # Increment the character count by 1\n\n# Return the character count"
        ]
    },
    {
        "id": "mbpp_py/244",
        "prompt": "import math  \ndef next_Perfect_Square(N): \n    \"\"\"Write a python function to find the next perfect square greater than a given number.\n    \"\"\"",
        "solution": "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN ",
        "test": [
            "assert next_Perfect_Square(35) == 36",
            "assert next_Perfect_Square(6) == 9",
            "assert next_Perfect_Square(9) == 16"
        ],
        "code": [
            "import math  \ndef next_Perfect_Square(N): \n    \"\"\"Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN "
        ],
        "draft_plan": [
            "# Calculate the square root of the given number using math.sqrt() function\n\n# Increment the square root by 1\n\n# Calculate the next perfect square by squaring the incremented square root\n\n# Return the next perfect square"
        ]
    },
    {
        "id": "mbpp_py/245",
        "prompt": "def max_sum(arr): \n    \"\"\"Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"",
        "solution": "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum",
        "test": [
            "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194",
            "assert max_sum([80, 60, 30, 40, 20, 10]) == 210",
            "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138"
        ],
        "code": [
            "def max_sum(arr): \n    \"\"\"Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum"
        ],
        "draft_plan": [
            "# Initialize two arrays of the same length as the input array, one to store the maximum increasing subsequence sum ending at each index, and the other to store the maximum decreasing subsequence sum starting at each index\n\n# Iterate through each index in the input array\n    # Find the maximum increasing subsequence sum ending at the current index by comparing it with all previous indices\n    # Find the maximum decreasing subsequence sum starting at the current index by comparing it with all next indices\n\n# Find the maximum bitonic subsequence sum by adding the maximum increasing subsequence sum and the maximum decreasing subsequence sum for each index, and subtracting the value of the current index from the sum\n\n# Return the maximum bitonic subsequence sum"
        ]
    },
    {
        "id": "mbpp_py/246",
        "prompt": "def babylonian_squareroot(number):\n    \"\"\"Write a function for computing square roots using the babylonian method.\n    \"\"\"",
        "solution": "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;",
        "test": [
            "assert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)",
            "assert math.isclose(babylonian_squareroot(2), 1.414213562373095, rel_tol=0.001)",
            "assert math.isclose(babylonian_squareroot(9), 3.0, rel_tol=0.001)"
        ],
        "code": [
            "def babylonian_squareroot(number):\n    \"\"\"Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;"
        ],
        "draft_plan": [
            "# Define a function to compute square root using Babylonian method\n    # Check if the input number is less than 0, if so return None\n    \n    # Initialize the guess value as the input number divided by 2\n    \n    # Iterate until the difference between the guess value and the previous guess value is less than a small threshold\n        # Compute the new guess value as the average of the previous guess value and the input number divided by the previous guess value\n        \n    # Return the final guess value as the square root\n\n# Test the function by calling it with some example inputs"
        ]
    },
    {
        "id": "mbpp_py/247",
        "prompt": "def lps(str): \n    \"\"\"Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"",
        "solution": "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]",
        "test": [
            "assert lps(\"TENS FOR TENS\") == 5",
            "assert lps(\"CARDIO FOR CARDS\") == 7",
            "assert lps(\"PART OF THE JOURNEY IS PART\") == 9"
        ],
        "code": [
            "def lps(str): \n    \"\"\"Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]"
        ],
        "draft_plan": [
            "# Create a 2D array of size n x n, where n is the length of the input string\n# Fill the diagonal with 1, as each character is a palindrome of length 1\n\n# Iterate through the remaining elements of the array in a bottom-up manner\n    # If the characters at the current indices match\n        # Set the value of the current cell as 2 plus the value in the cell diagonally below and to the right (i+1, j+1)\n    # Otherwise, set the value of the current cell as the maximum of the value in the cell to the left (i, j-1) and the value in the cell below (i+1, j)\n\n# Return the value in the top-right cell of the array, which represents the length of the longest palindromic subsequence"
        ]
    },
    {
        "id": "mbpp_py/248",
        "prompt": "def harmonic_sum(n):\n    \"\"\"Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"",
        "solution": "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) ",
        "test": [
            "assert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)",
            "assert math.isclose(harmonic_sum(4), 2.083333333333333, rel_tol=0.001)",
            "assert math.isclose(harmonic_sum(19), 3.547739657143682, rel_tol=0.001)"
        ],
        "code": [
            "def harmonic_sum(n):\n    \"\"\"Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) "
        ],
        "draft_plan": [
            "# Initialize the sum to 0\n\n# Iterate from i = 1 to n-1\n    # Add 1/i to the sum\n\n# Return the sum"
        ]
    },
    {
        "id": "mbpp_py/249",
        "prompt": "def intersection_array(array_nums1,array_nums2):\n    \"\"\"Write a function to find the intersection of two arrays.\n    \"\"\"",
        "solution": "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result",
        "test": [
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
        ],
        "code": [
            "def intersection_array(array_nums1,array_nums2):\n    \"\"\"Write a function to find the intersection of two arrays.\n    \"\"\"\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result"
        ],
        "draft_plan": [
            "# Initialize an empty result array\n\n# Iterate through each element in the first array\n    # Check if the current element is present in the second array\n        # If it is present, append it to the result array\n\n# Return the result array"
        ]
    },
    {
        "id": "mbpp_py/250",
        "prompt": "def count_X(tup, x): \n    \"\"\"Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"",
        "solution": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ",
        "test": [
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
        ],
        "code": [
            "def count_X(tup, x): \n    \"\"\"Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count "
        ],
        "draft_plan": [
            "# Initialize a counter variable to 0\n\n# Iterate through each element in the tuple\n    # Check if the current element is equal to the target element\n        # If it is, increment the counter by 1\n\n# Return the value of the counter variable"
        ]
    },
    {
        "id": "mbpp_py/251",
        "prompt": "def insert_element(list,element):\n    \"\"\"Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"",
        "solution": "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list",
        "test": [
            "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']",
            "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']",
            "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']"
        ],
        "code": [
            "def insert_element(list,element):\n    \"\"\"Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n list = [v for elt in list for v in (element, elt)]\n return list"
        ],
        "draft_plan": [
            "# Initialize an empty list to store the modified elements\n# Iterate through each element in the original list\n    # Add the given element to the modified list\n    # Add the current element from the original list to the modified list\n\n# Return the modified list"
        ]
    },
    {
        "id": "mbpp_py/252",
        "prompt": "import cmath  \ndef convert(numbers):    \n    \"\"\"Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"",
        "solution": "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) ",
        "test": [
            "assert convert(1) == (1.0, 0.0)",
            "assert convert(4) == (4.0,0.0)",
            "assert convert(5) == (5.0,0.0)"
        ],
        "code": [
            "import cmath  \ndef convert(numbers):    \n    \"\"\"Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n  num = cmath.polar(numbers)  \n  return (num) "
        ],
        "draft_plan": [
            "# Import the cmath module to work with complex numbers\n\n# Define a function to convert complex numbers to polar coordinates\n    # Use the cmath.polar() method to convert the complex number to polar coordinates\n\n# Call the function with the complex number as the input"
        ]
    },
    {
        "id": "mbpp_py/253",
        "prompt": "def count_integer(list1):\n    \"\"\"Write a python function that returns the number of integer elements in a given list.\n    \"\"\"",
        "solution": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr",
        "test": [
            "assert count_integer([1,2,'abc',1.2]) == 2",
            "assert count_integer([1,2,3]) == 3",
            "assert count_integer([1,1.2,4,5.1]) == 2"
        ],
        "code": [
            "def count_integer(list1):\n    \"\"\"Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr"
        ],
        "draft_plan": [
            "# Initialize a counter variable to 0\n\n# Iterate through each element in the given list\n    # Check if the current element is an integer\n        # If it is an integer, increment the counter variable\n\n# Return the counter variable as the number of integer elements in the list"
        ]
    },
    {
        "id": "mbpp_py/255",
        "prompt": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    \"\"\"Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    \"\"\"",
        "solution": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n",
        "test": [
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
        ],
        "code": [
            "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    \"\"\"Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    \"\"\"\n    return list(combinations_with_replacement(l,n))\n"
        ],
        "draft_plan": [
            "import itertools\n\ndef generate_combinations(lst, n):\n    # Use itertools.combinations_with_replacement to generate all combinations of length n\n    combinations = list(itertools.combinations_with_replacement(lst, n))\n    \n    # Convert the combinations to a list of tuples\n    result = [tuple(comb) for comb in combinations]\n    \n    return result"
        ]
    },
    {
        "id": "mbpp_py/256",
        "prompt": "def count_Primes_nums(n):\n    \"\"\"Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"",
        "solution": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr",
        "test": [
            "assert count_Primes_nums(5) == 2",
            "assert count_Primes_nums(10) == 4",
            "assert count_Primes_nums(100) == 25"
        ],
        "code": [
            "def count_Primes_nums(n):\n    \"\"\"Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr"
        ],
        "draft_plan": [
            "# Define a function to check if a number is prime\n    # Check if the number is less than 2, return False\n    # Iterate from 2 to the square root of the number\n        # Check if the number is divisible by any number in the range\n            # If divisible, return False\n    # If the number is not divisible by any number in the range, return True\n\n# Define a function to count the number of primes less than a given number\n    # Initialize a count variable to 0\n    # Iterate from 2 to the given number\n        # Check if the current number is prime\n            # If prime, increment the count\n    # Return the count"
        ]
    },
    {
        "id": "mbpp_py/257",
        "prompt": "def swap_numbers(a,b):\n    \"\"\"Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"",
        "solution": "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)",
        "test": [
            "assert swap_numbers(10,20)==(20,10)",
            "assert swap_numbers(15,17)==(17,15)",
            "assert swap_numbers(100,200)==(200,100)"
        ],
        "code": [
            "def swap_numbers(a,b):\n    \"\"\"Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n temp = a\n a = b\n b = temp\n return (a,b)"
        ],
        "draft_plan": [
            "# Define the function that takes in two numbers as input\n    # Create a tuple with the second number followed by the first number\n    # Return the tuple\n\n# Call the function with the desired numbers and store the returned tuple"
        ]
    },
    {
        "id": "mbpp_py/259",
        "prompt": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"Write a function to maximize the given two tuples.\n    \"\"\"",
        "solution": "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "test": [
            "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
            "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
            "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
        ],
        "code": [
            "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"Write a function to maximize the given two tuples.\n    \"\"\"\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) "
        ],
        "draft_plan": [
            "# Initialize a new tuple to store the maximum values\n\n# Iterate through each element in the tuples\n    # Compare the corresponding elements of both tuples\n    # Add the maximum value to the new tuple\n\n# Return the new tuple containing the maximum values"
        ]
    },
    {
        "id": "mbpp_py/260",
        "prompt": "def newman_prime(n): \n    \"\"\"Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"",
        "solution": "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)",
        "test": [
            "assert newman_prime(3) == 7",
            "assert newman_prime(4) == 17",
            "assert newman_prime(5) == 41"
        ],
        "code": [
            "def newman_prime(n): \n    \"\"\"Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)"
        ],
        "draft_plan": [
            "# Check if the given number n is less than or equal to 2\n    # If true, return the nth newman\u2013shanks\u2013williams prime number directly\n\n# Initialize a list to store the prime numbers\n# Add the first two newman\u2013shanks\u2013williams prime numbers (2 and 3) to the list\n\n# Start the iteration from 4\n# While the length of the list is less than n\n    # Check if the current number is prime\n        # If true, add it to the list\n\n    # Increment the current number by 1\n\n# Return the nth newman\u2013shanks\u2013williams prime number from the list"
        ]
    },
    {
        "id": "mbpp_py/261",
        "prompt": "def division_elements(test_tup1, test_tup2):\n    \"\"\"Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"",
        "solution": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "test": [
            "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
            "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
            "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
        ],
        "code": [
            "def division_elements(test_tup1, test_tup2):\n    \"\"\"Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) "
        ],
        "draft_plan": [
            "# Create an empty list to store the result of the division operation\n\n# Iterate through the elements of the tuples\n    # Perform the division operation on the corresponding elements of the tuples\n    # Append the result to the result list\n\n# Return the result list"
        ]
    },
    {
        "id": "mbpp_py/262",
        "prompt": "def split_two_parts(list1, L):\n    \"\"\"Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"",
        "solution": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]",
        "test": [
            "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
            "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
            "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
        ],
        "code": [
            "def split_two_parts(list1, L):\n    \"\"\"Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    return list1[:L], list1[L:]"
        ],
        "draft_plan": [
            "# Check if the given list has enough elements to split into two parts\n    # If not, return the original list as the first part and an empty list as the second part\n\n# Split the list into two parts at index L\n    # First part is from index 0 to index L-1\n    # Second part is from index L to the end of the list\n\n# Return the resulting lists as a tuple"
        ]
    },
    {
        "id": "mbpp_py/264",
        "prompt": "def dog_age(h_age):\n    \"\"\"Write a function to calculate a dog's age in dog's years.\n    \"\"\"",
        "solution": "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age",
        "test": [
            "assert dog_age(12)==61",
            "assert dog_age(15)==73",
            "assert dog_age(24)==109"
        ],
        "code": [
            "def dog_age(h_age):\n    \"\"\"Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age"
        ],
        "draft_plan": [
            "# Define a function called calculate_dog_age that takes in one parameter: human_age\n\n# Define a variable called dog_age and set it to 0\n\n# If human_age is less than or equal to 2, set dog_age to human_age multiplied by 10.5\n# If human_age is greater than 2, calculate the dog's age in dog's years by adding:\n    # 2 (for the first two years) multiplied by 10.5\n    # The remaining years multiplied by 4\n\n# Return the value of dog_age as the result of the function"
        ]
    },
    {
        "id": "mbpp_py/265",
        "prompt": "def list_split(S, step):\n    \"\"\"Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"",
        "solution": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]",
        "test": [
            "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]",
            "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]",
            "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]"
        ],
        "code": [
            "def list_split(S, step):\n    \"\"\"Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    return [S[i::step] for i in range(step)]"
        ],
        "draft_plan": [
            "# Create an empty list to store the resulting lists\n\n# Iterate through the range from 0 to the length of the input list with step size n\n    # Append a sublist that starts from the current index and ends at the current index + n to the resulting list\n\n# Return the resulting list"
        ]
    },
    {
        "id": "mbpp_py/266",
        "prompt": "def lateralsurface_cube(l):\n    \"\"\"Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"",
        "solution": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA",
        "test": [
            "assert lateralsurface_cube(5)==100",
            "assert lateralsurface_cube(9)==324",
            "assert lateralsurface_cube(10)==400"
        ],
        "code": [
            "def lateralsurface_cube(l):\n    \"\"\"Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n  LSA = 4 * (l * l)\n  return LSA"
        ],
        "draft_plan": [
            "# Calculate the lateral surface area of a cube\n    # Lateral surface area of a cube is given by 4 times the square of the side length\n    # Return the calculated lateral surface area"
        ]
    },
    {
        "id": "mbpp_py/267",
        "prompt": "def square_Sum(n):  \n    \"\"\"Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"",
        "solution": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
        "test": [
            "assert square_Sum(2) == 10",
            "assert square_Sum(3) == 35",
            "assert square_Sum(4) == 84"
        ],
        "code": [
            "def square_Sum(n):  \n    \"\"\"Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    return int(n*(4*n*n-1)/3) "
        ],
        "draft_plan": [
            "# Initialize a variable to store the sum of squares\n# Initialize a counter variable to keep track of the odd numbers\n# Initialize a variable to store the current odd number\n\n# Iterate from 1 to n (inclusive)\n    # Check if the current number is odd\n        # If it is, square the number and add it to the sum of squares\n        # Increase the counter variable by 1\n        # Check if the counter variable is equal to n\n            # If it is, break the loop\n\n# Return the sum of squares"
        ]
    },
    {
        "id": "mbpp_py/268",
        "prompt": "def find_star_num(n): \n    \"\"\"Write a function to find the n'th star number.\n    \"\"\"",
        "solution": "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) ",
        "test": [
            "assert find_star_num(3) == 37",
            "assert find_star_num(4) == 73",
            "assert find_star_num(5) == 121"
        ],
        "code": [
            "def find_star_num(n): \n    \"\"\"Write a function to find the n'th star number.\n    \"\"\"\n\treturn (6 * n * (n - 1) + 1) "
        ],
        "draft_plan": [
            "# The nth star number can be calculated using the formula: n * (n + 1) / 2\n\n# Define a function to find the nth star number\n    # Calculate the star number using the formula\n    # Return the star number"
        ]
    },
    {
        "id": "mbpp_py/269",
        "prompt": "def ascii_value(k):\n    \"\"\"Write a function to find the ascii value of a character.\n    \"\"\"",
        "solution": "def ascii_value(k):\n  ch=k\n  return ord(ch)",
        "test": [
            "assert ascii_value('A')==65",
            "assert ascii_value('R')==82",
            "assert ascii_value('S')==83"
        ],
        "code": [
            "def ascii_value(k):\n    \"\"\"Write a function to find the ascii value of a character.\n    \"\"\"\n  ch=k\n  return ord(ch)"
        ],
        "draft_plan": [
            "To find the ASCII value of a character in Python, you can use the `ord()` function. Here is the code logic:\n\n1. Define a function `find_ascii_value(char)` that takes a character as input.\n2. Inside the function, use the `ord()` function to find the ASCII value of the character.\n3. Return the ASCII value.\n\nHere is the code:\n\n```python\ndef find_ascii_value(char):\n    return ord(char)\n```\n\nYou can then call this function and pass the character whose ASCII value you want to find, like this:\n\n```python\nprint(find_ascii_value('A')) # Output: 65\n```\n\nNote that the `ord()` function only works with single characters. If you pass a string with multiple characters, it will raise a `TypeError`."
        ]
    },
    {
        "id": "mbpp_py/270",
        "prompt": "def sum_even_and_even_index(arr):  \n    \"\"\"Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"",
        "solution": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
        "test": [
            "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30",
            "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26",
            "assert sum_even_and_even_index([5, 6, 12, 1]) == 12"
        ],
        "code": [
            "def sum_even_and_even_index(arr):  \n    \"\"\"Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum"
        ],
        "draft_plan": [
            "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'"
        ]
    },
    {
        "id": "mbpp_py/271",
        "prompt": "def even_Power_Sum(n): \n    \"\"\"Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"",
        "solution": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ",
        "test": [
            "assert even_Power_Sum(2) == 1056",
            "assert even_Power_Sum(3) == 8832",
            "assert even_Power_Sum(1) == 32"
        ],
        "code": [
            "def even_Power_Sum(n): \n    \"\"\"Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; "
        ],
        "draft_plan": [
            "# Initialize a variable `sum` to 0\n# Initialize a counter variable `count` to 0\n\n# Iterate through numbers starting from 1 until `count` reaches `n`\n    # Check if the current number is even\n        # Increment the `count` variable\n        # Add the current number raised to the fifth power to the `sum` variable\n\n# Return the `sum` variable"
        ]
    },
    {
        "id": "mbpp_py/272",
        "prompt": "def rear_extract(test_list):\n    \"\"\"Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"",
        "solution": "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) ",
        "test": [
            "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
            "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
            "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
        ],
        "code": [
            "def rear_extract(test_list):\n    \"\"\"Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n  res = [lis[-1] for lis in test_list]\n  return (res) "
        ],
        "draft_plan": [
            "# Create an empty list to store the rear elements\n# Iterate through each tuple in the input list\n    # Append the rear element of the current tuple to the list\n\n# Return the list containing the rear elements"
        ]
    },
    {
        "id": "mbpp_py/273",
        "prompt": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"",
        "solution": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) ",
        "test": [
            "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
            "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
            "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
        ],
        "code": [
            "def substract_elements(test_tup1, test_tup2):\n    \"\"\"Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) "
        ],
        "draft_plan": [
            "# Define a function that takes in two tuples as arguments\n    # Create an empty list to store the result of the subtraction\n\n    # Iterate through the indices of the tuples\n        # Subtract the element at the current index of the first tuple from the element at the current index of the second tuple\n        # Append the result to the list\n\n    # Return the resulting list"
        ]
    },
    {
        "id": "mbpp_py/274",
        "prompt": "import math  \ndef even_binomial_Coeff_Sum( n): \n    \"\"\"Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"",
        "solution": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ",
        "test": [
            "assert even_binomial_Coeff_Sum(4) == 8",
            "assert even_binomial_Coeff_Sum(6) == 32",
            "assert even_binomial_Coeff_Sum(2) == 2"
        ],
        "code": [
            "import math  \ndef even_binomial_Coeff_Sum( n): \n    \"\"\"Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    return (1 << (n - 1)) "
        ],
        "draft_plan": [
            "# Import the math module\n\n# Define a function that takes in a positive integer n\n    # Initialize a variable `sum_even` to store the sum of even index binomial coefficients\n    # Iterate from 0 to n\n        # Calculate the binomial coefficient using the math module's comb function\n        # Check if the index is even\n            # If it is even, add the binomial coefficient to `sum_even`\n    # Return `sum_even`"
        ]
    },
    {
        "id": "mbpp_py/276",
        "prompt": "def volume_cylinder(r,h):\n    \"\"\"Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"",
        "solution": "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume",
        "test": [
            "assert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)",
            "assert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)",
            "assert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)"
        ],
        "code": [
            "def volume_cylinder(r,h):\n    \"\"\"Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n  volume=3.1415*r*r*h\n  return volume"
        ],
        "draft_plan": [
            "# Define a function named \"cylinder_volume\" that takes in two parameters: radius and height\n    # Calculate the volume of the cylinder using the formula: volume = \u03c0 * radius^2 * height\n    # Return the calculated volume\n\n# Test the function by calling it with sample inputs"
        ]
    },
    {
        "id": "mbpp_py/277",
        "prompt": "def dict_filter(dict,n):\n    \"\"\"Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"",
        "solution": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result",
        "test": [
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
        ],
        "code": [
            "def dict_filter(dict,n):\n    \"\"\"Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result"
        ],
        "draft_plan": [
            "# Initialize an empty dictionary to store the filtered entries\n\n# Iterate through each key-value pair in the input dictionary\n    # Check if the value is greater than or equal to n\n        # If it is, add the key-value pair to the filtered dictionary\n\n# Return the filtered dictionary"
        ]
    },
    {
        "id": "mbpp_py/278",
        "prompt": "def count_first_elements(test_tup):\n    \"\"\"Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"",
        "solution": "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) ",
        "test": [
            "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
            "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
            "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
        ],
        "code": [
            "def count_first_elements(test_tup):\n    \"\"\"Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) "
        ],
        "draft_plan": [
            "# Initialize a count variable to 0\n# Iterate through each element and its index in the given tuple\n    # Check if the current element is equal to the target element in the tuple\n        # If it is, return the count\n    # If the current element is not equal to the target element, increment the count by 1\n\n# If the target element is not found in the tuple, return -1"
        ]
    },
    {
        "id": "mbpp_py/279",
        "prompt": "def is_num_decagonal(n): \n    \"\"\"Write a function to find the nth decagonal number.\n    \"\"\"",
        "solution": "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n ",
        "test": [
            "assert is_num_decagonal(3) == 27",
            "assert is_num_decagonal(7) == 175",
            "assert is_num_decagonal(10) == 370"
        ],
        "code": [
            "def is_num_decagonal(n): \n    \"\"\"Write a function to find the nth decagonal number.\n    \"\"\"\n\treturn 4 * n * n - 3 * n "
        ],
        "draft_plan": [
            "# Formula to find the nth decagonal number is: 3n^2 - 2n\n\n# Define a function named nth_decagonal_number that takes an argument n\n    # Calculate the decagonal number using the formula: 3*n*n - 2*n\n    # Return the calculated decagonal number\n\n# Call the function nth_decagonal_number with the desired value of n to find the nth decagonal number"
        ]
    },
    {
        "id": "mbpp_py/280",
        "prompt": "def sequential_search(dlist, item):\n    \"\"\"Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"",
        "solution": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos",
        "test": [
            "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
            "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
            "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
        ],
        "code": [
            "def sequential_search(dlist, item):\n    \"\"\"Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos"
        ],
        "draft_plan": [
            "# Initialize a variable to store the index position of the element, initialized to -1\n# Iterate through each element in the array along with its index\n    # Check if the current element is equal to the target element\n        # If they are equal, update the index variable with the current index and break out of the loop\n\n# Check if the index variable is still equal to -1\n    # If it is, set the boolean variable to False, indicating the element is not found\n    # If it is not, set the boolean variable to True, indicating the element is found\n\n# Return a tuple with the boolean variable and the index variable"
        ]
    },
    {
        "id": "mbpp_py/281",
        "prompt": "def all_unique(test_list):\n    \"\"\"Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"",
        "solution": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True",
        "test": [
            "assert all_unique([1,2,3]) == True",
            "assert all_unique([1,2,1,2]) == False",
            "assert all_unique([1,2,3,4,5]) == True"
        ],
        "code": [
            "def all_unique(test_list):\n    \"\"\"Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True"
        ],
        "draft_plan": [
            "# Convert the input list into a set\n# Compare the length of the input list with the length of the set\n    # If they are equal, return True (all elements are unique)\n    # If they are not equal, return False (there are duplicate elements)"
        ]
    },
    {
        "id": "mbpp_py/282",
        "prompt": "def sub_list(nums1,nums2):\n    \"\"\"Write a function to subtract two lists element-wise.\n    \"\"\"",
        "solution": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)",
        "test": [
            "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
            "assert sub_list([1,2],[3,4])==[-2,-2]",
            "assert sub_list([90,120],[50,70])==[40,50]"
        ],
        "code": [
            "def sub_list(nums1,nums2):\n    \"\"\"Write a function to subtract two lists element-wise.\n    \"\"\"\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)"
        ],
        "draft_plan": [
            "# Create an empty list to store the result\n\n# Iterate through the indices of the lists\n    # Subtract the elements at the corresponding indices of the two lists\n    # Append the result to the result list\n\n# Return the result list"
        ]
    },
    {
        "id": "mbpp_py/283",
        "prompt": "def validate(n): \n    \"\"\"Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"",
        "solution": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
        "test": [
            "assert validate(1234) == True",
            "assert validate(51241) == False",
            "assert validate(321) == True"
        ],
        "code": [
            "def validate(n): \n    \"\"\"Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True"
        ],
        "draft_plan": [
            "# Convert the input integer to a string\n# Initialize a dictionary to store the frequency of each digit\n\n# Iterate through each digit in the string\n    # Increment the frequency of the digit in the dictionary\n\n# Iterate through each digit in the string\n    # Check if the frequency of the digit is greater than the digit itself\n        # If yes, return False\n\n# If all frequencies are less than or equal to their respective digits, return True"
        ]
    },
    {
        "id": "mbpp_py/284",
        "prompt": "def check_element(list,element):\n    \"\"\"Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"",
        "solution": "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element",
        "test": [
            "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
            "assert check_element([1,2,3,4],7)==False",
            "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
        ],
        "code": [
            "def check_element(list,element):\n    \"\"\"Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n  check_element=all(v== element for v in list)\n  return check_element"
        ],
        "draft_plan": [
            "# Iterate through each item in the list\n    # Check if the current item is equal to the given element\n        # If not, return False\n\n# If all items in the list are equal to the given element, return True"
        ]
    },
    {
        "id": "mbpp_py/285",
        "prompt": "import re\ndef text_match_two_three(text):\n    \"\"\"Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"",
        "solution": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
        "test": [
            "assert text_match_two_three(\"ac\")==(False)",
            "assert text_match_two_three(\"dc\")==(False)",
            "assert text_match_two_three(\"abbbba\")==(True)"
        ],
        "code": [
            "import re\ndef text_match_two_three(text):\n    \"\"\"Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False"
        ],
        "draft_plan": [
            "# Iterate through each character in the input string\n    # Check if the current character is 'a'\n        # If it is, check the next two characters (if they exist) to see if they are 'b'\n            # If they are, return True\n    # If the current character is not 'a', continue to the next character\n\n# If no 'a' followed by two or three 'b' characters is found, return False"
        ]
    },
    {
        "id": "mbpp_py/286",
        "prompt": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"",
        "solution": "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far",
        "test": [
            "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
            "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
            "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
        ],
        "code": [
            "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far"
        ],
        "draft_plan": [
            "# Initialize variables to store the maximum sum and the current sum\n# Repeat the given array k times to form the modified array\n\n# Iterate through each element in the modified array\n    # Add the current element to the current sum\n    # Check if the current sum is greater than the maximum sum\n        # If so, update the maximum sum\n    # Check if the current sum is less than 0\n        # If so, reset the current sum to 0\n\n# Return the maximum sum"
        ]
    },
    {
        "id": "mbpp_py/287",
        "prompt": "def square_Sum(n):  \n    \"\"\"Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"",
        "solution": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
        "test": [
            "assert square_Sum(2) == 20",
            "assert square_Sum(3) == 56",
            "assert square_Sum(4) == 120"
        ],
        "code": [
            "def square_Sum(n):  \n    \"\"\"Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    return int(2*n*(n+1)*(2*n+1)/3)"
        ],
        "draft_plan": [
            "# Initialize the sum of squares variable to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Add the square of the current number to the sum of squares variable\n\n# Return the sum of squares"
        ]
    },
    {
        "id": "mbpp_py/290",
        "prompt": "def max_length(list1):\n    \"\"\"Write a function to find the list of maximum length in a list of lists.\n    \"\"\"",
        "solution": "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)",
        "test": [
            "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
            "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
        ],
        "code": [
            "def max_length(list1):\n    \"\"\"Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)"
        ],
        "draft_plan": [
            "# Initialize a variable to store the maximum length and an empty list to store the list with maximum length\n\n# Iterate through each list in the input list of lists\n    # Check if the length of the current list is greater than the maximum length\n        # If so, update the maximum length and the list with maximum length\n\n# Return the list with maximum length"
        ]
    },
    {
        "id": "mbpp_py/291",
        "prompt": "def count_no_of_ways(n, k): \n    \"\"\"Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"",
        "solution": "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]",
        "test": [
            "assert count_no_of_ways(2, 4) == 16",
            "assert count_no_of_ways(3, 2) == 6",
            "assert count_no_of_ways(4, 4) == 228"
        ],
        "code": [
            "def count_no_of_ways(n, k): \n    \"\"\"Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]"
        ],
        "draft_plan": [
            "# If there are no posts or no colors, return 0\n# If there is only 1 post, return k (number of colors)\n\n# Initialize two variables to keep track of the number of ways with different colors and the number of ways with the same color for the first two posts\n# Set the number of ways with different colors to k\n# Set the number of ways with the same color to k\n\n# Iterate from the third post to the nth post\n    # Calculate the number of ways with different colors for the current post\n        # Multiply the number of ways with different colors for the previous post by (k-1)\n    # Calculate the number of ways with the same color for the current post\n        # Set it equal to the number of ways with different colors for the previous post\n\n# Return the sum of the number of ways with different colors and the number of ways with the same color for the nth post"
        ]
    },
    {
        "id": "mbpp_py/292",
        "prompt": "def find(n,m):  \n    \"\"\"Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"",
        "solution": "def find(n,m):  \n    q = n//m \n    return (q)",
        "test": [
            "assert find(10,3) == 3",
            "assert find(4,2) == 2",
            "assert find(20,5) == 4"
        ],
        "code": [
            "def find(n,m):  \n    \"\"\"Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    q = n//m \n    return (q)"
        ],
        "draft_plan": [
            "To find the quotient of two numbers rounded down to the nearest integer, you can use the floor division operator `//` in Python.\n\nHere is the code logic:\n\n```python\ndef quotient(a, b):\n    return a // b\n```\n\nIn this code, the function `quotient` takes two parameters `a` and `b`, representing the numbers for which we want to find the quotient. The floor division `a // b` divides `a` by `b` and returns the quotient rounded down to the nearest integer.\n\nYou can call this function with your desired values to find the quotient. For example:\n\n```python\nresult = quotient(10, 3)\nprint(result)  # Output: 3\n```"
        ]
    },
    {
        "id": "mbpp_py/293",
        "prompt": "import math\ndef otherside_rightangle(w,h):\n    \"\"\"Write a function to find the third side of a right angled triangle.\n    \"\"\"",
        "solution": "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s",
        "test": [
            "assert otherside_rightangle(7,8)==10.63014581273465",
            "assert otherside_rightangle(3,4)==5",
            "assert otherside_rightangle(7,15)==16.55294535724685"
        ],
        "code": [
            "import math\ndef otherside_rightangle(w,h):\n    \"\"\"Write a function to find the third side of a right angled triangle.\n    \"\"\"\n  s=math.sqrt((w*w)+(h*h))\n  return s"
        ],
        "draft_plan": [
            "# Import the math module\n\n# Define a function to find the third side of a right-angled triangle\n    # Calculate the square of the two given sides\n    # Calculate the sum of the squares of the two given sides\n    # Take the square root of the sum to find the length of the hypotenuse\n    # Return the length of the hypotenuse\n\n# Call the function with the given sides of the triangle and print the result"
        ]
    },
    {
        "id": "mbpp_py/294",
        "prompt": "def max_val(listval):\n    \"\"\"Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"",
        "solution": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)",
        "test": [
            "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
            "assert max_val(['Python', 15, 20, 25])==25",
            "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
        ],
        "code": [
            "def max_val(listval):\n    \"\"\"Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)"
        ],
        "draft_plan": [
            "# Initialize the maximum value with the first element in the list\n\n# Iterate through each element in the list starting from the second element\n    # Compare the current element with the maximum value\n        # If the current element is greater than the maximum value, update the maximum value\n\n# Return the maximum value"
        ]
    },
    {
        "id": "mbpp_py/295",
        "prompt": "def sum_div(number):\n    \"\"\"Write a function to return the sum of all divisors of a number.\n    \"\"\"",
        "solution": "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)",
        "test": [
            "assert sum_div(8)==7",
            "assert sum_div(12)==16",
            "assert sum_div(7)==1"
        ],
        "code": [
            "def sum_div(number):\n    \"\"\"Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)"
        ],
        "draft_plan": [
            "# Initialize the sum of divisors to 0\n\n# Iterate from 1 to the given number\n    # Check if the current number is a divisor of the given number\n        # If it is, add it to the sum of divisors\n\n# Return the sum of divisors"
        ]
    },
    {
        "id": "mbpp_py/296",
        "prompt": "def get_Inv_Count(arr): \n    \"\"\"Write a python function to count inversions in an array.\n    \"\"\"",
        "solution": "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count ",
        "test": [
            "assert get_Inv_Count([1,20,6,4,5]) == 5",
            "assert get_Inv_Count([1,2,1]) == 1",
            "assert get_Inv_Count([1,2,5,6,1]) == 3"
        ],
        "code": [
            "def get_Inv_Count(arr): \n    \"\"\"Write a python function to count inversions in an array.\n    \"\"\"\n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count "
        ],
        "draft_plan": [
            "# Initialize a variable to count the number of inversions\n# Iterate through each element in the array\n    # For each element, iterate through the remaining elements\n        # Check if the current element is greater than any of the remaining elements\n            # If so, increment the inversion count\n\n# Return the inversion count"
        ]
    },
    {
        "id": "mbpp_py/297",
        "prompt": "def flatten_list(list1):\n    \"\"\"Write a function to flatten a given nested list structure.\n    \"\"\"",
        "solution": "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list ",
        "test": [
            "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
            "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
            "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
        ],
        "code": [
            "def flatten_list(list1):\n    \"\"\"Write a function to flatten a given nested list structure.\n    \"\"\"\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list "
        ],
        "draft_plan": [
            "# Initialize an empty list to store the flattened elements\n\n# Iterate through each element in the given list\n    # If the element is a list, recursively flatten it and append each element to the flattened list\n    # If the element is not a list, append it directly to the flattened list\n\n# Return the flattened list"
        ]
    },
    {
        "id": "mbpp_py/299",
        "prompt": "from collections import defaultdict\ndef max_aggregate(stdata):\n    \"\"\"Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"",
        "solution": "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])",
        "test": [
            "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
            "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
            "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
        ],
        "code": [
            "from collections import defaultdict\ndef max_aggregate(stdata):\n    \"\"\"Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])"
        ],
        "draft_plan": [
            "# Sort the list of tuples in descending order based on the second element\n\n# Initialize the maximum aggregate to 0\n\n# Iterate through each tuple in the sorted list\n    # Calculate the current aggregate by adding the second element of the tuple to the maximum aggregate\n    # Update the maximum aggregate if the current aggregate is greater\n\n# Return the maximum aggregate"
        ]
    },
    {
        "id": "mbpp_py/300",
        "prompt": "def count_binary_seq(n): \n    \"\"\"Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"",
        "solution": "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res ",
        "test": [
            "assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)",
            "assert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)",
            "assert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)"
        ],
        "code": [
            "def count_binary_seq(n): \n    \"\"\"Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res "
        ],
        "draft_plan": [
            "# Define a recursive function count_sequences with parameters n (length of the binary sequence), \n# curr_sum (current sum of the bits), and total_sum (the target sum of both halves)\n\n    # Base case: if n is 0, check if the current sum is equal to the target sum\n        # If so, return 1 (valid sequence)\n        # Otherwise, return 0 (invalid sequence)\n    \n    # Recursive case:\n        # Initialize a variable count to 0 (to keep track of the count of valid sequences)\n        \n        # Call the count_sequences function recursively with n-1, curr_sum+1, and total_sum\n        # Add the return value to count\n        \n        # Call the count_sequences function recursively with n-1, curr_sum-1, and total_sum\n        # Add the return value to count\n        \n        # Return the total count\n    \n# Call the count_sequences function with n as the length of the binary sequence, curr_sum as 0, and total_sum as 0 to get the count of valid sequences"
        ]
    },
    {
        "id": "mbpp_py/301",
        "prompt": "def dict_depth(d):\n    \"\"\"Write a function to find the depth of a dictionary.\n    \"\"\"",
        "solution": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0",
        "test": [
            "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
            "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
            "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
        ],
        "code": [
            "def dict_depth(d):\n    \"\"\"Write a function to find the depth of a dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0"
        ],
        "draft_plan": [
            "# Initialize the depth to 1\n\n# Iterate through each key-value pair in the dictionary\n    # Check if the value is a dictionary\n        # If it is, recursively find the depth of the nested dictionary and increment it by 1\n\n# Return the maximum depth"
        ]
    },
    {
        "id": "mbpp_py/304",
        "prompt": "def find_Element(arr,ranges,rotations,index) :  \n    \"\"\"Write a python function to find element at a given index after number of rotations.\n    \"\"\"",
        "solution": "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] ",
        "test": [
            "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
            "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
            "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
        ],
        "code": [
            "def find_Element(arr,ranges,rotations,index) :  \n    \"\"\"Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] "
        ],
        "draft_plan": [
            "# Calculate the effective rotations by taking the remainder of the given rotations divided by the length of the array\n\n# Return the element at the given index after applying the effective rotations\n"
        ]
    },
    {
        "id": "mbpp_py/305",
        "prompt": "import re\ndef start_withp(words):\n    \"\"\"Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"",
        "solution": "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()",
        "test": [
            "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
            "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
            "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
        ],
        "code": [
            "import re\ndef start_withp(words):\n    \"\"\"Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()"
        ],
        "draft_plan": [
            "# Initialize an empty list to store the words starting with 'p'\n\n# Iterate through each word in the list\n    # Check if the first letter of the word is 'p'\n        # If yes, append the word to the list\n\n# Check if the list has at least two words\n    # If yes, return the first two words from the list\n    # If no, return None or an appropriate message"
        ]
    },
    {
        "id": "mbpp_py/306",
        "prompt": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    \"\"\"",
        "solution": "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]",
        "test": [
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
            "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
        ],
        "code": [
            "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    \"\"\"\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]"
        ],
        "draft_plan": [
            "# Initialize a list to store the maximum sum of increasing subsequences for each index\n# Initialize the maximum sum to be 0\n\n# Iterate through each index i in the given list\n    # Initialize a variable to store the maximum sum of increasing subsequence until index i, including the kth element\n    # Iterate through each index k starting from i+1 to the end of the list\n        # Check if the element at index k is greater than the element at index i\n            # Update the maximum sum of increasing subsequence until index i, including the kth element\n    # Update the maximum sum if the maximum sum of increasing subsequence until index i, including the kth element, is greater than the current maximum sum\n\n# Return the maximum sum"
        ]
    },
    {
        "id": "mbpp_py/307",
        "prompt": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    \"\"\"Write a function to get a colon of a tuple.\n    \"\"\"",
        "solution": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon",
        "test": [
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
        ],
        "code": [
            "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    \"\"\"Write a function to get a colon of a tuple.\n    \"\"\"\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon"
        ],
        "draft_plan": [
            "To get a colon of a tuple, we can use tuple slicing. Here is the code logic:\n\n# Define a function that takes a tuple as input\ndef get_colon(tup):\n    # Use tuple slicing to get the colon\n    colon = tup[1]\n    return colon\n\n# Test the function\ntuple_example = (1, 2, 3, 4, 5)\nresult = get_colon(tuple_example)\nprint(result)  # Output: 2"
        ]
    },
    {
        "id": "mbpp_py/308",
        "prompt": "def large_product(nums1, nums2, N):\n    \"\"\"Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"",
        "solution": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result",
        "test": [
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
        ],
        "code": [
            "def large_product(nums1, nums2, N):\n    \"\"\"Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result"
        ],
        "draft_plan": [
            "# Create an empty list to store the products\n\n# Iterate through each element in the first list\n    # Iterate through each element in the second list\n        # Calculate the product of the current elements from both lists\n        # Append the product to the list of products\n\n# Sort the list of products in descending order\n\n# Return the specified number of largest products from the list"
        ]
    },
    {
        "id": "mbpp_py/309",
        "prompt": "def maximum(a,b):   \n    \"\"\"Write a python function to find the maximum of two numbers.\n    \"\"\"",
        "solution": "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b ",
        "test": [
            "assert maximum(5,10) == 10",
            "assert maximum(-1,-2) == -1",
            "assert maximum(9,7) == 9"
        ],
        "code": [
            "def maximum(a,b):   \n    \"\"\"Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b: \n        return a \n    else: \n        return b "
        ],
        "draft_plan": [
            "# Define a function that takes two numbers as input\n\n# Check if the first number is greater than the second number\n    # If it is, return the first number as the maximum\n    # Otherwise, return the second number as the maximum"
        ]
    },
    {
        "id": "mbpp_py/310",
        "prompt": "def string_to_tuple(str1):\n    \"\"\"Write a function to convert a given string to a tuple of characters.\n    \"\"\"",
        "solution": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result",
        "test": [
            "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
            "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
            "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
        ],
        "code": [
            "def string_to_tuple(str1):\n    \"\"\"Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result"
        ],
        "draft_plan": [
            "# Initialize an empty tuple\n\n# Iterate through each character in the input string\n    # Append the character to the tuple\n\n# Return the tuple"
        ]
    },
    {
        "id": "mbpp_py/311",
        "prompt": "def set_left_most_unset_bit(n): \n    \"\"\"Write a python function to set the left most unset bit.\n    \"\"\"",
        "solution": "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) ",
        "test": [
            "assert set_left_most_unset_bit(10) == 14",
            "assert set_left_most_unset_bit(12) == 14",
            "assert set_left_most_unset_bit(15) == 15"
        ],
        "code": [
            "def set_left_most_unset_bit(n): \n    \"\"\"Write a python function to set the left most unset bit.\n    \"\"\"\n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) "
        ],
        "draft_plan": [
            "To find the leftmost unset bit in a given number, we can use the bitwise operators in Python. Here is the code logic:\n\n1. Create a function `leftmost_unset_bit(num)` that takes a number as input.\n\n2. Initialize a variable `position` as 1, which represents the position of the leftmost bit (starting from 1 for the least significant bit).\n\n3. Iterate through each bit position from right to left using a while loop:\n     - Check if the bit is unset (0) using the bitwise AND operation of the number and a mask (1 << position).\n     - If the bit is unset, return the current position.\n     - If the bit is set (1), increment the position by 1.\n\n4. If no unset bit is found after the loop, return -1 to indicate that no unset bit is present in the number.\n\nHere is the code implementation for the above logic:\n\n```python\ndef leftmost_unset_bit(num):\n    position = 1\n    while num:\n        if not (num & (1 << position)):\n            return position\n        position += 1\n    return -1\n```\n\nYou can then call the `leftmost_unset_bit()` function with a number as input to find the position of the leftmost unset bit."
        ]
    },
    {
        "id": "mbpp_py/312",
        "prompt": "import math\ndef volume_cone(r,h):\n    \"\"\"Write a function to find the volume of a cone.\n    \"\"\"",
        "solution": "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume",
        "test": [
            "assert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)",
            "assert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)",
            "assert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)"
        ],
        "code": [
            "import math\ndef volume_cone(r,h):\n    \"\"\"Write a function to find the volume of a cone.\n    \"\"\"\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume"
        ],
        "draft_plan": [
            "# Define a function to calculate the volume of a cone\n    # Accept the radius and height of the cone as input parameters\n    # Calculate the volume using the formula V = (1/3) * \u03c0 * r^2 * h\n    # Return the calculated volume\n\n# Test the function by calling it with appropriate values for radius and height"
        ]
    },
    {
        "id": "mbpp_py/388",
        "prompt": "def highest_Power_of_2(n): \n    \"\"\"Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"",
        "solution": "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res ",
        "test": [
            "assert highest_Power_of_2(10) == 8",
            "assert highest_Power_of_2(19) == 16",
            "assert highest_Power_of_2(32) == 32"
        ],
        "code": [
            "def highest_Power_of_2(n): \n    \"\"\"Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res "
        ],
        "draft_plan": [
            "# Initialize the highest power of 2 to 1\n\n# While the highest power of 2 is less than or equal to n\n    # Multiply the highest power of 2 by 2\n\n# Divide the highest power of 2 by 2 to get the result"
        ]
    },
    {
        "id": "mbpp_py/389",
        "prompt": "def find_lucas(n): \n    \"\"\"Write a function to find the n'th lucas number.\n    \"\"\"",
        "solution": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ",
        "test": [
            "assert find_lucas(9) == 76",
            "assert find_lucas(4) == 7",
            "assert find_lucas(3) == 4"
        ],
        "code": [
            "def find_lucas(n): \n    \"\"\"Write a function to find the n'th lucas number.\n    \"\"\"\n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) "
        ],
        "draft_plan": [
            "# Define a function to find the n-th Lucas number\ndef lucas_number(n):\n    # Base cases for n = 0 and n = 1\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Lucas numbers\n    lucas_0 = 2\n    lucas_1 = 1\n    \n    # Iterate from 2 to n\n    for i in range(2, n+1):\n        # Calculate the current Lucas number using the formula L(n) = L(n-1) + L(n-2)\n        lucas_n = lucas_0 + lucas_1\n        \n        # Update the values of previous Lucas numbers for the next iteration\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    \n    # Return the n-th Lucas number\n    return lucas_n"
        ]
    },
    {
        "id": "mbpp_py/390",
        "prompt": "def add_string(list_, string):\n    \"\"\"Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"",
        "solution": "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string",
        "test": [
            "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
            "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
            "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
        ],
        "code": [
            "def add_string(list_, string):\n    \"\"\"Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n add_string=[string.format(i) for i in  list_]\n return add_string"
        ],
        "draft_plan": [
            "# Define a function that takes a format string and a list of elements as input\n\n# Create an empty list to store the formatted elements\n\n# Iterate through each element in the input list\n    # Apply the format string to the current element using the format() function\n    # Append the formatted element to the new list\n\n# Return the new list with all the formatted elements"
        ]
    },
    {
        "id": "mbpp_py/391",
        "prompt": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"Write a function to convert more than one list to nested dictionary.\n    \"\"\"",
        "solution": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result",
        "test": [
            "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
            "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
            "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
        ],
        "code": [
            "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result"
        ],
        "draft_plan": [
            "# Initialize an empty dictionary\n\n# Iterate through each list in the input lists\n    # Get the first element of the list as the key for the nested dictionary\n    # Get the remaining elements of the list as the values for the nested dictionary\n    # Create a nested dictionary using the key and values\n\n# Return the nested dictionary"
        ]
    },
    {
        "id": "mbpp_py/392",
        "prompt": "def get_max_sum (n):\n    \"\"\"Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"",
        "solution": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]",
        "test": [
            "assert get_max_sum(60) == 106",
            "assert get_max_sum(10) == 12",
            "assert get_max_sum(2) == 2"
        ],
        "code": [
            "def get_max_sum (n):\n    \"\"\"Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]"
        ],
        "draft_plan": [
            "# Create a dictionary to store the maximum sum for each number\n# Set the base cases for f(0) and f(1) as 0 and 1 respectively\n\n# Define a recursive function to calculate the maximum sum for a given number\n    # Check if the maximum sum for the current number has already been calculated\n        # If yes, return the stored value\n        # If no, calculate the maximum sum using the given equation\n\n# Call the recursive function to calculate the maximum sum for the given number"
        ]
    },
    {
        "id": "mbpp_py/393",
        "prompt": "def max_length_list(input_list):\n    \"\"\"Write a function to find the list with maximum length.\n    \"\"\"",
        "solution": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)",
        "test": [
            "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
            "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
        ],
        "code": [
            "def max_length_list(input_list):\n    \"\"\"Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)"
        ],
        "draft_plan": [
            "# Initialize the maximum length and the list with maximum length to empty values\n\n# Iterate through each list in the input list of lists\n    # Check if the length of the current list is greater than the maximum length\n        # If so, update the maximum length and the list with maximum length\n\n# Return the list with maximum length"
        ]
    },
    {
        "id": "mbpp_py/394",
        "prompt": "def check_distinct(test_tup):\n    \"\"\"Write a function to check if given tuple contains no duplicates.\n    \"\"\"",
        "solution": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res ",
        "test": [
            "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
            "assert check_distinct((1, 4, 5, 6)) == True",
            "assert check_distinct((2, 3, 4, 5, 6)) == True"
        ],
        "code": [
            "def check_distinct(test_tup):\n    \"\"\"Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res "
        ],
        "draft_plan": [
            "# Convert the tuple to a set\n# Check if the length of the set is equal to the length of the tuple\n    # If they are equal, it means there are no duplicates\n    # Otherwise, there are duplicates"
        ]
    },
    {
        "id": "mbpp_py/395",
        "prompt": "def first_non_repeating_character(str1):\n    \"\"\"Write a python function to find the first non-repeated character in a given string.\n    \"\"\"",
        "solution": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None",
        "test": [
            "assert first_non_repeating_character(\"abcabc\") == None",
            "assert first_non_repeating_character(\"abc\") == \"a\"",
            "assert first_non_repeating_character(\"ababc\") == \"c\""
        ],
        "code": [
            "def first_non_repeating_character(str1):\n    \"\"\"Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None"
        ],
        "draft_plan": [
            "# Create an empty dictionary to store the count of each character\n# Iterate through each character in the given string\n    # If the character is already in the dictionary, increase its count by 1\n    # If the character is not in the dictionary, add it with a count of 1\n\n# Iterate through each character in the given string again\n    # Check if the count of the current character in the dictionary is 1\n        # If it is, return the current character as the first non-repeated character\n\n# If no non-repeated character is found, return \"None\""
        ]
    },
    {
        "id": "mbpp_py/396",
        "prompt": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    \"\"\"Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"",
        "solution": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ",
        "test": [
            "assert check_char(\"abba\") == \"Valid\"",
            "assert check_char(\"a\") == \"Valid\"",
            "assert check_char(\"abcd\") == \"Invalid\""
        ],
        "code": [
            "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    \"\"\"Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" "
        ],
        "draft_plan": [
            "# Check if the first character of the string is equal to the last character\n    # If they are equal, return True\n    # If they are not equal, return False"
        ]
    },
    {
        "id": "mbpp_py/397",
        "prompt": "def median_numbers(a,b,c):\n    \"\"\"Write a function to find the median of three numbers.\n    \"\"\"",
        "solution": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median",
        "test": [
            "assert median_numbers(25,55,65)==55.0",
            "assert median_numbers(20,10,30)==20.0",
            "assert median_numbers(15,45,75)==45.0"
        ],
        "code": [
            "def median_numbers(a,b,c):\n    \"\"\"Write a function to find the median of three numbers.\n    \"\"\"\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median"
        ],
        "draft_plan": [
            "# Sort the three numbers in ascending order\n\n# If the middle number is an integer, return it as the median\n# Otherwise, calculate the average of the two middle numbers and return it as the median"
        ]
    },
    {
        "id": "mbpp_py/398",
        "prompt": "def sum_of_digits(nums):\n    \"\"\"Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"",
        "solution": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
        "test": [
            "assert sum_of_digits([10,2,56])==14",
            "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
            "assert sum_of_digits([10,20,-4,5,-70])==19"
        ],
        "code": [
            "def sum_of_digits(nums):\n    \"\"\"Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"
        ],
        "draft_plan": [
            "# Initialize an empty list to store the sum of digits for each number\n\n# Iterate through each number in the given list\n    # Convert the number to a string\n    # Initialize a variable to store the sum of digits\n    # Iterate through each digit in the string representation of the number\n        # Convert the digit back to an integer and add it to the sum of digits\n    # Append the sum of digits to the list\n\n# Return the list of sum of digits for each number"
        ]
    },
    {
        "id": "mbpp_py/399",
        "prompt": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"",
        "solution": "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "test": [
            "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
            "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
            "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
        ],
        "code": [
            "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) "
        ],
        "draft_plan": [
            "# Initialize an empty list to store the result of bitwise XOR operation on each tuple\n\n# Iterate through each tuple in the input list\n    # Initialize a variable to store the result of XOR operation\n    # Iterate through each element in the tuple\n        # Perform bitwise XOR operation with the current element and the result variable\n    # Append the result of XOR operation to the result list\n\n# Return the result list"
        ]
    },
    {
        "id": "mbpp_py/400",
        "prompt": "def extract_freq(test_list):\n    \"\"\"Write a function to extract the number of unique tuples in the given list.\n    \"\"\"",
        "solution": "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)",
        "test": [
            "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
            "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
            "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
        ],
        "code": [
            "def extract_freq(test_list):\n    \"\"\"Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)"
        ],
        "draft_plan": [
            "# Create an empty set to store unique tuples\n\n# Iterate through each tuple in the given list\n    # Convert the tuple to a frozenset and add it to the set of unique tuples\n\n# Return the length of the set of unique tuples"
        ]
    },
    {
        "id": "mbpp_py/401",
        "prompt": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"",
        "solution": "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "test": [
            "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
            "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
            "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
        ],
        "code": [
            "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) "
        ],
        "draft_plan": [
            "# Create an empty result tuple\n\n# Iterate through the nested tuples, getting each inner tuple\n    # Iterate through the inner tuples, getting each element and its index\n        # Check if the index is within the range of the result tuple\n            # If it is, add the element at the corresponding index to the current element\n            # Create a new tuple with the updated element and append it to the result tuple\n        # If the index is not within the range of the result tuple\n            # Create a new tuple with only the current element and append it to the result tuple\n\n# Return the result tuple"
        ]
    },
    {
        "id": "mbpp_py/404",
        "prompt": "def minimum(a,b):   \n    \"\"\"Write a python function to find the minimum of two numbers.\n    \"\"\"",
        "solution": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ",
        "test": [
            "assert minimum(1,2) == 1",
            "assert minimum(-5,-4) == -5",
            "assert minimum(0,0) == 0"
        ],
        "code": [
            "def minimum(a,b):   \n    \"\"\"Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a <= b: \n        return a \n    else: \n        return b "
        ],
        "draft_plan": [
            "# Define a function to find the minimum of two numbers\n    # Check if the first number is less than the second number\n        # If true, return the first number\n        # If false, return the second number\n\n# Call the function and pass two numbers as arguments"
        ]
    },
    {
        "id": "mbpp_py/405",
        "prompt": "def check_tuplex(tuplex,tuple1): \n    \"\"\"Write a function to check whether an element exists within a tuple.\n    \"\"\"",
        "solution": "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False",
        "test": [
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
        ],
        "code": [
            "def check_tuplex(tuplex,tuple1): \n    \"\"\"Write a function to check whether an element exists within a tuple.\n    \"\"\"\n  if tuple1 in tuplex:\n    return True\n  else:\n     return False"
        ],
        "draft_plan": [
            "# Iterate through each element in the tuple\n    # Check if the current element is equal to the target element\n        # If the element is found, return True\n\n# If the element is not found, return False"
        ]
    },
    {
        "id": "mbpp_py/406",
        "prompt": "def find_Parity(x): \n    \"\"\"Write a python function to find whether the parity of a given number is odd.\n    \"\"\"",
        "solution": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False",
        "test": [
            "assert find_Parity(12) == False",
            "assert find_Parity(7) == True",
            "assert find_Parity(10) == False"
        ],
        "code": [
            "def find_Parity(x): \n    \"\"\"Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False"
        ],
        "draft_plan": [
            "# Check if the number modulo 2 is equal to 1\n    # If the modulo is 1, the number is odd\n    # Return True\n\n# If the modulo is not 1, the number is even\n# Return False"
        ]
    },
    {
        "id": "mbpp_py/407",
        "prompt": "def rearrange_bigger(n):\n    \"\"\"Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"",
        "solution": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False",
        "test": [
            "assert rearrange_bigger(12)==21",
            "assert rearrange_bigger(10)==False",
            "assert rearrange_bigger(102)==120"
        ],
        "code": [
            "def rearrange_bigger(n):\n    \"\"\"Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False"
        ],
        "draft_plan": [
            "# Convert the given number to a list of digits\n\n# Find the first index (from right to left) where the digit is smaller than the digit to its right\n    # If no such index is found, return \"None\" since the number is already the largest possible\n\n# Find the smallest digit to the right of the found index that is larger than the digit at the found index\n\n# Swap the found digit with the smallest larger digit to its right\n\n# Sort the digits to the right of the found index in ascending order\n\n# Concatenate the digits to form the next bigger number\n\n# Return the next bigger number"
        ]
    },
    {
        "id": "mbpp_py/408",
        "prompt": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"",
        "solution": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs",
        "test": [
            "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
        ],
        "code": [
            "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs"
        ],
        "draft_plan": [
            "# Create an empty list to store the pairs\n\n# Sort both arrays in ascending order\n\n# Iterate through each element in the first array\n    # Iterate through each element in the second array\n        # Add the pair (first_array[i], second_array[j]) to the list of pairs\n\n# Sort the list of pairs based on the sum of the elements in each pair\n\n# Return the first k pairs from the sorted list"
        ]
    },
    {
        "id": "mbpp_py/409",
        "prompt": "def min_product_tuple(list1):\n    \"\"\"Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"",
        "solution": "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min",
        "test": [
            "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
            "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
            "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
        ],
        "code": [
            "def min_product_tuple(list1):\n    \"\"\"Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min"
        ],
        "draft_plan": [
            "# Initialize the minimum product to positive infinity\n\n# Iterate through each pair of tuples in the list\n    # Calculate the product of the two tuples\n    # Check if the product is less than the current minimum product\n        # If yes, update the minimum product\n\n# Return the minimum product"
        ]
    },
    {
        "id": "mbpp_py/410",
        "prompt": "def min_val(listval):\n    \"\"\"Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"",
        "solution": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val",
        "test": [
            "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
            "assert min_val(['Python', 15, 20, 25])==15",
            "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
        ],
        "code": [
            "def min_val(listval):\n    \"\"\"Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val"
        ],
        "draft_plan": [
            "# Initialize the minimum value to the first element in the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the minimum value\n        # If it is, update the minimum value\n\n# Return the minimum value"
        ]
    },
    {
        "id": "mbpp_py/411",
        "prompt": "import re\ndef snake_to_camel(word):\n    \"\"\"Write a function to convert the given snake case string to camel case string.\n    \"\"\"",
        "solution": "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "test": [
            "assert snake_to_camel('android_tv') == 'AndroidTv'",
            "assert snake_to_camel('google_pixel') == 'GooglePixel'",
            "assert snake_to_camel('apple_watch') == 'AppleWatch'"
        ],
        "code": [
            "import re\ndef snake_to_camel(word):\n    \"\"\"Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))"
        ],
        "draft_plan": [
            "# Split the snake case string into words based on the underscore\n# Initialize an empty camel case string\n\n# Iterate through each word in the snake case string\n    # Capitalize the first letter of each word except the first word\n    # Append the capitalized word to the camel case string\n\n# Return the camel case string"
        ]
    },
    {
        "id": "mbpp_py/412",
        "prompt": "def remove_odd(l):\n    \"\"\"Write a python function to remove odd numbers from a given list.\n    \"\"\"",
        "solution": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
        "test": [
            "assert remove_odd([1,2,3]) == [2]",
            "assert remove_odd([2,4,6]) == [2,4,6]",
            "assert remove_odd([10,20,3]) == [10,20]"
        ],
        "code": [
            "def remove_odd(l):\n    \"\"\"Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l"
        ],
        "draft_plan": [
            "# Create an empty list to store the even numbers\n\n# Iterate through each number in the given list\n    # Check if the number is even (number % 2 == 0)\n        # If the number is even, append it to the list of even numbers\n\n# Return the list of even numbers"
        ]
    },
    {
        "id": "mbpp_py/413",
        "prompt": "def extract_nth_element(list1, n):\n    \"\"\"Write a function to extract the nth element from a given list of tuples.\n    \"\"\"",
        "solution": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result",
        "test": [
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
        ],
        "code": [
            "def extract_nth_element(list1, n):\n    \"\"\"Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    result = [x[n] for x in list1]\n    return result"
        ],
        "draft_plan": [
            "# Initialize an empty list to store the nth element from each tuple\n\n# Iterate through each tuple in the given list\n    # Check if the tuple has at least n elements\n        # If yes, append the nth element to the result list\n\n# Return the result list"
        ]
    },
    {
        "id": "mbpp_py/414",
        "prompt": "def overlapping(list1,list2):  \n    \"\"\"Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"",
        "solution": "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False",
        "test": [
            "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
            "assert overlapping([1,2,3],[4,5,6]) == False",
            "assert overlapping([1,4,5],[1,4,5]) == True"
        ],
        "code": [
            "def overlapping(list1,list2):  \n    \"\"\"Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False"
        ],
        "draft_plan": [
            "# Iterate through each value in the first sequence\n    # Check if the value exists in the second sequence\n        # If the value exists, return True\n\n# If no matching value is found, return False"
        ]
    },
    {
        "id": "mbpp_py/415",
        "prompt": "def max_Product(arr): \n    \"\"\"Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"",
        "solution": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ",
        "test": [
            "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
            "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
            "assert max_Product([1,2,3]) == (2,3)"
        ],
        "code": [
            "def max_Product(arr): \n    \"\"\"Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    "
        ],
        "draft_plan": [
            "# Initialize the maximum product to -infinity\n\n# Iterate through each pair of numbers in the array\n    # Calculate the product of the current pair\n    # Update the maximum product if the current product is greater\n\n# Return the pair with the highest product"
        ]
    },
    {
        "id": "mbpp_py/417",
        "prompt": "def group_tuples(Input): \n    \"\"\"Write a function to find common first element in given list of tuple.\n    \"\"\"",
        "solution": "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] ",
        "test": [
            "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
            "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
            "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
        ],
        "code": [
            "def group_tuples(Input): \n    \"\"\"Write a function to find common first element in given list of tuple.\n    \"\"\"\n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] "
        ],
        "draft_plan": [
            "# Initialize a set to store the first elements of the tuples\n# Initialize a variable to store the common first element, initially None\n\n# Iterate through each tuple in the list\n    # Check if the first element of the tuple is already in the set\n        # If it is, set the common first element to the current element\n        # Break the loop as we have found the common first element\n    # If the first element is not in the set, add it to the set\n\n# Return the common first element"
        ]
    },
    {
        "id": "mbpp_py/418",
        "prompt": "def Find_Max(lst): \n    \"\"\"Write a python function to find the element of a list having maximum length.\n    \"\"\"",
        "solution": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList",
        "test": [
            "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
            "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
            "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
        ],
        "code": [
            "def Find_Max(lst): \n    \"\"\"Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    maxList = max((x) for x in lst) \n    return maxList"
        ],
        "draft_plan": [
            "# Initialize a variable to store the index of the element with maximum length\n# Initialize a variable to store the maximum length, initially set to 0\n\n# Iterate through each element in the list\n    # Check if the length of the current element is greater than the maximum length\n        # If so, update the maximum length and the index of the element\n\n# Return the element at the index with maximum length"
        ]
    },
    {
        "id": "mbpp_py/419",
        "prompt": "def round_and_sum(list1):\n    \"\"\"Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    \"\"\"",
        "solution": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum",
        "test": [
            "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
            "assert round_and_sum([5,2,9,24.3,29])==345",
            "assert round_and_sum([25.0,56.7,89.2])==513"
        ],
        "code": [
            "def round_and_sum(list1):\n    \"\"\"Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    \"\"\"\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum"
        ],
        "draft_plan": [
            "# Initialize a variable to store the total sum\n# Iterate through each number in the list\n    # Round the number to the nearest integer\n    # Add the rounded number to the total sum\n\n# Calculate the total sum multiplied by the length of the list\n# Print the result"
        ]
    },
    {
        "id": "mbpp_py/420",
        "prompt": "def cube_Sum(n): \n    \"\"\"Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"",
        "solution": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
        "test": [
            "assert cube_Sum(2) == 72",
            "assert cube_Sum(3) == 288",
            "assert cube_Sum(4) == 800"
        ],
        "code": [
            "def cube_Sum(n): \n    \"\"\"Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum"
        ],
        "draft_plan": [
            "# Initialize a variable to store the sum of the cube of even numbers\n# Iterate through each even number from 2 to (2*n) with a step size of 2\n    # Calculate the cube of the current even number\n    # Add the cube to the sum\n\n# Return the sum of the cube of even numbers"
        ]
    },
    {
        "id": "mbpp_py/421",
        "prompt": "def concatenate_tuple(test_tup):\n    \"\"\"Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"",
        "solution": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ",
        "test": [
            "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
            "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
            "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
        ],
        "code": [
            "def concatenate_tuple(test_tup):\n    \"\"\"Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) "
        ],
        "draft_plan": [
            "# Initialize an empty string to store the concatenated elements\n\n# Iterate through each tuple in the input list\n    # Iterate through each element in the tuple\n        # Concatenate the element to the output string\n        # If the current element is not the last element in the tuple, append the delimiter\n\n# Return the concatenated string"
        ]
    },
    {
        "id": "mbpp_py/422",
        "prompt": "def find_Average_Of_Cube(n):  \n    \"\"\"Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"",
        "solution": "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) ",
        "test": [
            "assert find_Average_Of_Cube(2) == 4.5",
            "assert find_Average_Of_Cube(3) == 12",
            "assert find_Average_Of_Cube(1) == 1"
        ],
        "code": [
            "def find_Average_Of_Cube(n):  \n    \"\"\"Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) "
        ],
        "draft_plan": [
            "# Define a function to find the average of cubes of first n natural numbers\ndef average_of_cubes(n):\n    # Initialize sum of cubes to 0\n    sum_of_cubes = 0\n    \n    # Iterate through the range of 1 to n+1\n    for i in range(1, n+1):\n        # Calculate the cube of the current number and add it to the sum_of_cubes\n        sum_of_cubes += i**3\n    \n    # Calculate the average by dividing the sum_of_cubes by n\n    average = sum_of_cubes / n\n    \n    # Return the average\n    return average"
        ]
    },
    {
        "id": "mbpp_py/424",
        "prompt": "def extract_rear(test_tuple):\n    \"\"\"Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"",
        "solution": "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) ",
        "test": [
            "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
            "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
            "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
        ],
        "code": [
            "def extract_rear(test_tuple):\n    \"\"\"Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) "
        ],
        "draft_plan": [
            "# Create an empty list to store the rear index elements\n# Iterate through each string in the given tuple\n    # Get the rear index element of the current string using indexing\n    # Append the rear index element to the list\n\n# Return the list of rear index elements"
        ]
    },
    {
        "id": "mbpp_py/425",
        "prompt": "def count_element_in_list(list1, x): \n    \"\"\"Write a function to count the number of sublists containing a particular element.\n    \"\"\"",
        "solution": "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr",
        "test": [
            "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
            "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
            "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
        ],
        "code": [
            "def count_element_in_list(list1, x): \n    \"\"\"Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr"
        ],
        "draft_plan": [
            "# Initialize a count variable to 0\n\n# Iterate through each sublist in the main list\n    # Check if the particular element is present in the sublist\n        # If yes, increment the count variable\n\n# Return the count variable"
        ]
    },
    {
        "id": "mbpp_py/426",
        "prompt": "def filter_oddnumbers(nums):\n    \"\"\"Write a function to filter odd numbers.\n    \"\"\"",
        "solution": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums",
        "test": [
            "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
            "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
            "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
        ],
        "code": [
            "def filter_oddnumbers(nums):\n    \"\"\"Write a function to filter odd numbers.\n    \"\"\"\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums"
        ],
        "draft_plan": [
            "# Initialize an empty list to store the filtered numbers\n\n# Iterate through each number in the input list\n    # Check if the number is odd\n        # If the number is odd, append it to the filtered list\n\n# Return the filtered list"
        ]
    },
    {
        "id": "mbpp_py/427",
        "prompt": "import re\ndef change_date_format(dt):\n    \"\"\"Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"",
        "solution": "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)",
        "test": [
            "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
            "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
            "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
        ],
        "code": [
            "import re\ndef change_date_format(dt):\n    \"\"\"Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"
        ],
        "draft_plan": [
            "# Split the input date string by '-' to get year, month, and day\n# Create a new date string in the format of dd-mm-yyyy using day, month, and year obtained from the split\n# Return the new date string"
        ]
    },
    {
        "id": "mbpp_py/428",
        "prompt": "def shell_sort(my_list):\n    \"\"\"Write a function to sort the given array by using shell sort.\n    \"\"\"",
        "solution": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list",
        "test": [
            "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
            "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
            "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
        ],
        "code": [
            "def shell_sort(my_list):\n    \"\"\"Write a function to sort the given array by using shell sort.\n    \"\"\"\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list"
        ],
        "draft_plan": [
            "# Define a function to perform shell sort on the given array\n    # Start with a large gap (length of array divided by 2)\n    # Iterate until the gap becomes 0\n        # Iterate through the array from the current gap to the end\n            # Compare the current element with the element at the position gap steps before it\n            # If the current element is smaller, swap them\n        # Reduce the gap by dividing it by 2\n\n# Call the shell sort function on the given array\n# Return the sorted array"
        ]
    },
    {
        "id": "mbpp_py/429",
        "prompt": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"",
        "solution": "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "test": [
            "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
            "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
            "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
        ],
        "code": [
            "def and_tuples(test_tup1, test_tup2):\n    \"\"\"Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) "
        ],
        "draft_plan": [
            "# Initialize an empty list to store the elementwise AND tuples\n\n# Iterate through each element in the first tuple\n    # Iterate through each element in the second tuple\n        # Perform elementwise AND operation on the corresponding elements of the tuples\n        # Append the result to the list of elementwise AND tuples\n\n# Return the list of elementwise AND tuples"
        ]
    },
    {
        "id": "mbpp_py/430",
        "prompt": "def parabola_directrix(a, b, c): \n    \"\"\"Write a function to find the directrix of a parabola.\n    \"\"\"",
        "solution": "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix",
        "test": [
            "assert parabola_directrix(5,3,2)==-198",
            "assert parabola_directrix(9,8,4)==-2336",
            "assert parabola_directrix(2,4,6)==-130"
        ],
        "code": [
            "def parabola_directrix(a, b, c): \n    \"\"\"Write a function to find the directrix of a parabola.\n    \"\"\"\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix"
        ],
        "draft_plan": [
            "To find the directrix of a parabola, we can use the equation of a parabola in vertex form:\n\ny = (1 / (4 * p)) * (x - h)^2 + k\n\nwhere (h, k) is the vertex of the parabola and p is the distance from the vertex to the focus.\n\nThe directrix of the parabola is a horizontal line given by the equation:\n\ny = k - p\n\nTherefore, the logic to find the directrix of a parabola is as follows:\n\n1. Given the vertex coordinates (h, k) and the value of p, calculate the value of the directrix using the equation y = k - p.\n\n2. Return the value of the directrix.\n\nHere is the code implementation:\n\n```python\ndef find_directrix(h, k, p):\n    directrix = k - p\n    return directrix\n```\n\nYou can call this function with the vertex coordinates (h, k) and the value of p to find the directrix of the parabola."
        ]
    },
    {
        "id": "mbpp_py/431",
        "prompt": "def common_element(list1, list2):\n    \"\"\"Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"",
        "solution": "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result",
        "test": [
            "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
            "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
            "assert common_element(['a','b','c'], ['d','b','e'])==True"
        ],
        "code": [
            "def common_element(list1, list2):\n    \"\"\"Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result"
        ],
        "draft_plan": [
            "# Iterate through each element in the first list\n    # Check if the current element is in the second list\n        # If found, return True\n\n# If no common element is found, return False"
        ]
    },
    {
        "id": "mbpp_py/432",
        "prompt": "def median_trapezium(base1,base2,height):\n    \"\"\"Write a function to find the median length of a trapezium.\n    \"\"\"",
        "solution": "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median",
        "test": [
            "assert median_trapezium(15,25,35)==20",
            "assert median_trapezium(10,20,30)==15",
            "assert median_trapezium(6,9,4)==7.5"
        ],
        "code": [
            "def median_trapezium(base1,base2,height):\n    \"\"\"Write a function to find the median length of a trapezium.\n    \"\"\"\n median = 0.5 * (base1+ base2)\n return median"
        ],
        "draft_plan": [
            "# Define a function to calculate the median length of a trapezium\n    # Calculate the sum of the lengths of the two parallel sides of the trapezium\n    # Divide the sum by 2 to get the average length\n    # Return the average length as the median length of the trapezium"
        ]
    },
    {
        "id": "mbpp_py/433",
        "prompt": "def check_greater(arr, number):\n    \"\"\"Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"",
        "solution": "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]",
        "test": [
            "assert check_greater([1, 2, 3, 4, 5], 4) == False",
            "assert check_greater([2, 3, 4, 5, 6], 8) == True",
            "assert check_greater([9, 7, 4, 8, 6, 1], 11) == True"
        ],
        "code": [
            "def check_greater(arr, number):\n    \"\"\"Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n  arr.sort()\n  return number > arr[-1]"
        ],
        "draft_plan": [
            "# Define a function that takes a number and an array as input\n    # Iterate through each element in the array\n        # Check if the number is greater than the current element\n            # If it is, return True\n    # If the number is not greater than any element in the array, return False"
        ]
    },
    {
        "id": "mbpp_py/434",
        "prompt": "import re\ndef text_match_one(text):\n    \"\"\"Write a function that matches a string that has an a followed by one or more b's.\n    \"\"\"",
        "solution": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n",
        "test": [
            "assert text_match_one(\"ac\")==False",
            "assert text_match_one(\"dc\")==False",
            "assert text_match_one(\"abba\")==True"
        ],
        "code": [
            "import re\ndef text_match_one(text):\n    \"\"\"Write a function that matches a string that has an a followed by one or more b's.\n    \"\"\"\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n"
        ],
        "draft_plan": [
            "import re\n\ndef match_string(string):\n    pattern = r'a+b+'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False"
        ]
    },
    {
        "id": "mbpp_py/435",
        "prompt": "def last_Digit(n) :\n    \"\"\"Write a python function to find the last digit of a given number.\n    \"\"\"",
        "solution": "def last_Digit(n) :\n    return (n % 10) ",
        "test": [
            "assert last_Digit(123) == 3",
            "assert last_Digit(25) == 5",
            "assert last_Digit(30) == 0"
        ],
        "code": [
            "def last_Digit(n) :\n    \"\"\"Write a python function to find the last digit of a given number.\n    \"\"\"\n    return (n % 10) "
        ],
        "draft_plan": [
            "To find the last digit of a given number, you can use the modulo operator (`%`) to get the remainder when dividing the number by 10. The remainder will be the last digit of the number.\n\nHere's the code logic:\n\n1. Define a function `find_last_digit` that takes a number as input.\n2. Inside the function, calculate the remainder of the number when divided by 10 using the modulo operator: `last_digit = number % 10`.\n3. Return the value of `last_digit`.\n\nHere's the code implementation in Python:\n\n```python\ndef find_last_digit(number):\n    last_digit = number % 10\n    return last_digit\n```\n\nYou can then call this function by passing a number as an argument to get the last digit. For example:\n\n```python\nprint(find_last_digit(12345))  # Output: 5\nprint(find_last_digit(987654321))  # Output: 1\nprint(find_last_digit(0))  # Output: 0\n```"
        ]
    },
    {
        "id": "mbpp_py/436",
        "prompt": "def neg_nos(list1):\n    \"\"\"Write a python function to return the negative numbers in a list.\n    \"\"\"",
        "solution": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ",
        "test": [
            "assert neg_nos([-1,4,5,-6]) == [-1,-6]",
            "assert neg_nos([-1,-2,3,4]) == [-1,-2]",
            "assert neg_nos([-7,-6,8,9]) == [-7,-6]"
        ],
        "code": [
            "def neg_nos(list1):\n    \"\"\"Write a python function to return the negative numbers in a list.\n    \"\"\"\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out "
        ],
        "draft_plan": [
            "# Initialize an empty list to store the negative numbers\n\n# Iterate through each element in the input list\n    # Check if the current element is less than 0\n        # If the element is negative, append it to the list of negative numbers\n\n# Return the list of negative numbers"
        ]
    },
    {
        "id": "mbpp_py/437",
        "prompt": "def remove_odd(str1):\n    \"\"\"Write a function to remove odd characters in a string.\n    \"\"\"",
        "solution": "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2",
        "test": [
            "assert remove_odd(\"python\")==(\"yhn\")",
            "assert remove_odd(\"program\")==(\"rga\")",
            "assert remove_odd(\"language\")==(\"agae\")"
        ],
        "code": [
            "def remove_odd(str1):\n    \"\"\"Write a function to remove odd characters in a string.\n    \"\"\"\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2"
        ],
        "draft_plan": [
            "# Initialize an empty string to store the result\n\n# Iterate through each character in the input string\n    # Check if the index of the current character is even\n        # If the index is even, append the character to the result string\n\n# Return the result string"
        ]
    },
    {
        "id": "mbpp_py/438",
        "prompt": "def count_bidirectional(test_list):\n    \"\"\"Write a function to count bidirectional tuple pairs.\n    \"\"\"",
        "solution": "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res",
        "test": [
            "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3",
            "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2",
            "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4"
        ],
        "code": [
            "def count_bidirectional(test_list):\n    \"\"\"Write a function to count bidirectional tuple pairs.\n    \"\"\"\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res"
        ],
        "draft_plan": [
            "# Initialize a counter variable to 0\n\n# Iterate through each pair in the array\n    # Check if the reverse of the current pair exists in the array\n        # If it does, increment the counter by 1\n\n# Return the counter value"
        ]
    },
    {
        "id": "mbpp_py/439",
        "prompt": "def multiple_to_single(L):\n    \"\"\"Write a function to join a list of multiple integers into a single integer.\n    \"\"\"",
        "solution": "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x",
        "test": [
            "assert multiple_to_single([11, 33, 50])==113350",
            "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
            "assert multiple_to_single([10,15,20,25])==10152025"
        ],
        "code": [
            "def multiple_to_single(L):\n    \"\"\"Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n  x = int(\"\".join(map(str, L)))\n  return x"
        ],
        "draft_plan": [
            "# Convert each integer in the list to a string\n# Join the list of strings into a single string\n# Convert the resulting string back to an integer and return it"
        ]
    },
    {
        "id": "mbpp_py/440",
        "prompt": "import re\ndef find_adverb_position(text):\n    \"\"\"Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"",
        "solution": "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))",
        "test": [
            "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
            "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
            "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
        ],
        "code": [
            "import re\ndef find_adverb_position(text):\n    \"\"\"Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))"
        ],
        "draft_plan": [
            "# Split the sentence into a list of words\n\n# Iterate through each word and its index in the list\n    # Check if the word ends with \"ly\" (indicating it is an adverb)\n        # If it is an adverb, store its index and break the loop\n\n# If an adverb is found, return its index and the adverb itself\n# If no adverb is found, return None"
        ]
    },
    {
        "id": "mbpp_py/441",
        "prompt": "def surfacearea_cube(l):\n    \"\"\"Write a function to find the surface area of a cube of a given size.\n    \"\"\"",
        "solution": "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea",
        "test": [
            "assert surfacearea_cube(5)==150",
            "assert surfacearea_cube(3)==54",
            "assert surfacearea_cube(10)==600"
        ],
        "code": [
            "def surfacearea_cube(l):\n    \"\"\"Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n  surfacearea= 6*l*l\n  return surfacearea"
        ],
        "draft_plan": [
            "To find the surface area of a cube, we can use the formula: surface_area = 6 * side_length^2\n\nHere is the code logic to find the surface area of a cube in Python:\n\n1. Define a function named `calculate_cube_surface_area` that takes a parameter `side_length`.\n2. Calculate the surface area using the formula `surface_area = 6 * side_length^2`.\n3. Return the calculated surface area.\n\nHere is the code implementation:\n\n```python\ndef calculate_cube_surface_area(side_length):\n    surface_area = 6 * side_length**2\n    return surface_area\n```\n\nYou can call this function with the desired `side_length` value to get the surface area of the cube."
        ]
    },
    {
        "id": "mbpp_py/442",
        "prompt": "from array import array\ndef positive_count(nums):\n    \"\"\"Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"",
        "solution": "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)",
        "test": [
            "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
            "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
            "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
        ],
        "code": [
            "from array import array\ndef positive_count(nums):\n    \"\"\"Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)"
        ],
        "draft_plan": [
            "# Initialize a counter for positive numbers\n# Iterate through each element in the array\n    # Check if the element is greater than 0\n        # If it is, increment the counter\n\n# Calculate the ratio of positive numbers by dividing the counter by the length of the array\n# Return the ratio"
        ]
    },
    {
        "id": "mbpp_py/443",
        "prompt": "def largest_neg(list1): \n    \"\"\"Write a python function to find the largest negative number from the given list.\n    \"\"\"",
        "solution": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
        "test": [
            "assert largest_neg([1,2,3,-4,-6]) == -6",
            "assert largest_neg([1,2,3,-8,-9]) == -9",
            "assert largest_neg([1,2,3,4,-1]) == -1"
        ],
        "code": [
            "def largest_neg(list1): \n    \"\"\"Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max"
        ],
        "draft_plan": [
            "# Initialize a variable 'largest_negative' to None\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If 'largest_negative' is None or the current number is greater than 'largest_negative', update 'largest_negative' to the current number\n\n# Return 'largest_negative'"
        ]
    },
    {
        "id": "mbpp_py/444",
        "prompt": "def trim_tuple(test_list, K):\n    \"\"\"Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"",
        "solution": "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) ",
        "test": [
            "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
            "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
            "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
        ],
        "code": [
            "def trim_tuple(test_list, K):\n    \"\"\"Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) "
        ],
        "draft_plan": [
            "# Create an empty list to store the trimmed tuples\n\n# Iterate through each tuple in the given list\n    # Check if the length of the current tuple is greater than k\n        # If yes, trim the tuple by removing the first k elements\n        # Append the trimmed tuple to the new list\n\n# Return the new list containing the trimmed tuples"
        ]
    },
    {
        "id": "mbpp_py/445",
        "prompt": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"",
        "solution": "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "test": [
            "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
            "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
            "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
        ],
        "code": [
            "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) "
        ],
        "draft_plan": [
            "# Create an empty list to store the result of multiplication\n\n# Iterate through the indexes of the tuples using the range of the length of the tuples\n    # Multiply the elements at the current index of both tuples\n    # Append the result to the list\n\n# Return the list"
        ]
    },
    {
        "id": "mbpp_py/446",
        "prompt": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    \"\"\"Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"",
        "solution": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ",
        "test": [
            "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
            "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
            "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
        ],
        "code": [
            "from collections import Counter \ndef count_Occurrence(tup, lst): \n    \"\"\"Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  "
        ],
        "draft_plan": [
            "# Initialize an empty dictionary to store the element counts\n\n# Iterate through each element in the list\n    # Check if the element exists in the tuple\n        # If it exists, increment the count in the dictionary by 1\n        # If it doesn't exist, add the element to the dictionary with a count of 1\n\n# Return the dictionary with the element counts"
        ]
    },
    {
        "id": "mbpp_py/447",
        "prompt": "def cube_nums(nums):\n    \"\"\"Write a function to find cubes of individual elements in a list.\n    \"\"\"",
        "solution": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums",
        "test": [
            "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
            "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
            "assert cube_nums([12,15])==([1728, 3375])"
        ],
        "code": [
            "def cube_nums(nums):\n    \"\"\"Write a function to find cubes of individual elements in a list.\n    \"\"\"\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums"
        ],
        "draft_plan": [
            "# Create an empty list to store the cubes of individual elements\n# Iterate through each element in the input list\n    # Calculate the cube of the current element by raising it to the power of 3\n    # Append the cube to the result list\n\n# Return the result list containing the cubes of individual elements"
        ]
    },
    {
        "id": "mbpp_py/448",
        "prompt": "def cal_sum(n): \n    \"\"\"Write a function to calculate the sum of perrin numbers.\n    \"\"\"",
        "solution": "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum",
        "test": [
            "assert cal_sum(9) == 49",
            "assert cal_sum(10) == 66",
            "assert cal_sum(11) == 88"
        ],
        "code": [
            "def cal_sum(n): \n    \"\"\"Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum"
        ],
        "draft_plan": [
            "# Define a function to calculate the sum of Perrin numbers up to a given limit\n\n# Initialize the first three Perrin numbers\n# Initialize the sum of Perrin numbers to 0\n\n# Iterate from 3 to the given limit\n    # Calculate the next Perrin number by summing the previous three Perrin numbers\n    # Add the current Perrin number to the sum\n\n# Return the sum of Perrin numbers"
        ]
    },
    {
        "id": "mbpp_py/450",
        "prompt": "def extract_string(str, l):\n    \"\"\"Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"",
        "solution": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result",
        "test": [
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
        ],
        "code": [
            "def extract_string(str, l):\n    \"\"\"Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    result = [e for e in str if len(e) == l] \n    return result"
        ],
        "draft_plan": [
            "# Initialize an empty list to store the extracted strings\n\n# Iterate through each string in the given list\n    # Check if the length of the current string is equal to the specified size\n        # If it matches, append the string to the result list\n\n# Return the list of extracted strings"
        ]
    },
    {
        "id": "mbpp_py/451",
        "prompt": "import re\ndef remove_whitespaces(text1):\n    \"\"\"Write a function to remove all whitespaces from the given string.\n    \"\"\"",
        "solution": "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))",
        "test": [
            "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
            "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
            "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
        ],
        "code": [
            "import re\ndef remove_whitespaces(text1):\n    \"\"\"Write a function to remove all whitespaces from the given string.\n    \"\"\"\n  return (re.sub(r'\\s+', '',text1))"
        ],
        "draft_plan": [
            "# Initialize an empty string to store the modified string\n\n# Iterate through each character in the input string\n    # Check if the current character is a whitespace\n        # If it is not a whitespace, append it to the modified string\n\n# Return the modified string without whitespaces"
        ]
    },
    {
        "id": "mbpp_py/452",
        "prompt": "def loss_amount(actual_cost,sale_amount): \n    \"\"\"Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"",
        "solution": "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0",
        "test": [
            "assert loss_amount(1500,1200)==0",
            "assert loss_amount(100,200)==100",
            "assert loss_amount(2000,5000)==3000"
        ],
        "code": [
            "def loss_amount(actual_cost,sale_amount): \n    \"\"\"Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0"
        ],
        "draft_plan": [
            "# Define a function that takes the given amount as input\n    # Check if the given amount is less than the selling price\n        # If it is less, calculate the loss amount by subtracting the given amount from the selling price\n        # Return the loss amount\n    # If the given amount is not less than the selling price, return 0"
        ]
    },
    {
        "id": "mbpp_py/453",
        "prompt": "import math \ndef sumofFactors(n) : \n    \"\"\"Write a python function to find the sum of even factors of a number.\n    \"\"\"",
        "solution": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res",
        "test": [
            "assert sumofFactors(18) == 26",
            "assert sumofFactors(30) == 48",
            "assert sumofFactors(6) == 8"
        ],
        "code": [
            "import math \ndef sumofFactors(n) : \n    \"\"\"Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res"
        ],
        "draft_plan": [
            "# Initialize the sum of even factors to 0\n\n# Iterate from 1 to the given number (inclusive)\n    # Check if the current number is a factor of the given number\n        # Check if the current number is even\n            # If the current number is even, add it to the sum of even factors\n\n# Return the sum of even factors"
        ]
    },
    {
        "id": "mbpp_py/454",
        "prompt": "import re\ndef text_match_wordz(text):\n    \"\"\"Write a function that matches a word containing 'z'.\n    \"\"\"",
        "solution": "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
        "test": [
            "assert text_match_wordz(\"pythonz.\")==True",
            "assert text_match_wordz(\"xyz.\")==True",
            "assert text_match_wordz(\"  lang  .\")==False"
        ],
        "code": [
            "import re\ndef text_match_wordz(text):\n    \"\"\"Write a function that matches a word containing 'z'.\n    \"\"\"\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False"
        ],
        "draft_plan": [
            "# Iterate through each word in the given list\n    # Check if the character 'z' is present in the word\n        # If 'z' is found, add the word to a new list\n\n# Return the new list containing words with 'z'"
        ]
    },
    {
        "id": "mbpp_py/455",
        "prompt": "def check_monthnumb_number(monthnum2):\n    \"\"\"Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"",
        "solution": "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False",
        "test": [
            "assert check_monthnumb_number(5)==True",
            "assert check_monthnumb_number(2)==False",
            "assert check_monthnumb_number(6)==False"
        ],
        "code": [
            "def check_monthnumb_number(monthnum2):\n    \"\"\"Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False"
        ],
        "draft_plan": [
            "# Create a list of months with 31 days\n    # Use the month numbers from 1 to 12\n\n# Check if the given month number is in the list of months with 31 days\n    # If it is, return True\n    # Otherwise, return False"
        ]
    },
    {
        "id": "mbpp_py/456",
        "prompt": "def reverse_string_list(stringlist):\n    \"\"\"Write a function to reverse each string in a given list of string values.\n    \"\"\"",
        "solution": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result",
        "test": [
            "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
            "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
            "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
        ],
        "code": [
            "def reverse_string_list(stringlist):\n    \"\"\"Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    result = [x[::-1] for x in stringlist]\n    return result"
        ],
        "draft_plan": [
            "# Iterate through each string in the given list\n    # Reverse the current string using string slicing\n    # Update the current string in the list with the reversed string\n\n# Return the modified list"
        ]
    },
    {
        "id": "mbpp_py/457",
        "prompt": "def Find_Min(lst): \n    \"\"\"Write a python function to find the sublist having minimum length.\n    \"\"\"",
        "solution": "def Find_Min(lst): \n    return min(lst, key=len) ",
        "test": [
            "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
            "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
            "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
        ],
        "code": [
            "def Find_Min(lst): \n    \"\"\"Write a python function to find the sublist having minimum length.\n    \"\"\"\n    return min(lst, key=len) "
        ],
        "draft_plan": [
            "# If the input list is empty, return an empty list\n\n# Initialize the minimum length variable to a large value and the minimum sublist to an empty list\n\n# Iterate through each sublist in the input list\n    # If the length of the current sublist is less than the minimum length\n        # Update the minimum length and the minimum sublist\n\n# Return the minimum sublist"
        ]
    },
    {
        "id": "mbpp_py/458",
        "prompt": "def rectangle_area(l,b):\n    \"\"\"Write a function to find the area of a rectangle.\n    \"\"\"",
        "solution": "def rectangle_area(l,b):\n  area=l*b\n  return area",
        "test": [
            "assert rectangle_area(10,20)==200",
            "assert rectangle_area(10,5)==50",
            "assert rectangle_area(4,2)==8"
        ],
        "code": [
            "def rectangle_area(l,b):\n    \"\"\"Write a function to find the area of a rectangle.\n    \"\"\"\n  area=l*b\n  return area"
        ],
        "draft_plan": [
            "To find the area of a rectangle, we need the length and width of the rectangle. The formula to calculate the area of a rectangle is:\n\nArea = length * width\n\nHere is the code logic to find the area of a rectangle:\n\n1. Define a function named `calculate_area` that takes two parameters, `length` and `width`.\n2. Inside the function, calculate the area by multiplying the `length` and `width` parameters.\n3. Return the calculated area from the function.\n\nHere is the code implementation in Python:\n\n```python\ndef calculate_area(length, width):\n    area = length * width\n    return area\n\n# Example usage:\nlength = 5\nwidth = 3\narea = calculate_area(length, width)\nprint(\"The area of the rectangle is:\", area)\n```\n\nThis will output:\n```\nThe area of the rectangle is: 15\n```\n\nYou can replace the values of `length` and `width` with your own values to find the area of a different rectangle."
        ]
    },
    {
        "id": "mbpp_py/459",
        "prompt": "import re\ndef remove_uppercase(str1):\n    \"\"\"Write a function to remove uppercase substrings from a given string.\n    \"\"\"",
        "solution": "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)",
        "test": [
            "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
            "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
            "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
        ],
        "code": [
            "import re\ndef remove_uppercase(str1):\n    \"\"\"Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n  return re.sub('[A-Z]', '', str1)"
        ],
        "draft_plan": [
            "# Initialize an empty string to store the result\n\n# Iterate through each character in the input string\n    # Check if the current character is lowercase\n        # If it is lowercase, append it to the result string\n\n# Return the result string"
        ]
    },
    {
        "id": "mbpp_py/460",
        "prompt": "def Extract(lst): \n    \"\"\"Write a python function to get the first element of each sublist.\n    \"\"\"",
        "solution": "def Extract(lst): \n    return [item[0] for item in lst] ",
        "test": [
            "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
            "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
            "assert Extract([[9,8,1],[1,2]]) == [9,1]"
        ],
        "code": [
            "def Extract(lst): \n    \"\"\"Write a python function to get the first element of each sublist.\n    \"\"\"\n    return [item[0] for item in lst] "
        ],
        "draft_plan": [
            "# Create an empty list to store the first elements of each sublist\n\n# Iterate through each sublist in the input list\n    # Append the first element of the current sublist to the result list\n\n# Return the result list"
        ]
    },
    {
        "id": "mbpp_py/461",
        "prompt": "def upper_ctr(str):\n    \"\"\"Write a python function to count the upper case characters in a given string.\n    \"\"\"",
        "solution": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
        "test": [
            "assert upper_ctr('PYthon') == 1",
            "assert upper_ctr('BigData') == 1",
            "assert upper_ctr('program') == 0"
        ],
        "code": [
            "def upper_ctr(str):\n    \"\"\"Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr"
        ],
        "draft_plan": [
            "# Initialize a counter variable to keep track of the number of uppercase characters\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter variable\n\n# Return the counter variable, which represents the number of uppercase characters in the string"
        ]
    },
    {
        "id": "mbpp_py/462",
        "prompt": "def combinations_list(list1):\n    \"\"\"Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"",
        "solution": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result",
        "test": [
            "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
            "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
            "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
        ],
        "code": [
            "def combinations_list(list1):\n    \"\"\"Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result"
        ],
        "draft_plan": [
            "# Import the combinations function from the itertools module\n\n# Define the function to find all possible combinations\n    # Initialize an empty list to store the combinations\n    \n    # Use a for loop to iterate through different combination lengths\n        # Generate all combinations of the given list for the current combination length\n        # Append the combinations to the result list\n    \n    # Return the list of all possible combinations"
        ]
    },
    {
        "id": "mbpp_py/463",
        "prompt": "def max_subarray_product(arr):\n    \"\"\"Write a function to find the maximum product subarray of the given array.\n    \"\"\"",
        "solution": "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far",
        "test": [
            "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
            "assert max_subarray_product([6, -3, -10, 0, 2]) == 180",
            "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
        ],
        "code": [
            "def max_subarray_product(arr):\n    \"\"\"Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far"
        ],
        "draft_plan": [
            "# Initialize variables to store the maximum product, current maximum product, current minimum product, and the result\n# Set the maximum product and current maximum product to the first element of the array\n# Iterate through each element in the array starting from the second element\n    # Update the current maximum product and current minimum product by considering the current element\n    # Check if the current element is negative\n        # If it is negative, swap the current maximum product and current minimum product\n    # Check if the current maximum product is greater than the maximum product\n        # If it is, update the maximum product\n    # Check if the current element is greater than the current maximum product\n        # If it is, update the current maximum product\n    # Check if the current element is less than the current minimum product\n        # If it is, update the current minimum product\n    # Check if the maximum product is greater than the result\n        # If it is, update the result\n\n# Return the result"
        ]
    },
    {
        "id": "mbpp_py/464",
        "prompt": "def check_value(dict, n):\n    \"\"\"Write a function to check if all values are same in a dictionary.\n    \"\"\"",
        "solution": "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result",
        "test": [
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
        ],
        "code": [
            "def check_value(dict, n):\n    \"\"\"Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    result = all(x == n for x in dict.values()) \n    return result"
        ],
        "draft_plan": [
            "# Get the first value from the dictionary\n# Iterate through all the values in the dictionary\n    # Check if the current value is equal to the first value\n        # If not equal, return False\n\n# If all values are equal, return True"
        ]
    },
    {
        "id": "mbpp_py/465",
        "prompt": "def drop_empty(dict1):\n    \"\"\"Write a function to drop empty items from a given dictionary.\n    \"\"\"",
        "solution": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1",
        "test": [
            "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
            "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
            "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
        ],
        "code": [
            "def drop_empty(dict1):\n    \"\"\"Write a function to drop empty items from a given dictionary.\n    \"\"\"\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1"
        ],
        "draft_plan": [
            "# Initialize an empty dictionary to store the non-empty items\n\n# Iterate through each key-value pair in the given dictionary\n    # Check if the value is not empty\n        # If not empty, add the key-value pair to the new dictionary\n\n# Return the new dictionary"
        ]
    },
    {
        "id": "mbpp_py/468",
        "prompt": "def max_product(arr):   \n    \"\"\"Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"",
        "solution": "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)",
        "test": [
            "assert max_product([3, 100, 4, 5, 150, 6]) == 3000",
            "assert max_product([4, 42, 55, 68, 80]) == 50265600",
            "assert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460"
        ],
        "code": [
            "def max_product(arr):   \n    \"\"\"Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)"
        ],
        "draft_plan": [
            "# Initialize the maximum product as 1\n# Initialize an empty list to store the increasing subsequence\n\n# Iterate through each number in the array\n    # Initialize a temporary list to store the current increasing subsequence\n    # Iterate through each number before the current number\n        # Check if the current number is greater than the previous number and if the product of the current number and the previous maximum product is greater than the current maximum product\n            # If the condition is satisfied, update the maximum product and the temporary list with the current increasing subsequence\n    # Append the current number to the temporary list\n\n# Return the maximum product and the increasing subsequence list"
        ]
    },
    {
        "id": "mbpp_py/470",
        "prompt": "def add_pairwise(test_tup):\n    \"\"\"Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"",
        "solution": "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ",
        "test": [
            "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
            "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
            "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
        ],
        "code": [
            "def add_pairwise(test_tup):\n    \"\"\"Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) "
        ],
        "draft_plan": [
            "# Initialize an empty list to store the pairwise addition results\n\n# Iterate through the elements in the tuple up to the second to last element\n    # Compute the pairwise addition of the current element and its neighboring element\n    # Append the result to the list\n\n# Return the list of pairwise addition results"
        ]
    },
    {
        "id": "mbpp_py/471",
        "prompt": "def find_remainder(arr, n): \n    \"\"\"Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"",
        "solution": "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ",
        "test": [
            "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9",
            "assert find_remainder([1,1,1],1) == 0",
            "assert find_remainder([1,2,1],2) == 0"
        ],
        "code": [
            "def find_remainder(arr, n): \n    \"\"\"Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n "
        ],
        "draft_plan": [
            "# Initialize the product to 1\n\n# Iterate through each element in the array\n    # Multiply the current element with the product\n    # Take the modulo of the product with n\n\n# Return the final product modulo n"
        ]
    },
    {
        "id": "mbpp_py/472",
        "prompt": "def check_Consecutive(l): \n    \"\"\"Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"",
        "solution": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ",
        "test": [
            "assert check_Consecutive([1,2,3,4,5]) == True",
            "assert check_Consecutive([1,2,3,5,6]) == False",
            "assert check_Consecutive([1,2,1]) == False"
        ],
        "code": [
            "def check_Consecutive(l): \n    \"\"\"Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    return sorted(l) == list(range(min(l),max(l)+1)) "
        ],
        "draft_plan": [
            "# Sort the input list in ascending order\n\n# Iterate through each number in the sorted list, starting from the second number\n    # Check if the current number is consecutive to the previous number\n        # If not, return False\n\n# If all numbers are consecutive, return True"
        ]
    },
    {
        "id": "mbpp_py/473",
        "prompt": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"",
        "solution": "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)",
        "test": [
            "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
            "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
            "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
        ],
        "code": [
            "def tuple_intersection(test_list1, test_list2):\n    \"\"\"Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)"
        ],
        "draft_plan": [
            "# Initialize the intersection as the first tuple in the given tuple list\n\n# Iterate through each tuple in the given tuple list starting from the second tuple\n    # Initialize the current intersection as an empty list\n\n    # Iterate through each element in the current tuple\n        # Check if the element is present in the previous intersection\n            # If yes, append the element to the current intersection\n\n    # Update the intersection as the current intersection\n\n# Return the intersection"
        ]
    },
    {
        "id": "mbpp_py/474",
        "prompt": "def replace_char(str1,ch,newch):\n    \"\"\"Write a function to replace characters in a string.\n    \"\"\"",
        "solution": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2",
        "test": [
            "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
            "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
            "assert replace_char(\"python\",'l','a')==(\"python\")"
        ],
        "code": [
            "def replace_char(str1,ch,newch):\n    \"\"\"Write a function to replace characters in a string.\n    \"\"\"\n str2 = str1.replace(ch, newch)\n return str2"
        ],
        "draft_plan": [
            "# Initialize an empty string to store the modified string\n\n# Iterate through each character in the input string\n    # Check if the character needs to be replaced\n        # If replacement is required, append the replacement character to the modified string\n        # Otherwise, append the original character to the modified string\n\n# Return the modified string"
        ]
    },
    {
        "id": "mbpp_py/475",
        "prompt": "from collections import Counter\ndef sort_counter(dict1):\n    \"\"\"Write a function to sort a dictionary by value.\n    \"\"\"",
        "solution": "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter",
        "test": [
            "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
            "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
            "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
        ],
        "code": [
            "from collections import Counter\ndef sort_counter(dict1):\n    \"\"\"Write a function to sort a dictionary by value.\n    \"\"\"\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter"
        ],
        "draft_plan": [
            "# Use the sorted() function with a lambda function as the key parameter\n# The lambda function takes each key-value pair from the dictionary and returns the value\n# The sorted() function will sort the dictionary based on the values in ascending order\n# Pass the sorted dictionary to the dict() function to convert it back to a dictionary type\n\ndef sort_dict_by_value(dictionary):\n    sorted_dict = dict(sorted(dictionary.items(), key=lambda item: item[1]))\n    return sorted_dict"
        ]
    },
    {
        "id": "mbpp_py/476",
        "prompt": "def big_sum(nums):\n    \"\"\"Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"",
        "solution": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum",
        "test": [
            "assert big_sum([1,2,3]) == 4",
            "assert big_sum([-1,2,3,4]) == 3",
            "assert big_sum([2,3,6]) == 8"
        ],
        "code": [
            "def big_sum(nums):\n    \"\"\"Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n      sum= max(nums)+min(nums)\n      return sum"
        ],
        "draft_plan": [
            "# Sort the array in ascending order\n# Initialize variables for the smallest and largest values\n\n# Get the smallest value from the sorted array (first element)\n# Get the largest value from the sorted array (last element)\n\n# Calculate the sum of the smallest and largest values\n\n# Return the sum"
        ]
    },
    {
        "id": "mbpp_py/477",
        "prompt": "def is_lower(string):\n    \"\"\"Write a python function to convert the given string to lower case.\n    \"\"\"",
        "solution": "def is_lower(string):\n  return (string.lower())",
        "test": [
            "assert is_lower(\"InValid\") == \"invalid\"",
            "assert is_lower(\"TruE\") == \"true\"",
            "assert is_lower(\"SenTenCE\") == \"sentence\""
        ],
        "code": [
            "def is_lower(string):\n    \"\"\"Write a python function to convert the given string to lower case.\n    \"\"\"\n  return (string.lower())"
        ],
        "draft_plan": [
            "# Convert the input string to lower case using the lower() method\n# Return the lower case string"
        ]
    },
    {
        "id": "mbpp_py/478",
        "prompt": "import re\ndef remove_lowercase(str1):\n    \"\"\"Write a function to remove lowercase substrings from a given string.\n    \"\"\"",
        "solution": "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)",
        "test": [
            "assert remove_lowercase(\"PYTHon\")==('PYTH')",
            "assert remove_lowercase(\"FInD\")==('FID')",
            "assert remove_lowercase(\"STRinG\")==('STRG')"
        ],
        "code": [
            "import re\ndef remove_lowercase(str1):\n    \"\"\"Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n return re.sub('[a-z]', '', str1)"
        ],
        "draft_plan": [
            "# Initialize an empty string to store the final result\n\n# Iterate through each character in the given string\n    # Check if the character is uppercase\n        # If the character is uppercase, append it to the final result string\n\n# Return the final result string"
        ]
    },
    {
        "id": "mbpp_py/479",
        "prompt": "def first_Digit(n) :  \n    \"\"\"Write a python function to find the first digit of a given number.\n    \"\"\"",
        "solution": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ",
        "test": [
            "assert first_Digit(123) == 1",
            "assert first_Digit(456) == 4",
            "assert first_Digit(12) == 1"
        ],
        "code": [
            "def first_Digit(n) :  \n    \"\"\"Write a python function to find the first digit of a given number.\n    \"\"\"\n    while n >= 10:  \n        n = n / 10 \n    return int(n) "
        ],
        "draft_plan": [
            "# Convert the given number to a string\n\n# Iterate through each character in the string\n    # Check if the character is a digit\n        # If it is, return the character as the first digit\n\n# If no digit is found, return \"None\""
        ]
    }
]