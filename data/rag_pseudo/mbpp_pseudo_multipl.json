[
    {
        "id": "11",
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
        "solution": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ",
        "test": [
            "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
            "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
            "assert remove_Occ(\"PHP\",\"P\") == \"H\""
        ],
        "code": [
            "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s "
        ],
        "draft_plan": [
            "# Find the first occurrence of the given character in the string\n    # If the character is not found, return the original string\n\n# Find the last occurrence of the given character in the string\n    # If the character is not found, return the original string\n\n# Remove the first occurrence of the character from the string\n# Remove the last occurrence of the character from the string\n\n# Return the modified string"
        ],
        "requirements": [
            "public class RemoveFirstAndLastOccurrence {\n    public static String removeOccurrences(String str, char target) {\n        int firstIndex = str.indexOf(target);\n        int lastIndex = str.lastIndexOf(target);\n        \n        if (firstIndex == -1 || lastIndex == -1 || firstIndex == lastIndex) {\n            return str;\n        }\n        \n        String firstPart = str.substring(0, firstIndex);\n        String secondPart = str.substring(firstIndex + 1, lastIndex);\n        String lastPart = str.substring(lastIndex + 1);\n        \n        return firstPart + secondPart + lastPart;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\n\nstd::string removeFirstAndLastOccurrence(std::string str, char c) {\n    // Find the first occurrence of the character\n    size_t firstIndex = str.find(c);\n    if (firstIndex == std::string::npos) {\n        return str; // Character not found, return original string\n    }\n    \n    // Find the last occurrence of the character\n    size_t lastIndex = str.rfind(c);\n    if (lastIndex == std::string::npos) {\n        return str; // Character not found, return original string\n    }\n    \n    // Remove the first occurrence of the character\n    str.erase(firstIndex, 1);\n    \n    // Remove the last occurrence of the character\n    str.erase(lastIndex - 1, 1);\n    \n    return str;\n}"
        ]
    },
    {
        "id": "12",
        "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "solution": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result",
        "test": [
            "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
            "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
            "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
        ],
        "code": [
            "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result"
        ],
        "draft_plan": [
            "# Define a function to sort the matrix based on row sums\n    # Calculate the sum of each row and store it in a list along with the corresponding row index\n    # Sort the list based on the row sums in ascending order\n    # Create a new matrix to store the sorted rows\n    # Iterate through the sorted list and append the corresponding row from the original matrix to the new matrix\n    # Return the sorted matrix\n\n# Example usage:\n# matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n# sorted_matrix = sort_matrix(matrix)\n# sorted_matrix will be [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"
        ],
        "requirements": [
            "import java.util.Arrays;\nimport java.util.Comparator;\n\npublic class MatrixSorter {\n    public static int[][] sortMatrix(int[][] matrix) {\n        int rows = matrix.length;\n        int cols = matrix[0].length;\n        \n        // Calculate the sum of each row and store it in a list along with the corresponding row index\n        Integer[][] sums = new Integer[rows][2];\n        for (int i = 0; i < rows; i++) {\n            int sum = 0;\n            for (int j = 0; j < cols; j++) {\n                sum += matrix[i][j];\n            }\n            sums[i][0] = sum;\n            sums[i][1] = i;\n        }\n        \n        // Sort the list based on the row sums in ascending order\n        Arrays.sort(sums, Comparator.comparingInt(a -> a[0]));\n        \n        // Create a new matrix to store the sorted rows\n        int[][] sortedMatrix = new int[rows][cols];\n        \n        // Iterate through the sorted list and append the corresponding row from the original matrix to the new matrix\n        for (int i = 0; i < rows; i++) {\n            sortedMatrix[i] = matrix[sums[i][1]];\n        }\n        \n        return sortedMatrix;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<std::vector<int>> sortMatrix(std::vector<std::vector<int>>& matrix) {\n    std::vector<std::pair<int, int>> rowSums;\n    \n    // Calculate the sum of each row and store it in a pair along with the corresponding row index\n    for (int i = 0; i < matrix.size(); i++) {\n        int sum = 0;\n        for (int j = 0; j < matrix[i].size(); j++) {\n            sum += matrix[i][j];\n        }\n        rowSums.push_back(std::make_pair(sum, i));\n    }\n    \n    // Sort the row sums in ascending order\n    std::sort(rowSums.begin(), rowSums.end());\n    \n    // Create a new matrix to store the sorted rows\n    std::vector<std::vector<int>> sortedMatrix;\n    \n    // Iterate through the sorted row sums and append the corresponding row from the original matrix to the new matrix\n    for (int i = 0; i < rowSums.size(); i++) {\n        sortedMatrix.push_back(matrix[rowSums[i].second]);\n    }\n    \n    return sortedMatrix;\n}"
        ]
    },
    {
        "id": "14",
        "prompt": "Write a python function to find the volume of a triangular prism.",
        "solution": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ",
        "test": [
            "assert find_Volume(10,8,6) == 240",
            "assert find_Volume(3,2,2) == 6",
            "assert find_Volume(1,2,1) == 1"
        ],
        "code": [
            "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) "
        ],
        "draft_plan": [
            "To find the volume of a triangular prism, you need to know the base area and the height of the prism. Here is the code logic:\n\n1. Accept the base length, base width, and prism height as inputs.\n2. Calculate the base area by multiplying the base length and base width and divide it by 2.\n3. Calculate the volume by multiplying the base area with the prism height.\n4. Return the calculated volume.\n\nHere is the code implementation:\n\n```python\ndef calculate_volume(base_length, base_width, prism_height):\n    base_area = (base_length * base_width) / 2\n    volume = base_area * prism_height\n    return volume\n```\n\nYou can use this function by calling it with the appropriate values for base length, base width, and prism height."
        ],
        "requirements": [
            "public class TriangularPrism {\n    public static double calculateVolume(double baseLength, double baseWidth, double prismHeight) {\n        double baseArea = (baseLength * baseWidth) / 2;\n        double volume = baseArea * prismHeight;\n        return volume;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n\nfloat calculateVolume(float baseLength, float baseWidth, float prismHeight) {\n    float baseArea = (baseLength * baseWidth) / 2;\n    float volume = baseArea * prismHeight;\n    return volume;\n}\n\nint main() {\n    float baseLength, baseWidth, prismHeight;\n    std::cout << \"Enter the base length: \";\n    std::cin >> baseLength;\n    std::cout << \"Enter the base width: \";\n    std::cin >> baseWidth;\n    std::cout << \"Enter the prism height: \";\n    std::cin >> prismHeight;\n    \n    float volume = calculateVolume(baseLength, baseWidth, prismHeight);\n    std::cout << \"The volume of the triangular prism is: \" << volume << std::endl;\n    \n    return 0;\n}"
        ]
    },
    {
        "id": "16",
        "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
        "solution": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
        "test": [
            "assert text_lowercase_underscore(\"aab_cbbbc\")==(True)",
            "assert text_lowercase_underscore(\"aab_Abbbc\")==(False)",
            "assert text_lowercase_underscore(\"Aaab_abbbc\")==(False)"
        ],
        "code": [
            "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False"
        ],
        "draft_plan": [
            "# Split the input string by underscore character to get a list of substrings\n# Iterate through each substring\n    # Check if the substring contains only lowercase letters\n        # If not, return False\n# If all substrings pass the lowercase letter check, return True"
        ],
        "requirements": [
            "import java.util.regex.Pattern;\n\npublic class StringUtil {\n    public static boolean containsLowercaseSequences(String str) {\n        String[] substrings = str.split(\"_\");\n        for (String substring : substrings) {\n            if (!Pattern.matches(\"[a-z]+\", substring)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool containsLowerCaseSequences(string input) {\n    int n = input.length();\n    string delimiter = \"_\";\n    int start = 0;\n    int end = input.find(delimiter);\n    while (end != string::npos) {\n        string substring = input.substr(start, end - start);\n        for (char c : substring) {\n            if (!islower(c)) {\n                return false;\n            }\n        }\n        start = end + delimiter.length();\n        end = input.find(delimiter, start);\n    }\n    string lastSubstring = input.substr(start, n - start);\n    for (char c : lastSubstring) {\n        if (!islower(c)) {\n            return false;\n        }\n    }\n    return true;\n}"
        ]
    },
    {
        "id": "17",
        "prompt": "Write a function that returns the perimeter of a square given its side length as input.",
        "solution": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter",
        "test": [
            "assert square_perimeter(10)==40",
            "assert square_perimeter(5)==20",
            "assert square_perimeter(4)==16"
        ],
        "code": [
            "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter"
        ],
        "draft_plan": [
            "To calculate the perimeter of a square, you need to multiply the side length by 4. Here is the code logic:\n\n1. Define a function called `calculate_perimeter` that takes one parameter, `side_length`.\n2. Inside the function, calculate the perimeter by multiplying the `side_length` by 4.\n3. Return the calculated perimeter.\n\nHere's the code:\n\n```python\ndef calculate_perimeter(side_length):\n    perimeter = side_length * 4\n    return perimeter\n```\n\nYou can then call this function and pass the side length of the square as an argument to get the perimeter. For example:\n\n```python\nside_length = 5\nperimeter = calculate_perimeter(side_length)\nprint(perimeter)\n```\n\nThis will output `20`, which is the perimeter of a square with a side length of 5."
        ],
        "requirements": [
            "Sure! Here's the Java code without the `main` method to calculate the perimeter of a square given its side length:\n\n```java\npublic class SquarePerimeter {\n    public static int calculatePerimeter(int sideLength) {\n        int perimeter = sideLength * 4;\n        return perimeter;\n    }\n}\n```\n\nYou can call this method from another class or from the `main` method to calculate the perimeter. For example:\n\n```java\nint sideLength = 5;\nint perimeter = SquarePerimeter.calculatePerimeter(sideLength);\nSystem.out.println(perimeter);\n```\n\nThis will output `20`, which is the perimeter of a square with a side length of 5."
        ],
        "final_plan": [
            "```cpp\n#include <iostream>\n\nint calculatePerimeter(int sideLength) {\n    int perimeter = sideLength * 4;\n    return perimeter;\n}\n```\n\nYou can then call this function and pass the side length of the square as an argument to get the perimeter. For example:\n\n```cpp\nint sideLength = 5;\nint perimeter = calculatePerimeter(sideLength);\nstd::cout << perimeter << std::endl;\n```\n\nThis will output `20`, which is the perimeter of a square with a side length of 5."
        ]
    },
    {
        "id": "18",
        "prompt": "Write a function to remove characters from the first string which are present in the second string.",
        "solution": "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) ",
        "test": [
            "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
            "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
            "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'"
        ],
        "code": [
            "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) "
        ],
        "draft_plan": [
            "# Convert the second string into a set for efficient character lookup\n\n# Iterate through each character in the first string\n    # Check if the current character is in the set of characters from the second string\n        # If not present, add it to the result string\n\n# Return the result string"
        ],
        "requirements": [
            "import java.util.HashSet;\nimport java.util.Set;\n\npublic class CharacterRemoval {\n    public static String removeChars(String str1, String str2) {\n        StringBuilder result = new StringBuilder();\n        Set<Character> charSet = new HashSet<>();\n\n        // Add all characters from the second string to the set\n        for (char c : str2.toCharArray()) {\n            charSet.add(c);\n        }\n\n        // Iterate through each character in the first string\n        for (char c : str1.toCharArray()) {\n            // Check if the current character is not in the set\n            if (!charSet.contains(c)) {\n                // Append the character to the result string\n                result.append(c);\n            }\n        }\n\n        return result.toString();\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <unordered_set>\nusing namespace std;\n\nstring removeChars(string str1, string str2) {\n    unordered_set<char> charSet;\n    for (char ch : str2) {\n        charSet.insert(ch);\n    }\n    \n    string result = \"\";\n    for (char ch : str1) {\n        if (charSet.find(ch) == charSet.end()) {\n            result += ch;\n        }\n    }\n    \n    return result;\n}"
        ]
    },
    {
        "id": "19",
        "prompt": "Write a function to find whether a given array of integers contains any duplicate element.",
        "solution": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ",
        "test": [
            "assert test_duplicate(([1,2,3,4,5]))==False",
            "assert test_duplicate(([1,2,3,4, 4]))==True",
            "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
        ],
        "code": [
            "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     "
        ],
        "draft_plan": [
            "# Create an empty set to store visited elements\n\n# Iterate through each element in the array\n    # Check if the current element is already in the set\n        # If it is, return True as a duplicate element is found\n        # Otherwise, add the current element to the set\n\n# If no duplicate element is found, return False"
        ],
        "requirements": [
            "import java.util.HashSet;\n\npublic class DuplicateElements {\n    public static boolean containsDuplicate(int[] nums) {\n        HashSet<Integer> visited = new HashSet<>();\n        \n        for (int num : nums) {\n            if (visited.contains(num)) {\n                return true;\n            }\n            visited.add(num);\n        }\n        \n        return false;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <unordered_set>\n#include <vector>\n\nbool containsDuplicate(std::vector<int>& nums) {\n    std::unordered_set<int> numSet;\n    for (int num : nums) {\n        if (numSet.find(num) != numSet.end()) {\n            return true;\n        }\n        numSet.insert(num);\n    }\n    return false;\n}"
        ]
    },
    {
        "id": "20",
        "prompt": "Write a function to check if the given number is woodball or not.",
        "solution": "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False",
        "test": [
            "assert is_woodall(383) == True",
            "assert is_woodall(254) == False",
            "assert is_woodall(200) == False"
        ],
        "code": [
            "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False"
        ],
        "draft_plan": [
            "# Check if the given number is positive\n    # If not, return False\n\n# Find the square root of the given number\n# Convert the square root to an integer\n# Check if the square of the integer is equal to the given number\n    # If so, return True\n    # Otherwise, return False"
        ],
        "requirements": [
            "import java.util.*;\n\nclass Solution {\n    public static boolean isWoodball(int num) {\n        if (num <= 0) {\n            return false;\n        }\n        \n        int sqrt = (int) Math.sqrt(num);\n        \n        if (sqrt * sqrt == num) {\n            return true;\n        }\n        \n        return false;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <cmath>\n\nbool isWoodball(int n) {\n    if (n <= 0) {\n        return false;\n    }\n    \n    int root = sqrt(n);\n    \n    return (root * root == n);\n}\n"
        ]
    },
    {
        "id": "56",
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
        "solution": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
        "test": [
            "assert check(70) == False",
            "assert check(23) == False",
            "assert check(73) == True"
        ],
        "code": [
            "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  "
        ],
        "draft_plan": [
            "# Convert the given number to a string\n# Reverse the string representation of the number\n# Convert the reversed string back to an integer\n# Check if the given number is one less than twice its reverse\n    # If true, return True\n    # If false, return False"
        ],
        "requirements": [
            "public class ReverseNumberChecker {\n    public static boolean isOneLessThanTwiceReverse(int number) {\n        String numberString = String.valueOf(number);\n        StringBuilder reversedNumberString = new StringBuilder(numberString).reverse();\n        int reversedNumber = Integer.parseInt(reversedNumberString.toString());\n        return number == (2 * reversedNumber) - 1;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool isOneLessThanTwiceReverse(int number) {\n    string numStr = to_string(number);\n    string reverseStr = string(numStr.rbegin(), numStr.rend());\n    int reverseNum = stoi(reverseStr);\n    \n    if (number == (2 * reverseNum - 1)) {\n        return true;\n    } else {\n        return false;\n    }\n}"
        ]
    },
    {
        "id": "57",
        "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.",
        "solution": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ",
        "test": [
            "assert find_Max_Num([1,2,3]) == 321",
            "assert find_Max_Num([4,5,6,1]) == 6541",
            "assert find_Max_Num([1,2,3,9]) == 9321"
        ],
        "code": [
            "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num "
        ],
        "draft_plan": [
            "# Sort the list of digits in descending order\n# Convert the sorted list of digits into a string\n# Convert the string back into an integer and return it"
        ],
        "requirements": [
            "import java.util.Arrays;\nimport java.util.Comparator;\n\npublic class LargestNumber {\n    public static String largestNumber(int[] nums) {\n        // Convert the array of integers to an array of strings\n        String[] strArr = new String[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n            strArr[i] = String.valueOf(nums[i]);\n        }\n        \n        // Sort the array of strings in descending order using a custom comparator\n        Arrays.sort(strArr, new Comparator<String>() {\n            public int compare(String a, String b) {\n                String order1 = a + b;\n                String order2 = b + a;\n                return order2.compareTo(order1);\n            }\n        });\n        \n        // Handle edge case where all elements in the array are zeros\n        if (strArr[0].equals(\"0\")) {\n            return \"0\";\n        }\n        \n        // Concatenate the sorted strings and return the result\n        StringBuilder sb = new StringBuilder();\n        for (String str : strArr) {\n            sb.append(str);\n        }\n        \n        return sb.toString();\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\nusing namespace std;\n\nstring largestNumber(vector<int>& nums) {\n    sort(nums.begin(), nums.end(), [](int a, int b) {\n        return to_string(a) + to_string(b) > to_string(b) + to_string(a);\n    });\n\n    string largestNum;\n    for (int num : nums) {\n        largestNum += to_string(num);\n    }\n\n    if (largestNum[0] == '0') {\n        return \"0\";\n    }\n\n    return largestNum;\n}"
        ]
    },
    {
        "id": "58",
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
        "solution": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ",
        "test": [
            "assert opposite_Signs(1,-2) == True",
            "assert opposite_Signs(3,2) == False",
            "assert opposite_Signs(-10,-10) == False",
            "assert opposite_Signs(-2,2) == True"
        ],
        "code": [
            "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); "
        ],
        "draft_plan": [
            "# Check if the product of the two integers is negative\n    # If the product is negative, return True (opposite signs)\n    # If the product is not negative, return False (same sign)"
        ],
        "requirements": [
            "public class OppositeSigns {\n    public static boolean haveOppositeSigns(int num1, int num2) {\n        return (num1 < 0 && num2 > 0) || (num1 > 0 && num2 < 0);\n    }\n}"
        ],
        "final_plan": [
            "bool oppositeSigns(int x, int y) {\n    return ((x ^ y) < 0);\n}"
        ]
    },
    {
        "id": "59",
        "prompt": "Write a function to find the nth octagonal number.",
        "solution": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ",
        "test": [
            "assert is_octagonal(5) == 65",
            "assert is_octagonal(10) == 280",
            "assert is_octagonal(15) == 645"
        ],
        "code": [
            "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n "
        ],
        "draft_plan": [
            "# The nth octagonal number can be calculated using the formula: \n    # octagonal_number = n * (3 * n - 2)\n\n# Define a function to find the nth octagonal number\n    # Check if the input n is a positive integer\n        # Calculate the octagonal number using the formula\n        # Return the calculated octagonal number\n\n# If the input n is not a positive integer, return an error message"
        ],
        "requirements": [
            "public class OctagonalNumber {\n    \n    public static int findNthOctagonalNumber(int n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"Input n must be a positive integer\");\n        }\n        \n        return n * (3 * n - 2);\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\nint nthOctagonalNumber(int n) {\n    if (n <= 0) {\n        cout << \"Invalid input. Please enter a positive integer.\" << endl;\n        return -1;\n    }\n    int octagonalNumber = n * (3 * n - 2);\n    return octagonalNumber;\n}"
        ]
    },
    {
        "id": "61",
        "prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
        "solution": "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count",
        "test": [
            "assert count_Substrings('112112') == 6",
            "assert count_Substrings('111') == 6",
            "assert count_Substrings('1101112') == 12"
        ],
        "code": [
            "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count"
        ],
        "draft_plan": [
            "# Define a function `count_substrings` that takes a string `s` as input\n\n    # Initialize a variable `count` to keep track of the number of valid substrings\n    \n    # Iterate through each character and its index in the input string\n    \n        # For each character, initialize a variable `cur_sum` to store the sum of the digits\n        \n        # Iterate through each substring starting from the current character to the end of the string\n        \n            # For each substring, calculate the sum of its digits by converting each character to an integer\n            \n            # Check if the sum of the digits is equal to the length of the substring\n            \n                # If the condition is met, increment the `count` variable\n                \n    # Return the `count` variable"
        ],
        "requirements": [
            "import java.util.*;\n\nclass Solution {\n    public static int countSubstrings(String s) {\n        int count = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            int curSum = 0;\n            \n            for (int j = i; j < s.length(); j++) {\n                int digit = Character.getNumericValue(s.charAt(j));\n                curSum += digit;\n                \n                if (curSum == (j - i + 1)) {\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\nusing namespace std;\n\nint countSubstrings(string s) {\n    int count = 0;\n    \n    for (int i = 0; i < s.length(); i++) {\n        int cur_sum = 0;\n        \n        for (int j = i; j < s.length(); j++) {\n            cur_sum += (s[j] - '0');\n            \n            if (cur_sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    \n    return count;\n}"
        ]
    },
    {
        "id": "62",
        "prompt": "Write a python function to find smallest number in a list.",
        "solution": "def smallest_num(xs):\n  return min(xs)\n",
        "test": [
            "assert smallest_num([10, 20, 1, 45, 99]) == 1",
            "assert smallest_num([1, 2, 3]) == 1",
            "assert smallest_num([45, 46, 50, 60]) == 45"
        ],
        "code": [
            "def smallest_num(xs):\n  return min(xs)\n"
        ],
        "draft_plan": [
            "# Initialize the smallest number as the first element in the list\n\n# Iterate through each element in the list\n    # If the current element is smaller than the smallest number\n        # Update the smallest number to be the current element\n\n# Return the smallest number"
        ],
        "requirements": [
            "public class SmallestNumberFinder {\n    public static int findSmallestNumber(int[] numbers) {\n        if (numbers.length == 0) {\n            throw new IllegalArgumentException(\"Empty list provided\");\n        }\n        \n        int smallestNumber = numbers[0];\n        \n        for (int i = 1; i < numbers.length; i++) {\n            if (numbers[i] < smallestNumber) {\n                smallestNumber = numbers[i];\n            }\n        }\n        \n        return smallestNumber;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <limits>\n\nint findSmallestNumber(std::vector<int>& nums) {\n    int smallest = std::numeric_limits<int>::max();\n    \n    for (int num : nums) {\n        if (num < smallest) {\n            smallest = num;\n        }\n    }\n    \n    return smallest;\n}"
        ]
    },
    {
        "id": "63",
        "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.",
        "solution": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ",
        "test": [
            "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
            "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
            "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
        ],
        "code": [
            "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) "
        ],
        "draft_plan": [
            "# Initialize the maximum difference to 0\n\n# Iterate through each pair in the list\n    # Calculate the difference between the maximum value and the minimum value in the current pair\n    # Check if the current difference is greater than the maximum difference\n        # If yes, update the maximum difference\n\n# Return the maximum difference"
        ],
        "requirements": [
            "import java.util.List;\n\npublic class MaximumDifference {\n    public static int findMaximumDifference(List<Tuple> tupleList) {\n        int maxDifference = 0;\n        \n        for (Tuple tuple : tupleList) {\n            int difference = tuple.getMax() - tuple.getMin();\n            \n            if (difference > maxDifference) {\n                maxDifference = difference;\n            }\n        }\n        \n        return maxDifference;\n    }\n}\n\npublic class Tuple {\n    private int min;\n    private int max;\n    \n    public Tuple(int min, int max) {\n        this.min = min;\n        this.max = max;\n    }\n    \n    public int getMin() {\n        return min;\n    }\n    \n    public int getMax() {\n        return max;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint maxDifference(const std::vector<std::pair<int, int>>& pairs) {\n    int maxDiff = 0;\n    for (const auto& pair : pairs) {\n        int diff = std::abs(pair.second - pair.first);\n        if (diff > maxDiff) {\n            maxDiff = diff;\n        }\n    }\n    return maxDiff;\n}"
        ]
    },
    {
        "id": "64",
        "prompt": "Write a function to sort a list of tuples using the second value of each tuple.",
        "solution": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks",
        "test": [
            "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
            "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
            "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
        ],
        "code": [
            "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks"
        ],
        "draft_plan": [
            "# Define a function that takes a list of tuples as input\n    # Sort the list of tuples based on the second value of each tuple using the sorted() function and a lambda function as the key\n\n# Return the sorted list of tuples"
        ],
        "requirements": [
            "import java.util.*;\n\nclass SortTuple {\n\n    public static void sortList(List<Tuple> list) {\n        Collections.sort(list, new Comparator<Tuple>() {\n            public int compare(Tuple t1, Tuple t2) {\n                return t1.getSecond() - t2.getSecond();\n            }\n        });\n    }\n}\n\nclass Tuple {\n    private int first;\n    private int second;\n    \n    public Tuple(int first, int second) {\n        this.first = first;\n        this.second = second;\n    }\n    \n    public int getFirst() {\n        return first;\n    }\n    \n    public int getSecond() {\n        return second;\n    }\n}\n"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nbool compareSecondValue(const std::pair<int, int>& a, const std::pair<int, int>& b) {\n    return a.second < b.second;\n}\n\nvoid sortTuplesBySecondValue(std::vector<std::pair<int, int>>& tuples) {\n    std::sort(tuples.begin(), tuples.end(), compareSecondValue);\n}\n"
        ]
    },
    {
        "id": "65",
        "prompt": "Write a function to flatten a list and sum all of its elements.",
        "solution": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total",
        "test": [
            "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
            "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
            "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
        ],
        "code": [
            "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total"
        ],
        "draft_plan": [
            "# Initialize the sum variable to 0\n\n# Iterate through each element in the input list\n    # Check if the current element is a list\n        # If it is a list, recursively flatten the list and add its sum to the total sum\n    # If the current element is not a list, add its value to the total sum\n\n# Return the total sum"
        ],
        "requirements": [
            "import java.util.List;\n\npublic class FlattenAndSum {\n    public static int flattenAndSum(List<Object> list) {\n        int sum = 0;\n        for (Object element : list) {\n            if (element instanceof List) {\n                sum += flattenAndSum((List<Object>) element);\n            } else {\n                sum += (int) element;\n            }\n        }\n        return sum;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint flattenAndSum(vector<int>& nums) {\n    int sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] == -1) continue;\n        \n        if (nums[i] < 0) {\n            sum += nums[i];\n            continue;\n        }\n        \n        int curr = nums[i];\n        nums[i] = -1;\n        \n        while (curr != -1) {\n            if (curr < 0) {\n                sum += curr;\n                break;\n            }\n            sum += curr;\n            curr = nums[curr];\n            nums[i] = -1;\n        }\n    }\n    return sum;\n}"
        ]
    },
    {
        "id": "66",
        "prompt": "Write a python function to count the number of positive numbers in a list.",
        "solution": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ",
        "test": [
            "assert pos_count([1,-2,3,-4]) == 2",
            "assert pos_count([3,4,5,-1]) == 3",
            "assert pos_count([1,2,3,4]) == 4"
        ],
        "code": [
            "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count "
        ],
        "draft_plan": [
            "# Initialize a counter variable to 0\n\n# Iterate through each number in the list\n    # Check if the number is greater than 0\n        # If it is, increment the counter variable\n\n# Return the counter variable"
        ],
        "requirements": [
            "import java.util.List;\n\npublic class PositiveNumberCounter {\n    public static int countPositiveNumbers(List<Integer> numbers) {\n        int count = 0;\n        \n        for (int number : numbers) {\n            if (number > 0) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nint countPositiveNumbers(const std::vector<int>& nums) {\n    int count = 0;\n    for (int num : nums) {\n        if (num > 0) {\n            count++;\n        }\n    }\n    return count;\n}"
        ]
    },
    {
        "id": "67",
        "prompt": "Write a function to find the number of ways to partition a set of Bell numbers.",
        "solution": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] ",
        "test": [
            "assert bell_number(2)==2",
            "assert bell_number(10)==115975",
            "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
        ],
        "code": [
            "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] "
        ],
        "draft_plan": [
            "# Define a function to calculate the Bell number of a given input\n    # Create a 2D array to store the values of the Bell numbers\n    # Initialize the first row and column of the array to 1\n\n    # Iterate through each row and column of the array\n        # Calculate the value of the current cell by summing the previous cell in the same row and the cell above it\n\n    # Return the value of the last cell in the last row, which represents the Bell number\n\n# Define a function to calculate the number of ways to partition a set using Bell numbers\n    # Calculate the Bell number of the input size\n    # Return the Bell number as the result"
        ],
        "requirements": [
            "public class BellNumbers {\n    public static int calculateBellNumber(int n) {\n        int[][] bellArray = new int[n + 1][n + 1];\n        bellArray[0][0] = 1;\n\n        for (int i = 1; i <= n; i++) {\n            bellArray[i][0] = bellArray[i - 1][i - 1];\n\n            for (int j = 1; j <= i; j++) {\n                bellArray[i][j] = bellArray[i - 1][j - 1] + bellArray[i][j - 1];\n            }\n        }\n\n        return bellArray[n][0];\n    }\n\n    public static int countPartitionWays(int n) {\n        return calculateBellNumber(n);\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\n// Function to calculate the Bell number\nint calculateBellNumber(int n) {\n    // Create a 2D vector to store the values of the Bell numbers\n    std::vector<std::vector<int>> bell(n+1, std::vector<int>(n+1, 0));\n\n    // Initialize the first row and column of the vector to 1\n    bell[0][0] = 1;\n\n    // Iterate through each row and column of the vector\n    for (int i = 1; i <= n; i++) {\n        bell[i][0] = bell[i-1][i-1];\n\n        for (int j = 1; j <= i; j++) {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n    }\n\n    // Return the value of the last cell in the last row, which represents the Bell number\n    return bell[n][0];\n}\n\n// Function to calculate the number of ways to partition a set using Bell numbers\nint calculatePartitionWays(int n) {\n    // Calculate the Bell number of the input size\n    int bellNumber = calculateBellNumber(n);\n\n    // Return the Bell number as the result\n    return bellNumber;\n}"
        ]
    },
    {
        "id": "68",
        "prompt": "Write a python function to check whether the given array is monotonic or not.",
        "solution": "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",
        "test": [
            "assert is_Monotonic([6, 5, 4, 4]) == True",
            "assert is_Monotonic([1, 2, 2, 3]) == True",
            "assert is_Monotonic([1, 3, 2]) == False"
        ],
        "code": [
            "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "
        ],
        "draft_plan": [
            "# Check if the input array is empty or has only one element\n    # If so, return True as an array with 0 or 1 element is considered monotonic\n\n# Initialize two flags to track whether the array is increasing or decreasing\n# Iterate through each element in the array starting from the second element\n    # Check if the current element is greater than the previous element\n        # If so, set the increasing flag to True\n    # Check if the current element is less than the previous element\n        # If so, set the decreasing flag to True\n\n# Check if both the increasing and decreasing flags are True\n    # If so, return False as the array is not monotonic\n    # Otherwise, return True as the array is monotonic"
        ],
        "requirements": [
            "public class MonotonicArray {\n    public static boolean isMonotonic(int[] arr) {\n        if (arr.length <= 1) {\n            return true;\n        }\n\n        boolean increasing = false;\n        boolean decreasing = false;\n\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] > arr[i-1]) {\n                increasing = true;\n            } else if (arr[i] < arr[i-1]) {\n                decreasing = true;\n            }\n\n            if (increasing && decreasing) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool isMonotonic(vector<int>& nums) {\n    if (nums.size() <= 1) {\n        return true;\n    }\n    \n    bool increasing = false;\n    bool decreasing = false;\n    \n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] > nums[i-1]) {\n            increasing = true;\n        }\n        if (nums[i] < nums[i-1]) {\n            decreasing = true;\n        }\n    }\n    \n    return !(increasing && decreasing);\n}"
        ]
    },
    {
        "id": "69",
        "prompt": "Write a function to check whether a list contains the given sublist or not.",
        "solution": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set",
        "test": [
            "assert is_sublist([2,4,3,5,7],[3,7])==False",
            "assert is_sublist([2,4,3,5,7],[4,3])==True",
            "assert is_sublist([2,4,3,5,7],[1,6])==False"
        ],
        "code": [
            "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set"
        ],
        "draft_plan": [
            "# Initialize a variable to keep track of the sublist index\n\n# Iterate through each element in the main list\n    # Check if the current element matches the first element of the sublist\n        # If matched, set the sublist index to the current index\n\n# Check if the sublist index is valid\n    # If valid, iterate through the sublist\n        # Check if each element of the sublist matches the corresponding element in the main list\n            # If not matched, return False\n\n# If all elements of the sublist are matched, return True\n# If sublist index is not valid, return False"
        ],
        "requirements": [
            "import java.util.List;\n\npublic class SublistChecker {\n\n    public static <T> boolean containsSublist(List<T> mainList, List<T> sublist) {\n        int sublistIndex = -1;\n\n        for (int i = 0; i < mainList.size(); i++) {\n            if (mainList.get(i).equals(sublist.get(0))) {\n                sublistIndex = i;\n                break;\n            }\n        }\n\n        if (sublistIndex != -1) {\n            for (int i = 0; i < sublist.size(); i++) {\n                if (!mainList.get(sublistIndex + i).equals(sublist.get(i))) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        return false;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool containsSublist(vector<int>& mainList, vector<int>& sublist) {\n    int sublistIndex = -1;\n    \n    for (int i = 0; i < mainList.size(); i++) {\n        if (mainList[i] == sublist[0]) {\n            sublistIndex = i;\n            break;\n        }\n    }\n    \n    if (sublistIndex != -1 && sublistIndex + sublist.size() <= mainList.size()) {\n        for (int i = 0; i < sublist.size(); i++) {\n            if (mainList[sublistIndex + i] != sublist[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    return false;\n}"
        ]
    },
    {
        "id": "70",
        "prompt": "Write a function to find whether all the given tuples have equal length or not.",
        "solution": "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1",
        "test": [
            "assert get_equal([(11, 22, 33), (44, 55, 66)]) == True",
            "assert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False",
            "assert get_equal([(1, 2), (3, 4)]) == True"
        ],
        "code": [
            "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1"
        ],
        "draft_plan": [
            "# Get the length of the first tuple in the given list of tuples\n    # Iterate through each tuple in the list starting from the second tuple\n        # Check if the length of the current tuple is not equal to the length of the first tuple\n            # If not equal, return False\n\n# If all tuples have equal length, return True"
        ],
        "requirements": [
            "import java.util.List;\n\npublic class TupleEqualityChecker {\n    public static boolean checkTupleEquality(List<List<Integer>> tuples) {\n        int firstTupleSize = tuples.get(0).size();\n\n        for (int i = 1; i < tuples.size(); i++) {\n            if (tuples.get(i).size() != firstTupleSize) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\nusing namespace std;\n\nbool allTuplesHaveEqualLength(vector<vector<int>>& tuples) {\n    int firstTupleLength = tuples[0].size();\n    \n    for (int i = 1; i < tuples.size(); i++) {\n        if (tuples[i].size() != firstTupleLength) {\n            return false;\n        }\n    }\n    \n    return true;\n}"
        ]
    },
    {
        "id": "71",
        "prompt": "Write a function to sort a list of elements.",
        "solution": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums",
        "test": [
            "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
            "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
            "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
        ],
        "code": [
            "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums"
        ],
        "draft_plan": [
            "# Use the built-in sorted() function to sort the list in ascending order\n# Return the sorted list\n\n# If you want to implement your own sorting algorithm, here's an example of a bubble sort algorithm:\n\n# Iterate through the list from the first element to the second-to-last element\n    # Iterate through the list from the first element to the last element - current iteration index\n        # Compare the current element with the next element\n            # If the current element is greater than the next element, swap them\n\n# Return the sorted list"
        ],
        "requirements": [
            "Here's an example of a simple sorting function in Java using the bubble sort algorithm:\n\n```java\nimport java.util.Arrays;\n\npublic class SortArray {\n\n    public static int[] sort(int[] arr) {\n        int n = arr.length;\n        \n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < n - i - 1; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    // Swap arr[j] and arr[j+1]\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n            }\n        }\n        \n        return arr;\n    }\n}\n```\n\nYou can call the `sort` function and pass in an array of integers to get the sorted array as the result."
        ],
        "final_plan": [
            "#include <vector>\nusing namespace std;\n\nvoid bubbleSort(vector<int>& arr) {\n    int n = arr.size();\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                swap(arr[j], arr[j + 1]);\n            }\n        }\n    }\n}\n\nvoid selectionSort(vector<int>& arr) {\n    int n = arr.size();\n    for (int i = 0; i < n - 1; i++) {\n        int minIndex = i;\n        for (int j = i + 1; j < n; j++) {\n            if (arr[j] < arr[minIndex]) {\n                minIndex = j;\n            }\n        }\n        swap(arr[i], arr[minIndex]);\n    }\n}\n\nvoid insertionSort(vector<int>& arr) {\n    int n = arr.size();\n    for (int i = 1; i < n; i++) {\n        int key = arr[i];\n        int j = i - 1;\n        while (j >= 0 && arr[j] > key) {\n            arr[j + 1] = arr[j];\n            j--;\n        }\n        arr[j + 1] = key;\n    }\n}"
        ]
    },
    {
        "id": "72",
        "prompt": "Write a python function to check whether the given number can be represented as the difference of two squares or not.",
        "solution": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False",
        "test": [
            "assert dif_Square(5) == True",
            "assert dif_Square(10) == False",
            "assert dif_Square(15) == True"
        ],
        "code": [
            "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False"
        ],
        "draft_plan": [
            "# Check if the given number is even\n    # If the number is even, it can be represented as the difference of two squares\n\n# Iterate through numbers from 1 to sqrt(number)\n    # Calculate the square of the current number\n    # Check if the difference between the square and the given number is a perfect square\n        # If the difference is a perfect square, the number can be represented as the difference of two squares\n\n# If no representation is found, return False"
        ],
        "requirements": [
            "import java.util.*;\n\npublic class DifferenceOfSquares {\n    public static boolean canRepresentAsDifferenceOfSquares(int number) {\n        if (number % 2 == 0) {\n            return true;\n        }\n\n        for (int i = 1; i <= Math.sqrt(number); i++) {\n            int square = i * i;\n            int difference = square - number;\n            \n            if (Math.sqrt(difference) == (int) Math.sqrt(difference)) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <cmath>\n\nbool isDifferenceOfSquares(int num) {\n    if (num % 2 == 0) {\n        return true;\n    }\n\n    for (int i = 1; i * i <= num; i++) {\n        int square = i * i;\n        int diff = num - square;\n        int sqrtDiff = sqrt(diff);\n        if (sqrtDiff * sqrtDiff == diff) {\n            return true;\n        }\n    }\n\n    return false;\n}"
        ]
    },
    {
        "id": "74",
        "prompt": "Write a function to check whether it follows the sequence given in the patterns array.",
        "solution": "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True",
        "test": [
            "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True",
            "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False",
            "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False"
        ],
        "code": [
            "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True"
        ],
        "draft_plan": [
            "# Initialize a variable to keep track of the current index in the patterns array\n\n# Iterate through each character in the input string\n    # Check if the current character matches the character at the current index in the patterns array\n        # If it matches, increment the index\n    # Check if the index has reached the end of the patterns array\n        # If it has, return True\n\n# If the loop completes without returning True, return False"
        ],
        "requirements": [
            "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nbool follows_pattern(string input, vector<char> patterns) {\n    int index = 0;\n    for (char ch : input) {\n        if (ch == patterns[index]) {\n            index++;\n        }\n        if (index == patterns.size()) {\n            return true;\n        }\n    }\n    return false;\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nbool followsPattern(string input, vector<char> patterns) {\n    int index = 0;\n\n    for (char c : input) {\n        if (c == patterns[index]) {\n            index++;\n        }\n\n        if (index == patterns.size()) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nint main() {\n    string input = \"abcxyzdef\";\n    vector<char> patterns = {'a', 'b', 'c', 'd', 'e', 'f'};\n\n    if (followsPattern(input, patterns)) {\n        cout << \"Input follows the pattern\";\n    } else {\n        cout << \"Input does not follow the pattern\";\n    }\n\n    return 0;\n}"
        ]
    },
    {
        "id": "75",
        "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
        "solution": "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res",
        "test": [
            "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]",
            "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]",
            "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]"
        ],
        "code": [
            "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res"
        ],
        "draft_plan": [
            "# Initialize an empty list to store the tuples that satisfy the condition\n\n# Iterate through each tuple in the given list\n    # Initialize a variable to keep track of whether all elements in the tuple are divisible by k\n    # Iterate through each element in the tuple\n        # Check if the element is not divisible by k\n            # If any element is not divisible by k, break out of the inner loop\n    # If all elements are divisible by k, append the tuple to the result list\n\n# Return the result list"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TupleDivisibleByK {\n    \n    public static List<List<Integer>> getTuplesDivisibleByK(List<List<Integer>> tuples, int k) {\n        List<List<Integer>> result = new ArrayList<>();\n        \n        for (List<Integer> tuple : tuples) {\n            boolean allDivisible = true;\n            for (int element : tuple) {\n                if (element % k != 0) {\n                    allDivisible = false;\n                    break;\n                }\n            }\n            if (allDivisible) {\n                result.add(tuple);\n            }\n        }\n        \n        return result;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <tuple>\n\nstd::vector<std::tuple<int, int, int>> findDivisibleTuples(std::vector<std::tuple<int, int, int>> tuples, int k) {\n    std::vector<std::tuple<int, int, int>> result;\n    \n    for (auto tuple : tuples) {\n        bool allDivisible = true;\n        \n        for (int i = 0; i < std::tuple_size<decltype(tuple)>::value; i++) {\n            if (std::get<i>(tuple) % k != 0) {\n                allDivisible = false;\n                break;\n            }\n        }\n        \n        if (allDivisible) {\n            result.push_back(tuple);\n        }\n    }\n    \n    return result;\n}"
        ]
    },
    {
        "id": "77",
        "prompt": "Write a python function to find whether a number is divisible by 11.",
        "solution": "def is_Diff(n): \n    return (n % 11 == 0) ",
        "test": [
            "assert is_Diff (12345) == False",
            "assert is_Diff(1212112) == True",
            "assert is_Diff(1212) == False"
        ],
        "code": [
            "def is_Diff(n): \n    return (n % 11 == 0) "
        ],
        "draft_plan": [
            "# Convert the number to a string\n# Initialize a variable `sum_even` to 0\n# Initialize a variable `sum_odd` to 0\n\n# Iterate through each digit in the string\n    # Check if the index of the digit is even\n        # If it is even, add the digit to `sum_even`\n    # If the index of the digit is odd\n        # If it is odd, add the digit to `sum_odd`\n\n# Calculate the absolute difference between `sum_even` and `sum_odd`\n# Check if the absolute difference is divisible by 11\n    # If it is divisible by 11, return True\n    # If it is not divisible by 11, return False"
        ],
        "requirements": [
            "public class DivisibleByEleven {\n\n    public static boolean isDivisibleByEleven(int number) {\n        // Convert the number to a string\n        String numberString = String.valueOf(number);\n        \n        // Initialize variables\n        int sumEven = 0;\n        int sumOdd = 0;\n        \n        // Iterate through each digit in the string\n        for (int i = 0; i < numberString.length(); i++) {\n            int digit = Character.getNumericValue(numberString.charAt(i));\n            \n            // Check if the index of the digit is even\n            if (i % 2 == 0) {\n                sumEven += digit;\n            }\n            // Check if the index of the digit is odd\n            else {\n                sumOdd += digit;\n            }\n        }\n        \n        // Calculate the absolute difference between sumEven and sumOdd\n        int absoluteDifference = Math.abs(sumEven - sumOdd);\n        \n        // Check if the absolute difference is divisible by 11\n        if (absoluteDifference % 11 == 0) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nbool isDivisibleBy11(int num) {\n    string str = to_string(num);\n    int sum_even = 0;\n    int sum_odd = 0;\n    \n    for (int i = 0; i < str.length(); i++) {\n        if (i % 2 == 0) {\n            sum_even += str[i] - '0';\n        } else {\n            sum_odd += str[i] - '0';\n        }\n    }\n    \n    int diff = abs(sum_even - sum_odd);\n    \n    if (diff % 11 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}"
        ]
    },
    {
        "id": "79",
        "prompt": "Write a python function to check whether the length of the word is odd or not.",
        "solution": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
        "test": [
            "assert word_len(\"Hadoop\") == False",
            "assert word_len(\"great\") == True",
            "assert word_len(\"structure\") == True"
        ],
        "code": [
            "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False"
        ],
        "draft_plan": [
            "# Check if the length of the word is divisible by 2\n    # If the length is divisible by 2, return False (not odd)\n    # If the length is not divisible by 2, return True (odd)"
        ],
        "requirements": [
            "public class WordLength {\n    public static boolean isOddLength(String word) {\n        return word.length() % 2 != 0;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\n\nbool isWordLengthOdd(std::string word) {\n    return word.length() % 2 != 0;\n}"
        ]
    },
    {
        "id": "80",
        "prompt": "Write a function to find the nth tetrahedral number.",
        "solution": "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6",
        "test": [
            "assert tetrahedral_number(5) == 35",
            "assert tetrahedral_number(6) == 56",
            "assert tetrahedral_number(7) == 84"
        ],
        "code": [
            "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6"
        ],
        "draft_plan": [
            "# Initialize a variable to store the current sum\n# Iterate from 1 to n (inclusive)\n    # Add the current number to the sum\n\n# Return the sum as the nth tetrahedral number"
        ],
        "requirements": [
            "public class TetrahedralNumber {\n    public static int nthTetrahedralNumber(int n) {\n        int sum = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        \n        return sum;\n    }\n}"
        ],
        "final_plan": [
            "public static int nthTetrahedralNumber(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += (i * (i + 1)) / 2;\n    }\n    return sum;\n}"
        ]
    },
    {
        "id": "82",
        "prompt": "Write a function to find the volume of a sphere.",
        "solution": "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume",
        "test": [
            "assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)",
            "assert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)",
            "assert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)"
        ],
        "code": [
            "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume"
        ],
        "draft_plan": [
            "To find the volume of a sphere, we can use the formula:\n\nvolume = (4/3) * \u03c0 * r^3\n\nwhere \u03c0 is a mathematical constant approximately equal to 3.14159 and r is the radius of the sphere.\n\nHere is the code logic to calculate the volume of a sphere:\n\n# Import the math module to access the value of \u03c0\nimport math\n\n# Define a function to calculate the volume of a sphere\ndef calculate_sphere_volume(radius):\n    # Calculate the volume using the formula\n    volume = (4/3) * math.pi * (radius**3)\n    \n    # Return the volume\n    return volume\n\n# Test the function\nradius = 5\nvolume = calculate_sphere_volume(radius)\nprint(\"The volume of the sphere is:\", volume)"
        ],
        "requirements": [
            "public class SphereVolume {\n    public static double calculateSphereVolume(double radius) {\n        double volume = (4.0/3.0) * Math.PI * Math.pow(radius, 3);\n        return volume;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\ndouble calculateSphereVolume(double radius) {\n    double volume = (4.0/3.0) * 3.14159 * (radius * radius * radius);\n    return volume;\n}\n\nint main() {\n    double radius = 5.0;\n    double volume = calculateSphereVolume(radius);\n    cout << \"The volume of the sphere is: \" << volume << endl;\n    \n    return 0;\n}"
        ]
    },
    {
        "id": "83",
        "prompt": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
        "solution": "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)",
        "test": [
            "assert get_Char(\"abc\") == \"f\"",
            "assert get_Char(\"gfg\") == \"t\"",
            "assert get_Char(\"ab\") == \"c\""
        ],
        "code": [
            "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)"
        ],
        "draft_plan": [
            "# Initialize a variable `total` to store the sum of ASCII values modulo 26\n# Iterate through each character in the input string\n    # Add the ASCII value of the current character to `total`\n# Compute the modulo 26 of `total`\n# Convert the result back to a character using the corresponding ASCII value\n# Return the character\n\n# Example implementation:\ndef find_character(string):\n    total = 0\n    for char in string:\n        total += ord(char)\n    result = total % 26\n    return chr(result + 65)  # Adding 65 to convert the result back to a character in uppercase\n\n# Testing the function\nprint(find_character(\"ABC\"))  # Output: M\nprint(find_character(\"XYZ\"))  # Output: O"
        ],
        "requirements": [
            "import java.util.*;\n\nclass Main {\n    public static char findCharacter(String str) {\n        int total = 0;\n        for (int i = 0; i < str.length(); i++) {\n            total += (int) str.charAt(i);\n        }\n        int result = total % 26;\n        return (char) (result + 65);\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\nusing namespace std;\n\nchar findCharacter(string str) {\n    int total = 0;\n    for (char ch : str) {\n        total += int(ch);\n    }\n    int result = total % 26;\n    return char(result + 65);  // Adding 65 to convert the result back to a character in uppercase\n}\n\nint main() {\n    string input;\n    cout << \"Enter a string: \";\n    cin >> input;\n    char character = findCharacter(input);\n    cout << \"Character made by adding the ASCII values modulo 26: \" << character << endl;\n    return 0;\n}"
        ]
    },
    {
        "id": "84",
        "prompt": "Write a function to find the nth number in the newman conway sequence.",
        "solution": "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))",
        "test": [
            "assert sequence(10) == 6",
            "assert sequence(2) == 1",
            "assert sequence(3) == 2"
        ],
        "code": [
            "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
        ],
        "draft_plan": [
            "# Create a list to store the Newman-Conway sequence with first two elements as 1 and 1\n# If n is 1 or 2, return 1\n\n# Iterate from index 3 to n\n    # Calculate the next element using the formula:\n        # sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n\n# Return the nth element of the sequence"
        ],
        "requirements": [
            "import java.util.Arrays;\n\npublic class NewmanConwaySequence {\n\n    public static int findNthNumber(int n) {\n        if (n == 1 || n == 2) {\n            return 1;\n        }\n\n        int[] sequence = new int[n + 1];\n        sequence[1] = 1;\n        sequence[2] = 1;\n\n        for (int i = 3; i <= n; i++) {\n            sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]];\n        }\n\n        return sequence[n];\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nint nthNumberInNewmanConwaySequence(int n) {\n    std::vector<int> sequence(n+1);\n    \n    // Base cases\n    sequence[1] = 1;\n    sequence[2] = 1;\n    \n    if (n == 1 || n == 2) {\n        return 1;\n    }\n    \n    // Iterate from index 3 to n\n    for (int i = 3; i <= n; i++) {\n        // Calculate the next element using the formula\n        sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]];\n    }\n    \n    return sequence[n];\n}"
        ]
    },
    {
        "id": "85",
        "prompt": "Write a function to find the surface area of a sphere.",
        "solution": "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea",
        "test": [
            "assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)",
            "assert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)",
            "assert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)"
        ],
        "code": [
            "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea"
        ],
        "draft_plan": [
            "To find the surface area of a sphere, we can use the formula:\n\nSurface Area = 4 * pi * r^2\n\nwhere r is the radius of the sphere.\n\nHere is the code logic to calculate the surface area of a sphere:\n\n1. Import the math module to access the value of pi.\n2. Define a function named calculate_surface_area that takes the radius of the sphere as a parameter.\n3. Calculate the surface area using the formula: surface_area = 4 * math.pi * radius ** 2.\n4. Return the surface area.\n5. Call the function with the desired radius to get the surface area of the sphere."
        ],
        "requirements": [
            "import java.lang.Math;\n\npublic class SphereSurfaceArea {\n    public static double calculateSurfaceArea(double radius) {\n        double surfaceArea = 4 * Math.PI * Math.pow(radius, 2);\n        return surfaceArea;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\ndouble calculateSurfaceArea(double radius) {\n    const double pi = 3.14159;\n    double surfaceArea = 4 * pi * pow(radius, 2);\n    return surfaceArea;\n}"
        ]
    },
    {
        "id": "86",
        "prompt": "Write a function to find nth centered hexagonal number.",
        "solution": "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1",
        "test": [
            "assert centered_hexagonal_number(10) == 271",
            "assert centered_hexagonal_number(2) == 7",
            "assert centered_hexagonal_number(9) == 217"
        ],
        "code": [
            "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1"
        ],
        "draft_plan": [
            "# Define a function to find the nth centered hexagonal number\n    # If n is 1, return 1 (the first centered hexagonal number)\n    # Otherwise, use the formula n * (2 * n - 1) to calculate the nth centered hexagonal number\n\n# Call the function with the desired value of n"
        ],
        "requirements": [
            "public class CenteredHexagonalNumber {\n    public static int findNthCenteredHexagonalNumber(int n) {\n        if (n == 1) {\n            return 1;\n        } else {\n            return n * (2 * n - 1);\n        }\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\nint findNthCenteredHexagonalNumber(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    else {\n        return n * (2 * n - 1);\n    }\n}\n\nint main() {\n    int n;\n    cout << \"Enter the value of n: \";\n    cin >> n;\n    int nthCenteredHexagonalNumber = findNthCenteredHexagonalNumber(n);\n    cout << \"The \" << n << \"th centered hexagonal number is: \" << nthCenteredHexagonalNumber << endl;\n    return 0;\n}"
        ]
    },
    {
        "id": "87",
        "prompt": "Write a function to merge three dictionaries into a single dictionary.",
        "solution": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict",
        "test": [
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
        ],
        "code": [
            "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict"
        ],
        "draft_plan": [
            "# Define a function that takes three dictionaries as input\n    # Create an empty dictionary to store the merged result\n    \n    # Iterate through each dictionary\n        # Iterate through each key-value pair in the current dictionary\n            # Add the key-value pair to the merged dictionary\n    \n    # Return the merged dictionary"
        ],
        "requirements": [
            "import java.util.*;\n\npublic class MergeDictionaries {\n\n    public static Map<String, Integer> mergeDictionaries(Map<String, Integer> dict1, Map<String, Integer> dict2, Map<String, Integer> dict3) {\n        Map<String, Integer> mergedDict = new HashMap<>();\n\n        for (Map.Entry<String, Integer> entry : dict1.entrySet()) {\n            mergedDict.put(entry.getKey(), entry.getValue());\n        }\n\n        for (Map.Entry<String, Integer> entry : dict2.entrySet()) {\n            mergedDict.put(entry.getKey(), entry.getValue());\n        }\n\n        for (Map.Entry<String, Integer> entry : dict3.entrySet()) {\n            mergedDict.put(entry.getKey(), entry.getValue());\n        }\n\n        return mergedDict;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <unordered_map>\n#include <map>\n\nusing namespace std;\n\nunordered_map<string, int> mergeThreeDictionaries(unordered_map<string, int>& dict1, unordered_map<string, int>& dict2, unordered_map<string, int>& dict3) {\n    unordered_map<string, int> mergedDict;\n    \n    for (const auto& pair : dict1) {\n        mergedDict[pair.first] = pair.second;\n    }\n    \n    for (const auto& pair : dict2) {\n        mergedDict[pair.first] = pair.second;\n    }\n    \n    for (const auto& pair : dict3) {\n        mergedDict[pair.first] = pair.second;\n    }\n    \n    return mergedDict;\n}"
        ]
    },
    {
        "id": "88",
        "prompt": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.",
        "solution": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count",
        "test": [
            "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})",
            "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})",
            "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})"
        ],
        "code": [
            "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count"
        ],
        "draft_plan": [
            "# Initialize an empty dictionary\n\n# Iterate through each element in the list\n    # Check if the element is already a key in the dictionary\n        # If it is, increment its value by 1\n        # If it is not, add it to the dictionary with a value of 1\n\n# Return the dictionary containing the frequencies of each element"
        ],
        "requirements": [
            "import java.util.HashMap;\nimport java.util.Map;\n\npublic class FrequencyCounter {\n    public static <T> Map<T, Integer> getFrequency(List<T> list) {\n        Map<T, Integer> frequencyMap = new HashMap<>();\n\n        for (T element : list) {\n            frequencyMap.put(element, frequencyMap.getOrDefault(element, 0) + 1);\n        }\n\n        return frequencyMap;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <unordered_map>\n#include <vector>\n\nstd::unordered_map<int, int> getFrequency(std::vector<int> arr) {\n    std::unordered_map<int, int> frequency;\n    \n    for (int num : arr) {\n        frequency[num]++;\n    }\n    \n    return frequency;\n}"
        ]
    },
    {
        "id": "89",
        "prompt": "Write a function to find the closest smaller number than n.",
        "solution": "def closest_num(N):\n  return (N - 1)",
        "test": [
            "assert closest_num(11) == 10",
            "assert closest_num(7) == 6",
            "assert closest_num(12) == 11"
        ],
        "code": [
            "def closest_num(N):\n  return (N - 1)"
        ],
        "draft_plan": [
            "# Initialize a variable \"closest\" to None\n\n# Iterate from n-1 to 0\n    # Check if the current number is smaller than n and assign it to \"closest\"\n        # Break the loop if a smaller number is found\n\n# Return the \"closest\" value if it exists, otherwise return None"
        ],
        "requirements": [
            "import java.util.*;\n\npublic class ClosestSmallerNumber {\n    public static Integer findClosestSmallerNumber(int n) {\n        Integer closest = null;\n        \n        for (int i = n - 1; i >= 0; i--) {\n            if (i < n) {\n                closest = i;\n                break;\n            }\n        }\n        \n        return closest;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\nint closestSmallerNumber(int n) {\n    int closest = -1;\n    \n    for (int i = n - 1; i >= 0; i--) {\n        if (i < n) {\n            closest = i;\n            break;\n        }\n    }\n    \n    return closest;\n}"
        ]
    },
    {
        "id": "90",
        "prompt": "Write a python function to find the length of the longest word.",
        "solution": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max",
        "test": [
            "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
            "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
            "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
        ],
        "code": [
            "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max"
        ],
        "draft_plan": [
            "# Split the input string into words\n# Initialize a variable `max_length` to store the length of the longest word\n\n# Iterate through each word in the list of words\n    # Check if the length of the current word is greater than `max_length`\n        # If so, update `max_length` with the length of the current word\n\n# Return the value of `max_length`"
        ],
        "requirements": [
            "import java.util.Arrays;\nimport java.util.List;\n\npublic class LongestWordLength {\n    public static int findLongestWordLength(String sentence) {\n        List<String> words = Arrays.asList(sentence.split(\" \"));\n        int maxLength = 0;\n\n        for (String word : words) {\n            int length = word.length();\n            if (length > maxLength) {\n                maxLength = length;\n            }\n        }\n\n        return maxLength;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\n\nint longestWordLength(const std::string& sentence) {\n    std::string word;\n    int maxLength = 0;\n    int currentLength = 0;\n    \n    for (char c : sentence) {\n        if (c == ' ') {\n            if (currentLength > maxLength) {\n                maxLength = currentLength;\n            }\n            currentLength = 0;\n            continue;\n        }\n        \n        currentLength++;\n    }\n    \n    if (currentLength > maxLength) {\n        maxLength = currentLength;\n    }\n    \n    return maxLength;\n}"
        ]
    },
    {
        "id": "91",
        "prompt": "Write a function to check if a string is present as a substring in a given list of string values.",
        "solution": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False",
        "test": [
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
        ],
        "code": [
            "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False"
        ],
        "draft_plan": [
            "# Iterate through each string in the list of strings\n    # Check if the input string is a substring of the current string\n        # If it is, return True\n\n# If no match is found, return False"
        ],
        "requirements": [
            "import java.util.List;\n\npublic class SubstringChecker {\n    public static boolean isSubstringPresent(String inputString, List<String> stringList) {\n        for (String str : stringList) {\n            if (str.contains(inputString)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nbool isSubstringPresent(vector<string> strings, string substr) {\n    for (string str : strings) {\n        if (str.find(substr) != string::npos) {\n            return true;\n        }\n    }\n    return false;\n}"
        ]
    },
    {
        "id": "92",
        "prompt": "Write a function to check whether the given number is undulating or not.",
        "solution": "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True",
        "test": [
            "assert is_undulating(1212121) == True",
            "assert is_undulating(1991) == False",
            "assert is_undulating(121) == True"
        ],
        "code": [
            "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True"
        ],
        "draft_plan": [
            "# Convert the number to a string\n\n# Check if the length of the string is less than 3\n    # If yes, return False as an undulating number must have at least 3 digits\n\n# Iterate through each digit in the string starting from the second digit\n    # Check if the current digit is equal to the previous digit\n        # If yes, return False as an undulating number cannot have consecutive equal digits\n\n# Iterate through each digit in the string starting from the third digit\n    # Check if the current digit has the same parity (odd or even) as the previous digit\n        # If yes, return False as an undulating number must have alternating parity between consecutive digits\n\n# If all conditions are satisfied, return True as the number is undulating"
        ],
        "requirements": [
            "public class UndulatingNumberChecker {\n    public static boolean isUndulatingNumber(int number) {\n        String numberString = String.valueOf(number);\n        \n        if (numberString.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 1; i < numberString.length(); i++) {\n            if (numberString.charAt(i) == numberString.charAt(i - 1)) {\n                return false;\n            }\n        }\n        \n        for (int i = 2; i < numberString.length(); i++) {\n            if (Character.getNumericValue(numberString.charAt(i)) % 2 == \n                    Character.getNumericValue(numberString.charAt(i - 2)) % 2) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nbool isUndulatingNumber(int num) {\n    string numStr = to_string(num);\n    int n = numStr.length();\n    \n    if (n < 3) {\n        return false;\n    }\n    \n    for (int i = 1; i < n; i++) {\n        if (numStr[i] == numStr[i - 1]) {\n            return false;\n        }\n    }\n    \n    for (int i = 2; i < n; i++) {\n        if ((numStr[i] - '0') % 2 == (numStr[i - 1] - '0') % 2) {\n            return false;\n        }\n    }\n    \n    return true;\n}"
        ]
    },
    {
        "id": "93",
        "prompt": "Write a function to calculate the value of 'a' to the power 'b'.",
        "solution": "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)",
        "test": [
            "assert power(3,4) == 81",
            "assert power(2,3) == 8",
            "assert power(5,5) == 3125"
        ],
        "code": [
            "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)"
        ],
        "draft_plan": [
            "# Initialize a variable 'result' to 1\n\n# If the exponent 'b' is positive\n    # Iterate 'b' times\n        # Multiply 'result' by 'a'\n\n# If the exponent 'b' is negative\n    # Iterate 'b' times\n        # Divide 'result' by 'a'\n\n# Return the 'result' value"
        ],
        "requirements": [
            "public class PowerCalculator {\n    public static double power(double a, int b) {\n        double result = 1;\n        \n        if (b > 0) {\n            for (int i = 0; i < b; i++) {\n                result *= a;\n            }\n        } else if (b < 0) {\n            for (int i = 0; i > b; i--) {\n                result /= a;\n            }\n        }\n        \n        return result;\n    }\n}"
        ],
        "final_plan": [
            "class PowerCalculator {\npublic:\n    static double calculatePower(double a, int b) {\n        double result = 1;\n        \n        if (b > 0) {\n            for (int i = 0; i < b; i++) {\n                result *= a;\n            }\n        } else if (b < 0) {\n            for (int i = 0; i < -b; i++) {\n                result /= a;\n            }\n        }\n        \n        return result;\n    }\n};"
        ]
    },
    {
        "id": "94",
        "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
        "solution": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ",
        "test": [
            "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
            "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
            "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
        ],
        "code": [
            "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) "
        ],
        "draft_plan": [
            "# Initialize a variable `min_val` to store the minimum second value\n# Initialize a variable `result` to store the first value of the tuple with the smallest second value\n\n# Iterate through each tuple in the list\n    # Check if the second value of the current tuple is smaller than `min_val`\n        # If it is, update `min_val` to the second value of the current tuple\n        # Update `result` to the first value of the current tuple\n\n# Return `result`"
        ],
        "requirements": [
            "import java.util.List;\nimport java.util.Comparator;\n\npublic class TupleUtils {\n    public static <T> T getFirstSmallestSecondValue(List<Tuple<T, Integer>> tuples) {\n        T result = null;\n        Integer minVal = Integer.MAX_VALUE;\n\n        for (Tuple<T, Integer> tuple : tuples) {\n            Integer secondVal = tuple.getSecond();\n            if (secondVal < minVal) {\n                minVal = secondVal;\n                result = tuple.getFirst();\n            }\n        }\n\n        return result;\n    }\n}\n\nclass Tuple<T, U> {\n    private final T first;\n    private final U second;\n\n    public Tuple(T first, U second) {\n        this.first = first;\n        this.second = second;\n    }\n\n    public T getFirst() {\n        return first;\n    }\n\n    public U getSecond() {\n        return second;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <tuple>\n\nint getFirstValueWithSmallestSecondValue(std::vector<std::tuple<int, int>>& tuples) {\n    int min_val = std::get<1>(tuples[0]);\n    int result = std::get<0>(tuples[0]);\n    \n    for (const auto& tuple : tuples) {\n        int second_val = std::get<1>(tuple);\n        if (second_val < min_val) {\n            min_val = second_val;\n            result = std::get<0>(tuple);\n        }\n    }\n    \n    return result;\n}"
        ]
    },
    {
        "id": "95",
        "prompt": "Write a python function to find the length of the smallest list in a list of lists.",
        "solution": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength ",
        "test": [
            "assert Find_Min_Length([[1],[1,2]]) == 1",
            "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
            "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
        ],
        "code": [
            "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength "
        ],
        "draft_plan": [
            "# Initialize the minimum length to a large number\n\n# Iterate through each list in the list of lists\n    # Get the length of the current list\n    # Check if the length is smaller than the current minimum length\n        # If so, update the minimum length\n\n# Return the minimum length"
        ],
        "requirements": [
            "import java.util.List;\n\npublic class SmallestListLength {\n    public static int findSmallestListLength(List<List<Integer>> lists) {\n        int minLength = Integer.MAX_VALUE;\n        \n        for (List<Integer> list : lists) {\n            int currentLength = list.size();\n            \n            if (currentLength < minLength) {\n                minLength = currentLength;\n            }\n        }\n        \n        return minLength;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint findSmallestListLength(vector<vector<int>>& lists) {\n    int minLength = INT_MAX;\n    \n    for (const vector<int>& list : lists) {\n        int length = list.size();\n        if (length < minLength) {\n            minLength = length;\n        }\n    }\n    \n    return minLength;\n}"
        ]
    },
    {
        "id": "96",
        "prompt": "Write a python function to find the number of divisors of a given integer.",
        "solution": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x",
        "test": [
            "assert divisor(15) == 4",
            "assert divisor(12) == 6",
            "assert divisor(9) == 3"
        ],
        "code": [
            "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x"
        ],
        "draft_plan": [
            "# Initialize a count variable to 0\n\n# Iterate through numbers from 1 to the given integer\n    # Check if the current number is a divisor of the given integer\n        # If it is, increment the count\n\n# Return the count"
        ],
        "requirements": [
            "public class Divisors {\n    public static int countDivisors(int num) {\n        int count = 0;\n        \n        for (int i = 1; i <= num; i++) {\n            if (num % i == 0) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\nint countDivisors(int num) {\n    int count = 0;\n    for (int i = 1; i <= num; i++) {\n        if (num % i == 0) {\n            count++;\n        }\n    }\n    return count;\n}"
        ]
    },
    {
        "id": "97",
        "prompt": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.",
        "solution": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n",
        "test": [
            "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
            "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
            "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
        ],
        "code": [
            "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n"
        ],
        "draft_plan": [
            "# Create an empty dictionary to store the frequency of each element\n\n# Iterate through each sublist in the flattened list\n    # Iterate through each element in the sublist\n        # Check if the element is already present in the dictionary\n            # If yes, increment its frequency by 1\n            # If not, add the element to the dictionary with a frequency of 1\n\n# Return the dictionary containing the frequency of each element"
        ],
        "requirements": [
            "import java.util.*;\n\npublic class FrequencyCounter {\n\n    public static Map<Integer, Integer> findFrequency(List<List<Integer>> flattenedList) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        for (List<Integer> sublist : flattenedList) {\n            for (int element : sublist) {\n                if (frequencyMap.containsKey(element)) {\n                    frequencyMap.put(element, frequencyMap.get(element) + 1);\n                } else {\n                    frequencyMap.put(element, 1);\n                }\n            }\n        }\n        \n        return frequencyMap;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <unordered_map>\n\nstd::unordered_map<int, int> findFrequency(std::vector<std::vector<int>> flattenedList) {\n    std::unordered_map<int, int> frequency;\n    for (const auto& sublist : flattenedList) {\n        for (const auto& element : sublist) {\n            frequency[element]++;\n        }\n    }\n    return frequency;\n}"
        ]
    },
    {
        "id": "98",
        "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
        "solution": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ",
        "test": [
            "assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)",
            "assert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)",
            "assert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)"
        ],
        "code": [
            "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) "
        ],
        "draft_plan": [
            "# Define a function that takes a list as input\n    # Initialize a variable `product` to 1\n    # Iterate through each number in the list\n        # Multiply the current number with the `product` variable\n    # Divide the `product` by the length of the list\n    # Return the result\n\n# Call the function with a list of numbers as an argument"
        ],
        "requirements": [
            "import java.util.List;\n\npublic class MultiplyAndDivide {\n    public static double multiplyAndDivide(List<Integer> numbers) {\n        double product = 1;\n        for (int number : numbers) {\n            product *= number;\n        }\n        return product / numbers.size();\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\ndouble multiplyAndDivide(vector<int> numbers) {\n    double product = 1;\n    int length = numbers.size();\n    \n    for (int i = 0; i < length; i++) {\n        product *= numbers[i];\n    }\n    \n    return product / length;\n}"
        ]
    },
    {
        "id": "99",
        "prompt": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
        "solution": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") ",
        "test": [
            "assert decimal_to_binary(8) == '1000'",
            "assert decimal_to_binary(18) == '10010'",
            "assert decimal_to_binary(7) == '111'"
        ],
        "code": [
            "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") "
        ],
        "draft_plan": [
            "# Initialize an empty string to store the binary representation\n# Check if the given decimal number is 0\n    # If it is, return \"0\" as the binary representation\n\n# Iterate until the decimal number is greater than 0\n    # Calculate the remainder when the decimal number is divided by 2\n    # Convert the remainder to a string and append it to the binary representation\n    # Update the decimal number to be the quotient when divided by 2\n\n# Reverse the binary representation string\n# Return the binary representation"
        ],
        "requirements": [
            "public class DecimalToBinary {\n    public static String decimalToBinary(int decimal) {\n        if (decimal == 0) {\n            return \"0\";\n        }\n\n        StringBuilder binary = new StringBuilder();\n        while (decimal > 0) {\n            int remainder = decimal % 2;\n            binary.append(remainder);\n            decimal /= 2;\n        }\n\n        return binary.reverse().toString();\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring decimalToBinary(int decimal) {\n    string binary = \"\";\n    \n    if (decimal == 0) {\n        return \"0\";\n    }\n    \n    while (decimal > 0) {\n        int remainder = decimal % 2;\n        binary += to_string(remainder);\n        decimal /= 2;\n    }\n    \n    reverse(binary.begin(), binary.end());\n    \n    return binary;\n}"
        ]
    },
    {
        "id": "100",
        "prompt": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
        "solution": "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i",
        "test": [
            "assert next_smallest_palindrome(99)==101",
            "assert next_smallest_palindrome(1221)==1331",
            "assert next_smallest_palindrome(120)==121"
        ],
        "code": [
            "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i"
        ],
        "draft_plan": [
            "# Convert the input number to a string\n# Initialize a flag variable to keep track of whether a palindrome greater than the input number has been found\n# Initialize a variable to store the next smallest palindrome\n\n# If the input number is less than 9, the next smallest palindrome is always 9\n# If the input number is 9, return 11 as the next smallest palindrome\n\n# Otherwise, iterate from the input number plus 1 onwards\n    # Convert each number to a string and check if it is a palindrome\n        # If it is a palindrome, set the flag variable to True and store the palindrome as the next smallest palindrome\n        # If a palindrome greater than the input number has been found, break the loop\n\n# If a palindrome greater than the input number has been found, return the next smallest palindrome as an integer\n# Otherwise, return -1 to indicate that no palindrome greater than the input number has been found"
        ],
        "requirements": [
            "import java.util.*;\n\npublic class NextSmallestPalindrome {\n    \n    public static int nextSmallestPalindrome(int num) {\n        String numString = String.valueOf(num);\n        int nextPalindrome = -1;\n        boolean foundPalindrome = false;\n\n        if (num < 9) {\n            return 9;\n        }\n        \n        if (num == 9) {\n            return 11;\n        }\n\n        for (int i = num + 1; ; i++) {\n            String iString = String.valueOf(i);\n            if (isPalindrome(iString)) {\n                foundPalindrome = true;\n                nextPalindrome = i;\n                break;\n            }\n        }\n\n        if (foundPalindrome) {\n            return nextPalindrome;\n        } else {\n            return -1;\n        }\n    }\n\n    private static boolean isPalindrome(String str) {\n        StringBuilder sb = new StringBuilder(str);\n        String reversedStr = sb.reverse().toString();\n        return str.equals(reversedStr);\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\n\nbool isPalindrome(std::string str) {\n    int left = 0;\n    int right = str.length() - 1;\n    \n    while (left < right) {\n        if (str[left] != str[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    \n    return true;\n}\n\nint nextSmallestPalindrome(int num) {\n    std::string strNum = std::to_string(num);\n    int nextPalindrome = -1;\n    bool found = false;\n    \n    if (num < 9) {\n        return 9;\n    }\n    \n    if (num == 9) {\n        return 11;\n    }\n    \n    for (int i = num + 1; ; i++) {\n        std::string str = std::to_string(i);\n        \n        if (isPalindrome(str)) {\n            nextPalindrome = i;\n            found = true;\n            break;\n        }\n    }\n    \n    if (found) {\n        return nextPalindrome;\n    } else {\n        return -1;\n    }\n}\n\n// Test the function\nint main() {\n    int num = 12345;\n    int nextPal = nextSmallestPalindrome(num);\n    std::cout << \"The next smallest palindrome after \" << num << \" is: \" << nextPal << std::endl;\n    \n    return 0;\n}"
        ]
    },
    {
        "id": "101",
        "prompt": "Write a function to find the kth element in the given array using 1-based indexing.",
        "solution": "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]",
        "test": [
            "assert kth_element([12,3,5,7,19], 2) == 3",
            "assert kth_element([17,24,8,23], 3) == 8",
            "assert kth_element([16,21,25,36,4], 4) == 36"
        ],
        "code": [
            "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]"
        ],
        "draft_plan": [
            "# Sort the given array in ascending order\n\n# Check if the given index is within the range of the array\n    # If it is, return the element at the given index\n\n# If the given index is out of range, return None"
        ],
        "requirements": [
            "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint findKthElement(vector<int>& arr, int k) {\n    sort(arr.begin(), arr.end());\n\n    if (k >= 1 && k <= arr.size()) {\n        return arr[k - 1];\n    }\n\n    return -1; // Return -1 if the index is out of range\n}\n"
        ],
        "final_plan": [
            "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nint findKthElement(int arr[], int n, int k) {\n    // Sort the array in ascending order\n    sort(arr, arr + n);\n    \n    // Check if the given index is within range\n    if (k >= 1 && k <= n) {\n        return arr[k - 1];\n    }\n    \n    // If the given index is out of range, return -1\n    return -1;\n}"
        ]
    },
    {
        "id": "102",
        "prompt": "Write a function to convert a snake case string to camel case string.",
        "solution": "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "test": [
            "assert snake_to_camel('python_program')=='PythonProgram'",
            "assert snake_to_camel('python_language')==('PythonLanguage')",
            "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
        ],
        "code": [
            "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))"
        ],
        "draft_plan": [
            "# Split the input snake case string by underscore to get individual words\n# Capitalize the first character of each word except the first word\n# Join the capitalized words together to form the camel case string\n# Return the camel case string"
        ],
        "requirements": [
            "import java.util.Arrays;\nimport java.util.stream.Collectors;\n\npublic class SnakeToCamel {\n    public static String convertToCamelCase(String snakeCase) {\n        String[] words = snakeCase.split(\"_\");\n        StringBuilder camelCase = new StringBuilder(words[0]);\n\n        for (int i = 1; i < words.length; i++) {\n            String capitalizedWord = words[i].substring(0, 1).toUpperCase() + words[i].substring(1);\n            camelCase.append(capitalizedWord);\n        }\n\n        return camelCase.toString();\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\n#include <sstream>\n\nstd::string snakeToCamel(const std::string& snakeCase) {\n    std::stringstream ss(snakeCase);\n    std::string word;\n    std::string camelCase;\n    \n    // Get words from the snake case string\n    while (std::getline(ss, word, '_')) {\n        // Capitalize the first character of each word except the first word\n        if (!camelCase.empty()) {\n            word[0] = std::toupper(word[0]);\n        }\n        camelCase += word;\n    }\n    \n    return camelCase;\n}"
        ]
    },
    {
        "id": "103",
        "prompt": "Write a function to find the Eulerian number a(n, m).",
        "solution": "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",
        "test": [
            "assert eulerian_num(3, 1) == 4",
            "assert eulerian_num(4, 1) == 11",
            "assert eulerian_num(5, 3) == 26"
        ],
        "code": [
            "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"
        ],
        "draft_plan": [
            "# Create a 2D array to store the Eulerian numbers\n# Initialize the first row and column of the array with values based on the Eulerian formula\n\n# Iterate through each row and column in the array\n    # Calculate the Eulerian number using the formula: A(n, m) = (m+1) * A(n-1, m) + (n-m) * A(n-1, m-1)\n\n# Return the value of the Eulerian number at the given row and column"
        ],
        "requirements": [
            "import java.util.Arrays;\n\npublic class EulerianNumber {\n\n    public static long eulerianNumber(int n, int m) {\n        long[][] eulerian = new long[n + 1][m + 1];\n\n        for (int i = 0; i <= n; i++) {\n            eulerian[i][0] = 1;\n        }\n\n        for (int j = 1; j <= m; j++) {\n            eulerian[0][j] = 0;\n        }\n\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= m; j++) {\n                eulerian[i][j] = (j + 1) * eulerian[i - 1][j] + (i - j) * eulerian[i - 1][j - 1];\n            }\n        }\n\n        return eulerian[n][m];\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nint eulerianNumber(int n, int m) {\n    std::vector<std::vector<int>> eulerian(n+1, std::vector<int>(m+1, 0));\n    \n    for (int i = 0; i <= n; i++) {\n        for (int j = 0; j <= m; j++) {\n            if (i == 0 || j == 0) {\n                eulerian[i][j] = 0;\n            }\n            else if (i == 1 && j == 0) {\n                eulerian[i][j] = 1;\n            }\n            else if (j == 0) {\n                eulerian[i][j] = 0;\n            }\n            else {\n                eulerian[i][j] = (j+1) * eulerian[i-1][j] + (i-j) * eulerian[i-1][j-1];\n            }\n        }\n    }\n    \n    return eulerian[n][m];\n}"
        ]
    },
    {
        "id": "104",
        "prompt": "Write a function to sort each sublist of strings in a given list of lists.",
        "solution": "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n",
        "test": [
            "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
            "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
            "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
        ],
        "code": [
            "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n"
        ],
        "draft_plan": [
            "# Iterate through each sublist in the given list\n    # Sort the sublist using the sorted() function\n\n# Return the modified list"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class SortSublists {\n    public static List<List<String>> sortSublists(List<List<String>> inputList) {\n        for (List<String> sublist : inputList) {\n            Collections.sort(sublist);\n        }\n        return inputList;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvoid sortSublists(vector<vector<string>>& lists) {\n    for (auto& sublist : lists) {\n        sort(sublist.begin(), sublist.end());\n    }\n}\n\nint main() {\n    vector<vector<string>> lists = {{\"apple\", \"banana\", \"cherry\"}, {\"dog\", \"cat\", \"elephant\"}, {\"car\", \"bike\", \"bus\"}};\n    \n    sortSublists(lists);\n    \n    for (const auto& sublist : lists) {\n        for (const auto& item : sublist) {\n            cout << item << \" \";\n        }\n        cout << endl;\n    }\n    \n    return 0;\n}"
        ]
    },
    {
        "id": "105",
        "prompt": "Write a python function to count true booleans in the given list.",
        "solution": "def count(lst):   \n    return sum(lst) ",
        "test": [
            "assert count([True,False,True]) == 2",
            "assert count([False,False]) == 0",
            "assert count([True,True,True]) == 3"
        ],
        "code": [
            "def count(lst):   \n    return sum(lst) "
        ],
        "draft_plan": [
            "# Initialize a count variable to 0\n\n# Iterate through each element in the list\n    # Check if the element is a boolean and is True\n        # If so, increment the count\n\n# Return the count"
        ],
        "requirements": [
            "import java.util.List;\n\npublic class BooleanCount {\n    public static int countTrueBooleans(List<Boolean> list) {\n        int count = 0;\n        for (Boolean bool : list) {\n            if (bool != null && bool) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nint countTrueBooleans(std::vector<bool> boolList) {\n    int count = 0;\n    for (bool element : boolList) {\n        if (element == true) {\n            count++;\n        }\n    }\n    return count;\n}"
        ]
    },
    {
        "id": "106",
        "prompt": "Write a function to append the given list to the given tuples.",
        "solution": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) ",
        "test": [
            "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
            "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
            "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
        ],
        "code": [
            "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) "
        ],
        "draft_plan": [
            "# Create a new list to store the updated tuples\n\n# Iterate through each tuple in the given tuples\n    # Append the given list to the current tuple\n    # Add the updated tuple to the new list\n\n# Return the new list containing the updated tuples"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TupleAppender {\n    \n    public static List<List<Object>> appendToList(List<List<Object>> tuples, List<Object> list) {\n        List<List<Object>> updatedTuples = new ArrayList<>();\n        \n        for (List<Object> tuple : tuples) {\n            List<Object> updatedTuple = new ArrayList<>(tuple);\n            updatedTuple.addAll(list);\n            updatedTuples.add(updatedTuple);\n        }\n        \n        return updatedTuples;\n    }\n    \n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <tuple>\n\nstd::vector<std::tuple<int, int, std::vector<int>>> appendToList(std::vector<std::tuple<int, int>> tuples, std::vector<int> list) {\n    std::vector<std::tuple<int, int, std::vector<int>>> updatedTuples;\n    \n    for (const auto& tuple : tuples) {\n        int a = std::get<0>(tuple);\n        int b = std::get<1>(tuple);\n        \n        std::vector<int> updatedList = list;\n        std::tuple<int, int, std::vector<int>> updatedTuple = std::make_tuple(a, b, updatedList);\n        \n        updatedTuples.push_back(updatedTuple);\n    }\n    \n    return updatedTuples;\n}"
        ]
    },
    {
        "id": "108",
        "prompt": "Write a function to merge three lists into a single sorted list.",
        "solution": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)",
        "test": [
            "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
            "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
            "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
        ],
        "code": [
            "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)"
        ],
        "draft_plan": [
            "# Create an empty list to store the merged and sorted list\n\n# While all three input lists are not empty:\n    # Compare the first element of each list\n        # Append the smallest element to the merged list\n        # Remove the appended element from its respective list\n\n# If any of the lists still have elements remaining:\n    # Append all remaining elements to the merged list\n\n# Return the merged and sorted list"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class MergeThreeLists {\n    public static List<Integer> mergeLists(List<Integer> list1, List<Integer> list2, List<Integer> list3) {\n        List<Integer> mergedList = new ArrayList<>();\n\n        while (!list1.isEmpty() && !list2.isEmpty() && !list3.isEmpty()) {\n            if (list1.get(0) <= list2.get(0) && list1.get(0) <= list3.get(0)) {\n                mergedList.add(list1.get(0));\n                list1.remove(0);\n            } else if (list2.get(0) <= list1.get(0) && list2.get(0) <= list3.get(0)) {\n                mergedList.add(list2.get(0));\n                list2.remove(0);\n            } else {\n                mergedList.add(list3.get(0));\n                list3.remove(0);\n            }\n        }\n\n        mergedList.addAll(list1);\n        mergedList.addAll(list2);\n        mergedList.addAll(list3);\n\n        return mergedList;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> mergeThreeLists(vector<int> list1, vector<int> list2, vector<int> list3) {\n    vector<int> mergedList;\n    \n    while (!list1.empty() && !list2.empty() && !list3.empty()) {\n        int minElement = min(min(list1[0], list2[0]), list3[0]);\n        mergedList.push_back(minElement);\n        \n        if (minElement == list1[0]) {\n            list1.erase(list1.begin());\n        } else if (minElement == list2[0]) {\n            list2.erase(list2.begin());\n        } else {\n            list3.erase(list3.begin());\n        }\n    }\n    \n    for (int element : list1) {\n        mergedList.push_back(element);\n    }\n    \n    for (int element : list2) {\n        mergedList.push_back(element);\n    }\n    \n    for (int element : list3) {\n        mergedList.push_back(element);\n    }\n    \n    return mergedList;\n}"
        ]
    },
    {
        "id": "109",
        "prompt": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
        "solution": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ",
        "test": [
            "assert odd_Equivalent(\"011001\",6) == 3",
            "assert odd_Equivalent(\"11011\",5) == 4",
            "assert odd_Equivalent(\"1010\",4) == 2"
        ],
        "code": [
            "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count "
        ],
        "draft_plan": [
            "# Initialize a counter variable to keep track of the number of odd values\n# Iterate through the binary string the given number of times\n    # Check if the last character of the binary string is '1'\n        # If it is, increment the counter variable\n\n# Return the counter variable"
        ],
        "requirements": [
            "public class BinaryRotation {\n    \n    public static int countOddValues(String binaryString, int rotations) {\n        int count = 0;\n        int n = binaryString.length();\n        \n        for (int i = 0; i < rotations; i++) {\n            char lastChar = binaryString.charAt(n - 1);\n            \n            if (lastChar == '1') {\n                count++;\n            }\n            \n            binaryString = lastChar + binaryString.substring(0, n - 1);\n        }\n        \n        return count;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\nusing namespace std;\n\nint countOddValues(string binaryString, int rotations) {\n    int counter = 0;\n    for (int i = 0; i < rotations; i++) {\n        if (binaryString.back() == '1') {\n            counter++;\n        }\n        binaryString.insert(binaryString.begin(), binaryString.back());\n        binaryString.pop_back();\n    }\n    return counter;\n}"
        ]
    },
    {
        "id": "111",
        "prompt": "Write a function to find the common elements in given nested lists.",
        "solution": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result",
        "test": [
            "assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])",
            "assert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])",
            "assert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])"
        ],
        "code": [
            "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result"
        ],
        "draft_plan": [
            "# Initialize an empty set to store the common elements\n\n# Iterate through the first list in the nested lists\n    # Iterate through each element in the first list\n        # Check if the element is present in all other lists\n            # If present in all other lists, add it to the common elements set\n\n# Return the common elements set"
        ],
        "requirements": [
            "import java.util.*;\n\npublic class CommonElements {\n\n    public static Set<Integer> findCommonElements(List<List<Integer>> nestedLists) {\n        Set<Integer> commonElements = new HashSet<>();\n        \n        if (nestedLists.size() > 0) {\n            List<Integer> firstList = nestedLists.get(0);\n            \n            for (Integer element : firstList) {\n                boolean presentInAllLists = true;\n                \n                for (int i = 1; i < nestedLists.size(); i++) {\n                    if (!nestedLists.get(i).contains(element)) {\n                        presentInAllLists = false;\n                        break;\n                    }\n                }\n                \n                if (presentInAllLists) {\n                    commonElements.add(element);\n                }\n            }\n        }\n        \n        return commonElements;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <unordered_set>\n#include <vector>\n\nstd::unordered_set<int> findCommonElements(const std::vector<std::vector<int>>& nestedLists) {\n    std::unordered_set<int> commonElements;\n    if (nestedLists.empty()) {\n        return commonElements;\n    }\n\n    for (int element : nestedLists[0]) {\n        bool presentInAllLists = true;\n        for (int i = 1; i < nestedLists.size(); i++) {\n            bool foundInCurrentList = false;\n            for (int num : nestedLists[i]) {\n                if (element == num) {\n                    foundInCurrentList = true;\n                    break;\n                }\n            }\n            if (!foundInCurrentList) {\n                presentInAllLists = false;\n                break;\n            }\n        }\n        if (presentInAllLists) {\n            commonElements.insert(element);\n        }\n    }\n\n    return commonElements;\n}"
        ]
    },
    {
        "id": "113",
        "prompt": "Write a function to check if a string represents an integer or not.",
        "solution": "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False",
        "test": [
            "assert check_integer(\"python\")==False",
            "assert check_integer(\"1\")==True",
            "assert check_integer(\"12345\")==True"
        ],
        "code": [
            "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False"
        ],
        "draft_plan": [
            "# Check if the string is empty\n    # If it is empty, return False\n\n# Check if the string starts with a minus sign\n    # If it does, remove the minus sign from the string\n\n# Check if the string starts with a plus sign\n    # If it does, remove the plus sign from the string\n\n# Iterate through each character in the string\n    # Check if the character is a digit\n        # If it is not a digit, return False\n\n# If all characters are digits or the string is empty, return True\n"
        ],
        "requirements": [
            "#include <iostream>\n#include <string>\n\nbool isInteger(std::string str) {\n    if (str.empty()) {\n        return false;\n    }\n\n    if (str[0] == '-') {\n        str = str.substr(1);\n    }\n\n    if (str[0] == '+') {\n        str = str.substr(1);\n    }\n\n    for (char c : str) {\n        if (!std::isdigit(c)) {\n            return false;\n        }\n    }\n\n    return true;\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nbool isInteger(string str) {\n    // Check if the string is empty\n    if (str.empty()) {\n        return false;\n    }\n    \n    // Check if the string starts with a minus sign\n    if (str[0] == '-') {\n        // Remove the minus sign from the string\n        str = str.substr(1);\n    }\n    \n    // Check if the string starts with a plus sign\n    if (str[0] == '+') {\n        // Remove the plus sign from the string\n        str = str.substr(1);\n    }\n    \n    // Iterate through each character in the string\n    for (char c : str) {\n        // Check if the character is a digit\n        if (!isdigit(c)) {\n            return false;\n        }\n    }\n    \n    // If all characters are digits or the string is empty, return true\n    return true;\n}"
        ]
    },
    {
        "id": "115",
        "prompt": "Write a function to check whether all dictionaries in a list are empty or not.",
        "solution": "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit",
        "test": [
            "assert empty_dit([{},{},{}])==True",
            "assert empty_dit([{1,2},{},{}])==False",
            "assert empty_dit({})==True"
        ],
        "code": [
            "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit"
        ],
        "draft_plan": [
            "# Iterate through each dictionary in the list\n    # Check if the dictionary is empty\n        # If any dictionary is not empty, return False\n\n# If all dictionaries are empty, return True"
        ],
        "requirements": [
            "import java.util.List;\nimport java.util.Map;\n\npublic class DictionaryChecker {\n    \n    public static boolean allDictionariesEmpty(List<Map<String, Object>> dictionaryList) {\n        for (Map<String, Object> dictionary : dictionaryList) {\n            if (!dictionary.isEmpty()) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <map>\n\nbool areAllDictionariesEmpty(const std::vector<std::map<int, int>>& dictionaries) {\n    for (const auto& dictionary : dictionaries) {\n        if (!dictionary.empty()) {\n            return false;\n        }\n    }\n    return true;\n}"
        ]
    },
    {
        "id": "116",
        "prompt": "Write a function to convert a given tuple of positive integers into a single integer.",
        "solution": "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result",
        "test": [
            "assert tuple_to_int((1,2,3))==123",
            "assert tuple_to_int((4,5,6))==456",
            "assert tuple_to_int((5,6,7))==567"
        ],
        "code": [
            "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result"
        ],
        "draft_plan": [
            "# Initialize an empty string to store the converted integer\n\n# Iterate through each element in the tuple\n    # Convert the element to a string and append it to the converted integer string\n\n# Convert the converted integer string to an integer and return it"
        ],
        "requirements": [
            "import java.util.*;\n\npublic class TupleToInteger {\n    public static int convertTupleToInteger(List<Integer> tuple) {\n        StringBuilder convertedInteger = new StringBuilder();\n        \n        for (int num : tuple) {\n            convertedInteger.append(Integer.toString(num));\n        }\n        \n        return Integer.parseInt(convertedInteger.toString());\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nint convertTupleToInt(const vector<int>& tuple) {\n    string convertedInt = \"\";\n    for (int i = 0; i < tuple.size(); i++) {\n        convertedInt += to_string(tuple[i]);\n    }\n    return stoi(convertedInt);\n}"
        ]
    },
    {
        "id": "117",
        "prompt": "Write a function to convert all possible convertible elements in a list of lists to floats.",
        "solution": "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res",
        "test": [
            "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]",
            "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]",
            "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]"
        ],
        "code": [
            "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res"
        ],
        "draft_plan": [
            "# Iterate through each sublist in the list\n    # Iterate through each element in the sublist\n        # Try to convert the element to a float\n            # If successful, replace the element in the sublist with the float value\n\n# Return the updated list"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class ConvertToFloat {\n\n    public static List<List<Object>> convertToFloat(List<List<Object>> list) {\n        for (List<Object> sublist : list) {\n            for (int i = 0; i < sublist.size(); i++) {\n                try {\n                    float convertedValue = Float.parseFloat(sublist.get(i).toString());\n                    sublist.set(i, convertedValue);\n                } catch (NumberFormatException e) {\n                    // Ignore if unable to convert to float\n                }\n            }\n        }\n        return list;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nvoid convertToFloats(std::vector<std::vector<std::string>>& list) {\n    for (std::vector<std::string>& sublist : list) {\n        for (std::string& element : sublist) {\n            try {\n                float floatValue = std::stof(element);\n                element = std::to_string(floatValue);\n            } catch (const std::exception&) {\n                // Conversion failed, do nothing\n            }\n        }\n    }\n}\n\nint main() {\n    std::vector<std::vector<std::string>> list = {{\"1\", \"2\", \"3\"}, {\"4\", \"5\", \"6.7\"}, {\"7.8\", \"9.0\", \"10\"}};\n    \n    convertToFloats(list);\n    \n    for (const std::vector<std::string>& sublist : list) {\n        for (const std::string& element : sublist) {\n            std::cout << element << \" \";\n        }\n        std::cout << std::endl;\n    }\n    \n    return 0;\n}"
        ]
    },
    {
        "id": "118",
        "prompt": "Write a function to convert a string to a list of strings split on the space character.",
        "solution": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst",
        "test": [
            "assert string_to_list(\"python programming\")==['python','programming']",
            "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
            "assert string_to_list(\"write a program\")==['write','a','program']"
        ],
        "code": [
            "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst"
        ],
        "draft_plan": [
            "# Initialize an empty list to store the split strings\n\n# Split the input string using the space character as the delimiter\n\n# Iterate through each split string\n    # Append the string to the list\n\n# Return the list of split strings"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class StringSplitter {\n    public List<String> splitString(String input) {\n        List<String> splitStrings = new ArrayList<>();\n        \n        String[] splitArray = input.split(\" \");\n        for (String str : splitArray) {\n            splitStrings.add(str);\n        }\n        \n        return splitStrings;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <sstream>\n#include <vector>\n\nstd::vector<std::string> splitString(std::string str) {\n    std::vector<std::string> result;\n    std::stringstream ss(str);\n    std::string splitString;\n    \n    while (std::getline(ss, splitString, ' ')) {\n        result.push_back(splitString);\n    }\n    \n    return result;\n}"
        ]
    },
    {
        "id": "119",
        "prompt": "Write a python function to find the element that appears only once in a sorted array.",
        "solution": "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)",
        "test": [
            "assert search([1,1,2,2,3]) == 3",
            "assert search([1,1,3,3,4,4,5,5,7,7,8]) == 8",
            "assert search([1,2,2,3,3,4,4]) == 1"
        ],
        "code": [
            "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)"
        ],
        "draft_plan": [
            "# Iterate through each element in the sorted array\n    # Check if the current element is equal to the previous element and the next element\n        # If not, return the current element as it appears only once\n\n# If no element appears only once, return \"None\""
        ],
        "requirements": [
            "import java.util.Arrays;\n\npublic class FindUniqueElement {\n    public static int findUnique(int[] arr) {\n        int n = arr.length;\n        \n        if (n == 1) {\n            return arr[0];\n        }\n        \n        if (arr[0] != arr[1]) {\n            return arr[0];\n        }\n        \n        if (arr[n - 1] != arr[n - 2]) {\n            return arr[n - 1];\n        }\n        \n        for (int i = 1; i < n - 1; i++) {\n            if (arr[i] != arr[i - 1] && arr[i] != arr[i + 1]) {\n                return arr[i];\n            }\n        }\n        \n        return -1;\n    }\n}"
        ],
        "final_plan": [
            "int findSingleElement(int arr[], int n) {\n    // If the array has only one element, it is the single element\n    if (n == 1) {\n        return arr[0];\n    }\n    \n    // Check if the first element is different from the second element\n    if (arr[0] != arr[1]) {\n        return arr[0];\n    }\n    \n    // Check if the last element is different from the second last element\n    if (arr[n - 1] != arr[n - 2]) {\n        return arr[n - 1];\n    }\n    \n    // Iterate through the array starting from the second element\n    for (int i = 1; i < n - 1; i++) {\n        // Check if the current element is different from its neighbors\n        if (arr[i] != arr[i - 1] && arr[i] != arr[i + 1]) {\n            return arr[i];\n        }\n    }\n    \n    // Return -1 if no single element is found\n    return -1;\n}"
        ]
    },
    {
        "id": "120",
        "prompt": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.",
        "solution": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max",
        "test": [
            "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
            "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
            "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
        ],
        "code": [
            "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max"
        ],
        "draft_plan": [
            "# Initialize the maximum absolute product to 0\n\n# Iterate through each pair of tuples in the list\n    # Multiply the absolute values of the numbers in the current pair\n    # Update the maximum absolute product if the current product is greater\n\n# Return the maximum absolute product"
        ],
        "requirements": [
            "import java.util.List;\n\npublic class MaxAbsoluteProduct {\n    public static int maxAbsoluteProduct(List<List<Integer>> pairs) {\n        int maxProduct = 0;\n        \n        for (List<Integer> pair : pairs) {\n            int product = Math.abs(pair.get(0)) * Math.abs(pair.get(1));\n            if (product > maxProduct) {\n                maxProduct = product;\n            }\n        }\n        \n        return maxProduct;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint maxAbsoluteProduct(vector<pair<int, int>>& pairs) {\n    int maxProduct = 0;\n    for (auto pair : pairs) {\n        int product = abs(pair.first) * abs(pair.second);\n        maxProduct = max(maxProduct, product);\n    }\n    return maxProduct;\n}"
        ]
    },
    {
        "id": "123",
        "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "solution": "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)",
        "test": [
            "assert amicable_numbers_sum(999)==504",
            "assert amicable_numbers_sum(9999)==31626",
            "assert amicable_numbers_sum(99)==0"
        ],
        "code": [
            "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)"
        ],
        "draft_plan": [
            "# Create a helper function to find the sum of proper divisors of a number\n    # Initialize the sum to 0\n    # Iterate through all numbers from 1 to half of the given number\n        # Check if the current number is a proper divisor of the given number\n            # If it is, add it to the sum\n    # Return the sum\n\n# Create the main function to find the sum of amicable numbers\n    # Initialize the sum of amicable numbers to 0\n    # Iterate through all numbers from 1 to the specified number\n        # Find the sum of proper divisors for the current number\n        # Check if the sum of proper divisors is different from the current number\n            # Find the sum of proper divisors for the sum of proper divisors\n            # Check if the second sum is equal to the current number\n                # If it is, add the current number to the sum of amicable numbers\n    # Return the sum of amicable numbers"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class AmicableNumbers {\n    \n    public static int sumOfProperDivisors(int number) {\n        int sum = 0;\n        for (int i = 1; i <= number/2; i++) {\n            if (number % i == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n    \n    public static int sumOfAmicableNumbers(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            int sumOfDivisors = sumOfProperDivisors(i);\n            if (sumOfDivisors != i) {\n                int sumOfDivisorsOfSum = sumOfProperDivisors(sumOfDivisors);\n                if (sumOfDivisorsOfSum == i) {\n                    sum += i;\n                }\n            }\n        }\n        return sum;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\n// Helper function to find the sum of proper divisors of a number\nint sumOfProperDivisors(int num) {\n    int sum = 0;\n    for (int i = 1; i <= num / 2; i++) {\n        if (num % i == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n// Function to find the sum of amicable numbers\nint sumOfAmicableNumbers(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        int sum1 = sumOfProperDivisors(i);\n        if (sum1 != i) {\n            int sum2 = sumOfProperDivisors(sum1);\n            if (sum2 == i) {\n                sum += i;\n            }\n        }\n    }\n    return sum;\n}"
        ]
    },
    {
        "id": "124",
        "prompt": "Write a function to get the angle of a complex number.",
        "solution": "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle",
        "test": [
            "assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)",
            "assert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)",
            "assert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)"
        ],
        "code": [
            "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle"
        ],
        "draft_plan": [
            "import math\n\ndef get_angle(complex_num):\n    # Calculate the angle using the math.atan2() function\n    angle = math.atan2(complex_num.imag, complex_num.real)\n    \n    # Convert the angle from radians to degrees\n    angle_deg = math.degrees(angle)\n    \n    # Return the angle in degrees\n    return angle_deg"
        ],
        "requirements": [
            "import java.util.*;\n\npublic class ComplexNumber {\n    private double real;\n    private double imaginary;\n    \n    public ComplexNumber(double real, double imaginary) {\n        this.real = real;\n        this.imaginary = imaginary;\n    }\n    \n    public double getAngle() {\n        return Math.atan2(imaginary, real);\n    }\n}\n\n// Example usage\nComplexNumber complexNum = new ComplexNumber(3.0, 4.0);\ndouble angle = complexNum.getAngle();"
        ],
        "final_plan": [
            "#include <iostream>\n#include <cmath>\n\ndouble getAngle(std::complex<double> complexNum) {\n    // Calculate the angle using the std::arg() function\n    double angle = std::arg(complexNum);\n\n    // Convert the angle from radians to degrees\n    double angle_deg = angle * 180 / M_PI;\n\n    // Return the angle in degrees\n    return angle_deg;\n}"
        ]
    },
    {
        "id": "125",
        "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "solution": "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0",
        "test": [
            "assert find_length(\"11000010001\") == 6",
            "assert find_length(\"10111\") == 1",
            "assert find_length(\"11011101100101\") == 2"
        ],
        "code": [
            "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0"
        ],
        "draft_plan": [
            "# Initialize variables to keep track of the maximum difference and the count of 0s and 1s\n# Iterate through each character in the binary string\n    # Update the count of 0s and 1s based on the current character\n    # Calculate the difference between the count of 0s and 1s\n    # Update the maximum difference if the current difference is greater\n# Return the maximum difference"
        ],
        "requirements": [
            "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint max_diff_substring(string binaryString) {\n    int n = binaryString.length();\n    int maxDiff = 0;\n    int count0 = 0;\n    int count1 = 0;\n    \n    for (int i = 0; i < n; i++) {\n        if (binaryString[i] == '0') {\n            count0++;\n        } else if (binaryString[i] == '1') {\n            count1++;\n        }\n        \n        int diff = count0 - count1;\n        if (diff > maxDiff) {\n            maxDiff = diff;\n        }\n    }\n    \n    return maxDiff;\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\n#include <algorithm>\n\nint maxDifference(std::string binaryString) {\n    int maxLength = 0;\n    int countZeros = 0;\n    int countOnes = 0;\n    \n    for (char c : binaryString) {\n        if (c == '0') {\n            countZeros++;\n        } else if (c == '1') {\n            countOnes++;\n        }\n        \n        int difference = countZeros - countOnes;\n        maxLength = std::max(maxLength, difference);\n        \n        if (difference < 0) {\n            countZeros = 0;\n            countOnes = 0;\n        }\n    }\n    \n    return maxLength;\n}"
        ]
    },
    {
        "id": "126",
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.",
        "solution": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum",
        "test": [
            "assert sum(10,15) == 6",
            "assert sum(100,150) == 93",
            "assert sum(4,6) == 3"
        ],
        "code": [
            "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum"
        ],
        "draft_plan": [
            "# Find the minimum of the two input numbers and assign it to a variable `minimum`\n\n# Initialize a variable `common_divisors` to store the sum of common divisors and set it to 0\n\n# Iterate through numbers from 1 to `minimum`\n    # Check if the current number is a divisor of both input numbers\n        # If it is, add it to `common_divisors`\n\n# Return the value of `common_divisors` as the sum of common divisors"
        ],
        "requirements": [
            "import java.util.*;\n\npublic class CommonDivisors {\n    \n    public static int sumOfCommonDivisors(int num1, int num2) {\n        int minimum = Math.min(num1, num2);\n        int commonDivisors = 0;\n        \n        for (int i = 1; i <= minimum; i++) {\n            if (num1 % i == 0 && num2 % i == 0) {\n                commonDivisors += i;\n            }\n        }\n        \n        return commonDivisors;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\nint gcd(int a, int b) {\n    if (b == 0)\n        return a;\n    return gcd(b, a % b);\n}\n\nint sumOfCommonDivisors(int a, int b) {\n    int minimum = min(a, b);\n    int commonDivisors = 0;\n    \n    for (int i = 1; i <= minimum; i++) {\n        if (a % i == 0 && b % i == 0) {\n            commonDivisors += i;\n        }\n    }\n    \n    return commonDivisors;\n}"
        ]
    },
    {
        "id": "127",
        "prompt": "Write a function to multiply two integers.",
        "solution": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)",
        "test": [
            "assert multiply_int(10,20)==200",
            "assert multiply_int(5,10)==50",
            "assert multiply_int(4,8)==32"
        ],
        "code": [
            "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)"
        ],
        "draft_plan": [
            "To multiply two integers, you can use the standard multiplication operation `*`. \n\nHere's an example of how you can write the code logic for the multiplication function:\n\n```python\ndef multiply(a, b):\n    result = a * b\n    return result\n```\n\nIn this function, `a` and `b` are the two integers that you want to multiply. The function uses the `*` operator to multiply them together and assigns the result to the variable `result`. Finally, the function returns the value of `result`."
        ],
        "requirements": [
            "Sure! Here's the Java code without the `main` method to multiply two integers:\n\n```java\npublic class Multiplier {\n    public static int multiply(int a, int b) {\n        int result = a * b;\n        return result;\n    }\n}\n```\n\nIn this code, the `multiply` method takes two integer parameters `a` and `b` and performs the multiplication using the `*` operator. The result is stored in the `result` variable, which is then returned by the method."
        ],
        "final_plan": [
            "int multiply(int a, int b) {\n    int result = a * b;\n    return result;\n}"
        ]
    },
    {
        "id": "128",
        "prompt": "Write a function to find words that are longer than n characters from a given list of words.",
        "solution": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t",
        "test": [
            "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
            "assert long_words(2,\"writing a program\")==['writing','program']",
            "assert long_words(5,\"sorting list\")==['sorting']"
        ],
        "code": [
            "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t"
        ],
        "draft_plan": [
            "# Initialize an empty list to store the words longer than n characters\n\n# Iterate through each word in the given list of words\n    # Check if the length of the current word is greater than n\n        # If it is, append the word to the list of longer words\n\n# Return the list of longer words"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class WordFilter {\n    public static List<String> filterWords(List<String> words, int n) {\n        List<String> filteredWords = new ArrayList<>();\n        \n        for (String word : words) {\n            if (word.length() > n) {\n                filteredWords.add(word);\n            }\n        }\n        \n        return filteredWords;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nvector<string> findWordsLongerThanN(vector<string> words, int n) {\n    vector<string> longerWords;\n    \n    for (string word : words) {\n        if (word.length() > n) {\n            longerWords.push_back(word);\n        }\n    }\n    \n    return longerWords;\n}"
        ]
    },
    {
        "id": "129",
        "prompt": "Write a function to calculate whether the matrix is a magic square.",
        "solution": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True",
        "test": [
            "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
            "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
            "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
        ],
        "code": [
            "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True"
        ],
        "draft_plan": [
            "# Define a function to check whether a given matrix is a magic square\n    # Get the size of the matrix (number of rows and columns)\n    \n    # Calculate the expected sum of each row, column, and diagonal\n        # The expected sum is the sum of numbers from 1 to the size of the matrix, multiplied by the size of the matrix, divided by 2\n    \n    # Check if the sum of each row, column, and diagonal is equal to the expected sum\n        # If any sum is not equal to the expected sum, return False\n    \n    # If all sums are equal to the expected sum, return True"
        ],
        "requirements": [
            "import java.util.Arrays;\n\nclass MagicSquareChecker {\n    public static boolean isMagicSquare(int[][] matrix) {\n        int size = matrix.length;\n        int expectedSum = (size * (size * size + 1)) / 2;\n\n        // Check rows\n        for (int i = 0; i < size; i++) {\n            int rowSum = Arrays.stream(matrix[i]).sum();\n            if (rowSum != expectedSum) {\n                return false;\n            }\n        }\n\n        // Check columns\n        for (int j = 0; j < size; j++) {\n            int colSum = 0;\n            for (int i = 0; i < size; i++) {\n                colSum += matrix[i][j];\n            }\n            if (colSum != expectedSum) {\n                return false;\n            }\n        }\n\n        // Check diagonals\n        int diagonalSum1 = 0;\n        int diagonalSum2 = 0;\n        for (int i = 0; i < size; i++) {\n            diagonalSum1 += matrix[i][i];\n            diagonalSum2 += matrix[i][size - i - 1];\n        }\n        if (diagonalSum1 != expectedSum || diagonalSum2 != expectedSum) {\n            return false;\n        }\n\n        return true;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool isMagicSquare(vector<vector<int>>& matrix) {\n    int size = matrix.size();\n    \n    int expectedSum = (size * (size * size + 1)) / 2;\n    \n    // Check rows\n    for (int i = 0; i < size; i++) {\n        int rowSum = 0;\n        for (int j = 0; j < size; j++) {\n            rowSum += matrix[i][j];\n        }\n        if (rowSum != expectedSum) {\n            return false;\n        }\n    }\n    \n    // Check columns\n    for (int j = 0; j < size; j++) {\n        int colSum = 0;\n        for (int i = 0; i < size; i++) {\n            colSum += matrix[i][j];\n        }\n        if (colSum != expectedSum) {\n            return false;\n        }\n    }\n    \n    // Check diagonals\n    int diagSum1 = 0;\n    int diagSum2 = 0;\n    for (int i = 0; i < size; i++) {\n        diagSum1 += matrix[i][i];\n        diagSum2 += matrix[i][size - i - 1];\n    }\n    if (diagSum1 != expectedSum || diagSum2 != expectedSum) {\n        return false;\n    }\n    \n    return true;\n}\n"
        ]
    },
    {
        "id": "130",
        "prompt": "Write a function to find the item with maximum frequency in a given list.",
        "solution": "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]",
        "test": [
            "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2",
            "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8",
            "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20"
        ],
        "code": [
            "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]"
        ],
        "draft_plan": [
            "# Create an empty dictionary to store the frequency of each item\n\n# Iterate through each item in the list\n    # Check if the item is already present in the dictionary\n        # If it is, increment its frequency by 1\n        # If it is not, add it to the dictionary with a frequency of 1\n\n# Find the item with the maximum frequency\n    # Initialize the maximum frequency and item to the first item in the dictionary\n    # Iterate through each key-value pair in the dictionary\n        # If the frequency of the current item is greater than the maximum frequency\n            # Update the maximum frequency and item to the current item\n\n# Return the item with maximum frequency"
        ],
        "requirements": [
            "import java.util.*;\n\npublic class MaxFrequencyItem {\n    public static <T> T findMaxFrequencyItem(List<T> list) {\n        Map<T, Integer> frequencyMap = new HashMap<>();\n\n        for (T item : list) {\n            frequencyMap.put(item, frequencyMap.getOrDefault(item, 0) + 1);\n        }\n\n        T maxFrequencyItem = null;\n        int maxFrequency = 0;\n\n        for (Map.Entry<T, Integer> entry : frequencyMap.entrySet()) {\n            if (entry.getValue() > maxFrequency) {\n                maxFrequency = entry.getValue();\n                maxFrequencyItem = entry.getKey();\n            }\n        }\n\n        return maxFrequencyItem;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <unordered_map>\n#include <vector>\n\nusing namespace std;\n\nint findMaxFrequency(vector<int> items) {\n    unordered_map<int, int> frequencyMap;\n\n    for (int item : items) {\n        frequencyMap[item]++;\n    }\n\n    int maxFrequency = 0;\n    int maxItem = 0;\n\n    for (auto it = frequencyMap.begin(); it != frequencyMap.end(); ++it) {\n        if (it->second > maxFrequency) {\n            maxFrequency = it->second;\n            maxItem = it->first;\n        }\n    }\n\n    return maxItem;\n}"
        ]
    },
    {
        "id": "131",
        "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
        "solution": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string",
        "test": [
            "assert reverse_vowels(\"Python\") == \"Python\"",
            "assert reverse_vowels(\"USA\") == \"ASU\"",
            "assert reverse_vowels(\"ab\") == \"ab\""
        ],
        "code": [
            "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string"
        ],
        "draft_plan": [
            "# Convert the given string to a list of characters for easier manipulation\n\n# Initialize two pointers, one at the start of the string and one at the end\n\n# Iterate while the left pointer is less than the right pointer\n    # Check if the character at the left pointer is a vowel\n        # If it is a vowel, check if the character at the right pointer is also a vowel\n            # If it is a vowel, swap the characters at the left and right pointers\n\n    # Move the left pointer one step forward\n    # Move the right pointer one step backward\n\n# Convert the list of characters back to a string and return it"
        ],
        "requirements": [
            "import java.util.*;\n\npublic class ReverseVowels {\n    public static String reverseVowels(String str) {\n        char[] charArray = str.toCharArray();\n        int left = 0;\n        int right = charArray.length - 1;\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n        while (left < right) {\n            if (vowels.contains(charArray[left])) {\n                if (vowels.contains(charArray[right])) {\n                    // Swap the characters at left and right pointers\n                    char temp = charArray[left];\n                    charArray[left] = charArray[right];\n                    charArray[right] = temp;\n\n                    // Move the pointers\n                    left++;\n                    right--;\n                } else {\n                    right--;\n                }\n            } else {\n                left++;\n            }\n        }\n\n        return new String(charArray);\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nbool isVowel(char c) {\n    // Check if the character is a vowel (excluding 'y')\n    return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n           c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n}\n\nstring reverseVowels(string str) {\n    int left = 0;\n    int right = str.length() - 1;\n    \n    while (left < right) {\n        if (isVowel(str[left]) && isVowel(str[right])) {\n            swap(str[left], str[right]);\n            left++;\n            right--;\n        } else if (isVowel(str[left])) {\n            right--;\n        } else {\n            left++;\n        }\n    }\n    \n    return str;\n}"
        ]
    },
    {
        "id": "132",
        "prompt": "Write a function to convert a tuple to a string.",
        "solution": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str",
        "test": [
            "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
            "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
            "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
        ],
        "code": [
            "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str"
        ],
        "draft_plan": [
            "# Initialize an empty string\n\n# Iterate through each element in the tuple\n    # Convert the element to a string and append it to the string\n\n# Return the resulting string"
        ],
        "requirements": [
            "import java.util.*;\n\npublic class TupleToString {\n    public static String convertTupleToString(Tuple tuple) {\n        StringBuilder sb = new StringBuilder();\n        \n        for (int i = 0; i < tuple.size(); i++) {\n            sb.append(tuple.get(i).toString());\n        }\n        \n        return sb.toString();\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <sstream>\n#include <tuple>\n#include <string>\n\ntemplate<typename... Args>\nstd::string tupleToString(const std::tuple<Args...>& tuple) {\n    std::stringstream ss;\n    std::apply([&](const auto&... args) { ((ss << args << \" \"), ...); }, tuple);\n    return ss.str();\n}\n\nint main() {\n    std::tuple<int, float, std::string> exampleTuple(42, 3.14, \"Hello\");\n    std::string str = tupleToString(exampleTuple);\n    std::cout << str << std::endl;\n    return 0;\n}"
        ]
    },
    {
        "id": "133",
        "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
        "solution": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)",
        "test": [
            "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
            "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
            "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
        ],
        "code": [
            "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)"
        ],
        "draft_plan": [
            "# Initialize a variable to store the sum of negative numbers\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If it is negative, add it to the sum\n\n# Return the sum of negative numbers"
        ],
        "requirements": [
            "import java.util.List;\n\npublic class NegativeNumberSum {\n    public static int sumOfNegativeNumbers(List<Integer> numbers) {\n        int sum = 0;\n        for (int number : numbers) {\n            if (number < 0) {\n                sum += number;\n            }\n        }\n        return sum;\n    }\n}"
        ],
        "final_plan": [
            "#include <vector>\n\nint sumOfNegativeNumbers(const std::vector<int>& numbers) {\n    int sum = 0;\n    for (int number : numbers) {\n        if (number < 0) {\n            sum += number;\n        }\n    }\n    return sum;\n}"
        ]
    },
    {
        "id": "135",
        "prompt": "Write a function to find the nth hexagonal number.",
        "solution": "def hexagonal_num(n): \n\treturn n*(2*n - 1) ",
        "test": [
            "assert hexagonal_num(10) == 190",
            "assert hexagonal_num(5) == 45",
            "assert hexagonal_num(7) == 91"
        ],
        "code": [
            "def hexagonal_num(n): \n\treturn n*(2*n - 1) "
        ],
        "draft_plan": [
            "To find the nth hexagonal number, we can use the formula: Hn = n(2n - 1)\n\n# Define a function to find the nth hexagonal number\ndef find_hexagonal_number(n):\n    # Calculate the nth hexagonal number using the formula\n    hexagonal_number = n * (2 * n - 1)\n    \n    # Return the hexagonal number\n    return hexagonal_number\n\n# Test the function\nn = 5\nhexagonal_number = find_hexagonal_number(n)\nprint(\"The\", n, \"th hexagonal number is\", hexagonal_number)"
        ],
        "requirements": [
            "public class HexagonalNumber {\n\n    public static int findHexagonalNumber(int n) {\n        // Calculate the nth hexagonal number using the formula\n        int hexagonalNumber = n * (2 * n - 1);\n\n        // Return the hexagonal number\n        return hexagonalNumber;\n    }\n}"
        ],
        "final_plan": [
            "#include<iostream>\nusing namespace std;\n\n// Function to find the nth hexagonal number\nint findHexagonalNumber(int n) {\n    // Calculate the nth hexagonal number using the formula Hn = n(2n - 1)\n    int hexagonalNumber = n * (2 * n - 1);\n\n    // Return the hexagonal number\n    return hexagonalNumber;\n}\n\n// Example usage\nint main() {\n    int n = 5;\n    int hexagonalNumber = findHexagonalNumber(n);\n    cout << \"The \" << n << \"th hexagonal number is \" << hexagonalNumber << endl;\n    return 0;\n}"
        ]
    },
    {
        "id": "137",
        "prompt": "Write a function to find the ratio of zeroes to non-zeroes in an array of integers.",
        "solution": "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)",
        "test": [
            "assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)",
            "assert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)",
            "assert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)"
        ],
        "code": [
            "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)"
        ],
        "draft_plan": [
            "# Initialize variables to keep track of the count of zeroes and non-zeroes\n# Iterate through each integer in the array\n    # Check if the integer is zero\n        # If it is zero, increment the count of zeroes by 1\n    # If it is not zero, increment the count of non-zeroes by 1\n\n# Calculate the ratio of zeroes to non-zeroes by dividing the count of zeroes by the count of non-zeroes\n# Return the calculated ratio"
        ],
        "requirements": [
            "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\ndouble zero_to_nonzero_ratio(vector<int>& arr) {\n    int zero_count = 0;\n    int non_zero_count = 0;\n    \n    for (int num : arr) {\n        if (num == 0) {\n            zero_count++;\n        } else {\n            non_zero_count++;\n        }\n    }\n    \n    if (non_zero_count == 0) {\n        return 0.0;\n    }\n    \n    return static_cast<double>(zero_count) / non_zero_count;\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\ndouble ratioOfZeroesToNonZeroes(const std::vector<int>& nums) {\n    int zeroCount = 0;\n    int nonZeroCount = 0;\n    \n    for (int num : nums) {\n        if (num == 0) {\n            zeroCount++;\n        } else {\n            nonZeroCount++;\n        }\n    }\n    \n    if (nonZeroCount == 0) {\n        return 0.0;\n    }\n    \n    return static_cast<double>(zeroCount) / nonZeroCount;\n}"
        ]
    },
    {
        "id": "138",
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "solution": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True",
        "test": [
            "assert is_Sum_Of_Powers_Of_Two(10) == True",
            "assert is_Sum_Of_Powers_Of_Two(7) == False",
            "assert is_Sum_Of_Powers_Of_Two(14) == True"
        ],
        "code": [
            "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True"
        ],
        "draft_plan": [
            "# Check if the given number is less than or equal to 0\n    # If yes, return False\n\n# Iterate through each power of 2 starting from 1\n    # Check if the current power of 2 is less than or equal to the given number\n        # If yes, subtract the current power of 2 from the given number\n        # If the updated number is 0, return True\n        # Recursively call the function with the updated number\n            # If the recursive call returns True, return True\n\n# If no valid combination is found, return False"
        ],
        "requirements": [
            "public class PowerOf2Sum {\n    public static boolean isPowerOf2Sum(int num) {\n        if (num <= 0) {\n            return false;\n        }\n        \n        for (int power = 1; power <= num; power *= 2) {\n            if (power == num) {\n                return true;\n            }\n            \n            int remainder = num - power;\n            if (isPowerOf2Sum(remainder)) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\nbool isPowerOfTwo(int n) {\n    if (n <= 0) {\n        return false;\n    }\n    \n    for (int i = 1; i <= n; i *= 2) {\n        if (i == n) {\n            return true;\n        }\n        \n        int remaining = n - i;\n        if (isPowerOfTwo(remaining)) {\n            return true;\n        }\n    }\n    \n    return false;\n}"
        ]
    },
    {
        "id": "139",
        "prompt": "Write a function to find the circumference of a circle.",
        "solution": "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter",
        "test": [
            "assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)",
            "assert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)",
            "assert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)"
        ],
        "code": [
            "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter"
        ],
        "draft_plan": [
            "# Define a function called find_circumference that takes the radius as an argument\n    # Calculate the circumference using the formula 2 * \u03c0 * radius\n    # Return the circumference value\n\n# Call the find_circumference function with the desired radius value and store the result in a variable\n\n# Print the circumference value"
        ],
        "requirements": [
            "public class Circle {\n    public static double findCircumference(double radius) {\n        // Calculate the circumference using the formula 2 * \u03c0 * radius\n        double circumference = 2 * Math.PI * radius;\n        return circumference;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\ndouble findCircumference(double radius) {\n    double circumference = 2 * 3.14159 * radius;\n    return circumference;\n}\n\nint main() {\n    double radius = 5.0;\n    double circumference = findCircumference(radius);\n    cout << \"Circumference of the circle with radius \" << radius << \" is \" << circumference << endl;\n    return 0;\n}"
        ]
    },
    {
        "id": "140",
        "prompt": "Write a function to flatten the list of lists into a single set of numbers.",
        "solution": "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) ",
        "test": [
            "assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])",
            "assert set(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])",
            "assert set(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12])"
        ],
        "code": [
            "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) "
        ],
        "draft_plan": [
            "# Initialize an empty set to store the flattened numbers\n\n# Iterate through each sublist in the list of lists\n    # Iterate through each number in the sublist\n        # Add the number to the set\n\n# Return the set of flattened numbers"
        ],
        "requirements": [
            "import java.util.*;\n\npublic class FlattenList {\n    public static Set<Integer> flatten(List<List<Integer>> listOfLists) {\n        Set<Integer> flattenedSet = new HashSet<>();\n        \n        for (List<Integer> sublist : listOfLists) {\n            for (int num : sublist) {\n                flattenedSet.add(num);\n            }\n        }\n        \n        return flattenedSet;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <unordered_set>\n\nvoid flattenList(const std::vector<std::vector<int>>& listOfLists, std::unordered_set<int>& flattenedSet) {\n    for (const auto& sublist : listOfLists) {\n        for (int number : sublist) {\n            flattenedSet.insert(number);\n        }\n    }\n}\n\nint main() {\n    std::vector<std::vector<int>> listOfLists = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    std::unordered_set<int> flattenedSet;\n    \n    flattenList(listOfLists, flattenedSet);\n    \n    std::cout << \"Flattened Set: \";\n    for (int number : flattenedSet) {\n        std::cout << number << \" \";\n    }\n    \n    return 0;\n}"
        ]
    },
    {
        "id": "141",
        "prompt": "Write a function to sort a list of elements.",
        "solution": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums",
        "test": [
            "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
            "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
            "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
        ],
        "code": [
            "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums"
        ],
        "draft_plan": [
            "# Define a function that takes a list as input\n    # Iterate through each element in the list\n        # Iterate through the remaining elements in the list\n            # Compare the current element with each subsequent element\n                # If the current element is greater than the subsequent element, swap their positions\n\n# Return the sorted list"
        ],
        "requirements": [
            "import java.util.List;\n\npublic class Sorting {\n    public static <T extends Comparable<T>> void sort(List<T> list) {\n        int n = list.size();\n        \n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < n - i - 1; j++) {\n                if (list.get(j).compareTo(list.get(j + 1)) > 0) {\n                    T temp = list.get(j);\n                    list.set(j, list.get(j + 1));\n                    list.set(j + 1, temp);\n                }\n            }\n        }\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nvoid sortList(vector<int>& arr) {\n    int n = arr.size();\n    for (int i = 0; i < n-1; i++) {\n        for (int j = 0; j < n-i-1; j++) {\n            if (arr[j] > arr[j+1]) {\n                swap(arr[j], arr[j+1]);\n            }\n        }\n    }\n}\n\nint main() {\n    vector<int> arr = {9, 7, 5, 2, 3, 1};\n    sortList(arr);\n    for (int i = 0; i < arr.size(); i++) {\n        cout << arr[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}"
        ]
    },
    {
        "id": "142",
        "prompt": "Write a function to count number items that are identical in the same position of three given lists.",
        "solution": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result",
        "test": [
            "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
            "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
            "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"
        ],
        "code": [
            "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result"
        ],
        "draft_plan": [
            "# Initialize a count variable to 0\n\n# Iterate through the indices of the lists (assuming all lists have the same length)\n    # Check if the items at the current index are identical in all three lists\n        # If they are identical, increment the count\n\n# Return the count"
        ],
        "requirements": [
            "import java.util.List;\n\npublic class CountIdenticalItems {\n    public static int countIdenticalItems(List<Integer> list1, List<Integer> list2, List<Integer> list3) {\n        int count = 0;\n        int n = list1.size(); // Assuming all lists have the same length\n        \n        for (int i = 0; i < n; i++) {\n            if (list1.get(i).equals(list2.get(i)) && list2.get(i).equals(list3.get(i))) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nint countIdenticalItems(std::vector<int>& list1, std::vector<int>& list2, std::vector<int>& list3) {\n    int count = 0;\n    \n    // Assuming all lists have the same length\n    int length = list1.size();\n    \n    for (int i = 0; i < length; i++) {\n        if (list1[i] == list2[i] && list2[i] == list3[i]) {\n            count++;\n        }\n    }\n    \n    return count;\n}"
        ]
    },
    {
        "id": "143",
        "prompt": "Write a function to find number of lists present in the given tuple.",
        "solution": "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) ",
        "test": [
            "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
            "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
            "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
        ],
        "code": [
            "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) "
        ],
        "draft_plan": [
            "# Initialize a count variable to 0\n\n# Iterate through each element in the tuple\n    # Check if the current element is a list\n        # If it is a list, increment the count by 1\n\n# Return the count of lists found"
        ],
        "requirements": [
            "import java.util.*;\n\npublic class ListCounter {\n    public static int countListsInTuple(Object[] tuple) {\n        int count = 0;\n        \n        for (Object element : tuple) {\n            if (element instanceof List) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <tuple>\n#include <type_traits>\n\ntemplate <typename Tuple, std::size_t N>\nstruct TupleListCount {\n    static int count(const Tuple& t) {\n        return (std::is_same<typename std::tuple_element<N-1, Tuple>::type, std::list<typename std::tuple_element<N-1, Tuple>::type::value_type>>::value ? 1 : 0) +\n                TupleListCount<Tuple, N-1>::count(t);\n    }\n};\n\ntemplate <typename Tuple>\nstruct TupleListCount<Tuple, 0> {\n    static int count(const Tuple& t) {\n        return 0;\n    }\n};\n\ntemplate <typename... Args>\nint countListsInTuple(const std::tuple<Args...>& t) {\n    return TupleListCount<decltype(t), sizeof...(Args)>::count(t);\n}\n\nint main() {\n    std::tuple<int, std::string, std::list<int>, double, std::list<std::string>> t;\n    int count = countListsInTuple(t);\n    std::cout << \"Number of lists in the tuple: \" << count << std::endl;\n    return 0;\n}"
        ]
    },
    {
        "id": "145",
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.",
        "solution": "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ",
        "test": [
            "assert max_Abs_Diff((2,1,5,3)) == 4",
            "assert max_Abs_Diff((9,3,2,5,1)) == 8",
            "assert max_Abs_Diff((3,2,1)) == 2"
        ],
        "code": [
            "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) "
        ],
        "draft_plan": [
            "# Initialize the maximum difference to 0\n\n# Iterate through each element in the array\n    # Iterate through each subsequent element in the array\n        # Calculate the difference between the current element and the subsequent element\n        # Update the maximum difference if the calculated difference is greater\n\n# Return the maximum difference"
        ],
        "requirements": [
            "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint max_difference(vector<int>& arr) {\n    int n = arr.size();\n    int max_diff = 0;\n    \n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            int diff = arr[j] - arr[i];\n            if (diff > max_diff) {\n                max_diff = diff;\n            }\n        }\n    }\n\n    return max_diff;\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <algorithm>\n\nint maxDifference(int arr[], int size) {\n    if (size < 2) {\n        return 0;\n    }\n    \n    int maxDiff = arr[1] - arr[0];\n    int minElement = arr[0];\n    \n    for (int i = 1; i < size; i++) {\n        maxDiff = std::max(maxDiff, arr[i] - minElement);\n        minElement = std::min(minElement, arr[i]);\n    }\n    \n    return maxDiff;\n}"
        ]
    },
    {
        "id": "160",
        "prompt": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
        "solution": "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None",
        "test": [
            "assert find_solution(2, 3, 7) == (2, 1)",
            "assert find_solution(4, 2, 7) == None",
            "assert find_solution(1, 13, 17) == (4, 1)"
        ],
        "code": [
            "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None"
        ],
        "draft_plan": [
            "# Iterate through all possible values of x from 0 to n/a (inclusive)\n    # Calculate the value of y using the equation y = (n - a*x) / b\n    # Check if y is an integer\n        # If y is an integer, return (x, y) as a tuple\n\n# If no solution is found, return None"
        ],
        "requirements": [
            "import java.util.*;\n\npublic class Solution {\n    public static int[] findXY(int a, int b, int n) {\n        int[] result = new int[2];\n        \n        for (int x = 0; x <= n / a; x++) {\n            int y = (n - a * x) / b;\n            if (a * x + b * y == n) {\n                result[0] = x;\n                result[1] = y;\n                return result;\n            }\n        }\n        \n        return null;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <tuple>\n\nstd::tuple<int, int> findXY(int a, int b, int n) {\n    for (int x = 0; x <= n / a; x++) {\n        int y = (n - a * x) / b;\n        if ((n - a * x) % b == 0) {\n            return std::make_tuple(x, y);\n        }\n    }\n    return std::make_tuple(-1, -1);\n}"
        ]
    },
    {
        "id": "161",
        "prompt": "Write a function to remove all elements from a given list present in another list.",
        "solution": "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result",
        "test": [
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]",
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]",
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]"
        ],
        "code": [
            "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result"
        ],
        "draft_plan": [
            "# Iterate through each element in the first list\n    # Check if the element is present in the second list\n        # If present, remove the element from the first list\n\n# Return the modified first list"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class ListOperations {\n\n    public static List<Integer> removeElements(List<Integer> list1, List<Integer> list2) {\n        list1.removeAll(list2);\n        return list1;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> removeElements(vector<int> list1, vector<int> list2) {\n    vector<int> result;\n    \n    for (int i = 0; i < list1.size(); i++) {\n        // Check if the current element is present in list2\n        if (find(list2.begin(), list2.end(), list1[i]) == list2.end()) {\n            result.push_back(list1[i]);\n        }\n    }\n    \n    return result;\n}"
        ]
    },
    {
        "id": "162",
        "prompt": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
        "solution": "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)",
        "test": [
            "assert sum_series(6) == 12",
            "assert sum_series(10) == 30",
            "assert sum_series(9) == 25"
        ],
        "code": [
            "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)"
        ],
        "draft_plan": [
            "# Initialize the sum to 0\n# Calculate the value of n // 2\n\n# Iterate from i=0 to n // 2\n    # Calculate the value of (n - 2*i)\n    # Add the calculated value to the sum\n\n# Return the sum"
        ],
        "requirements": [
            "public class SumCalculation {\n    public static int calculateSum(int n) {\n        int sum = 0;\n        int limit = n / 2;\n        \n        for (int i = 0; i <= limit; i++) {\n            sum += (n - 2 * i);\n        }\n        \n        return sum;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n\nint calculateSum(int n) {\n    int sum = 0;\n    int limit = n / 2;\n    \n    for (int i = 0; i <= limit; i++) {\n        sum += (n - 2*i);\n    }\n    \n    return sum;\n}\n\nint main() {\n    int n = 10;\n    int result = calculateSum(n);\n    \n    std::cout << \"Sum: \" << result << std::endl;\n    \n    return 0;\n}"
        ]
    },
    {
        "id": "163",
        "prompt": "Write a function to calculate the area of a regular polygon given the length and number of its sides.",
        "solution": "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area",
        "test": [
            "assert math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)",
            "assert math.isclose(area_polygon(10, 15), 1731.197, rel_tol=0.001)",
            "assert math.isclose(area_polygon(9, 7), 302.909, rel_tol=0.001)"
        ],
        "code": [
            "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area"
        ],
        "draft_plan": [
            "# Import the math module\n\n# Define a function to calculate the area of a regular polygon\n    # Calculate the apothem (distance from the center to the midpoint of any side) using the formula: apothem = length / (2 * tan(pi / num_sides))\n    # Calculate the area using the formula: area = (num_sides * length^2) / (4 * tan(pi / num_sides))\n    # Return the calculated area\n\n# Test the function with given inputs"
        ],
        "requirements": [
            "import java.lang.Math;\n\nclass RegularPolygon {\n    public static double calculateArea(int numSides, double length) {\n        double apothem = length / (2 * Math.tan(Math.PI / numSides));\n        double area = (numSides * length * length) / (4 * Math.tan(Math.PI / numSides));\n        return area;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <cmath>\n\ndouble calculateRegularPolygonArea(double length, int num_sides) {\n    double pi = 3.14159;\n    double apothem = length / (2 * tan(pi / num_sides));\n    double area = (num_sides * pow(length, 2)) / (4 * tan(pi / num_sides));\n    return area;\n}\n"
        ]
    },
    {
        "id": "164",
        "prompt": "Write a function to determine if the sum of the divisors of two integers are the same.",
        "solution": "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); ",
        "test": [
            "assert are_equivalent(36, 57) == False",
            "assert are_equivalent(2, 4) == False",
            "assert are_equivalent(23, 47) == True"
        ],
        "code": [
            "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); "
        ],
        "draft_plan": [
            "# Define a function to calculate the sum of divisors for a given integer\n    # Initialize the sum to 0\n    # Iterate from 1 to the given integer (inclusive)\n        # Check if the current number is a divisor of the given integer\n            # If it is, add it to the sum\n\n# Define a function to determine if the sum of divisors for two integers are the same\n    # Calculate the sum of divisors for the first integer\n    # Calculate the sum of divisors for the second integer\n    # Check if the sums are equal\n        # If they are, return True\n    # If not, return False"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class DivisorSum {\n    \n    public static int calculateDivisorSum(int num) {\n        int sum = 0;\n        for (int i = 1; i <= num; i++) {\n            if (num % i == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n\n    public static boolean hasEqualDivisorSum(int num1, int num2) {\n        int sum1 = calculateDivisorSum(num1);\n        int sum2 = calculateDivisorSum(num2);\n        return sum1 == sum2;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint sumOfDivisors(int num) {\n    int sum = 0;\n    for (int i = 1; i <= sqrt(num); i++) {\n        if (num % i == 0) {\n            sum += i;\n            if (i != num / i) {\n                sum += num / i;\n            }\n        }\n    }\n    return sum;\n}\n\nbool areSumOfDivisorsEqual(int num1, int num2) {\n    int sum1 = sumOfDivisors(num1);\n    int sum2 = sumOfDivisors(num2);\n    return sum1 == sum2;\n}"
        ]
    },
    {
        "id": "165",
        "prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
        "solution": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ",
        "test": [
            "assert count_char_position(\"xbcefg\") == 2",
            "assert count_char_position(\"ABcED\") == 3",
            "assert count_char_position(\"AbgdeF\") == 5"
        ],
        "code": [
            "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars "
        ],
        "draft_plan": [
            "# Initialize a counter variable to keep track of the number of characters that occur at the same position as in the English alphabet\n# Iterate through each character in the input string\n    # Convert the character to lowercase\n    # Check if the ASCII value of the character minus the ASCII value of 'a' is equal to the index of the character in the English alphabet\n        # If true, increment the counter variable\n\n# Return the counter variable"
        ],
        "requirements": [
            "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint count_same_position_chars(string str) {\n    int count = 0;\n    \n    for (int i = 0; i < str.length(); i++) {\n        char ch = tolower(str[i]);\n        if ((int)ch - (int)'a' == i) {\n            count++;\n        }\n    }\n    \n    return count;\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\n#include <cctype>\n\nint countCharacters(std::string str) {\n    int count = 0;\n    for (int i = 0; i < str.length(); i++) {\n        char c = std::tolower(str[i]);\n        if (c - 'a' == i) {\n            count++;\n        }\n    }\n    return count;\n}"
        ]
    },
    {
        "id": "166",
        "prompt": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
        "solution": "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count",
        "test": [
            "assert find_even_pair([5, 4, 7, 2, 1]) == 4",
            "assert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9",
            "assert find_even_pair([1, 2, 3]) == 1"
        ],
        "code": [
            "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count"
        ],
        "draft_plan": [
            "# Initialize a variable to keep track of the count of pairs\n# Iterate through each pair of integers in the list\n    # Calculate the xor of the pair\n    # Check if the xor is an even number\n        # If it is, increment the count of pairs\n\n# Return the count of pairs"
        ],
        "requirements": [
            "import java.util.List;\n\npublic class PairXORCount {\n    \n    public static int countPairs(List<Integer> nums) {\n        int pairCount = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            for (int j = i+1; j < nums.size(); j++) {\n                int xorResult = nums.get(i) ^ nums.get(j);\n                if (xorResult % 2 == 0) {\n                    pairCount++;\n                }\n            }\n        }\n        return pairCount;\n    }\n}\n"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nint countPairsWithEvenXor(std::vector<int>& nums) {\n    int count = 0;\n    \n    for (int i = 0; i < nums.size(); i++) {\n        for (int j = i + 1; j < nums.size(); j++) {\n            int xorValue = nums[i] ^ nums[j];\n            \n            if (xorValue % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    \n    return count;\n}"
        ]
    },
    {
        "id": "167",
        "prompt": "Write a python function to find the smallest power of 2 greater than or equal to n.",
        "solution": "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; ",
        "test": [
            "assert next_power_of_2(0) == 1",
            "assert next_power_of_2(5) == 8",
            "assert next_power_of_2(17) == 32"
        ],
        "code": [
            "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; "
        ],
        "draft_plan": [
            "# Initialize a variable to store the power of 2\n# Initialize a variable to store the current value of the power of 2\n# Iterate until the current value is greater than or equal to n\n    # Increase the power of 2 by 1\n    # Calculate the current value as 2 raised to the power of the power of 2\n\n# Return the current value as the smallest power of 2 greater than or equal to n"
        ],
        "requirements": [
            "class SmallestPowerOf2 {\n    public static int smallestPowerOf2(int n) {\n        int power = 0;\n        int currentValue = 1;\n\n        while (currentValue < n) {\n            power++;\n            currentValue = (int) Math.pow(2, power);\n        }\n\n        return currentValue;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <cmath>\n\nint smallestPowerOfTwo(int n) {\n    int power = 0;\n    int currentValue = 1;\n    \n    while (currentValue < n) {\n        power++;\n        currentValue = pow(2, power);\n    }\n    \n    return currentValue;\n}"
        ]
    },
    {
        "id": "168",
        "prompt": "Write a function to count the number of occurrences of a number in a given list.",
        "solution": "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count ",
        "test": [
            "assert frequency([1,2,3], 4) == 0",
            "assert frequency([1,2,2,3,3,3,4], 3) == 3",
            "assert frequency([0,1,2,3,1,2], 1) == 2"
        ],
        "code": [
            "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count "
        ],
        "draft_plan": [
            "# Initialize a counter variable to 0\n\n# Iterate through each element in the list\n    # Check if the current element is equal to the target number\n        # If it is, increment the counter variable by 1\n\n# Return the counter variable"
        ],
        "requirements": [
            "import java.util.List;\n\npublic class NumberCounter {\n    public static int countOccurrences(List<Integer> list, int target) {\n        int counter = 0;\n        for (int num : list) {\n            if (num == target) {\n                counter++;\n            }\n        }\n        return counter;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nint countOccurrences(const std::vector<int>& nums, int target) {\n    int count = 0;\n    \n    for (int num : nums) {\n        if (num == target) {\n            count++;\n        }\n    }\n    \n    return count;\n}"
        ]
    },
    {
        "id": "170",
        "prompt": "Write a function to find the sum of numbers in a list within a range specified by two indices.",
        "solution": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   ",
        "test": [
            "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29",
            "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16",
            "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38"
        ],
        "code": [
            "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   "
        ],
        "draft_plan": [
            "# Initialize a variable to hold the sum of numbers\n\n# Iterate through the list from the start index to the end index (inclusive)\n    # Add the current number to the sum\n\n# Return the sum"
        ],
        "requirements": [
            "public class SumInRange {\n    public static int sumInRange(int[] nums, int startIndex, int endIndex) {\n        int sum = 0;\n        for (int i = startIndex; i <= endIndex; i++) {\n            sum += nums[i];\n        }\n        return sum;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nint sumInRange(std::vector<int>& nums, int startIndex, int endIndex) {\n    int sum = 0;\n    for (int i = startIndex; i <= endIndex; i++) {\n        sum += nums[i];\n    }\n    return sum;\n}"
        ]
    },
    {
        "id": "171",
        "prompt": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
        "solution": "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter",
        "test": [
            "assert perimeter_pentagon(5) == 25",
            "assert perimeter_pentagon(10) == 50",
            "assert perimeter_pentagon(15) == 75"
        ],
        "code": [
            "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter"
        ],
        "draft_plan": [
            "# Calculate the perimeter of a regular pentagon\n    # Multiply the length of one side by 5\n\n# Return the calculated perimeter"
        ],
        "requirements": [
            "public class RegularPentagon {\n    public static double perimeter(double sideLength) {\n        return sideLength * 5;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\ndouble calculatePentagonPerimeter(double sideLength) {\n    double perimeter = sideLength * 5;\n    return perimeter;\n}"
        ]
    },
    {
        "id": "172",
        "prompt": "Write a function to count the number of occurence of the string 'std' in a given string.",
        "solution": "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count",
        "test": [
            "assert count_occurance(\"letstdlenstdporstd\") == 3",
            "assert count_occurance(\"truststdsolensporsd\") == 1",
            "assert count_occurance(\"makestdsostdworthit\") == 2",
            "assert count_occurance(\"stds\") == 1",
            "assert count_occurance(\"\") == 0"
        ],
        "code": [
            "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count"
        ],
        "draft_plan": [
            "# Initialize a variable count to 0\n\n# Iterate through each character in the input string\n    # Check if the current character and the next two characters form the string 'std'\n        # If yes, increment the count\n\n# Return the count"
        ],
        "requirements": [
            "public class OccurrenceCount {\n    public static int countOccurrences(String input) {\n        int count = 0;\n        int length = input.length();\n        \n        for (int i = 0; i < length - 2; i++) {\n            if (input.substring(i, i + 3).equals(\"std\")) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\n\nint countOccurrences(std::string input) {\n    int count = 0;\n    \n    for (int i = 0; i < input.length() - 2; i++) {\n        if (input.substr(i, 3) == \"std\") {\n            count++;\n        }\n    }\n    \n    return count;\n}"
        ]
    },
    {
        "id": "222",
        "prompt": "Write a function to check if all the elements in tuple have same data type or not.",
        "solution": "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) ",
        "test": [
            "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
            "assert check_type((1, 2, \"4\") ) == False",
            "assert check_type((3, 2, 1, 4, 5) ) == True"
        ],
        "code": [
            "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) "
        ],
        "draft_plan": [
            "# Get the data type of the first element in the tuple\n# Iterate through each element in the tuple starting from the second element\n    # Check if the data type of the current element is different from the data type of the first element\n        # If different, return False\n\n# If all elements have the same data type, return True"
        ],
        "requirements": [
            "import java.util.*;\n\npublic class Main {\n    public static <T> boolean checkTupleElementsDataType(Tuple<T> tuple) {\n        if (tuple.size() == 0) {\n            return true;\n        }\n        \n        Class<?> dataType = tuple.get(0).getClass();\n        \n        for (int i = 1; i < tuple.size(); i++) {\n            if (!tuple.get(i).getClass().equals(dataType)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n    \n    public static void main(String[] args) {\n        // Test the function with example tuples\n        Tuple<Integer> tuple1 = new Tuple<>(1, 2, 3);\n        Tuple<String> tuple2 = new Tuple<>(\"a\", \"b\", \"c\");\n        Tuple<Object> tuple3 = new Tuple<>(1, \"a\", true);\n        \n        System.out.println(checkTupleElementsDataType(tuple1));  // Output: true\n        System.out.println(checkTupleElementsDataType(tuple2));  // Output: true\n        System.out.println(checkTupleElementsDataType(tuple3));  // Output: false\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <tuple>\n#include <typeinfo>\n\ntemplate <typename T, typename... Args>\nbool checkTupleDataTypes(const std::tuple<T, Args...>& tuple) {\n    std::string firstType = typeid(T).name();\n    \n    return checkTupleDataTypesImpl(firstType, tuple);\n}\n\ntemplate <typename T, typename... Args>\nbool checkTupleDataTypesImpl(const std::string& firstType, const std::tuple<T, Args...>& tuple) {\n    std::string currentType = typeid(T).name();\n    \n    if (currentType != firstType) {\n        return false;\n    }\n    \n    return checkTupleDataTypesImpl(firstType, tuple);\n}\n\nbool checkTupleDataTypesImpl(const std::string& firstType, const std::tuple<>& tuple) {\n    return true;\n}"
        ]
    },
    {
        "id": "223",
        "prompt": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
        "solution": "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1",
        "test": [
            "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
            "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
            "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
            "assert is_majority([1, 1, 2, 2], 5, 1) == False"
        ],
        "code": [
            "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1"
        ],
        "draft_plan": [
            "# Find the index of the first occurrence of the element in the array\n    # If the index is less than or equal to n/2 and the element at index + n/2 is equal to the given element, return True\n    # Otherwise, return False"
        ],
        "requirements": [
            "public class MajorityElement {\n    public static boolean isMajorityElement(int[] arr, int n, int element) {\n        int firstOccurrence = findFirstOccurrence(arr, n, element);\n        \n        if (firstOccurrence != -1 && firstOccurrence <= n / 2 && arr[firstOccurrence + n / 2] == element) {\n            return true;\n        }\n        \n        return false;\n    }\n    \n    private static int findFirstOccurrence(int[] arr, int n, int element) {\n        int low = 0;\n        int high = n - 1;\n        int firstOccurrence = -1;\n        \n        while (low <= high) {\n            int mid = (low + high) / 2;\n            \n            if (arr[mid] == element) {\n                firstOccurrence = mid;\n                high = mid - 1;\n            } else if (arr[mid] < element) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        \n        return firstOccurrence;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\nbool isMajority(int arr[], int n, int element) {\n    int firstOccurrence = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] == element) {\n            firstOccurrence = i;\n            break;\n        }\n    }\n    \n    if (firstOccurrence <= n/2 && arr[firstOccurrence + n/2] == element) {\n        return true;\n    }\n    return false;\n}"
        ]
    },
    {
        "id": "224",
        "prompt": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.",
        "solution": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ",
        "test": [
            "assert count_Set_Bits(2) == 1",
            "assert count_Set_Bits(4) == 1",
            "assert count_Set_Bits(6) == 2"
        ],
        "code": [
            "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count "
        ],
        "draft_plan": [
            "# Initialize a variable count to 0\n\n# Iterate through each bit in the binary representation of the number\n    # Check if the current bit is 1\n        # If yes, increment the count by 1\n\n# Return the count"
        ],
        "requirements": [
            "public class CountSetBits {\n    public static int countSetBits(int num) {\n        int count = 0;\n        while (num > 0) {\n            if ((num & 1) == 1) {\n                count++;\n            }\n            num = num >> 1;\n        }\n        return count;\n    }\n}"
        ],
        "final_plan": [
            "public static int countSetBits(int num) {\n    int count = 0;\n    while (num > 0) {\n        count += num & 1;\n        num >>= 1;\n    }\n    return count;\n}"
        ]
    },
    {
        "id": "226",
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.",
        "solution": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result",
        "test": [
            "assert odd_values_string('abcdef') == 'ace'",
            "assert odd_values_string('python') == 'pto'",
            "assert odd_values_string('data') == 'dt'",
            "assert odd_values_string('lambs') == 'lms'"
        ],
        "code": [
            "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result"
        ],
        "draft_plan": [
            "# Initialize an empty string to store the result\n\n# Iterate through each character and its index in the input string\n    # Check if the index is even (index % 2 == 0)\n        # Append the character to the result string\n\n# Return the result string"
        ],
        "requirements": [
            "public class Main {\n\n    public static String removeOddIndexedChars(String input) {\n        StringBuilder result = new StringBuilder();\n\n        for (int index = 0; index < input.length(); index++) {\n            if (index % 2 == 0) {\n                result.append(input.charAt(index));\n            }\n        }\n\n        return result.toString();\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\nstring removeOddIndexChars(string str) {\n    string result = \"\";\n    for (int i = 0; i < str.length(); i++) {\n        if (i % 2 == 0) {\n            result += str[i];\n        }\n    }\n    return result;\n}"
        ]
    },
    {
        "id": "227",
        "prompt": "Write a function to find minimum of three numbers.",
        "solution": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ",
        "test": [
            "assert min_of_three(10,20,0)==0",
            "assert min_of_three(19,15,18)==15",
            "assert min_of_three(-10,-20,-30)==-30"
        ],
        "code": [
            "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest "
        ],
        "draft_plan": [
            "# Compare the first number with the second number and store the minimum in a variable min_num\n# Compare the min_num with the third number and update min_num if necessary\n\n# Return min_num"
        ],
        "requirements": [
            "public class MinOfThreeNumbers {\n    public static int findMinimum(int num1, int num2, int num3) {\n        int minNum = num1;\n        \n        if (num2 < minNum) {\n            minNum = num2;\n        }\n        \n        if (num3 < minNum) {\n            minNum = num3;\n        }\n        \n        return minNum;\n    }\n}"
        ],
        "final_plan": [
            "int findMinimum(int num1, int num2, int num3) {\n    int min_num = num1;\n    \n    if (num2 < min_num) {\n        min_num = num2;\n    }\n    \n    if (num3 < min_num) {\n        min_num = num3;\n    }\n    \n    return min_num;\n}"
        ]
    },
    {
        "id": "228",
        "prompt": "Write a python function to check whether all the bits are unset in the given range or not.",
        "solution": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False",
        "test": [
            "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
            "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
            "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
        ],
        "code": [
            "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False"
        ],
        "draft_plan": [
            "# Iterate through each number in the given range\n    # Convert the number to binary representation\n    # Check if any of the bits in the binary representation are set (equal to 1)\n        # If any bit is set, return False (bits are not all unset)\n\n# If all numbers in the range have all bits unset, return True"
        ],
        "requirements": [
            "public class Main {\n\n    public static boolean allBitsUnsetInRange(int start, int end) {\n        for (int i = start; i <= end; i++) {\n            String binary = Integer.toBinaryString(i);\n            for (char bit : binary.toCharArray()) {\n                if (bit == '1') {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\nbool allBitsUnset(int start, int end) {\n    for (int num = start; num <= end; num++) {\n        int bit = num;\n        while (bit > 0) {\n            if (bit & 1) {\n                return false;\n            }\n            bit >>= 1;\n        }\n    }\n    return true;\n}"
        ]
    },
    {
        "id": "229",
        "prompt": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
        "solution": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr",
        "test": [
            "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
            "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
            "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
        ],
        "code": [
            "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr"
        ],
        "draft_plan": [
            "# Create two empty lists, one for negative elements and one for positive elements\n\n# Iterate through the first n elements of the given array\n    # Check if the current element is negative\n        # If it is, append it to the negative elements list\n    # Otherwise, append it to the positive elements list\n\n# Return the concatenation of the negative elements list and the positive elements list"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class RearrangeArray {\n    public static void rearrangeArray(int[] arr, int n) {\n        List<Integer> negativeElements = new ArrayList<>();\n        List<Integer> positiveElements = new ArrayList<>();\n\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negativeElements.add(arr[i]);\n            } else {\n                positiveElements.add(arr[i]);\n            }\n        }\n\n        int index = 0;\n        for (int i = 0; i < negativeElements.size(); i++) {\n            arr[index++] = negativeElements.get(i);\n        }\n\n        for (int i = 0; i < positiveElements.size(); i++) {\n            arr[index++] = positiveElements.get(i);\n        }\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvoid rearrangeElements(vector<int>& arr, int n) {\n    vector<int> negatives;\n    vector<int> positives;\n    \n    for (int i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            negatives.push_back(arr[i]);\n        } else {\n            positives.push_back(arr[i]);\n        }\n    }\n    \n    int index = 0;\n    for (int i = 0; i < negatives.size(); i++) {\n        arr[index++] = negatives[i];\n    }\n    \n    for (int i = 0; i < positives.size(); i++) {\n        arr[index++] = positives[i];\n    }\n}\n\nint main() {\n    vector<int> arr = {-1, 2, -3, 4, -5, 6};\n    int n = 6;\n    \n    rearrangeElements(arr, n);\n    \n    for (int i = 0; i < n; i++) {\n        cout << arr[i] << \" \";\n    }\n    \n    return 0;\n}"
        ]
    },
    {
        "id": "230",
        "prompt": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
        "solution": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2",
        "test": [
            "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
            "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
            "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
        ],
        "code": [
            "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2"
        ],
        "draft_plan": [
            "# Create an empty string variable called \"result\"\n\n# Iterate through each character in the input string\n    # If the character is a blank space\n        # Append the replacement character to the \"result\" string\n    # Else\n        # Append the current character to the \"result\" string\n\n# Return the \"result\" string"
        ],
        "requirements": [
            "public class StringReplace {\n    public static String replaceBlankSpaces(String input, char replacement) {\n        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < input.length(); i++) {\n            if (input.charAt(i) == ' ') {\n                result.append(replacement);\n            } else {\n                result.append(input.charAt(i));\n            }\n        }\n        \n        return result.toString();\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\n\nstd::string replaceBlankSpaces(const std::string& str, char replacement) {\n    std::string result;\n    for (char c : str) {\n        if (c == ' ') {\n            result += replacement;\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}"
        ]
    },
    {
        "id": "232",
        "prompt": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.",
        "solution": "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest",
        "test": [
            "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])",
            "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])",
            "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])"
        ],
        "code": [
            "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest"
        ],
        "draft_plan": [
            "# Sort the input list in descending order\n# Return the first n items from the sorted list"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class LargestNItems {\n\n    public static List<Integer> getNLargestItems(List<Integer> list, int n) {\n        // Sort the input list in descending order\n        Collections.sort(list, Collections.reverseOrder());\n\n        // Return the first n items from the sorted list\n        return list.subList(0, n);\n    }\n}"
        ],
        "final_plan": [
            "#include <vector>\n#include <algorithm>\n\nstd::vector<int> findNLargestItems(std::vector<int> list, int n) {\n    std::sort(list.begin(), list.end(), std::greater<int>());\n    std::vector<int> nLargestItems(list.begin(), list.begin() + n);\n    return nLargestItems;\n}"
        ]
    },
    {
        "id": "233",
        "prompt": "Write a function to find the lateral surface area of a cylinder.",
        "solution": "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface",
        "test": [
            "assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)",
            "assert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)",
            "assert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)"
        ],
        "code": [
            "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface"
        ],
        "draft_plan": [
            "# Function to calculate the lateral surface area of a cylinder\ndef calculate_lateral_surface_area_cylinder(radius, height):\n    # Calculate the lateral surface area of a cylinder using the formula 2 * pi * radius * height\n    lateral_surface_area = 2 * 3.14159 * radius * height\n    return lateral_surface_area\n\n# Example usage\nradius = 5\nheight = 10\nlateral_surface_area = calculate_lateral_surface_area_cylinder(radius, height)\nprint(\"Lateral Surface Area of Cylinder:\", lateral_surface_area)"
        ],
        "requirements": [
            "public class Cylinder {\n    public static double calculateLateralSurfaceArea(double radius, double height) {\n        double lateralSurfaceArea = 2 * Math.PI * radius * height;\n        return lateralSurfaceArea;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\n// Function to calculate the lateral surface area of a cylinder\ndouble calculateLateralSurfaceAreaCylinder(double radius, double height) {\n    // Calculate the lateral surface area of a cylinder using the formula 2 * pi * radius * height\n    double lateralSurfaceArea = 2 * 3.14159 * radius * height;\n    return lateralSurfaceArea;\n}\n\nint main() {\n    // Example usage\n    double radius = 5.0;\n    double height = 10.0;\n    double lateralSurfaceArea = calculateLateralSurfaceAreaCylinder(radius, height);\n    cout << \"Lateral Surface Area of Cylinder: \" << lateralSurfaceArea << endl;\n\n    return 0;\n}"
        ]
    },
    {
        "id": "234",
        "prompt": "Write a function to find the volume of a cube given its side length.",
        "solution": "def volume_cube(l):\n  volume = l * l * l\n  return volume",
        "test": [
            "assert volume_cube(3)==27",
            "assert volume_cube(2)==8",
            "assert volume_cube(5)==125"
        ],
        "code": [
            "def volume_cube(l):\n  volume = l * l * l\n  return volume"
        ],
        "draft_plan": [
            "# Define a function called calculate_cube_volume that takes a parameter side_length\n\n# Calculate the volume of the cube using the formula side_length^3\n\n# Return the volume"
        ],
        "requirements": [
            "public class Cube {\n    public static double calculateCubeVolume(double sideLength) {\n        double volume = Math.pow(sideLength, 3);\n        return volume;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n\ndouble calculate_cube_volume(double side_length) {\n    double volume = side_length * side_length * side_length;\n    return volume;\n}"
        ]
    },
    {
        "id": "235",
        "prompt": "Write a python function to set all even bits of a given number.",
        "solution": "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) ",
        "test": [
            "assert even_bit_set_number(10) == 10",
            "assert even_bit_set_number(20) == 30",
            "assert even_bit_set_number(30) == 30"
        ],
        "code": [
            "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) "
        ],
        "draft_plan": [
            "To set all even bits of a given number, we can use bitwise operations. Here is the code logic:\n\n1. Define a function named `set_even_bits` that takes an integer `num` as input.\n2. Create a mask `mask` with all even bits set to 1 and odd bits set to 0. We can achieve this by using the hexadecimal number `0xAAAAAAAA`, which has the binary representation `10101010101010101010101010101010`.\n3. Perform a bitwise OR operation between `num` and `mask` to set all even bits of `num` to 1.\n4. Return the modified `num`.\n\nHere is the code:\n\n```python\ndef set_even_bits(num):\n    mask = 0xAAAAAAAA\n    num |= mask\n    return num\n```\n\nYou can use this function to set all even bits of a given number. For example:\n\n```python\nnum = 42  # Binary representation: 101010\nresult = set_even_bits(num)\nprint(result)  # Output: 170 (Binary representation: 10101010)\n```\n\nNote that the binary representation of `result` has all even bits set to 1."
        ],
        "requirements": [
            "Sure! Here's the Java code without the main method to set all even bits of a given number:\n\n```java\npublic class SetEvenBits {\n    public static int setEvenBits(int num) {\n        int mask = 0xAAAAAAAA;\n        num |= mask;\n        return num;\n    }\n}\n```\n\nYou can use this code by calling the `setEvenBits` method and passing the number as an argument. Here's an example:\n\n```java\nint num = 42; // Binary representation: 101010\nint result = SetEvenBits.setEvenBits(num);\nSystem.out.println(result); // Output: 170 (Binary representation: 10101010)\n```\n\nThe `result` variable will contain the number with all even bits set to 1."
        ],
        "final_plan": [
            "```cpp\n#include <iostream>\n\nint setEvenBits(int num) {\n    int mask = 0xAAAAAAAA;\n    num |= mask;\n    return num;\n}\n```\n\nYou can use this function to set all even bits of a given number. For example:\n\n```cpp\nint num = 42; // Binary representation: 101010\nint result = setEvenBits(num);\nstd::cout << result << std::endl; // Output: 170 (Binary representation: 10101010)\n```\n\nNote that the binary representation of `result` has all even bits set to 1."
        ]
    },
    {
        "id": "237",
        "prompt": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.",
        "solution": "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) ",
        "test": [
            "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
            "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
            "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
        ],
        "code": [
            "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) "
        ],
        "draft_plan": [
            "# Initialize an empty dictionary to store the counts of each unique tuple\n\n# Iterate through each tuple in the input list\n    # Check if the tuple is already in the dictionary\n        # If yes, increment its count by 1\n        # If no, add it to the dictionary with count 1\n\n# Return the dictionary with the counts"
        ],
        "requirements": [
            "import java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class TupleCounter {\n    public static <T> Map<T, Integer> countTuples(List<T> tuples) {\n        Map<T, Integer> tupleCounts = new HashMap<>();\n\n        for (T tuple : tuples) {\n            if (tupleCounts.containsKey(tuple)) {\n                tupleCounts.put(tuple, tupleCounts.get(tuple) + 1);\n            } else {\n                tupleCounts.put(tuple, 1);\n            }\n        }\n\n        return tupleCounts;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nunordered_map<vector<int>, int> countTuples(vector<vector<int>>& tuples) {\n    unordered_map<vector<int>, int> countMap;\n    for (const vector<int>& tuple : tuples) {\n        if (countMap.find(tuple) != countMap.end()) {\n            countMap[tuple]++;\n        } else {\n            countMap[tuple] = 1;\n        }\n    }\n    return countMap;\n}"
        ]
    },
    {
        "id": "238",
        "prompt": "Write a python function to count the number of non-empty substrings of a given string.",
        "solution": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ",
        "test": [
            "assert number_of_substrings(\"abc\") == 6",
            "assert number_of_substrings(\"abcd\") == 10",
            "assert number_of_substrings(\"abcde\") == 15"
        ],
        "code": [
            "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); "
        ],
        "draft_plan": [
            "# Initialize a counter variable to 0\n\n# Iterate through each character and its index in the input string\n    # For each character, iterate through each substring starting from that character\n        # Increment the counter for each non-empty substring\n\n# Return the counter variable"
        ],
        "requirements": [
            "```java\npublic class SubstringCounter {\n    \n    public static int countSubstrings(String str) {\n        int count = 0;\n        int n = str.length();\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n```"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\nint countNonEmptySubstrings(string str) {\n    int count = 0;\n    for (int i = 0; i < str.length(); i++) {\n        for (int j = 1; j <= str.length() - i; j++) {\n            count++;\n        }\n    }\n    return count;\n}"
        ]
    },
    {
        "id": "239",
        "prompt": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
        "solution": "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]",
        "test": [
            "assert get_total_number_of_sequences(10, 4) == 4",
            "assert get_total_number_of_sequences(5, 2) == 6",
            "assert get_total_number_of_sequences(16, 3) == 84"
        ],
        "code": [
            "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]"
        ],
        "draft_plan": [
            "# Define a recursive function to count the possible sequences\n    # Base case: if n is 0, return 1 (empty sequence)\n    # Base case: if n is 1, return m (only one element in the sequence)\n    # Recursive case:\n        # Initialize a variable count to 0\n        # Iterate from 1 to m (inclusive)\n            # Check if the current element is greater than or equal to twice the previous element\n                # Recursively call the function with n-1 and the current element as the previous element\n                # Add the result to the count\n        # Return the count\n\n# Call the recursive function with m and n as arguments to get the number of possible sequences"
        ],
        "requirements": [
            "public class PossibleSequences {\n    public static int countSequences(int m, int n) {\n        if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n            return m;\n        }\n        \n        int count = 0;\n        for (int i = 1; i <= m; i++) {\n            if (i >= 2 * countSequences(m, n - 1)) {\n                count += countSequences(m, n - 1);\n            }\n        }\n        \n        return count;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\nint countSequences(int m, int n, int prev) {\n    if (n == 0) {\n        return 1;\n    }\n    if (n == 1) {\n        return m;\n    }\n    \n    int count = 0;\n    for (int i = prev * 2; i <= m; i++) {\n        count += countSequences(m, n - 1, i);\n    }\n    \n    return count;\n}\n\nint findPossibleSequences(int m, int n) {\n    return countSequences(m, n, 1);\n}"
        ]
    },
    {
        "id": "240",
        "prompt": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
        "solution": "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n",
        "test": [
            "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
            "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
            "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
        ],
        "code": [
            "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n"
        ],
        "draft_plan": [
            "# Define a function that takes in two lists as input\n    # Remove the last element from the first list\n    # Extend the first list with the elements of the second list\n\n# Call the function with the input lists"
        ],
        "requirements": [
            "import java.util.List;\n\npublic class ListManipulation {\n    public static void replaceLastElement(List<Integer> list1, List<Integer> list2) {\n        list1.remove(list1.size() - 1);\n        list1.addAll(list2);\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nvoid replaceLastElement(std::vector<int>& list1, const std::vector<int>& list2) {\n    list1.pop_back(); // Remove the last element from the first list\n    list1.insert(list1.end(), list2.begin(), list2.end()); // Extend the first list with the elements of the second list\n}\n\nint main() {\n    std::vector<int> list1 = {1, 2, 3, 4};\n    std::vector<int> list2 = {5, 6, 7};\n\n    replaceLastElement(list1, list2);\n\n    for (int element : list1) {\n        std::cout << element << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}"
        ]
    },
    {
        "id": "242",
        "prompt": "Write a function to count the total number of characters in a string.",
        "solution": "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total",
        "test": [
            "assert count_charac(\"python programming\")==18",
            "assert count_charac(\"language\")==8",
            "assert count_charac(\"words\")==5"
        ],
        "code": [
            "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total"
        ],
        "draft_plan": [
            "# Initialize a variable count to 0\n\n# Iterate through each character in the string\n    # Increment count by 1\n\n# Return the value of count as the total number of characters in the string"
        ],
        "requirements": [
            "#include <iostream>\n#include <string>\n\nint count_characters(std::string str) {\n    int count = 0;\n    for (char c : str) {\n        count++;\n    }\n    return count;\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\n\nint countCharacters(const std::string& str) {\n    int count = 0;\n    for (char ch : str) {\n        count++;\n    }\n    return count;\n}"
        ]
    },
    {
        "id": "244",
        "prompt": "Write a python function to find the next perfect square greater than a given number.",
        "solution": "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN ",
        "test": [
            "assert next_Perfect_Square(35) == 36",
            "assert next_Perfect_Square(6) == 9",
            "assert next_Perfect_Square(9) == 16"
        ],
        "code": [
            "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN "
        ],
        "draft_plan": [
            "# Import the math module\n\n# Define a function to find the next perfect square\n    # Find the square root of the given number using math.sqrt()\n    # Round up the square root using math.ceil()\n    # Calculate the next perfect square by squaring the rounded up square root\n    # Return the next perfect square\n\n# Test the function with a given number"
        ],
        "requirements": [
            "import java.lang.Math;\n\npublic class NextPerfectSquare {\n    public static int findNextPerfectSquare(int num) {\n        double sqrt = Math.ceil(Math.sqrt(num));\n        int nextPerfectSquare = (int) Math.pow(sqrt, 2);\n        return nextPerfectSquare;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <cmath>\n\nint nextPerfectSquare(int n) {\n    int root = ceil(sqrt(n));\n    return root * root;\n}\n\nint main() {\n    int num;\n    std::cout << \"Enter a number: \";\n    std::cin >> num;\n    int nextSquare = nextPerfectSquare(num);\n    std::cout << \"The next perfect square greater than \" << num << \" is: \" << nextSquare << std::endl;\n    return 0;\n}"
        ]
    },
    {
        "id": "245",
        "prompt": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.",
        "solution": "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum",
        "test": [
            "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194",
            "assert max_sum([80, 60, 30, 40, 20, 10]) == 210",
            "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138"
        ],
        "code": [
            "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum"
        ],
        "draft_plan": [
            "# Initialize two arrays, increasing and decreasing, with all elements set to 0\n\n# Iterate through each element in the input array\n    # Iterate through each previous element in the input array\n        # If the current element is greater than the previous element, update the increasing array at the current index with the maximum of its current value and the increasing array at the previous index plus the current element\n    # Iterate through each previous element in the reverse of the input array\n        # If the current element is greater than the previous element, update the decreasing array at the current index with the maximum of its current value and the decreasing array at the previous index plus the current element\n\n# Find the maximum sum of bitonic subsequence by adding the maximum value of increasing and decreasing arrays at each index and subtracting the current element itself\n\n# Return the maximum sum of bitonic subsequence"
        ],
        "requirements": [
            "public class BitonicSubsequence {\n    public static int maxBitonicSum(int[] arr) {\n        int n = arr.length;\n        \n        int[] increasing = new int[n];\n        int[] decreasing = new int[n];\n        \n        for (int i = 0; i < n; i++) {\n            increasing[i] = arr[i];\n            decreasing[i] = arr[i];\n        }\n        \n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr[i] > arr[j] && increasing[i] < increasing[j] + arr[i]) {\n                    increasing[i] = increasing[j] + arr[i];\n                }\n            }\n        }\n        \n        for (int i = n - 2; i >= 0; i--) {\n            for (int j = n - 1; j > i; j--) {\n                if (arr[i] > arr[j] && decreasing[i] < decreasing[j] + arr[i]) {\n                    decreasing[i] = decreasing[j] + arr[i];\n                }\n            }\n        }\n        \n        int maxSum = Integer.MIN_VALUE;\n        for (int i = 0; i < n; i++) {\n            int sum = increasing[i] + decreasing[i] - arr[i];\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n        \n        return maxSum;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint maxBitonicSubsequence(vector<int>& arr) {\n    int n = arr.size();\n    vector<int> increasing(n, 0);\n    vector<int> decreasing(n, 0);\n    \n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                increasing[i] = max(increasing[i], increasing[j] + arr[i]);\n            }\n        }\n    }\n    \n    for (int i = n - 1; i >= 0; i--) {\n        for (int j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j]) {\n                decreasing[i] = max(decreasing[i], decreasing[j] + arr[i]);\n            }\n        }\n    }\n    \n    int maxSum = 0;\n    for (int i = 0; i < n; i++) {\n        maxSum = max(maxSum, increasing[i] + decreasing[i] - arr[i]);\n    }\n    \n    return maxSum;\n}"
        ]
    },
    {
        "id": "246",
        "prompt": "Write a function for computing square roots using the babylonian method.",
        "solution": "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;",
        "test": [
            "assert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)",
            "assert math.isclose(babylonian_squareroot(2), 1.414213562373095, rel_tol=0.001)",
            "assert math.isclose(babylonian_squareroot(9), 3.0, rel_tol=0.001)"
        ],
        "code": [
            "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;"
        ],
        "draft_plan": [
            "# Define a function to compute square roots using the Babylonian method\n    # Initialize an initial guess for the square root (e.g., guess = 1.0)\n    # Initialize an error tolerance (e.g., tolerance = 0.0001)\n    \n    # Iterate until the difference between the guess and the actual square root is within the tolerance\n        # Calculate a new guess by averaging the current guess and the input divided by the current guess\n        # Calculate the difference between the new guess and the current guess\n        # Update the current guess with the new guess\n    \n    # Return the final guess as the estimated square root"
        ],
        "requirements": [
            "public class BabylonianMethod {\n    \n    public static double computeSquareRoot(double n) {\n        double guess = 1.0;\n        double tolerance = 0.0001;\n        \n        while (Math.abs(guess * guess - n) > tolerance) {\n            guess = (guess + n / guess) / 2.0;\n        }\n        \n        return guess;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n\ndouble computeSquareRoot(double num) {\n    // Initialize initial guess and error tolerance\n    double guess = 1.0;\n    double tolerance = 0.0001;\n    \n    // Iterate until the difference between guess and actual square root is within tolerance\n    while (std::abs(guess * guess - num) > tolerance) {\n        // Calculate new guess by averaging current guess and input divided by current guess\n        guess = (guess + num / guess) / 2.0;\n    }\n    \n    // Return the final guess as the estimated square root\n    return guess;\n}"
        ]
    },
    {
        "id": "247",
        "prompt": "Write a function to find the length of the longest palindromic subsequence in the given string.",
        "solution": "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]",
        "test": [
            "assert lps(\"TENS FOR TENS\") == 5",
            "assert lps(\"CARDIO FOR CARDS\") == 7",
            "assert lps(\"PART OF THE JOURNEY IS PART\") == 9"
        ],
        "code": [
            "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]"
        ],
        "draft_plan": [
            "# Create a 2D array dp of size n x n, where n is the length of the input string\n\n# Iterate through the input string from the end\n    # Set dp[i][i] to 1 since a single character is a palindrome\n\n# Iterate through the input string from the second last character to the first character\n    # Iterate through the input string from the current character to the last character\n        # If the current characters are the same\n            # Set dp[i][j] to dp[i+1][j-1] + 2\n        # Otherwise\n            # Set dp[i][j] to max(dp[i+1][j], dp[i][j-1])\n\n# Return dp[0][n-1], where n is the length of the input string"
        ],
        "requirements": [
            "```java\npublic class LongestPalindromicSubsequence {\n    public static int longestPalindromicSubsequence(String str) {\n        int n = str.length();\n        int[][] dp = new int[n][n];\n\n        // Initialize base cases\n        for (int i = 0; i < n; i++) {\n            dp[i][i] = 1;\n        }\n\n        // Dynamic programming\n        for (int i = n - 2; i >= 0; i--) {\n            for (int j = i + 1; j < n; j++) {\n                if (str.charAt(i) == str.charAt(j)) {\n                    dp[i][j] = dp[i + 1][j - 1] + 2;\n                } else {\n                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n\n        // Return the length of the longest palindromic subsequence\n        return dp[0][n - 1];\n    }\n}\n```"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint longestPalindromicSubsequence(string str) {\n    int n = str.length();\n    vector<vector<int>> dp(n, vector<int>(n));\n\n    for (int i = n - 1; i >= 0; i--) {\n        dp[i][i] = 1;\n\n        for (int j = i + 1; j < n; j++) {\n            if (str[i] == str[j]) {\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n\n    return dp[0][n - 1];\n}"
        ]
    },
    {
        "id": "248",
        "prompt": "Write a function that takes in an integer n and calculates the harmonic sum of n-1.",
        "solution": "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) ",
        "test": [
            "assert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)",
            "assert math.isclose(harmonic_sum(4), 2.083333333333333, rel_tol=0.001)",
            "assert math.isclose(harmonic_sum(19), 3.547739657143682, rel_tol=0.001)"
        ],
        "code": [
            "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) "
        ],
        "draft_plan": [
            "# Initialize the harmonic sum to 0\n\n# Iterate from i = 1 to n-1\n    # Add 1/i to the harmonic sum\n\n# Return the harmonic sum"
        ],
        "requirements": [
            "public class HarmonicSum {\n    public static double calculateHarmonicSum(int n) {\n        double harmonicSum = 0.0;\n        \n        for (int i = 1; i < n; i++) {\n            harmonicSum += 1.0 / i;\n        }\n        \n        return harmonicSum;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n\ndouble harmonicSum(int n) {\n    double sum = 0.0;\n    \n    for (int i = 1; i < n; i++) {\n        sum += 1.0 / i;\n    }\n    \n    return sum;\n}\n\nint main() {\n    int n = 10;\n    double result = harmonicSum(n);\n    std::cout << \"The harmonic sum of \" << n << \" is: \" << result << std::endl;\n    \n    return 0;\n}"
        ]
    },
    {
        "id": "249",
        "prompt": "Write a function to find the intersection of two arrays.",
        "solution": "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result",
        "test": [
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
        ],
        "code": [
            "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result"
        ],
        "draft_plan": [
            "# Convert both arrays to sets to eliminate duplicates\n\n# Find the common elements by taking the intersection of the two sets\n\n# Convert the common elements set back to a list and return it"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class ArrayIntersection {\n\n    public static List<Integer> findIntersection(int[] nums1, int[] nums2) {\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n\n        for (int num : nums1) {\n            set1.add(num);\n        }\n\n        for (int num : nums2) {\n            set2.add(num);\n        }\n\n        set1.retainAll(set2);\n\n        return new ArrayList<>(set1);\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <unordered_set>\n\nstd::vector<int> findIntersection(const std::vector<int>& nums1, const std::vector<int>& nums2) {\n    std::unordered_set<int> set1(nums1.begin(), nums1.end());\n    std::unordered_set<int> set2(nums2.begin(), nums2.end());\n    \n    std::vector<int> intersection;\n    for (int num : set1) {\n        if (set2.count(num)) {\n            intersection.push_back(num);\n        }\n    }\n    \n    return intersection;\n}"
        ]
    },
    {
        "id": "250",
        "prompt": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
        "solution": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ",
        "test": [
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
        ],
        "code": [
            "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count "
        ],
        "draft_plan": [
            "# Initialize a counter variable to 0\n\n# Iterate through each element in the tuple\n    # Check if the current element is equal to the input element\n        # If equal, increment the counter variable by 1\n\n# Return the counter variable"
        ],
        "requirements": [
            "public class TupleCount {\n    public static int countOccurrences(Tuple tuple, Object element) {\n        int count = 0;\n        for (Object obj : tuple) {\n            if (obj.equals(element)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <tuple>\n\ntemplate<typename T, typename... Args>\nint countElementInTuple(const std::tuple<Args...>& tup, const T& element) {\n    int count = 0;\n    std::apply([&](const auto&... args) {\n        ((args == element ? count++ : 0), ...);\n    }, tup);\n    return count;\n}\n\nint main() {\n    std::tuple<int, double, std::string, char> tup(1, 3.14, \"Hello\", 'a');\n    int count = countElementInTuple(tup, 3.14);\n    std::cout << \"Count: \" << count << std::endl; // Output: Count: 1\n    return 0;\n}"
        ]
    },
    {
        "id": "251",
        "prompt": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.",
        "solution": "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list",
        "test": [
            "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']",
            "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']",
            "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']"
        ],
        "code": [
            "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list"
        ],
        "draft_plan": [
            "# Initialize an empty list to store the result\n\n# Iterate through each element in the input list\n    # Add the given element to the result list\n    # Add the current element from the input list to the result list\n\n# Return the resulting list"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class InsertBeforeEachElement {\n\n    public static List<Integer> insertBeforeEachElement(List<Integer> list, int element) {\n        List<Integer> resultList = new ArrayList<>();\n\n        for (int i = 0; i < list.size(); i++) {\n            resultList.add(element);\n            resultList.add(list.get(i));\n        }\n\n        return resultList;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nstd::vector<int> insertBeforeEachElement(const std::vector<int>& lst, int element) {\n    std::vector<int> result;\n\n    for (int i = 0; i < lst.size(); i++) {\n        result.push_back(element);\n        result.push_back(lst[i]);\n    }\n\n    return result;\n}"
        ]
    },
    {
        "id": "252",
        "prompt": "Write a python function to convert complex numbers to polar coordinates.",
        "solution": "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) ",
        "test": [
            "assert convert(1) == (1.0, 0.0)",
            "assert convert(4) == (4.0,0.0)",
            "assert convert(5) == (5.0,0.0)"
        ],
        "code": [
            "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) "
        ],
        "draft_plan": [
            "To convert a complex number to polar coordinates, we can use the `cmath` module in Python, which provides functions to perform mathematical operations on complex numbers. Here is the code logic to convert a complex number to polar coordinates:\n\n1. Import the `cmath` module.\n2. Define a function `complex_to_polar` that takes a complex number as input.\n3. Use the `cmath.polar()` function to convert the complex number to polar form. This function returns a tuple containing the magnitude and phase angle.\n4. Return the magnitude and phase angle from the function.\n\nHere is the code implementation of the above logic:\n\n```python\nimport cmath\n\ndef complex_to_polar(num):\n    polar = cmath.polar(num)\n    return polar\n\n# Example usage\ncomplex_num = 3 + 4j\npolar_coordinates = complex_to_polar(complex_num)\nprint(\"Magnitude:\", polar_coordinates[0])\nprint(\"Phase angle:\", polar_coordinates[1])\n```\n\nOutput:\n```\nMagnitude: 5.0\nPhase angle: 0.9272952180016122\n```\n\nIn the above example, the complex number `3 + 4j` is converted to polar coordinates, where the magnitude is `5.0` and the phase angle is `0.9272952180016122`."
        ],
        "requirements": [
            "import java.util.*;\n\nclass ComplexToPolar {\n    public static double[] complexToPolar(double real, double imag) {\n        double magnitude = Math.sqrt(real * real + imag * imag);\n        double phase = Math.atan2(imag, real);\n        \n        double[] polarCoordinates = new double[2];\n        polarCoordinates[0] = magnitude;\n        polarCoordinates[1] = phase;\n        \n        return polarCoordinates;\n    }\n}\n"
        ],
        "final_plan": [
            "#include <iostream>\n#include <cmath>\n\nstruct PolarCoordinates {\n    double magnitude;\n    double phaseAngle;\n};\n\nPolarCoordinates complexToPolar(double real, double imaginary) {\n    PolarCoordinates polar;\n    polar.magnitude = std::sqrt(real * real + imaginary * imaginary);\n    polar.phaseAngle = std::atan2(imaginary, real);\n    return polar;\n}\n\nint main() {\n    double real = 3.0;\n    double imaginary = 4.0;\n    PolarCoordinates polar = complexToPolar(real, imaginary);\n    std::cout << \"Magnitude: \" << polar.magnitude << std::endl;\n    std::cout << \"Phase angle: \" << polar.phaseAngle << std::endl;\n    return 0;\n}"
        ]
    },
    {
        "id": "253",
        "prompt": "Write a python function that returns the number of integer elements in a given list.",
        "solution": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr",
        "test": [
            "assert count_integer([1,2,'abc',1.2]) == 2",
            "assert count_integer([1,2,3]) == 3",
            "assert count_integer([1,1.2,4,5.1]) == 2"
        ],
        "code": [
            "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr"
        ],
        "draft_plan": [
            "# Initialize a counter variable to 0\n\n# Iterate through each element in the list\n    # Check if the current element is an integer\n        # If yes, increment the counter variable\n\n# Return the counter variable as the number of integer elements in the list"
        ],
        "requirements": [
            "import java.util.List;\n\npublic class CountIntegerElements {\n    public static int countIntegerElements(List<Object> list) {\n        int count = 0;\n        for (Object element : list) {\n            if (element instanceof Integer) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"
        ],
        "final_plan": [
            "#include <vector>\n\nint countIntegerElements(const std::vector<int>& arr) {\n    int count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (typeid(arr[i]) == typeid(int)) {\n            count++;\n        }\n    }\n    return count;\n}"
        ]
    },
    {
        "id": "255",
        "prompt": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.",
        "solution": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n",
        "test": [
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
        ],
        "code": [
            "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n"
        ],
        "draft_plan": [
            "To generate all combinations (with repetition) of the elements of a given list, you can use the `combinations_with_replacement` function from the `itertools` module. Here's the code logic:\n\n```python\nimport itertools\n\ndef generate_combinations(lst, n):\n    # Generate all combinations with repetition of length n\n    combinations = list(itertools.combinations_with_replacement(lst, n))\n    \n    # Convert the combinations to a list of tuples\n    combinations = [tuple(combination) for combination in combinations]\n    \n    return combinations\n```\n\nIn this code, the `generate_combinations` function takes in two parameters: `lst`, which is the input list, and `n`, which is the desired length of the combinations. It uses the `combinations_with_replacement` function from the `itertools` module to generate all combinations with repetition of length `n` from the input list. Then, it converts each combination to a tuple and returns the resulting list of tuples."
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class CombinationsWithRepetition {\n    \n    public static List<List<Integer>> generateCombinations(List<Integer> lst, int n) {\n        List<List<Integer>> combinations = new ArrayList<>();\n        generateCombinationsHelper(lst, n, new ArrayList<>(), combinations);\n        return combinations;\n    }\n    \n    private static void generateCombinationsHelper(List<Integer> lst, int n, List<Integer> currentCombination, List<List<Integer>> combinations) {\n        if (currentCombination.size() == n) {\n            combinations.add(new ArrayList<>(currentCombination));\n            return;\n        }\n        \n        for (int i = 0; i < lst.size(); i++) {\n            currentCombination.add(lst.get(i));\n            generateCombinationsHelper(lst, n, currentCombination, combinations);\n            currentCombination.remove(currentCombination.size() - 1);\n        }\n    }\n}"
        ],
        "final_plan": [
            "To generate all combinations (with repetition) of the elements of a given list in C++, you can use a recursive approach. Here's the code logic:\n\n```cpp\n#include <iostream>\n#include <vector>\n\nvoid generateCombinations(std::vector<int>& lst, int n, std::vector<std::vector<int>>& combinations, std::vector<int>& currentCombination) {\n    // Base case: if the current combination has reached the desired length, add it to the list of combinations\n    if (currentCombination.size() == n) {\n        combinations.push_back(currentCombination);\n        return;\n    }\n    \n    // Recursive case: for each element in the list, add it to the current combination and make a recursive call\n    for (int i = 0; i < lst.size(); i++) {\n        currentCombination.push_back(lst[i]);\n        generateCombinations(lst, n, combinations, currentCombination);\n        currentCombination.pop_back();\n    }\n}\n\nstd::vector<std::vector<int>> generateCombinations(std::vector<int>& lst, int n) {\n    std::vector<std::vector<int>> combinations;\n    std::vector<int> currentCombination;\n    \n    generateCombinations(lst, n, combinations, currentCombination);\n    \n    return combinations;\n}\n```\n\nIn this code, the `generateCombinations` function takes in two parameters: `lst`, which is the input list, and `n`, which is the desired length of the combinations. It uses a recursive approach to generate all combinations with repetition of length `n` from the input list. The function creates an empty vector `combinations` to store the resulting combinations, and a vector `currentCombination` to store the current combination being built recursively. The `generateCombinations` function is called recursively, adding each element from the input list to the current combination and making a recursive call until the current combination reaches the desired length `n`. Once a combination is complete, it is added to the `combinations` vector. Finally, the `generateCombinations` function returns the resulting vector of combinations."
        ]
    },
    {
        "id": "256",
        "prompt": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
        "solution": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr",
        "test": [
            "assert count_Primes_nums(5) == 2",
            "assert count_Primes_nums(10) == 4",
            "assert count_Primes_nums(100) == 25"
        ],
        "code": [
            "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr"
        ],
        "draft_plan": [
            "# Create a function that takes in a non-negative number as input\n    # Initialize a variable to keep track of the count of prime numbers\n    # Iterate through each number from 2 to the given non-negative number (exclusive)\n        # Assume the current number is prime\n        # Check if the current number is divisible by any number from 2 to its square root (inclusive)\n            # If it is divisible, mark it as not prime and break the loop\n        # If the current number is prime, increment the count of prime numbers\n    # Return the count of prime numbers"
        ],
        "requirements": [
            "import java.util.*;\n\nclass CountPrimes {\n    public static int countPrimes(int n) {\n        boolean[] isPrime = new boolean[n];\n        Arrays.fill(isPrime, true);\n        \n        for (int i = 2; i * i < n; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j < n; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n        \n        int count = 0;\n        for (int i = 2; i < n; i++) {\n            if (isPrime[i]) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n\nbool isPrime(int num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint countPrimes(int n) {\n    int count = 0;\n    for (int i = 2; i < n; i++) {\n        if (isPrime(i)) {\n            count++;\n        }\n    }\n    return count;\n}"
        ]
    },
    {
        "id": "257",
        "prompt": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.",
        "solution": "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)",
        "test": [
            "assert swap_numbers(10,20)==(20,10)",
            "assert swap_numbers(15,17)==(17,15)",
            "assert swap_numbers(100,200)==(200,100)"
        ],
        "code": [
            "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)"
        ],
        "draft_plan": [
            "def reverse_tuple(num1, num2):\n    return (num2, num1)\n\n# Testing the function\nresult = reverse_tuple(5, 10)\nprint(result)  # Output: (10, 5)"
        ],
        "requirements": [
            "import java.util.*;\n\npublic class TupleReversal {\n    public static <T> List<T> reverseTuple(T num1, T num2) {\n        List<T> tuple = new ArrayList<>();\n        tuple.add(num2);\n        tuple.add(num1);\n        return tuple;\n    }\n}"
        ],
        "final_plan": [
            "#include <tuple>\n\nstd::tuple<int, int> reverseTuple(int num1, int num2) {\n    return std::make_tuple(num2, num1);\n}"
        ]
    },
    {
        "id": "259",
        "prompt": "Write a function to maximize the given two tuples.",
        "solution": "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "test": [
            "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
            "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
            "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
        ],
        "code": [
            "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) "
        ],
        "draft_plan": [
            "# Sort the two tuples in descending order\n\n# Initialize two empty lists, result1 and result2\n\n# Iterate through the sorted tuples\n    # If the sum of the elements in result1 is less than or equal to the sum of the elements in result2, append the current element to result1\n    # Otherwise, append the current element to result2\n\n# Return the two results as tuples"
        ],
        "requirements": [
            "import java.util.*;\n\nclass MaximizeTuples {\n    public static List<Integer> maximizeTuples(List<Integer> tuple1, List<Integer> tuple2) {\n        // Sort the tuples in descending order\n        Collections.sort(tuple1, Collections.reverseOrder());\n        Collections.sort(tuple2, Collections.reverseOrder());\n        \n        List<Integer> result1 = new ArrayList<>();\n        List<Integer> result2 = new ArrayList<>();\n        \n        // Iterate through the tuples\n        for (int i = 0; i < tuple1.size(); i++) {\n            int sum1 = result1.stream().mapToInt(Integer::intValue).sum();\n            int sum2 = result2.stream().mapToInt(Integer::intValue).sum();\n            \n            // Append the current element to the result with the smaller sum\n            if (sum1 <= sum2) {\n                result1.add(tuple1.get(i));\n            } else {\n                result2.add(tuple1.get(i));\n            }\n        }\n        \n        // Append the remaining elements of tuple2 to the result2\n        result2.addAll(tuple2);\n        \n        return Arrays.asList(result1, result2);\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\npair<vector<int>, vector<int>> maximizeTuples(vector<int>& tuple1, vector<int>& tuple2) {\n    sort(tuple1.begin(), tuple1.end(), greater<int>());\n    sort(tuple2.begin(), tuple2.end(), greater<int>());\n\n    vector<int> result1;\n    vector<int> result2;\n\n    for (int i = 0; i < tuple1.size(); i++) {\n        if (accumulate(result1.begin(), result1.end(), 0) <= accumulate(result2.begin(), result2.end(), 0)) {\n            result1.push_back(tuple1[i]);\n        } else {\n            result2.push_back(tuple1[i]);\n        }\n    }\n\n    for (int i = 0; i < tuple2.size(); i++) {\n        if (accumulate(result1.begin(), result1.end(), 0) <= accumulate(result2.begin(), result2.end(), 0)) {\n            result1.push_back(tuple2[i]);\n        } else {\n            result2.push_back(tuple2[i]);\n        }\n    }\n\n    return make_pair(result1, result2);\n}"
        ]
    },
    {
        "id": "260",
        "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "solution": "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)",
        "test": [
            "assert newman_prime(3) == 7",
            "assert newman_prime(4) == 17",
            "assert newman_prime(5) == 41"
        ],
        "code": [
            "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)"
        ],
        "draft_plan": [
            "# Define a helper function to check if a number is prime\n    # If the number is less than 2, return False\n    # If the number is divisible by any number from 2 to its square root, return False\n    # Otherwise, return True\n\n# Define the main function to find the nth Newman-Shanks-Williams prime number\n    # Initialize a counter variable to keep track of the prime numbers found\n    # Initialize a candidate variable to start checking for prime numbers\n    # Initialize an empty list to store the prime numbers\n\n    # While the counter is less than or equal to the given n\n        # If the candidate is a prime number\n            # Increment the counter\n            # Append the candidate to the list of prime numbers\n        # Increment the candidate by 1\n\n    # Return the last element in the list of prime numbers, which is the nth Newman-Shanks-Williams prime number"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NewmanShanksWilliamsPrime {\n\n    public static boolean isPrime(int number) {\n        if (number < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(number); i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static int nthNewmanShanksWilliamsPrime(int n) {\n        int counter = 0;\n        int candidate = 0;\n        List<Integer> primes = new ArrayList<>();\n\n        while (counter <= n) {\n            if (isPrime(candidate)) {\n                counter++;\n                primes.add(candidate);\n            }\n            candidate++;\n        }\n\n        return primes.get(primes.size() - 1);\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nint nthNewmanShanksWilliamsPrime(int n) {\n    int counter = 0;\n    int candidate = 1;\n    vector<int> primeNumbers;\n\n    while (counter <= n) {\n        if (isPrime(candidate)) {\n            counter++;\n            primeNumbers.push_back(candidate);\n        }\n        candidate++;\n    }\n\n    return primeNumbers.back();\n}"
        ]
    },
    {
        "id": "261",
        "prompt": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
        "solution": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "test": [
            "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
            "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
            "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
        ],
        "code": [
            "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) "
        ],
        "draft_plan": [
            "# Create an empty tuple to store the result of division\n\n# Iterate through the elements of the tuples\n    # Divide the corresponding elements and append the result to the result tuple\n\n# Return the result tuple"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TupleDivision {\n\n    public static <T extends Number> List<Double> divideTuples(List<T> tuple1, List<T> tuple2) {\n        List<Double> result = new ArrayList<>();\n\n        if (tuple1.size() != tuple2.size()) {\n            throw new IllegalArgumentException(\"Tuples must have same length\");\n        }\n\n        for (int i = 0; i < tuple1.size(); i++) {\n            double element1 = tuple1.get(i).doubleValue();\n            double element2 = tuple2.get(i).doubleValue();\n            double divisionResult = element1 / element2;\n            result.add(divisionResult);\n        }\n\n        return result;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <tuple>\n#include <vector>\n\nstd::tuple<double, double, double> tupleDivide(const std::tuple<double, double, double>& tuple1, const std::tuple<double, double, double>& tuple2) {\n    double result1 = std::get<0>(tuple1) / std::get<0>(tuple2);\n    double result2 = std::get<1>(tuple1) / std::get<1>(tuple2);\n    double result3 = std::get<2>(tuple1) / std::get<2>(tuple2);\n    \n    return std::make_tuple(result1, result2, result3);\n}"
        ]
    },
    {
        "id": "262",
        "prompt": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.",
        "solution": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]",
        "test": [
            "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
            "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
            "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
        ],
        "code": [
            "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]"
        ],
        "draft_plan": [
            "# Check if the given list has enough elements to split into two parts\n    # If not, return None\n\n# Slice the list to get the first L elements and assign it to the variable first_part\n# Slice the list to get the remaining elements from index L and assign it to the variable second_part\n\n# Return the resulting lists as a tuple (first_part, second_part)"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SplitList {\n    public static <T> List<List<T>> splitList(List<T> list, int L) {\n        if (list.size() < L) {\n            return null;\n        }\n\n        List<T> firstPart = list.subList(0, L);\n        List<T> secondPart = list.subList(L, list.size());\n\n        List<List<T>> result = new ArrayList<>();\n        result.add(firstPart);\n        result.add(secondPart);\n\n        return result;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <tuple>\n\nstd::tuple<std::vector<int>, std::vector<int>> splitList(std::vector<int>& lst, int L) {\n    if (lst.size() < L) {\n        return std::make_tuple(std::vector<int>(), std::vector<int>());\n    }\n\n    std::vector<int> first_part(lst.begin(), lst.begin() + L);\n    std::vector<int> second_part(lst.begin() + L, lst.end());\n\n    return std::make_tuple(first_part, second_part);\n}"
        ]
    },
    {
        "id": "264",
        "prompt": "Write a function to calculate a dog's age in dog's years.",
        "solution": "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age",
        "test": [
            "assert dog_age(12)==61",
            "assert dog_age(15)==73",
            "assert dog_age(24)==109"
        ],
        "code": [
            "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age"
        ],
        "draft_plan": [
            "# Define a function to calculate the dog's age in dog's years\n    # Get the dog's age in human years as input\n\n    # If the dog's age is less than or equal to 2\n        # Multiply the dog's age by 10.5 to get the dog's age in dog's years\n    # Otherwise\n        # Subtract 2 from the dog's age and multiply by 4\n        # Add 21 (which accounts for the first two years) to get the dog's age in dog's years\n\n    # Return the dog's age in dog's years"
        ],
        "requirements": [
            "public class DogAgeCalculator {\n    public static int calculateDogAge(int humanAge) {\n        if (humanAge <= 2) {\n            return humanAge * 10.5;\n        } else {\n            return 21 + (humanAge - 2) * 4;\n        }\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n\nint calculateDogAge(int humanAge) {\n    if (humanAge <= 2) {\n        return humanAge * 10.5;\n    } else {\n        return (humanAge - 2) * 4 + 21;\n    }\n}\n\nint main() {\n    int dogAge = calculateDogAge(5);\n    std::cout << \"Dog's age in dog's years: \" << dogAge << std::endl;\n    return 0;\n}"
        ]
    },
    {
        "id": "265",
        "prompt": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
        "solution": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]",
        "test": [
            "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]",
            "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]",
            "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]"
        ],
        "code": [
            "def list_split(S, step):\n    return [S[i::step] for i in range(step)]"
        ],
        "draft_plan": [
            "# Create an empty list to store the resulting lists\n\n# Iterate through the input list with a step size of n\n    # Append a sublist of n elements to the resulting list\n\n# If there are remaining elements in the input list\n    # Append the remaining elements as a sublist to the resulting list\n\n# Return the resulting list"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class ListSplitter {\n\n    public static List<List<Integer>> splitList(List<Integer> inputList, int n) {\n        List<List<Integer>> resultList = new ArrayList<>();\n\n        for (int i = 0; i < inputList.size(); i += n) {\n            List<Integer> sublist = inputList.subList(i, Math.min(i + n, inputList.size()));\n            resultList.add(sublist);\n        }\n\n        return resultList;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nstd::vector<std::vector<int>> splitList(std::vector<int> nums, int n) {\n    std::vector<std::vector<int>> result;\n    int size = nums.size();\n    int i = 0;\n    \n    while (i < size) {\n        std::vector<int> sublist;\n        for (int j = 0; j < n && i < size; j++) {\n            sublist.push_back(nums[i]);\n            i++;\n        }\n        result.push_back(sublist);\n    }\n    \n    return result;\n}"
        ]
    },
    {
        "id": "266",
        "prompt": "Write a function to find the lateral surface area of a cube given its side length.",
        "solution": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA",
        "test": [
            "assert lateralsurface_cube(5)==100",
            "assert lateralsurface_cube(9)==324",
            "assert lateralsurface_cube(10)==400"
        ],
        "code": [
            "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA"
        ],
        "draft_plan": [
            "# Define a function to calculate the lateral surface area of a cube\n    # Calculate the lateral surface area using the formula: 4 * (side length) ^ 2\n\n# Call the function with the given side length and print the result"
        ],
        "requirements": [
            "public class CubeLateralSurfaceArea {\n    public static double calculateLateralSurfaceArea(double sideLength) {\n        // Calculate the lateral surface area of a cube\n        double lateralSurfaceArea = 4 * Math.pow(sideLength, 2);\n        return lateralSurfaceArea;\n    }\n}"
        ],
        "final_plan": [
            "class Cube {\n    public:\n        double calculateLateralSurfaceArea(double sideLength) {\n            return 4 * (sideLength * sideLength);\n        }\n};"
        ]
    },
    {
        "id": "267",
        "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "solution": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
        "test": [
            "assert square_Sum(2) == 10",
            "assert square_Sum(3) == 35",
            "assert square_Sum(4) == 84"
        ],
        "code": [
            "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) "
        ],
        "draft_plan": [
            "# Initialize a variable `sum_of_squares` to keep track of the sum of squares\n# Initialize a variable `count` to keep track of the number of odd natural numbers encountered\n# Initialize a variable `num` to keep track of the current odd natural number\n\n# Iterate while `count` is less than or equal to `n`\n    # Check if `num` is an odd number\n        # If it is, add the square of `num` to `sum_of_squares`\n        # Increment `count` by 1\n    # Increment `num` by 1\n\n# Return `sum_of_squares`"
        ],
        "requirements": [
            "```java\npublic class SumOfOddSquares {\n    public static int sumOfOddSquares(int n) {\n        int sumOfSquares = 0;\n        int count = 0;\n        int num = 1;\n\n        while (count < n) {\n            if (num % 2 != 0) {\n                sumOfSquares += num * num;\n                count++;\n            }\n            num++;\n        }\n\n        return sumOfSquares;\n    }\n}\n```"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\nint sumOfSquares(int n) {\n    int sum_of_squares = 0;\n    int count = 0;\n    int num = 1;\n\n    while (count < n) {\n        if (num % 2 != 0) {\n            sum_of_squares += num * num;\n            count++;\n        }\n        num++;\n    }\n\n    return sum_of_squares;\n}"
        ]
    },
    {
        "id": "268",
        "prompt": "Write a function to find the n'th star number.",
        "solution": "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) ",
        "test": [
            "assert find_star_num(3) == 37",
            "assert find_star_num(4) == 73",
            "assert find_star_num(5) == 121"
        ],
        "code": [
            "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) "
        ],
        "draft_plan": [
            "# Import the math module\n\n# Define a function to find the n'th star number\n    # Calculate the star number using the formula: star_number = (2 * n) * (2 * n - 1)\n\n# Return the star number"
        ],
        "requirements": [
            "public class StarNumber {\n    public static int getStarNumber(int n) {\n        return (2 * n) * (2 * n - 1);\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <cmath>\n\nint nthStarNumber(int n) {\n    // Calculate the star number using the formula: star_number = (2 * n) * (2 * n - 1)\n    int starNumber = (2 * n) * (2 * n - 1);\n    return starNumber;\n}"
        ]
    },
    {
        "id": "269",
        "prompt": "Write a function to find the ascii value of a character.",
        "solution": "def ascii_value(k):\n  ch=k\n  return ord(ch)",
        "test": [
            "assert ascii_value('A')==65",
            "assert ascii_value('R')==82",
            "assert ascii_value('S')==83"
        ],
        "code": [
            "def ascii_value(k):\n  ch=k\n  return ord(ch)"
        ],
        "draft_plan": [
            "To find the ASCII value of a character in Python, you can use the `ord()` function. Here is the code logic:\n\n1. Define a function `find_ascii_value` that takes a character as input.\n2. Inside the function, use the `ord()` function to convert the character to its corresponding ASCII value.\n3. Return the ASCII value.\n\nHere is the code:\n\n```python\ndef find_ascii_value(char):\n    ascii_value = ord(char)\n    return ascii_value\n```\n\nYou can call this function with any character to get its ASCII value. For example:\n\n```python\nprint(find_ascii_value('A'))  # Output: 65\nprint(find_ascii_value('b'))  # Output: 98\nprint(find_ascii_value('%'))  # Output: 37\n```"
        ],
        "requirements": [
            "Sure! Here is the Java code to find the ASCII value of a character:\n\n```java\npublic class AsciiValueFinder {\n\n    public static int findAsciiValue(char c) {\n        return (int) c;\n    }\n\n}\n```\n\nYou can call the `findAsciiValue` method with any character to get its ASCII value. For example:\n\n```java\nchar character = 'A';\nint asciiValue = AsciiValueFinder.findAsciiValue(character);\nSystem.out.println(asciiValue);  // Output: 65\n\ncharacter = 'b';\nasciiValue = AsciiValueFinder.findAsciiValue(character);\nSystem.out.println(asciiValue);  // Output: 98\n\ncharacter = '%';\nasciiValue = AsciiValueFinder.findAsciiValue(character);\nSystem.out.println(asciiValue);  // Output: 37\n```\n\nPlease note that you will need a `main` method to run the code and see the output."
        ],
        "final_plan": [
            "Here is the C++ code to find the ASCII value of a character:\n\n```cpp\n#include <iostream>\n\nint findAsciiValue(char c) {\n    return static_cast<int>(c);\n}\n```\n\nYou can call this function with any character to get its ASCII value. For example:\n\n```cpp\nstd::cout << findAsciiValue('A') << std::endl;  // Output: 65\nstd::cout << findAsciiValue('b') << std::endl;  // Output: 98\nstd::cout << findAsciiValue('%') << std::endl;  // Output: 37\n```\n\nNote that in C++, the ASCII value of a character can be obtained by explicitly casting it to an `int` using `static_cast<int>(c)`."
        ]
    },
    {
        "id": "270",
        "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
        "solution": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
        "test": [
            "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30",
            "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26",
            "assert sum_even_and_even_index([5, 6, 12, 1]) == 12"
        ],
        "code": [
            "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum"
        ],
        "draft_plan": [
            "# Initialize a variable `sum` to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # Add the element to the sum\n\n# Return the sum"
        ],
        "requirements": [
            "public class SumOfEvenNumbers {\n\n    public static int sumEvenNumbersAtEvenPositions(int[] nums) {\n        int sum = 0;\n\n        for (int i = 0; i < nums.length; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                sum += nums[i];\n            }\n        }\n\n        return sum;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nint sumOfEvenAtEvenPositions(std::vector<int>& nums) {\n    int sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (i % 2 == 0 && nums[i] % 2 == 0) {\n            sum += nums[i];\n        }\n    }\n    return sum;\n}"
        ]
    },
    {
        "id": "271",
        "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "solution": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ",
        "test": [
            "assert even_Power_Sum(2) == 1056",
            "assert even_Power_Sum(3) == 8832",
            "assert even_Power_Sum(1) == 32"
        ],
        "code": [
            "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; "
        ],
        "draft_plan": [
            "# Initialize a variable 'sum' to 0\n# Initialize a variable 'count' to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Increment count by 1\n        # Add the current number raised to the fifth power to 'sum'\n\n# Return 'sum'"
        ],
        "requirements": [
            "public class SumOfEvenPowers {\n    public static int sumOfEvenPowers(int n) {\n        int sum = 0;\n        int count = 0;\n\n        for (int i = 1; count < n; i++) {\n            if (i % 2 == 0) {\n                count++;\n                sum += Math.pow(i, 5);\n            }\n        }\n\n        return sum;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint sumOfEvenPowers(int n) {\n    int sum = 0;\n    int count = 0;\n\n    for (int i = 1; count < n; i++) {\n        if (i % 2 == 0) {\n            sum += pow(i, 5);\n            count++;\n        }\n    }\n\n    return sum;\n}"
        ]
    },
    {
        "id": "272",
        "prompt": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.",
        "solution": "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) ",
        "test": [
            "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
            "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
            "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
        ],
        "code": [
            "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) "
        ],
        "draft_plan": [
            "# Initialize an empty list to store the rear elements\n\n# Iterate through each tuple in the input list\n    # Get the last element of the current tuple\n    # Append the last element to the result list\n\n# Return the result list"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TupleRearElements {\n    public static List<Object> getRearElements(List<Tuple> tuples) {\n        List<Object> rearElements = new ArrayList<>();\n        \n        for (Tuple tuple : tuples) {\n            rearElements.add(tuple.get(tuple.size() - 1));\n        }\n        \n        return rearElements;\n    }\n    \n    public static class Tuple {\n        private List<Object> elements;\n        \n        public Tuple(List<Object> elements) {\n            this.elements = elements;\n        }\n        \n        public Object get(int index) {\n            return elements.get(index);\n        }\n        \n        public int size() {\n            return elements.size();\n        }\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> getRearElements(vector<pair<int, int>>& tuples) {\n    vector<int> rearElements;\n    \n    for (auto& tuple : tuples) {\n        int rearElement = tuple.second;\n        rearElements.push_back(rearElement);\n    }\n    \n    return rearElements;\n}"
        ]
    },
    {
        "id": "273",
        "prompt": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
        "solution": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) ",
        "test": [
            "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
            "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
            "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
        ],
        "code": [
            "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) "
        ],
        "draft_plan": [
            "# Create an empty list to store the result\n\n# Iterate through the elements of the first tuple\n    # Subtract the element from the first tuple by the element from the second tuple with the same index\n    # Append the result to the list\n\n# Return the list of results"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TupleSubtraction {\n    public static List<Integer> subtractTuples(List<Integer> tuple1, List<Integer> tuple2) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < tuple1.size(); i++) {\n            int subtracted = tuple1.get(i) - tuple2.get(i);\n            result.add(subtracted);\n        }\n        return result;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <tuple>\n#include <vector>\n\nstd::vector<int> subtractTuples(std::tuple<int, int, int> tuple1, std::tuple<int, int, int> tuple2) {\n    std::vector<int> result;\n    \n    result.push_back(std::get<0>(tuple1) - std::get<0>(tuple2));\n    result.push_back(std::get<1>(tuple1) - std::get<1>(tuple2));\n    result.push_back(std::get<2>(tuple1) - std::get<2>(tuple2));\n    \n    return result;\n}"
        ]
    },
    {
        "id": "274",
        "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
        "solution": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ",
        "test": [
            "assert even_binomial_Coeff_Sum(4) == 8",
            "assert even_binomial_Coeff_Sum(6) == 32",
            "assert even_binomial_Coeff_Sum(2) == 2"
        ],
        "code": [
            "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) "
        ],
        "draft_plan": [
            "# Import the math module to use the binomial coefficient function\nimport math\n\n# Define the function to find the sum of even index binomial coefficients\ndef sum_even_index_binomial_coefficients(n):\n    # Initialize the sum variable\n    sum = 0\n    \n    # Iterate through each index i from 0 to n\n    for i in range(n+1):\n        # Check if the index i is even\n        if i % 2 == 0:\n            # Calculate the binomial coefficient using the math module\n            coefficient = math.comb(n, i)\n            \n            # Add the coefficient to the sum\n            sum += coefficient\n    \n    # Return the sum of even index binomial coefficients\n    return sum"
        ],
        "requirements": [
            "import java.math.BigInteger;\n\npublic class BinomialCoefficientSum {\n    public static BigInteger sumEvenIndexBinomialCoefficients(int n) {\n        BigInteger sum = BigInteger.ZERO;\n\n        for (int i = 0; i <= n; i++) {\n            if (i % 2 == 0) {\n                BigInteger coefficient = binomialCoefficient(n, i);\n                sum = sum.add(coefficient);\n            }\n        }\n\n        return sum;\n    }\n\n    private static BigInteger binomialCoefficient(int n, int k) {\n        BigInteger numerator = factorial(n);\n        BigInteger denominator = factorial(k).multiply(factorial(n - k));\n        return numerator.divide(denominator);\n    }\n\n    private static BigInteger factorial(int n) {\n        BigInteger result = BigInteger.ONE;\n        for (int i = 2; i <= n; i++) {\n            result = result.multiply(BigInteger.valueOf(i));\n        }\n        return result;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\n// Function to calculate the binomial coefficient\nint binomialCoefficient(int n, int k) {\n    if (k == 0 || k == n) {\n        return 1;\n    }\n    return binomialCoefficient(n - 1, k - 1) + binomialCoefficient(n - 1, k);\n}\n\n// Function to find the sum of even index binomial coefficients\nint sumEvenIndexBinomialCoefficients(int n) {\n    int sum = 0;\n    for (int i = 0; i <= n; i++) {\n        if (i % 2 == 0) {\n            sum += binomialCoefficient(n, i);\n        }\n    }\n    return sum;\n}"
        ]
    },
    {
        "id": "276",
        "prompt": "Write a function that takes in the radius and height of a cylinder and returns the the volume.",
        "solution": "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume",
        "test": [
            "assert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)",
            "assert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)",
            "assert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)"
        ],
        "code": [
            "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume"
        ],
        "draft_plan": [
            "import math\n\ndef calculate_cylinder_volume(radius, height):\n    # Calculate the volume of a cylinder using the formula V = \u03c0r^2h\n    volume = math.pi * radius**2 * height\n    return volume"
        ],
        "requirements": [
            "public class CylinderVolumeCalculator {\n    public static double calculateCylinderVolume(double radius, double height) {\n        // Calculate the volume of a cylinder using the formula V = \u03c0r^2h\n        double volume = Math.PI * Math.pow(radius, 2) * height;\n        return volume;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <cmath>\n\ndouble calculateCylinderVolume(double radius, double height) {\n    // Calculate the volume of a cylinder using the formula V = \u03c0r^2h\n    double volume = M_PI * pow(radius, 2) * height;\n    return volume;\n}"
        ]
    },
    {
        "id": "277",
        "prompt": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.",
        "solution": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result",
        "test": [
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
        ],
        "code": [
            "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result"
        ],
        "draft_plan": [
            "# Initialize an empty dictionary to store the filtered entries\n\n# Iterate through each key-value pair in the input dictionary\n    # Check if the value of the current entry is greater than or equal to n\n        # If the condition is true, add the entry to the filtered dictionary\n\n# Return the filtered dictionary"
        ],
        "requirements": [
            "import java.util.HashMap;\nimport java.util.Map;\n\npublic class DictionaryFilter {\n\n    public static Map<String, Integer> filterDictionary(Map<String, Integer> dictionary, int n) {\n        Map<String, Integer> filteredDictionary = new HashMap<>();\n\n        for (Map.Entry<String, Integer> entry : dictionary.entrySet()) {\n            if (entry.getValue() >= n) {\n                filteredDictionary.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return filteredDictionary;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <unordered_map>\n\nstd::unordered_map<std::string, int> filterDictionary(const std::unordered_map<std::string, int>& dictionary, int n) {\n    std::unordered_map<std::string, int> filteredDictionary;\n    \n    for (const auto& entry : dictionary) {\n        if (entry.second >= n) {\n            filteredDictionary[entry.first] = entry.second;\n        }\n    }\n    \n    return filteredDictionary;\n}"
        ]
    },
    {
        "id": "278",
        "prompt": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.",
        "solution": "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) ",
        "test": [
            "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
            "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
            "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
        ],
        "code": [
            "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) "
        ],
        "draft_plan": [
            "# Initialize a count variable to 0\n\n# Iterate through each element and its index in the tuple\n    # Check if the current element is equal to the given tuple element\n        # If the element is found, return the count\n    # Increment the count variable\n\n# If the given tuple element is not found, return -1"
        ],
        "requirements": [
            "import java.util.List;\n\npublic class TupleUtils {\n    \n    public static <T> int countElementsBefore(List<T> tuple, T element) {\n        int count = 0;\n        for (int i = 0; i < tuple.size(); i++) {\n            if (tuple.get(i).equals(element)) {\n                return count;\n            }\n            count++;\n        }\n        return -1;\n    }\n}"
        ],
        "final_plan": [
            "template<typename T>\nint countElementsBeforeTupleElement(const std::tuple<T...>& tuple, const std::tuple<T...>& element) {\n    int count = 0;\n    bool found = false;\n    \n    std::apply([&](const auto&... args) {\n        ((args == element ? found = true : count++), ...);\n    }, tuple);\n    \n    return found ? count : -1;\n}"
        ]
    },
    {
        "id": "279",
        "prompt": "Write a function to find the nth decagonal number.",
        "solution": "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n ",
        "test": [
            "assert is_num_decagonal(3) == 27",
            "assert is_num_decagonal(7) == 175",
            "assert is_num_decagonal(10) == 370"
        ],
        "code": [
            "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n "
        ],
        "draft_plan": [
            "# Formula for nth decagonal number: Dn = 3n^2 - 2n\n\n# Define a function to find the nth decagonal number\n    # Calculate the nth decagonal number using the formula\n    # Return the result\n\n# Test the function by calling it with a specific value of n"
        ],
        "requirements": [
            "public class DecagonalNumber {\n    public static int findNthDecagonalNumber(int n) {\n        // Calculate the nth decagonal number using the formula Dn = 3n^2 - 2n\n        return 3 * n * n - 2 * n;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n\nint nthDecagonalNumber(int n) {\n    return 3 * n * n - 2 * n;\n}\n\nint main() {\n    int n;\n    std::cout << \"Enter the value of n: \";\n    std::cin >> n;\n\n    int decagonalNumber = nthDecagonalNumber(n);\n    std::cout << \"The \" << n << \"th decagonal number is: \" << decagonalNumber << std::endl;\n\n    return 0;\n}"
        ]
    },
    {
        "id": "280",
        "prompt": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
        "solution": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos",
        "test": [
            "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
            "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
            "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
        ],
        "code": [
            "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos"
        ],
        "draft_plan": [
            "# Iterate through each element and its index in the array\n    # Check if the current element is equal to the given element\n        # If found, return a tuple with True and the index position\n\n# If the element is not found, return a tuple with False and -1 as the index position"
        ],
        "requirements": [
            "import java.util.Arrays;\n\npublic class Tuple {\n    public static <T> Tuple2<Boolean, Integer> findElementInArray(T[] array, T element) {\n        for (int i = 0; i < array.length; i++) {\n            if (array[i].equals(element)) {\n                return new Tuple2<>(true, i);\n            }\n        }\n        return new Tuple2<>(false, -1);\n    }\n\n    public static void main(String[] args) {\n        Integer[] array = {1, 2, 3, 4, 5};\n        Tuple2<Boolean, Integer> result = findElementInArray(array, 3);\n        System.out.println(\"Element found: \" + result.first);\n        System.out.println(\"Index position: \" + result.second);\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <tuple>\n\nstd::tuple<bool, int> findElement(const std::vector<int>& arr, int element) {\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] == element) {\n            return std::make_tuple(true, i);\n        }\n    }\n    return std::make_tuple(false, -1);\n}"
        ]
    },
    {
        "id": "281",
        "prompt": "Write a python function to check if the elements of a given list are unique or not.",
        "solution": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True",
        "test": [
            "assert all_unique([1,2,3]) == True",
            "assert all_unique([1,2,1,2]) == False",
            "assert all_unique([1,2,3,4,5]) == True"
        ],
        "code": [
            "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True"
        ],
        "draft_plan": [
            "# Create an empty set to store unique elements\n\n# Iterate through each element in the given list\n    # Check if the current element is already in the set\n        # If it is, return False as it is not unique\n        # If it is not, add it to the set\n\n# If all elements are unique, return True"
        ],
        "requirements": [
            "import java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class UniqueElements {\n\n    public static boolean areElementsUnique(List<Integer> list) {\n        Set<Integer> uniqueElements = new HashSet<>();\n        for (int element : list) {\n            if (uniqueElements.contains(element)) {\n                return false;\n            }\n            uniqueElements.add(element);\n        }\n        return true;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <unordered_set>\n#include <vector>\n\nbool areElementsUnique(const std::vector<int>& nums) {\n    std::unordered_set<int> uniqueElements;\n    for (int num : nums) {\n        if (uniqueElements.count(num) > 0) {\n            return false;\n        }\n        uniqueElements.insert(num);\n    }\n    return true;\n}"
        ]
    },
    {
        "id": "282",
        "prompt": "Write a function to subtract two lists element-wise.",
        "solution": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)",
        "test": [
            "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
            "assert sub_list([1,2],[3,4])==[-2,-2]",
            "assert sub_list([90,120],[50,70])==[40,50]"
        ],
        "code": [
            "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)"
        ],
        "draft_plan": [
            "# Check if the lengths of the two lists are equal\n    # If not, raise an exception or return an error message\n\n# Initialize an empty list to store the result\n\n# Iterate through the elements of the lists\n    # Subtract the corresponding elements and append the result to the result list\n\n# Return the result list"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class ListSubtraction {\n    public static List<Integer> subtractLists(List<Integer> list1, List<Integer> list2) {\n        if (list1.size() != list2.size()) {\n            throw new IllegalArgumentException(\"Lists must have the same length\");\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < list1.size(); i++) {\n            result.add(list1.get(i) - list2.get(i));\n        }\n\n        return result;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nstd::vector<int> subtractLists(std::vector<int> list1, std::vector<int> list2) {\n    // Check if the lengths of the two lists are equal\n    if (list1.size() != list2.size()) {\n        throw std::invalid_argument(\"Lists must have equal length\");\n    }\n    \n    // Initialize an empty list to store the result\n    std::vector<int> result;\n    \n    // Iterate through the elements of the lists\n    for (int i = 0; i < list1.size(); i++) {\n        // Subtract the corresponding elements and append the result to the result list\n        result.push_back(list1[i] - list2[i]);\n    }\n    \n    // Return the result list\n    return result;\n}"
        ]
    },
    {
        "id": "283",
        "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
        "solution": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
        "test": [
            "assert validate(1234) == True",
            "assert validate(51241) == False",
            "assert validate(321) == True"
        ],
        "code": [
            "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True"
        ],
        "draft_plan": [
            "# Convert the input integer to a string\n# Iterate through each digit in the string\n    # Get the frequency of the current digit in the string\n    # Check if the frequency is greater than the digit itself\n        # If yes, return False\n\n# If all digits pass the condition, return True"
        ],
        "requirements": [
            "import java.util.HashMap;\nimport java.util.Map;\n\npublic class FrequencyCheck {\n    public static boolean checkFrequency(int num) {\n        String numStr = String.valueOf(num);\n        Map<Character, Integer> digitFrequency = new HashMap<>();\n        \n        for (char digit : numStr.toCharArray()) {\n            digitFrequency.put(digit, digitFrequency.getOrDefault(digit, 0) + 1);\n            \n            if (digitFrequency.get(digit) > Character.getNumericValue(digit)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <unordered_map>\n#include <string>\n\nbool checkDigitFrequency(int num) {\n    std::string strNum = std::to_string(num);\n    std::unordered_map<char, int> digitFrequency;\n    \n    for (char digit : strNum) {\n        digitFrequency[digit]++;\n        \n        if (digitFrequency[digit] > (digit - '0')) {\n            return false;\n        }\n    }\n    \n    return true;\n}"
        ]
    },
    {
        "id": "284",
        "prompt": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
        "solution": "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element",
        "test": [
            "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
            "assert check_element([1,2,3,4],7)==False",
            "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
        ],
        "code": [
            "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element"
        ],
        "draft_plan": [
            "# Iterate through each item in the list\n    # Check if the current item is equal to the given element\n        # If not equal, return False\n\n# If all items are equal to the given element, return True"
        ],
        "requirements": [
            "import java.util.List;\n\npublic class ListEqualityChecker {\n    public static <T> boolean allItemsEqual(List<T> list, T element) {\n        for (T item : list) {\n            if (!item.equals(element)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\ntemplate<typename T>\nbool allItemsEqual(const std::vector<T>& list, const T& element) {\n    for (const auto& item : list) {\n        if (item != element) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    std::vector<int> list1 = {1, 1, 1, 1, 1};\n    int element1 = 1;\n    std::cout << std::boolalpha << allItemsEqual(list1, element1) << std::endl; // Output: true\n    \n    std::vector<int> list2 = {1, 2, 1, 1, 1};\n    int element2 = 1;\n    std::cout << std::boolalpha << allItemsEqual(list2, element2) << std::endl; // Output: false\n    \n    std::vector<char> list3 = {'a', 'a', 'a', 'a'};\n    char element3 = 'a';\n    std::cout << std::boolalpha << allItemsEqual(list3, element3) << std::endl; // Output: true\n    \n    std::vector<char> list4 = {'a', 'b', 'a', 'a'};\n    char element4 = 'a';\n    std::cout << std::boolalpha << allItemsEqual(list4, element4) << std::endl; // Output: false\n    \n    return 0;\n}"
        ]
    },
    {
        "id": "285",
        "prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "solution": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
        "test": [
            "assert text_match_two_three(\"ac\")==(False)",
            "assert text_match_two_three(\"dc\")==(False)",
            "assert text_match_two_three(\"abbbba\")==(True)"
        ],
        "code": [
            "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False"
        ],
        "draft_plan": [
            "# Iterate through each character in the string, except the last two\n    # Check if the current character is 'a' and the next two characters are 'b'\n        # If the condition is met, return True\n\n# If no match is found, return False"
        ],
        "requirements": [
            "public class StringChecker {\n    public static boolean containsABB(String str) {\n        for (int i = 0; i < str.length() - 2; i++) {\n            if (str.charAt(i) == 'a' && str.charAt(i + 1) == 'b' && str.charAt(i + 2) == 'b') {\n                return true;\n            }\n        }\n        return false;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nbool containsPattern(string str) {\n    for (int i = 0; i < str.length() - 2; i++) {\n        if (str[i] == 'a' && str[i+1] == 'b' && str[i+2] == 'b') {\n            return true;\n        }\n    }\n    return false;\n}"
        ]
    },
    {
        "id": "286",
        "prompt": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.",
        "solution": "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far",
        "test": [
            "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
            "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
            "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
        ],
        "code": [
            "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far"
        ],
        "draft_plan": [
            "# Initialize variables to store the maximum sum and the current sum\n# Repeat the given array k times to create the modified array\n\n# Iterate through each element in the modified array\n    # Update the current sum by adding the current element\n    # If the current sum is greater than the maximum sum, update the maximum sum\n    # If the current sum is negative, reset it to 0\n\n# Return the maximum sum"
        ],
        "requirements": [
            "#include <iostream>\n#include <vector>\n#include <climits>\n\nusing namespace std;\n\nint largest_sum_contiguous_array(vector<int>& arr, int k) {\n    int n = arr.size();\n    int max_sum = INT_MIN;\n    int current_sum = 0;\n    \n    // Repeat the given array k times to create the modified array\n    vector<int> modified_arr;\n    for (int i = 0; i < k; i++) {\n        modified_arr.insert(modified_arr.end(), arr.begin(), arr.end());\n    }\n    \n    for (int i = 0; i < n * k; i++) {\n        // Update the current sum by adding the current element\n        current_sum += modified_arr[i];\n        \n        // If the current sum is greater than the maximum sum, update the maximum sum\n        if (current_sum > max_sum) {\n            max_sum = current_sum;\n        }\n        \n        // If the current sum is negative, reset it to 0\n        if (current_sum < 0) {\n            current_sum = 0;\n        }\n    }\n    \n    return max_sum;\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint largestSumOfContiguousArray(vector<int>& nums, int k) {\n    int n = nums.size();\n    int maxSum = INT_MIN;\n    int currentSum = 0;\n    \n    // Repeat the given array k times\n    for (int i = 0; i < k; i++) {\n        // Iterate through each element in the modified array\n        for (int j = 0; j < n; j++) {\n            // Update the current sum by adding the current element\n            currentSum += nums[j];\n            \n            // If the current sum is greater than the maximum sum, update the maximum sum\n            if (currentSum > maxSum) {\n                maxSum = currentSum;\n            }\n            \n            // If the current sum is negative, reset it to 0\n            if (currentSum < 0) {\n                currentSum = 0;\n            }\n        }\n    }\n    \n    return maxSum;\n}"
        ]
    },
    {
        "id": "287",
        "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "solution": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
        "test": [
            "assert square_Sum(2) == 20",
            "assert square_Sum(3) == 56",
            "assert square_Sum(4) == 120"
        ],
        "code": [
            "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)"
        ],
        "draft_plan": [
            "# Initialize a variable to store the sum of squares\n# Iterate through even numbers from 2 to 2n (inclusive)\n    # Add the square of the current even number to the sum\n\n# Return the sum of squares"
        ],
        "requirements": [
            "public class SumOfSquares {\n    public static int sumOfSquares(int n) {\n        int sum = 0;\n        \n        for (int i = 2; i <= 2 * n; i += 2) {\n            sum += i * i;\n        }\n        \n        return sum;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n\nint sumOfSquaresOfEvenNumbers(int n) {\n    int sum = 0;\n    for (int i = 2; i <= 2 * n; i += 2) {\n        sum += i * i;\n    }\n    return sum;\n}"
        ]
    },
    {
        "id": "290",
        "prompt": "Write a function to find the list of maximum length in a list of lists.",
        "solution": "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)",
        "test": [
            "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
            "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
        ],
        "code": [
            "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)"
        ],
        "draft_plan": [
            "# Initialize the maximum length to 0\n# Initialize an empty list to store the maximum length list\n\n# Iterate through each list in the input list\n    # Check if the length of the current list is greater than the maximum length\n        # Update the maximum length to the length of the current list\n        # Update the maximum length list to the current list\n\n# Return the maximum length list"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class MaximumLengthList {\n    public static List<Integer> maxLengthList(List<List<Integer>> inputList) {\n        int maxLength = 0;\n        List<Integer> maxLengthList = new ArrayList<>();\n\n        for (List<Integer> list : inputList) {\n            if (list.size() > maxLength) {\n                maxLength = list.size();\n                maxLengthList = list;\n            }\n        }\n\n        return maxLengthList;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> maxLengthList(vector<vector<int>>& lists) {\n    int maxLength = 0;\n    vector<int> maxLengthList;\n\n    for (int i = 0; i < lists.size(); i++) {\n        if (lists[i].size() > maxLength) {\n            maxLength = lists[i].size();\n            maxLengthList = lists[i];\n        }\n    }\n\n    return maxLengthList;\n}"
        ]
    },
    {
        "id": "291",
        "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "solution": "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]",
        "test": [
            "assert count_no_of_ways(2, 4) == 16",
            "assert count_no_of_ways(3, 2) == 6",
            "assert count_no_of_ways(4, 4) == 228"
        ],
        "code": [
            "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]"
        ],
        "draft_plan": [
            "# If there are no posts, return 0\n# If there is only one post, return k (as there are k color options)\n\n# Initialize the count of ways to paint the first two posts\n# Initialize the count of ways to paint the first post with the same color as the second post\n# Initialize the count of ways to paint the first post with a different color than the second post\n# Set the total count of ways to paint the first two posts\n\n# Iterate through each post starting from the third post\n    # Calculate the count of ways to paint the current post with the same color as the previous post\n    # Calculate the count of ways to paint the current post with a different color than the previous post\n    # Calculate the total count of ways to paint the current post\n    \n    # Update the count of ways to paint the first two posts\n    # Update the count of ways to paint the first post with the same color as the second post\n    # Update the count of ways to paint the first post with a different color than the second post\n\n# Return the total count of ways to paint the fence"
        ],
        "requirements": [
            "public class FencePainting {\n    public static int countWaysToPaintFence(int n, int k) {\n        if (n == 0) {\n            return 0;\n        }\n        \n        if (n == 1) {\n            return k;\n        }\n        \n        int sameColorCount = k;\n        int diffColorCount = k * (k - 1);\n        int totalCount = sameColorCount + diffColorCount;\n        \n        for (int i = 3; i <= n; i++) {\n            sameColorCount = diffColorCount;\n            diffColorCount = totalCount * (k - 1);\n            totalCount = sameColorCount + diffColorCount;\n        }\n        \n        return totalCount;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\nint countWaysToPaintFence(int n, int k) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return k;\n    }\n    \n    int sameColorCount = k;\n    int diffColorCount = k * (k - 1);\n    int totalCount = sameColorCount + diffColorCount;\n    \n    for (int i = 3; i <= n; i++) {\n        sameColorCount = diffColorCount;\n        diffColorCount = totalCount * (k - 1);\n        totalCount = sameColorCount + diffColorCount;\n    }\n    \n    return totalCount;\n}"
        ]
    },
    {
        "id": "292",
        "prompt": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
        "solution": "def find(n,m):  \n    q = n//m \n    return (q)",
        "test": [
            "assert find(10,3) == 3",
            "assert find(4,2) == 2",
            "assert find(20,5) == 4"
        ],
        "code": [
            "def find(n,m):  \n    q = n//m \n    return (q)"
        ],
        "draft_plan": [
            "To find the quotient of two numbers (rounded down to the nearest integer), you can use the integer division operator \"//\" in Python.\n\nHere is the code logic:\n\n1. Define a function `find_quotient` that takes two parameters `numerator` and `denominator`.\n2. Divide the `numerator` by the `denominator` using the integer division operator `//`.\n3. Return the result of the division.\n\nExample code:\n\n```python\ndef find_quotient(numerator, denominator):\n    quotient = numerator // denominator\n    return quotient\n```\n\nYou can then call the function `find_quotient` with your desired numbers and it will return the quotient rounded down to the nearest integer."
        ],
        "requirements": [
            "Sure! Here's the Java code without the `main` method to find the quotient of two numbers (rounded down to the nearest integer):\n\n```java\npublic class QuotientCalculator {\n    public static int findQuotient(int numerator, int denominator) {\n        int quotient = numerator / denominator;\n        return quotient;\n    }\n}\n```\n\nYou can use this code by calling the `findQuotient` method with your desired numerator and denominator values. It will return the quotient rounded down to the nearest integer."
        ],
        "final_plan": [
            "#include <iostream>\n\nint findQuotient(int numerator, int denominator) {\n    int quotient = numerator / denominator; // Using integer division\n    return quotient;\n}\n"
        ]
    },
    {
        "id": "293",
        "prompt": "Write a function to find the third side of a right angled triangle.",
        "solution": "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s",
        "test": [
            "assert otherside_rightangle(7,8)==10.63014581273465",
            "assert otherside_rightangle(3,4)==5",
            "assert otherside_rightangle(7,15)==16.55294535724685"
        ],
        "code": [
            "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s"
        ],
        "draft_plan": [
            "# Import the math module to use the sqrt function\nimport math\n\n# Define a function to find the third side of a right-angled triangle\ndef find_third_side(side1, side2):\n    # Calculate the square of the first side\n    side1_squared = side1 ** 2\n\n    # Calculate the square of the second side\n    side2_squared = side2 ** 2\n\n    # Calculate the sum of the squares of the two sides\n    sum_of_squares = side1_squared + side2_squared\n\n    # Calculate the length of the third side by taking the square root of the sum of squares\n    third_side = math.sqrt(sum_of_squares)\n\n    # Return the length of the third side\n    return third_side"
        ],
        "requirements": [
            "import java.lang.Math;\n\npublic class RightAngledTriangle {\n    \n    public static double findThirdSide(double side1, double side2) {\n        double side1Squared = Math.pow(side1, 2);\n        double side2Squared = Math.pow(side2, 2);\n        double sumOfSquares = side1Squared + side2Squared;\n        double thirdSide = Math.sqrt(sumOfSquares);\n        return thirdSide;\n    }\n}"
        ],
        "final_plan": [
            "#include <cmath>\n\ndouble findThirdSide(double side1, double side2) {\n    double side1Squared = pow(side1, 2);\n    double side2Squared = pow(side2, 2);\n    double sumOfSquares = side1Squared + side2Squared;\n    double thirdSide = sqrt(sumOfSquares);\n    return thirdSide;\n}"
        ]
    },
    {
        "id": "294",
        "prompt": "Write a function to find the maximum value in a given heterogeneous list.",
        "solution": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)",
        "test": [
            "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
            "assert max_val(['Python', 15, 20, 25])==25",
            "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
        ],
        "code": [
            "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)"
        ],
        "draft_plan": [
            "# Initialize a variable to store the maximum value as None\n\n# Iterate through each element in the list\n    # Check if the current element is greater than the maximum value\n        # If so, update the maximum value\n\n# Return the maximum value"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class MaxValueFinder {\n\n    public static <T extends Comparable<T>> T findMaxValue(List<T> list) {\n        T max = null;\n        for (T element : list) {\n            if (max == null || element.compareTo(max) > 0) {\n                max = element;\n            }\n        }\n        return max;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <typeinfo>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\ntemplate<typename T>\nT findMaxValue(vector<T> lst) {\n    T maxVal;\n    for (T element : lst) {\n        if (maxVal < element) {\n            maxVal = element;\n        }\n    }\n    return maxVal;\n}"
        ]
    },
    {
        "id": "295",
        "prompt": "Write a function to return the sum of all divisors of a number.",
        "solution": "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)",
        "test": [
            "assert sum_div(8)==7",
            "assert sum_div(12)==16",
            "assert sum_div(7)==1"
        ],
        "code": [
            "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)"
        ],
        "draft_plan": [
            "# Initialize the sum variable to 0\n\n# Iterate through each number from 1 to n (inclusive)\n    # Check if the current number is a divisor of n\n        # If yes, add it to the sum\n\n# Return the sum"
        ],
        "requirements": [
            "class SumOfDivisors {\n    public static int sumOfDivisors(int n) {\n        int sum = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                sum += i;\n            }\n        }\n        \n        return sum;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\nint sumOfDivisors(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}"
        ]
    },
    {
        "id": "296",
        "prompt": "Write a python function to count inversions in an array.",
        "solution": "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count ",
        "test": [
            "assert get_Inv_Count([1,20,6,4,5]) == 5",
            "assert get_Inv_Count([1,2,1]) == 1",
            "assert get_Inv_Count([1,2,5,6,1]) == 3"
        ],
        "code": [
            "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count "
        ],
        "draft_plan": [
            "# Initialize the inversion count to 0\n\n# Iterate through each element and its index in the array\n    # Compare the current element with all elements that come after it\n        # If the current element is greater than any of the elements that come after it, increment the inversion count\n\n# Return the inversion count"
        ],
        "requirements": [
            "class ArrayInversions {\n    public static int countInversions(int[] arr) {\n        int n = arr.length;\n        int inversions = 0;\n        \n        for (int i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] > arr[j]) {\n                    inversions++;\n                }\n            }\n        }\n        \n        return inversions;\n    }\n}"
        ],
        "final_plan": [
            "public class InversionCount {\n    \n    public static int countInversions(int[] arr) {\n        int count = 0;\n        \n        for (int i = 0; i < arr.length - 1; i++) {\n            for (int j = i + 1; j < arr.length; j++) {\n                if (arr[i] > arr[j]) {\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n}"
        ]
    },
    {
        "id": "297",
        "prompt": "Write a function to flatten a given nested list structure.",
        "solution": "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list ",
        "test": [
            "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
            "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
            "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
        ],
        "code": [
            "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list "
        ],
        "draft_plan": [
            "# Initialize an empty result list\n\n# Iterate through each element in the given list\n    # Check if the current element is a list\n        # If it is a list, recursively flatten it and extend the result list\n        # If it is not a list, append it to the result list\n\n# Return the flattened result list"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NestedListFlattener {\n\n    public static List<Integer> flatten(List<Object> nestedList) {\n        List<Integer> flattenedList = new ArrayList<>();\n\n        for (Object element : nestedList) {\n            if (element instanceof List) {\n                flattenedList.addAll(flatten((List<Object>) element));\n            } else {\n                flattenedList.add((Integer) element);\n            }\n        }\n\n        return flattenedList;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\n// Function to flatten the given nested list\nvector<int> flattenList(vector<vector<int>>& nestedList) {\n    vector<int> flattenedList;\n    \n    for (auto& elem : nestedList) {\n        if (elem.empty()) {\n            continue;\n        }\n        if (elem.size() == 1) {\n            flattenedList.push_back(elem[0]);\n        }\n        else {\n            vector<int> nested = flattenList(elem);\n            flattenedList.insert(flattenedList.end(), nested.begin(), nested.end());\n        }\n    }\n    \n    return flattenedList;\n}"
        ]
    },
    {
        "id": "299",
        "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.",
        "solution": "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])",
        "test": [
            "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
            "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
            "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
        ],
        "code": [
            "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])"
        ],
        "draft_plan": [
            "# Initialize the maximum aggregate to 0\n\n# Iterate through each tuple in the list\n    # Calculate the sum of the elements in the current tuple\n    # Compare the current aggregate with the maximum aggregate\n        # Update the maximum aggregate if the current aggregate is greater\n\n# Return the maximum aggregate"
        ],
        "requirements": [
            "import java.util.List;\n\npublic class MaximumAggregate {\n    \n    public static int calculateMaximumAggregate(List<Tuple> tuples) {\n        int maxAggregate = 0;\n        \n        for (Tuple tuple : tuples) {\n            int aggregate = tuple.getFirstElement() + tuple.getSecondElement();\n            maxAggregate = Math.max(maxAggregate, aggregate);\n        }\n        \n        return maxAggregate;\n    }\n}\n\nclass Tuple {\n    private int firstElement;\n    private int secondElement;\n    \n    public Tuple(int firstElement, int secondElement) {\n        this.firstElement = firstElement;\n        this.secondElement = secondElement;\n    }\n    \n    public int getFirstElement() {\n        return firstElement;\n    }\n    \n    public int getSecondElement() {\n        return secondElement;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint maxAggregate(std::vector<std::pair<int, int>> tuples) {\n    int maxAggregate = 0;\n\n    for (auto tuple : tuples) {\n        int sum = tuple.first + tuple.second;\n        maxAggregate = std::max(maxAggregate, sum);\n    }\n\n    return maxAggregate;\n}"
        ]
    },
    {
        "id": "300",
        "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
        "solution": "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res ",
        "test": [
            "assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)",
            "assert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)",
            "assert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)"
        ],
        "code": [
            "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res "
        ],
        "draft_plan": [
            "To solve this problem, we can use a recursive approach. Here is the code logic:\n\n# Define a recursive function to count the binary sequences\n    # Base case:\n        # If the length of the sequence is 2n\n            # Check if the sum of the first n bits is equal to the sum of the last n bits\n                # If so, return 1 (valid sequence)\n                # Otherwise, return 0 (invalid sequence)\n    # Recursive case:\n        # If the length of the sequence is less than 2n\n            # Append a '0' to the sequence and recursively call the function\n            # Append a '1' to the sequence and recursively call the function\n            # Return the sum of the counts of valid sequences obtained from both recursive calls\n\n# Call the recursive function with an empty sequence as the starting point"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class BinarySequences {\n    public static int countBinarySequences(int n) {\n        List<String> sequences = new ArrayList<>();\n        countBinarySequencesHelper(n, \"\", sequences);\n        int count = 0;\n        for (String sequence : sequences) {\n            if (isSumEqual(sequence))\n                count++;\n        }\n        return count;\n    }\n\n    private static void countBinarySequencesHelper(int n, String sequence, List<String> sequences) {\n        if (sequence.length() == 2 * n) {\n            sequences.add(sequence);\n            return;\n        }\n\n        countBinarySequencesHelper(n, sequence + \"0\", sequences);\n        countBinarySequencesHelper(n, sequence + \"1\", sequences);\n    }\n\n    private static boolean isSumEqual(String sequence) {\n        int n = sequence.length() / 2;\n        int sum1 = 0;\n        int sum2 = 0;\n        for (int i = 0; i < n; i++) {\n            sum1 += Character.getNumericValue(sequence.charAt(i));\n            sum2 += Character.getNumericValue(sequence.charAt(i + n));\n        }\n        return sum1 == sum2;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\nint countBinarySequences(int n, int sumFirst, int sumLast) {\n    // Base case\n    if (n == 0) {\n        if (sumFirst == sumLast) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n    \n    // Recursive case\n    int count = 0;\n    count += countBinarySequences(n - 1, sumFirst + 1, sumLast); // Append '0'\n    count += countBinarySequences(n - 1, sumFirst, sumLast + 1); // Append '1'\n    \n    return count;\n}\n\nint main() {\n    int n;\n    cout << \"Enter the value of n: \";\n    cin >> n;\n    \n    int totalCount = countBinarySequences(n, 0, 0);\n    \n    cout << \"Total count of binary sequences: \" << totalCount << endl;\n    \n    return 0;\n}"
        ]
    },
    {
        "id": "301",
        "prompt": "Write a function to find the depth of a dictionary.",
        "solution": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0",
        "test": [
            "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
            "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
            "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
        ],
        "code": [
            "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0"
        ],
        "draft_plan": [
            "# Define a recursive function to calculate the depth of a dictionary\n    # Initialize the depth to 1\n\n    # Iterate through each key-value pair in the dictionary\n        # Check if the value is a dictionary\n            # If it is, recursively call the function to calculate the depth of the nested dictionary\n            # Update the depth if the nested dictionary has a greater depth\n\n    # Return the depth\n\n# Call the function with the input dictionary to find its depth"
        ],
        "requirements": [
            "import java.util.*;\n\npublic class DictionaryDepth {\n\n    public static int calculateDepth(Map<String, Object> dictionary) {\n        int depth = 1;\n\n        for (Object value : dictionary.values()) {\n            if (value instanceof Map) {\n                int nestedDepth = calculateDepth((Map<String, Object>) value);\n                depth = Math.max(depth, nestedDepth + 1);\n            }\n        }\n\n        return depth;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <map>\n\nint calculateDepth(std::map<std::string, int> dictionary) {\n    int depth = 1;\n    \n    for (auto& pair : dictionary) {\n        if (pair.second == depth + 1) {\n            depth = pair.second;\n        }\n    }\n    \n    return depth;\n}"
        ]
    },
    {
        "id": "304",
        "prompt": "Write a python function to find element at a given index after number of rotations.",
        "solution": "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] ",
        "test": [
            "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
            "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
            "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
        ],
        "code": [
            "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] "
        ],
        "draft_plan": [
            "# Calculate the effective rotations by taking the remainder of the given number of rotations with the length of the array\n\n# If the effective rotations is 0, return the element at the given index directly\n\n# Otherwise, split the array into two parts: the rotated part and the remaining part\n    # The rotated part is from index 0 to effective rotations - 1\n    # The remaining part is from effective rotations to the end of the array\n\n# Create a new array by concatenating the remaining part and the rotated part\n\n# Return the element at the given index from the new array"
        ],
        "requirements": [
            "import java.util.Arrays;\n\npublic class RotateArray {\n    public static int getElementAfterRotations(int[] arr, int rotations, int index) {\n        int effectiveRotations = rotations % arr.length;\n        \n        if (effectiveRotations == 0) {\n            return arr[index];\n        }\n        \n        int[] rotatedPart = Arrays.copyOfRange(arr, 0, effectiveRotations);\n        int[] remainingPart = Arrays.copyOfRange(arr, effectiveRotations, arr.length);\n        \n        int[] newArray = new int[arr.length];\n        System.arraycopy(remainingPart, 0, newArray, 0, remainingPart.length);\n        System.arraycopy(rotatedPart, 0, newArray, remainingPart.length, rotatedPart.length);\n        \n        return newArray[index];\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint getElementAtIndexAfterRotations(vector<int>& arr, int index, int rotations) {\n    int n = arr.size();\n    \n    // Calculate the effective rotations\n    int effectiveRotations = rotations % n;\n    \n    // If effective rotations is 0, return the element at the given index directly\n    if (effectiveRotations == 0) {\n        return arr[index];\n    }\n    \n    // Split the array into rotated part and remaining part\n    vector<int> rotatedPart(arr.begin(), arr.begin() + effectiveRotations);\n    vector<int> remainingPart(arr.begin() + effectiveRotations, arr.end());\n    \n    // Create a new array by concatenating the remaining part and the rotated part\n    vector<int> newArr = remainingPart;\n    newArr.insert(newArr.end(), rotatedPart.begin(), rotatedPart.end());\n    \n    // Return the element at the given index from the new array\n    return newArr[index];\n}"
        ]
    },
    {
        "id": "305",
        "prompt": "Write a function to return two words from a list of words starting with letter 'p'.",
        "solution": "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()",
        "test": [
            "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
            "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
            "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
        ],
        "code": [
            "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()"
        ],
        "draft_plan": [
            "# Initialize an empty list to store the words starting with letter 'p'\n\n# Iterate through each word in the input list\n    # Check if the first character of the word is 'p'\n        # If the condition is true, append the word to the list\n\n# Check if there are at least two words starting with letter 'p'\n    # If the condition is true, return the first two words from the list\n    # If the condition is false, return an empty list"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class WordUtils {\n\n    public static List<String> getWordsStartingWithP(List<String> words) {\n        List<String> result = new ArrayList<>();\n\n        for (String word : words) {\n            if (word.charAt(0) == 'p' || word.charAt(0) == 'P') {\n                result.add(word);\n            }\n        }\n\n        if (result.size() >= 2) {\n            return result.subList(0, 2);\n        } else {\n            return new ArrayList<>();\n        }\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> getWordsStartingWithP(const std::vector<std::string>& words) {\n    std::vector<std::string> result;\n    \n    for (const std::string& word : words) {\n        if (word[0] == 'p' || word[0] == 'P') {\n            result.push_back(word);\n        }\n    }\n    \n    if (result.size() >= 2) {\n        return {result[0], result[1]};\n    }\n    \n    return {};\n}"
        ]
    },
    {
        "id": "306",
        "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .",
        "solution": "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]",
        "test": [
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
            "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
        ],
        "code": [
            "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]"
        ],
        "draft_plan": [
            "# Initialize a list to store the maximum sum of increasing subsequences for each index\n# Set the first element of the list as the value of the first element in the input array\n\n# Iterate from the second element of the input array\n    # Initialize the maximum sum as the value of the current element in the input array\n    # Iterate from the first element to the current element\n        # Check if the value of the current element is greater than the value of the previous element\n            # Update the maximum sum by adding the value of the current element and the maximum sum of the increasing subsequence until the previous element\n        \n    # Store the maximum sum for the current index in the list\n    \n# Find the maximum sum from the list\n\n# Return the maximum sum"
        ],
        "requirements": [
            "import java.util.Arrays;\n\nclass MaxSumIncreasingSubsequence {\n    public static int maxSumWithK(int[] arr, int k) {\n        int n = arr.length;\n        int[] dp = new int[n];\n        dp[0] = arr[0];\n\n        for (int i = 1; i < n; i++) {\n            dp[i] = arr[i];\n            for (int j = 0; j < i; j++) {\n                if (arr[i] > arr[j]) {\n                    dp[i] = Math.max(dp[i], arr[i] + dp[j]);\n                }\n            }\n        }\n\n        int maxSum = dp[0];\n        for (int i = 1; i < n; i++) {\n            maxSum = Math.max(maxSum, dp[i]);\n        }\n\n        return maxSum + k;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint maxSumIncreasingSubsequence(vector<int>& arr, int k) {\n    int n = arr.size();\n    vector<int> maxSum(n, 0);\n    maxSum[0] = arr[0];\n\n    for (int i = 1; i < n; i++) {\n        int currentMaxSum = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                currentMaxSum = max(currentMaxSum, arr[i] + maxSum[j]);\n            }\n        }\n        maxSum[i] = currentMaxSum;\n    }\n\n    int maxSumIncludingK = arr[k];\n    for (int i = 0; i < k; i++) {\n        if (arr[k] > arr[i]) {\n            maxSumIncludingK = max(maxSumIncludingK, arr[k] + maxSum[i]);\n        }\n    }\n\n    return maxSumIncludingK;\n}"
        ]
    },
    {
        "id": "307",
        "prompt": "Write a function to get a colon of a tuple.",
        "solution": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon",
        "test": [
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
        ],
        "code": [
            "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon"
        ],
        "draft_plan": [
            "# Assuming you want to get the second element of the tuple (index 1)\n\n# Define a function that takes a tuple as input\n    # Access the second element of the tuple using indexing\n    # Return the second element\n\n# Call the function and pass a tuple as an argument to get the second element"
        ],
        "requirements": [
            "import java.util.*;\n\npublic class TupleExample {\n    \n    public static <T> T getSecondElement(Tuple<T, ?> tuple) {\n        return tuple.getSecond();\n    }\n    \n    public static void main(String[] args) {\n        Tuple<String, Integer> tuple = new Tuple<>(\"Hello\", 123);\n        Integer secondElement = getSecondElement(tuple);\n        System.out.println(secondElement); // Output: 123\n    }\n}\n\nclass Tuple<T1, T2> {\n    private final T1 first;\n    private final T2 second;\n    \n    public Tuple(T1 first, T2 second) {\n        this.first = first;\n        this.second = second;\n    }\n    \n    public T1 getFirst() {\n        return first;\n    }\n    \n    public T2 getSecond() {\n        return second;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <tuple>\n\ntemplate<typename T1, typename T2>\nT2 getSecondElement(const std::tuple<T1, T2>& tuple) {\n    return std::get<1>(tuple);\n}\n\nint main() {\n    std::tuple<int, char, std::string> myTuple(1, 'a', \"hello\");\n    \n    char secondElement = getSecondElement(myTuple);\n    \n    std::cout << \"Second element: \" << secondElement << std::endl;\n    \n    return 0;\n}"
        ]
    },
    {
        "id": "308",
        "prompt": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.",
        "solution": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result",
        "test": [
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
        ],
        "code": [
            "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result"
        ],
        "draft_plan": [
            "# Create an empty list to store the products\n\n# Iterate through each element in the first list\n    # Iterate through each element in the second list\n        # Calculate the product of the current element from the first list and the current element from the second list\n        # Append the product to the list of products\n\n# Sort the list of products in descending order\n\n# Return the specified number of largest products from the sorted list"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class LargestProduct {\n    public static List<Integer> findLargestProducts(List<Integer> list1, List<Integer> list2, int num) {\n        List<Integer> products = new ArrayList<>();\n\n        for (int num1 : list1) {\n            for (int num2 : list2) {\n                int product = num1 * num2;\n                products.add(product);\n            }\n        }\n\n        Collections.sort(products, Collections.reverseOrder());\n\n        return products.subList(0, num);\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> findLargestProducts(std::vector<int> list1, std::vector<int> list2, int numProducts) {\n    std::vector<int> products;\n    \n    // Iterate through each element in the first list\n    for (int i = 0; i < list1.size(); i++) {\n        // Iterate through each element in the second list\n        for (int j = 0; j < list2.size(); j++) {\n            // Calculate the product of the current element from the first list and the current element from the second list\n            int product = list1[i] * list2[j];\n            // Append the product to the list of products\n            products.push_back(product);\n        }\n    }\n    \n    // Sort the list of products in descending order\n    std::sort(products.begin(), products.end(), std::greater<int>());\n    \n    // Return the specified number of largest products from the sorted list\n    std::vector<int> largestProducts;\n    for (int i = 0; i < numProducts && i < products.size(); i++) {\n        largestProducts.push_back(products[i]);\n    }\n    \n    return largestProducts;\n}"
        ]
    },
    {
        "id": "309",
        "prompt": "Write a python function to find the maximum of two numbers.",
        "solution": "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b ",
        "test": [
            "assert maximum(5,10) == 10",
            "assert maximum(-1,-2) == -1",
            "assert maximum(9,7) == 9"
        ],
        "code": [
            "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b "
        ],
        "draft_plan": [
            "# Define a function that takes two parameters, num1 and num2\n    # Check if num1 is greater than num2\n        # If true, return num1\n        # If false, return num2"
        ],
        "requirements": [
            "int maximum(int num1, int num2) {\n    if (num1 > num2) {\n        return num1;\n    } else {\n        return num2;\n    }\n}"
        ],
        "final_plan": [
            "int maximum(int num1, int num2) {\n    if (num1 > num2) {\n        return num1;\n    } else {\n        return num2;\n    }\n}"
        ]
    },
    {
        "id": "310",
        "prompt": "Write a function to convert a given string to a tuple of characters.",
        "solution": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result",
        "test": [
            "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
            "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
            "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
        ],
        "code": [
            "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result"
        ],
        "draft_plan": [
            "# Initialize an empty tuple\n\n# Iterate through each character in the input string\n    # Append the character to the tuple\n\n# Return the tuple"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class StringToTuple {\n    public static List<Character> stringToTuple(String str) {\n        List<Character> tuple = new ArrayList<>();\n        for (char c : str.toCharArray()) {\n            tuple.add(c);\n        }\n        return tuple;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\n#include <tuple>\n\nstd::tuple<char, char, char> convertStringToTuple(std::string str) {\n    char char1 = str[0];\n    char char2 = str[1];\n    char char3 = str[2];\n    \n    return std::make_tuple(char1, char2, char3);\n}"
        ]
    },
    {
        "id": "311",
        "prompt": "Write a python function to set the left most unset bit.",
        "solution": "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) ",
        "test": [
            "assert set_left_most_unset_bit(10) == 14",
            "assert set_left_most_unset_bit(12) == 14",
            "assert set_left_most_unset_bit(15) == 15"
        ],
        "code": [
            "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) "
        ],
        "draft_plan": [
            "To set the leftmost unset bit in a given number, we can use the bitwise operations in Python. Here's the code logic:\n\n1. Define a function `set_leftmost_unset_bit(num)` that takes the number as input.\n2. Initialize a variable `mask` as 1, which is the binary representation of 1 (`0b1`).\n3. Iterate through each bit position from 0 to the total number of bits in the number.\n     - Use the bitwise AND operation to check if the current bit is unset in the number by comparing it with the mask.\n     - If the bit is unset, use the bitwise OR operation to set that bit in the number.\n     - Break the loop once the leftmost unset bit is set.\n     - Update the mask by shifting it to the left by one position (`mask << 1`) to check the next bit.\n4. Return the updated number with the leftmost unset bit set.\n\nHere's the code implementation:\n\n```python\ndef set_leftmost_unset_bit(num):\n    mask = 1  # Binary representation of 1\n    for i in range(num.bit_length()):\n        if num & mask == 0:\n            num |= mask\n            break\n        mask <<= 1\n    return num\n```\n\nYou can now call the `set_leftmost_unset_bit()` function with a given number to set its leftmost unset bit."
        ],
        "requirements": [
            "Sure! Here's the Java code without the main method to set the leftmost unset bit in a given number:\n\n```java\npublic class LeftmostUnsetBit {\n    public static int setLeftmostUnsetBit(int num) {\n        int mask = 1;  // Binary representation of 1\n        for (int i = 0; i < Integer.SIZE; i++) {\n            if ((num & mask) == 0) {\n                num |= mask;\n                break;\n            }\n            mask <<= 1;\n        }\n        return num;\n    }\n}\n```\n\nYou can now use the `setLeftmostUnsetBit()` method by calling it with a given number to set its leftmost unset bit."
        ],
        "final_plan": [
            "Sure! Here's the C++ code without the `main` function to set the leftmost unset bit in a given number:\n\n```cpp\n#include <iostream>\n\n// Function to set the leftmost unset bit in a given number\nint setLeftmostUnsetBit(int num) {\n    int mask = 1;  // Binary representation of 1\n    for (int i = 0; i < sizeof(int) * 8; i++) {\n        if ((num & mask) == 0) {\n            num |= mask;\n            break;\n        }\n        mask <<= 1;\n    }\n    return num;\n}\n```\n\nYou can now use this function `setLeftmostUnsetBit()` to set the leftmost unset bit in a given number."
        ]
    },
    {
        "id": "312",
        "prompt": "Write a function to find the volume of a cone.",
        "solution": "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume",
        "test": [
            "assert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)",
            "assert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)",
            "assert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)"
        ],
        "code": [
            "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume"
        ],
        "draft_plan": [
            "# Define a function to calculate the volume of a cone with parameters for the radius and height\n    # Calculate the base area of the cone using the formula: base_area = pi * radius^2\n    # Calculate the volume of the cone using the formula: volume = (1/3) * base_area * height\n    # Return the calculated volume\n\n# Example usage:\n# radius = 5\n# height = 10\n# volume = calculate_cone_volume(radius, height)\n# print(volume) -> Output: 261.7993877991494"
        ],
        "requirements": [
            "public class ConeVolumeCalculator {\n    \n    public static double calculateConeVolume(double radius, double height) {\n        double baseArea = Math.PI * Math.pow(radius, 2);\n        double volume = (1.0 / 3.0) * baseArea * height;\n        return volume;\n    }\n    \n}"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\ndouble calculateConeVolume(double radius, double height) {\n    double baseArea = 3.141592653589793238 * radius * radius;\n    double volume = (1.0 / 3.0) * baseArea * height;\n    return volume;\n}\n\nint main() {\n    double radius = 5.0;\n    double height = 10.0;\n    double volume = calculateConeVolume(radius, height);\n    cout << \"Volume of the cone: \" << volume << endl;\n    return 0;\n}"
        ]
    },
    {
        "id": "388",
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.",
        "solution": "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res ",
        "test": [
            "assert highest_Power_of_2(10) == 8",
            "assert highest_Power_of_2(19) == 16",
            "assert highest_Power_of_2(32) == 32"
        ],
        "code": [
            "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res "
        ],
        "draft_plan": [
            "# Initialize a variable 'power' with 1\n\n# While 'power' is less than or equal to 'n'\n    # Multiply 'power' by 2\n\n# Return the previous value of 'power' (i.e. 'power' divided by 2)"
        ],
        "requirements": [
            "public class Main {\n    public static int highestPowerOf2(int n) {\n        int power = 1;\n        while (power <= n) {\n            power *= 2;\n        }\n        return power / 2;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\nint highestPowerOf2(int n) {\n    int power = 1;\n    while (power <= n) {\n        power *= 2;\n    }\n    return power / 2;\n}"
        ]
    },
    {
        "id": "389",
        "prompt": "Write a function to find the n'th lucas number.",
        "solution": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ",
        "test": [
            "assert find_lucas(9) == 76",
            "assert find_lucas(4) == 7",
            "assert find_lucas(3) == 4"
        ],
        "code": [
            "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) "
        ],
        "draft_plan": [
            "# Define a function to find the n'th Lucas number\n    # Check if n is 0\n        # If so, return 2 (as the 0th Lucas number is 2)\n    # Check if n is 1\n        # If so, return 1 (as the 1st Lucas number is 1)\n    # Initialize variables to store the values of the (n-1)th and (n-2)th Lucas numbers\n    # Iterate from 2 to n\n        # Calculate the current Lucas number by summing the (n-1)th and (n-2)th Lucas numbers\n        # Update the values of the (n-1)th and (n-2)th Lucas numbers for the next iteration\n    # Return the n'th Lucas number\n\n# Call the function with the desired value of n to find the n'th Lucas number"
        ],
        "requirements": [
            "public class LucasNumber {\n    public static int findLucasNumber(int n) {\n        if (n == 0) {\n            return 2;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        \n        int lucasNumberNMinus1 = 1;\n        int lucasNumberNMinus2 = 2;\n        int lucasNumberN = 0;\n        \n        for (int i = 2; i <= n; i++) {\n            lucasNumberN = lucasNumberNMinus1 + lucasNumberNMinus2;\n            lucasNumberNMinus2 = lucasNumberNMinus1;\n            lucasNumberNMinus1 = lucasNumberN;\n        }\n        \n        return lucasNumberN;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\nint nthLucasNumber(int n) {\n    if (n == 0)\n        return 2;\n    if (n == 1)\n        return 1;\n    \n    int lucasNMinus1 = 1;\n    int lucasNMinus2 = 2;\n    int lucasN = 0;\n    \n    for (int i = 2; i <= n; i++) {\n        lucasN = lucasNMinus1 + lucasNMinus2;\n        lucasNMinus1 = lucasNMinus2;\n        lucasNMinus2 = lucasN;\n    }\n    \n    return lucasN;\n}"
        ]
    },
    {
        "id": "390",
        "prompt": "Write a function to apply a given format string to all of the elements in a list.",
        "solution": "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string",
        "test": [
            "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
            "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
            "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
        ],
        "code": [
            "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string"
        ],
        "draft_plan": [
            "# Initialize an empty list to store formatted elements\n\n# Iterate through each element in the input list\n    # Apply the format string to the current element and append it to the formatted list\n\n# Return the formatted list"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class FormatString {\n    public static List<String> applyFormatString(List<String> list, String formatString) {\n        List<String> formattedList = new ArrayList<>();\n        \n        for (String element : list) {\n            String formattedElement = String.format(formatString, element);\n            formattedList.add(formattedElement);\n        }\n        \n        return formattedList;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\ntemplate<typename T>\nstd::vector<std::string> applyFormatString(const std::vector<T>& elements, const std::string& formatString) {\n    std::vector<std::string> formattedElements;\n    for (const T& element : elements) {\n        std::stringstream ss;\n        ss << element;\n        std::string formattedElement = ss.str();\n        formattedElements.push_back(formattedElement);\n    }\n    return formattedElements;\n}"
        ]
    },
    {
        "id": "391",
        "prompt": "Write a function to convert more than one list to nested dictionary.",
        "solution": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result",
        "test": [
            "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
            "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
            "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
        ],
        "code": [
            "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result"
        ],
        "draft_plan": [
            "# Initialize an empty dictionary\n\n# Iterate through each list in the input\n    # Initialize a variable to track the current nested dictionary\n    # Iterate through each element in the current list\n        # If the current element is the last element in the list\n            # Set the value of the current nested dictionary key to the current element\n        # Otherwise\n            # If the current element is not a key in the current nested dictionary\n                # Create a new nested dictionary and set it as the value of the current nested dictionary key\n            # Update the current nested dictionary to the newly created nested dictionary\n\n# Return the final nested dictionary"
        ],
        "requirements": [
            "import java.util.*;\n\npublic class ListToNestedDictionary {\n    public static Map<String, Object> convertToNestedDictionary(List<List<String>> lists) {\n        Map<String, Object> nestedDict = new HashMap<>();\n\n        for (List<String> list : lists) {\n            Map<String, Object> currentDict = nestedDict;\n\n            for (int i = 0; i < list.size(); i++) {\n                String key = list.get(i);\n\n                if (i == list.size() - 1) {\n                    currentDict.put(key, key);\n                } else {\n                    if (!currentDict.containsKey(key)) {\n                        currentDict.put(key, new HashMap<String, Object>());\n                    }\n                    currentDict = (Map<String, Object>) currentDict.get(key);\n                }\n            }\n        }\n\n        return nestedDict;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <unordered_map>\n\nusing namespace std;\n\nunordered_map<string, unordered_map<string, string>> convertToNestedDict(vector<vector<string>>& lists) {\n    unordered_map<string, unordered_map<string, string>> nestedDict;\n    \n    for (const auto& list : lists) {\n        unordered_map<string, string> currentDict = nestedDict;\n        \n        for (int i = 0; i < list.size(); i++) {\n            if (i == list.size() - 1) {\n                currentDict[list[i]] = \"\";\n            } else {\n                if (currentDict.find(list[i]) == currentDict.end()) {\n                    unordered_map<string, string> newDict;\n                    currentDict[list[i]] = newDict;\n                }\n                currentDict = currentDict[list[i]];\n            }\n        }\n    }\n    \n    return nestedDict;\n}"
        ]
    },
    {
        "id": "392",
        "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "solution": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]",
        "test": [
            "assert get_max_sum(60) == 106",
            "assert get_max_sum(10) == 12",
            "assert get_max_sum(2) == 2"
        ],
        "code": [
            "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]"
        ],
        "draft_plan": [
            "# Create a dictionary to store the computed values of f(n)\n# Initialize the dictionary with the base cases f(0) = 0 and f(1) = 1\n\n# Define a recursive function to compute f(n)\n    # Check if the value of f(n) has already been computed and stored in the dictionary\n        # If yes, return the stored value\n    # Compute the value of f(n) using the given equation\n    # Store the computed value of f(n) in the dictionary\n    # Return the computed value of f(n)\n\n# Call the recursive function with the given input n to find the maximum sum possible by using the equation"
        ],
        "requirements": [
            "import java.util.HashMap;\nimport java.util.Map;\n\npublic class MaximumSum {\n    private static Map<Integer, Long> memo = new HashMap<>();\n\n    public static long computeFn(int n) {\n        if (n == 0 || n == 1) {\n            return n;\n        }\n\n        if (memo.containsKey(n)) {\n            return memo.get(n);\n        }\n\n        long sum = computeFn(n / 2) + computeFn(n / 3) + computeFn(n / 4) + computeFn(n / 5);\n        long fn = Math.max(sum, n);\n        memo.put(n, fn);\n\n        return fn;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <unordered_map>\nusing namespace std;\n\nunordered_map<int, long long> memo;\n\nlong long computeValue(int n) {\n    if (memo.count(n) > 0) {\n        return memo[n];\n    }\n\n    long long value = max((computeValue(n/2) + computeValue(n/3) + computeValue(n/4) + computeValue(n/5)), (long long)n);\n    memo[n] = value;\n    \n    return value;\n}\n\nlong long getMaxSum(int n) {\n    memo[0] = 0;\n    memo[1] = 1;\n    \n    return computeValue(n);\n}\n"
        ]
    },
    {
        "id": "393",
        "prompt": "Write a function to find the list with maximum length.",
        "solution": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)",
        "test": [
            "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
            "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
        ],
        "code": [
            "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)"
        ],
        "draft_plan": [
            "# Initialize a variable `max_length` to 0 and an empty list `max_list`\n\n# Iterate through each list in the input list of lists\n    # Check if the length of the current list is greater than `max_length`\n        # If so, update `max_length` to the length of the current list and `max_list` to the current list\n\n# Return `max_list`"
        ],
        "requirements": [
            "import java.util.List;\n\npublic class MaxLengthList {\n    public static <T> List<T> findMaxLengthList(List<List<T>> lists) {\n        int maxLength = 0;\n        List<T> maxLengthList = null;\n\n        for (List<T> list : lists) {\n            if (list.size() > maxLength) {\n                maxLength = list.size();\n                maxLengthList = list;\n            }\n        }\n\n        return maxLengthList;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> maxLengthList(vector<vector<int>>& lists) {\n    int max_length = 0;\n    vector<int> max_list;\n\n    for (auto& list : lists) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n\n    return max_list;\n}"
        ]
    },
    {
        "id": "394",
        "prompt": "Write a function to check if given tuple contains no duplicates.",
        "solution": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res ",
        "test": [
            "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
            "assert check_distinct((1, 4, 5, 6)) == True",
            "assert check_distinct((2, 3, 4, 5, 6)) == True"
        ],
        "code": [
            "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res "
        ],
        "draft_plan": [
            "# Convert the tuple to a set and check if the length of the set is equal to the length of the tuple\n    # If the lengths are equal, it means there are no duplicates\n    # If the lengths are not equal, it means there are duplicates"
        ],
        "requirements": [
            "import java.util.HashSet;\nimport java.util.Set;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class TupleDuplicates {\n    public static <T> boolean hasDuplicates(T[] tuple) {\n        Set<T> set = new HashSet<>(Arrays.asList(tuple));\n        return set.size() != tuple.length;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <tuple>\n#include <unordered_set>\n\ntemplate <typename... Ts>\nbool hasNoDuplicates(const std::tuple<Ts...>& tuple) {\n    std::unordered_set<std::tuple<Ts...>> set;\n    for (const auto& element : tuple) {\n        if (set.count(element) > 0) {\n            return false;\n        }\n        set.insert(element);\n    }\n    return true;\n}"
        ]
    },
    {
        "id": "395",
        "prompt": "Write a python function to find the first non-repeated character in a given string.",
        "solution": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None",
        "test": [
            "assert first_non_repeating_character(\"abcabc\") == None",
            "assert first_non_repeating_character(\"abc\") == \"a\"",
            "assert first_non_repeating_character(\"ababc\") == \"c\""
        ],
        "code": [
            "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None"
        ],
        "draft_plan": [
            "# Initialize an empty dictionary to store the count of each character in the string\n\n# Iterate through each character in the string\n    # If the character is already in the dictionary, increment its count by 1\n    # If the character is not in the dictionary, add it to the dictionary with a count of 1\n\n# Iterate through each character in the string\n    # If the count of the character is 1, return it as the first non-repeated character\n\n# If no non-repeated character is found, return \"None\""
        ],
        "requirements": [
            "import java.util.HashMap;\nimport java.util.Map;\n\npublic class FirstNonRepeatedCharacter {\n    public static Character firstNonRepeatedCharacter(String str) {\n        Map<Character, Integer> charCount = new HashMap<>();\n\n        // Count the occurrence of each character in the string\n        for (int i = 0; i < str.length(); i++) {\n            char c = str.charAt(i);\n            charCount.put(c, charCount.getOrDefault(c, 0) + 1);\n        }\n\n        // Iterate through the string to find the first non-repeated character\n        for (int i = 0; i < str.length(); i++) {\n            char c = str.charAt(i);\n            if (charCount.get(c) == 1) {\n                return c;\n            }\n        }\n\n        // If no non-repeated character is found, return null\n        return null;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <unordered_map>\nusing namespace std;\n\nchar firstNonRepeatedChar(string str) {\n    unordered_map<char, int> charCount;\n    \n    for (char c : str) {\n        charCount[c]++;\n    }\n    \n    for (char c : str) {\n        if (charCount[c] == 1) {\n            return c;\n        }\n    }\n    \n    return '\\0';\n}"
        ]
    },
    {
        "id": "396",
        "prompt": "Write a function to check whether the given string starts and ends with the same character or not.",
        "solution": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ",
        "test": [
            "assert check_char(\"abba\") == \"Valid\"",
            "assert check_char(\"a\") == \"Valid\"",
            "assert check_char(\"abcd\") == \"Invalid\""
        ],
        "code": [
            "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" "
        ],
        "draft_plan": [
            "# Check if the first character of the string is equal to the last character\n    # If they are equal, return True\n    # If they are not equal, return False"
        ],
        "requirements": [
            "public class SameCharacterChecker {\n    public static boolean startsAndEndsWithSameCharacter(String str) {\n        if (str.length() > 0 && str.charAt(0) == str.charAt(str.length() - 1)) {\n            return true;\n        }\n        return false;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\n\nbool startsAndEndsWithSameChar(std::string str) {\n    if (str.length() < 1) {\n        return false;\n    }\n    \n    if (str[0] == str[str.length() - 1]) {\n        return true;\n    } else {\n        return false;\n    }\n}"
        ]
    },
    {
        "id": "397",
        "prompt": "Write a function to find the median of three numbers.",
        "solution": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median",
        "test": [
            "assert median_numbers(25,55,65)==55.0",
            "assert median_numbers(20,10,30)==20.0",
            "assert median_numbers(15,45,75)==45.0"
        ],
        "code": [
            "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median"
        ],
        "draft_plan": [
            "# Sort the three numbers in ascending order\n# Check if the middle number is an integer\n    # If it is, return the middle number as the median\n    # If it is not, calculate the average of the two middle numbers and return it as the median"
        ],
        "requirements": [
            "public class MedianOfThree {\n    \n    public static double findMedian(int num1, int num2, int num3) {\n        // Sort the numbers in ascending order\n        int[] sortedNums = new int[]{num1, num2, num3};\n        Arrays.sort(sortedNums);\n        \n        // Check if the middle number is an integer\n        if (sortedNums[1] % 1 == 0) {\n            return sortedNums[1]; // Return the middle number as the median\n        } else {\n            return (sortedNums[1] + sortedNums[2]) / 2.0; // Return the average of the two middle numbers as the median\n        }\n    }\n    \n}"
        ],
        "final_plan": [
            "#include <algorithm>\nusing namespace std;\n\ndouble findMedian(double a, double b, double c) {\n    double arr[] = {a, b, c};\n    sort(arr, arr + 3);\n    \n    double median;\n    \n    if (arr[1] == floor(arr[1])) {\n        median = arr[1];\n    } else {\n        median = (arr[1] + arr[2]) / 2;\n    }\n    \n    return median;\n}"
        ]
    },
    {
        "id": "398",
        "prompt": "Write a function to compute the sum of digits of each number of a given list.",
        "solution": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
        "test": [
            "assert sum_of_digits([10,2,56])==14",
            "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
            "assert sum_of_digits([10,20,-4,5,-70])==19"
        ],
        "code": [
            "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"
        ],
        "draft_plan": [
            "# Initialize an empty list to store the sum of digits for each number\n\n# Iterate through each number in the given list\n    # Convert the number to a string\n    # Initialize a variable to store the sum of digits for the current number\n    # Iterate through each digit in the string representation of the number\n        # Convert the digit back to an integer and add it to the sum\n    # Append the sum of digits to the list\n\n# Return the list of sums of digits"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SumOfDigits {\n    public static List<Integer> sumOfDigits(List<Integer> numbers) {\n        List<Integer> sums = new ArrayList<>();\n\n        for (Integer number : numbers) {\n            String numberStr = String.valueOf(number);\n            int sum = 0;\n\n            for (int i = 0; i < numberStr.length(); i++) {\n                int digit = Integer.parseInt(Character.toString(numberStr.charAt(i)));\n                sum += digit;\n            }\n\n            sums.add(sum);\n        }\n\n        return sums;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> sumOfDigits(vector<int> nums) {\n    vector<int> sumList;\n    for (int i = 0; i < nums.size(); i++) {\n        int num = nums[i];\n        int sum = 0;\n        string numStr = to_string(num);\n        for (char c : numStr) {\n            sum += c - '0';\n        }\n        sumList.push_back(sum);\n    }\n    return sumList;\n}"
        ]
    },
    {
        "id": "399",
        "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
        "solution": "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "test": [
            "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
            "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
            "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
        ],
        "code": [
            "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) "
        ],
        "draft_plan": [
            "# Define a function to perform bitwise xor operation on the given tuples\n    # Create an empty result list to store the xor results\n    \n    # Iterate through each tuple in the input list\n        # Perform bitwise xor operation between the elements of the tuple\n        # Append the result to the result list\n    \n    # Return the result list"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class BitwiseXOR {\n    public static List<Integer> bitwiseXOR(List<List<Integer>> tuples) {\n        List<Integer> result = new ArrayList<>();\n\n        for (List<Integer> tuple : tuples) {\n            int xorResult = 0;\n            for (int element : tuple) {\n                xorResult ^= element;\n            }\n            result.add(xorResult);\n        }\n\n        return result;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <tuple>\n\nusing namespace std;\n\nvector<int> bitwiseXor(vector<tuple<int, int>> tuples) {\n    vector<int> result;\n    \n    for (auto tuple : tuples) {\n        int a = get<0>(tuple);\n        int b = get<1>(tuple);\n        \n        int xorResult = a ^ b;\n        \n        result.push_back(xorResult);\n    }\n    \n    return result;\n}"
        ]
    },
    {
        "id": "400",
        "prompt": "Write a function to extract the number of unique tuples in the given list.",
        "solution": "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)",
        "test": [
            "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
            "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
            "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
        ],
        "code": [
            "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)"
        ],
        "draft_plan": [
            "# Initialize an empty set to store unique tuples\n\n# Iterate through each tuple in the list\n    # Convert the tuple to a tuple object to make it hashable\n    # Add the tuple to the set\n\n# Return the size of the set, which represents the number of unique tuples"
        ],
        "requirements": [
            "import java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class UniqueTuples {\n    public static int countUniqueTuples(List<List<Integer>> tuples) {\n        Set<List<Integer>> uniqueTuples = new HashSet<>();\n\n        for (List<Integer> tuple : tuples) {\n            uniqueTuples.add(tuple);\n        }\n\n        return uniqueTuples.size();\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <unordered_set>\n#include <tuple>\n#include <vector>\n\nint countUniqueTuples(std::vector<std::tuple<int, int, int>>& tuples) {\n    std::unordered_set<std::tuple<int, int, int>> uniqueTuples;\n    \n    for (const auto& tuple : tuples) {\n        uniqueTuples.insert(tuple);\n    }\n    \n    return uniqueTuples.size();\n}"
        ]
    },
    {
        "id": "401",
        "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
        "solution": "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "test": [
            "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
            "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
            "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
        ],
        "code": [
            "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) "
        ],
        "draft_plan": [
            "# Define a function that takes two nested tuples as input\n\n    # Create an empty result list to store the sums\n    \n    # Iterate through each element of the nested tuples\n    \n        # Iterate through each element of the inner tuples\n        \n            # Perform index wise addition of the elements and append the sum to the result list\n    \n    # Return the result list"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TupleAddition {\n    \n    public static List<Integer> tupleAddition(List<List<Integer>> tuple1, List<List<Integer>> tuple2) {\n        List<Integer> result = new ArrayList<>();\n        \n        int n = Math.min(tuple1.size(), tuple2.size());\n        for (int i = 0; i < n; i++) {\n            List<Integer> inner1 = tuple1.get(i);\n            List<Integer> inner2 = tuple2.get(i);\n            \n            int m = Math.min(inner1.size(), inner2.size());\n            for (int j = 0; j < m; j++) {\n                int sum = inner1.get(j) + inner2.get(j);\n                result.add(sum);\n            }\n        }\n        \n        return result;\n    }\n    \n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <tuple>\n#include <vector>\n\n// Function to perform index wise addition of tuple elements in the given two nested tuples\nstd::vector<int> tupleAddition(std::tuple<std::tuple<int, int, int>, std::tuple<int, int, int>>& tuple1, \n                               std::tuple<std::tuple<int, int, int>, std::tuple<int, int, int>>& tuple2) {\n    std::vector<int> result;\n    \n    // Iterate through each element of the nested tuples\n    for (int i = 0; i < std::tuple_size<decltype(tuple1)>::value; i++) {\n        auto innerTuple1 = std::get<i>(tuple1);\n        auto innerTuple2 = std::get<i>(tuple2);\n        \n        // Iterate through each element of the inner tuples\n        for (int j = 0; j < std::tuple_size<decltype(innerTuple1)>::value; j++) {\n            int sum = std::get<j>(innerTuple1) + std::get<j>(innerTuple2);\n            \n            // Append the sum to the result list\n            result.push_back(sum);\n        }\n    }\n    \n    return result;\n}"
        ]
    },
    {
        "id": "404",
        "prompt": "Write a python function to find the minimum of two numbers.",
        "solution": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ",
        "test": [
            "assert minimum(1,2) == 1",
            "assert minimum(-5,-4) == -5",
            "assert minimum(0,0) == 0"
        ],
        "code": [
            "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b "
        ],
        "draft_plan": [
            "# Define a function that takes two numbers as input\n    # Check if the first number is less than the second number\n        # If true, return the first number\n        # If false, return the second number"
        ],
        "requirements": [
            "public class MinimumOfTwoNumbers {\n    public static int findMinimum(int num1, int num2) {\n        if (num1 < num2) {\n            return num1;\n        } else {\n            return num2;\n        }\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n\nint findMinimum(int a, int b) {\n    if (a < b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1, num2;\n    std::cout << \"Enter two numbers: \";\n    std::cin >> num1 >> num2;\n\n    int minimum = findMinimum(num1, num2);\n\n    std::cout << \"The minimum of \" << num1 << \" and \" << num2 << \" is \" << minimum << std::endl;\n\n    return 0;\n}"
        ]
    },
    {
        "id": "405",
        "prompt": "Write a function to check whether an element exists within a tuple.",
        "solution": "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False",
        "test": [
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
        ],
        "code": [
            "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False"
        ],
        "draft_plan": [
            "# Iterate through each element in the tuple\n    # Check if the current element is equal to the target element\n        # If it is, return True\n\n# If the target element is not found in the tuple, return False"
        ],
        "requirements": [
            "import java.util.*;\n\npublic class TupleExample {\n    \n    public static <T> boolean elementExists(Tuple<T> tuple, T target) {\n        for (T element : tuple) {\n            if (element.equals(target)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    public static void main(String[] args) {\n        Tuple<Integer> tuple = new Tuple<>(1, 2, 3, 4, 5);\n        int target = 3;\n        boolean exists = elementExists(tuple, target);\n        System.out.println(\"Element exists: \" + exists);\n    }\n}\n\nclass Tuple<T> implements Iterable<T> {\n    private final List<T> elements;\n    \n    public Tuple(T... elements) {\n        this.elements = Arrays.asList(elements);\n    }\n    \n    @Override\n    public Iterator<T> iterator() {\n        return elements.iterator();\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <tuple>\n\ntemplate <typename T, typename... Ts>\nbool elementExists(const std::tuple<Ts...>& tuple, const T& target) {\n    return elementExistsHelper(tuple, target, std::index_sequence_for<Ts...>());\n}\n\ntemplate <typename T, typename... Ts, std::size_t... Is>\nbool elementExistsHelper(const std::tuple<Ts...>& tuple, const T& target, std::index_sequence<Is...>) {\n    return ((std::get<Is>(tuple) == target) || ...);\n}\n\nint main() {\n    std::tuple<int, char, double> myTuple(1, 'a', 3.14);\n    \n    std::cout << elementExists(myTuple, 'a') << std::endl; // Output: 1 (true)\n    std::cout << elementExists(myTuple, 2) << std::endl;   // Output: 0 (false)\n    \n    return 0;\n}"
        ]
    },
    {
        "id": "406",
        "prompt": "Write a python function to find whether the parity of a given number is odd.",
        "solution": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False",
        "test": [
            "assert find_Parity(12) == False",
            "assert find_Parity(7) == True",
            "assert find_Parity(10) == False"
        ],
        "code": [
            "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False"
        ],
        "draft_plan": [
            "# Check if the given number modulo 2 is equal to 1\n    # If yes, return True (the parity is odd)\n    # If no, return False (the parity is even)"
        ],
        "requirements": [
            "public class ParityChecker {\n    public static boolean isOddParity(int number) {\n        return number % 2 == 1;\n    }\n}"
        ],
        "final_plan": [
            "bool isOddParity(int num) {\n    if (num % 2 == 1) {\n        return true;\n    }\n    return false;\n}"
        ]
    },
    {
        "id": "407",
        "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "solution": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False",
        "test": [
            "assert rearrange_bigger(12)==21",
            "assert rearrange_bigger(10)==False",
            "assert rearrange_bigger(102)==120"
        ],
        "code": [
            "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False"
        ],
        "draft_plan": [
            "# Convert the given number to a list of digits\n\n# Find the index of the first digit that is smaller than the digit on its right side\n    # If no such digit is found, return -1 indicating that it is not possible to create a bigger number\n\n# Find the smallest digit on the right side of the digit found in the previous step that is greater than the digit itself\n\n# Swap the two digits found in the previous steps\n\n# Reverse the digits after the index found in the first step\n\n# Convert the list of digits back to an integer and return it as the next bigger number"
        ],
        "requirements": [
            "import java.util.Arrays;\nimport java.util.List;\n\npublic class NextBiggerNumber {\n    public static int nextBiggerNumber(int num) {\n        // Convert the given number to a list of digits\n        List<Integer> digits = getDigits(num);\n\n        // Find the index of the first digit that is smaller than the digit on its right side\n        int i = findFirstSmallerDigit(digits);\n\n        // If no such digit is found, return -1 indicating that it is not possible to create a bigger number\n        if (i == -1) {\n            return -1;\n        }\n\n        // Find the smallest digit on the right side of the digit found in the previous step that is greater than the digit itself\n        int j = findSmallestGreaterDigit(digits, i);\n\n        // Swap the two digits found in the previous steps\n        swap(digits, i, j);\n\n        // Reverse the digits after the index found in the first step\n        reverse(digits, i + 1, digits.size() - 1);\n\n        // Convert the list of digits back to an integer and return it as the next bigger number\n        return getNumber(digits);\n    }\n\n    private static List<Integer> getDigits(int num) {\n        String numString = String.valueOf(num);\n        return Arrays.asList(numString.chars().map(Character::getNumericValue).boxed().toArray(Integer[]::new));\n    }\n\n    private static int findFirstSmallerDigit(List<Integer> digits) {\n        for (int i = digits.size() - 2; i >= 0; i--) {\n            if (digits.get(i) < digits.get(i + 1)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    private static int findSmallestGreaterDigit(List<Integer> digits, int index) {\n        int digit = digits.get(index);\n        for (int i = digits.size() - 1; i > index; i--) {\n            if (digits.get(i) > digit) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    private static void swap(List<Integer> digits, int i, int j) {\n        int temp = digits.get(i);\n        digits.set(i, digits.get(j));\n        digits.set(j, temp);\n    }\n\n    private static void reverse(List<Integer> digits, int start, int end) {\n        while (start < end) {\n            swap(digits, start, end);\n            start++;\n            end--;\n        }\n    }\n\n    private static int getNumber(List<Integer> digits) {\n        StringBuilder numString = new StringBuilder();\n        for (Integer digit : digits) {\n            numString.append(digit);\n        }\n        return Integer.parseInt(numString.toString());\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\n\nint getNextBiggerNumber(int num) {\n    // Convert the given number to a vector of digits\n    vector<int> digits;\n    while (num > 0) {\n        digits.push_back(num % 10);\n        num /= 10;\n    }\n    \n    int n = digits.size();\n    \n    // Find the index of the first digit that is smaller than the digit on its right side\n    int i;\n    for (i = n - 2; i >= 0; i--) {\n        if (digits[i] < digits[i+1]) {\n            break;\n        }\n    }\n    \n    // If no such digit is found, return -1 indicating that it is not possible to create a bigger number\n    if (i < 0) {\n        return -1;\n    }\n    \n    // Find the smallest digit on the right side of the digit found in the previous step that is greater than the digit itself\n    int j;\n    for (j = n - 1; j > i; j--) {\n        if (digits[j] > digits[i]) {\n            break;\n        }\n    }\n    \n    // Swap the two digits found in the previous steps\n    swap(digits[i], digits[j]);\n    \n    // Reverse the digits after the index found in the first step\n    reverse(digits.begin() + i + 1, digits.end());\n    \n    // Convert the vector of digits back to an integer and return it as the next bigger number\n    int nextBiggerNumber = 0;\n    for (int digit : digits) {\n        nextBiggerNumber = nextBiggerNumber * 10 + digit;\n    }\n    \n    return nextBiggerNumber;\n}"
        ]
    },
    {
        "id": "408",
        "prompt": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.",
        "solution": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs",
        "test": [
            "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
        ],
        "code": [
            "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs"
        ],
        "draft_plan": [
            "# Create an empty list to store the pairs\n\n# Sort the first and second arrays in ascending order\n\n# Iterate through each element in the first array\n    # Iterate through each element in the second array\n        # Create a pair with the current elements from the first and second array\n        # Append the pair to the list of pairs\n\n# Sort the list of pairs in ascending order based on the sum of the pair elements\n\n# Return the first k number of pairs from the sorted list"
        ],
        "requirements": [
            "import java.util.*;\n\nclass Pair {\n    int first;\n    int second;\n\n    public Pair(int first, int second) {\n        this.first = first;\n        this.second = second;\n    }\n}\n\npublic class SmallestPairs {\n    public static List<Pair> findSmallestPairs(int[] arr1, int[] arr2, int k) {\n        List<Pair> pairs = new ArrayList<>();\n\n        // Sort the arrays in ascending order\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n\n        // Create pairs with one element from each array\n        for (int i = 0; i < arr1.length; i++) {\n            for (int j = 0; j < arr2.length; j++) {\n                Pair pair = new Pair(arr1[i], arr2[j]);\n                pairs.add(pair);\n            }\n        }\n\n        // Sort the pairs based on the sum of the elements\n        Collections.sort(pairs, Comparator.comparingInt(pair -> pair.first + pair.second));\n\n        // Return the first k smallest pairs\n        return pairs.subList(0, Math.min(k, pairs.size()));\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<pair<int, int>> findKSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {\n    vector<pair<int, int>> result;\n    \n    sort(nums1.begin(), nums1.end());\n    sort(nums2.begin(), nums2.end());\n    \n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            result.push_back(make_pair(nums1[i], nums2[j]));\n        }\n    }\n    \n    sort(result.begin(), result.end(), [](const pair<int, int>& a, const pair<int, int>& b) {\n        return a.first + a.second < b.first + b.second;\n    });\n    \n    return vector<pair<int, int>>(result.begin(), result.begin() + min(k, int(result.size())));\n}"
        ]
    },
    {
        "id": "409",
        "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.",
        "solution": "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min",
        "test": [
            "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
            "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
            "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
        ],
        "code": [
            "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min"
        ],
        "draft_plan": [
            "# Set the minimum_product variable to positive infinity\n\n# Iterate through each pair of tuples in the given list\n    # Calculate the product of the two tuples\n    # If the product is less than the current minimum_product\n        # Update the minimum_product variable with the new minimum value\n\n# Return the minimum_product variable"
        ],
        "requirements": [
            "import java.util.List;\nimport java.util.ArrayList;\n\npublic class MinimumProduct {\n    public static int minimumProduct(List<List<Integer>> tuples) {\n        int minimumProduct = Integer.MAX_VALUE;\n        \n        for (List<Integer> tuple : tuples) {\n            int product = tuple.get(0) * tuple.get(1);\n            if (product < minimumProduct) {\n                minimumProduct = product;\n            }\n        }\n        \n        return minimumProduct;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <limits>\n\nint findMinimumProduct(std::vector<std::pair<int, int>>& tuples) {\n    int minimum_product = std::numeric_limits<int>::max();\n    \n    for (const auto& tuple : tuples) {\n        int product = tuple.first * tuple.second;\n        if (product < minimum_product) {\n            minimum_product = product;\n        }\n    }\n    \n    return minimum_product;\n}"
        ]
    },
    {
        "id": "410",
        "prompt": "Write a function to find the minimum value in a given heterogeneous list.",
        "solution": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val",
        "test": [
            "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
            "assert min_val(['Python', 15, 20, 25])==15",
            "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
        ],
        "code": [
            "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val"
        ],
        "draft_plan": [
            "# Initialize the minimum value to infinity\n\n# Iterate through each element in the list\n    # Check if the current element is less than the minimum value\n        # If it is, update the minimum value with the current element\n\n# Return the minimum value"
        ],
        "requirements": [
            "import java.util.List;\n\npublic class MinimumValueFinder {\n    \n    public static Comparable findMinimumValue(List<Comparable> list) {\n        Comparable minValue = null;\n        \n        for (Comparable element : list) {\n            if (minValue == null || element.compareTo(minValue) < 0) {\n                minValue = element;\n            }\n        }\n        \n        return minValue;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <limits>\n\ntemplate <typename T>\nT findMinimum(const std::vector<T>& list) {\n    T minimum = std::numeric_limits<T>::infinity();\n    for (const auto& element : list) {\n        if (element < minimum) {\n            minimum = element;\n        }\n    }\n    return minimum;\n}"
        ]
    },
    {
        "id": "411",
        "prompt": "Write a function to convert the given snake case string to camel case string.",
        "solution": "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "test": [
            "assert snake_to_camel('android_tv') == 'AndroidTv'",
            "assert snake_to_camel('google_pixel') == 'GooglePixel'",
            "assert snake_to_camel('apple_watch') == 'AppleWatch'"
        ],
        "code": [
            "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))"
        ],
        "draft_plan": [
            "# Split the snake case string into words using the '_' delimiter\n# Initialize an empty list to store the words in camel case\n\n# Iterate through each word in the snake case string\n    # Capitalize the first letter of the word and concatenate it with the rest of the word\n    # Append the converted word to the camel case list\n\n# Join the words in the camel case list and return the camel case string"
        ],
        "requirements": [
            "import java.util.*;\n\nclass SnakeToCamel {\n    public static String snakeToCamel(String snakeCase) {\n        String[] words = snakeCase.split(\"_\");\n        List<String> camelCaseList = new ArrayList<>();\n\n        for (String word : words) {\n            String camelCaseWord = Character.toUpperCase(word.charAt(0)) + word.substring(1);\n            camelCaseList.add(camelCaseWord);\n        }\n\n        return String.join(\"\", camelCaseList);\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <sstream>\n\nstd::string snakeToCamel(const std::string& snakeCase) {\n    std::vector<std::string> words;\n    std::stringstream ss(snakeCase);\n    std::string word;\n    \n    while (getline(ss, word, '_')) {\n        words.push_back(word);\n    }\n    \n    std::string camelCase;\n    \n    for (int i = 0; i < words.size(); i++) {\n        if (i == 0) {\n            camelCase += words[i];\n        } else {\n            camelCase += toupper(words[i][0]) + words[i].substr(1);\n        }\n    }\n    \n    return camelCase;\n}"
        ]
    },
    {
        "id": "412",
        "prompt": "Write a python function to remove odd numbers from a given list.",
        "solution": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
        "test": [
            "assert remove_odd([1,2,3]) == [2]",
            "assert remove_odd([2,4,6]) == [2,4,6]",
            "assert remove_odd([10,20,3]) == [10,20]"
        ],
        "code": [
            "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l"
        ],
        "draft_plan": [
            "# Create an empty list to store the even numbers\n\n# Iterate through each number in the given list\n    # Check if the current number is even (number % 2 == 0)\n        # If the number is even, append it to the new list\n\n# Return the new list containing only the even numbers"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class RemoveOddNumbers {\n    public static List<Integer> removeOddNumbers(List<Integer> numbers) {\n        List<Integer> evenNumbers = new ArrayList<>();\n        for (int number : numbers) {\n            if (number % 2 == 0) {\n                evenNumbers.add(number);\n            }\n        }\n        return evenNumbers;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nstd::vector<int> removeOddNumbers(std::vector<int> numbers) {\n    std::vector<int> evenNumbers;\n    \n    for (int number : numbers) {\n        if (number % 2 == 0) {\n            evenNumbers.push_back(number);\n        }\n    }\n    \n    return evenNumbers;\n}"
        ]
    },
    {
        "id": "413",
        "prompt": "Write a function to extract the nth element from a given list of tuples.",
        "solution": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result",
        "test": [
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
        ],
        "code": [
            "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result"
        ],
        "draft_plan": [
            "# Define a function that takes the list of tuples and the value of n as parameters\n\n    # Initialize an empty list to store the nth elements\n    \n    # Iterate through each tuple in the list\n    \n        # Check if the tuple has at least n elements\n        \n            # Append the nth element to the list of nth elements\n    \n    # Return the list of nth elements"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TupleExtractor {\n    public static <T> List<T> extractNthElement(List<Tuple<T>> tuples, int n) {\n        List<T> nthElements = new ArrayList<>();\n        \n        for (Tuple<T> tuple : tuples) {\n            if (tuple.size() >= n) {\n                nthElements.add(tuple.get(n - 1));\n            }\n        }\n        \n        return nthElements;\n    }\n}\n\nclass Tuple<T> {\n    private List<T> elements;\n    \n    public Tuple(List<T> elements) {\n        this.elements = elements;\n    }\n    \n    public int size() {\n        return elements.size();\n    }\n    \n    public T get(int index) {\n        return elements.get(index);\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> extractNthElement(const vector<pair<int, int>>& tuples, int n) {\n    vector<int> nthElements;\n    \n    for (const auto& tuple : tuples) {\n        if (tuple.second >= n) {\n            nthElements.push_back(tuple.first);\n        }\n    }\n    \n    return nthElements;\n}"
        ]
    },
    {
        "id": "414",
        "prompt": "Write a python function to check whether any value in a sequence exists in a sequence or not.",
        "solution": "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False",
        "test": [
            "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
            "assert overlapping([1,2,3],[4,5,6]) == False",
            "assert overlapping([1,4,5],[1,4,5]) == True"
        ],
        "code": [
            "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False"
        ],
        "draft_plan": [
            "# Iterate through each value in the first sequence\n    # Check if the current value exists in the second sequence\n        # If a match is found, return True\n\n# If no match is found, return False"
        ],
        "requirements": [
            "import java.util.HashSet;\nimport java.util.Set;\n\npublic class ValueExistsInSequence {\n    public static <T> boolean valueExists(T[] sequence1, T[] sequence2) {\n        Set<T> set = new HashSet<>();\n        for (T value : sequence2) {\n            set.add(value);\n        }\n        \n        for (T value : sequence1) {\n            if (set.contains(value)) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n}"
        ],
        "final_plan": [
            "template <typename T>\nbool checkValueExistence(const std::vector<T>& seq1, const std::vector<T>& seq2) {\n    for (const auto& value : seq1) {\n        if (std::find(seq2.begin(), seq2.end(), value) != seq2.end()) {\n            return true;\n        }\n    }\n    return false;\n}"
        ]
    },
    {
        "id": "415",
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.",
        "solution": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ",
        "test": [
            "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
            "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
            "assert max_Product([1,2,3]) == (2,3)"
        ],
        "code": [
            "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    "
        ],
        "draft_plan": [
            "# Initialize the maximum product to be the minimum possible value\n\n# Iterate through each pair of numbers in the array\n    # Calculate the product of the current pair\n    # Update the maximum product if the current product is greater than the maximum product\n\n# Return the maximum product"
        ],
        "requirements": [
            "```java\npublic class PairWithHighestProduct {\n    public static int findHighestProduct(int[] nums) {\n        int n = nums.length;\n        int maxProduct = Integer.MIN_VALUE;\n        \n        for (int i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n                int product = nums[i] * nums[j];\n                maxProduct = Math.max(maxProduct, product);\n            }\n        }\n        \n        return maxProduct;\n    }\n}\n```"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\npair<int, int> findPairWithHighestProduct(vector<int> nums) {\n    int n = nums.size();\n    if (n < 2) {\n        return make_pair(-1, -1);\n    }\n\n    int maxProduct = INT_MIN;\n    pair<int, int> result;\n\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            int product = nums[i] * nums[j];\n            if (product > maxProduct) {\n                maxProduct = product;\n                result = make_pair(nums[i], nums[j]);\n            }\n        }\n    }\n\n    return result;\n}"
        ]
    },
    {
        "id": "417",
        "prompt": "Write a function to find common first element in given list of tuple.",
        "solution": "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] ",
        "test": [
            "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
            "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
            "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
        ],
        "code": [
            "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] "
        ],
        "draft_plan": [
            "# Initialize a set to store the common first elements\n\n# Iterate through each tuple in the list\n    # Check if the first element of the current tuple is already in the set\n        # If yes, continue to the next tuple\n        # If no, add the first element to the set\n\n# Return the common first element if found, otherwise return None"
        ],
        "requirements": [
            "import java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class CommonFirstElement {\n    public static <T> T findCommonFirstElement(List<Tuple<T>> tuples) {\n        Set<T> commonFirstElements = new HashSet<>();\n\n        for (Tuple<T> tuple : tuples) {\n            T firstElement = tuple.getFirst();\n            if (commonFirstElements.contains(firstElement)) {\n                continue;\n            } else {\n                commonFirstElements.add(firstElement);\n            }\n        }\n\n        if (commonFirstElements.size() > 0) {\n            return commonFirstElements.iterator().next();\n        } else {\n            return null;\n        }\n    }\n\n    public static class Tuple<T> {\n        private T first;\n        private T second;\n\n        public Tuple(T first, T second) {\n            this.first = first;\n            this.second = second;\n        }\n\n        public T getFirst() {\n            return first;\n        }\n\n        public T getSecond() {\n            return second;\n        }\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <unordered_set>\nusing namespace std;\n\nint findCommonFirstElement(vector<pair<int, int>>& tuples) {\n    unordered_set<int> commonFirstElements;\n    \n    for (auto tuple : tuples) {\n        int firstElement = tuple.first;\n        \n        if (commonFirstElements.count(firstElement) > 0) {\n            continue;\n        }\n        \n        commonFirstElements.insert(firstElement);\n    }\n    \n    if (!commonFirstElements.empty()) {\n        return *(commonFirstElements.begin());\n    }\n    \n    return -1; // Return -1 if no common first element found\n}"
        ]
    },
    {
        "id": "418",
        "prompt": "Write a python function to find the element of a list having maximum length.",
        "solution": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList",
        "test": [
            "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
            "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
            "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
        ],
        "code": [
            "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList"
        ],
        "draft_plan": [
            "# Initialize a variable to store the maximum length\n# Iterate through each element in the list\n    # Check if the length of the current element is greater than the maximum length\n        # If so, update the maximum length and store the current element\n\n# Return the element with the maximum length"
        ],
        "requirements": [
            "import java.util.List;\n\npublic class MaxLengthElement {\n    public static <T> T maxLengthElement(List<T> list) {\n        T maxLengthElement = null;\n        int maxLength = 0;\n\n        for (T element : list) {\n            int length = element.toString().length();\n            if (length > maxLength) {\n                maxLength = length;\n                maxLengthElement = element;\n            }\n        }\n\n        return maxLengthElement;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string findMaxElement(std::vector<std::string> arr) {\n    std::string maxElement = \"\";\n    int maxLength = 0;\n\n    for (const auto& element : arr) {\n        if (element.length() > maxLength) {\n            maxLength = element.length();\n            maxElement = element;\n        }\n    }\n\n    return maxElement;\n}"
        ]
    },
    {
        "id": "419",
        "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
        "solution": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum",
        "test": [
            "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
            "assert round_and_sum([5,2,9,24.3,29])==345",
            "assert round_and_sum([25.0,56.7,89.2])==513"
        ],
        "code": [
            "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum"
        ],
        "draft_plan": [
            "# Initialize a variable to store the total sum\n\n# Iterate through each number in the given list\n    # Round the current number using the round() function\n    # Add the rounded number to the total sum\n\n# Multiply the total sum by the length of the list\n\n# Print the final result"
        ],
        "requirements": [
            "import java.util.List;\n\npublic class NumberRounder {\n    public static double roundAndMultiply(List<Double> numbers) {\n        double totalSum = 0;\n        \n        for (double number : numbers) {\n            double roundedNumber = Math.round(number);\n            totalSum += roundedNumber;\n        }\n        \n        return totalSum * numbers.size();\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <cmath>\n\nint roundAndMultiplySum(std::vector<double> numbers) {\n    double sum = 0;\n\n    for (double num : numbers) {\n        sum += std::round(num);\n    }\n\n    return sum * numbers.size();\n}"
        ]
    },
    {
        "id": "420",
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
        "solution": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
        "test": [
            "assert cube_Sum(2) == 72",
            "assert cube_Sum(3) == 288",
            "assert cube_Sum(4) == 800"
        ],
        "code": [
            "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum"
        ],
        "draft_plan": [
            "# Initialize the sum variable to 0\n\n# Iterate through the even natural numbers from 2 to n (inclusive)\n    # Calculate the cube of the current number and add it to the sum\n\n# Return the sum of the cube of the first n even natural numbers"
        ],
        "requirements": [
            "public class CubeSum {\n    public static int getCubeSum(int n) {\n        int sum = 0;\n        for (int i = 2; i <= 2 * n; i += 2) {\n            sum += i * i * i;\n        }\n        return sum;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\nint cubeSumOfEvenNumbers(int n) {\n    int sum = 0;\n    for (int i = 2; i <= 2*n; i += 2) {\n        sum += i * i * i;\n    }\n    return sum;\n}"
        ]
    },
    {
        "id": "421",
        "prompt": "Write a function to concatenate each element of tuple by the delimiter.",
        "solution": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ",
        "test": [
            "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
            "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
            "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
        ],
        "code": [
            "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) "
        ],
        "draft_plan": [
            "# Initialize an empty list to store the concatenated elements\n\n# Iterate through each tuple in the input list\n    # Join the elements of the tuple using the delimiter and append it to the list\n\n# Convert the list to a string by joining its elements using an empty string as delimiter\n\n# Return the concatenated string"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TupleConcatenation {\n    public static String concatenate(List<Tuple> tuples, String delimiter) {\n        List<String> concatenatedElements = new ArrayList<>();\n\n        for (Tuple tuple : tuples) {\n            String concatenatedTuple = String.join(delimiter, tuple.getElements());\n            concatenatedElements.add(concatenatedTuple);\n        }\n\n        return String.join(\"\", concatenatedElements);\n    }\n\n    public static class Tuple {\n        private String[] elements;\n\n        public Tuple(String... elements) {\n            this.elements = elements;\n        }\n\n        public String[] getElements() {\n            return elements;\n        }\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nstring concatenateTupleElements(vector<tuple<string, string, string>> tuples, string delimiter) {\n    vector<string> concatenatedElements;\n    \n    for (auto tuple : tuples) {\n        string concatenated = get<0>(tuple) + delimiter + get<1>(tuple) + delimiter + get<2>(tuple);\n        concatenatedElements.push_back(concatenated);\n    }\n    \n    stringstream ss;\n    copy(concatenatedElements.begin(), concatenatedElements.end(), ostream_iterator<string>(ss, \"\"));\n    string concatenatedString = ss.str();\n    \n    return concatenatedString;\n}"
        ]
    },
    {
        "id": "422",
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.",
        "solution": "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) ",
        "test": [
            "assert find_Average_Of_Cube(2) == 4.5",
            "assert find_Average_Of_Cube(3) == 12",
            "assert find_Average_Of_Cube(1) == 1"
        ],
        "code": [
            "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) "
        ],
        "draft_plan": [
            "# Initialize a variable `sum_cubes` to store the sum of cubes of the first n natural numbers\n# Iterate from 1 to n (inclusive) using a for loop\n    # Calculate the cube of the current number and add it to the `sum_cubes` variable\n\n# Calculate the average by dividing the `sum_cubes` by n\n\n# Return the average"
        ],
        "requirements": [
            "import java.util.Scanner;\n\npublic class AverageOfCubes {\n    public static double averageOfCubes(int n) {\n        double sumCubes = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            sumCubes += Math.pow(i, 3);\n        }\n        \n        double average = sumCubes / n;\n        \n        return average;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\ndouble averageOfCubes(int n) {\n    double sum_cubes = 0.0;\n    \n    for (int i = 1; i <= n; i++) {\n        sum_cubes += pow(i, 3);\n    }\n    \n    double average = sum_cubes / n;\n    return average;\n}"
        ]
    },
    {
        "id": "424",
        "prompt": "Write a function to extract only the rear index element of each string in the given tuple.",
        "solution": "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) ",
        "test": [
            "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
            "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
            "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
        ],
        "code": [
            "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) "
        ],
        "draft_plan": [
            "# Create an empty list to store the extracted rear index elements\n\n# Iterate through each string in the given tuple\n    # Extract the rear index element from the current string and append it to the list\n\n# Return the list of extracted rear index elements"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static List<Character> extractRearIndexElements(List<String> tuple) {\n        List<Character> rearIndexElements = new ArrayList<>();\n        \n        for (String str : tuple) {\n            int lastIndex = str.length() - 1;\n            char rearIndexElement = str.charAt(lastIndex);\n            rearIndexElements.add(rearIndexElement);\n        }\n        \n        return rearIndexElements;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<char> extractRearIndexElements(const vector<string>& strings) {\n    vector<char> rearIndexElements;\n    for (const string& str : strings) {\n        rearIndexElements.push_back(str.back());\n    }\n    return rearIndexElements;\n}"
        ]
    },
    {
        "id": "425",
        "prompt": "Write a function to count the number of sublists containing a particular element.",
        "solution": "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr",
        "test": [
            "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
            "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
            "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
        ],
        "code": [
            "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr"
        ],
        "draft_plan": [
            "# Initialize a count variable to 0\n\n# Iterate through each sublist in the main list\n    # Check if the particular element is present in the sublist\n        # If the element is present, increment the count variable\n\n# Return the count variable"
        ],
        "requirements": [
            "import java.util.List;\n\npublic class SublistCount {\n    public static <T> int countSublistsContainingElement(List<List<T>> mainList, T element) {\n        int count = 0;\n        \n        for (List<T> sublist : mainList) {\n            if (sublist.contains(element)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint countSublists(vector<vector<int>>& mainList, int element) {\n    int count = 0;\n    for (int i = 0; i < mainList.size(); i++) {\n        for (int j = 0; j < mainList[i].size(); j++) {\n            if (mainList[i][j] == element) {\n                count++;\n                break;\n            }\n        }\n    }\n    return count;\n}"
        ]
    },
    {
        "id": "426",
        "prompt": "Write a function to filter odd numbers.",
        "solution": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums",
        "test": [
            "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
            "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
            "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
        ],
        "code": [
            "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums"
        ],
        "draft_plan": [
            "# Initialize an empty list to store the filtered numbers\n\n# Iterate through each number in the input list\n    # Check if the number is odd\n        # If the number is odd, append it to the filtered list\n\n# Return the filtered list of odd numbers"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class OddNumberFilter {\n    public static List<Integer> filterOddNumbers(List<Integer> numbers) {\n        List<Integer> filteredNumbers = new ArrayList<>();\n        \n        for (int number : numbers) {\n            if (number % 2 != 0) {\n                filteredNumbers.add(number);\n            }\n        }\n        \n        return filteredNumbers;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nstd::vector<int> filterOddNumbers(const std::vector<int>& numbers) {\n    std::vector<int> filteredNumbers;\n    for (int number : numbers) {\n        if (number % 2 != 0) {\n            filteredNumbers.push_back(number);\n        }\n    }\n    return filteredNumbers;\n}"
        ]
    },
    {
        "id": "427",
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
        "solution": "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)",
        "test": [
            "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
            "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
            "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
        ],
        "code": [
            "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"
        ],
        "draft_plan": [
            "# Split the input date by the '-' delimiter to get year, month, and day\n# Create a new date string by rearranging the parts in the desired format (dd-mm-yyyy)\n# Return the new date string"
        ],
        "requirements": [
            "public class DateConverter {\n    public static String convertDate(String date) {\n        String[] parts = date.split(\"-\");\n        String day = parts[2];\n        String month = parts[1];\n        String year = parts[0];\n        return day + \"-\" + month + \"-\" + year;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <sstream>\n#include <string>\n\nstd::string convertDateFormat(const std::string& date) {\n    std::stringstream ss(date);\n    std::string year, month, day;\n    std::getline(ss, year, '-');\n    std::getline(ss, month, '-');\n    std::getline(ss, day, '-');\n    \n    return day + \"-\" + month + \"-\" + year;\n}"
        ]
    },
    {
        "id": "428",
        "prompt": "Write a function to sort the given array by using shell sort.",
        "solution": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list",
        "test": [
            "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
            "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
            "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
        ],
        "code": [
            "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list"
        ],
        "draft_plan": [
            "# Define a function called shell_sort that takes an array as input\n    # Find the length of the array\n    # Define a variable called gap and set it to half the length of the array\n\n    # Iterate until the gap becomes 0\n        # Iterate through the array starting from gap and going until the end\n            # Define a variable called current_value and set it as the current element\n\n            # Define a variable called position and set it as the current index\n\n            # While the position is greater than or equal to the gap and the element at position-gap is greater than the current value\n                # Set the element at position as the element at position-gap\n                # Decrease the position by the gap\n\n            # Set the element at the final position as the current value\n\n        # Divide the gap by 2\n\n# Call the shell_sort function passing the array as input"
        ],
        "requirements": [
            "public class ShellSort {\n    public static void shellSort(int[] arr) {\n        int n = arr.length;\n        int gap = n / 2;\n        \n        while (gap > 0) {\n            for (int i = gap; i < n; i++) {\n                int current_value = arr[i];\n                int position = i;\n                \n                while (position >= gap && arr[position - gap] > current_value) {\n                    arr[position] = arr[position - gap];\n                    position -= gap;\n                }\n                \n                arr[position] = current_value;\n            }\n            \n            gap /= 2;\n        }\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\nvoid shellSort(int arr[], int n) {\n    for (int gap = n / 2; gap > 0; gap /= 2) {\n        for (int i = gap; i < n; i++) {\n            int temp = arr[i];\n            int j;\n            for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) {\n                arr[j] = arr[j - gap];\n            }\n            arr[j] = temp;\n        }\n    }\n}"
        ]
    },
    {
        "id": "429",
        "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "solution": "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "test": [
            "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
            "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
            "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
        ],
        "code": [
            "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) "
        ],
        "draft_plan": [
            "# Create an empty list to store the elementwise AND tuples\n\n# Iterate through the elements of the two input tuples simultaneously\n    # Perform elementwise AND operation on the corresponding elements of the tuples\n    # Append the result to the list of elementwise AND tuples\n\n# Return the list of elementwise AND tuples"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TupleUtils {\n\n    public static List<Tuple> extractElementwiseAndTuples(List<Tuple> tuple1, List<Tuple> tuple2) {\n        List<Tuple> result = new ArrayList<>();\n\n        int size = Math.min(tuple1.size(), tuple2.size());\n        for (int i = 0; i < size; i++) {\n            Tuple t1 = tuple1.get(i);\n            Tuple t2 = tuple2.get(i);\n\n            int element1 = t1.getElement();\n            int element2 = t2.getElement();\n\n            int elementwiseAnd = element1 & element2;\n\n            Tuple andTuple = new Tuple(elementwiseAnd);\n            result.add(andTuple);\n        }\n\n        return result;\n    }\n}\n\nclass Tuple {\n    private int element;\n\n    public Tuple(int element) {\n        this.element = element;\n    }\n\n    public int getElement() {\n        return element;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <tuple>\n\nstd::vector<std::tuple<int, int>> extractElementwiseAndTuples(const std::tuple<int, int>& tuple1, const std::tuple<int, int>& tuple2) {\n    std::vector<std::tuple<int, int>> result;\n    \n    // Extract the elements from the input tuples\n    int a1 = std::get<0>(tuple1);\n    int b1 = std::get<1>(tuple1);\n    int a2 = std::get<0>(tuple2);\n    int b2 = std::get<1>(tuple2);\n    \n    // Perform elementwise AND operation and create tuples\n    std::tuple<int, int> andTuple1(a1 & a2, b1 & b2);\n    std::tuple<int, int> andTuple2(a1 & b2, b1 & a2);\n    \n    // Append the result tuples to the vector\n    result.push_back(andTuple1);\n    result.push_back(andTuple2);\n    \n    return result;\n}"
        ]
    },
    {
        "id": "430",
        "prompt": "Write a function to find the directrix of a parabola.",
        "solution": "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix",
        "test": [
            "assert parabola_directrix(5,3,2)==-198",
            "assert parabola_directrix(9,8,4)==-2336",
            "assert parabola_directrix(2,4,6)==-130"
        ],
        "code": [
            "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix"
        ],
        "draft_plan": [
            "To find the directrix of a parabola, we need to determine its equation and extract the value of the directrix. The equation of a parabola in vertex form is given by:\n\ny = a(x-h)^2 + k\n\nwhere (h, k) is the vertex of the parabola and a is a constant.\n\n# Function to find the directrix of a parabola\ndef find_directrix(a, h, k):\n    # Calculate the y-coordinate of the directrix\n    directrix = k - (1 / (4 * a))\n    return directrix\n\n# Example usage\na = 2\nh = 3\nk = 4\n\ndirectrix = find_directrix(a, h, k)\nprint(\"The directrix of the parabola is y =\", directrix)\n\nIn the above code, we define a function find_directrix that takes the constant a and the vertex coordinates (h, k) as input. The function calculates the y-coordinate of the directrix using the formula k - (1 / (4 * a)) and returns the result.\n\nIn the example usage, we provide some sample values for a, h, and k and call the find_directrix function to obtain the directrix of the parabola. Finally, we print the result."
        ],
        "requirements": [
            "Sure! Here's the Java code for finding the directrix of a parabola:\n\n```java\npublic class Parabola {\n    public static double findDirectrix(double a, double h, double k) {\n        double directrix = k - (1 / (4 * a));\n        return directrix;\n    }\n}\n```\n\nIn the above code, we have a class named `Parabola` with a static method `findDirectrix`. The method takes three parameters: `a` (the constant), `h` (the x-coordinate of the vertex), and `k` (the y-coordinate of the vertex).\n\nThe method calculates the y-coordinate of the directrix using the formula `k - (1 / (4 * a))` and returns the result.\n\nYou can call this method from your `main` method or any other method in your program to find the directrix of a parabola."
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\n// Function to find the directrix of a parabola\ndouble findDirectrix(double a, double h, double k) {\n    // Calculate the y-coordinate of the directrix\n    double directrix = k - (1 / (4 * a));\n    return directrix;\n}\n\n// Example usage\nint main() {\n    double a = 2.0;\n    double h = 3.0;\n    double k = 4.0;\n\n    double directrix = findDirectrix(a, h, k);\n    cout << \"The directrix of the parabola is y = \" << directrix << endl;\n\n    return 0;\n}\n\nIn the above code, we define a function findDirectrix that takes the constant a and the vertex coordinates (h, k) as input. The function calculates the y-coordinate of the directrix using the formula k - (1 / (4 * a)) and returns the result.\n\nIn the example usage, we provide some sample values for a, h, and k and call the findDirectrix function to obtain the directrix of the parabola. Finally, we print the result using the cout statement."
        ]
    },
    {
        "id": "431",
        "prompt": "Write a function that takes two lists and returns true if they have at least one common element.",
        "solution": "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result",
        "test": [
            "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
            "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
            "assert common_element(['a','b','c'], ['d','b','e'])==True"
        ],
        "code": [
            "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result"
        ],
        "draft_plan": [
            "# Convert the input lists to sets\n# Check if there is any common element between the two sets\n    # If there is a common element, return True\n    # If there is no common element, return False"
        ],
        "requirements": [
            "import java.util.HashSet;\nimport java.util.Set;\n\npublic class CommonElementChecker {\n    \n    public static boolean hasCommonElement(int[] list1, int[] list2) {\n        // Convert the input lists to sets\n        Set<Integer> set1 = new HashSet<>();\n        for (int num : list1) {\n            set1.add(num);\n        }\n        \n        // Check if there is any common element between the two sets\n        for (int num : list2) {\n            if (set1.contains(num)) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <unordered_set>\n#include <vector>\n\nusing namespace std;\n\nbool hasCommonElement(vector<int>& list1, vector<int>& list2) {\n    unordered_set<int> set1(list1.begin(), list1.end());\n    \n    for (int num : list2) {\n        if (set1.count(num) > 0) {\n            return true;\n        }\n    }\n    \n    return false;\n}"
        ]
    },
    {
        "id": "432",
        "prompt": "Write a function to find the median length of a trapezium.",
        "solution": "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median",
        "test": [
            "assert median_trapezium(15,25,35)==20",
            "assert median_trapezium(10,20,30)==15",
            "assert median_trapezium(6,9,4)==7.5"
        ],
        "code": [
            "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median"
        ],
        "draft_plan": [
            "To find the median length of a trapezium, you can use the following code logic:\n\n# Define a function to find the median length of a trapezium\ndef find_median_length(base1, base2, height):\n    # Calculate the median length by taking the average of the two bases\n    median_length = (base1 + base2) / 2\n    # Return the median length\n    return median_length\n\n# Test the function with some sample inputs\nprint(find_median_length(5, 7, 4))  # Output: 6.0\nprint(find_median_length(10, 12, 8))  # Output: 11.0\n\nIn this logic, we define a function find_median_length that takes three parameters: base1, base2, and height. The median length of a trapezium is calculated by taking the average of the two bases (base1 and base2). The calculated median length is then returned by the function.\n\nWe can test the function by calling it with some sample inputs and printing the output."
        ],
        "requirements": [
            "Sure! Here's the Java code logic to find the median length of a trapezium:\n\n```java\npublic class TrapeziumMedianLength {\n    public static double findMedianLength(double base1, double base2, double height) {\n        // Calculate the median length by taking the average of the two bases\n        double medianLength = (base1 + base2) / 2;\n        // Return the median length\n        return medianLength;\n    }\n}\n```\n\nIn this code, we define a class `TrapeziumMedianLength` with a static method `findMedianLength` that takes three parameters: `base1`, `base2`, and `height`. The median length of a trapezium is calculated by taking the average of the two bases (`base1` and `base2`). The calculated median length is then returned by the method.\n\nYou can use this class and method in your main program or any other program by calling `TrapeziumMedianLength.findMedianLength()` with appropriate arguments."
        ],
        "final_plan": [
            "#include <iostream>\n\ndouble findMedianLength(double base1, double base2, double height) {\n    // Calculate the median length by taking the average of the two bases\n    double medianLength = (base1 + base2) / 2;\n    // Return the median length\n    return medianLength;\n}\n\nint main() {\n    // Test the function with some sample inputs\n    std::cout << findMedianLength(5, 7, 4) << std::endl;  // Output: 6.0\n    std::cout << findMedianLength(10, 12, 8) << std::endl;  // Output: 11.0\n\n    return 0;\n}"
        ]
    },
    {
        "id": "433",
        "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "solution": "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]",
        "test": [
            "assert check_greater([1, 2, 3, 4, 5], 4) == False",
            "assert check_greater([2, 3, 4, 5, 6], 8) == True",
            "assert check_greater([9, 7, 4, 8, 6, 1], 11) == True"
        ],
        "code": [
            "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]"
        ],
        "draft_plan": [
            "# Define a function that takes a number and an array as input\n\n# Iterate through each element in the array\n    # Check if the number is greater than the current element\n        # If yes, return True\n\n# If the number is not greater than any element in the array, return False"
        ],
        "requirements": [
            "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool is_number_greater(int number, vector<int>& arr) {\n    for (int i = 0; i < arr.size(); i++) {\n        if (number > arr[i]) {\n            return true;\n        }\n    }\n    return false;\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nbool isGreaterThanElements(int number, const std::vector<int>& array) {\n    for (int element : array) {\n        if (number > element) {\n            return true;\n        }\n    }\n    return false;\n}"
        ]
    },
    {
        "id": "434",
        "prompt": "Write a function that matches a string that has an a followed by one or more b's.",
        "solution": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n",
        "test": [
            "assert text_match_one(\"ac\")==False",
            "assert text_match_one(\"dc\")==False",
            "assert text_match_one(\"abba\")==True"
        ],
        "code": [
            "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n"
        ],
        "draft_plan": [
            "import re\n\ndef match_string(string):\n    pattern = r'a+b+'\n    match = re.match(pattern, string)\n    \n    if match:\n        return \"Match found!\"\n    else:\n        return \"No match found!\""
        ],
        "requirements": [
            "import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class StringMatcher {\n    public static boolean matchString(String str) {\n        Pattern pattern = Pattern.compile(\"a+b+\");\n        Matcher matcher = pattern.matcher(str);\n        \n        return matcher.matches();\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <regex>\nusing namespace std;\n\nstring matchString(string str) {\n    regex pattern(\"a+b+\");\n    if (regex_match(str, pattern)) {\n        return \"Match found!\";\n    } else {\n        return \"No match found!\";\n    }\n}\n\nint main() {\n    string str = \"abb\";\n    cout << matchString(str) << endl;\n\n    return 0;\n}"
        ]
    },
    {
        "id": "435",
        "prompt": "Write a python function to find the last digit of a given number.",
        "solution": "def last_Digit(n) :\n    return (n % 10) ",
        "test": [
            "assert last_Digit(123) == 3",
            "assert last_Digit(25) == 5",
            "assert last_Digit(30) == 0"
        ],
        "code": [
            "def last_Digit(n) :\n    return (n % 10) "
        ],
        "draft_plan": [
            "To find the last digit of a given number, we can use the modulus operator `%` to get the remainder when the number is divided by 10. The remainder will be the last digit of the number.\n\nHere is the code logic:\n\n1. Define a function `find_last_digit` that takes a number as input.\n2. Inside the function, calculate the remainder of the number when divided by 10 using the modulus operator `%`.\n3. Return the calculated remainder as the last digit of the given number.\n\nHere is the code implementation:\n\n```python\ndef find_last_digit(number):\n    last_digit = number % 10\n    return last_digit\n```\n\nYou can now call the `find_last_digit` function with any number as its argument to find its last digit. For example:\n\n```python\nnumber = 12345\nlast_digit = find_last_digit(number)\nprint(\"Last digit:\", last_digit)\n```\n\nOutput:\n```\nLast digit: 5\n```"
        ],
        "requirements": [
            "Sure! Here's the Java code without the `main` method to find the last digit of a given number:\n\n```java\npublic class LastDigitFinder {\n    public static int findLastDigit(int number) {\n        int lastDigit = number % 10;\n        return lastDigit;\n    }\n}\n```\n\nYou can use this `LastDigitFinder` class in another Java class by creating an instance of it and calling the `findLastDigit` method. For example:\n\n```java\nint number = 12345;\nint lastDigit = LastDigitFinder.findLastDigit(number);\nSystem.out.println(\"Last digit: \" + lastDigit);\n```\n\nOutput:\n```\nLast digit: 5\n```"
        ],
        "final_plan": [
            "Here's the C++ code logic to find the last digit of a given number:\n\n```cpp\n#include <iostream>\n\nint findLastDigit(int number) {\n    int lastDigit = number % 10;\n    return lastDigit;\n}\n```\n\nYou can call the `findLastDigit` function with any number as its argument to find its last digit. For example:\n\n```cpp\nint number = 12345;\nint lastDigit = findLastDigit(number);\nstd::cout << \"Last digit: \" << lastDigit << std::endl;\n```\n\nOutput:\n```\nLast digit: 5\n```\n\nNote that in C++, you will need a `main` function to run the code."
        ]
    },
    {
        "id": "436",
        "prompt": "Write a python function to return the negative numbers in a list.",
        "solution": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ",
        "test": [
            "assert neg_nos([-1,4,5,-6]) == [-1,-6]",
            "assert neg_nos([-1,-2,3,4]) == [-1,-2]",
            "assert neg_nos([-7,-6,8,9]) == [-7,-6]"
        ],
        "code": [
            "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out "
        ],
        "draft_plan": [
            "# Initialize an empty list to store the negative numbers\n\n# Iterate through each number in the input list\n    # Check if the number is less than 0\n        # If it is negative, append it to the list of negative numbers\n\n# Return the list of negative numbers"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NegativeNumbers {\n\n    public static List<Integer> findNegativeNumbers(List<Integer> numbers) {\n        List<Integer> negativeNumbers = new ArrayList<>();\n\n        for (int number : numbers) {\n            if (number < 0) {\n                negativeNumbers.add(number);\n            }\n        }\n\n        return negativeNumbers;\n    }\n}"
        ],
        "final_plan": [
            "#include <vector>\n\nstd::vector<int> getNegativeNumbers(const std::vector<int>& nums) {\n    std::vector<int> negativeNumbers;\n\n    for (int num : nums) {\n        if (num < 0) {\n            negativeNumbers.push_back(num);\n        }\n    }\n\n    return negativeNumbers;\n}"
        ]
    },
    {
        "id": "437",
        "prompt": "Write a function to remove odd characters in a string.",
        "solution": "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2",
        "test": [
            "assert remove_odd(\"python\")==(\"yhn\")",
            "assert remove_odd(\"program\")==(\"rga\")",
            "assert remove_odd(\"language\")==(\"agae\")"
        ],
        "code": [
            "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2"
        ],
        "draft_plan": [
            "# Initialize an empty string to store the result\n\n# Iterate through each character in the input string\n    # Check if the index of the current character is even\n        # If it is even, append the character to the result string\n\n# Return the result string"
        ],
        "requirements": [
            "#include <iostream>\n#include <string>\n\nstd::string remove_odd_characters(std::string str) {\n    std::string result = \"\";\n    \n    for (int i = 0; i < str.length(); i++) {\n        if (i % 2 == 0) {\n            result += str[i];\n        }\n    }\n    \n    return result;\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\n\nstd::string removeOddCharacters(const std::string& str) {\n    std::string result = \"\";\n    for (int i = 0; i < str.length(); i++) {\n        if (i % 2 == 0) {\n            result += str[i];\n        }\n    }\n    return result;\n}"
        ]
    },
    {
        "id": "438",
        "prompt": "Write a function to count bidirectional tuple pairs.",
        "solution": "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res",
        "test": [
            "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3",
            "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2",
            "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4"
        ],
        "code": [
            "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res"
        ],
        "draft_plan": [
            "# Initialize a counter variable to 0\n\n# Iterate through each tuple in the array\n    # Check if the reverse of the current tuple is present in the array\n        # If yes, increment the counter by 1\n\n# Return the counter value"
        ],
        "requirements": [
            "#include <iostream>\n#include <vector>\n#include <unordered_set>\n#include <algorithm>\n\nusing namespace std;\n\nclass Tuple {\npublic:\n    int a;\n    int b;\n    \n    Tuple(int a, int b) : a(a), b(b) {}\n};\n\nint count_bidirectional_pairs(vector<Tuple>& arr) {\n    int count = 0;\n    unordered_set<string> tuples;\n    \n    for (const auto& tuple : arr) {\n        string forward = to_string(tuple.a) + \",\" + to_string(tuple.b);\n        string backward = to_string(tuple.b) + \",\" + to_string(tuple.a);\n        \n        if (tuples.count(backward)) {\n            count++;\n        }\n        \n        tuples.insert(forward);\n    }\n\n    return count;\n}\n"
        ],
        "final_plan": [
            "#include <iostream>\n#include <unordered_set>\n#include <utility>\n\nusing namespace std;\n\nint countBidirectionalPairs(pair<int, int> arr[], int n) {\n    int count = 0;\n    unordered_set<pair<int, int>> tuples;\n    \n    for (int i = 0; i < n; i++) {\n        tuples.insert(arr[i]);\n    }\n    \n    for (int i = 0; i < n; i++) {\n        pair<int, int> reverseTuple = make_pair(arr[i].second, arr[i].first);\n        if (tuples.find(reverseTuple) != tuples.end()) {\n            count++;\n        }\n    }\n    \n    return count;\n}"
        ]
    },
    {
        "id": "439",
        "prompt": "Write a function to join a list of multiple integers into a single integer.",
        "solution": "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x",
        "test": [
            "assert multiple_to_single([11, 33, 50])==113350",
            "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
            "assert multiple_to_single([10,15,20,25])==10152025"
        ],
        "code": [
            "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x"
        ],
        "draft_plan": [
            "# Convert each integer in the list to a string\n# Concatenate all the strings\n# Convert the concatenated string back to an integer and return it"
        ],
        "requirements": [
            "import java.util.List;\n\npublic class JoinIntegers {\n    public static int joinIntegers(List<Integer> integers) {\n        StringBuilder sb = new StringBuilder();\n        for (Integer integer : integers) {\n            sb.append(integer);\n        }\n        return Integer.parseInt(sb.toString());\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nint joinIntegers(vector<int> nums) {\n    stringstream ss;\n    for (int num : nums) {\n        ss << num;\n    }\n    int joinedInt;\n    ss >> joinedInt;\n    return joinedInt;\n}"
        ]
    },
    {
        "id": "440",
        "prompt": "Write a function to find the first adverb and their positions in a given sentence.",
        "solution": "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))",
        "test": [
            "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
            "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
            "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
        ],
        "code": [
            "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))"
        ],
        "draft_plan": [
            "# Split the sentence into a list of words\n\n# Iterate through each word and its index in the list\n    # Check if the word ends with \"ly\" to identify adverbs\n        # If an adverb is found, store its index in a list\n\n# Return the list of adverb positions"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class FirstAdverbFinder {\n\n    public static List<Integer> findFirstAdverb(String sentence) {\n        List<Integer> adverbPositions = new ArrayList<>();\n        String[] words = sentence.split(\" \");\n\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].endsWith(\"ly\")) {\n                adverbPositions.add(i);\n            }\n        }\n\n        return adverbPositions;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\n#include <vector>\n\nstd::vector<int> findAdverbPositions(std::string sentence) {\n    std::vector<int> adverbPositions;\n    \n    // Split the sentence into a list of words\n    std::vector<std::string> words;\n    std::string word = \"\";\n    for (char c : sentence) {\n        if (c == ' ') {\n            words.push_back(word);\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    words.push_back(word);\n    \n    // Iterate through each word and its index in the list\n    for (int i = 0; i < words.size(); i++) {\n        std::string currentWord = words[i];\n        \n        // Check if the word ends with \"ly\" to identify adverbs\n        if (currentWord.length() >= 2 && currentWord.substr(currentWord.length() - 2) == \"ly\") {\n            // If an adverb is found, store its index in the list\n            adverbPositions.push_back(i);\n        }\n    }\n    \n    return adverbPositions;\n}"
        ]
    },
    {
        "id": "441",
        "prompt": "Write a function to find the surface area of a cube of a given size.",
        "solution": "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea",
        "test": [
            "assert surfacearea_cube(5)==150",
            "assert surfacearea_cube(3)==54",
            "assert surfacearea_cube(10)==600"
        ],
        "code": [
            "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea"
        ],
        "draft_plan": [
            "# Calculate the surface area of a cube using the formula: 6 * (side_length ^ 2)\n\n# Define a function to calculate the surface area of a cube\n    # Accept the side length of the cube as a parameter\n    # Calculate the surface area using the formula\n    # Return the surface area\n\n# Test the function with a sample input"
        ],
        "requirements": [
            "public class CubeSurfaceArea {\n    public static int calculateSurfaceArea(int sideLength) {\n        int surfaceArea = 6 * (sideLength * sideLength);\n        return surfaceArea;\n    }\n}"
        ],
        "final_plan": [
            "class Cube {\npublic:\n    double surfaceArea(double sideLength) {\n        double area = 6 * (sideLength * sideLength);\n        return area;\n    }\n};"
        ]
    },
    {
        "id": "442",
        "prompt": "Write a function to find the ration of positive numbers in an array of integers.",
        "solution": "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)",
        "test": [
            "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
            "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
            "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
        ],
        "code": [
            "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)"
        ],
        "draft_plan": [
            "# Initialize a count variable to keep track of the number of positive numbers\n# Iterate through each number in the array\n    # Check if the number is greater than 0\n        # If so, increment the count variable\n\n# Calculate the ratio of positive numbers by dividing the count by the length of the array\n\n# Return the ratio"
        ],
        "requirements": [
            "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\ndouble positive_ratio(vector<int>& arr) {\n    int count = 0;\n    int n = arr.size();\n    \n    for (int i = 0; i < n; i++) {\n        if (arr[i] > 0) {\n            count++;\n        }\n    }\n    \n    double ratio = (double) count / n;\n    return ratio;\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\ndouble positiveNumberRatio(std::vector<int> nums) {\n    int count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] > 0) {\n            count++;\n        }\n    }\n    \n    double ratio = (double) count / nums.size();\n    return ratio;\n}"
        ]
    },
    {
        "id": "443",
        "prompt": "Write a python function to find the largest negative number from the given list.",
        "solution": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
        "test": [
            "assert largest_neg([1,2,3,-4,-6]) == -6",
            "assert largest_neg([1,2,3,-8,-9]) == -9",
            "assert largest_neg([1,2,3,4,-1]) == -1"
        ],
        "code": [
            "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max"
        ],
        "draft_plan": [
            "# Initialize a variable to store the largest negative number, set it to None initially\n\n# Iterate through each number in the list\n    # Check if the current number is negative\n        # If the largest negative number is None or the current number is greater than the largest negative number\n            # Update the largest negative number to the current number\n\n# Return the largest negative number"
        ],
        "requirements": [
            "import java.util.List;\n\npublic class LargestNegativeNumber {\n    public static Integer findLargestNegative(List<Integer> numbers) {\n        Integer largestNegative = null;\n        \n        for (Integer number : numbers) {\n            if (number < 0) {\n                if (largestNegative == null || number > largestNegative) {\n                    largestNegative = number;\n                }\n            }\n        }\n        \n        return largestNegative;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint largestNegativeNumber(vector<int>& nums) {\n    int largestNegative = INT_MIN;\n    \n    for (int num : nums) {\n        if (num < 0 && (largestNegative == INT_MIN || num > largestNegative)) {\n            largestNegative = num;\n        }\n    }\n    \n    return largestNegative;\n}\n"
        ]
    },
    {
        "id": "444",
        "prompt": "Write a function to trim each tuple by k in the given tuple list.",
        "solution": "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) ",
        "test": [
            "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
            "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
            "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
        ],
        "code": [
            "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) "
        ],
        "draft_plan": [
            "# Create an empty list to store the trimmed tuples\n\n# Iterate through each tuple in the given tuple list\n    # Trim each tuple by removing the first k elements and append the trimmed tuple to the new list\n\n# Return the new list of trimmed tuples"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TupleTrimmer {\n    public static List<Tuple> trimTuples(List<Tuple> tupleList, int k) {\n        List<Tuple> trimmedList = new ArrayList<>();\n\n        for (Tuple tuple : tupleList) {\n            Tuple trimmedTuple = new Tuple(tuple.subList(k, tuple.size()));\n            trimmedList.add(trimmedTuple);\n        }\n\n        return trimmedList;\n    }\n}\n\nclass Tuple extends ArrayList<Integer> {\n    public Tuple(List<Integer> elements) {\n        super(elements);\n    }\n}"
        ],
        "final_plan": [
            "#include <vector>\n#include <tuple>\n\nstd::vector<std::tuple<int, int, int>> trimTupleList(const std::vector<std::tuple<int, int, int>>& tupleList, int k) {\n    std::vector<std::tuple<int, int, int>> trimmedList;\n    for (const auto& tuple : tupleList) {\n        int a, b, c;\n        std::tie(a, b, c) = tuple;\n        trimmedList.emplace_back(a + k, b + k, c + k);\n    }\n    return trimmedList;\n}"
        ]
    },
    {
        "id": "445",
        "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
        "solution": "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "test": [
            "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
            "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
            "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
        ],
        "code": [
            "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) "
        ],
        "draft_plan": [
            "# Create an empty list to store the result\n\n# Iterate through each index of the tuples\n    # Multiply the elements at the current index of the two tuples\n    # Append the product to the result list\n\n# Convert the result list to a tuple and return it"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TupleMultiplication {\n    public static List<Integer> tupleMultiplication(List<Integer> tuple1, List<Integer> tuple2) {\n        List<Integer> result = new ArrayList<>();\n\n        int size = Math.min(tuple1.size(), tuple2.size());\n\n        for (int i = 0; i < size; i++) {\n            int product = tuple1.get(i) * tuple2.get(i);\n            result.add(product);\n        }\n\n        return result;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <tuple>\n#include <vector>\n\nusing namespace std;\n\ntuple<int, int, int> indexWiseMultiplication(const tuple<int, int, int>& tuple1, const tuple<int, int, int>& tuple2) {\n    vector<int> result;\n\n    result.push_back(get<0>(tuple1) * get<0>(tuple2));\n    result.push_back(get<1>(tuple1) * get<1>(tuple2));\n    result.push_back(get<2>(tuple1) * get<2>(tuple2));\n\n    return make_tuple(result[0], result[1], result[2]);\n}"
        ]
    },
    {
        "id": "446",
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.",
        "solution": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ",
        "test": [
            "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
            "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
            "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
        ],
        "code": [
            "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  "
        ],
        "draft_plan": [
            "# Initialize an empty dictionary to store the occurrence count\n# Iterate through each element in the list\n    # Check if the element is present in the tuple\n        # If present, increment the count in the dictionary by 1\n# Return the dictionary with occurrence count\n\n# For example:\n# Input List: [1, 2, 3, 4, 5]\n# Input Tuple: (1, 2, 2, 3, 3, 3, 4, 4, 4, 4)\n# Output: {1: 1, 2: 2, 3: 3, 4: 4, 5: 0}"
        ],
        "requirements": [
            "import java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class OccurrenceCount {\n    public static Map<Integer, Integer> countOccurrences(List<Integer> list, Tuple tuple) {\n        Map<Integer, Integer> occurrenceCount = new HashMap<>();\n        \n        for (Integer element : list) {\n            if (tuple.contains(element)) {\n                occurrenceCount.put(element, occurrenceCount.getOrDefault(element, 0) + 1);\n            } else {\n                occurrenceCount.put(element, 0);\n            }\n        }\n        \n        return occurrenceCount;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <unordered_map>\n\nstd::unordered_map<int, int> countOccurrences(std::vector<int> list, std::tuple<int, int, int, int, int, int, int, int, int, int> tuple) {\n    std::unordered_map<int, int> occurrenceCount;\n    \n    for (int element : list) {\n        if (std::get<0>(tuple) == element) {\n            occurrenceCount[element]++;\n        }\n        if (std::get<1>(tuple) == element) {\n            occurrenceCount[element]++;\n        }\n        if (std::get<2>(tuple) == element) {\n            occurrenceCount[element]++;\n        }\n        if (std::get<3>(tuple) == element) {\n            occurrenceCount[element]++;\n        }\n        if (std::get<4>(tuple) == element) {\n            occurrenceCount[element]++;\n        }\n        if (std::get<5>(tuple) == element) {\n            occurrenceCount[element]++;\n        }\n        if (std::get<6>(tuple) == element) {\n            occurrenceCount[element]++;\n        }\n        if (std::get<7>(tuple) == element) {\n            occurrenceCount[element]++;\n        }\n        if (std::get<8>(tuple) == element) {\n            occurrenceCount[element]++;\n        }\n        if (std::get<9>(tuple) == element) {\n            occurrenceCount[element]++;\n        }\n    }\n    \n    return occurrenceCount;\n}"
        ]
    },
    {
        "id": "447",
        "prompt": "Write a function to find cubes of individual elements in a list.",
        "solution": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums",
        "test": [
            "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
            "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
            "assert cube_nums([12,15])==([1728, 3375])"
        ],
        "code": [
            "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums"
        ],
        "draft_plan": [
            "# Define a function that takes a list as input\n    # Initialize an empty list to store the cubes of the elements\n    \n    # Iterate through each element in the input list\n        # Calculate the cube of the current element\n        # Append the cube to the output list\n        \n    # Return the output list"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class CubeCalculator {\n    \n    public List<Integer> calculateCubes(List<Integer> inputList) {\n        List<Integer> cubeList = new ArrayList<>();\n        \n        for (Integer num : inputList) {\n            int cube = num * num * num;\n            cubeList.add(cube);\n        }\n        \n        return cubeList;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nstd::vector<int> cubeElements(const std::vector<int>& nums) {\n    std::vector<int> cubes;\n    \n    for (int num : nums) {\n        int cube = num * num * num;\n        cubes.push_back(cube);\n    }\n    \n    return cubes;\n}"
        ]
    },
    {
        "id": "448",
        "prompt": "Write a function to calculate the sum of perrin numbers.",
        "solution": "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum",
        "test": [
            "assert cal_sum(9) == 49",
            "assert cal_sum(10) == 66",
            "assert cal_sum(11) == 88"
        ],
        "code": [
            "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum"
        ],
        "draft_plan": [
            "# Define a function to calculate the sum of Perrin numbers\n    # Initialize the first three Perrin numbers, P0 = 3, P1 = 0, P2 = 2\n    # Initialize the sum of Perrin numbers to P0 + P1 + P2\n    \n    # If n is less than or equal to 2, return the sum of first n+1 Perrin numbers\n    \n    # Iterate from 3 to n\n        # Calculate the next Perrin number Pn = Pn-2 + Pn-3\n        # Add the current Perrin number to the sum\n        \n    # Return the sum of first n+1 Perrin numbers"
        ],
        "requirements": [
            "public class PerrinNumbers {\n    public static int calculatePerrinSum(int n) {\n        if (n <= 2) {\n            return 5;\n        }\n        \n        int p0 = 3;\n        int p1 = 0;\n        int p2 = 2;\n        int sum = p0 + p1 + p2;\n        \n        for (int i = 3; i <= n; i++) {\n            int nextPerrin = p1 + p2;\n            sum += nextPerrin;\n            p0 = p1;\n            p1 = p2;\n            p2 = nextPerrin;\n        }\n        \n        return sum;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\nint perrinSum(int n) {\n    int p0 = 3;\n    int p1 = 0;\n    int p2 = 2;\n    int sum = p0 + p1 + p2;\n    \n    if (n <= 2) {\n        return sum;\n    }\n    \n    for (int i = 3; i <= n; i++) {\n        int pn = p2 + p1;\n        sum += pn;\n        \n        p0 = p1;\n        p1 = p2;\n        p2 = pn;\n    }\n    \n    return sum;\n}"
        ]
    },
    {
        "id": "450",
        "prompt": "Write a function to extract specified size of strings from a given list of string values.",
        "solution": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result",
        "test": [
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
        ],
        "code": [
            "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result"
        ],
        "draft_plan": [
            "# Initialize an empty list to store the extracted strings\n\n# Iterate through each string in the given list\n    # Check if the length of the current string is equal to the specified size\n        # If the length is equal, append the string to the result list\n\n# Return the result list"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class StringExtractor {\n    public static List<String> extractStrings(List<String> strings, int size) {\n        List<String> extractedStrings = new ArrayList<>();\n        \n        for (String str : strings) {\n            if (str.length() == size) {\n                extractedStrings.add(str);\n            }\n        }\n        \n        return extractedStrings;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> extractStrings(const std::vector<std::string>& strings, int size) {\n    std::vector<std::string> extractedStrings;\n    \n    for (const std::string& str : strings) {\n        if (str.length() == size) {\n            extractedStrings.push_back(str);\n        }\n    }\n    \n    return extractedStrings;\n}"
        ]
    },
    {
        "id": "451",
        "prompt": "Write a function to remove all whitespaces from the given string.",
        "solution": "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))",
        "test": [
            "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
            "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
            "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
        ],
        "code": [
            "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))"
        ],
        "draft_plan": [
            "# Initialize an empty string to store the result\n\n# Iterate through each character in the input string\n    # Check if the character is a whitespace\n        # If not, append it to the result string\n\n# Return the result string"
        ],
        "requirements": [
            "import java.util.regex.Pattern;\n\npublic class RemoveWhitespace {\n    public static String removeWhitespaces(String str) {\n        // Use regular expression to remove whitespaces\n        return str.replaceAll(\"\\\\s+\", \"\");\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\n\nstd::string removeWhitespaces(std::string str) {\n    std::string result;\n    \n    for (char c : str) {\n        if (c != ' ') {\n            result += c;\n        }\n    }\n    \n    return result;\n}"
        ]
    },
    {
        "id": "452",
        "prompt": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.",
        "solution": "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0",
        "test": [
            "assert loss_amount(1500,1200)==0",
            "assert loss_amount(100,200)==100",
            "assert loss_amount(2000,5000)==3000"
        ],
        "code": [
            "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0"
        ],
        "draft_plan": [
            "# Check if the given amount is less than the original price\n    # Calculate the loss amount by subtracting the given amount from the original price\n    # Return the loss amount\n\n# If the given amount is greater than or equal to the original price, return 0 as there is no loss"
        ],
        "requirements": [
            "public class SaleLossAmount {\n    public static double calculateLossAmount(double originalPrice, double givenAmount) {\n        if (givenAmount < originalPrice) {\n            double lossAmount = originalPrice - givenAmount;\n            return lossAmount;\n        }\n        return 0;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n\ndouble calculateLoss(double originalPrice, double givenAmount) {\n    if (givenAmount < originalPrice) {\n        double lossAmount = originalPrice - givenAmount;\n        return lossAmount;\n    }\n    \n    return 0;\n}"
        ]
    },
    {
        "id": "453",
        "prompt": "Write a python function to find the sum of even factors of a number.",
        "solution": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res",
        "test": [
            "assert sumofFactors(18) == 26",
            "assert sumofFactors(30) == 48",
            "assert sumofFactors(6) == 8"
        ],
        "code": [
            "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res"
        ],
        "draft_plan": [
            "# Initialize a variable to store the sum of even factors to 0\n\n# Iterate through each number from 1 to the given number (inclusive)\n    # Check if the current number is a factor of the given number\n        # If it is a factor, check if it is an even number\n            # If it is even, add it to the sum of even factors\n\n# Return the sum of even factors"
        ],
        "requirements": [
            "public class SumOfEvenFactors {\n    public static int sumOfEvenFactors(int n) {\n        int sum = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0 && i % 2 == 0) {\n                sum += i;\n            }\n        }\n        \n        return sum;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\nint sumOfEvenFactors(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n    }\n    return sum;\n}"
        ]
    },
    {
        "id": "454",
        "prompt": "Write a function that matches a word containing 'z'.",
        "solution": "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
        "test": [
            "assert text_match_wordz(\"pythonz.\")==True",
            "assert text_match_wordz(\"xyz.\")==True",
            "assert text_match_wordz(\"  lang  .\")==False"
        ],
        "code": [
            "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False"
        ],
        "draft_plan": [
            "# Define a function that takes a word as input\n\n# Use the \"in\" operator to check if the letter 'z' is present in the word\n    # If 'z' is present, return True\n    # If 'z' is not present, return False"
        ],
        "requirements": [
            "public class WordMatcher {\n    public static boolean matchWord(String word) {\n        return word.contains(\"z\");\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\n\nbool containsZ(std::string word) {\n    for (char c : word) {\n        if (c == 'z') {\n            return true;\n        }\n    }\n    return false;\n}"
        ]
    },
    {
        "id": "455",
        "prompt": "Write a function to check whether the given month number contains 31 days or not.",
        "solution": "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False",
        "test": [
            "assert check_monthnumb_number(5)==True",
            "assert check_monthnumb_number(2)==False",
            "assert check_monthnumb_number(6)==False"
        ],
        "code": [
            "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False"
        ],
        "draft_plan": [
            "# Define a function to check if a given month number contains 31 days\n    # Create a set of month numbers that contain 31 days\n    # Check if the given month number is in the set of months with 31 days\n        # If yes, return True\n        # If no, return False"
        ],
        "requirements": [
            "import java.util.HashSet;\nimport java.util.Set;\n\npublic class MonthChecker {\n    public static boolean has31Days(int month) {\n        Set<Integer> monthsWith31Days = new HashSet<>();\n        monthsWith31Days.add(1);\n        monthsWith31Days.add(3);\n        monthsWith31Days.add(5);\n        monthsWith31Days.add(7);\n        monthsWith31Days.add(8);\n        monthsWith31Days.add(10);\n        monthsWith31Days.add(12);\n\n        return monthsWith31Days.contains(month);\n    }\n}"
        ],
        "final_plan": [
            "#include <unordered_set>\n\nbool has31Days(int month) {\n    std::unordered_set<int> monthsWith31Days = {1, 3, 5, 7, 8, 10, 12};\n    return monthsWith31Days.count(month) > 0;\n}"
        ]
    },
    {
        "id": "456",
        "prompt": "Write a function to reverse each string in a given list of string values.",
        "solution": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result",
        "test": [
            "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
            "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
            "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
        ],
        "code": [
            "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result"
        ],
        "draft_plan": [
            "# Create an empty list to store the reversed strings\n\n# Iterate through each string in the given list\n    # Reverse the current string using string slicing or the reverse() method\n    # Append the reversed string to the new list\n\n# Return the new list with reversed strings"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class ReverseStrings {\n\n    public static List<String> reverseStrings(List<String> strings) {\n        List<String> reversedStrings = new ArrayList<>();\n        \n        for (String str : strings) {\n            StringBuilder sb = new StringBuilder(str);\n            sb.reverse();\n            reversedStrings.add(sb.toString());\n        }\n        \n        return reversedStrings;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<string> reverseStrings(vector<string> strings) {\n    vector<string> reversedStrings;\n    \n    for (string str : strings) {\n        reverse(str.begin(), str.end());\n        reversedStrings.push_back(str);\n    }\n    \n    return reversedStrings;\n}"
        ]
    },
    {
        "id": "457",
        "prompt": "Write a python function to find the sublist having minimum length.",
        "solution": "def Find_Min(lst): \n    return min(lst, key=len) ",
        "test": [
            "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
            "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
            "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
        ],
        "code": [
            "def Find_Min(lst): \n    return min(lst, key=len) "
        ],
        "draft_plan": [
            "# Initialize a variable to store the minimum sublist length and set it to a large value\n\n# Iterate through each sublist in the given list\n    # Check the length of the current sublist\n        # If the length is smaller than the minimum length variable, update the minimum length\n\n# Iterate through each sublist in the given list\n    # Check if the length of the current sublist is equal to the minimum length\n        # If it is, add the sublist to a new list\n\n# Return the new list containing sublists with the minimum length"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SublistMinLength {\n    public static List<List<Integer>> findMinLengthSublist(List<List<Integer>> lists) {\n        int minLen = Integer.MAX_VALUE;\n\n        // Find the minimum length among all sublists\n        for (List<Integer> sublist : lists) {\n            int currLen = sublist.size();\n            if (currLen < minLen) {\n                minLen = currLen;\n            }\n        }\n\n        // Create a new list to store sublists with the minimum length\n        List<List<Integer>> result = new ArrayList<>();\n        for (List<Integer> sublist : lists) {\n            if (sublist.size() == minLen) {\n                result.add(new ArrayList<>(sublist));\n            }\n        }\n\n        return result;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nstd::vector<std::vector<int>> getMinLengthSublists(std::vector<std::vector<int>>& lst) {\n    int minLength = INT_MAX;\n    std::vector<std::vector<int>> minSublists;\n    \n    for (const auto& sublist : lst) {\n        int length = sublist.size();\n        if (length < minLength) {\n            minLength = length;\n        }\n    }\n    \n    for (const auto& sublist : lst) {\n        if (sublist.size() == minLength) {\n            minSublists.push_back(sublist);\n        }\n    }\n    \n    return minSublists;\n}"
        ]
    },
    {
        "id": "458",
        "prompt": "Write a function to find the area of a rectangle.",
        "solution": "def rectangle_area(l,b):\n  area=l*b\n  return area",
        "test": [
            "assert rectangle_area(10,20)==200",
            "assert rectangle_area(10,5)==50",
            "assert rectangle_area(4,2)==8"
        ],
        "code": [
            "def rectangle_area(l,b):\n  area=l*b\n  return area"
        ],
        "draft_plan": [
            "To find the area of a rectangle, we need the length and width of the rectangle. The formula to calculate the area of a rectangle is length * width. Here's the code logic:\n\n1. Define a function named `calculate_area` that takes two parameters: `length` and `width`.\n2. Inside the function, multiply `length` by `width` and assign the result to a variable named `area`.\n3. Return the value of `area`.\n\nHere's the code implementation in Python:\n\n```python\ndef calculate_area(length, width):\n    area = length * width\n    return area\n```\n\nYou can call this function and pass the length and width of a rectangle as arguments to find its area. For example:\n\n```python\nlength = 5\nwidth = 8\nrectangle_area = calculate_area(length, width)\nprint(\"The area of the rectangle is:\", rectangle_area)\n```\n\nOutput:\n```\nThe area of the rectangle is: 40\n```"
        ],
        "requirements": [
            "Sure! Here's the Java code without the `main` method to find the area of a rectangle:\n\n```java\npublic class RectangleArea {\n    public static int calculateArea(int length, int width) {\n        int area = length * width;\n        return area;\n    }\n}\n```\n\nYou can call this method from another class or method by creating an instance of the `RectangleArea` class and invoking the `calculateArea` method with the length and width of the rectangle:\n\n```java\nint length = 5;\nint width = 8;\nint rectangleArea = RectangleArea.calculateArea(length, width);\nSystem.out.println(\"The area of the rectangle is: \" + rectangleArea);\n```\n\nOutput:\n```\nThe area of the rectangle is: 40\n```"
        ],
        "final_plan": [
            "#include <iostream>\n\nint calculateArea(int length, int width) {\n    int area = length * width;\n    return area;\n}"
        ]
    },
    {
        "id": "459",
        "prompt": "Write a function to remove uppercase substrings from a given string.",
        "solution": "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)",
        "test": [
            "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
            "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
            "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
        ],
        "code": [
            "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)"
        ],
        "draft_plan": [
            "# Initialize an empty string to store the result\n\n# Iterate through each character in the input string\n    # Check if the character is lowercase\n        # If it is lowercase, append it to the result string\n\n# Return the resulting string"
        ],
        "requirements": [
            "public class UppercaseRemover {\n    public static String removeUppercaseSubstrings(String str) {\n        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < str.length(); i++) {\n            char c = str.charAt(i);\n            if (Character.isLowerCase(c)) {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\n\nstd::string removeUppercaseSubstrings(const std::string& str) {\n    std::string result = \"\";\n    \n    for (char c : str) {\n        if (std::islower(c)) {\n            result += c;\n        }\n    }\n    \n    return result;\n}"
        ]
    },
    {
        "id": "460",
        "prompt": "Write a python function to get the first element of each sublist.",
        "solution": "def Extract(lst): \n    return [item[0] for item in lst] ",
        "test": [
            "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
            "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
            "assert Extract([[9,8,1],[1,2]]) == [9,1]"
        ],
        "code": [
            "def Extract(lst): \n    return [item[0] for item in lst] "
        ],
        "draft_plan": [
            "# Initialize an empty list to store the first elements of each sublist\n\n# Iterate through each sublist in the input list\n    # Get the first element of the current sublist and append it to the result list\n\n# Return the result list"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class FirstElementOfSublist {\n    public static List<Integer> getFirstElements(List<List<Integer>> sublist) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (List<Integer> sub : sublist) {\n            if (!sub.isEmpty()) {\n                result.add(sub.get(0));\n            }\n        }\n        \n        return result;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nstd::vector<int> getFirstElements(const std::vector<std::vector<int>>& lists) {\n    std::vector<int> result;\n    \n    for (const std::vector<int>& sublist : lists) {\n        if (!sublist.empty()) {\n            result.push_back(sublist[0]);\n        }\n    }\n    \n    return result;\n}"
        ]
    },
    {
        "id": "461",
        "prompt": "Write a python function to count the upper case characters in a given string.",
        "solution": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
        "test": [
            "assert upper_ctr('PYthon') == 1",
            "assert upper_ctr('BigData') == 1",
            "assert upper_ctr('program') == 0"
        ],
        "code": [
            "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr"
        ],
        "draft_plan": [
            "# Initialize a counter variable to 0\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter by 1\n\n# Return the counter value"
        ],
        "requirements": [
            "public class UppercaseCounter {\n    public static int countUpperCaseChars(String str) {\n        int count = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (Character.isUpperCase(str.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\nusing namespace std;\n\nint countUpperCase(string str) {\n    int count = 0;\n    \n    for (char c : str) {\n        if (isupper(c)) {\n            count++;\n        }\n    }\n    \n    return count;\n}"
        ]
    },
    {
        "id": "462",
        "prompt": "Write a function to find all possible combinations of the elements of a given list.",
        "solution": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result",
        "test": [
            "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
            "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
            "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
        ],
        "code": [
            "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result"
        ],
        "draft_plan": [
            "# Import the combinations function from the itertools module\n\n# Define a function to find all possible combinations\n    # Use the combinations function to generate all combinations of the input list with the given length\n\n# Call the function with the input list and the desired combination length"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Combinations {\n    public static List<List<Integer>> findCombinations(List<Integer> nums, int length) {\n        List<List<Integer>> combinations = new ArrayList<>();\n        \n        // Base case: if length is 0, return an empty combination\n        if (length == 0) {\n            combinations.add(new ArrayList<>());\n            return combinations;\n        }\n        \n        // Base case: if nums is empty, return an empty combination\n        if (nums.isEmpty()) {\n            return combinations;\n        }\n        \n        // Recursive case:\n        // For each element in the input list, find all combinations of length-1 using the remaining elements\n        // Add the current element to each of these combinations to get combinations of length\n        int first = nums.get(0);\n        List<Integer> remaining = nums.subList(1, nums.size());\n        \n        List<List<Integer>> subCombinations = findCombinations(remaining, length - 1);\n        for (List<Integer> subCombination : subCombinations) {\n            List<Integer> combination = new ArrayList<>();\n            combination.add(first);\n            combination.addAll(subCombination);\n            combinations.add(combination);\n        }\n        \n        // Find all combinations of length using the remaining elements\n        combinations.addAll(findCombinations(remaining, length));\n        \n        return combinations;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> nums = Arrays.asList(1, 2, 3);\n        int length = 2;\n        \n        List<List<Integer>> combinations = findCombinations(nums, length);\n        for (List<Integer> combination : combinations) {\n            System.out.println(combination);\n        }\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvoid findCombinations(vector<int>& nums, int k, vector<int>& temp, vector<vector<int>>& result, int start) {\n    if (k == 0) {\n        result.push_back(temp);\n        return;\n    }\n    \n    for (int i = start; i <= nums.size() - k; i++) {\n        temp.push_back(nums[i]);\n        findCombinations(nums, k - 1, temp, result, i + 1);\n        temp.pop_back();\n    }\n}\n\nvector<vector<int>> getAllCombinations(vector<int>& nums, int k) {\n    vector<vector<int>> result;\n    vector<int> temp;\n    findCombinations(nums, k, temp, result, 0);\n    return result;\n}"
        ]
    },
    {
        "id": "463",
        "prompt": "Write a function to find the maximum product subarray of the given array.",
        "solution": "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far",
        "test": [
            "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
            "assert max_subarray_product([6, -3, -10, 0, 2]) == 180",
            "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
        ],
        "code": [
            "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far"
        ],
        "draft_plan": [
            "# Initialize variables for current maximum product, current minimum product, and maximum product\n# Iterate through each element in the array\n    # Calculate the maximum product ending at the current element by comparing the product of the current element and the maximum product ending at the previous element, and the product of the current element itself\n    # Calculate the minimum product ending at the current element by comparing the product of the current element and the minimum product ending at the previous element, and the product of the current element itself\n    # Update the maximum product by comparing the current maximum product with the maximum product ending at the current element\n# Return the maximum product"
        ],
        "requirements": [
            "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint max_product_subarray(vector<int>& nums) {\n    int n = nums.size();\n    int max_product = nums[0];\n    int curr_max_product = nums[0];\n    int curr_min_product = nums[0];\n\n    for (int i = 1; i < n; i++) {\n        int temp = curr_max_product;\n        curr_max_product = max({nums[i], nums[i] * curr_max_product, nums[i] * curr_min_product});\n        curr_min_product = min({nums[i], nums[i] * temp, nums[i] * curr_min_product});\n        max_product = max(max_product, curr_max_product);\n    }\n\n    return max_product;\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint maxProductSubarray(vector<int>& nums) {\n    int n = nums.size();\n    int maxProduct = nums[0];\n    int currMax = nums[0];\n    int currMin = nums[0];\n    \n    for (int i = 1; i < n; i++) {\n        // Calculate the maximum product ending at the current element\n        int temp = currMax;\n        currMax = max(max(currMax * nums[i], currMin * nums[i]), nums[i]);\n        // Calculate the minimum product ending at the current element\n        currMin = min(min(temp * nums[i], currMin * nums[i]), nums[i]);\n        // Update the maximum product\n        maxProduct = max(maxProduct, currMax);\n    }\n    \n    return maxProduct;\n}"
        ]
    },
    {
        "id": "464",
        "prompt": "Write a function to check if all values are same in a dictionary.",
        "solution": "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result",
        "test": [
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
        ],
        "code": [
            "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result"
        ],
        "draft_plan": [
            "# Get the values from the dictionary using dict.values() method\n# Use the set() function to remove duplicates from the values\n# If the length of the set is 1, it means all values are the same\n# Return True if all values are the same, otherwise return False"
        ],
        "requirements": [
            "import java.util.*;\n\npublic class SameValuesInDictionary {\n    public static boolean checkSameValuesInDictionary(Map<String, Integer> dictionary) {\n        // Get the values from the dictionary\n        Collection<Integer> values = dictionary.values();\n        \n        // Use a set to remove duplicates from the values\n        Set<Integer> uniqueValues = new HashSet<>(values);\n        \n        // If the length of the set is 1, it means all values are the same\n        if (uniqueValues.size() == 1) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <unordered_map>\n\nbool checkAllValuesSame(std::unordered_map<std::string, int> dictionary) {\n    // Get the first value from the dictionary\n    int firstValue = dictionary.begin()->second;\n    \n    // Iterate through each key-value pair in the dictionary\n    for (const auto& pair : dictionary) {\n        // If the current value is not equal to the first value, return false\n        if (pair.second != firstValue) {\n            return false;\n        }\n    }\n    \n    // All values are the same, return true\n    return true;\n}"
        ]
    },
    {
        "id": "465",
        "prompt": "Write a function to drop empty items from a given dictionary.",
        "solution": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1",
        "test": [
            "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
            "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
            "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
        ],
        "code": [
            "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1"
        ],
        "draft_plan": [
            "# Initialize an empty dictionary to store the non-empty items\n\n# Iterate through each key-value pair in the input dictionary\n    # Check if the value is not empty\n        # If the value is not empty, add it to the new dictionary\n\n# Return the new dictionary"
        ],
        "requirements": [
            "import java.util.HashMap;\nimport java.util.Map;\n\npublic class DictionaryUtils {\n    public static Map<String, String> dropEmptyItems(Map<String, String> dictionary) {\n        Map<String, String> newDictionary = new HashMap<>();\n\n        for (Map.Entry<String, String> entry : dictionary.entrySet()) {\n            if (!entry.getValue().isEmpty()) {\n                newDictionary.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return newDictionary;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <map>\n\nvoid dropEmptyItems(std::map<std::string, std::string>& dictionary) {\n    std::map<std::string, std::string> newDictionary;\n    \n    for (auto it = dictionary.begin(); it != dictionary.end(); ++it) {\n        if (!it->second.empty()) {\n            newDictionary.insert(*it);\n        }\n    }\n    \n    dictionary = newDictionary;\n}\n\nint main() {\n    std::map<std::string, std::string> dictionary = {\n        {\"item1\", \"\"},\n        {\"item2\", \"value2\"},\n        {\"item3\", \"\"},\n        {\"item4\", \"value4\"}\n    };\n    \n    dropEmptyItems(dictionary);\n    \n    for (const auto& item : dictionary) {\n        std::cout << item.first << \": \" << item.second << std::endl;\n    }\n    \n    return 0;\n}"
        ]
    },
    {
        "id": "468",
        "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "solution": "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)",
        "test": [
            "assert max_product([3, 100, 4, 5, 150, 6]) == 3000",
            "assert max_product([4, 42, 55, 68, 80]) == 50265600",
            "assert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460"
        ],
        "code": [
            "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)"
        ],
        "draft_plan": [
            "# Initialize the maximum product to 0\n# Initialize a list to store the maximum product for each index, with all values initially set to 0\n\n# Iterate through each element in the input array\n    # Initialize the current maximum product for the current index to 1\n\n    # Iterate through all previous elements in the input array\n        # Check if the current element is greater than the previous element\n            # Update the current maximum product for the current index by multiplying the previous maximum product and the current element\n\n    # Update the overall maximum product if the current maximum product is greater\n\n# Return the maximum product"
        ],
        "requirements": [
            "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint max_product(vector<int>& nums) {\n    int n = nums.size();\n    int maxProduct = 0;\n    vector<int> dp(n, 0);\n\n    for (int i = 0; i < n; i++) {\n        int curMaxProduct = 1;\n\n        for (int j = i - 1; j >= 0; j--) {\n            if (nums[i] > nums[j]) {\n                curMaxProduct = max(curMaxProduct, dp[j] * nums[i]);\n            }\n        }\n\n        dp[i] = curMaxProduct;\n        maxProduct = max(maxProduct, curMaxProduct);\n    }\n\n    return maxProduct;\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint maxProduct(vector<int>& nums) {\n    int n = nums.size();\n    if (n == 0) {\n        return 0;\n    }\n    \n    int maxProduct = 0;\n    vector<int> dp(n, 0);\n    \n    for (int i = 0; i < n; i++) {\n        dp[i] = 1;\n        \n        for (int j = 0; j < i; j++) {\n            if (nums[i] > nums[j]) {\n                dp[i] = max(dp[i], dp[j] * nums[i]);\n            }\n        }\n        \n        maxProduct = max(maxProduct, dp[i]);\n    }\n    \n    return maxProduct;\n}"
        ]
    },
    {
        "id": "470",
        "prompt": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.",
        "solution": "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ",
        "test": [
            "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
            "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
            "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
        ],
        "code": [
            "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) "
        ],
        "draft_plan": [
            "# Initialize an empty list to store the pairwise additions\n# Iterate through each index in the given tuple up to the second to last index\n    # Calculate the pairwise addition of the current element with its neighboring element\n    # Append the pairwise addition to the list\n\n# Return the list of pairwise additions"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class PairwiseAddition {\n\n    public static List<Integer> pairwiseAddition(List<Integer> tuple) {\n        List<Integer> pairwiseAdditions = new ArrayList<>();\n\n        for (int i = 0; i < tuple.size() - 1; i++) {\n            int pairwiseSum = tuple.get(i) + tuple.get(i + 1);\n            pairwiseAdditions.add(pairwiseSum);\n        }\n\n        return pairwiseAdditions;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> pairwiseAddition(const vector<int>& nums) {\n    vector<int> result;\n    for (int i = 0; i < nums.size() - 1; i++) {\n        result.push_back(nums[i] + nums[i + 1]);\n    }\n    return result;\n}"
        ]
    },
    {
        "id": "471",
        "prompt": "Write a python function to find the product of the array multiplication modulo n.",
        "solution": "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ",
        "test": [
            "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9",
            "assert find_remainder([1,1,1],1) == 0",
            "assert find_remainder([1,2,1],2) == 0"
        ],
        "code": [
            "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n "
        ],
        "draft_plan": [
            "# Initialize a variable 'product' to 1\n\n# Iterate through each element in the array\n    # Update the 'product' by multiplying it with the current element modulo n\n\n# Return the 'product' modulo n"
        ],
        "requirements": [
            "public class ArrayProductModuloN {\n    public static int productModuloN(int[] array, int n) {\n        int product = 1;\n        for (int i = 0; i < array.length; i++) {\n            product = (product * array[i]) % n;\n        }\n        return product;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint productModuloN(vector<int>& arr, int n) {\n    int product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}"
        ]
    },
    {
        "id": "472",
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.",
        "solution": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ",
        "test": [
            "assert check_Consecutive([1,2,3,4,5]) == True",
            "assert check_Consecutive([1,2,3,5,6]) == False",
            "assert check_Consecutive([1,2,1]) == False"
        ],
        "code": [
            "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) "
        ],
        "draft_plan": [
            "# Sort the given list in ascending order\n\n# Iterate through each element in the sorted list\n    # Check if the current element is not equal to the previous element + 1\n        # If not, return False\n\n# If all elements are consecutive, return True"
        ],
        "requirements": [
            "import java.util.Arrays;\n\npublic class ConsecutiveNumbersChecker {\n    public static boolean containsConsecutiveNumbers(int[] arr) {\n        // Sort the array in ascending order\n        Arrays.sort(arr);\n        \n        // Iterate through each element in the sorted array\n        for (int i = 1; i < arr.length; i++) {\n            // Check if the current element is not equal to the previous element + 1\n            if (arr[i] != arr[i - 1] + 1) {\n                // If not, return false\n                return false;\n            }\n        }\n        \n        // If all elements are consecutive, return true\n        return true;\n    }\n}"
        ],
        "final_plan": [
            "#include <vector>\n#include <algorithm>\n\nbool containsConsecutive(std::vector<int>& nums) {\n    std::sort(nums.begin(), nums.end());\n    \n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] != nums[i - 1] + 1) {\n            return false;\n        }\n    }\n    \n    return true;\n}"
        ]
    },
    {
        "id": "473",
        "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
        "solution": "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)",
        "test": [
            "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
            "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
            "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
        ],
        "code": [
            "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)"
        ],
        "draft_plan": [
            "# Initialize the intersection tuple with the first tuple in the list\n\n# Iterate through each tuple in the list, starting from the second tuple\n    # Initialize an empty list to store the common elements between the current tuple and the intersection tuple\n    # Iterate through each element in the current tuple\n        # Check if the element is present in the intersection tuple\n            # If the element is present, add it to the common elements list\n\n    # Update the intersection tuple with the common elements\n\n# Return the intersection tuple"
        ],
        "requirements": [
            "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class TupleIntersection {\n    public static <T> List<T> tupleIntersection(List<List<T>> tuples) {\n        List<T> intersection = new ArrayList<>(tuples.get(0));\n\n        for (int i = 1; i < tuples.size(); i++) {\n            List<T> currentTuple = tuples.get(i);\n            List<T> commonElements = new ArrayList<>();\n\n            for (T element : currentTuple) {\n                if (intersection.contains(element)) {\n                    commonElements.add(element);\n                }\n            }\n\n            intersection = commonElements;\n        }\n\n        return intersection;\n    }\n\n    public static void main(String[] args) {\n        List<List<Integer>> tuples = Arrays.asList(\n                Arrays.asList(1, 2, 3, 4),\n                Arrays.asList(2, 3, 4, 5),\n                Arrays.asList(3, 4, 5, 6)\n        );\n\n        List<Integer> intersection = tupleIntersection(tuples);\n        System.out.println(intersection);  // Output: [3, 4]\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <vector>\n#include <unordered_set>\n#include <tuple>\n\nusing namespace std;\n\nvector<int> tupleIntersection(vector<tuple<int, int, int>>& tuples) {\n    vector<int> intersection;\n    if (tuples.empty()) {\n        return intersection;\n    }\n\n    intersection = {get<0>(tuples[0]), get<1>(tuples[0]), get<2>(tuples[0])};\n\n    for (int i = 1; i < tuples.size(); i++) {\n        vector<int> commonElements;\n        for (int j = 0; j < 3; j++) {\n            int currentElement = get<j>(tuples[i]);\n            if (find(intersection.begin(), intersection.end(), currentElement) != intersection.end()) {\n                commonElements.push_back(currentElement);\n            }\n        }\n        intersection = commonElements;\n    }\n\n    return intersection;\n}"
        ]
    },
    {
        "id": "474",
        "prompt": "Write a function to replace characters in a string.",
        "solution": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2",
        "test": [
            "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
            "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
            "assert replace_char(\"python\",'l','a')==(\"python\")"
        ],
        "code": [
            "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2"
        ],
        "draft_plan": [
            "# Initialize an empty string to store the result\n\n# Iterate through each character in the input string\n    # Check if the current character needs to be replaced\n        # If yes, append the replacement character to the result string\n        # If no, append the current character to the result string as is\n\n# Return the result string"
        ],
        "requirements": [
            "public class StringReplacement {\n    public static String replaceCharacters(String input, char target, char replacement) {\n        StringBuilder result = new StringBuilder();\n        for (char c : input.toCharArray()) {\n            if (c == target) {\n                result.append(replacement);\n            } else {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\n\nstd::string replaceCharacters(const std::string& str, char toReplace, char replacement) {\n    std::string result = \"\";\n    for (char c : str) {\n        if (c == toReplace) {\n            result += replacement;\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}"
        ]
    },
    {
        "id": "475",
        "prompt": "Write a function to sort a dictionary by value.",
        "solution": "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter",
        "test": [
            "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
            "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
            "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
        ],
        "code": [
            "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter"
        ],
        "draft_plan": [
            "# Sort the dictionary by value using the sorted() function and a lambda function as the key parameter\n# Return the sorted dictionary"
        ],
        "requirements": [
            "import java.util.*;\n\npublic class SortDictionaryByValue {\n    public static <K, V extends Comparable<? super V>> Map<K, V> sortDictionaryByValue(Map<K, V> dictionary) {\n        List<Map.Entry<K, V>> entries = new ArrayList<>(dictionary.entrySet());\n        Collections.sort(entries, (e1, e2) -> e1.getValue().compareTo(e2.getValue()));\n\n        Map<K, V> sortedDictionary = new LinkedHashMap<>();\n        for (Map.Entry<K, V> entry : entries) {\n            sortedDictionary.put(entry.getKey(), entry.getValue());\n        }\n\n        return sortedDictionary;\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <map>\n#include <vector>\n#include <algorithm>\n\n// Function to sort a dictionary by value\nstd::map<std::string, int> sortDictionaryByValue(std::map<std::string, int>& dictionary) {\n    std::vector<std::pair<std::string, int>> vec(dictionary.begin(), dictionary.end());\n\n    // Sort the vector based on the second element of each pair (value)\n    std::sort(vec.begin(), vec.end(), [](const std::pair<std::string, int>& a, const std::pair<std::string, int>& b) {\n        return a.second < b.second;\n    });\n\n    // Create a new dictionary with the sorted elements\n    std::map<std::string, int> sortedDictionary;\n    for (const auto& pair : vec) {\n        sortedDictionary.insert(pair);\n    }\n\n    return sortedDictionary;\n}"
        ]
    },
    {
        "id": "476",
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.",
        "solution": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum",
        "test": [
            "assert big_sum([1,2,3]) == 4",
            "assert big_sum([-1,2,3,4]) == 3",
            "assert big_sum([2,3,6]) == 8"
        ],
        "code": [
            "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum"
        ],
        "draft_plan": [
            "# Sort the array in ascending order\n# Return the sum of the first element (smallest value) and the last element (largest value) in the sorted array"
        ],
        "requirements": [
            "```java\nimport java.util.Arrays;\n\npublic class SumOfLargestAndSmallest {\n    public static int sumOfLargestAndSmallest(int[] arr) {\n        Arrays.sort(arr);\n        return arr[0] + arr[arr.length - 1];\n    }\n}\n```"
        ],
        "final_plan": [
            "#include <vector>\n#include <algorithm>\n\nint sumOfLargestAndSmallest(std::vector<int> arr) {\n    std::sort(arr.begin(), arr.end()); // Sort the array in ascending order\n    int smallest = arr[0]; // Get the first element (smallest value)\n    int largest = arr[arr.size() - 1]; // Get the last element (largest value)\n    return smallest + largest; // Return the sum of the smallest and largest values\n}"
        ]
    },
    {
        "id": "477",
        "prompt": "Write a python function to convert the given string to lower case.",
        "solution": "def is_lower(string):\n  return (string.lower())",
        "test": [
            "assert is_lower(\"InValid\") == \"invalid\"",
            "assert is_lower(\"TruE\") == \"true\"",
            "assert is_lower(\"SenTenCE\") == \"sentence\""
        ],
        "code": [
            "def is_lower(string):\n  return (string.lower())"
        ],
        "draft_plan": [
            "# Initialize an empty string to store the converted string\n\n# Iterate through each character in the input string\n    # Check if the current character is an uppercase letter\n        # If it is, convert it to lowercase using the built-in lower() function\n    # Append the converted or unchanged character to the result string\n\n# Return the converted string"
        ],
        "requirements": [
            "public class LowerCaseConverter {\n    public static String convertToLowerCase(String str) {\n        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < str.length(); i++) {\n            char ch = str.charAt(i);\n            \n            if (Character.isUpperCase(ch)) {\n                ch = Character.toLowerCase(ch);\n            }\n            \n            result.append(ch);\n        }\n        \n        return result.toString();\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\n\nstd::string toLowerCase(std::string str) {\n    std::string result = \"\";\n    for (char c : str) {\n        if (c >= 'A' && c <= 'Z') {\n            result += c + 32; // Add 32 to convert uppercase to lowercase\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}"
        ]
    },
    {
        "id": "478",
        "prompt": "Write a function to remove lowercase substrings from a given string.",
        "solution": "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)",
        "test": [
            "assert remove_lowercase(\"PYTHon\")==('PYTH')",
            "assert remove_lowercase(\"FInD\")==('FID')",
            "assert remove_lowercase(\"STRinG\")==('STRG')"
        ],
        "code": [
            "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)"
        ],
        "draft_plan": [
            "# Initialize an empty string to store the result\n\n# Iterate through each character in the given string\n    # Check if the character is uppercase\n        # If yes, append it to the result string\n\n# Return the result string"
        ],
        "requirements": [
            "import java.util.*;\n\npublic class Main {\n    public static String removeLowerCaseSubstrings(String input) {\n        StringBuilder result = new StringBuilder();\n\n        for (int i = 0; i < input.length(); i++) {\n            char c = input.charAt(i);\n            if (Character.isUpperCase(c)) {\n                result.append(c);\n            }\n        }\n\n        return result.toString();\n    }\n}"
        ],
        "final_plan": [
            "#include <iostream>\n#include <string>\n\nstd::string removeLowercaseSubstrings(const std::string& str) {\n    std::string result;\n    \n    for (char c : str) {\n        if (std::isupper(c)) {\n            result += c;\n        }\n    }\n    \n    return result;\n}"
        ]
    },
    {
        "id": "479",
        "prompt": "Write a python function to find the first digit of a given number.",
        "solution": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ",
        "test": [
            "assert first_Digit(123) == 1",
            "assert first_Digit(456) == 4",
            "assert first_Digit(12) == 1"
        ],
        "code": [
            "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) "
        ],
        "draft_plan": [
            "# Convert the given number to a string\n# Get the first character of the string\n# Convert the first character back to an integer\n# Return the first digit"
        ],
        "requirements": [
            "public class FirstDigit {\n    public static int getFirstDigit(int number) {\n        // Convert the given number to a string\n        String numberString = String.valueOf(number);\n\n        // Get the first character of the string\n        char firstChar = numberString.charAt(0);\n\n        // Convert the first character back to an integer\n        int firstDigit = Character.getNumericValue(firstChar);\n\n        // Return the first digit\n        return firstDigit;\n    }\n}"
        ],
        "final_plan": [
            "int getFirstDigit(int number) {\n    // Convert the number to a string\n    string numberStr = to_string(number);\n    \n    // Get the first character of the string\n    char firstChar = numberStr[0];\n    \n    // Convert the first character back to an integer\n    int firstDigit = firstChar - '0';\n    \n    // Return the first digit\n    return firstDigit;\n}"
        ]
    }
]