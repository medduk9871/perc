[
    {
        "id": "11",
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
        "solution": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ",
        "code": [
            "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s "
        ],
        "pseudo": "# Find the index of the first occurrence of the given character in the string\n# Find the index of the last occurrence of the given character in the string\n\n# If both indices are valid\n    # Remove the first occurrence of the character from the string\n    # Decrement the index of the last occurrence by 1 to account for the removal\n    # Remove the last occurrence of the character from the string\n\n# Return the modified string",
        "test": [
            "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
            "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
            "assert remove_Occ(\"PHP\",\"P\") == \"H\""
        ],
        "draft_plan": [
            "# Find the first occurrence of the given character in the string\n# Find the last occurrence of the given character in the string\n# Remove the first and last occurrences of the character from the string using string slicing\n# Return the modified string"
        ],
        "final_plan": [
            "remove_first_last_occurrence <- function(string, char) {\n  first_occurrence <- regexpr(char, string)\n  last_occurrence <- regexpr(char, string, fixed = TRUE, invert = TRUE)\n  \n  if (first_occurrence != -1 && last_occurrence != -1) {\n    modified_string <- paste(substr(string, 1, first_occurrence - 1), \n                             substr(string, first_occurrence + 1, last_occurrence - 1),\n                             substr(string, last_occurrence + 1, nchar(string)),\n                             sep = \"\")\n    return(modified_string)\n  } else {\n    return(string)\n  }\n}"
        ]
    },
    {
        "id": "12",
        "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "solution": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result",
        "code": [
            "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result"
        ],
        "pseudo": "# Calculate the sum of each row in the matrix\n\n# Create a list of tuples, where each tuple contains the index of the row and its corresponding sum\n\n# Sort the list of tuples based on the sum in ascending order\n\n# Create an empty sorted matrix\n\n# Iterate through the sorted list of tuples\n    # Append the corresponding row from the original matrix to the sorted matrix\n\n# Return the sorted matrix",
        "test": [
            "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
            "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
            "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
        ],
        "draft_plan": [
            "# Define a function to sort a given matrix in ascending order according to the sum of its rows.\n# Calculate the sum of each row in the matrix.\n# Create a new matrix that contains the original matrix along with an additional column for the row sums.\n# Sort the new matrix based on the values in the row sum column in ascending order.\n# Remove the row sum column from the sorted matrix.\n# Return the sorted matrix."
        ],
        "final_plan": [
            "sort_matrix <- function(matrix) {\n  row_sums <- apply(matrix, 1, sum)\n  new_matrix <- cbind(matrix, row_sums)\n  sorted_matrix <- new_matrix[order(new_matrix[,ncol(new_matrix)]), -ncol(new_matrix)]\n  return(sorted_matrix)\n}"
        ]
    },
    {
        "id": "14",
        "prompt": "Write a python function to find the volume of a triangular prism.",
        "solution": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ",
        "code": [
            "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) "
        ],
        "pseudo": "# Define a function to calculate the volume of a triangular prism\n    # Accept the base length, base width, and height of the prism as input parameters\n    # Calculate the area of the base triangle by multiplying the base length and base width, and dividing by 2\n    # Calculate the volume by multiplying the area of the base triangle by the height of the prism\n    # Return the calculated volume\n\n# Example usage:\n# volume = calculate_volume_of_triangular_prism(5, 6, 10)",
        "test": [
            "assert find_Volume(10,8,6) == 240",
            "assert find_Volume(3,2,2) == 6",
            "assert find_Volume(1,2,1) == 1"
        ],
        "draft_plan": [
            "# Define a function to calculate the volume of a triangular prism.\n# Accept the base length, base width, and height of the prism as inputs.\n# Calculate the area of the triangular base using the formula: (base length * base width) / 2.\n# Calculate the volume of the prism using the formula: area of base * height.\n# Return the calculated volume."
        ],
        "final_plan": [
            "calculate_triangular_prism_volume <- function(base_length, base_width, height) {\n  base_area <- (base_length * base_width) / 2\n  volume <- base_area * height\n  return(volume)\n}"
        ]
    },
    {
        "id": "16",
        "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
        "solution": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
        "code": [
            "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False"
        ],
        "pseudo": "# Split the input string by the underscore character to get a list of substrings\n# Iterate through each substring in the list\n    # Check if the substring consists of lowercase letters only\n        # If not, return False\n\n# If all substrings are valid, return True",
        "test": [
            "assert text_lowercase_underscore(\"aab_cbbbc\")==(True)",
            "assert text_lowercase_underscore(\"aab_Abbbc\")==(False)",
            "assert text_lowercase_underscore(\"Aaab_abbbc\")==(False)"
        ],
        "draft_plan": [
            "# Use regular expressions to match the desired pattern in the input string\n# Define the pattern as a string: \"[a-z]+_[a-z]+\"\n# Use the grepl() function to check if the pattern is present in the input string\n# If the pattern is found, return TRUE; otherwise, return FALSE"
        ],
        "final_plan": [
            "contains_sequence <- function(string) {\n  pattern <- \"[a-z]+_[a-z]+\"\n  return(grepl(pattern, string))\n}"
        ]
    },
    {
        "id": "17",
        "prompt": "Write a function that returns the perimeter of a square given its side length as input.",
        "solution": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter",
        "code": [
            "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter"
        ],
        "pseudo": "# Define a function named \"square_perimeter\" that takes a parameter \"side_length\"\n    # Calculate the perimeter of the square by multiplying the side length by 4\n    # Return the perimeter\n\n# Call the function with a test value for the side length to verify the result",
        "test": [
            "assert square_perimeter(10)==40",
            "assert square_perimeter(5)==20",
            "assert square_perimeter(4)==16"
        ],
        "draft_plan": [
            "# Define a function to calculate the perimeter of a square\n# Accept a single parameter 'side_length' representing the side length of the square\n# Calculate the perimeter by multiplying the side length by 4\n# Return the calculated perimeter"
        ],
        "final_plan": [
            "calculate_perimeter <- function(side_length) {\n  perimeter <- side_length * 4\n  return(perimeter)\n}"
        ]
    },
    {
        "id": "18",
        "prompt": "Write a function to remove characters from the first string which are present in the second string.",
        "solution": "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) ",
        "code": [
            "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) "
        ],
        "pseudo": "# Convert the second string into a set for efficient lookup\n\n# Initialize an empty string to store the result\n\n# Iterate through each character in the first string\n    # Check if the character is not present in the second string\n        # Append the character to the result string\n\n# Return the result string",
        "test": [
            "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
            "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
            "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'"
        ],
        "draft_plan": [
            "# Create a function to remove characters from the first string that are present in the second string\n# Convert the second string into a set to efficiently check for character presence\n# Initialize an empty string to store the resulting string\n# Iterate through each character in the first string\n    # Check if the current character is not present in the set created from the second string\n        # If the character is not present, append it to the resulting string\n# Return the resulting string"
        ],
        "final_plan": [
            "remove_chars <- function(string1, string2) {\n  chars_to_remove <- unique(strsplit(string2, \"\")[[1]])\n  result <- \"\"\n  \n  for (char in strsplit(string1, \"\")[[1]]) {\n    if (!(char %in% chars_to_remove)) {\n      result <- paste(result, char, sep = \"\")\n    }\n  }\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "19",
        "prompt": "Write a function to find whether a given array of integers contains any duplicate element.",
        "solution": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ",
        "code": [
            "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     "
        ],
        "pseudo": "# Initialize an empty set\n\n# Iterate through each element in the input array\n    # Check if the element is already present in the set\n        # If yes, return True as duplicate element found\n        # If not, add the element to the set\n\n# If no duplicate element is found, return False",
        "test": [
            "assert test_duplicate(([1,2,3,4,5]))==False",
            "assert test_duplicate(([1,2,3,4, 4]))==True",
            "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
        ],
        "draft_plan": [
            "# Define a function to check for duplicate elements in an array of integers.\n# Create an empty hash to store the count of each integer in the array.\n# Iterate over the array using a for loop.\n    # Check if the current element already exists in the hash.\n        # If it does, return True as there is a duplicate element.\n        # If it doesn't, add the element to the hash with an initial count of 1.\n# If the loop completes without finding any duplicates, return False."
        ],
        "final_plan": [
            "contains_duplicate <- function(arr) {\n  element_count <- list()\n  \n  for (num in arr) {\n    if (!is.null(element_count[[as.character(num)]])) {\n      return(TRUE)\n    } else {\n      element_count[[as.character(num)]] <- 1\n    }\n  }\n  \n  return(FALSE)\n}"
        ]
    },
    {
        "id": "20",
        "prompt": "Write a function to check if the given number is woodball or not.",
        "solution": "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False",
        "code": [
            "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False"
        ],
        "pseudo": "# Check if the given number is less than or equal to 1\n    # If it is, return False as woodball numbers must be greater than 1\n\n# Initialize a variable to keep track of the previous number in the sequence\n# Start a loop from 2 to the square root of the given number\n    # Check if the given number is divisible by the current loop variable\n        # If it is, check if the current loop variable is equal to the previous number plus 1\n            # If it is, update the previous number to the current loop variable\n            # If it is not, return False as the sequence is broken\n\n# If the loop completes without returning False, return True as the given number is a woodball number",
        "test": [
            "assert is_woodall(383) == True",
            "assert is_woodall(254) == False",
            "assert is_woodall(200) == False"
        ],
        "draft_plan": [
            "# Define a function to check if a given number is woodball or not.\n# Check if the given number is less than or equal to 1.\n    # If true, return False since 1 and numbers less than 1 are not woodball numbers.\n# Check if the given number is divisible by 3 or 5.\n    # If true, return True since numbers divisible by 3 or 5 are woodball numbers.\n# Check if the given number is divisible by the sum of its digits.\n    # If true, return True since numbers divisible by the sum of their digits are woodball numbers.\n# If none of the above conditions are met, return False since the number is not a woodball number."
        ],
        "final_plan": [
            "is_woodball <- function(num) {\n  if (num <= 1) {\n    return(FALSE)\n  }\n  \n  if (num %% 3 == 0 || num %% 5 == 0) {\n    return(TRUE)\n  }\n  \n  sum_digits <- sum(as.numeric(strsplit(as.character(num), \"\")[[1]]))\n  if (num %% sum_digits == 0) {\n    return(TRUE)\n  }\n  \n  return(FALSE)\n}"
        ]
    },
    {
        "id": "56",
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
        "solution": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
        "code": [
            "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  "
        ],
        "pseudo": "# Convert the given number to a string and reverse it\n# Convert the reversed string back to an integer\n# Check if the given number is equal to twice the reversed number plus 1\n# If the condition is true, return True. Otherwise, return False.",
        "test": [
            "assert check(70) == False",
            "assert check(23) == False",
            "assert check(73) == True"
        ],
        "draft_plan": [
            "# Convert the given number to a string to work with individual digits\n# Reverse the string representation of the number\n# Convert the reversed string back to an integer\n# Calculate twice the reverse number\n# Check if the given number is one less than twice its reverse\n# Return True if the condition is satisfied, otherwise return False"
        ],
        "final_plan": [
            "is_number_one_less_than_twice_its_reverse <- function(num) {\n  num_str <- as.character(num)\n  reverse_str <- paste(rev(strsplit(num_str, \"\")[[1]]), collapse = \"\")\n  reverse_num <- as.integer(reverse_str)\n  twice_reverse <- 2 * reverse_num\n  \n  if (num == (twice_reverse - 1)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}"
        ]
    },
    {
        "id": "57",
        "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.",
        "solution": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ",
        "code": [
            "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num "
        ],
        "pseudo": "# Sort the list of digits in descending order\n\n# Concatenate all the digits in the sorted list\n\n# Convert the concatenated string to an integer and return it",
        "test": [
            "assert find_Max_Num([1,2,3]) == 321",
            "assert find_Max_Num([4,5,6,1]) == 6541",
            "assert find_Max_Num([1,2,3,9]) == 9321"
        ],
        "draft_plan": [
            "# Convert the list of digits to a list of strings\n# Sort the list of strings in descending order\n# Join the sorted list of strings to form a single string\n# Convert the resulting string back to an integer and return it"
        ],
        "final_plan": [
            "find_largest_number <- function(digits) {\n  sorted_digits <- as.character(digits)\n  sorted_digits <- sort(sorted_digits, decreasing = TRUE)\n  largest_number <- paste(sorted_digits, collapse = \"\")\n  largest_number <- as.numeric(largest_number)\n  \n  return(largest_number)\n}"
        ]
    },
    {
        "id": "58",
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
        "solution": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ",
        "code": [
            "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); "
        ],
        "pseudo": "# Check if the product of the two integers is negative\n    # If the product is negative, it means the two integers have opposite signs\n        # Return True\n\n# If the product is not negative, it means the two integers have the same sign\n    # Return False",
        "test": [
            "assert opposite_Signs(1,-2) == True",
            "assert opposite_Signs(3,2) == False",
            "assert opposite_Signs(-10,-10) == False",
            "assert opposite_Signs(-2,2) == True"
        ],
        "draft_plan": [
            "# Define a function to check whether two integers have opposite signs or not.\n# Check if the product of the two integers is negative\n    # If true, return True\n    # If false, return False"
        ],
        "final_plan": [
            "check_opposite_signs <- function(a, b) {\n  if (a * b < 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}"
        ]
    },
    {
        "id": "59",
        "prompt": "Write a function to find the nth octagonal number.",
        "solution": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ",
        "code": [
            "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n "
        ],
        "pseudo": "# Function to find the nth octagonal number\ndef find_octagonal_number(n):\n    # Calculate the nth octagonal number using the formula\n    octagonal_number = 3 * n * (n - 1) + 1\n    \n    # Return the result\n    return octagonal_number\n\n# Test the function\nn = 5\nresult = find_octagonal_number(n)\nprint(f\"The {n}th octagonal number is: {result}\")",
        "test": [
            "assert is_octagonal(5) == 65",
            "assert is_octagonal(10) == 280",
            "assert is_octagonal(15) == 645"
        ],
        "draft_plan": [
            "# Define a function to find the nth octagonal number\n# Check if the input n is a positive integer, if not return an error message\n# Calculate the nth octagonal number using the formula: octagonal_number = 3 * n^2 - 2 * n\n# Return the nth octagonal number"
        ],
        "final_plan": [
            "find_nth_octagonal_number <- function(n) {\n  if (!is.integer(n) || n <= 0) {\n    stop(\"Input n should be a positive integer.\")\n  }\n  \n  octagonal_number <- 3 * n^2 - 2 * n\n  \n  return(octagonal_number)\n}"
        ]
    },
    {
        "id": "61",
        "prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
        "solution": "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count",
        "code": [
            "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count"
        ],
        "pseudo": "# Initialize a counter variable to keep track of the number of substrings\n\n# Iterate through each starting index of the substring\n    # Iterate through each ending index of the substring\n        # Get the substring from the starting index to the ending index\n        # Compute the sum of the digits in the substring\n        # Check if the sum of the digits is equal to the length of the substring\n            # If true, increment the counter variable\n\n# Return the counter variable with the total number of substrings",
        "test": [
            "assert count_Substrings('112112') == 6",
            "assert count_Substrings('111') == 6",
            "assert count_Substrings('1101112') == 12"
        ],
        "draft_plan": [
            "# Define a function to count the number of substrings with the sum of digits equal to their length.\n# Initialize a counter for the number of substrings.\n# Iterate over the input string using two nested loops.\n    # Extract a substring starting from the current index to the end of the string.\n    # Convert the substring to a list of digits.\n    # Calculate the sum of the digits in the substring.\n    # Check if the sum of the digits is equal to the length of the substring.\n        # If true, increment the counter.\n# Return the count of substrings."
        ],
        "final_plan": [
            "count_substrings <- function(string) {\n  substring_count <- 0\n  \n  for (i in seq_along(string)) {\n    for (j in i:length(string)) {\n      substring <- substr(string, i, j)\n      digit_sum <- sum(as.numeric(strsplit(substring, \"\")[[1]]))\n      \n      if (digit_sum == nchar(substring)) {\n        substring_count <- substring_count + 1\n      }\n    }\n  }\n  \n  return(substring_count)\n}"
        ]
    },
    {
        "id": "62",
        "prompt": "Write a python function to find smallest number in a list.",
        "solution": "def smallest_num(xs):\n  return min(xs)\n",
        "code": [
            "def smallest_num(xs):\n  return min(xs)\n"
        ],
        "pseudo": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
        "test": [
            "assert smallest_num([10, 20, 1, 45, 99]) == 1",
            "assert smallest_num([1, 2, 3]) == 1",
            "assert smallest_num([45, 46, 50, 60]) == 45"
        ],
        "draft_plan": [
            "# Initialize a variable 'smallest' to the first element in the input list\n# Iterate through each number in the list\n    # Update the 'smallest' variable if the current number is smaller than 'smallest'\n# Return the smallest number found"
        ],
        "final_plan": [
            "find_smallest_number <- function(lst) {\n  smallest <- lst[1]\n  \n  for (num in lst) {\n    if (num < smallest) {\n      smallest <- num\n    }\n  }\n  \n  return(smallest)\n}"
        ]
    },
    {
        "id": "63",
        "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.",
        "solution": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ",
        "code": [
            "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) "
        ],
        "pseudo": "# Initialize the maximum difference variable to 0\n\n# Iterate through each pair in the list\n    # Calculate the difference between the second element and the first element of the current pair\n    # Check if the current difference is greater than the maximum difference\n        # If it is, update the maximum difference\n\n# Return the maximum difference",
        "test": [
            "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
            "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
            "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
        ],
        "draft_plan": [
            "# Define a function to find the maximum difference between pairs in a tuple list.\n# Initialize a variable 'max_diff' to 0 to store the maximum difference found.\n# Iterate over the input tuple list using 'each' iterator.\n    # Extract the two elements of the current tuple.\n    # Calculate the absolute difference between the two elements.\n    # Check if the calculated difference is greater than the current 'max_diff'.\n        # If true, update 'max_diff' with the new maximum difference.\n# Return the maximum difference found, which would be the value of 'max_diff'."
        ],
        "final_plan": [
            "find_max_difference <- function(tuple_list) {\n  max_diff <- 0\n  \n  for (tup in tuple_list) {\n    a <- tup[[1]]\n    b <- tup[[2]]\n    diff <- abs(a - b)\n    \n    if (diff > max_diff) {\n      max_diff <- diff\n    }\n  }\n  \n  return(max_diff)\n}"
        ]
    },
    {
        "id": "64",
        "prompt": "Write a function to sort a list of tuples using the second value of each tuple.",
        "solution": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks",
        "code": [
            "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks"
        ],
        "pseudo": "# Define a function to sort a list of tuples by the second value\n    # Use the sorted() function and a lambda function as the key parameter\n    # The lambda function will extract the second value from each tuple for sorting\n    \n# Call the sorted() function with the list of tuples and the custom sorting function as arguments\n# Return the sorted list of tuples",
        "test": [
            "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
            "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
            "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
        ],
        "draft_plan": [
            "# Define a function to sort a list of tuples based on the second value of each tuple.\n# Use the 'order' function to get the indices that would sort the list based on the second value.\n# Use the obtained indices to reorder the list.\n# Return the sorted list."
        ],
        "final_plan": [
            "sort_tuples <- function(lst) {\n  sorted <- lst[order(sapply(lst, function(x) x[[2]]))]\n  return(sorted)\n}"
        ]
    },
    {
        "id": "65",
        "prompt": "Write a function to flatten a list and sum all of its elements.",
        "solution": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total",
        "code": [
            "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total"
        ],
        "pseudo": "# Initialize a variable to store the sum of all elements\n\n# Iterate through each element in the list\n    # Check if the current element is a list\n        # If it is a list, recursively call the flatten_and_sum function on the current element and add the result to the sum\n    # If it is not a list, add the current element to the sum\n\n# Return the sum",
        "test": [
            "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
            "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
            "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
        ],
        "draft_plan": [
            "# Define a method to flatten a list and sum all of its elements.\n# Create a variable 'flattened_list' to store the flattened list.\n# Iterate over each element in the input list.\n    # Check if the current element is a list.\n        # If true, recursively call the flatten_list method on the current element and concatenate the result to 'flattened_list'.\n        # If false, append the current element to 'flattened_list'.\n# Calculate the sum of all elements in 'flattened_list' using the sum() function.\n# Return the sum of all elements."
        ],
        "final_plan": [
            "flatten_and_sum <- function(lst) {\n  flattened_list <- c()\n  \n  for (elem in lst) {\n    if (is.list(elem)) {\n      flattened_list <- c(flattened_list, flatten_and_sum(elem))\n    } else {\n      flattened_list <- c(flattened_list, elem)\n    }\n  }\n  \n  return(sum(flattened_list))\n}"
        ]
    },
    {
        "id": "66",
        "prompt": "Write a python function to count the number of positive numbers in a list.",
        "solution": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ",
        "code": [
            "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count "
        ],
        "pseudo": "# Initialize a variable count to 0\n\n# Iterate through each number in the list\n    # Check if the number is greater than 0\n        # If it is, increment the count\n\n# Return the count",
        "test": [
            "assert pos_count([1,-2,3,-4]) == 2",
            "assert pos_count([3,4,5,-1]) == 3",
            "assert pos_count([1,2,3,4]) == 4"
        ],
        "draft_plan": [
            "# Initialize a variable 'count' to 0\n# Iterate through each number in the input list\n    # Check if the current number is greater than 0\n        # If true, increment the 'count' variable by 1\n# Return the value of 'count' as the number of positive numbers found"
        ],
        "final_plan": [
            "count_positive_numbers <- function(lst) {\n  count <- 0\n  \n  for (num in lst) {\n    if (num > 0) {\n      count <- count + 1\n    }\n  }\n  \n  return(count)\n}"
        ]
    },
    {
        "id": "67",
        "prompt": "Write a function to find the number of ways to partition a set of Bell numbers.",
        "solution": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] ",
        "code": [
            "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] "
        ],
        "pseudo": "# Import the math module to use the factorial function\nimport math\n\n# Define a function to calculate the Bell numbers\ndef calculate_bell_number(n):\n    # Create a 2D array to store the Bell numbers\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n\n    # Initialize the first Bell number as 1\n    bell[0][0] = 1\n\n    # Calculate the Bell numbers using dynamic programming\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    # Return the last Bell number\n    return bell[n][0]\n\n# Define a function to calculate the number of ways to partition a set of Bell numbers\ndef calculate_partition_ways(n):\n    # Calculate the Bell number for n\n    bell_number = calculate_bell_number(n)\n\n    # Calculate the number of ways to partition the set\n    partition_ways = math.factorial(n) * bell_number\n\n    # Return the number of ways to partition the set\n    return partition_ways",
        "test": [
            "assert bell_number(2)==2",
            "assert bell_number(10)==115975",
            "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
        ],
        "draft_plan": [
            "# Create a function to calculate the number of ways to partition a set of Bell numbers.\n# Create a recursive helper function to calculate the Bell number for a given input 'n'.\n    # Base case: if 'n' is 0 or 1, return 1.\n    # Initialize a variable 'result' to 0.\n    # Iterate from 'k' = 0 to 'n'-1.\n        # Calculate the binomial coefficient of 'n'-1 choose 'k'.\n        # Multiply the binomial coefficient by the Bell number of 'k' (recursive call to the helper function).\n        # Add the result to 'result'.\n    # Return 'result'.\n# Call the helper function with the input 'n' to get the number of ways to partition a set of Bell numbers."
        ],
        "final_plan": [
            "bell_number <- function(n) {\n  bell_number_helper <- function(k) {\n    if (k == 0 || k == 1) {\n      return(1)\n    }\n    result <- 0\n    for (i in 0:(k-1)) {\n      result <- result + choose(k-1, i) * bell_number_helper(i)\n    }\n    return(result)\n  }\n  \n  return(bell_number_helper(n))\n}"
        ]
    },
    {
        "id": "68",
        "prompt": "Write a python function to check whether the given array is monotonic or not.",
        "solution": "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",
        "code": [
            "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "
        ],
        "pseudo": "# Check if the length of the array is less than or equal to 2\n    # If true, return True as any array with 0 or 1 element is considered monotonic\n\n# Initialize two variables to track if the array is non-increasing and non-decreasing\n    # Set both variables to True initially\n\n# Iterate through each element in the array starting from index 1\n    # Check if the current element is greater than the previous element\n        # If true, set the non-increasing variable to False\n    # Check if the current element is less than the previous element\n        # If true, set the non-decreasing variable to False\n\n# Check if either the non-increasing or non-decreasing variable is True\n    # If true, return True as the array is monotonic\n    # Otherwise, return False as the array is not monotonic",
        "test": [
            "assert is_Monotonic([6, 5, 4, 4]) == True",
            "assert is_Monotonic([1, 2, 2, 3]) == True",
            "assert is_Monotonic([1, 3, 2]) == False"
        ],
        "draft_plan": [
            "# Define a function to check if an array is monotonic\n# Initialize two variables 'increasing' and 'decreasing' as boolean flags, both set to True\n# Iterate through each element in the array starting from the second element\n    # Check if the current element is greater than the previous element\n        # If True, set 'decreasing' flag to False\n    # Check if the current element is less than the previous element\n        # If True, set 'increasing' flag to False\n# If either 'increasing' or 'decreasing' flag is False, return False (array is not monotonic)\n# If both 'increasing' and 'decreasing' flags are True, return True (array is monotonic)"
        ],
        "final_plan": [
            "is_monotonic <- function(arr) {\n  increasing <- TRUE\n  decreasing <- TRUE\n  \n  for (i in 2:length(arr)) {\n    if (arr[i] > arr[i-1]) {\n      decreasing <- FALSE\n    }\n    \n    if (arr[i] < arr[i-1]) {\n      increasing <- FALSE\n    }\n  }\n  \n  return(increasing || decreasing)\n}"
        ]
    },
    {
        "id": "69",
        "prompt": "Write a function to check whether a list contains the given sublist or not.",
        "solution": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set",
        "code": [
            "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set"
        ],
        "pseudo": "# Iterate through each index in the main list\n    # Check if the current index and the sublist length is less than or equal to the main list length\n        # Check if the sublist matches the elements starting from the current index in the main list\n\n# If the sublist is found, return True\n# Otherwise, return False",
        "test": [
            "assert is_sublist([2,4,3,5,7],[3,7])==False",
            "assert is_sublist([2,4,3,5,7],[4,3])==True",
            "assert is_sublist([2,4,3,5,7],[1,6])==False"
        ],
        "draft_plan": [
            "# Define a function to check if a list contains a given sublist.\n# Iterate over the input list using a sliding window approach.\n    # Extract a sublist from the current index to the length of the given sublist.\n    # Check if the extracted sublist is equal to the given sublist.\n        # If true, return True.\n# If the given sublist is not found in the input list, return False."
        ],
        "final_plan": [
            "contains_sublist <- function(lst, sublist) {\n  for (i in 1:(length(lst) - length(sublist) + 1)) {\n    if (lst[i:(i + length(sublist) - 1)] == sublist) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}"
        ]
    },
    {
        "id": "70",
        "prompt": "Write a function to find whether all the given tuples have equal length or not.",
        "solution": "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1",
        "code": [
            "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1"
        ],
        "pseudo": "# Get the length of the first tuple in the list\n\n# Iterate through each tuple in the list\n    # Check if the length of the current tuple is not equal to the length of the first tuple\n        # If lengths are not equal, return False\n\n# If all tuples have equal lengths, return True",
        "test": [
            "assert get_equal([(11, 22, 33), (44, 55, 66)]) == True",
            "assert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False",
            "assert get_equal([(1, 2), (3, 4)]) == True"
        ],
        "draft_plan": [
            "# Define a function to check if all tuples have equal length.\n# Get the length of the first tuple in the input list and store it in a variable 'length'.\n# Iterate over the remaining tuples in the input list using 'each' iterator.\n    # Check if the length of the current tuple is not equal to 'length'.\n        # If true, return False.\n# If the iteration completes without returning False, return True."
        ],
        "final_plan": [
            "check_equal_length <- function(test_list) {\n  length <- length(test_list[[1]])\n  \n  for (i in 2:length(test_list)) {\n    if (length(test_list[[i]]) != length) {\n      return(FALSE)\n    }\n  }\n  \n  return(TRUE)\n}"
        ]
    },
    {
        "id": "71",
        "prompt": "Write a function to sort a list of elements.",
        "solution": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums",
        "code": [
            "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums"
        ],
        "pseudo": "# Use the built-in sorted() function to sort the list in ascending order\n# Return the sorted list",
        "test": [
            "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
            "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
            "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
        ],
        "draft_plan": [
            "# Define a function to sort a list of elements\n# Implement a sorting algorithm such as bubble sort, insertion sort, selection sort, merge sort, or quick sort\n# The specific implementation of the sorting algorithm will depend on the requirements and constraints of the problem\n# Return the sorted list"
        ],
        "final_plan": [
            "sort_list <- function(lst) {\n  # Bubble sort implementation\n  for (i in 1:(length(lst) - 1)) {\n    for (j in 1:(length(lst) - i)) {\n      if (lst[j] > lst[j+1]) {\n        temp <- lst[j]\n        lst[j] <- lst[j+1]\n        lst[j+1] <- temp\n      }\n    }\n  }\n  \n  return(lst)\n}"
        ]
    },
    {
        "id": "72",
        "prompt": "Write a python function to check whether the given number can be represented as the difference of two squares or not.",
        "solution": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False",
        "code": [
            "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False"
        ],
        "pseudo": "# Iterate through all numbers from 1 to sqrt(n)\n    # Calculate the square of the current number\n    # Check if the difference between n and the square is a perfect square\n\n# If a perfect square difference is found, return True\n# If no perfect square difference is found, return False",
        "test": [
            "assert dif_Square(5) == True",
            "assert dif_Square(10) == False",
            "assert dif_Square(15) == True"
        ],
        "draft_plan": [
            "# Import the math module for square root function\n# Define a function to check if the given number can be represented as the difference of two squares\n    # Iterate through numbers from 1 to the square root of the given number\n        # Calculate the square of the current number\n        # Calculate the difference between the given number and the square\n        # Check if the difference is a perfect square\n            # If true, return True as the given number can be represented as the difference of two squares\n    # If no perfect square difference is found, return False\n"
        ],
        "final_plan": [
            "check_difference_of_squares <- function(num) {\n  sqrt_num <- sqrt(num)\n  \n  for (i in 1:sqrt_num) {\n    square <- i * i\n    difference <- num - square\n    \n    if (sqrt(difference) == floor(sqrt(difference))) {\n      return(TRUE)\n    }\n  }\n  \n  return(FALSE)\n}"
        ]
    },
    {
        "id": "74",
        "prompt": "Write a function to check whether it follows the sequence given in the patterns array.",
        "solution": "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True",
        "code": [
            "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True"
        ],
        "pseudo": "# Initialize a pointer to keep track of the current position in the patterns array\n\n# Iterate through each character in the input string\n    # Check if the current character matches the character at the pointer position in the patterns array\n        # If it matches, move the pointer to the next position in the patterns array\n        # If the pointer reaches the end of the patterns array, return True as the sequence is followed\n\n# If the loop completes without returning True, return False as the sequence is not followed",
        "test": [
            "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True",
            "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False",
            "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False"
        ],
        "draft_plan": [
            "# Define a function to check if a given input follows a given pattern sequence.\n# Iterate over the input sequence using a 'for' loop.\n    # Check if the current element of the input sequence matches the corresponding element of the pattern sequence.\n        # If they do not match, return FALSE.\n# If all elements of the input sequence match the corresponding elements of the pattern sequence, return TRUE."
        ],
        "final_plan": [
            "check_pattern <- function(input, pattern) {\n  for (i in seq_along(input)) {\n    if (input[i] != pattern[i]) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}"
        ]
    },
    {
        "id": "75",
        "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
        "solution": "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res",
        "code": [
            "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res"
        ],
        "pseudo": "# Initialize an empty list to store the resulting tuples\n\n# Iterate through each tuple in the given list of tuples\n    # Initialize a flag variable to True\n    \n    # Iterate through each element in the tuple\n        # Check if the element is not divisible by k\n            # If not divisible, set the flag variable to False and break out of the loop\n    \n    # If the flag variable is still True after checking all elements, add the tuple to the resulting list\n\n# Return the resulting list of tuples",
        "test": [
            "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]",
            "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]",
            "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]"
        ],
        "draft_plan": [
            "# Define a function to find tuples with elements divisible by k.\n# Initialize an empty list to store the tuples that satisfy the condition.\n# Iterate over the input list of tuples using 'each' iterator.\n    # Iterate over each element in the current tuple using 'for' loop.\n        # Check if the current element is divisible by k.\n            # If true, continue to the next element.\n            # If false, break out of the inner loop.\n        # If all elements in the tuple are divisible by k, add the tuple to the result list.\n# Return the list of tuples that satisfy the condition."
        ],
        "final_plan": [
            "find_divisible_tuples <- function(lst, k) {\n  result <- list()\n  \n  for (tup in lst) {\n    all_divisible <- TRUE\n    for (elem in tup) {\n      if (elem %% k != 0) {\n        all_divisible <- FALSE\n        break\n      }\n    }\n    if (all_divisible) {\n      result <- c(result, tup)\n    }\n  }\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "77",
        "prompt": "Write a python function to find whether a number is divisible by 11.",
        "solution": "def is_Diff(n): \n    return (n % 11 == 0) ",
        "code": [
            "def is_Diff(n): \n    return (n % 11 == 0) "
        ],
        "pseudo": "To determine whether a number is divisible by 11, we can use the following logic:\n\n1. Convert the number to a string.\n2. Iterate through the digits of the number.\n3. Add the digits in odd positions (starting from the rightmost digit) and subtract the sum of the digits in even positions.\n4. If the result is divisible by 11, the original number is also divisible by 11.\n\nYou can use this function to check if a number is divisible by 11.",
        "test": [
            "assert is_Diff (12345) == False",
            "assert is_Diff(1212112) == True",
            "assert is_Diff(1212) == False"
        ],
        "draft_plan": [
            "# Define a function to check if a number is divisible by 11.\n# Check if the remainder of the division of the number by 11 is equal to 0.\n    # If true, return True, indicating that the number is divisible by 11.\n    # If false, return False, indicating that the number is not divisible by 11."
        ],
        "final_plan": [
            "is_divisible_by_11 <- function(number) {\n  if (number %% 11 == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}"
        ]
    },
    {
        "id": "79",
        "prompt": "Write a python function to check whether the length of the word is odd or not.",
        "solution": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
        "code": [
            "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False"
        ],
        "pseudo": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
        "test": [
            "assert word_len(\"Hadoop\") == False",
            "assert word_len(\"great\") == True",
            "assert word_len(\"structure\") == True"
        ],
        "draft_plan": [
            "# Define a function to check if the length of a word is odd or not\n# Extract the length of the input word\n# Check if the length is divisible by 2\n    # If true, return False (since even length)\n    # If false, return True (since odd length)"
        ],
        "final_plan": [
            "is_odd_length <- function(word) {\n  length_word <- nchar(word)\n  \n  if (length_word %% 2 == 0) {\n    return(FALSE)\n  } else {\n    return(TRUE)\n  }\n}"
        ]
    },
    {
        "id": "80",
        "prompt": "Write a function to find the nth tetrahedral number.",
        "solution": "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6",
        "code": [
            "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6"
        ],
        "pseudo": "# Initialize the tetrahedral number to 0\n\n# Iterate from 1 to n (inclusive)\n    # Add the current number to the tetrahedral number\n\n# Return the tetrahedral number",
        "test": [
            "assert tetrahedral_number(5) == 35",
            "assert tetrahedral_number(6) == 56",
            "assert tetrahedral_number(7) == 84"
        ],
        "draft_plan": [
            "# Define a function to find the nth tetrahedral number\n# Check if the input n is a positive integer\n    # If not, return an error message\n# Initialize a variable 'sum' to 0\n# Iterate from 1 to n\n    # Add the current number to the 'sum' variable\n# Return the value of 'sum' as the nth tetrahedral number"
        ],
        "final_plan": [
            "find_nth_tetrahedral <- function(n) {\n  if (is.numeric(n) && n > 0 && n %% 1 == 0) {\n    sum <- 0\n    \n    for (i in 1:n) {\n      sum <- sum + i\n    }\n    \n    return(sum)\n  } else {\n    stop(\"Invalid input. Please provide a positive integer.\")\n  }\n}"
        ]
    },
    {
        "id": "82",
        "prompt": "Write a function to find the volume of a sphere.",
        "solution": "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume",
        "code": [
            "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume"
        ],
        "pseudo": "# Define a function called calculate_sphere_volume that takes a single parameter, radius\n\n# Calculate the volume of the sphere using the formula: (4/3) * pi * radius^3\n# Store the result in a variable called volume\n\n# Return the calculated volume",
        "test": [
            "assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)",
            "assert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)",
            "assert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)"
        ],
        "draft_plan": [
            "# Define a function to calculate the volume of a sphere\n# Accept the radius of the sphere as input parameter\n# Calculate the volume using the formula: 4/3 * pi * radius^3\n# Return the calculated volume"
        ],
        "final_plan": [
            "find_sphere_volume <- function(radius) {\n  volume <- (4/3) * pi * radius^3\n  return(volume)\n}"
        ]
    },
    {
        "id": "83",
        "prompt": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
        "solution": "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)",
        "code": [
            "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)"
        ],
        "pseudo": "# Define a function to calculate the character made by adding the ASCII values modulo 26\n    # Initialize a variable to store the sum of ASCII values\n    # Iterate through each character in the given string\n        # Add the ASCII value of the current character to the sum\n    # Calculate the modulo 26 of the sum\n    # Convert the result back to a character using the ASCII value\n    # Return the resulting character",
        "test": [
            "assert get_Char(\"abc\") == \"f\"",
            "assert get_Char(\"gfg\") == \"t\"",
            "assert get_Char(\"ab\") == \"c\""
        ],
        "draft_plan": [
            "# Define a function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n# Initialize a variable 'sum_ascii' to 0.\n# Iterate through each character in the input string.\n    # Get the ASCII value of the current character and add it to 'sum_ascii'.\n# Take the modulo 26 of 'sum_ascii' and add 97 to convert it back to a lowercase ASCII value.\n# Convert the resulting ASCII value to a character.\n# Return the character."
        ],
        "final_plan": [
            "get_modulo_character <- function(input_string) {\n  sum_ascii <- 0\n  \n  for (char in strsplit(input_string, NULL)[[1]]) {\n    sum_ascii <- sum_ascii + as.integer(char)\n  }\n  \n  modulo_value <- (sum_ascii %% 26) + 97\n  \n  return(as.character(modulo_value))\n}"
        ]
    },
    {
        "id": "84",
        "prompt": "Write a function to find the nth number in the newman conway sequence.",
        "solution": "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))",
        "code": [
            "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
        ],
        "pseudo": "# Create a list to store the Newman-Conway sequence\n# Initialize the first two elements of the sequence\n# Iterate from index 3 up to the given number n\n    # Calculate the next element of the sequence using the previous elements\n# Return the nth element of the sequence",
        "test": [
            "assert sequence(10) == 6",
            "assert sequence(2) == 1",
            "assert sequence(3) == 2"
        ],
        "draft_plan": [
            "# Define a function to find the nth number in the Newman-Conway sequence.\n# Check if the input n is less than or equal to 0, if true return an error message.\n# Create a list to store the sequence, initialize it with the first two numbers of the sequence [0, 1].\n# Iterate from index 3 up to n.\n    # Calculate the next number in the sequence using the formula: sequence[i] = sequence[sequence[i-1]] + sequence[i - sequence[i-1]]\n# Return the nth number in the sequence, which would be the value at index n in the sequence list."
        ],
        "final_plan": [
            "newman_conway <- function(n) {\n  if (n <= 0) {\n    stop(\"n must be a positive integer\")\n  }\n  \n  sequence <- c(0, 1)\n  \n  if (n <= 2) {\n    return(sequence[n])\n  }\n  \n  for (i in seq(3, n)) {\n    sequence[i] <- sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n  }\n  \n  return(sequence[n])\n}"
        ]
    },
    {
        "id": "85",
        "prompt": "Write a function to find the surface area of a sphere.",
        "solution": "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea",
        "code": [
            "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea"
        ],
        "pseudo": "import math\n\ndef surface_area_of_sphere(radius):\n    # Calculate the surface area of a sphere using the formula: 4\u03c0r^2\n    surface_area = 4 * math.pi * radius**2\n    \n    return surface_area",
        "test": [
            "assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)",
            "assert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)",
            "assert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)"
        ],
        "draft_plan": [
            "# Define a function to calculate the surface area of a sphere.\n# Accept the radius of the sphere as a parameter.\n# Calculate the surface area using the formula: 4 * pi * radius^2\n# Return the calculated surface area."
        ],
        "final_plan": [
            "calculate_sphere_surface_area <- function(radius) {\n  surface_area <- 4 * pi * radius^2\n  return(surface_area)\n}"
        ]
    },
    {
        "id": "86",
        "prompt": "Write a function to find nth centered hexagonal number.",
        "solution": "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1",
        "code": [
            "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1"
        ],
        "pseudo": "# Initialize the centered hexagonal number formula: nth_centered_hexagonal = 3 * n * (n - 1) + 1\n\n# Define a function to calculate the nth centered hexagonal number\n    # Check if n is a positive integer, otherwise return None\n    # Calculate the nth centered hexagonal number using the formula\n    # Return the result\n\n# Call the function and provide the desired value of n to get the nth centered hexagonal number",
        "test": [
            "assert centered_hexagonal_number(10) == 271",
            "assert centered_hexagonal_number(2) == 7",
            "assert centered_hexagonal_number(9) == 217"
        ],
        "draft_plan": [
            "# Define a function to find the nth centered hexagonal number.\n# Calculate the nth centered hexagonal number using the formula: (3n^2 - 3n + 1)\n# Return the calculated value."
        ],
        "final_plan": [
            "find_nth_centered_hexagonal <- function(n) {\n  return(3*n^2 - 3*n + 1)\n}"
        ]
    },
    {
        "id": "87",
        "prompt": "Write a function to merge three dictionaries into a single dictionary.",
        "solution": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict",
        "code": [
            "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict"
        ],
        "pseudo": "# Initialize an empty dictionary to store the merged dictionaries\n\n# Iterate through each dictionary in the input list\n    # Iterate through each key-value pair in the current dictionary\n        # Add the key-value pair to the merged dictionary\n\n# Return the merged dictionary",
        "test": [
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
        ],
        "draft_plan": [
            "# Define a function to merge three dictionaries into a single dictionary.\n# Create an empty dictionary to store the merged dictionary.\n# Iterate over each dictionary in the input list of dictionaries.\n    # Iterate over each key-value pair in the current dictionary.\n        # Check if the key already exists in the merged dictionary.\n            # If true, append the value to the existing list of values for that key.\n            # If false, create a new key-value pair in the merged dictionary with the current key and value.\n# Return the merged dictionary."
        ],
        "final_plan": [
            "merge_dictionaries <- function(dict_list) {\n  merged_dict <- list()\n  \n  for (dictionary in dict_list) {\n    for (key in names(dictionary)) {\n      if (exists(key, merged_dict)) {\n        merged_dict[[key]] <- c(merged_dict[[key]], dictionary[[key]])\n      } else {\n        merged_dict[[key]] <- dictionary[[key]]\n      }\n    }\n  }\n  \n  return(merged_dict)\n}"
        ]
    },
    {
        "id": "88",
        "prompt": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.",
        "solution": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count",
        "code": [
            "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count"
        ],
        "pseudo": "# Initialize an empty dictionary\n\n# Iterate through each element in the list\n    # Check if the element is already a key in the dictionary\n        # If it is, increment its value by 1\n        # If it is not, add it as a new key with value 1\n\n# Return the dictionary containing the frequency of elements",
        "test": [
            "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})",
            "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})",
            "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})"
        ],
        "draft_plan": [
            "# Create an empty dictionary to store the frequency of elements\n# Iterate over each element in the input list\n    # Check if the element is already a key in the dictionary\n        # If true, increment the value of the corresponding key by 1\n        # If false, add the element as a new key in the dictionary with a value of 1\n# Return the dictionary with the frequency of elements"
        ],
        "final_plan": [
            "get_frequency <- function(lst) {\n  frequency_dict <- list()\n  \n  for (element in lst) {\n    if (is.null(frequency_dict[[element]])) {\n      frequency_dict[[element]] <- 1\n    } else {\n      frequency_dict[[element]] <- frequency_dict[[element]] + 1\n    }\n  }\n  \n  return(frequency_dict)\n}"
        ]
    },
    {
        "id": "89",
        "prompt": "Write a function to find the closest smaller number than n.",
        "solution": "def closest_num(N):\n  return (N - 1)",
        "code": [
            "def closest_num(N):\n  return (N - 1)"
        ],
        "pseudo": "# Initialize a variable to store the closest smaller number\n# Iterate from n-1 to 1 in descending order\n    # Check if the current number is smaller than n\n        # If yes, update the closest smaller number and break the loop\n\n# Return the closest smaller number",
        "test": [
            "assert closest_num(11) == 10",
            "assert closest_num(7) == 6",
            "assert closest_num(12) == 11"
        ],
        "draft_plan": [
            "# Define a function to find the closest smaller number than n.\n# Initialize a variable 'closest' to a value smaller than n (e.g., -Inf).\n# Iterate from n-1 down to 1 using a for loop.\n    # Check if the current number is smaller than n and larger than 'closest'.\n        # If true, update 'closest' to the current number.\n# Return the value of 'closest'."
        ],
        "final_plan": [
            "find_closest_smaller <- function(n) {\n  closest <- -Inf\n  \n  for (i in n-1:1) {\n    if (i < n && i > closest) {\n      closest <- i\n    }\n  }\n  \n  return(closest)\n}"
        ]
    },
    {
        "id": "90",
        "prompt": "Write a python function to find the length of the longest word.",
        "solution": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max",
        "code": [
            "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max"
        ],
        "pseudo": "# Split the input sentence into words using the split() function\n# Initialize a variable maxLength to 0\n\n# Iterate through each word in the list of words\n    # Check if the length of the current word is greater than maxLength\n        # If it is, update maxLength with the length of the current word\n\n# Return maxLength",
        "test": [
            "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
            "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
            "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
        ],
        "draft_plan": [
            "# Split the input string into a list of words using whitespace as the delimiter\n# Initialize a variable 'longest_length' to 0\n# Iterate through each word in the list\n    # Check the length of the current word\n    # If the length is greater than 'longest_length', update 'longest_length' with the current length\n# Return the value of 'longest_length' as the length of the longest word"
        ],
        "final_plan": [
            "find_longest_word_length <- function(sentence) {\n  words <- strsplit(sentence, \" \")[[1]]\n  longest_length <- 0\n  \n  for (word in words) {\n    word_length <- nchar(word)\n    \n    if (word_length > longest_length) {\n      longest_length <- word_length\n    }\n  }\n  \n  return(longest_length)\n}"
        ]
    },
    {
        "id": "91",
        "prompt": "Write a function to check if a string is present as a substring in a given list of string values.",
        "solution": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False",
        "code": [
            "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False"
        ],
        "pseudo": "# Iterate through each string in the list\n    # Check if the given substring is present in the current string\n        # If found, return True\n\n# If the substring is not found in any string, return False",
        "test": [
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
        ],
        "draft_plan": [
            "# Define a function to check if a string is present as a substring in a given list of string values.\n# Iterate over each string in the list using 'each' iterator.\n    # Check if the given string is a substring of the current string.\n        # If true, return TRUE.\n# If the given string is not found as a substring in any string in the list, return FALSE."
        ],
        "final_plan": [
            "check_substring <- function(string, string_list) {\n  for (str in string_list) {\n    if (grepl(string, str)) {\n      return(TRUE)\n    }\n  }\n  \n  return(FALSE)\n}"
        ]
    },
    {
        "id": "92",
        "prompt": "Write a function to check whether the given number is undulating or not.",
        "solution": "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True",
        "code": [
            "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True"
        ],
        "pseudo": "To check whether a given number is undulating or not, we can follow these steps:\n\n1. Convert the given number into a string.\n2. Check if the length of the string is less than or equal to 2. If it is, return False since a number with length less than or equal to 2 cannot be undulating.\n3. Iterate through each digit in the string starting from the second digit.\n    - Check if the current digit is equal to the previous digit. If it is, return False since an undulating number cannot have consecutive same digits.\n    - Check if the current digit is greater than the previous digit. If it is, check if the previous digit is greater than the digit before it. If it is not, return False since an undulating number should have a decreasing trend after an increasing trend.\n    - Check if the current digit is less than the previous digit. If it is, check if the previous digit is less than the digit before it. If it is not, return False since an undulating number should have an increasing trend after a decreasing trend.\n4. If all the checks pass, return True since the number is undulating.\n\nYou can use the above function to check if a given number is undulating or not by passing the number as an argument to the function `is_undulating_number()`. The function will return `True` if the number is undulating, and `False` otherwise.",
        "test": [
            "assert is_undulating(1212121) == True",
            "assert is_undulating(1991) == False",
            "assert is_undulating(121) == True"
        ],
        "draft_plan": [
            "# Convert the given number to a string\n# Iterate through each digit in the string from index 1 to the second to last index\n    # Check if the current digit is equal to the previous digit and also not equal to the next digit\n        # If true, continue to the next iteration\n    # Check if the current digit is not equal to the previous digit and also not equal to the next digit\n        # If true, continue to the next iteration\n    # If neither of the above conditions are met, return False (the number is not undulating)\n# If the loop completes without returning False, return True (the number is undulating)"
        ],
        "final_plan": [
            "is_undulating <- function(number) {\n  number_str <- as.character(number)\n  \n  for (i in 2:(nchar(number_str)-1)) {\n    if (number_str[i] == number_str[i-1] && number_str[i] != number_str[i+1]) {\n      next\n    }\n    if (number_str[i] != number_str[i-1] && number_str[i] != number_str[i+1]) {\n      next\n    }\n    return(FALSE)\n  }\n  \n  return(TRUE)\n}"
        ]
    },
    {
        "id": "93",
        "prompt": "Write a function to calculate the value of 'a' to the power 'b'.",
        "solution": "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)",
        "code": [
            "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)"
        ],
        "pseudo": "# Initialize the result variable to 1\n\n# If b is positive\n    # Iterate from 1 to b\n        # Multiply the result by a\n\n# If b is negative\n    # Iterate from 1 to abs(b)\n        # Divide the result by a\n\n# Return the result",
        "test": [
            "assert power(3,4) == 81",
            "assert power(2,3) == 8",
            "assert power(5,5) == 3125"
        ],
        "draft_plan": [
            "# Define a function to calculate the value of 'a' to the power 'b'.\n# Initialize a variable 'result' to 1.\n# If 'b' is 0, return 1.\n# If 'b' is positive, iterate 'b' times and multiply 'a' with 'result' in each iteration.\n# If 'b' is negative, iterate 'b' times and divide 'result' by 'a' in each iteration.\n# Return the final value of 'result'."
        ],
        "final_plan": [
            "calculate_power <- function(a, b) {\n  result <- 1\n  \n  if (b == 0) {\n    return(1)\n  } else if (b > 0) {\n    for (i in 1:b) {\n      result <- result * a\n    }\n  } else {\n    for (i in 1:-b) {\n      result <- result / a\n    }\n  }\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "94",
        "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
        "solution": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ",
        "code": [
            "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) "
        ],
        "pseudo": "# Initialize the minimum second value as positive infinity\n# Initialize the first value of the tuple with minimum second value as None\n\n# Iterate through each tuple in the list\n    # Check if the second value of the current tuple is smaller than the current minimum second value\n        # If yes, update the minimum second value and the first value of the tuple\n\n# Return the first value of the tuple with the smallest second value",
        "test": [
            "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
            "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
            "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
        ],
        "draft_plan": [
            "# Initialize variables 'smallest' and 'result' to store the smallest second value and the corresponding first value respectively\n# Iterate through each tuple in the input list\n    # Check if the second value of the current tuple is smaller than the 'smallest' value\n        # If true, update 'smallest' and 'result' with the current second value and first value respectively\n# Return the 'result' variable, which contains the first value of the tuple with the smallest second value"
        ],
        "final_plan": [
            "find_smallest_second_value <- function(tuple_list) {\n  smallest <- tuple_list[[1]][[2]]\n  result <- tuple_list[[1]][[1]]\n  \n  for (tup in tuple_list) {\n    if (tup[[2]] < smallest) {\n      smallest <- tup[[2]]\n      result <- tup[[1]]\n    }\n  }\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "95",
        "prompt": "Write a python function to find the length of the smallest list in a list of lists.",
        "solution": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength ",
        "code": [
            "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength "
        ],
        "pseudo": "# Initialize the minimum length to a large number\n\n# Iterate through each list in the input list\n    # Check the length of the current list\n        # If the length is smaller than the current minimum length, update the minimum length\n\n# Return the minimum length",
        "test": [
            "assert Find_Min_Length([[1],[1,2]]) == 1",
            "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
            "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
        ],
        "draft_plan": [
            "# Initialize a variable 'smallest_length' to a very large value or infinity\n# Iterate through each list in the input list of lists\n    # Check the length of the current list\n    # If the length of the current list is smaller than 'smallest_length', update 'smallest_length' with the length of the current list\n# Return 'smallest_length' as the length of the smallest list in the list of lists"
        ],
        "final_plan": [
            "find_smallest_list_length <- function(list_of_lists) {\n  smallest_length <- Inf\n  \n  for (lst in list_of_lists) {\n    current_length <- length(lst)\n    \n    if (current_length < smallest_length) {\n      smallest_length <- current_length\n    }\n  }\n  \n  return(smallest_length)\n}"
        ]
    },
    {
        "id": "96",
        "prompt": "Write a python function to find the number of divisors of a given integer.",
        "solution": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x",
        "code": [
            "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x"
        ],
        "pseudo": "# Initialize a count variable to 0\n\n# Iterate through each number from 1 to the given integer\n    # Check if the current number is a divisor of the given integer\n        # If yes, increment the count variable\n\n# Return the count variable",
        "test": [
            "assert divisor(15) == 4",
            "assert divisor(12) == 6",
            "assert divisor(9) == 3"
        ],
        "draft_plan": [
            "# Initialize a variable 'count' to 0\n# Iterate through numbers from 1 to the given integer (inclusive)\n    # Check if the current number is a divisor of the given integer\n        # If true, increment the 'count' variable by 1\n# Return the 'count' variable as the number of divisors found"
        ],
        "final_plan": [
            "find_number_of_divisors <- function(n) {\n  count <- 0\n  \n  for (i in 1:n) {\n    if (n %% i == 0) {\n      count <- count + 1\n    }\n  }\n  \n  return(count)\n}"
        ]
    },
    {
        "id": "97",
        "prompt": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.",
        "solution": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n",
        "code": [
            "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n"
        ],
        "pseudo": "# Create an empty dictionary to store the frequency of elements\n\n# Iterate through each sublist in the flattened list\n    # Iterate through each element in the sublist\n        # Check if the element is already in the dictionary\n            # If it is, increment its count by 1\n            # If it is not, add it to the dictionary with a count of 1\n\n# Return the dictionary containing the frequency of each element",
        "test": [
            "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
            "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
            "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
        ],
        "draft_plan": [
            "# Define a function to find the frequency of each element in a flattened list of lists\n# Create an empty dictionary to store the frequencies\n# Iterate through each element in the flattened list\n    # Check if the element already exists as a key in the dictionary\n        # If it does, increment its value by 1\n        # If it doesn't, add it to the dictionary with an initial value of 1\n# Return the dictionary containing the frequencies of each element"
        ],
        "final_plan": [
            "find_element_frequency <- function(lst) {\n  frequency <- list()\n  \n  for (element in unlist(lst)) {\n    if (is.null(frequency[[element]])) {\n      frequency[[element]] <- 1\n    } else {\n      frequency[[element]] <- frequency[[element]] + 1\n    }\n  }\n  \n  return(frequency)\n}"
        ]
    },
    {
        "id": "98",
        "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
        "solution": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ",
        "code": [
            "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) "
        ],
        "pseudo": "# Initialize the product variable to 1\n\n# Iterate through each number in the list\n    # Multiply the product by the current number\n\n# Divide the product by the length of the list\n\n# Return the result",
        "test": [
            "assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)",
            "assert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)",
            "assert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)"
        ],
        "draft_plan": [
            "# Define a function to multiply all the numbers in a list and divide by the length of the list.\n# Initialize a variable 'product' to 1.\n# Iterate over each number in the input list.\n    # Multiply the 'product' variable by the current number.\n# Divide the 'product' variable by the length of the input list.\n# Return the result."
        ],
        "final_plan": [
            "multiply_and_divide <- function(lst) {\n  product <- 1\n  \n  for (num in lst) {\n    product <- product * num\n  }\n  \n  result <- product / length(lst)\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "99",
        "prompt": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
        "solution": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") ",
        "code": [
            "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") "
        ],
        "pseudo": "# Initialize an empty string to store the binary representation\n# Check if the input number is 0, if so return '0' as the binary representation\n# Iterate until the input number becomes 0\n    # Append the remainder of the input number divided by 2 to the binary representation string\n    # Update the input number by dividing it by 2, discarding the remainder\n\n# Reverse the binary representation string\n\n# Return the binary representation string",
        "test": [
            "assert decimal_to_binary(8) == '1000'",
            "assert decimal_to_binary(18) == '10010'",
            "assert decimal_to_binary(7) == '111'"
        ],
        "draft_plan": [
            "# Define a method to convert a decimal number to binary\n# Initialize an empty string to store the binary representation\n# Check if the input number is 0\n    # If true, return \"0\" as the binary representation\n# Iterate while the input number is greater than 0\n    # Get the remainder of the input number divided by 2 and convert it to a string\n    # Prepend the remainder to the binary representation string\n    # Update the input number by dividing it by 2\n# Return the binary representation string"
        ],
        "final_plan": [
            "decimal_to_binary <- function(decimal) {\n  binary <- \"\"\n  \n  if (decimal == 0) {\n    binary <- \"0\"\n  }\n  \n  while (decimal > 0) {\n    remainder <- decimal %% 2\n    binary <- paste0(as.character(remainder), binary)\n    decimal <- decimal %/% 2\n  }\n  \n  return(binary)\n}"
        ]
    },
    {
        "id": "100",
        "prompt": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
        "solution": "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i",
        "code": [
            "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i"
        ],
        "pseudo": "# Define a helper function to check if a number is palindrome\n    # Convert the number to a string\n    # Check if the string is equal to its reversed string representation\n\n# Start a loop from the next number after the specified integer\n    # Check if the current number is a palindrome\n        # If yes, return the current number\n\n# If no palindrome is found in the loop, return None",
        "test": [
            "assert next_smallest_palindrome(99)==101",
            "assert next_smallest_palindrome(1221)==1331",
            "assert next_smallest_palindrome(120)==121"
        ],
        "draft_plan": [
            "# Convert the input integer to a string\n# Create a helper function to check if a given string is a palindrome\n    # Initialize two pointers, one starting from the beginning of the string and one starting from the end\n    # Iterate while the first pointer is less than or equal to the second pointer\n        # If the characters at the two pointers are not equal, return False\n        # Move the first pointer one step forward and the second pointer one step backward\n    # If the loop completes without returning False, return True\n# Increment the input integer by 1\n# Iterate while True\n    # Convert the incremented integer to a string\n    # Check if the string is a palindrome using the helper function\n    # If it is a palindrome, return the integer\n    # Otherwise, increment the integer by 1"
        ],
        "final_plan": [
            "find_next_smallest_palindrome <- function(num) {\n  is_palindrome <- function(string) {\n    left <- 1\n    right <- nchar(string)\n    \n    while (left <= right) {\n      if (substr(string, left, left) != substr(string, right, right)) {\n        return(FALSE)\n      }\n      left <- left + 1\n      right <- right - 1\n    }\n    \n    return(TRUE)\n  }\n  \n  num <- num + 1\n  \n  while (TRUE) {\n    num_str <- as.character(num)\n    if (is_palindrome(num_str)) {\n      return(num)\n    }\n    num <- num + 1\n  }\n}"
        ]
    },
    {
        "id": "101",
        "prompt": "Write a function to find the kth element in the given array using 1-based indexing.",
        "solution": "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]",
        "code": [
            "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]"
        ],
        "pseudo": "# Sort the array in ascending order\n\n# Check if the kth element is within the range of the array indices\n    # If it is, return the element at index k-1\n\n# If k is out of range, return None",
        "test": [
            "assert kth_element([12,3,5,7,19], 2) == 3",
            "assert kth_element([17,24,8,23], 3) == 8",
            "assert kth_element([16,21,25,36,4], 4) == 36"
        ],
        "draft_plan": [
            "# Define a function to find the kth element in the given array.\n# Check if the input array is empty or if the value of k is invalid (less than 1 or greater than the length of the array).\n    # If true, return \"Invalid input\".\n# Sort the input array in ascending order.\n# Return the element at index k-1 in the sorted array (since 1-based indexing is used)."
        ],
        "final_plan": [
            "find_kth_element <- function(arr, k) {\n  if (length(arr) == 0 || k < 1 || k > length(arr)) {\n    return(\"Invalid input\")\n  }\n  \n  sorted_arr <- sort(arr)\n  \n  return(sorted_arr[k-1])\n}"
        ]
    },
    {
        "id": "102",
        "prompt": "Write a function to convert a snake case string to camel case string.",
        "solution": "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "code": [
            "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))"
        ],
        "pseudo": "# Split the snake case string by underscore to get individual words\n# Capitalize the first letter of each word except the first word\n# Join the words together to form the camel case string\n# Return the camel case string",
        "test": [
            "assert snake_to_camel('python_program')=='PythonProgram'",
            "assert snake_to_camel('python_language')==('PythonLanguage')",
            "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
        ],
        "draft_plan": [
            "# Split the input snake case string into individual words using the '_' delimiter\n# Capitalize the first letter of each word except the first word\n# Join the capitalized words together to form the camel case string\n# Return the camel case string"
        ],
        "final_plan": [
            "snake_to_camel <- function(snake_case_string) {\n  words <- strsplit(snake_case_string, \"_\")[[1]]\n  \n  camel_case <- words[1]\n  for (i in 2:length(words)) {\n    camel_case <- paste(camel_case, toupper(substr(words[i], 1, 1)), substr(words[i], 2), sep = \"\")\n  }\n  \n  return(camel_case)\n}"
        ]
    },
    {
        "id": "103",
        "prompt": "Write a function to find the Eulerian number a(n, m).",
        "solution": "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",
        "code": [
            "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"
        ],
        "pseudo": "To find the Eulerian number a(n, m), you can use the following code logic:\n\n1. Define a function called eulerian_number with two parameters n and m.\n2. Create a nested list called dp with n+1 rows and m+1 columns, and initialize all values to 0.\n3. Iterate through each row i from 0 to n and each column j from 0 to m.\n4. Inside the loop, check if i is equal to 0 or j is equal to 0. If true, set dp[i][j] to 1.\n5. Otherwise, set dp[i][j] to (j+1) * dp[i-1][j] + (i-j) * dp[i-1][j-1].\n6. Finally, return dp[n][m].\n\nYou can call the function eulerian_number(n, m) and pass the values of n and m to find the corresponding Eulerian number a(n, m).",
        "test": [
            "assert eulerian_num(3, 1) == 4",
            "assert eulerian_num(4, 1) == 11",
            "assert eulerian_num(5, 3) == 26"
        ],
        "draft_plan": [
            "# Define a function to calculate the Eulerian number a(n, m).\n# Create a matrix 'eulerian' of size (n+1) x (m+1) to store the Eulerian numbers.\n# Initialize the first row of the matrix with 1's, as a(0, j) = 1 for all j.\n# Iterate over the rows of the matrix starting from the second row.\n    # Iterate over the columns of the matrix starting from the second column.\n        # Calculate the Eulerian number using the formula: a(i, j) = (j+1) * a(i-1, j) + (i-j) * a(i-1, j-1)\n# Return the Eulerian number a(n, m), which would be the value at eulerian[n+1, m+1]."
        ],
        "final_plan": [
            "find_eulerian_number <- function(n, m) {\n  eulerian <- matrix(0, n+1, m+1)\n  \n  for (j in 1:(m+1)) {\n    eulerian[1, j] <- 1\n  }\n  \n  for (i in 2:(n+1)) {\n    for (j in 2:(m+1)) {\n      eulerian[i, j] <- (j+1) * eulerian[i-1, j] + (i-j) * eulerian[i-1, j-1]\n    }\n  }\n  \n  return(eulerian[n+1, m+1])\n}"
        ]
    },
    {
        "id": "104",
        "prompt": "Write a function to sort each sublist of strings in a given list of lists.",
        "solution": "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n",
        "code": [
            "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n"
        ],
        "pseudo": "# Iterate through each sublist in the given list\n    # Sort the sublist using the sorted() function and assign the sorted sublist back to the original sublist\n\n# Return the modified list with sorted sublists",
        "test": [
            "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
            "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
            "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
        ],
        "draft_plan": [
            "# Define a method to sort each sublist of strings in a given list of lists.\n# Iterate over each sublist in the input list of lists.\n    # Sort the current sublist using the sort() function.\n# Return the modified list of lists with sorted sublists."
        ],
        "final_plan": [
            "sort_sublists <- function(lst) {\n  for (i in seq_along(lst)) {\n    lst[[i]] <- sort(lst[[i]])\n  }\n  \n  return(lst)\n}"
        ]
    },
    {
        "id": "105",
        "prompt": "Write a python function to count true booleans in the given list.",
        "solution": "def count(lst):   \n    return sum(lst) ",
        "code": [
            "def count(lst):   \n    return sum(lst) "
        ],
        "pseudo": "# Initialize a count variable to 0\n\n# Iterate through each element in the list\n    # Check if the current element is True\n        # If it is, increment the count variable\n\n# Return the count variable",
        "test": [
            "assert count([True,False,True]) == 2",
            "assert count([False,False]) == 0",
            "assert count([True,True,True]) == 3"
        ],
        "draft_plan": [
            "# Define a method to count true booleans in a given list.\n# Initialize a counter for true booleans.\n# Iterate over the input list.\n    # Check if the current element is equal to TRUE.\n        # If true, increment the counter.\n# Return the count of true booleans, which would be the value of the counter."
        ],
        "final_plan": [
            "count_true_booleans <- function(lst) {\n  true_count <- 0\n  \n  for (elem in lst) {\n    if (elem == TRUE) {\n      true_count <- true_count + 1\n    }\n  }\n  \n  return(true_count)\n}"
        ]
    },
    {
        "id": "106",
        "prompt": "Write a function to append the given list to the given tuples.",
        "solution": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) ",
        "code": [
            "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) "
        ],
        "pseudo": "# Create an empty list to store the modified tuples\n\n# Iterate through each tuple in the given list\n    # Convert the tuple to a list\n    # Append the given list to the current tuple\n    # Convert the modified tuple back to a tuple\n    # Append the modified tuple to the list of modified tuples\n\n# Return the list of modified tuples",
        "test": [
            "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
            "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
            "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
        ],
        "draft_plan": [
            "# Define a function to append a given list to given tuples.\n# Create an empty list to store the tuples with the appended list.\n# Iterate over each tuple in the input list of tuples.\n    # Append the given list to the current tuple and add it to the result list.\n# Return the result list containing the tuples with the appended list."
        ],
        "final_plan": [
            "append_list_to_tuples <- function(list, tuples) {\n  result <- list()\n  \n  for (tuple in tuples) {\n    result_tuple <- c(tuple, list)\n    result <- append(result, result_tuple)\n  }\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "108",
        "prompt": "Write a function to merge three lists into a single sorted list.",
        "solution": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)",
        "code": [
            "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)"
        ],
        "pseudo": "# Concatenate all three lists into a single list\n# Sort the merged list using the sorted() function\n# Return the sorted merged list",
        "test": [
            "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
            "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
            "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
        ],
        "draft_plan": [
            "# Define a function to merge three lists into a single sorted list.\n# Concatenate the three input lists into a single list.\n# Sort the merged list in ascending order.\n# Return the sorted merged list."
        ],
        "final_plan": [
            "merge_lists <- function(list1, list2, list3) {\n  merged_list <- c(list1, list2, list3)\n  sorted_list <- sort(merged_list)\n  return(sorted_list)\n}"
        ]
    },
    {
        "id": "109",
        "prompt": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
        "solution": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ",
        "code": [
            "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count "
        ],
        "pseudo": "# Convert the binary string to a list of characters\n# Initialize a counter variable to keep track of the number of odd numbers\n\n# Rotate the binary string the given number of times\n    # Remove the last character from the binary string and prepend it to the front\n\n# Convert the rotated binary string back to a string\n# Iterate through each character in the rotated binary string\n    # Convert the character to an integer\n    # Check if the integer value is odd\n        # If so, increment the counter\n\n# Return the counter value",
        "test": [
            "assert odd_Equivalent(\"011001\",6) == 3",
            "assert odd_Equivalent(\"11011\",5) == 4",
            "assert odd_Equivalent(\"1010\",4) == 2"
        ],
        "draft_plan": [
            "# Define a function to count numbers with odd value after rotating a binary string\n# Initialize a counter variable 'count' to 0\n# Iterate through each character in the binary string\n    # If the character is '1', increment the 'count' variable by 1\n# Calculate the number of rotations by taking the modulo of the given number of rotations with the length of the binary string\n# Iterate 'count' number of times\n    # If the current iteration is odd, increment the 'count' variable by 1\n# Return the final count of numbers with odd value after rotating the binary string."
        ],
        "final_plan": [
            "count_odd_numbers <- function(binary_string, num_rotations) {\n  count <- 0\n  \n  for (char in strsplit(binary_string, \"\")[[1]]) {\n    if (char == \"1\") {\n      count <- count + 1\n    }\n  }\n  \n  num_rotations <- num_rotations %% nchar(binary_string)\n  \n  for (i in 1:count) {\n    if (i %% 2 != 0) {\n      count <- count + 1\n    }\n  }\n  \n  return(count)\n}"
        ]
    },
    {
        "id": "111",
        "prompt": "Write a function to find the common elements in given nested lists.",
        "solution": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result",
        "code": [
            "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result"
        ],
        "pseudo": "# Initialize a set to store the common elements\n\n# Iterate through each sublist in the nested list\n    # If it's the first sublist, add all elements to the set\n    # For subsequent sublists, update the set with the intersection of the current set and the sublist\n    \n# Return the set containing the common elements",
        "test": [
            "assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])",
            "assert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])",
            "assert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])"
        ],
        "draft_plan": [
            "# Define a function to find common elements in nested lists.\n# Initialize a variable 'common_elements' as an empty list.\n# Iterate over the first list in the input nested lists.\n    # Iterate over each element in the first list.\n        # Check if the current element exists in all other lists.\n            # If true, add the element to the 'common_elements' list.\n# Return the 'common_elements' list."
        ],
        "final_plan": [
            "find_common_elements <- function(nested_lists) {\n  common_elements <- list()\n  first_list <- nested_lists[[1]]\n  \n  for (element in first_list) {\n    is_common <- TRUE\n    \n    for (i in 2:length(nested_lists)) {\n      if (!(element %in% nested_lists[[i]])) {\n        is_common <- FALSE\n        break\n      }\n    }\n    \n    if (is_common) {\n      common_elements <- c(common_elements, element)\n    }\n  }\n  \n  return(common_elements)\n}"
        ]
    },
    {
        "id": "113",
        "prompt": "Write a function to check if a string represents an integer or not.",
        "solution": "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False",
        "code": [
            "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False"
        ],
        "pseudo": "# Check if the string is empty or None\n    # If so, return False\n\n# Check if the string starts with a '+' or '-'\n    # If so, remove the sign from the string\n\n# Check if the string consists only of digits\n    # If so, return True\n\n# If the string is non-empty and does not start with a sign, it is not a valid integer representation\n    # Return False",
        "test": [
            "assert check_integer(\"python\")==False",
            "assert check_integer(\"1\")==True",
            "assert check_integer(\"12345\")==True"
        ],
        "draft_plan": [
            "# Check if the input string is empty or contains only whitespace characters\n    # If true, return False because an empty string or whitespace cannot represent an integer\n# Check if the first character of the string is a plus (+) or minus (-) sign\n    # If true, remove the sign from the string and continue\n# Iterate through each character in the string\n    # Check if the current character is a digit\n        # If false, return False because a non-digit character means the string does not represent an integer\n# If all characters are digits, return True because the string represents an integer"
        ],
        "final_plan": [
            "is_integer <- function(string) {\n  if (string == \"\" || grepl(\"^\\\\s+$\", string)) {\n    return(FALSE)\n  }\n  \n  if (substr(string, 1, 1) %in% c(\"+\", \"-\")) {\n    string <- substr(string, 2)\n  }\n  \n  for (char in string) {\n    if (!is.numeric(char)) {\n      return(FALSE)\n    }\n  }\n  \n  return(TRUE)\n}"
        ]
    },
    {
        "id": "115",
        "prompt": "Write a function to check whether all dictionaries in a list are empty or not.",
        "solution": "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit",
        "code": [
            "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit"
        ],
        "pseudo": "# Iterate through each dictionary in the list\n    # Check if the current dictionary is empty\n        # If any dictionary is not empty, return False\n\n# If all dictionaries are empty, return True",
        "test": [
            "assert empty_dit([{},{},{}])==True",
            "assert empty_dit([{1,2},{},{}])==False",
            "assert empty_dit({})==True"
        ],
        "draft_plan": [
            "# Define a function to check if all dictionaries in a list are empty or not.\n# Iterate over each dictionary in the input list using 'each' iterator.\n    # Check if the current dictionary is empty.\n        # If not empty, return False.\n# If all dictionaries in the list are empty, return True."
        ],
        "final_plan": [
            "check_empty_dictionaries <- function(dict_list) {\n  for (dict in dict_list) {\n    if (!is.empty.dict(dict)) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}"
        ]
    },
    {
        "id": "116",
        "prompt": "Write a function to convert a given tuple of positive integers into a single integer.",
        "solution": "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result",
        "code": [
            "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result"
        ],
        "pseudo": "# Initialize an empty string to store the converted integer\n\n# Iterate through each element in the tuple\n    # Convert each element to a string and concatenate it to the existing string\n\n# Convert the string to an integer and return it",
        "test": [
            "assert tuple_to_int((1,2,3))==123",
            "assert tuple_to_int((4,5,6))==456",
            "assert tuple_to_int((5,6,7))==567"
        ],
        "draft_plan": [
            "# Initialize an empty string variable 'result'\n# Iterate over each element in the tuple\n    # Convert each element to a string\n    # Concatenate the string representation of the element to 'result'\n# Convert 'result' to an integer and return it"
        ],
        "final_plan": [
            "convert_tuple_to_integer <- function(tuple) {\n  result <- \"\"\n  \n  for (num in tuple) {\n    result <- paste(result, as.character(num), sep = \"\")\n  }\n  \n  return(as.integer(result))\n}"
        ]
    },
    {
        "id": "117",
        "prompt": "Write a function to convert all possible convertible elements in a list of lists to floats.",
        "solution": "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res",
        "code": [
            "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res"
        ],
        "pseudo": "# Iterate through each sublist in the input list\n    # Iterate through each element in the sublist\n        # Try to convert the element to a float\n        # If successful, replace the element with the float value\n\n# Return the modified input list",
        "test": [
            "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]",
            "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]",
            "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]"
        ],
        "draft_plan": [
            "# Define a function to convert convertible elements in a list of lists to floats.\n# Iterate over each sublist in the input list of lists.\n    # Iterate over each element in the sublist.\n        # Try to convert the element to a float using the 'as.numeric' function.\n        # If successful, replace the element with its float equivalent.\n# Return the modified list of lists with convertible elements converted to floats."
        ],
        "final_plan": [
            "convert_to_float <- function(lst) {\n  for (sublist in lst) {\n    for (i in seq_along(sublist)) {\n      element <- sublist[[i]]\n      if (is.character(element) && !is.na(as.numeric(element))) {\n        sublist[[i]] <- as.numeric(element)\n      }\n    }\n  }\n  \n  return(lst)\n}"
        ]
    },
    {
        "id": "118",
        "prompt": "Write a function to convert a string to a list of strings split on the space character.",
        "solution": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst",
        "code": [
            "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst"
        ],
        "pseudo": "# Initialize an empty list to store the split strings\n\n# Split the input string on the space character and store the result in a variable\n\n# Iterate through each element in the split result\n    # Append the element to the list\n\n# Return the list of split strings",
        "test": [
            "assert string_to_list(\"python programming\")==['python','programming']",
            "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
            "assert string_to_list(\"write a program\")==['write','a','program']"
        ],
        "draft_plan": [
            "# Initialize an empty list to store the split strings\n# Split the input string using the space character as a delimiter\n# Iterate through each substring obtained from the split\n    # Append the substring to the list of split strings\n# Return the list of split strings"
        ],
        "final_plan": [
            "convert_to_list <- function(string) {\n  split_list <- list()\n  substrings <- strsplit(string, \" \")[[1]]\n  \n  for (substring in substrings) {\n    split_list <- append(split_list, substring)\n  }\n  \n  return(split_list)\n}"
        ]
    },
    {
        "id": "119",
        "prompt": "Write a python function to find the element that appears only once in a sorted array.",
        "solution": "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)",
        "code": [
            "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)"
        ],
        "pseudo": "# Initialize a variable to keep track of the unique element\n# Iterate through the sorted array\n    # Check if the current element is equal to the next element and the previous element\n        # If not, assign the current element to the unique variable\n\n# Return the unique element",
        "test": [
            "assert search([1,1,2,2,3]) == 3",
            "assert search([1,1,3,3,4,4,5,5,7,7,8]) == 8",
            "assert search([1,2,2,3,3,4,4]) == 1"
        ],
        "draft_plan": [
            "# Define a function to find the element that appears only once in a sorted array.\n# Initialize variables 'left' and 'right' to the first and last indices of the array.\n# While 'left' is less than or equal to 'right':\n    # Calculate the mid index as the average of 'left' and 'right'.\n    # Check if the element at the mid index is not equal to its adjacent elements.\n        # If true, return the element at the mid index.\n    # Check if the element at the mid index is equal to its previous element.\n        # If true, the single element is on the right side of the mid index.\n        # Update 'left' to the next index of mid.\n    # If the element at the mid index is equal to its next element:\n        # Update 'right' to the previous index of mid.\n# If no element is found, return 'None'."
        ],
        "final_plan": [
            "find_single_element <- function(arr) {\n  left <- 1\n  right <- length(arr)\n  \n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    \n    if (arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n      return(arr[mid])\n    }\n    \n    if (arr[mid] == arr[mid-1]) {\n      left <- mid + 1\n    }\n    \n    if (arr[mid] == arr[mid+1]) {\n      right <- mid - 1\n    }\n  }\n  \n  return(NULL)\n}"
        ]
    },
    {
        "id": "120",
        "prompt": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.",
        "solution": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max",
        "code": [
            "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max"
        ],
        "pseudo": "# Initialize the maximum product to 0\n\n# Iterate through each pair of tuples in the given list\n    # Calculate the product of the absolute values of the numbers in the current pair\n    # If the calculated product is greater than the maximum product, update the maximum product\n\n# Return the maximum product",
        "test": [
            "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
            "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
            "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
        ],
        "draft_plan": [
            "# Define a function to find the maximum absolute product between numbers in pairs of tuples\n# Initialize a variable 'max_product' to store the maximum absolute product found\n# Iterate over the input list of tuples using 'each' iterator\n    # Extract the two elements of the current tuple\n    # Calculate the absolute product of the two numbers\n    # Check if the absolute product is greater than 'max_product'\n        # If true, update 'max_product' with the new maximum absolute product\n# Return the 'max_product' value as the result"
        ],
        "final_plan": [
            "find_max_abs_product <- function(test_list) {\n  max_product <- NULL\n  \n  for (tup in test_list) {\n    a <- tup[[1]]\n    b <- tup[[2]]\n    \n    abs_product <- abs(a * b)\n    \n    if (is.null(max_product) || abs_product > max_product) {\n      max_product <- abs_product\n    }\n  }\n  \n  return(max_product)\n}"
        ]
    },
    {
        "id": "123",
        "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "solution": "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)",
        "code": [
            "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)"
        ],
        "pseudo": "# Define a helper function to calculate the sum of proper divisors for a given number\n    # Initialize the sum to 0\n    # Iterate from 1 to the given number (excluding the number itself)\n        # Check if the current number is a proper divisor of the given number\n            # If it is, add it to the sum\n\n# Define the main function to find and sum all amicable numbers up to a specified number\n    # Initialize the sum of amicable numbers to 0\n    # Iterate from 1 to the specified number\n        # Calculate the sum of proper divisors for the current number\n        # Check if the sum of proper divisors is different from the current number\n            # If it is, calculate the sum of proper divisors for the sum of proper divisors\n            # Check if the second sum of proper divisors is equal to the current number\n                # If it is, add the current number to the sum of amicable numbers\n\n# Return the sum of amicable numbers",
        "test": [
            "assert amicable_numbers_sum(999)==504",
            "assert amicable_numbers_sum(9999)==31626",
            "assert amicable_numbers_sum(99)==0"
        ],
        "draft_plan": [
            "# Define a function to check if two numbers are amicable\n    # Calculate the proper divisors of the first number\n    # Sum the proper divisors\n    # Calculate the proper divisors of the second number\n    # Sum the proper divisors\n    # Check if the sums of proper divisors are equal and not equal to the numbers themselves\n# Define a function to find all amicable numbers up to a specified number\n    # Initialize a variable 'sum' to 0 to store the sum of amicable numbers\n    # Iterate from 1 to the specified number\n        # Check if the current number and its sum of proper divisors are amicable\n            # If true, add the current number to the 'sum'\n    # Return the 'sum' of amicable numbers"
        ],
        "final_plan": [
            "is_amicable <- function(a, b) {\n  sum_a <- sum(which(a %% 1:(a-1) == 0))\n  sum_b <- sum(which(b %% 1:(b-1) == 0))\n  \n  if (sum_a == b && sum_b == a && a != b) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nsum_amicable <- function(n) {\n  total_sum <- 0\n  \n  for (i in 1:n) {\n    if (is_amicable(i, sum(which(i %% 1:(i-1) == 0)))) {\n      total_sum <- total_sum + i\n    }\n  }\n  \n  return(total_sum)\n}"
        ]
    },
    {
        "id": "124",
        "prompt": "Write a function to get the angle of a complex number.",
        "solution": "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle",
        "code": [
            "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle"
        ],
        "pseudo": "import math\n\ndef get_angle(complex_num):\n    # Calculate the angle using the arctan2 function from the math module\n    angle = math.atan2(complex_num.imag, complex_num.real)\n    \n    # Convert the angle from radians to degrees\n    angle_degrees = math.degrees(angle)\n    \n    # Return the angle in degrees\n    return angle_degrees",
        "test": [
            "assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)",
            "assert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)",
            "assert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)"
        ],
        "draft_plan": [
            "# Define a function to calculate the angle of a complex number.\n# Use the argument 'complex_num' to accept the complex number.\n# Use the 'Im()' function to extract the imaginary part of the complex number.\n# Use the 'Re()' function to extract the real part of the complex number.\n# Calculate the angle using the 'atan2()' function, passing in the imaginary and real parts as arguments.\n# Convert the angle from radians to degrees using the 'radtodeg()' function.\n# Return the angle."
        ],
        "final_plan": [
            "get_complex_angle <- function(complex_num) {\n  angle <- atan2(Im(complex_num), Re(complex_num))\n  angle_degrees <- radtodeg(angle)\n  return(angle_degrees)\n}"
        ]
    },
    {
        "id": "125",
        "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "solution": "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0",
        "code": [
            "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0"
        ],
        "pseudo": "# Initialize the maximum difference as 0\n\n# Iterate through each character in the binary string\n    # If the current character is '0', increment a count variable by 1\n    # If the current character is '1', decrement the count variable by 1\n\n    # Check if the count variable is greater than the maximum difference\n        # If so, update the maximum difference to the count variable\n\n# Return the maximum difference as the result",
        "test": [
            "assert find_length(\"11000010001\") == 6",
            "assert find_length(\"10111\") == 1",
            "assert find_length(\"11011101100101\") == 2"
        ],
        "draft_plan": [
            "# Define a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n# Initialize variables for the maximum difference and the count of 0s and 1s\n# Iterate through each character in the binary string\n    # If the current character is 0, increment the count of 0s\n    # If the current character is 1, increment the count of 1s\n    # Calculate the difference between the count of 0s and 1s\n    # Update the maximum difference if the current difference is larger\n# Return the maximum difference found"
        ],
        "final_plan": [
            "max_difference <- function(binary_string) {\n  max_diff <- 0\n  count_0s <- 0\n  count_1s <- 0\n  \n  for (char in strsplit(binary_string, NULL)[[1]]) {\n    if (char == \"0\") {\n      count_0s <- count_0s + 1\n    } else if (char == \"1\") {\n      count_1s <- count_1s + 1\n    }\n    \n    diff <- count_0s - count_1s\n    if (diff > max_diff) {\n      max_diff <- diff\n    }\n  }\n  \n  return(max_diff)\n}"
        ]
    },
    {
        "id": "126",
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.",
        "solution": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum",
        "code": [
            "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum"
        ],
        "pseudo": "# Find the common divisors of the two given numbers\n    # Find the smaller number among the two\n    # Initialize an empty list to store the common divisors\n    # Iterate from 1 to the smaller number\n        # Check if the current number is a divisor of both given numbers\n            # If yes, add it to the list of common divisors\n\n# Find the sum of the common divisors\n    # Initialize a variable to store the sum\n    # Iterate through the list of common divisors\n        # Add each divisor to the sum\n\n# Return the sum of the common divisors",
        "test": [
            "assert sum(10,15) == 6",
            "assert sum(100,150) == 93",
            "assert sum(4,6) == 3"
        ],
        "draft_plan": [
            "# Define a function to find the sum of common divisors of two given numbers.\n# Create an empty list to store the common divisors.\n# Iterate through numbers from 1 to the smaller of the two given numbers.\n    # Check if both numbers are divisible by the current number.\n        # If true, add the current number to the list of common divisors.\n# Return the sum of the common divisors."
        ],
        "final_plan": [
            "find_common_divisors_sum <- function(num1, num2) {\n  common_divisors <- list()\n  \n  for (i in 1:min(num1, num2)) {\n    if (num1 %% i == 0 && num2 %% i == 0) {\n      common_divisors <- c(common_divisors, i)\n    }\n  }\n  \n  return(sum(common_divisors))\n}"
        ]
    },
    {
        "id": "127",
        "prompt": "Write a function to multiply two integers.",
        "solution": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)",
        "code": [
            "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)"
        ],
        "pseudo": "# Initialize the result to 0\n\n# If either of the integers is 0, return 0\n\n# If both integers are negative, convert them to positive\n    # Multiply the positive integers and change the sign of the result to negative\n\n# If only one integer is negative, convert it to positive\n    # Multiply the positive integers and change the sign of the result to negative\n\n# If both integers are positive, multiply them normally\n\n# Return the result",
        "test": [
            "assert multiply_int(10,20)==200",
            "assert multiply_int(5,10)==50",
            "assert multiply_int(4,8)==32"
        ],
        "draft_plan": [
            "# Initialize a variable 'result' to 0\n# Check if either of the input integers is zero\n    # If true, return 0 as the result\n# Check if both input integers have the same sign\n    # If true, set the 'result' variable as the product of the absolute values of the input integers\n    # If false, set the 'result' variable as the negative of the product of the absolute values of the input integers\n# Return the 'result' variable as the final product of the two integers"
        ],
        "final_plan": [
            "multiply_integers <- function(a, b) {\n  result <- 0\n  \n  if (a == 0 || b == 0) {\n    return(result)\n  }\n  \n  if ((a > 0 && b > 0) || (a < 0 && b < 0)) {\n    result <- abs(a) * abs(b)\n  } else {\n    result <- -(abs(a) * abs(b))\n  }\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "128",
        "prompt": "Write a function to find words that are longer than n characters from a given list of words.",
        "solution": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t",
        "code": [
            "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t"
        ],
        "pseudo": "# Create an empty list to store the result\n\n# Iterate through each word in the given list\n    # Check if the length of the current word is greater than n\n        # If the condition is satisfied, append the word to the result list\n\n# Return the result list",
        "test": [
            "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
            "assert long_words(2,\"writing a program\")==['writing','program']",
            "assert long_words(5,\"sorting list\")==['sorting']"
        ],
        "draft_plan": [
            "# Define a function to find words longer than n characters\n# Initialize an empty list to store the longer words\n# Iterate over each word in the input list\n    # Check if the length of the current word is greater than n\n        # If true, add the word to the list of longer words\n# Return the list of longer words"
        ],
        "final_plan": [
            "find_longer_words <- function(word_list, n) {\n  longer_words <- c()\n  \n  for (word in word_list) {\n    if (nchar(word) > n) {\n      longer_words <- c(longer_words, word)\n    }\n  }\n  \n  return(longer_words)\n}"
        ]
    },
    {
        "id": "129",
        "prompt": "Write a function to calculate whether the matrix is a magic square.",
        "solution": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True",
        "code": [
            "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True"
        ],
        "pseudo": "# Calculate the sum of each row, column, and diagonal of the matrix\n    # Iterate through each row of the matrix\n        # Calculate the sum of the current row\n    # Iterate through each column of the matrix\n        # Calculate the sum of the current column\n    # Calculate the sum of the main diagonal\n    # Calculate the sum of the anti-diagonal\n\n# Check if the sums of all rows, columns, and diagonals are equal and equal to the magic sum\n    # If all sums are equal to the magic sum, return True\n    # If any sum is not equal to the magic sum, return False",
        "test": [
            "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
            "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
            "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
        ],
        "draft_plan": [
            "# Define a function to check whether a given matrix is a magic square.\n# Get the number of rows and columns of the matrix.\n# Check if the number of rows is equal to the number of columns.\n    # If not, return False as the matrix is not a square matrix.\n# Calculate the expected sum for each row, column, and diagonal.\n# Initialize a variable 'is_magic_square' to True.\n# Iterate over each row in the matrix.\n    # Calculate the sum of the current row and check if it is equal to the expected sum.\n        # If not, set 'is_magic_square' to False and break the loop.\n# Iterate over each column in the matrix.\n    # Calculate the sum of the current column and check if it is equal to the expected sum.\n        # If not, set 'is_magic_square' to False and break the loop.\n# Calculate the sum of the main diagonal and check if it is equal to the expected sum.\n    # If not, set 'is_magic_square' to False.\n# Calculate the sum of the secondary diagonal and check if it is equal to the expected sum.\n    # If not, set 'is_magic_square' to False.\n# Return the value of 'is_magic_square'."
        ],
        "final_plan": [
            "is_magic_square <- function(matrix) {\n  num_rows <- nrow(matrix)\n  num_cols <- ncol(matrix)\n  \n  if (num_rows != num_cols) {\n    return(FALSE)\n  }\n  \n  expected_sum <- sum(matrix[1, ])\n  \n  is_magic_square <- TRUE\n  \n  for (i in 1:num_rows) {\n    if (sum(matrix[i, ]) != expected_sum) {\n      is_magic_square <- FALSE\n      break\n    }\n  }\n  \n  for (j in 1:num_cols) {\n    if (sum(matrix[, j]) != expected_sum) {\n      is_magic_square <- FALSE\n      break\n    }\n  }\n  \n  if (sum(diag(matrix)) != expected_sum) {\n    is_magic_square <- FALSE\n  }\n  \n  if (sum(diag(matrix[, ncol(matrix):1])) != expected_sum) {\n    is_magic_square <- FALSE\n  }\n  \n  return(is_magic_square)\n}"
        ]
    },
    {
        "id": "130",
        "prompt": "Write a function to find the item with maximum frequency in a given list.",
        "solution": "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]",
        "code": [
            "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]"
        ],
        "pseudo": "# Create an empty dictionary to store the frequency count of each item\n# Iterate through each item in the given list\n    # If the item is already in the dictionary, increment its count by 1\n    # If the item is not in the dictionary, add it with count 1\n# Find the item with the maximum frequency by finding the key with the maximum value in the dictionary\n# Return the item with the maximum frequency",
        "test": [
            "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2",
            "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8",
            "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20"
        ],
        "draft_plan": [
            "# Create a function to find the item with maximum frequency in a given list\n# Create a hash table to store the frequency of each item in the list\n# Iterate over the input list\n    # If the current item is already in the hash table, increment its frequency by 1\n    # If the current item is not in the hash table, add it with an initial frequency of 1\n# Find the maximum frequency in the hash table\n# Iterate over the hash table to find the item(s) with the maximum frequency\n    # If the frequency of the current item is equal to the maximum frequency, add the item to a result list\n# Return the result list of items with maximum frequency"
        ],
        "final_plan": [
            "find_max_frequency <- function(lst) {\n  frequency <- list()\n  \n  for (item in lst) {\n    if (is.null(frequency[[item]])) {\n      frequency[[item]] <- 1\n    } else {\n      frequency[[item]] <- frequency[[item]] + 1\n    }\n  }\n  \n  max_freq <- max(unlist(frequency))\n  \n  result <- c()\n  for (item in names(frequency)) {\n    if (frequency[[item]] == max_freq) {\n      result <- c(result, item)\n    }\n  }\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "131",
        "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
        "solution": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string",
        "code": [
            "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string"
        ],
        "pseudo": "# Create a list of vowels (including both lowercase and uppercase)\n# Convert the input string into a list of characters\n\n# Initialize two pointers: one at the start of the string and one at the end\n# Iterate while the pointers don't overlap\n    # Check if the character at the start pointer is a vowel\n        # If it is, then check if the character at the end pointer is also a vowel\n            # If it is, swap the characters at the start and end pointers\n            # Move the start pointer to the next character\n            # Move the end pointer to the previous character\n        # If the character at the end pointer is not a vowel, move the end pointer to the previous character\n    \n# Convert the modified list of characters back into a string and return it",
        "test": [
            "assert reverse_vowels(\"Python\") == \"Python\"",
            "assert reverse_vowels(\"USA\") == \"ASU\"",
            "assert reverse_vowels(\"ab\") == \"ab\""
        ],
        "draft_plan": [
            "# Create a list of vowels\n# Convert the input string to a list of characters\n# Initialize two pointers, one at the beginning and one at the end of the list\n# Iterate until the two pointers meet or cross each other\n    # If both characters at the pointers are vowels, swap them\n    # Move the first pointer one step forward\n    # Move the second pointer one step backward\n# Convert the list of characters back to a string and return it"
        ],
        "final_plan": [
            "reverse_vowels <- function(string) {\n  vowels <- c(\"a\", \"e\", \"i\", \"o\", \"u\")\n  char_list <- strsplit(string, \"\")[[1]]\n  start <- 1\n  end <- length(char_list)\n  \n  while (start < end) {\n    if (char_list[start] %in% vowels && char_list[end] %in% vowels) {\n      temp <- char_list[start]\n      char_list[start] <- char_list[end]\n      char_list[end] <- temp\n      start <- start + 1\n      end <- end - 1\n    } else if (char_list[start] %in% vowels) {\n      end <- end - 1\n    } else if (char_list[end] %in% vowels) {\n      start <- start + 1\n    } else {\n      start <- start + 1\n      end <- end - 1\n    }\n  }\n  \n  return(paste(char_list, collapse = \"\"))\n}"
        ]
    },
    {
        "id": "132",
        "prompt": "Write a function to convert a tuple to a string.",
        "solution": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str",
        "code": [
            "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str"
        ],
        "pseudo": "# Initialize an empty string\n\n# Iterate through each element in the tuple\n    # Convert the element to a string and append it to the result string\n    # Add a comma after each element except for the last element\n\n# Return the result string",
        "test": [
            "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
            "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
            "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
        ],
        "draft_plan": [
            "# Define a function to convert a tuple to a string.\n# Initialize an empty string to store the converted tuple.\n# Iterate over each element in the tuple.\n    # Convert the element to a string using the 'as.character()' function.\n    # Append the converted element to the string, separated by a space.\n# Return the converted string."
        ],
        "final_plan": [
            "convert_tuple_to_string <- function(tuple) {\n  converted_string <- \"\"\n  \n  for (element in tuple) {\n    converted_string <- paste(converted_string, as.character(element), sep = \" \")\n  }\n  \n  return(converted_string)\n}"
        ]
    },
    {
        "id": "133",
        "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
        "solution": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)",
        "code": [
            "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)"
        ],
        "pseudo": "# Initialize the sum of negative numbers to 0\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If it is negative, add it to the sum\n\n# Return the sum of negative numbers",
        "test": [
            "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
            "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
            "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
        ],
        "draft_plan": [
            "# Define a function to calculate the sum of negative numbers\n# Initialize a variable 'sum_negative' to 0\n# Iterate through each number in the given list\n    # Check if the current number is negative\n        # If true, add the current number to 'sum_negative'\n# Return 'sum_negative' as the sum of the negative numbers"
        ],
        "final_plan": [
            "calculate_sum_negative <- function(numbers) {\n  sum_negative <- 0\n  \n  for (num in numbers) {\n    if (num < 0) {\n      sum_negative <- sum_negative + num\n    }\n  }\n  \n  return(sum_negative)\n}"
        ]
    },
    {
        "id": "135",
        "prompt": "Write a function to find the nth hexagonal number.",
        "solution": "def hexagonal_num(n): \n\treturn n*(2*n - 1) ",
        "code": [
            "def hexagonal_num(n): \n\treturn n*(2*n - 1) "
        ],
        "pseudo": "# Calculate the nth hexagonal number using the formula: n * (2 * n - 1)\n\n# Return the calculated nth hexagonal number",
        "test": [
            "assert hexagonal_num(10) == 190",
            "assert hexagonal_num(5) == 45",
            "assert hexagonal_num(7) == 91"
        ],
        "draft_plan": [
            "# Define a function to find the nth hexagonal number.\n# Check if the input value n is greater than 0.\n    # If not, return an error message.\n# Calculate the nth hexagonal number using the formula: n * (2 * n - 1)\n# Return the calculated value as the nth hexagonal number."
        ],
        "final_plan": [
            "find_nth_hexagonal <- function(n) {\n  if (n <= 0) {\n    stop(\"Invalid input! n must be greater than 0.\")\n  }\n  \n  return(n * (2 * n - 1))\n}"
        ]
    },
    {
        "id": "137",
        "prompt": "Write a function to find the ratio of zeroes to non-zeroes in an array of integers.",
        "solution": "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)",
        "code": [
            "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)"
        ],
        "pseudo": "# Initialize zero_count to 0\n# Initialize non_zero_count to 0\n\n# Iterate through each element in the array\n    # Check if the current element is zero\n        # If it is zero, increment zero_count\n        # If it is not zero, increment non_zero_count\n\n# Calculate the ratio of zeroes to non-zeroes\n# Return the ratio",
        "test": [
            "assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)",
            "assert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)",
            "assert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)"
        ],
        "draft_plan": [
            "# Define a function to find the ratio of zeroes to non-zeroes in an array of integers\n# Initialize two variables: 'zero_count' to 0 and 'non_zero_count' to 0\n# Iterate over each element in the array\n    # Check if the current element is equal to 0\n        # If true, increment 'zero_count' by 1\n        # If false, increment 'non_zero_count' by 1\n# Calculate the ratio of zeroes to non-zeroes by dividing 'zero_count' by 'non_zero_count'\n# Return the calculated ratio"
        ],
        "final_plan": [
            "zero_to_nonzero_ratio <- function(arr) {\n  zero_count <- 0\n  non_zero_count <- 0\n  \n  for (num in arr) {\n    if (num == 0) {\n      zero_count <- zero_count + 1\n    } else {\n      non_zero_count <- non_zero_count + 1\n    }\n  }\n  \n  ratio <- zero_count / non_zero_count\n  \n  return(ratio)\n}"
        ]
    },
    {
        "id": "138",
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "solution": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True",
        "code": [
            "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True"
        ],
        "pseudo": "# Initialize a variable 'n' with the given number\n\n# Iterate while 'n' is greater than 0\n    # Check if 'n' is divisible by 2\n        # If 'n' is divisible by 2, divide 'n' by 2\n        # Otherwise, subtract the largest power of 2 less than 'n' from 'n'\n\n# If 'n' becomes 0, return True\n# Otherwise, return False",
        "test": [
            "assert is_Sum_Of_Powers_Of_Two(10) == True",
            "assert is_Sum_Of_Powers_Of_Two(7) == False",
            "assert is_Sum_Of_Powers_Of_Two(14) == True"
        ],
        "draft_plan": [
            "# Define a function to check if a given number can be represented as the sum of non-zero powers of 2.\n# Iterate through each power of 2 starting from 1 (2^0) up to the given number.\n    # If the current power of 2 is greater than the given number, break the loop.\n    # Check if the given number can be divided evenly by the current power of 2.\n        # If true, return True.\n# If the loop completes without finding a match, return False."
        ],
        "final_plan": [
            "check_power_of_two <- function(number) {\n  for (i in 0:Inf) {\n    power_of_two <- 2^i\n    if (power_of_two > number) {\n      break\n    }\n    if (number %% power_of_two == 0) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}"
        ]
    },
    {
        "id": "139",
        "prompt": "Write a function to find the circumference of a circle.",
        "solution": "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter",
        "code": [
            "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter"
        ],
        "pseudo": "# Define a function that takes the radius of the circle as a parameter\n    # Calculate the circumference of the circle using the formula: circumference = 2 * pi * radius\n    # Return the calculated circumference\n\n# Call the function with the desired radius to find the circumference of the circle",
        "test": [
            "assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)",
            "assert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)",
            "assert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)"
        ],
        "draft_plan": [
            "# Define a function to calculate the circumference of a circle.\n# Accept the radius of the circle as input.\n# Calculate the circumference using the formula: circumference = 2 * pi * radius.\n# Return the calculated circumference."
        ],
        "final_plan": [
            "find_circumference <- function(radius) {\n  circumference <- 2 * pi * radius\n  return(circumference)\n}"
        ]
    },
    {
        "id": "140",
        "prompt": "Write a function to flatten the list of lists into a single set of numbers.",
        "solution": "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) ",
        "code": [
            "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) "
        ],
        "pseudo": "# Create an empty set to store the flattened numbers\n\n# Iterate through each list in the input list of lists\n    # Iterate through each number in the current list\n        # Add the number to the set\n\n# Return the flattened set of numbers",
        "test": [
            "assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])",
            "assert set(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])",
            "assert set(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12])"
        ],
        "draft_plan": [
            "# Define a function to flatten a list of lists into a single set of numbers.\n# Initialize an empty list to store the flattened numbers.\n# Iterate over each sublist in the input list.\n    # Iterate over each number in the current sublist.\n        # Append the number to the flattened list.\n# Convert the flattened list into a set to remove any duplicate numbers.\n# Return the set of flattened numbers."
        ],
        "final_plan": [
            "flatten_list <- function(list_of_lists) {\n  flattened <- list()\n  \n  for (sublist in list_of_lists) {\n    for (num in sublist) {\n      flattened <- c(flattened, num)\n    }\n  }\n  \n  flattened <- as.list(unique(flattened))\n  \n  return(flattened)\n}"
        ]
    },
    {
        "id": "141",
        "prompt": "Write a function to sort a list of elements.",
        "solution": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums",
        "code": [
            "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums"
        ],
        "pseudo": "# Implement a sorting algorithm such as bubble sort, insertion sort, merge sort, quick sort, etc.\n\n# Define a function to take a list of elements as input\n    # Iterate through the list to compare each element with its adjacent element(s)\n        # Swap elements if they are in the wrong order\n    # Repeat the above steps until the list is sorted\n\n# Return the sorted list",
        "test": [
            "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
            "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
            "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
        ],
        "draft_plan": [
            "# Define a function to sort a list of elements.\n# Use the built-in sort() function to sort the input list in ascending order.\n# Return the sorted list."
        ],
        "final_plan": [
            "sort_list <- function(lst) {\n  sorted <- sort(lst)\n  return(sorted)\n}"
        ]
    },
    {
        "id": "142",
        "prompt": "Write a function to count number items that are identical in the same position of three given lists.",
        "solution": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result",
        "code": [
            "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result"
        ],
        "pseudo": "# Initialize a counter variable to keep track of the number of identical items\n# Iterate through each index from 0 to the length of any of the given lists\n    # Check if the elements at the current index in all three lists are identical\n        # If they are, increment the counter\n\n# Return the counter variable",
        "test": [
            "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
            "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
            "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"
        ],
        "draft_plan": [
            "# Define a function to count identical items in the same position of three given lists.\n# Initialize a counter variable to 0.\n# Iterate over the indices of the lists using 'each' iterator.\n    # Check if the items at the current index of all three lists are identical.\n        # If true, increment the counter variable by 1.\n# Return the value of the counter variable."
        ],
        "final_plan": [
            "count_identical_items <- function(list1, list2, list3) {\n  count <- 0\n  \n  for (i in seq_along(list1)) {\n    if (list1[i] == list2[i] && list1[i] == list3[i]) {\n      count <- count + 1\n    }\n  }\n  \n  return(count)\n}"
        ]
    },
    {
        "id": "143",
        "prompt": "Write a function to find number of lists present in the given tuple.",
        "solution": "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) ",
        "code": [
            "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) "
        ],
        "pseudo": "# Initialize a variable to keep track of the count of lists\n# Iterate through each element in the tuple\n    # Check if the current element is a list\n        # If it is a list, increment the count of lists by 1\n\n# Return the count of lists",
        "test": [
            "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
            "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
            "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
        ],
        "draft_plan": [
            "# Define a function to count the number of lists present in the given tuple.\n# Initialize a counter for the number of lists.\n# Iterate over each element in the tuple.\n    # Check if the current element is a list.\n        # If true, increment the counter by 1.\n# Return the counter value, which represents the number of lists present in the tuple."
        ],
        "final_plan": [
            "count_lists <- function(test_tuple) {\n  list_count <- 0\n  \n  for (element in test_tuple) {\n    if (is.list(element)) {\n      list_count <- list_count + 1\n    }\n  }\n  \n  return(list_count)\n}"
        ]
    },
    {
        "id": "145",
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.",
        "solution": "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ",
        "code": [
            "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) "
        ],
        "pseudo": "# If the array is empty, return None\n# Initialize the maximum difference to zero\n\n# Iterate through each element in the array\n    # Iterate through each element after the current element\n        # Calculate the difference between the current element and the subsequent element\n        # Update the maximum difference if the calculated difference is greater than the current maximum difference\n\n# Return the maximum difference",
        "test": [
            "assert max_Abs_Diff((2,1,5,3)) == 4",
            "assert max_Abs_Diff((9,3,2,5,1)) == 8",
            "assert max_Abs_Diff((3,2,1)) == 2"
        ],
        "draft_plan": [
            "# Initialize a variable 'max_diff' to 0\n# Iterate through each element in the input array\n    # Iterate through each element after the current element in the input array\n        # Calculate the absolute difference between the current element and the subsequent element\n        # Update 'max_diff' if the calculated difference is greater than 'max_diff'\n# Return 'max_diff' as the maximum difference between any two elements in the array"
        ],
        "final_plan": [
            "find_max_difference <- function(arr) {\n  max_diff <- 0\n  \n  for (i in 1:length(arr)) {\n    for (j in (i+1):length(arr)) {\n      diff <- abs(arr[i] - arr[j])\n      if (diff > max_diff) {\n        max_diff <- diff\n      }\n    }\n  }\n  \n  return(max_diff)\n}"
        ]
    },
    {
        "id": "160",
        "prompt": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
        "solution": "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None",
        "code": [
            "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None"
        ],
        "pseudo": "# Iterate through all possible values of x from 0 to n\n    # Calculate the value of y using the equation y = (n - ax) / b\n    # Check if y is an integer\n        # If y is an integer, return the values of x and y as a tuple\n\n# If no solution is found, return None",
        "test": [
            "assert find_solution(2, 3, 7) == (2, 1)",
            "assert find_solution(4, 2, 7) == None",
            "assert find_solution(1, 13, 17) == (4, 1)"
        ],
        "draft_plan": [
            "# Define a function to find integers x and y that satisfy ax + by = n.\n# Iterate through all possible values of x from 0 to n.\n    # Calculate the value of y using the equation y = (n - ax) / b.\n    # Check if y is an integer.\n        # If true, return the tuple (x, y).\n# If no solution is found, return None."
        ],
        "final_plan": [
            "find_solution <- function(a, b, n) {\n  for (x in 0:n) {\n    y <- (n - a*x) / b\n    \n    if (y == floor(y)) {\n      return(c(x, y))\n    }\n  }\n  \n  return(NULL)\n}"
        ]
    },
    {
        "id": "161",
        "prompt": "Write a function to remove all elements from a given list present in another list.",
        "solution": "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result",
        "code": [
            "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result"
        ],
        "pseudo": "# Initialize an empty list to store the elements not present in the other list\n\n# Iterate through each element in the given list\n    # Check if the element is not present in the other list\n        # If not present, add it to the new list\n\n# Return the new list",
        "test": [
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]",
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]",
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]"
        ],
        "draft_plan": [
            "# Define a function to remove elements from a list that are present in another list.\n# Iterate over each element in the second list.\n    # Use the `which` function to find the indices of elements in the first list that match the current element.\n    # Use the `length` function to determine if there are any matches.\n        # If matches are found, use the `-` operator to remove the elements from the first list at the matched indices.\n# Return the modified first list."
        ],
        "final_plan": [
            "remove_elements <- function(list1, list2) {\n  for (element in list2) {\n    indices <- which(list1 == element)\n    if (length(indices) > 0) {\n      list1 <- list1[-indices]\n    }\n  }\n  return(list1)\n}"
        ]
    },
    {
        "id": "162",
        "prompt": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
        "solution": "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)",
        "code": [
            "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)"
        ],
        "pseudo": "# Initialize the sum to 0\n\n# Iterate from i = 0 to n // 2 (inclusive)\n    # Calculate the term (n - 2*i)\n    # Add the term to the sum\n\n# Return the sum",
        "test": [
            "assert sum_series(6) == 12",
            "assert sum_series(10) == 30",
            "assert sum_series(9) == 25"
        ],
        "draft_plan": [
            "# Define a function to calculate the sum.\n# Initialize a variable 'result' to 0.\n# Calculate the value of 'n // 2' and assign it to 'limit'.\n# Iterate from 0 to 'limit' using 'i' as the iterator.\n    # Calculate the value of 'n - 2 * i' and add it to 'result'.\n# Return the value of 'result'."
        ],
        "final_plan": [
            "calculate_sum <- function(n) {\n  result <- 0\n  limit <- n %/% 2\n  \n  for (i in 0:limit) {\n    result <- result + (n - 2 * i)\n  }\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "163",
        "prompt": "Write a function to calculate the area of a regular polygon given the length and number of its sides.",
        "solution": "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area",
        "code": [
            "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area"
        ],
        "pseudo": "# Import the math module for trigonometric functions\nimport math\n\n# Define a function to calculate the area of a regular polygon\ndef calculate_area(length, sides):\n    # Calculate the apothem (distance from center to midpoint of a side)\n    apothem = length / (2 * math.tan(math.pi / sides))\n    \n    # Calculate the area using the formula: area = (1/2) * apothem * perimeter\n    perimeter = length * sides\n    area = (1 / 2) * apothem * perimeter\n    \n    return area",
        "test": [
            "assert math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)",
            "assert math.isclose(area_polygon(10, 15), 1731.197, rel_tol=0.001)",
            "assert math.isclose(area_polygon(9, 7), 302.909, rel_tol=0.001)"
        ],
        "draft_plan": [
            "# Define a function to calculate the area of a regular polygon.\n# Accept two parameters: length (l) and number of sides (n).\n# Calculate the apothem (a) of the polygon using the formula: a = l / (2 * tan(pi / n)).\n# Calculate the perimeter (p) of the polygon using the formula: p = n * l.\n# Calculate the area (A) of the polygon using the formula: A = (p * a) / 2.\n# Return the calculated area (A)."
        ],
        "final_plan": [
            "calculate_polygon_area <- function(length, sides) {\n  apothem <- length / (2 * tan(pi / sides))\n  perimeter <- sides * length\n  area <- (perimeter * apothem) / 2\n  \n  return(area)\n}"
        ]
    },
    {
        "id": "164",
        "prompt": "Write a function to determine if the sum of the divisors of two integers are the same.",
        "solution": "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); ",
        "code": [
            "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); "
        ],
        "pseudo": "# Define a function to calculate the sum of divisors for a given number\n    # Initialize the sum to 0\n    # Iterate through each number from 1 to the given number\n        # Check if the current number is a divisor of the given number\n            # If it is, add it to the sum\n\n# Define a function to determine if the sum of divisors for two numbers are the same\n    # Calculate the sum of divisors for both numbers\n    # Check if the sums are equal\n        # If they are, return True\n        # Otherwise, return False",
        "test": [
            "assert are_equivalent(36, 57) == False",
            "assert are_equivalent(2, 4) == False",
            "assert are_equivalent(23, 47) == True"
        ],
        "draft_plan": [
            "# Define a function to determine if the sum of divisors of two integers are the same.\n# Create a helper function to calculate the sum of divisors for a given integer.\n    # Initialize a variable 'sum' to 0.\n    # Iterate from 1 to the square root of the input number.\n        # Check if the current number is a divisor of the input number.\n            # If true, add the divisor to 'sum' and also add the quotient to 'sum' if the divisor is not equal to the quotient.\n    # Return the 'sum' of divisors.\n# In the main function, calculate the sum of divisors for both integers using the helper function.\n# Check if the sum of divisors for both integers are the same.\n    # If true, return True.\n    # If false, return False."
        ],
        "final_plan": [
            "sum_of_divisors <- function(n) {\n  div_sum <- 0\n  \n  for (i in 1:sqrt(n)) {\n    if (n %% i == 0) {\n      div_sum <- div_sum + i\n      if (i != n / i) {\n        div_sum <- div_sum + n / i\n      }\n    }\n  }\n  \n  return(div_sum)\n}\n\nare_divisor_sums_equal <- function(num1, num2) {\n  div_sum1 <- sum_of_divisors(num1)\n  div_sum2 <- sum_of_divisors(num2)\n  \n  if (div_sum1 == div_sum2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}"
        ]
    },
    {
        "id": "165",
        "prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
        "solution": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ",
        "code": [
            "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars "
        ],
        "pseudo": "# Initialize a variable to keep track of the count of characters at the same position in the English alphabet\n# Iterate through each character in the input string\n    # Convert the character to lowercase\n    # Check if the character is an alphabet character\n        # Get the position of the character in the English alphabet by subtracting the ASCII value of 'a' or 'A'\n        # Check if the position is equal to the index of the character in the string\n            # If the condition is true, increment the count\n\n# Return the count of characters at the same position in the English alphabet",
        "test": [
            "assert count_char_position(\"xbcefg\") == 2",
            "assert count_char_position(\"ABcED\") == 3",
            "assert count_char_position(\"AbgdeF\") == 5"
        ],
        "draft_plan": [
            "# Define a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n# Initialize a counter variable to 0.\n# Iterate over each character and its index in the input string.\n    # Convert the character to lowercase.\n    # Check if the character is a letter of the English alphabet.\n        # If true, check if the index of the character in the string is equal to its position in the English alphabet.\n            # If true, increment the counter by 1.\n# Return the value of the counter variable, which represents the count of characters that meet the conditions."
        ],
        "final_plan": [
            "count_same_position <- function(string) {\n  count <- 0\n  \n  for (i in seq_along(string)) {\n    char <- tolower(string[i])\n    \n    if (char %in% letters) {\n      position <- match(char, letters)\n      \n      if (position == i) {\n        count <- count + 1\n      }\n    }\n  }\n  \n  return(count)\n}"
        ]
    },
    {
        "id": "166",
        "prompt": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
        "solution": "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count",
        "code": [
            "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count"
        ],
        "pseudo": "# Initialize a variable to keep track of the count of pairs\n# Iterate through each element in the list\n    # Iterate through each element after the current element\n        # Check if the xor of the current pair is an even number\n            # If it is, increment the count of pairs\n\n# Return the count of pairs",
        "test": [
            "assert find_even_pair([5, 4, 7, 2, 1]) == 4",
            "assert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9",
            "assert find_even_pair([1, 2, 3]) == 1"
        ],
        "draft_plan": [
            "# Define a function to count the number of pairs of integers in a list that XOR to an even number.\n# Initialize a counter variable 'count' to 0.\n# Iterate over the input list using two nested loops.\n    # For each pair of integers (i, j), where i is the index of the outer loop and j is the index of the inner loop (j > i).\n        # Compute the XOR of the pair (list[i] XOR list[j]).\n        # Check if the XOR result is an even number.\n            # If true, increment the counter 'count' by 1.\n# Return the final count of pairs that XOR to an even number."
        ],
        "final_plan": [
            "count_xor_even_pairs <- function(lst) {\n  count <- 0\n  \n  for (i in 1:(length(lst)-1)) {\n    for (j in (i+1):length(lst)) {\n      xor_result <- lst[i] xor lst[j]\n      if (xor_result %% 2 == 0) {\n        count <- count + 1\n      }\n    }\n  }\n  \n  return(count)\n}"
        ]
    },
    {
        "id": "167",
        "prompt": "Write a python function to find the smallest power of 2 greater than or equal to n.",
        "solution": "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; ",
        "code": [
            "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; "
        ],
        "pseudo": "# Initialize a variable to store the smallest power of 2\n# Check if n is already a power of 2\n    # If it is, return n\n    \n# Iterate through powers of 2 starting from 2\n    # Check if the current power of 2 is greater than or equal to n\n        # If it is, return the current power of 2",
        "test": [
            "assert next_power_of_2(0) == 1",
            "assert next_power_of_2(5) == 8",
            "assert next_power_of_2(17) == 32"
        ],
        "draft_plan": [
            "# Initialize a variable 'power' to 0\n# Iterate until the power of 2 is greater than or equal to n\n    # Increment the power by 1\n# Return the result of 2 raised to the power"
        ],
        "final_plan": [
            "find_smallest_power_of_2 <- function(n) {\n  power <- 0\n  \n  while (2^power < n) {\n    power <- power + 1\n  }\n  \n  return(2^power)\n}"
        ]
    },
    {
        "id": "168",
        "prompt": "Write a function to count the number of occurrences of a number in a given list.",
        "solution": "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count ",
        "code": [
            "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count "
        ],
        "pseudo": "# Initialize a count variable to 0\n\n# Iterate through each element in the list\n    # Check if the current element is equal to the given number\n        # If it is, increment the count variable\n\n# Return the count variable",
        "test": [
            "assert frequency([1,2,3], 4) == 0",
            "assert frequency([1,2,2,3,3,3,4], 3) == 3",
            "assert frequency([0,1,2,3,1,2], 1) == 2"
        ],
        "draft_plan": [
            "# Define a function to count the number of occurrences of a number in a given list.\n# Initialize a counter variable to 0.\n# Iterate over each element in the list using a loop.\n    # Check if the current element is equal to the given number.\n        # If true, increment the counter variable.\n# Return the final value of the counter variable as the count of occurrences."
        ],
        "final_plan": [
            "count_occurrences <- function(lst, number) {\n  count <- 0\n  \n  for (num in lst) {\n    if (num == number) {\n      count <- count + 1\n    }\n  }\n  \n  return(count)\n}"
        ]
    },
    {
        "id": "170",
        "prompt": "Write a function to find the sum of numbers in a list within a range specified by two indices.",
        "solution": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   ",
        "code": [
            "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   "
        ],
        "pseudo": "# Initialize a variable to store the sum\n\n# Iterate through each number in the list within the given range\n    # Add the current number to the sum\n\n# Return the sum",
        "test": [
            "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29",
            "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16",
            "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38"
        ],
        "draft_plan": [
            "# Define a function to find the sum of numbers in a list within a given range.\n# Take three parameters: the input list, the starting index, and the ending index.\n# Initialize a variable 'sum' to 0.\n# Iterate over the indices within the given range.\n    # Add the value at each index to the 'sum' variable.\n# Return the final value of 'sum'."
        ],
        "final_plan": [
            "sum_in_range <- function(lst, start_index, end_index) {\n  sum <- 0\n  \n  for (i in start_index:end_index) {\n    sum <- sum + lst[i]\n  }\n  \n  return(sum)\n}"
        ]
    },
    {
        "id": "171",
        "prompt": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
        "solution": "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter",
        "code": [
            "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter"
        ],
        "pseudo": "# Calculate the perimeter of a regular pentagon using the formula:\n    # perimeter = 5 * side_length\n\n# Return the calculated perimeter",
        "test": [
            "assert perimeter_pentagon(5) == 25",
            "assert perimeter_pentagon(10) == 50",
            "assert perimeter_pentagon(15) == 75"
        ],
        "draft_plan": [
            "# Define a function to calculate the perimeter of a regular pentagon\n# The perimeter of a regular pentagon is given by the formula: perimeter = 5 * length_of_side\n# Multiply the length of the side by 5 to calculate the perimeter\n# Return the calculated perimeter"
        ],
        "final_plan": [
            "find_pentagon_perimeter <- function(length_of_side) {\n  perimeter <- 5 * length_of_side\n  return(perimeter)\n}"
        ]
    },
    {
        "id": "172",
        "prompt": "Write a function to count the number of occurence of the string 'std' in a given string.",
        "solution": "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count",
        "code": [
            "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count"
        ],
        "pseudo": "# Initialize a count variable to 0\n\n# Iterate through each character and its index in the input string\n    # Check if the current character and the next two characters form the string 'std'\n        # If the condition is satisfied, increment the count variable\n\n# Return the count variable",
        "test": [
            "assert count_occurance(\"letstdlenstdporstd\") == 3",
            "assert count_occurance(\"truststdsolensporsd\") == 1",
            "assert count_occurance(\"makestdsostdworthit\") == 2",
            "assert count_occurance(\"stds\") == 1",
            "assert count_occurance(\"\") == 0"
        ],
        "draft_plan": [
            "# Define a function to count the number of occurrences of the string 'std' in a given string.\n# Initialize a variable 'count' with a value of 0 to keep track of the count of occurrences.\n# Iterate over the characters in the input string using 'each' iterator.\n    # Check if the current character and the next two characters form the string 'std'.\n        # If true, increment the count variable by 1.\n# Return the count of occurrences."
        ],
        "final_plan": [
            "count_occurrences <- function(string) {\n  count <- 0\n  \n  for (i in 1:(nchar(string)-2)) {\n    if (substr(string, i, i+2) == \"std\") {\n      count <- count + 1\n    }\n  }\n  \n  return(count)\n}"
        ]
    },
    {
        "id": "222",
        "prompt": "Write a function to check if all the elements in tuple have same data type or not.",
        "solution": "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) ",
        "code": [
            "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) "
        ],
        "pseudo": "# Get the data type of the first element in the tuple\n# Iterate through each element in the tuple starting from the second element\n    # Check if the data type of the current element matches the data type of the first element\n        # If the data types don't match, return False\n\n# If all elements have the same data type, return True\n# Otherwise, return False",
        "test": [
            "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
            "assert check_type((1, 2, \"4\") ) == False",
            "assert check_type((3, 2, 1, 4, 5) ) == True"
        ],
        "draft_plan": [
            "# Define a function to check if all elements in a tuple have the same data type.\n# If the tuple is empty, return True (since there are no elements to compare).\n# Initialize a variable 'data_type' with the data type of the first element in the tuple.\n# Iterate over each element in the tuple, starting from the second element.\n    # Check if the data type of the current element is equal to 'data_type'.\n        # If not equal, return False.\n# If all elements have the same data type, return True."
        ],
        "final_plan": [
            "check_data_type <- function(tuple) {\n  if (length(tuple) == 0) {\n    return(TRUE)\n  }\n  \n  data_type <- typeof(tuple[[1]])\n  \n  for (i in 2:length(tuple)) {\n    if (typeof(tuple[[i]]) != data_type) {\n      return(FALSE)\n    }\n  }\n  \n  return(TRUE)\n}"
        ]
    },
    {
        "id": "223",
        "prompt": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
        "solution": "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1",
        "code": [
            "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1"
        ],
        "pseudo": "# Find the index of the middle element in the array\n# If the middle element is equal to the given element and its index plus n/2 is less than or equal to the length of the array\n    # Check if the element at index (middle index + n/2) is also equal to the given element\n        # If both conditions are true, return True\n# Otherwise, return False",
        "test": [
            "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
            "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
            "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
            "assert is_majority([1, 1, 2, 2], 5, 1) == False"
        ],
        "draft_plan": [
            "# Define a function to check if an element is the majority element in a sorted array.\n# Find the index of the middle element in the array by dividing the length by 2.\n# Check if the middle element is equal to the given element.\n    # If true, check if the count of the middle element is greater than n/2.\n        # If true, return True, as the element is the majority element.\n        # If false, return False, as the element is not the majority element.\n# If the middle element is not equal to the given element, check if the element is present in the left or right half of the array.\n    # If the element is present in the left half, recursively call the function on the left half of the array.\n    # If the element is present in the right half, recursively call the function on the right half of the array.\n# Return the result of the recursive calls."
        ],
        "final_plan": [
            "is_majority_element <- function(arr, n, element) {\n  middle <- floor(n/2)\n  \n  if (arr[middle] == element) {\n    if (sum(arr == element) > n/2) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  \n  if (element < arr[middle]) {\n    return(is_majority_element(arr[1:middle-1], middle-1, element))\n  } else {\n    return(is_majority_element(arr[middle+1:n], n-middle, element))\n  }\n}"
        ]
    },
    {
        "id": "224",
        "prompt": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.",
        "solution": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ",
        "code": [
            "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count "
        ],
        "pseudo": "# Initialize a counter variable to 0\n\n# Iterate through each bit in the binary representation of the number\n    # Check if the current bit is set (equal to 1)\n        # If yes, increment the counter variable\n\n# Return the counter variable, which represents the number of set bits",
        "test": [
            "assert count_Set_Bits(2) == 1",
            "assert count_Set_Bits(4) == 1",
            "assert count_Set_Bits(6) == 2"
        ],
        "draft_plan": [
            "# Initialize a variable 'count' to 0\n# Iterate through each bit in the binary representation of the given number\n    # Check if the current bit is set (equals 1)\n        # If true, increment the 'count' variable\n# Return the 'count' variable, which represents the number of set bits in the given number"
        ],
        "final_plan": [
            "count_set_bits <- function(number) {\n  count <- 0\n  \n  while (number > 0) {\n    if (number %% 2 == 1) {\n      count <- count + 1\n    }\n    number <- number %/% 2\n  }\n  \n  return(count)\n}"
        ]
    },
    {
        "id": "226",
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.",
        "solution": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result",
        "code": [
            "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result"
        ],
        "pseudo": "# Initialize an empty string to store the result\n\n# Iterate through each character and its index in the input string\n    # Check if the index of the current character is even\n        # If it is even, append the character to the result string\n\n# Return the result string",
        "test": [
            "assert odd_values_string('abcdef') == 'ace'",
            "assert odd_values_string('python') == 'pto'",
            "assert odd_values_string('data') == 'dt'",
            "assert odd_values_string('lambs') == 'lms'"
        ],
        "draft_plan": [
            "# Initialize an empty string variable 'result'\n# Iterate through each character and its index in the input string\n    # Check if the index is even (index starts from 0)\n        # If true, append the character to 'result'\n# Return the 'result' string"
        ],
        "final_plan": [
            "remove_odd_index_chars <- function(string) {\n  result <- \"\"\n  \n  for (i in seq_along(strsplit(string, NULL)[[1]])) {\n    if (i %% 2 == 0) {\n      result <- paste(result, substr(string, i, i), sep = \"\")\n    }\n  }\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "227",
        "prompt": "Write a function to find minimum of three numbers.",
        "solution": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ",
        "code": [
            "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest "
        ],
        "pseudo": "# Compare the first two numbers and assign the minimum to a variable min_num\n\n# Compare the minimum of the first two numbers with the third number\n    # If the third number is smaller, assign it to min_num\n\n# Return min_num",
        "test": [
            "assert min_of_three(10,20,0)==0",
            "assert min_of_three(19,15,18)==15",
            "assert min_of_three(-10,-20,-30)==-30"
        ],
        "draft_plan": [
            "# Define a function to find the minimum of three numbers.\n# Initialize a variable 'minimum' to the first number.\n# Compare 'minimum' with the second number and update 'minimum' if the second number is smaller.\n# Compare 'minimum' with the third number and update 'minimum' if the third number is smaller.\n# Return the value of 'minimum'."
        ],
        "final_plan": [
            "find_minimum <- function(a, b, c) {\n  minimum <- a\n  \n  if (b < minimum) {\n    minimum <- b\n  }\n  \n  if (c < minimum) {\n    minimum <- c\n  }\n  \n  return(minimum)\n}"
        ]
    },
    {
        "id": "228",
        "prompt": "Write a python function to check whether all the bits are unset in the given range or not.",
        "solution": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False",
        "code": [
            "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False"
        ],
        "pseudo": "# Convert the range into binary representation\n# Iterate through each bit in the binary representation\n    # Check if any bit is set (1)\n        # If any bit is set, return False\n\n# If all bits are unset (0), return True",
        "test": [
            "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
            "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
            "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
        ],
        "draft_plan": [
            "# Define a function to check if all the bits are unset in the given range.\n# Iterate through each number in the range from start to end (inclusive).\n    # Check if any of the bits in the current number are set.\n        # If any bit is set, return False.\n# If no bit is found to be set in any of the numbers, return True."
        ],
        "final_plan": [
            "check_bits_unset <- function(start, end) {\n  for (num in start:end) {\n    if (num != 0) {\n      binary_num <- sprintf(\"%b\", num)\n      if (any(substr(binary_num, 1, 1) == \"1\")) {\n        return(FALSE)\n      }\n    }\n  }\n  return(TRUE)\n}"
        ]
    },
    {
        "id": "229",
        "prompt": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
        "solution": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr",
        "code": [
            "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr"
        ],
        "pseudo": "# Create two empty lists, one for negative elements and one for positive elements\n\n# Iterate through the first n elements of the array\n    # Check if the element is negative\n        # If it is, append it to the negative elements list\n    # Otherwise, append it to the positive elements list\n\n# Concatenate the negative elements list with the positive elements list\n# Return the resulting list",
        "test": [
            "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
            "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
            "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
        ],
        "draft_plan": [
            "# Create a function that takes an array and an integer n as input\n# Initialize two empty arrays: negatives and positives\n# Iterate through the first n elements of the array\n    # If the current element is negative, append it to the negatives array\n    # If the current element is positive, append it to the positives array\n# Concatenate the negatives and positives arrays to form the rearranged array\n# Return the rearranged array"
        ],
        "final_plan": [
            "rearrange_array <- function(arr, n) {\n  negatives <- c()\n  positives <- c()\n  \n  for (i in 1:n) {\n    if (arr[i] < 0) {\n      negatives <- c(negatives, arr[i])\n    } else {\n      positives <- c(positives, arr[i])\n    }\n  }\n  \n  rearranged <- c(negatives, positives)\n  return(rearranged)\n}"
        ]
    },
    {
        "id": "230",
        "prompt": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
        "solution": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2",
        "code": [
            "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2"
        ],
        "pseudo": "# Define a function that takes in a string and a character as arguments\n    # Convert the string into a list of characters\n    # Iterate through each character in the list\n        # Check if the character is a blank space\n            # If it is, replace it with the given character\n    # Join the list of characters back into a string\n    # Return the modified string\n\n# Example usage:\n# string = \"Hello World\"\n# character = \"-\"\n# modified_string = replace_spaces(string, character)\n# print(modified_string) --> \"Hello-World\"",
        "test": [
            "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
            "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
            "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
        ],
        "draft_plan": [
            "# Define a function that takes in a string and a character as parameters.\n# Use the gsub() function to replace all occurrences of blank spaces in the string with the character.\n# Return the modified string."
        ],
        "final_plan": [
            "replace_spaces <- function(string, character) {\n  modified_string <- gsub(\" \", character, string)\n  return(modified_string)\n}"
        ]
    },
    {
        "id": "232",
        "prompt": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.",
        "solution": "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest",
        "code": [
            "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest"
        ],
        "pseudo": "# Sort the list in descending order\n# Return the first n items from the sorted list",
        "test": [
            "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])",
            "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])",
            "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])"
        ],
        "draft_plan": [
            "# Sort the input list in descending order.\n# Slice the sorted list to get the first n elements.\n# Return the sliced list containing the n largest items."
        ],
        "final_plan": [
            "get_n_largest <- function(lst, n) {\n  sorted_lst <- sort(lst, decreasing = TRUE)\n  n_largest <- sorted_lst[1:n]\n  return(n_largest)\n}"
        ]
    },
    {
        "id": "233",
        "prompt": "Write a function to find the lateral surface area of a cylinder.",
        "solution": "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface",
        "code": [
            "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface"
        ],
        "pseudo": "# Define a function to calculate the lateral surface area of a cylinder\n    # Accept the radius and height of the cylinder as arguments\n\n    # Calculate the lateral surface area using the formula: 2 * \u03c0 * radius * height\n\n    # Return the calculated lateral surface area\n\n# Call the function with the desired radius and height values and print the result",
        "test": [
            "assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)",
            "assert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)",
            "assert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)"
        ],
        "draft_plan": [
            "# Define a function to calculate the lateral surface area of a cylinder\n# Accept two parameters: 'radius' and 'height' representing the dimensions of the cylinder\n# Calculate the lateral surface area using the formula: 2 * pi * radius * height\n# Return the calculated lateral surface area"
        ],
        "final_plan": [
            "find_lateral_surface_area <- function(radius, height) {\n  lateral_area <- 2 * pi * radius * height\n  return(lateral_area)\n}"
        ]
    },
    {
        "id": "234",
        "prompt": "Write a function to find the volume of a cube given its side length.",
        "solution": "def volume_cube(l):\n  volume = l * l * l\n  return volume",
        "code": [
            "def volume_cube(l):\n  volume = l * l * l\n  return volume"
        ],
        "pseudo": "# Define a function to calculate the volume of a cube\n    # Accept a parameter for the side length of the cube\n    # Calculate the volume using the formula V = side_length^3\n    # Return the calculated volume",
        "test": [
            "assert volume_cube(3)==27",
            "assert volume_cube(2)==8",
            "assert volume_cube(5)==125"
        ],
        "draft_plan": [
            "# Define a function to find the volume of a cube given its side length.\n# Calculate the volume of the cube by cubing the side length.\n# Return the calculated volume."
        ],
        "final_plan": [
            "find_cube_volume <- function(side_length) {\n  volume <- side_length^3\n  return(volume)\n}"
        ]
    },
    {
        "id": "235",
        "prompt": "Write a python function to set all even bits of a given number.",
        "solution": "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) ",
        "code": [
            "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) "
        ],
        "pseudo": "# Create a mask with all even bits set to 1 and odd bits set to 0\n# Perform bitwise OR operation between the given number and the mask\n# Return the updated number",
        "test": [
            "assert even_bit_set_number(10) == 10",
            "assert even_bit_set_number(20) == 30",
            "assert even_bit_set_number(30) == 30"
        ],
        "draft_plan": [
            "# Convert the given number to binary representation\n# Initialize a variable 'result' to store the modified binary number\n# Iterate through each bit in the binary representation of the number\n    # Check if the bit position is even\n        # If true, set the bit to 1 in the 'result' variable\n        # If false, keep the bit as it is in the 'result' variable\n# Convert the 'result' binary number back to decimal representation\n# Return the modified decimal number"
        ],
        "final_plan": [
            "set_even_bits <- function(num) {\n  binary <- as.binary(num)\n  result <- 0\n  \n  for (i in seq_along(binary)) {\n    if (i %% 2 == 0) {\n      result <- result + 2^(i-1)\n    }\n  }\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "237",
        "prompt": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.",
        "solution": "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) ",
        "code": [
            "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) "
        ],
        "pseudo": "# Initialize an empty dictionary\n\n# Iterate through each tuple in the list\n    # Check if the current tuple is already a key in the dictionary\n        # If it is, increment the count by 1\n        # If it is not, add the tuple as a key with a count of 1\n\n# Return the dictionary",
        "test": [
            "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
            "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
            "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
        ],
        "draft_plan": [
            "# Define a function to count tuple occurrences\n# Create an empty dictionary to store the counts\n# Iterate over the input list of tuples using 'each' iterator\n    # Convert the current tuple to a string representation\n    # Check if the string representation exists as a key in the dictionary\n        # If true, increment the count for that tuple by 1\n        # If false, add the tuple as a key in the dictionary with an initial count of 1\n# Return the dictionary mapping each unique tuple to its count"
        ],
        "final_plan": [
            "count_tuple_occurrences <- function(tuple_list) {\n  tuple_counts <- list()\n  \n  for (tup in tuple_list) {\n    tuple_str <- toString(tup)\n    \n    if (tuple_str %in% names(tuple_counts)) {\n      tuple_counts[[tuple_str]] <- tuple_counts[[tuple_str]] + 1\n    } else {\n      tuple_counts[[tuple_str]] <- 1\n    }\n  }\n  \n  return(tuple_counts)\n}"
        ]
    },
    {
        "id": "238",
        "prompt": "Write a python function to count the number of non-empty substrings of a given string.",
        "solution": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ",
        "code": [
            "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); "
        ],
        "pseudo": "# Initialize a counter variable to 0\n\n# Iterate through each character and its index in the input string\n    # Iterate through each substring starting from the current character\n        # Increment the counter variable by 1 for each non-empty substring\n\n# Return the counter variable",
        "test": [
            "assert number_of_substrings(\"abc\") == 6",
            "assert number_of_substrings(\"abcd\") == 10",
            "assert number_of_substrings(\"abcde\") == 15"
        ],
        "draft_plan": [
            "# Initialize a variable 'count' to 0\n# Iterate through each character and its index in the input string\n    # Iterate through each possible substring starting from the current character\n        # Increment 'count' by 1 for each non-empty substring\n# Return the value of 'count' as the total number of non-empty substrings"
        ],
        "final_plan": [
            "count_substrings <- function(string) {\n  count <- 0\n  \n  for (i in seq_along(string)) {\n    for (j in i:length(string)) {\n      if (i != j) {\n        count <- count + 1\n      }\n    }\n  }\n  \n  return(count)\n}"
        ]
    },
    {
        "id": "239",
        "prompt": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
        "solution": "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]",
        "code": [
            "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]"
        ],
        "pseudo": "# Initialize a variable count to keep track of the number of possible sequences\n\n# Create a recursive function to find the number of possible sequences\n    # Base case: if n is equal to 0, return 1 (as we have found a valid sequence)\n    \n    # Initialize a variable total_count to keep track of the total number of sequences\n    \n    # Iterate through all possible values for the current element in the sequence\n        # Check if the current element is greater than or equal to twice the previous element and less than or equal to m\n            # If it is, recursively call the function with n-1 and update the total_count by adding the result\n            \n    # Return the total_count\n    \n# Call the recursive function with the given values of m and n and store the result in the variable count\n\n# Return the value of count as the final result",
        "test": [
            "assert get_total_number_of_sequences(10, 4) == 4",
            "assert get_total_number_of_sequences(5, 2) == 6",
            "assert get_total_number_of_sequences(16, 3) == 84"
        ],
        "draft_plan": [
            "# Define a function that takes in two positive integers, m and n\n# Create a counter variable to keep track of the number of possible sequences\n# Create a helper function to recursively generate sequences\n    # The helper function should take in the current sequence length, the maximum value m, the previous element, and the counter variable\n    # Base case: If the current sequence length is equal to n, increment the counter and return\n    # Recursive case: Iterate from twice the previous element to m (inclusive)\n        # Append the current number to the sequence\n        # Call the helper function recursively with the updated sequence length, maximum value m, current number as the previous element, and the counter variable\n# Call the helper function initially with a sequence length of 1, maximum value m, previous element of 0, and the counter variable\n# Return the counter variable, which represents the number of possible sequences"
        ],
        "final_plan": [
            "count_sequences <- function(m, n) {\n  counter <- 0\n  \n  generate_sequences <- function(length, max_val, prev_elem) {\n    if (length == n) {\n      counter <<- counter + 1\n      return\n    }\n    \n    for (num in seq(prev_elem * 2, max_val)) {\n      generate_sequences(length + 1, max_val, num)\n    }\n  }\n  \n  generate_sequences(1, m, 0)\n  return(counter)\n}"
        ]
    },
    {
        "id": "240",
        "prompt": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
        "solution": "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n",
        "code": [
            "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n"
        ],
        "pseudo": "# Define a function that takes two lists as input\ndef replace_last_element(list1, list2):\n    # Replace the last element of list1 with the elements of list2\n    list1[-1:] = list2\n    # Return the modified list1\n    return list1",
        "test": [
            "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
            "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
            "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
        ],
        "draft_plan": [
            "# Define a function that takes in two lists as input\n# Extract the last element of the first list\n# Remove the last element from the first list\n# Append the elements of the second list to the first list\n# Return the updated first list"
        ],
        "final_plan": [
            "replace_last_element <- function(list1, list2) {\n  last_element <- list1[length(list1)]\n  list1 <- list1[-length(list1)]\n  list1 <- c(list1, list2)\n  \n  return(list1)\n}"
        ]
    },
    {
        "id": "242",
        "prompt": "Write a function to count the total number of characters in a string.",
        "solution": "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total",
        "code": [
            "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total"
        ],
        "pseudo": "# Initialize a variable to keep track of the character count, set it to 0\n\n# Iterate through each character in the string\n    # Increment the character count by 1\n\n# Return the character count",
        "test": [
            "assert count_charac(\"python programming\")==18",
            "assert count_charac(\"language\")==8",
            "assert count_charac(\"words\")==5"
        ],
        "draft_plan": [
            "# Define a function to count the total number of characters in a string.\n# Initialize a variable 'count' to 0 to store the count of characters.\n# Iterate through each character in the string.\n    # Increment the 'count' variable by 1 for each character.\n# Return the final value of 'count' which represents the total number of characters in the string."
        ],
        "final_plan": [
            "count_characters <- function(string) {\n  count <- 0\n  \n  for (char in strsplit(string, NULL)[[1]]) {\n    count <- count + 1\n  }\n  \n  return(count)\n}"
        ]
    },
    {
        "id": "244",
        "prompt": "Write a python function to find the next perfect square greater than a given number.",
        "solution": "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN ",
        "code": [
            "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN "
        ],
        "pseudo": "# Calculate the square root of the given number using math.sqrt() function\n\n# Increment the square root by 1\n\n# Calculate the next perfect square by squaring the incremented square root\n\n# Return the next perfect square",
        "test": [
            "assert next_Perfect_Square(35) == 36",
            "assert next_Perfect_Square(6) == 9",
            "assert next_Perfect_Square(9) == 16"
        ],
        "draft_plan": [
            "# Find the square root of the given number and store it in a variable 'root'\n# Increment 'root' by 1 to get the next integer\n# Calculate the square of 'root' and store it in a variable 'next_square'\n# Return 'next_square' as the next perfect square greater than the given number"
        ],
        "final_plan": [
            "find_next_perfect_square <- function(num) {\n  root <- sqrt(num)\n  next_root <- ceiling(root)\n  next_square <- next_root^2\n  return(next_square)\n}"
        ]
    },
    {
        "id": "245",
        "prompt": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.",
        "solution": "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum",
        "code": [
            "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum"
        ],
        "pseudo": "# Initialize two arrays of the same length as the input array, one to store the maximum increasing subsequence sum ending at each index, and the other to store the maximum decreasing subsequence sum starting at each index\n\n# Iterate through each index in the input array\n    # Find the maximum increasing subsequence sum ending at the current index by comparing it with all previous indices\n    # Find the maximum decreasing subsequence sum starting at the current index by comparing it with all next indices\n\n# Find the maximum bitonic subsequence sum by adding the maximum increasing subsequence sum and the maximum decreasing subsequence sum for each index, and subtracting the value of the current index from the sum\n\n# Return the maximum bitonic subsequence sum",
        "test": [
            "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194",
            "assert max_sum([80, 60, 30, 40, 20, 10]) == 210",
            "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138"
        ],
        "draft_plan": [
            "# Define a function to find the maximum sum of a bitonic subsequence.\n# Create two arrays of the same length as the input array, one to store the maximum increasing subsequence sum and the other to store the maximum decreasing subsequence sum.\n# Initialize the maximum sum variables for both increasing and decreasing subsequences to 0.\n# Iterate over each element in the input array.\n    # Calculate the maximum increasing subsequence sum up to the current element by finding the maximum sum of the previous elements that are smaller than the current element.\n    # Calculate the maximum decreasing subsequence sum from the current element onwards by finding the maximum sum of the subsequent elements that are smaller than the current element.\n# Iterate over each element in the input array.\n    # Calculate the maximum bitonic subsequence sum for the current element by adding the maximum increasing subsequence sum up to the current element and the maximum decreasing subsequence sum from the current element onwards.\n    # Update the maximum bitonic subsequence sum variable if the current sum is greater than the previous maximum.\n# Return the maximum bitonic subsequence sum found."
        ],
        "final_plan": [
            "find_max_bitonic_sum <- function(arr) {\n  n <- length(arr)\n  max_increasing_sum <- rep(0, n)\n  max_decreasing_sum <- rep(0, n)\n  max_bitonic_sum <- 0\n  \n  for (i in 1:n) {\n    for (j in 1:i) {\n      if (arr[i] > arr[j] && max_increasing_sum[i] < max_increasing_sum[j] + arr[i]) {\n        max_increasing_sum[i] <- max_increasing_sum[j] + arr[i]\n      }\n    }\n  }\n  \n  for (i in n:1) {\n    for (j in n:i) {\n      if (arr[i] > arr[j] && max_decreasing_sum[i] < max_decreasing_sum[j] + arr[i]) {\n        max_decreasing_sum[i] <- max_decreasing_sum[j] + arr[i]\n      }\n    }\n  }\n  \n  for (i in 1:n) {\n    current_sum <- max_increasing_sum[i] + max_decreasing_sum[i] - arr[i]\n    if (current_sum > max_bitonic_sum) {\n      max_bitonic_sum <- current_sum\n    }\n  }\n  \n  return(max_bitonic_sum)\n}"
        ]
    },
    {
        "id": "246",
        "prompt": "Write a function for computing square roots using the babylonian method.",
        "solution": "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;",
        "code": [
            "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;"
        ],
        "pseudo": "# Define a function to compute square root using Babylonian method\n    # Check if the input number is less than 0, if so return None\n    \n    # Initialize the guess value as the input number divided by 2\n    \n    # Iterate until the difference between the guess value and the previous guess value is less than a small threshold\n        # Compute the new guess value as the average of the previous guess value and the input number divided by the previous guess value\n        \n    # Return the final guess value as the square root\n\n# Test the function by calling it with some example inputs",
        "test": [
            "assert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)",
            "assert math.isclose(babylonian_squareroot(2), 1.414213562373095, rel_tol=0.001)",
            "assert math.isclose(babylonian_squareroot(9), 3.0, rel_tol=0.001)"
        ],
        "draft_plan": [
            "# Define a function to compute square roots using the Babylonian method\n# Take a parameter 'num' as the number for which we want to compute the square root\n# Initialize variables 'guess' and 'prev_guess' to 1.0\n# While the absolute difference between 'guess' and 'prev_guess' is greater than a small tolerance value\n    # Update 'prev_guess' to the current value of 'guess'\n    # Update 'guess' to the average of 'guess' and 'num/guess'\n# Return the final value of 'guess' as the computed square root"
        ],
        "final_plan": [
            "compute_square_root <- function(num) {\n  guess <- 1.0\n  prev_guess <- 1.0\n  tolerance <- 0.0001\n  \n  while (abs(guess - prev_guess) > tolerance) {\n    prev_guess <- guess\n    guess <- (guess + num/guess) / 2\n  }\n  \n  return(guess)\n}"
        ]
    },
    {
        "id": "247",
        "prompt": "Write a function to find the length of the longest palindromic subsequence in the given string.",
        "solution": "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]",
        "code": [
            "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]"
        ],
        "pseudo": "# Create a 2D array of size n x n, where n is the length of the input string\n# Fill the diagonal with 1, as each character is a palindrome of length 1\n\n# Iterate through the remaining elements of the array in a bottom-up manner\n    # If the characters at the current indices match\n        # Set the value of the current cell as 2 plus the value in the cell diagonally below and to the right (i+1, j+1)\n    # Otherwise, set the value of the current cell as the maximum of the value in the cell to the left (i, j-1) and the value in the cell below (i+1, j)\n\n# Return the value in the top-right cell of the array, which represents the length of the longest palindromic subsequence",
        "test": [
            "assert lps(\"TENS FOR TENS\") == 5",
            "assert lps(\"CARDIO FOR CARDS\") == 7",
            "assert lps(\"PART OF THE JOURNEY IS PART\") == 9"
        ],
        "draft_plan": [
            "# Define a function to find the length of the longest palindromic subsequence in a given string.\n# Create a dynamic programming table of size nxn, where n is the length of the input string.\n# Initialize the diagonal of the table with 1, as each character is a palindromic subsequence of length 1.\n# Iterate over the remaining elements of the table in a bottom-up manner.\n    # If the characters at the current row and column are the same, set the value of the current element to the value of the element on the diagonal (i+1, j-1) plus 2.\n    # If the characters are different, set the value of the current element to the maximum of the element on the left (i, j-1) and the element on the bottom (i+1, j).\n# The value in the top right corner of the table represents the length of the longest palindromic subsequence in the input string.\n# Return the value in the top right corner of the table."
        ],
        "final_plan": [
            "find_longest_palindromic_subsequence <- function(string) {\n  n <- nchar(string)\n  dp <- matrix(0, n, n)\n  \n  for (i in 1:n) {\n    dp[i,i] <- 1\n  }\n  \n  for (len in 2:n) {\n    for (i in 1:(n-len+1)) {\n      j <- i+len-1\n      if (substr(string, i, i) == substr(string, j, j)) {\n        dp[i,j] <- dp[i+1,j-1] + 2\n      } else {\n        dp[i,j] <- max(dp[i,j-1], dp[i+1,j])\n      }\n    }\n  }\n  \n  return(dp[1,n])\n}"
        ]
    },
    {
        "id": "248",
        "prompt": "Write a function that takes in an integer n and calculates the harmonic sum of n-1.",
        "solution": "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) ",
        "code": [
            "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) "
        ],
        "pseudo": "# Initialize the sum to 0\n\n# Iterate from i = 1 to n-1\n    # Add 1/i to the sum\n\n# Return the sum",
        "test": [
            "assert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)",
            "assert math.isclose(harmonic_sum(4), 2.083333333333333, rel_tol=0.001)",
            "assert math.isclose(harmonic_sum(19), 3.547739657143682, rel_tol=0.001)"
        ],
        "draft_plan": [
            "# Define a function to calculate the harmonic sum of n-1.\n# Initialize a variable 'sum' to 0.\n# Iterate from 1 to n-1 using a for loop.\n    # Add the reciprocal of the current number to 'sum'.\n# Return the value of 'sum' as the harmonic sum of n-1."
        ],
        "final_plan": [
            "harmonic_sum <- function(n) {\n  sum <- 0\n  \n  for (i in 1:(n-1)) {\n    sum <- sum + (1/i)\n  }\n  \n  return(sum)\n}"
        ]
    },
    {
        "id": "249",
        "prompt": "Write a function to find the intersection of two arrays.",
        "solution": "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result",
        "code": [
            "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result"
        ],
        "pseudo": "# Initialize an empty result array\n\n# Iterate through each element in the first array\n    # Check if the current element is present in the second array\n        # If it is present, append it to the result array\n\n# Return the result array",
        "test": [
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
        ],
        "draft_plan": [
            "# Define a function to find the intersection of two arrays.\n# Create a hash set to store the unique elements from the first array.\n# Initialize an empty array to store the intersection elements.\n# Iterate over the second array.\n    # Check if the current element is present in the hash set.\n        # If true, add the element to the intersection array.\n# Return the intersection array."
        ],
        "final_plan": [
            "find_intersection <- function(array1, array2) {\n  hash_set <- unique(array1)\n  intersection <- c()\n  \n  for (element in array2) {\n    if (element %in% hash_set) {\n      intersection <- c(intersection, element)\n    }\n  }\n  \n  return(intersection)\n}"
        ]
    },
    {
        "id": "250",
        "prompt": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
        "solution": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ",
        "code": [
            "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count "
        ],
        "pseudo": "# Initialize a counter variable to 0\n\n# Iterate through each element in the tuple\n    # Check if the current element is equal to the target element\n        # If it is, increment the counter by 1\n\n# Return the value of the counter variable",
        "test": [
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
        ],
        "draft_plan": [
            "# Define a function that takes in a tuple and an element as input\n# Initialize a counter variable to keep track of the occurrences of the element\n# Iterate over each element in the tuple\n    # Check if the current element is equal to the target element\n        # If true, increment the counter\n# Return the counter variable, which represents the number of occurrences of the element in the tuple"
        ],
        "final_plan": [
            "count_occurrences <- function(tuple, element) {\n  count <- 0\n  \n  for (value in tuple) {\n    if (value == element) {\n      count <- count + 1\n    }\n  }\n  \n  return(count)\n}"
        ]
    },
    {
        "id": "251",
        "prompt": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.",
        "solution": "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list",
        "code": [
            "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list"
        ],
        "pseudo": "# Initialize an empty list to store the modified elements\n# Iterate through each element in the original list\n    # Add the given element to the modified list\n    # Add the current element from the original list to the modified list\n\n# Return the modified list",
        "test": [
            "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']",
            "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']",
            "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']"
        ],
        "draft_plan": [
            "# Create an empty list to store the result\n# Iterate through each element in the input list\n    # Append the given element to the result list\n    # Append the current element from the input list to the result list\n# Return the resulting list"
        ],
        "final_plan": [
            "insert_before_each_element <- function(lst, element) {\n  result <- list()\n  \n  for (item in lst) {\n    result <- c(result, element, item)\n  }\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "252",
        "prompt": "Write a python function to convert complex numbers to polar coordinates.",
        "solution": "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) ",
        "code": [
            "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) "
        ],
        "pseudo": "# Import the cmath module to work with complex numbers\n\n# Define a function to convert complex numbers to polar coordinates\n    # Use the cmath.polar() method to convert the complex number to polar coordinates\n\n# Call the function with the complex number as the input",
        "test": [
            "assert convert(1) == (1.0, 0.0)",
            "assert convert(4) == (4.0,0.0)",
            "assert convert(5) == (5.0,0.0)"
        ],
        "draft_plan": [
            "# Extract the real and imaginary parts of the complex number\n# Calculate the magnitude of the complex number using the formula: magnitude = sqrt(real^2 + imaginary^2)\n# Calculate the phase angle of the complex number using the formula: phase_angle = atan2(imaginary, real)\n# Convert the phase angle from radians to degrees\n# Return the magnitude and phase angle as a tuple"
        ],
        "final_plan": [
            "convert_to_polar <- function(complex_num) {\n  real_part <- Re(complex_num)\n  imaginary_part <- Im(complex_num)\n  \n  magnitude <- sqrt(real_part^2 + imaginary_part^2)\n  phase_angle <- atan2(imaginary_part, real_part) * (180 / pi)\n  \n  return(c(magnitude, phase_angle))\n}"
        ]
    },
    {
        "id": "253",
        "prompt": "Write a python function that returns the number of integer elements in a given list.",
        "solution": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr",
        "code": [
            "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr"
        ],
        "pseudo": "# Initialize a counter variable to 0\n\n# Iterate through each element in the given list\n    # Check if the current element is an integer\n        # If it is an integer, increment the counter variable\n\n# Return the counter variable as the number of integer elements in the list",
        "test": [
            "assert count_integer([1,2,'abc',1.2]) == 2",
            "assert count_integer([1,2,3]) == 3",
            "assert count_integer([1,1.2,4,5.1]) == 2"
        ],
        "draft_plan": [
            "# Initialize a variable 'count' to 0\n# Iterate through each element in the list\n    # Check if the current element is an integer using the 'is.integer()' function\n        # If the element is an integer, increment the 'count' variable by 1\n# Return the value of 'count' as the number of integer elements in the list"
        ],
        "final_plan": [
            "count_integer_elements <- function(lst) {\n  count <- 0\n  \n  for (element in lst) {\n    if (is.integer(element)) {\n      count <- count + 1\n    }\n  }\n  \n  return(count)\n}"
        ]
    },
    {
        "id": "255",
        "prompt": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.",
        "solution": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n",
        "code": [
            "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n"
        ],
        "pseudo": "import itertools\n\ndef generate_combinations(lst, n):\n    # Use itertools.combinations_with_replacement to generate all combinations of length n\n    combinations = list(itertools.combinations_with_replacement(lst, n))\n    \n    # Convert the combinations to a list of tuples\n    result = [tuple(comb) for comb in combinations]\n    \n    return result",
        "test": [
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
        ],
        "draft_plan": [
            "# Define a function to generate all combinations with repetition\n# Create an empty list to store the combinations\n# Define a helper function to generate combinations recursively\n    # If the length of the current combination is equal to n, append it to the combinations list\n    # Otherwise, iterate through each element in the input list\n        # Append the current element to the current combination\n        # Recursively call the helper function with the updated combination\n        # Remove the last element from the current combination\n# Call the helper function with an empty combination and return the combinations list"
        ],
        "final_plan": [
            "generate_combinations <- function(lst, n) {\n  combinations <- list()\n  \n  generate_combinations_helper <- function(combination) {\n    if (length(combination) == n) {\n      combinations[[length(combinations) + 1]] <- combination\n    } else {\n      for (elem in lst) {\n        combination <- c(combination, elem)\n        generate_combinations_helper(combination)\n        combination <- combination[-length(combination)]\n      }\n    }\n  }\n  \n  generate_combinations_helper(list())\n  return(combinations)\n}"
        ]
    },
    {
        "id": "256",
        "prompt": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
        "solution": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr",
        "code": [
            "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr"
        ],
        "pseudo": "# Define a function to check if a number is prime\n    # Check if the number is less than 2, return False\n    # Iterate from 2 to the square root of the number\n        # Check if the number is divisible by any number in the range\n            # If divisible, return False\n    # If the number is not divisible by any number in the range, return True\n\n# Define a function to count the number of primes less than a given number\n    # Initialize a count variable to 0\n    # Iterate from 2 to the given number\n        # Check if the current number is prime\n            # If prime, increment the count\n    # Return the count",
        "test": [
            "assert count_Primes_nums(5) == 2",
            "assert count_Primes_nums(10) == 4",
            "assert count_Primes_nums(100) == 25"
        ],
        "draft_plan": [
            "# Define a function to count the number of prime numbers less than a given non-negative number.\n# Initialize a counter variable to 0.\n# Iterate from 2 to the given number (exclusive).\n    # Check if the current number is prime.\n        # If true, increment the counter by 1.\n# Return the value of the counter as the number of prime numbers less than the given number."
        ],
        "final_plan": [
            "count_primes <- function(n) {\n  counter <- 0\n  \n  for (num in 2:(n-1)) {\n    is_prime <- TRUE\n    \n    for (i in 2:sqrt(num)) {\n      if (num %% i == 0) {\n        is_prime <- FALSE\n        break\n      }\n    }\n    \n    if (is_prime) {\n      counter <- counter + 1\n    }\n  }\n  \n  return(counter)\n}"
        ]
    },
    {
        "id": "257",
        "prompt": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.",
        "solution": "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)",
        "code": [
            "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)"
        ],
        "pseudo": "# Define the function that takes in two numbers as input\n    # Create a tuple with the second number followed by the first number\n    # Return the tuple\n\n# Call the function with the desired numbers and store the returned tuple",
        "test": [
            "assert swap_numbers(10,20)==(20,10)",
            "assert swap_numbers(15,17)==(17,15)",
            "assert swap_numbers(100,200)==(200,100)"
        ],
        "draft_plan": [
            "# Define a function that takes two numbers as input.\n# Create a tuple with the second number followed by the first number.\n# Return the tuple."
        ],
        "final_plan": [
            "swap_numbers <- function(num1, num2) {\n  return(c(num2, num1))\n}"
        ]
    },
    {
        "id": "259",
        "prompt": "Write a function to maximize the given two tuples.",
        "solution": "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "code": [
            "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) "
        ],
        "pseudo": "# Initialize a new tuple to store the maximum values\n\n# Iterate through each element in the tuples\n    # Compare the corresponding elements of both tuples\n    # Add the maximum value to the new tuple\n\n# Return the new tuple containing the maximum values",
        "test": [
            "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
            "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
            "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
        ],
        "draft_plan": [
            "# Define a function to maximize two tuples.\n# Create an empty list to store the maximized tuple.\n# Iterate over the indices of the tuples using 'each' iterator.\n    # Compare the elements at the current index of both tuples.\n        # Append the larger element to the result list.\n# Convert the result list into a tuple and return it."
        ],
        "final_plan": [
            "maximize_tuples <- function(tuple1, tuple2) {\n  result <- list()\n  \n  for (i in seq_along(tuple1)) {\n    if (tuple1[[i]] > tuple2[[i]]) {\n      result[[i]] <- tuple1[[i]]\n    } else {\n      result[[i]] <- tuple2[[i]]\n    }\n  }\n  \n  return(as.list(result))\n}"
        ]
    },
    {
        "id": "260",
        "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "solution": "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)",
        "code": [
            "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)"
        ],
        "pseudo": "# Check if the given number n is less than or equal to 2\n    # If true, return the nth newman\u2013shanks\u2013williams prime number directly\n\n# Initialize a list to store the prime numbers\n# Add the first two newman\u2013shanks\u2013williams prime numbers (2 and 3) to the list\n\n# Start the iteration from 4\n# While the length of the list is less than n\n    # Check if the current number is prime\n        # If true, add it to the list\n\n    # Increment the current number by 1\n\n# Return the nth newman\u2013shanks\u2013williams prime number from the list",
        "test": [
            "assert newman_prime(3) == 7",
            "assert newman_prime(4) == 17",
            "assert newman_prime(5) == 41"
        ],
        "draft_plan": [
            "# Define a function to find the nth Newman-Shanks-Williams prime number\n# Initialize a counter variable to 0\n# Initialize a variable 'num' to 1\n# Define a helper function to check if a number is a prime\n    # Iterate from 2 to the square root of the number\n        # Check if the number is divisible by any number in the range\n            # If true, return False\n    # If the number is not divisible by any number in the range, return True\n# While the counter is less than n\n    # Check if 'num' is a prime number\n        # If true, increment the counter\n    # Increment 'num' by 1\n# Return the value of 'num' as the nth Newman-Shanks-Williams prime number"
        ],
        "final_plan": [
            "is_prime <- function(num) {\n  if (num == 2) {\n    return(TRUE)\n  }\n  \n  if (num < 2 || num %% 2 == 0) {\n    return(FALSE)\n  }\n  \n  for (i in 3:ceiling(sqrt(num))) {\n    if (num %% i == 0) {\n      return(FALSE)\n    }\n  }\n  \n  return(TRUE)\n}\n\nfind_newman_shanks_williams <- function(n) {\n  counter <- 0\n  num <- 1\n  \n  while (counter < n) {\n    if (is_prime(num)) {\n      counter <- counter + 1\n    }\n    num <- num + 1\n  }\n  \n  return(num - 1)\n}"
        ]
    },
    {
        "id": "261",
        "prompt": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
        "solution": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "code": [
            "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) "
        ],
        "pseudo": "# Create an empty list to store the result of the division operation\n\n# Iterate through the elements of the tuples\n    # Perform the division operation on the corresponding elements of the tuples\n    # Append the result to the result list\n\n# Return the result list",
        "test": [
            "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
            "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
            "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
        ],
        "draft_plan": [
            "# Define a function that takes two tuples as input\n# Determine the length of the tuples\n# Create an empty result tuple\n# Iterate over the indices of the tuples using 'each' iterator\n    # Perform element-wise division of the corresponding elements of the tuples and store the result in the result tuple\n# Return the result tuple"
        ],
        "final_plan": [
            "divide_tuples <- function(tuple1, tuple2) {\n  n <- length(tuple1)\n  result <- vector(\"numeric\", n)\n  \n  for (i in seq_len(n)) {\n    result[i] <- tuple1[i] / tuple2[i]\n  }\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "262",
        "prompt": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.",
        "solution": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]",
        "code": [
            "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]"
        ],
        "pseudo": "# Check if the given list has enough elements to split into two parts\n    # If not, return the original list as the first part and an empty list as the second part\n\n# Split the list into two parts at index L\n    # First part is from index 0 to index L-1\n    # Second part is from index L to the end of the list\n\n# Return the resulting lists as a tuple",
        "test": [
            "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
            "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
            "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
        ],
        "draft_plan": [
            "# Define a function that takes in a list 'lst' and an integer 'L'\n# Slice the list 'lst' to create two new lists:\n  # The first part of the list will contain the elements from index 1 to index L\n  # The second part of the list will contain the elements from index L+1 to the end of the list\n# Return the resulting lists as a tuple"
        ],
        "final_plan": [
            "split_list <- function(lst, L) {\n  list1 <- lst[1:L]\n  list2 <- lst[(L+1):length(lst)]\n  \n  return(list(list1, list2))\n}"
        ]
    },
    {
        "id": "264",
        "prompt": "Write a function to calculate a dog's age in dog's years.",
        "solution": "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age",
        "code": [
            "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age"
        ],
        "pseudo": "# Define a function called calculate_dog_age that takes in one parameter: human_age\n\n# Define a variable called dog_age and set it to 0\n\n# If human_age is less than or equal to 2, set dog_age to human_age multiplied by 10.5\n# If human_age is greater than 2, calculate the dog's age in dog's years by adding:\n    # 2 (for the first two years) multiplied by 10.5\n    # The remaining years multiplied by 4\n\n# Return the value of dog_age as the result of the function",
        "test": [
            "assert dog_age(12)==61",
            "assert dog_age(15)==73",
            "assert dog_age(24)==109"
        ],
        "draft_plan": [
            "# Define a function to calculate a dog's age in dog's years.\n# Create a constant variable 'human_to_dog_ratio' to represent the ratio of human years to dog years.\n# Take the dog's age in human years as input.\n# If the input age is less than or equal to 2, multiply it by the 'human_to_dog_ratio' and assign it to 'dog_years'.\n# If the input age is greater than 2, calculate the dog years for the first two years using the 'human_to_dog_ratio',\n# and calculate the remaining dog years by multiplying the additional human years by a fixed 'additional_years_ratio'.\n# Add the dog years for the first two years and the remaining dog years to get the total 'dog_years'.\n# Return the calculated 'dog_years'."
        ],
        "final_plan": [
            "calculate_dog_years <- function(age_in_human_years) {\n  human_to_dog_ratio <- 7\n  additional_years_ratio <- 5\n  \n  if (age_in_human_years <= 2) {\n    dog_years <- age_in_human_years * human_to_dog_ratio\n  } else {\n    dog_years <- (2 * human_to_dog_ratio) + ((age_in_human_years - 2) * additional_years_ratio)\n  }\n  \n  return(dog_years)\n}"
        ]
    },
    {
        "id": "265",
        "prompt": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
        "solution": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]",
        "code": [
            "def list_split(S, step):\n    return [S[i::step] for i in range(step)]"
        ],
        "pseudo": "# Create an empty list to store the resulting lists\n\n# Iterate through the range from 0 to the length of the input list with step size n\n    # Append a sublist that starts from the current index and ends at the current index + n to the resulting list\n\n# Return the resulting list",
        "test": [
            "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]",
            "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]",
            "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]"
        ],
        "draft_plan": [
            "# Define a function that takes a list 'lst' and an integer 'n' as input\n# Initialize an empty list 'result' to store the resulting lists\n# Initialize a variable 'count' to 0\n# Initialize an empty list 'current_list' to store the current sublist\n\n# Iterate through each element 'element' in 'lst'\n    # Increment 'count' by 1\n    # Append 'element' to 'current_list'\n    # Check if 'count' is equal to 'n'\n        # If true, append a copy of 'current_list' to 'result'\n        # Reset 'count' to 0 and 'current_list' to an empty list\n    \n# If 'current_list' is not empty, append a copy of 'current_list' to 'result'\n\n# Return 'result'"
        ],
        "final_plan": [
            "split_list <- function(lst, n) {\n  result <- list()\n  count <- 0\n  current_list <- list()\n  \n  for (element in lst) {\n    count <- count + 1\n    current_list <- c(current_list, element)\n    \n    if (count == n) {\n      result <- c(result, list(current_list))\n      count <- 0\n      current_list <- list()\n    }\n  }\n  \n  if (length(current_list) > 0) {\n    result <- c(result, list(current_list))\n  }\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "266",
        "prompt": "Write a function to find the lateral surface area of a cube given its side length.",
        "solution": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA",
        "code": [
            "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA"
        ],
        "pseudo": "# Calculate the lateral surface area of a cube\n    # Lateral surface area of a cube is given by 4 times the square of the side length\n    # Return the calculated lateral surface area",
        "test": [
            "assert lateralsurface_cube(5)==100",
            "assert lateralsurface_cube(9)==324",
            "assert lateralsurface_cube(10)==400"
        ],
        "draft_plan": [
            "# Define a function to calculate the lateral surface area of a cube\n# Calculate the lateral surface area by multiplying the side length by itself and then multiplying by 4\n# Return the calculated lateral surface area"
        ],
        "final_plan": [
            "lateral_surface_area_cube <- function(side_length) {\n  lateral_surface_area <- 4 * side_length^2\n  return(lateral_surface_area)\n}"
        ]
    },
    {
        "id": "267",
        "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "solution": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
        "code": [
            "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) "
        ],
        "pseudo": "# Initialize a variable to store the sum of squares\n# Initialize a counter variable to keep track of the odd numbers\n# Initialize a variable to store the current odd number\n\n# Iterate from 1 to n (inclusive)\n    # Check if the current number is odd\n        # If it is, square the number and add it to the sum of squares\n        # Increase the counter variable by 1\n        # Check if the counter variable is equal to n\n            # If it is, break the loop\n\n# Return the sum of squares",
        "test": [
            "assert square_Sum(2) == 10",
            "assert square_Sum(3) == 35",
            "assert square_Sum(4) == 84"
        ],
        "draft_plan": [
            "# Initialize a variable 'sum_of_squares' to 0\n# Initialize a counter variable 'count' to 0\n# Iterate through each number from 1 to n\n    # Check if the current number is odd\n        # If true, add the square of the current number to 'sum_of_squares'\n        # Increment the counter 'count'\n    # Check if the value of 'count' is equal to n\n        # If true, break the loop\n# Return the value of 'sum_of_squares'"
        ],
        "final_plan": [
            "sum_of_squares_of_odds <- function(n) {\n  sum_of_squares <- 0\n  count <- 0\n  \n  for (num in 1:n) {\n    if (num %% 2 != 0) {\n      sum_of_squares <- sum_of_squares + num^2\n      count <- count + 1\n    }\n    \n    if (count == n) {\n      break\n    }\n  }\n  \n  return(sum_of_squares)\n}"
        ]
    },
    {
        "id": "268",
        "prompt": "Write a function to find the n'th star number.",
        "solution": "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) ",
        "code": [
            "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) "
        ],
        "pseudo": "# The nth star number can be calculated using the formula: n * (n + 1) / 2\n\n# Define a function to find the nth star number\n    # Calculate the star number using the formula\n    # Return the star number",
        "test": [
            "assert find_star_num(3) == 37",
            "assert find_star_num(4) == 73",
            "assert find_star_num(5) == 121"
        ],
        "draft_plan": [
            "# Define a function to find the n'th star number.\n# Check if n is a positive integer.\n    # If not, return an error message.\n# Initialize a variable 'star_number' to store the current star number.\n# Initialize a variable 'count' to keep track of the number of star numbers found.\n# Iterate from 1 to n.\n    # Calculate the current star number using the formula: star_number = 6 * count * (count - 1) + 1.\n    # Increment the count by 1.\n# Return the n'th star number."
        ],
        "final_plan": [
            "find_star_number <- function(n) {\n  if (!is.integer(n) || n <= 0) {\n    stop(\"n should be a positive integer.\")\n  }\n  \n  star_number <- 0\n  count <- 0\n  \n  for (i in 1:n) {\n    star_number <- 6 * count * (count - 1) + 1\n    count <- count + 1\n  }\n  \n  return(star_number)\n}"
        ]
    },
    {
        "id": "269",
        "prompt": "Write a function to find the ascii value of a character.",
        "solution": "def ascii_value(k):\n  ch=k\n  return ord(ch)",
        "code": [
            "def ascii_value(k):\n  ch=k\n  return ord(ch)"
        ],
        "pseudo": "To find the ASCII value of a character in Python, you can use the `ord()` function. Here is the code logic:\n\n1. Define a function `find_ascii_value(char)` that takes a character as input.\n2. Inside the function, use the `ord()` function to find the ASCII value of the character.\n3. Return the ASCII value.\n",
        "test": [
            "assert ascii_value('A')==65",
            "assert ascii_value('R')==82",
            "assert ascii_value('S')==83"
        ],
        "draft_plan": [
            "# Define a function to find the ASCII value of a character.\n# Convert the character to its corresponding ASCII value using the 'as.integer' function in R.\n# Return the ASCII value."
        ],
        "final_plan": [
            "find_ascii_value <- function(char) {\n  return(as.integer(char))\n}"
        ]
    },
    {
        "id": "270",
        "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
        "solution": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
        "code": [
            "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum"
        ],
        "pseudo": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
        "test": [
            "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30",
            "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26",
            "assert sum_even_and_even_index([5, 6, 12, 1]) == 12"
        ],
        "draft_plan": [
            "# Initialize a variable 'sum_even' to 0\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If true, add the element to 'sum_even'\n# Return 'sum_even' as the sum of even numbers at even positions"
        ],
        "final_plan": [
            "sum_even_numbers_at_even_positions <- function(lst) {\n  sum_even <- 0\n  \n  for (i in seq_along(lst)) {\n    if (i %% 2 == 0 && lst[i] %% 2 == 0) {\n      sum_even <- sum_even + lst[i]\n    }\n  }\n  \n  return(sum_even)\n}"
        ]
    },
    {
        "id": "271",
        "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "solution": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ",
        "code": [
            "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; "
        ],
        "pseudo": "# Initialize a variable `sum` to 0\n# Initialize a counter variable `count` to 0\n\n# Iterate through numbers starting from 1 until `count` reaches `n`\n    # Check if the current number is even\n        # Increment the `count` variable\n        # Add the current number raised to the fifth power to the `sum` variable\n\n# Return the `sum` variable",
        "test": [
            "assert even_Power_Sum(2) == 1056",
            "assert even_Power_Sum(3) == 8832",
            "assert even_Power_Sum(1) == 32"
        ],
        "draft_plan": [
            "# Initialize a variable 'sum' to 0 to store the sum of the even numbers raised to the fifth power\n# Initialize a variable 'count' to 0 to keep track of the number of even numbers found\n# Initialize a variable 'num' to 2 to start with the first even number\n# While 'count' is less than 'n'\n    # Calculate the fifth power of 'num' and add it to 'sum'\n    # Increment 'count' by 1\n    # Increment 'num' by 2 to move to the next even number\n# Return 'sum' as the sum of the first 'n' even numbers raised to the fifth power"
        ],
        "final_plan": [
            "sum_even_numbers <- function(n) {\n  sum <- 0\n  count <- 0\n  num <- 2\n  \n  while (count < n) {\n    sum <- sum + num^5\n    count <- count + 1\n    num <- num + 2\n  }\n  \n  return(sum)\n}"
        ]
    },
    {
        "id": "272",
        "prompt": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.",
        "solution": "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) ",
        "code": [
            "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) "
        ],
        "pseudo": "# Create an empty list to store the rear elements\n# Iterate through each tuple in the input list\n    # Append the rear element of the current tuple to the list\n\n# Return the list containing the rear elements",
        "test": [
            "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
            "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
            "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
        ],
        "draft_plan": [
            "# Define a function that takes in a list of tuples as input.\n# Initialize an empty list to store the rear elements of each tuple.\n# Iterate over each tuple in the input list.\n    # Append the last element of the current tuple to the result list.\n# Return the result list containing the rear elements of each tuple."
        ],
        "final_plan": [
            "get_rear_elements <- function(lst) {\n  rear_elements <- list()\n  \n  for (tup in lst) {\n    rear_elements <- c(rear_elements, tup[[2]])\n  }\n  \n  return(rear_elements)\n}"
        ]
    },
    {
        "id": "273",
        "prompt": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
        "solution": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) ",
        "code": [
            "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) "
        ],
        "pseudo": "# Define a function that takes in two tuples as arguments\n    # Create an empty list to store the result of the subtraction\n\n    # Iterate through the indices of the tuples\n        # Subtract the element at the current index of the first tuple from the element at the current index of the second tuple\n        # Append the result to the list\n\n    # Return the resulting list",
        "test": [
            "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
            "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
            "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
        ],
        "draft_plan": [
            "# Define a function that takes two tuples as input\n# Create an empty list to store the result of the subtraction\n# Iterate over the indices of the tuples using 'seq_along' function\n    # Subtract the element of the first tuple at the current index from the element of the second tuple at the same index\n    # Append the result to the list\n# Convert the list to a tuple and return it"
        ],
        "final_plan": [
            "subtract_tuples <- function(tuple1, tuple2) {\n  result <- list()\n  \n  for (i in seq_along(tuple1)) {\n    diff <- tuple1[[i]] - tuple2[[i]]\n    result <- c(result, diff)\n  }\n  \n  return(as.tuple(result))\n}"
        ]
    },
    {
        "id": "274",
        "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
        "solution": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ",
        "code": [
            "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) "
        ],
        "pseudo": "# Import the math module\n\n# Define a function that takes in a positive integer n\n    # Initialize a variable `sum_even` to store the sum of even index binomial coefficients\n    # Iterate from 0 to n\n        # Calculate the binomial coefficient using the math module's comb function\n        # Check if the index is even\n            # If it is even, add the binomial coefficient to `sum_even`\n    # Return `sum_even`",
        "test": [
            "assert even_binomial_Coeff_Sum(4) == 8",
            "assert even_binomial_Coeff_Sum(6) == 32",
            "assert even_binomial_Coeff_Sum(2) == 2"
        ],
        "draft_plan": [
            "# Define a function that takes a positive integer n as input\n# Initialize a variable 'sum' to 0\n# Iterate from 0 to n\n    # Calculate the binomial coefficient of index i using the formula n! / (i! * (n-i)!)\n    # Check if the index i is even\n        # If it is even, add the binomial coefficient to the 'sum' variable\n# Return the 'sum' variable"
        ],
        "final_plan": [
            "sum_even_index_binomial <- function(n) {\n  sum <- 0\n  \n  for (i in 0:n) {\n    binomial_coefficient <- factorial(n) / (factorial(i) * factorial(n - i))\n    \n    if (i %% 2 == 0) {\n      sum <- sum + binomial_coefficient\n    }\n  }\n  \n  return(sum)\n}"
        ]
    },
    {
        "id": "276",
        "prompt": "Write a function that takes in the radius and height of a cylinder and returns the the volume.",
        "solution": "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume",
        "code": [
            "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume"
        ],
        "pseudo": "# Define a function named \"cylinder_volume\" that takes in two parameters: radius and height\n    # Calculate the volume of the cylinder using the formula: volume = \u03c0 * radius^2 * height\n    # Return the calculated volume\n\n# Test the function by calling it with sample inputs",
        "test": [
            "assert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)",
            "assert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)",
            "assert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)"
        ],
        "draft_plan": [
            "# Define a function to calculate the volume of a cylinder\n# The function should take two parameters: radius and height\n# Calculate the area of the base of the cylinder using the formula: area = pi * radius^2\n# Calculate the volume of the cylinder using the formula: volume = area * height\n# Return the volume of the cylinder as the result of the function"
        ],
        "final_plan": [
            "calculate_cylinder_volume <- function(radius, height) {\n  area <- pi * radius^2\n  volume <- area * height\n  return(volume)\n}"
        ]
    },
    {
        "id": "277",
        "prompt": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.",
        "solution": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result",
        "code": [
            "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result"
        ],
        "pseudo": "# Initialize an empty dictionary to store the filtered entries\n\n# Iterate through each key-value pair in the input dictionary\n    # Check if the value is greater than or equal to n\n        # If it is, add the key-value pair to the filtered dictionary\n\n# Return the filtered dictionary",
        "test": [
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
        ],
        "draft_plan": [
            "# Define a function that takes a dictionary 'dict' and an integer 'n' as input\n# Create an empty dictionary 'filtered_dict' to store the filtered entries\n# Iterate over each key-value pair in 'dict'\n    # Check if the value is greater than or equal to 'n'\n        # If true, add the key-value pair to 'filtered_dict'\n# Return the 'filtered_dict'"
        ],
        "final_plan": [
            "filter_dictionary <- function(dict, n) {\n  filtered_dict <- list()\n  \n  for (key in names(dict)) {\n    if (dict[[key]] >= n) {\n      filtered_dict[[key]] <- dict[[key]]\n    }\n  }\n  \n  return(filtered_dict)\n}"
        ]
    },
    {
        "id": "278",
        "prompt": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.",
        "solution": "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) ",
        "code": [
            "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) "
        ],
        "pseudo": "# Initialize a count variable to 0\n# Iterate through each element and its index in the given tuple\n    # Check if the current element is equal to the target element in the tuple\n        # If it is, return the count\n    # If the current element is not equal to the target element, increment the count by 1\n\n# If the target element is not found in the tuple, return -1",
        "test": [
            "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
            "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
            "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
        ],
        "draft_plan": [
            "# Define a function to find the number of elements that occur before the tuple element.\n# Initialize a counter variable to 0.\n# Iterate over the input tuple using 'each' iterator.\n    # Check if the current element is equal to the tuple element.\n        # If true, return the value of the counter variable.\n        # If false, increment the counter variable by 1.\n# If the tuple element is not found in the tuple, return -1 to indicate it was not found."
        ],
        "final_plan": [
            "find_occurrence <- function(test_tuple, tuple_element) {\n  count <- 0\n  \n  for (i in seq_along(test_tuple)) {\n    if (test_tuple[i] == tuple_element) {\n      return(count)\n    } else {\n      count <- count + 1\n    }\n  }\n  \n  return(-1)\n}"
        ]
    },
    {
        "id": "279",
        "prompt": "Write a function to find the nth decagonal number.",
        "solution": "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n ",
        "code": [
            "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n "
        ],
        "pseudo": "# Formula to find the nth decagonal number is: 3n^2 - 2n\n\n# Define a function named nth_decagonal_number that takes an argument n\n    # Calculate the decagonal number using the formula: 3*n*n - 2*n\n    # Return the calculated decagonal number\n\n# Call the function nth_decagonal_number with the desired value of n to find the nth decagonal number",
        "test": [
            "assert is_num_decagonal(3) == 27",
            "assert is_num_decagonal(7) == 175",
            "assert is_num_decagonal(10) == 370"
        ],
        "draft_plan": [
            "# Define a function to find the nth decagonal number.\n# Check if the input number is a positive integer.\n    # If not, return an error message.\n# Calculate the nth decagonal number using the formula: n(7n-5)/2\n# Return the calculated value."
        ],
        "final_plan": [
            "find_nth_decagonal <- function(n) {\n  if (!is.integer(n) || n <= 0) {\n    stop(\"Input must be a positive integer.\")\n  }\n  \n  decagonal <- (n * (7 * n - 5)) / 2\n  \n  return(decagonal)\n}"
        ]
    },
    {
        "id": "280",
        "prompt": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
        "solution": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos",
        "code": [
            "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos"
        ],
        "pseudo": "# Initialize a variable to store the index position of the element, initialized to -1\n# Iterate through each element in the array along with its index\n    # Check if the current element is equal to the target element\n        # If they are equal, update the index variable with the current index and break out of the loop\n\n# Check if the index variable is still equal to -1\n    # If it is, set the boolean variable to False, indicating the element is not found\n    # If it is not, set the boolean variable to True, indicating the element is found\n\n# Return a tuple with the boolean variable and the index variable",
        "test": [
            "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
            "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
            "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
        ],
        "draft_plan": [
            "# Define a function that takes in an array and an element as input\n# Initialize a variable 'found' to false\n# Iterate through each index and value in the array using 'each' iterator\n    # Check if the current value is equal to the element\n        # If true, set 'found' to true and store the index in a variable 'position'\n# If 'found' is true, return a tuple with 'found' as true and 'position' as the index\n# If 'found' is false, return a tuple with 'found' as false and -1 as the index"
        ],
        "final_plan": [
            "find_element <- function(array, element) {\n  found <- FALSE\n  position <- -1\n  \n  for (i in seq_along(array)) {\n    if (array[i] == element) {\n      found <- TRUE\n      position <- i\n      break\n    }\n  }\n  \n  return(list(found = found, position = position))\n}"
        ]
    },
    {
        "id": "281",
        "prompt": "Write a python function to check if the elements of a given list are unique or not.",
        "solution": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True",
        "code": [
            "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True"
        ],
        "pseudo": "# Convert the input list into a set\n# Compare the length of the input list with the length of the set\n    # If they are equal, return True (all elements are unique)\n    # If they are not equal, return False (there are duplicate elements)",
        "test": [
            "assert all_unique([1,2,3]) == True",
            "assert all_unique([1,2,1,2]) == False",
            "assert all_unique([1,2,3,4,5]) == True"
        ],
        "draft_plan": [
            "# Create a function to check if the elements of a given list are unique or not.\n# Convert the input list to a set to remove duplicate elements.\n# Compare the length of the original list with the length of the set.\n    # If the lengths are equal, all elements are unique.\n    # If the lengths are not equal, there are duplicate elements.\n# Return True if all elements are unique, False otherwise."
        ],
        "final_plan": [
            "check_uniqueness <- function(lst) {\n  unique_set <- unique(lst)\n  \n  if (length(lst) == length(unique_set)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}"
        ]
    },
    {
        "id": "282",
        "prompt": "Write a function to subtract two lists element-wise.",
        "solution": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)",
        "code": [
            "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)"
        ],
        "pseudo": "# Create an empty list to store the result\n\n# Iterate through the indices of the lists\n    # Subtract the elements at the corresponding indices of the two lists\n    # Append the result to the result list\n\n# Return the result list",
        "test": [
            "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
            "assert sub_list([1,2],[3,4])==[-2,-2]",
            "assert sub_list([90,120],[50,70])==[40,50]"
        ],
        "draft_plan": [
            "# Define a function to subtract two lists element-wise.\n# Create an empty list to store the result of the subtraction.\n# Iterate over the indices of the input lists using the 'seq_along' function.\n    # Subtract the corresponding elements of the two input lists and append the result to the result list.\n# Return the result list."
        ],
        "final_plan": [
            "subtract_lists <- function(list1, list2) {\n  result <- list()\n  \n  for (i in seq_along(list1)) {\n    result <- c(result, list1[i] - list2[i])\n  }\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "283",
        "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
        "solution": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
        "code": [
            "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True"
        ],
        "pseudo": "# Convert the input integer to a string\n# Initialize a dictionary to store the frequency of each digit\n\n# Iterate through each digit in the string\n    # Increment the frequency of the digit in the dictionary\n\n# Iterate through each digit in the string\n    # Check if the frequency of the digit is greater than the digit itself\n        # If yes, return False\n\n# If all frequencies are less than or equal to their respective digits, return True",
        "test": [
            "assert validate(1234) == True",
            "assert validate(51241) == False",
            "assert validate(321) == True"
        ],
        "draft_plan": [
            "# Convert the input integer to a string\n# Iterate through each digit in the string\n    # Convert the digit back to an integer\n    # Count the frequency of the digit in the string\n    # Check if the frequency of the digit is greater than the digit itself\n        # If true, return False\n# If all frequencies are less than or equal to their corresponding digits, return True"
        ],
        "final_plan": [
            "check_digit_frequency <- function(n) {\n  num_str <- as.character(n)\n  \n  for (digit in num_str) {\n    digit_int <- as.integer(digit)\n    freq <- sum(num_str == digit)\n    \n    if (freq > digit_int) {\n      return(FALSE)\n    }\n  }\n  \n  return(TRUE)\n}"
        ]
    },
    {
        "id": "284",
        "prompt": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
        "solution": "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element",
        "code": [
            "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element"
        ],
        "pseudo": "# Iterate through each item in the list\n    # Check if the current item is equal to the given element\n        # If not, return False\n\n# If all items in the list are equal to the given element, return True",
        "test": [
            "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
            "assert check_element([1,2,3,4],7)==False",
            "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
        ],
        "draft_plan": [
            "# Define a function that takes in a list and an element as input\n# Iterate through each item in the list\n    # Check if the current item is not equal to the given element\n        # If true, return False\n# If all items in the list are equal to the given element, return True"
        ],
        "final_plan": [
            "all_equal <- function(lst, element) {\n  for (item in lst) {\n    if (item != element) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}"
        ]
    },
    {
        "id": "285",
        "prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "solution": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
        "code": [
            "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False"
        ],
        "pseudo": "# Iterate through each character in the input string\n    # Check if the current character is 'a'\n        # If it is, check the next two characters (if they exist) to see if they are 'b'\n            # If they are, return True\n    # If the current character is not 'a', continue to the next character\n\n# If no 'a' followed by two or three 'b' characters is found, return False",
        "test": [
            "assert text_match_two_three(\"ac\")==(False)",
            "assert text_match_two_three(\"dc\")==(False)",
            "assert text_match_two_three(\"abbbba\")==(True)"
        ],
        "draft_plan": [
            "# Define a function to check for the pattern 'ab{2,3}' in a string.\n# Iterate through each character and its index in the input string.\n    # Check if the current character is 'a' and the next two characters are 'b'.\n        # If true, return True.\n# If no match is found, return False."
        ],
        "final_plan": [
            "contains_pattern <- function(string) {\n  for (i in 1:(nchar(string)-2)) {\n    if (substr(string, i, i) == \"a\" && substr(string, i+1, i+3) %in% c(\"bb\", \"bbb\")) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}"
        ]
    },
    {
        "id": "286",
        "prompt": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.",
        "solution": "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far",
        "code": [
            "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far"
        ],
        "pseudo": "# Initialize variables to store the maximum sum and the current sum\n# Repeat the given array k times to form the modified array\n\n# Iterate through each element in the modified array\n    # Add the current element to the current sum\n    # Check if the current sum is greater than the maximum sum\n        # If so, update the maximum sum\n    # Check if the current sum is less than 0\n        # If so, reset the current sum to 0\n\n# Return the maximum sum",
        "test": [
            "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
            "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
            "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
        ],
        "draft_plan": [
            "# Define a function to find the largest sum of a contiguous array in the modified array.\n# Initialize a variable 'max_sum' to 0.\n# Repeat the given array k times to form the modified array.\n# Iterate through each index in the modified array.\n    # Initialize a variable 'current_sum' to 0.\n    # Iterate through each index starting from the current index to the end of the modified array.\n        # Add the element at the current index to 'current_sum'.\n        # If 'current_sum' is greater than 'max_sum', update 'max_sum' to 'current_sum'.\n# Return 'max_sum'."
        ],
        "final_plan": [
            "find_largest_sum <- function(arr, k) {\n  max_sum <- 0\n  modified_arr <- rep(arr, k)\n  \n  for (i in seq_along(modified_arr)) {\n    current_sum <- 0\n    \n    for (j in i:length(modified_arr)) {\n      current_sum <- current_sum + modified_arr[j]\n      \n      if (current_sum > max_sum) {\n        max_sum <- current_sum\n      }\n    }\n  }\n  \n  return(max_sum)\n}"
        ]
    },
    {
        "id": "287",
        "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "solution": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
        "code": [
            "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)"
        ],
        "pseudo": "# Initialize the sum of squares variable to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Add the square of the current number to the sum of squares variable\n\n# Return the sum of squares",
        "test": [
            "assert square_Sum(2) == 20",
            "assert square_Sum(3) == 56",
            "assert square_Sum(4) == 120"
        ],
        "draft_plan": [
            "# Define a function to calculate the sum of squares of first n even natural numbers.\n# Initialize a variable 'sum_of_squares' to 0.\n# Iterate from 2 to n (inclusive) with a step size of 2.\n    # For each even number, square it and add it to 'sum_of_squares'.\n# Return the 'sum_of_squares'."
        ],
        "final_plan": [
            "sum_of_squares_of_even <- function(n) {\n  sum_of_squares <- 0\n  \n  for (i in seq(2, n, 2)) {\n    sum_of_squares <- sum_of_squares + i^2\n  }\n  \n  return(sum_of_squares)\n}"
        ]
    },
    {
        "id": "290",
        "prompt": "Write a function to find the list of maximum length in a list of lists.",
        "solution": "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)",
        "code": [
            "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)"
        ],
        "pseudo": "# Initialize a variable to store the maximum length and an empty list to store the list with maximum length\n\n# Iterate through each list in the input list of lists\n    # Check if the length of the current list is greater than the maximum length\n        # If so, update the maximum length and the list with maximum length\n\n# Return the list with maximum length",
        "test": [
            "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
            "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
        ],
        "draft_plan": [
            "# Initialize a variable 'max_length' to 0\n# Initialize an empty list 'max_length_list'\n# Iterate through each sublist in the input list\n    # Check the length of the current sublist\n    # If the length is greater than 'max_length'\n        # Update 'max_length' to the length of the current sublist\n        # Clear 'max_length_list' and add the current sublist to it\n    # If the length is equal to 'max_length'\n        # Add the current sublist to 'max_length_list'\n# Return 'max_length_list'"
        ],
        "final_plan": [
            "find_max_length_list <- function(lst) {\n  max_length <- 0\n  max_length_list <- list()\n  \n  for (sublist in lst) {\n    length_sublist <- length(sublist)\n    \n    if (length_sublist > max_length) {\n      max_length <- length_sublist\n      max_length_list <- list(sublist)\n    } else if (length_sublist == max_length) {\n      max_length_list <- c(max_length_list, sublist)\n    }\n  }\n  \n  return(max_length_list)\n}"
        ]
    },
    {
        "id": "291",
        "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "solution": "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]",
        "code": [
            "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]"
        ],
        "pseudo": "# If there are no posts or no colors, return 0\n# If there is only 1 post, return k (number of colors)\n\n# Initialize two variables to keep track of the number of ways with different colors and the number of ways with the same color for the first two posts\n# Set the number of ways with different colors to k\n# Set the number of ways with the same color to k\n\n# Iterate from the third post to the nth post\n    # Calculate the number of ways with different colors for the current post\n        # Multiply the number of ways with different colors for the previous post by (k-1)\n    # Calculate the number of ways with the same color for the current post\n        # Set it equal to the number of ways with different colors for the previous post\n\n# Return the sum of the number of ways with different colors and the number of ways with the same color for the nth post",
        "test": [
            "assert count_no_of_ways(2, 4) == 16",
            "assert count_no_of_ways(3, 2) == 6",
            "assert count_no_of_ways(4, 4) == 228"
        ],
        "draft_plan": [
            "# Define a function to find the number of ways of painting the fence.\ncount_ways_of_painting <- function(n, k) {\n    # If there are no posts, return 0\n    if(n == 0) {\n        return(0)\n    }\n    \n    # If there is only one post, return the number of available colors\n    if(n == 1) {\n        return(k)\n    }\n    \n    # Initialize variables to store the number of ways of painting for two adjacent posts\n    same_color = k\n    different_color = k * (k-1)\n    \n    # Iterate through the remaining posts\n    for(i in 3:n) {\n        # Calculate the number of ways of painting for the current post\n        temp = (same_color + different_color) * (k-1)\n        \n        # Update the number of ways of painting for two adjacent posts\n        same_color = different_color\n        different_color = temp\n    }\n    \n    # Return the number of ways of painting for n posts\n    return(same_color + different_color)\n}"
        ],
        "final_plan": [
            "count_ways_of_painting <- function(n, k) {\n  if (n == 0) {\n    return(0)\n  }\n  \n  if (n == 1) {\n    return(k)\n  }\n  \n  same_color <- k\n  different_color <- k * (k-1)\n  \n  for (i in 3:n) {\n    temp <- (same_color + different_color) * (k-1)\n    same_color <- different_color\n    different_color <- temp\n  }\n  \n  return(same_color + different_color)\n}"
        ]
    },
    {
        "id": "292",
        "prompt": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
        "solution": "def find(n,m):  \n    q = n//m \n    return (q)",
        "code": [
            "def find(n,m):  \n    q = n//m \n    return (q)"
        ],
        "pseudo": "To find the quotient of two numbers rounded down to the nearest integer, you can use the floor division operator.\n",
        "test": [
            "assert find(10,3) == 3",
            "assert find(4,2) == 2",
            "assert find(20,5) == 4"
        ],
        "draft_plan": [
            "# Define a function to find the quotient of two numbers.\n# Use the integer division operator ('//') to divide the dividend by the divisor.\n# Return the result of the division."
        ],
        "final_plan": [
            "find_quotient <- function(dividend, divisor) {\n  quotient <- dividend %/% divisor\n  return(quotient)\n}"
        ]
    },
    {
        "id": "293",
        "prompt": "Write a function to find the third side of a right angled triangle.",
        "solution": "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s",
        "code": [
            "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s"
        ],
        "pseudo": "# Import the math module\n\n# Define a function to find the third side of a right-angled triangle\n    # Calculate the square of the two given sides\n    # Calculate the sum of the squares of the two given sides\n    # Take the square root of the sum to find the length of the hypotenuse\n    # Return the length of the hypotenuse\n\n# Call the function with the given sides of the triangle and print the result",
        "test": [
            "assert otherside_rightangle(7,8)==10.63014581273465",
            "assert otherside_rightangle(3,4)==5",
            "assert otherside_rightangle(7,15)==16.55294535724685"
        ],
        "draft_plan": [
            "# Define a function to find the third side of a right-angled triangle.\n# The function should take two arguments, representing the lengths of the two sides of the triangle.\n# Use the Pythagorean theorem to calculate the length of the hypotenuse (third side).\n# The formula is c^2 = a^2 + b^2, where c is the hypotenuse and a and b are the other two sides.\n# Return the length of the hypotenuse as the output of the function."
        ],
        "final_plan": [
            "find_third_side <- function(a, b) {\n  c <- sqrt(a^2 + b^2)\n  return(c)\n}"
        ]
    },
    {
        "id": "294",
        "prompt": "Write a function to find the maximum value in a given heterogeneous list.",
        "solution": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)",
        "code": [
            "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)"
        ],
        "pseudo": "# Initialize the maximum value with the first element in the list\n\n# Iterate through each element in the list starting from the second element\n    # Compare the current element with the maximum value\n        # If the current element is greater than the maximum value, update the maximum value\n\n# Return the maximum value",
        "test": [
            "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
            "assert max_val(['Python', 15, 20, 25])==25",
            "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
        ],
        "draft_plan": [
            "# Initialize a variable 'maximum' to the first element in the input list\n# Iterate through each element in the list\n    # Check if the current element is greater than 'maximum'\n        # If true, update 'maximum' with the value of the current element\n# Return the maximum value found"
        ],
        "final_plan": [
            "find_maximum_value <- function(lst) {\n  maximum <- lst[1]\n  \n  for (element in lst) {\n    if (element > maximum) {\n      maximum <- element\n    }\n  }\n  \n  return(maximum)\n}"
        ]
    },
    {
        "id": "295",
        "prompt": "Write a function to return the sum of all divisors of a number.",
        "solution": "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)",
        "code": [
            "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)"
        ],
        "pseudo": "# Initialize the sum of divisors to 0\n\n# Iterate from 1 to the given number\n    # Check if the current number is a divisor of the given number\n        # If it is, add it to the sum of divisors\n\n# Return the sum of divisors",
        "test": [
            "assert sum_div(8)==7",
            "assert sum_div(12)==16",
            "assert sum_div(7)==1"
        ],
        "draft_plan": [
            "# Define a function to calculate the sum of divisors\n# Initialize a variable 'sum_of_divisors' to 0\n# Iterate through each number from 1 to the input number (inclusive)\n    # Check if the current number is a divisor of the input number\n        # If true, add the current number to 'sum_of_divisors'\n# Return 'sum_of_divisors' as the result"
        ],
        "final_plan": [
            "sum_of_divisors <- function(num) {\n  sum_of_divisors <- 0\n  \n  for (i in 1:num) {\n    if (num %% i == 0) {\n      sum_of_divisors <- sum_of_divisors + i\n    }\n  }\n  \n  return(sum_of_divisors)\n}"
        ]
    },
    {
        "id": "296",
        "prompt": "Write a python function to count inversions in an array.",
        "solution": "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count ",
        "code": [
            "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count "
        ],
        "pseudo": "# Initialize a variable to count the number of inversions\n# Iterate through each element in the array\n    # For each element, iterate through the remaining elements\n        # Check if the current element is greater than any of the remaining elements\n            # If so, increment the inversion count\n\n# Return the inversion count",
        "test": [
            "assert get_Inv_Count([1,20,6,4,5]) == 5",
            "assert get_Inv_Count([1,2,1]) == 1",
            "assert get_Inv_Count([1,2,5,6,1]) == 3"
        ],
        "draft_plan": [
            "# Define a function to count inversions in an array.\n# Initialize a variable 'count' to 0 to keep track of the inversion count.\n# Implement the merge sort algorithm to sort the array while counting inversions.\n    # Divide the array into two halves.\n    # Recursively sort the left half and the right half.\n    # Merge the sorted halves while counting inversions.\n        # Initialize pointers 'i', 'j', and 'k' to track positions in the left, right, and merged arrays.\n        # While both 'i' and 'j' are within their respective array lengths:\n            # If the element in the left array is smaller or equal to the element in the right array:\n                # Place the left element in the merged array and increment 'i'.\n            # If the element in the left array is greater than the element in the right array:\n                # Place the right element in the merged array and increment 'j'.\n                # Increment 'count' by the number of remaining elements in the left array.\n        # Place any remaining elements from the left or right array into the merged array.\n    # Return the merged array.\n# Return the inversion count."
        ],
        "final_plan": [
            "count_inversions <- function(arr) {\n  count <- 0\n  \n  merge_sort <- function(arr) {\n    if (length(arr) <= 1) {\n      return(arr)\n    }\n    \n    mid <- length(arr) %/% 2\n    left <- merge_sort(arr[1:mid])\n    right <- merge_sort(arr[(mid+1):length(arr)])\n    \n    merged <- numeric(length(left) + length(right))\n    i <- 1\n    j <- 1\n    k <- 1\n    \n    while (i <= length(left) && j <= length(right)) {\n      if (left[i] <= right[j]) {\n        merged[k] <- left[i]\n        i <- i + 1\n      } else {\n        merged[k] <- right[j]\n        j <- j + 1\n        count <- count + (length(left) - i + 1)\n      }\n      k <- k + 1\n    }\n    \n    while (i <= length(left)) {\n      merged[k] <- left[i]\n      i <- i + 1\n      k <- k + 1\n    }\n    \n    while (j <= length(right)) {\n      merged[k] <- right[j]\n      j <- j + 1\n      k <- k + 1\n    }\n    \n    return(merged)\n  }\n  \n  merge_sort(arr)\n  return(count)\n}"
        ]
    },
    {
        "id": "297",
        "prompt": "Write a function to flatten a given nested list structure.",
        "solution": "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list ",
        "code": [
            "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list "
        ],
        "pseudo": "# Initialize an empty list to store the flattened elements\n\n# Iterate through each element in the given list\n    # If the element is a list, recursively flatten it and append each element to the flattened list\n    # If the element is not a list, append it directly to the flattened list\n\n# Return the flattened list",
        "test": [
            "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
            "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
            "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
        ],
        "draft_plan": [
            "# Create a recursive function to flatten the nested list structure\n    # Initialize an empty list 'result'\n    # Iterate through each element in the input list\n        # If the element is a list\n            # Recursively call the flatten function on the nested list\n            # Append the flattened nested list to the 'result' list\n        # If the element is not a list\n            # Append the element as it is to the 'result' list\n    # Return the 'result' list\n# Call the flatten function on the given nested list to flatten it"
        ],
        "final_plan": [
            "flatten <- function(lst) {\n  result <- list()\n  \n  for (elem in lst) {\n    if (is.list(elem)) {\n      result <- c(result, flatten(elem))\n    } else {\n      result <- c(result, elem)\n    }\n  }\n  \n  return(result)\n}\n\n# Example Usage\nnested_list <- list(1, list(2, 3), list(4, list(5, 6)))\nflattened_list <- flatten(nested_list)\nprint(flattened_list)\n# Output: [1, 2, 3, 4, 5, 6]"
        ]
    },
    {
        "id": "299",
        "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.",
        "solution": "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])",
        "code": [
            "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])"
        ],
        "pseudo": "# Sort the list of tuples in descending order based on the second element\n\n# Initialize the maximum aggregate to 0\n\n# Iterate through each tuple in the sorted list\n    # Calculate the current aggregate by adding the second element of the tuple to the maximum aggregate\n    # Update the maximum aggregate if the current aggregate is greater\n\n# Return the maximum aggregate",
        "test": [
            "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
            "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
            "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
        ],
        "draft_plan": [
            "# Define a function to calculate the maximum aggregate from a list of tuples.\n# Initialize a variable 'max_agg' to 0.\n# Iterate over each tuple in the input list.\n    # Calculate the aggregate of the current tuple by summing its elements.\n    # Check if the aggregate of the current tuple is greater than 'max_agg'.\n        # If true, update 'max_agg' to the aggregate of the current tuple.\n# Return 'max_agg' as the maximum aggregate."
        ],
        "final_plan": [
            "calculate_max_aggregate <- function(lst) {\n  max_agg <- 0\n  \n  for (tup in lst) {\n    aggregate <- sum(tup)\n    \n    if (aggregate > max_agg) {\n      max_agg <- aggregate\n    }\n  }\n  \n  return(max_agg)\n}"
        ]
    },
    {
        "id": "300",
        "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
        "solution": "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res ",
        "code": [
            "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res "
        ],
        "pseudo": "# Define a recursive function count_sequences with parameters n (length of the binary sequence), \n# curr_sum (current sum of the bits), and total_sum (the target sum of both halves)\n\n    # Base case: if n is 0, check if the current sum is equal to the target sum\n        # If so, return 1 (valid sequence)\n        # Otherwise, return 0 (invalid sequence)\n    \n    # Recursive case:\n        # Initialize a variable count to 0 (to keep track of the count of valid sequences)\n        \n        # Call the count_sequences function recursively with n-1, curr_sum+1, and total_sum\n        # Add the return value to count\n        \n        # Call the count_sequences function recursively with n-1, curr_sum-1, and total_sum\n        # Add the return value to count\n        \n        # Return the total count\n    \n# Call the count_sequences function with n as the length of the binary sequence, curr_sum as 0, and total_sum as 0 to get the count of valid sequences",
        "test": [
            "assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)",
            "assert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)",
            "assert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)"
        ],
        "draft_plan": [
            "# Define a function to find the count of binary sequences\ncount_binary_sequences <- function(n) {\n    # Check if n is less than or equal to 0\n        # If true, return 1 as there is only one possible sequence for n <= 0\n    # Initialize a variable 'count' to 0\n    # Iterate through all possible combinations of binary sequences of length 2n\n        # Check if the sum of the first n bits is equal to the sum of the last n bits\n            # If true, increment the 'count' variable by 1\n    # Return the final 'count' variable\n}"
        ],
        "final_plan": [
            "count_binary_sequences <- function(n) {\n  if (n <= 0) {\n    return(1)\n  }\n  \n  count <- 0\n  \n  for (i in 0:(2^(2*n)-1)) {\n    binary <- as.integer(intToBits(i))\n    first_half <- sum(binary[1:n])\n    second_half <- sum(binary[(n+1):(2*n)])\n    \n    if (first_half == second_half) {\n      count <- count + 1\n    }\n  }\n  \n  return(count)\n}"
        ]
    },
    {
        "id": "301",
        "prompt": "Write a function to find the depth of a dictionary.",
        "solution": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0",
        "code": [
            "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0"
        ],
        "pseudo": "# Initialize the depth to 1\n\n# Iterate through each key-value pair in the dictionary\n    # Check if the value is a dictionary\n        # If it is, recursively find the depth of the nested dictionary and increment it by 1\n\n# Return the maximum depth",
        "test": [
            "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
            "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
            "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
        ],
        "draft_plan": [
            "# Define a function to find the depth of a dictionary.\n# Initialize a variable 'depth' to 1.\n# Iterate over each key-value pair in the input dictionary.\n    # Check if the value of the current key is a dictionary.\n        # If true, recursively call the function with the value as the new dictionary.\n        # Increment the 'depth' variable by 1.\n        # Update the 'depth' variable by taking the maximum of the current 'depth' and the returned depth from the recursive call.\n# Return the final 'depth' variable, which represents the maximum depth of the dictionary."
        ],
        "final_plan": [
            "find_depth <- function(dictionary) {\n  depth <- 1\n  \n  for (key in names(dictionary)) {\n    if (is.list(dictionary[[key]])) {\n      current_depth <- 1 + find_depth(dictionary[[key]])\n      depth <- max(depth, current_depth)\n    }\n  }\n  \n  return(depth)\n}"
        ]
    },
    {
        "id": "304",
        "prompt": "Write a python function to find element at a given index after number of rotations.",
        "solution": "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] ",
        "code": [
            "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] "
        ],
        "pseudo": "# Calculate the effective rotations by taking the remainder of the given rotations divided by the length of the array\n\n# Return the element at the given index after applying the effective rotations\n",
        "test": [
            "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
            "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
            "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
        ],
        "draft_plan": [
            "# Define a function to find the element at a given index after a number of rotations.\n# Calculate the length of the input list and store it in a variable 'n'.\n# Calculate the effective number of rotations by taking the modulo of the given number of rotations with 'n'.\n# Calculate the new index by adding the effective number of rotations to the given index.\n# Return the element at the new index in the input list."
        ],
        "final_plan": [
            "find_element_after_rotation <- function(lst, index, rotations) {\n  n <- length(lst)\n  effective_rotations <- rotations %% n\n  new_index <- index + effective_rotations\n  \n  if (new_index > n) {\n    new_index <- new_index - n\n  }\n  \n  return(lst[new_index])\n}"
        ]
    },
    {
        "id": "305",
        "prompt": "Write a function to return two words from a list of words starting with letter 'p'.",
        "solution": "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()",
        "code": [
            "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()"
        ],
        "pseudo": "# Initialize an empty list to store the words starting with 'p'\n\n# Iterate through each word in the list\n    # Check if the first letter of the word is 'p'\n        # If yes, append the word to the list\n\n# Check if the list has at least two words\n    # If yes, return the first two words from the list\n    # If no, return None or an appropriate message",
        "test": [
            "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
            "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
            "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
        ],
        "draft_plan": [
            "# Initialize an empty list to store the words starting with 'p'\n# Iterate through each word in the input list\n    # Check if the first letter of the word is 'p'\n        # If true, append the word to the list\n# Check if the length of the list is greater than or equal to 2\n    # If true, return the first two words from the list\n# If the length of the list is less than 2, return the entire list"
        ],
        "final_plan": [
            "get_words_starting_with_p <- function(word_list) {\n  p_words <- c()\n  \n  for (word in word_list) {\n    if (substr(word, 1, 1) == \"p\") {\n      p_words <- c(p_words, word)\n    }\n  }\n  \n  if (length(p_words) >= 2) {\n    return(p_words[1:2])\n  } else {\n    return(p_words)\n  }\n}"
        ]
    },
    {
        "id": "306",
        "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .",
        "solution": "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]",
        "code": [
            "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]"
        ],
        "pseudo": "# Initialize a list to store the maximum sum of increasing subsequences for each index\n# Initialize the maximum sum to be 0\n\n# Iterate through each index i in the given list\n    # Initialize a variable to store the maximum sum of increasing subsequence until index i, including the kth element\n    # Iterate through each index k starting from i+1 to the end of the list\n        # Check if the element at index k is greater than the element at index i\n            # Update the maximum sum of increasing subsequence until index i, including the kth element\n    # Update the maximum sum if the maximum sum of increasing subsequence until index i, including the kth element, is greater than the current maximum sum\n\n# Return the maximum sum",
        "test": [
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
            "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
        ],
        "draft_plan": [
            "# Define a function to find the maximum sum of increasing subsequence\n# Initialize a variable 'max_sum' to store the maximum sum\n# Iterate through each index 'i' in the input list until the second last index\n    # Initialize a variable 'current_sum' to store the sum of the subsequence until index 'i'\n    # Iterate through each index 'k' in the input list starting from 'i+1'\n        # Check if the element at index 'k' is greater than the element at index 'i'\n            # If true, update 'current_sum' by adding the element at index 'k' to it\n    # Check if 'current_sum' is greater than 'max_sum'\n        # If true, update 'max_sum' with 'current_sum'\n# Return 'max_sum' as the maximum sum of increasing subsequence until the given index 'i'"
        ],
        "final_plan": [
            "find_max_sum <- function(lst) {\n  max_sum <- 0\n  \n  for (i in 1:(length(lst)-1)) {\n    current_sum <- lst[i]\n    \n    for (k in (i+1):length(lst)) {\n      if (lst[k] > lst[i]) {\n        current_sum <- current_sum + lst[k]\n      }\n    }\n    \n    if (current_sum > max_sum) {\n      max_sum <- current_sum\n    }\n  }\n  \n  return(max_sum)\n}"
        ]
    },
    {
        "id": "307",
        "prompt": "Write a function to get a colon of a tuple.",
        "solution": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon",
        "code": [
            "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon"
        ],
        "pseudo": "To get a colon of a tuple, we can use tuple slicing. Here is the code logic:\n\n# Define a function that takes a tuple as input\ndef get_colon(tup):\n    # Use tuple slicing to get the colon\n    colon = tup[1]\n    return colon\n\n# Test the function\ntuple_example = (1, 2, 3, 4, 5)\nresult = get_colon(tuple_example)\nprint(result)  # Output: 2",
        "test": [
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
        ],
        "draft_plan": [
            "# Define a function to get the colon of a tuple.\n# Create an empty list to store the values of the tuple.\n# Iterate over each element in the tuple using 'each' iterator.\n    # Append the value of the current element to the list.\n# Convert the list to a string using the 'paste' function, specifying the separator as \":\".\n# Return the resulting string."
        ],
        "final_plan": [
            "get_colon <- function(tuple) {\n  values <- c()\n  \n  for (element in tuple) {\n    values <- c(values, element)\n  }\n  \n  return(paste(values, collapse = \":\"))\n}"
        ]
    },
    {
        "id": "308",
        "prompt": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.",
        "solution": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result",
        "code": [
            "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result"
        ],
        "pseudo": "# Create an empty list to store the products\n\n# Iterate through each element in the first list\n    # Iterate through each element in the second list\n        # Calculate the product of the current elements from both lists\n        # Append the product to the list of products\n\n# Sort the list of products in descending order\n\n# Return the specified number of largest products from the list",
        "test": [
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
        ],
        "draft_plan": [
            "# Define a function to find the specified number of largest products from two given lists.\n# Create an empty list to store the products.\n# Iterate over each element in the first list using 'each' iterator.\n    # Iterate over each element in the second list using 'each' iterator.\n        # Calculate the product of the current elements from both lists.\n        # Append the product to the products list.\n# Sort the products list in descending order.\n# Return the specified number of largest products from the list."
        ],
        "final_plan": [
            "find_largest_products <- function(list1, list2, num) {\n  products <- c()\n  \n  for (num1 in list1) {\n    for (num2 in list2) {\n      product <- num1 * num2\n      products <- c(products, product)\n    }\n  }\n  \n  sorted_products <- sort(products, decreasing = TRUE)\n  largest_products <- sorted_products[1:num]\n  \n  return(largest_products)\n}"
        ]
    },
    {
        "id": "309",
        "prompt": "Write a python function to find the maximum of two numbers.",
        "solution": "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b ",
        "code": [
            "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b "
        ],
        "pseudo": "# Define a function that takes two numbers as input\n\n# Check if the first number is greater than the second number\n    # If it is, return the first number as the maximum\n    # Otherwise, return the second number as the maximum",
        "test": [
            "assert maximum(5,10) == 10",
            "assert maximum(-1,-2) == -1",
            "assert maximum(9,7) == 9"
        ],
        "draft_plan": [
            "# Define a function to find the maximum of two numbers.\n# Check if the first number is greater than or equal to the second number.\n    # If true, return the first number as the maximum.\n    # If false, return the second number as the maximum."
        ],
        "final_plan": [
            "find_maximum <- function(a, b) {\n  if (a >= b) {\n    return(a)\n  } else {\n    return(b)\n  }\n}"
        ]
    },
    {
        "id": "310",
        "prompt": "Write a function to convert a given string to a tuple of characters.",
        "solution": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result",
        "code": [
            "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result"
        ],
        "pseudo": "# Initialize an empty tuple\n\n# Iterate through each character in the input string\n    # Append the character to the tuple\n\n# Return the tuple",
        "test": [
            "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
            "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
            "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
        ],
        "draft_plan": [
            "# Split the input string into individual characters\n# Convert the resulting list of characters into a tuple\n# Return the tuple"
        ],
        "final_plan": [
            "convert_to_tuple <- function(input_string) {\n  char_list <- strsplit(input_string, \"\")[[1]]\n  char_tuple <- as.list(char_list)\n  return(as.tuple(char_tuple))\n}"
        ]
    },
    {
        "id": "311",
        "prompt": "Write a python function to set the left most unset bit.",
        "solution": "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) ",
        "code": [
            "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) "
        ],
        "pseudo": "To find the leftmost unset bit in a given number, we can use the bitwise operators in Python. Here is the code logic:\n\n1. Create a function `leftmost_unset_bit(num)` that takes a number as input.\n\n2. Initialize a variable `position` as 1, which represents the position of the leftmost bit (starting from 1 for the least significant bit).\n\n3. Iterate through each bit position from right to left using a while loop:\n     - Check if the bit is unset (0) using the bitwise AND operation of the number and a mask (1 << position).\n     - If the bit is unset, return the current position.\n     - If the bit is set (1), increment the position by 1.\n\n4. If no unset bit is found after the loop, return -1 to indicate that no unset bit is present in the number.\n",
        "test": [
            "assert set_left_most_unset_bit(10) == 14",
            "assert set_left_most_unset_bit(12) == 14",
            "assert set_left_most_unset_bit(15) == 15"
        ],
        "draft_plan": [
            "# Define a function to set the leftmost unset bit\n# Initialize a variable 'result' to 1\n# Iterate through each bit position from left to right\n    # Check if the bit at the current position is unset (0)\n        # If true, set the bit at the current position in 'result'\n        # Break the loop\n# Return the 'result' variable, which will have the leftmost unset bit set to 1"
        ],
        "final_plan": [
            "set_leftmost_unset_bit <- function() {\n  result <- 1\n  \n  for (i in 0:31) {\n    if (!(result & (1 << i))) {\n      result <- result | (1 << i)\n      break\n    }\n  }\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "312",
        "prompt": "Write a function to find the volume of a cone.",
        "solution": "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume",
        "code": [
            "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume"
        ],
        "pseudo": "# Define a function to calculate the volume of a cone\n    # Accept the radius and height of the cone as input parameters\n    # Calculate the volume using the formula V = (1/3) * \u03c0 * r^2 * h\n    # Return the calculated volume\n\n# Test the function by calling it with appropriate values for radius and height",
        "test": [
            "assert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)",
            "assert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)",
            "assert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)"
        ],
        "draft_plan": [
            "To find the volume of a cone, we can use the formula:\n\nVolume = (1/3) * \u03c0 * r^2 * h\n\nWhere:\n- \u03c0 is a constant representing the value of pi\n- r is the radius of the base of the cone\n- h is the height of the cone\n\nThe plan for the R code would be:\n\n1. Define a function `cone_volume` that takes two parameters: `radius` and `height`.\n2. Calculate the volume using the formula `(1/3) * pi * radius^2 * height`.\n3. Return the calculated volume as the output of the function."
        ],
        "final_plan": [
            "cone_volume <- function(radius, height) {\n  volume <- (1/3) * pi * radius^2 * height\n  return(volume)\n}"
        ]
    },
    {
        "id": "388",
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.",
        "solution": "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res ",
        "code": [
            "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res "
        ],
        "pseudo": "# Initialize the highest power of 2 to 1\n\n# While the highest power of 2 is less than or equal to n\n    # Multiply the highest power of 2 by 2\n\n# Divide the highest power of 2 by 2 to get the result",
        "test": [
            "assert highest_Power_of_2(10) == 8",
            "assert highest_Power_of_2(19) == 16",
            "assert highest_Power_of_2(32) == 32"
        ],
        "draft_plan": [
            "# Initialize a variable 'power' to 0\n# Iterate while n is greater than or equal to 2\n    # Multiply 'power' by 2\n    # Divide n by 2\n# Return 'power' as the highest power of 2 less than or equal to n"
        ],
        "final_plan": [
            "highest_power_of_2 <- function(n) {\n  power <- 0\n  \n  while (n >= 2) {\n    power <- power + 1\n    n <- n/2\n  }\n  \n  return(power)\n}"
        ]
    },
    {
        "id": "389",
        "prompt": "Write a function to find the n'th lucas number.",
        "solution": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ",
        "code": [
            "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) "
        ],
        "pseudo": "# Define a function to find the n-th Lucas number\ndef lucas_number(n):\n    # Base cases for n = 0 and n = 1\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Lucas numbers\n    lucas_0 = 2\n    lucas_1 = 1\n    \n    # Iterate from 2 to n\n    for i in range(2, n+1):\n        # Calculate the current Lucas number using the formula L(n) = L(n-1) + L(n-2)\n        lucas_n = lucas_0 + lucas_1\n        \n        # Update the values of previous Lucas numbers for the next iteration\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    \n    # Return the n-th Lucas number\n    return lucas_n",
        "test": [
            "assert find_lucas(9) == 76",
            "assert find_lucas(4) == 7",
            "assert find_lucas(3) == 4"
        ],
        "draft_plan": [
            "# Define a method to find the n'th Lucas number.\n# Check if the value of n is less than or equal to 0\n    # If true, return an error message indicating that n must be a positive integer.\n# Check if the value of n is equal to 1\n    # If true, return 2 as the 1st Lucas number.\n# Check if the value of n is equal to 2\n    # If true, return 1 as the 2nd Lucas number.\n# Initialize two variables 'prev' and 'current' with values 2 and 1 respectively.\n# Iterate 'i' from 3 to n (inclusive) using a for loop.\n    # Calculate the next Lucas number by adding 'prev' and 'current'.\n    # Update 'prev' with the value of 'current'.\n    # Update 'current' with the value of the calculated Lucas number.\n# Return the value of 'current' as the n'th Lucas number."
        ],
        "final_plan": [
            "find_lucas_number <- function(n) {\n  if (n <= 0) {\n    stop(\"n must be a positive integer.\")\n  }\n  \n  if (n == 1) {\n    return(2)\n  }\n  \n  if (n == 2) {\n    return(1)\n  }\n  \n  prev <- 2\n  current <- 1\n  \n  for (i in 3:n) {\n    next_lucas <- prev + current\n    prev <- current\n    current <- next_lucas\n  }\n  \n  return(current)\n}"
        ]
    },
    {
        "id": "390",
        "prompt": "Write a function to apply a given format string to all of the elements in a list.",
        "solution": "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string",
        "code": [
            "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string"
        ],
        "pseudo": "# Define a function that takes a format string and a list of elements as input\n\n# Create an empty list to store the formatted elements\n\n# Iterate through each element in the input list\n    # Apply the format string to the current element using the format() function\n    # Append the formatted element to the new list\n\n# Return the new list with all the formatted elements",
        "test": [
            "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
            "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
            "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
        ],
        "draft_plan": [
            "# Define a function to apply a given format string to all elements in a list.\n# Initialize an empty list to store the formatted elements.\n# Iterate over each element in the input list using 'each' iterator.\n    # Apply the format string to the current element using the 'sprintf' function.\n    # Append the formatted element to the formatted list.\n# Return the formatted list."
        ],
        "final_plan": [
            "apply_format_string <- function(format_string, lst) {\n  formatted_list <- c()\n  \n  for (element in lst) {\n    formatted_element <- sprintf(format_string, element)\n    formatted_list <- c(formatted_list, formatted_element)\n  }\n  \n  return(formatted_list)\n}"
        ]
    },
    {
        "id": "391",
        "prompt": "Write a function to convert more than one list to nested dictionary.",
        "solution": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result",
        "code": [
            "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result"
        ],
        "pseudo": "# Initialize an empty dictionary\n\n# Iterate through each list in the input lists\n    # Get the first element of the list as the key for the nested dictionary\n    # Get the remaining elements of the list as the values for the nested dictionary\n    # Create a nested dictionary using the key and values\n\n# Return the nested dictionary",
        "test": [
            "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
            "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
            "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
        ],
        "draft_plan": [
            "# Define a function to convert multiple lists into a nested dictionary.\n# Initialize an empty dictionary.\n# Iterate over the lists using 'each' iterator.\n    # Get the length of the current list.\n    # Create a nested dictionary with the length as the key and an empty dictionary as the value.\n    # Assign the nested dictionary as a value to the current length key in the main dictionary.\n# Return the main dictionary with nested dictionaries."
        ],
        "final_plan": [
            "convert_to_nested_dict <- function(...){\n  main_dict <- list()\n  \n  for (lst in list(...)){\n    length_lst <- length(lst)\n    nested_dict <- list()\n    main_dict[[as.character(length_lst)]] <- nested_dict\n  }\n  \n  return(main_dict)\n}"
        ]
    },
    {
        "id": "392",
        "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "solution": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]",
        "code": [
            "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]"
        ],
        "pseudo": "# Create a dictionary to store the maximum sum for each number\n# Set the base cases for f(0) and f(1) as 0 and 1 respectively\n\n# Define a recursive function to calculate the maximum sum for a given number\n    # Check if the maximum sum for the current number has already been calculated\n        # If yes, return the stored value\n        # If no, calculate the maximum sum using the given equation\n\n# Call the recursive function to calculate the maximum sum for the given number",
        "test": [
            "assert get_max_sum(60) == 106",
            "assert get_max_sum(10) == 12",
            "assert get_max_sum(2) == 2"
        ],
        "draft_plan": [
            "# Define a recursive function to calculate the maximum sum\n# Base case: if n is less than or equal to 1, return n\n# Recursive case:\n    # Calculate the sum by recursively calling the function on n/2, n/3, n/4, and n/5\n    # Calculate the maximum sum by taking the maximum value between the calculated sum and n\n    # Return the maximum sum\n\n# Call the recursive function with the given number n and return the result"
        ],
        "final_plan": [
            "max_sum <- function(n) {\n  if (n <= 1) {\n    return(n)\n  }\n  \n  sum <- max(max_sum(n/2) + max_sum(n/3) + max_sum(n/4) + max_sum(n/5), n)\n  return(sum)\n}"
        ]
    },
    {
        "id": "393",
        "prompt": "Write a function to find the list with maximum length.",
        "solution": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)",
        "code": [
            "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)"
        ],
        "pseudo": "# Initialize the maximum length and the list with maximum length to empty values\n\n# Iterate through each list in the input list of lists\n    # Check if the length of the current list is greater than the maximum length\n        # If so, update the maximum length and the list with maximum length\n\n# Return the list with maximum length",
        "test": [
            "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
            "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
        ],
        "draft_plan": [
            "# Define a function to find the list with maximum length\n# Initialize a variable 'max_length' to 0\n# Initialize a variable 'max_list' to an empty list\n# Iterate over each list in the input list of lists\n    # Check if the length of the current list is greater than 'max_length'\n        # If true, update 'max_length' to the length of the current list\n        # Update 'max_list' to the current list\n# Return 'max_list'"
        ],
        "final_plan": [
            "find_max_length_list <- function(list_of_lists) {\n  max_length <- 0\n  max_list <- list()\n  \n  for (lst in list_of_lists) {\n    if (length(lst) > max_length) {\n      max_length <- length(lst)\n      max_list <- lst\n    }\n  }\n  \n  return(max_list)\n}"
        ]
    },
    {
        "id": "394",
        "prompt": "Write a function to check if given tuple contains no duplicates.",
        "solution": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res ",
        "code": [
            "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res "
        ],
        "pseudo": "# Convert the tuple to a set\n# Check if the length of the set is equal to the length of the tuple\n    # If they are equal, it means there are no duplicates\n    # Otherwise, there are duplicates",
        "test": [
            "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
            "assert check_distinct((1, 4, 5, 6)) == True",
            "assert check_distinct((2, 3, 4, 5, 6)) == True"
        ],
        "draft_plan": [
            "# Convert the tuple to a list\n# Check if the length of the list is equal to the length of the set created from the list\n    # If true, return True (no duplicates found)\n    # If false, return False (duplicates found)"
        ],
        "final_plan": [
            "tuple_no_duplicates <- function(tup) {\n  lst <- as.list(tup)\n  \n  if (length(lst) == length(unique(lst))) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}"
        ]
    },
    {
        "id": "395",
        "prompt": "Write a python function to find the first non-repeated character in a given string.",
        "solution": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None",
        "code": [
            "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None"
        ],
        "pseudo": "# Create an empty dictionary to store the count of each character\n# Iterate through each character in the given string\n    # If the character is already in the dictionary, increase its count by 1\n    # If the character is not in the dictionary, add it with a count of 1\n\n# Iterate through each character in the given string again\n    # Check if the count of the current character in the dictionary is 1\n        # If it is, return the current character as the first non-repeated character\n\n# If no non-repeated character is found, return \"None\"",
        "test": [
            "assert first_non_repeating_character(\"abcabc\") == None",
            "assert first_non_repeating_character(\"abc\") == \"a\"",
            "assert first_non_repeating_character(\"ababc\") == \"c\""
        ],
        "draft_plan": [
            "# Define a method to find the first non-repeated character in a string.\n# Create an empty hash to store the count of each character in the string.\n# Iterate over each character in the string using 'each' iterator.\n    # Check if the character exists in the hash as a key.\n        # If true, increment the count of that character in the hash.\n        # If false, add the character to the hash with a count of 1.\n# Iterate over each character in the string using 'each' iterator again.\n    # Check if the count of the current character in the hash is equal to 1.\n        # If true, return the current character as the first non-repeated character.\n# If no non-repeated character is found, return 'None'."
        ],
        "final_plan": [
            "find_first_non_repeated_char <- function(string) {\n  char_count <- list()\n  \n  for (ch in strsplit(string, NULL)[[1]]) {\n    if (is.null(char_count[[ch]])) {\n      char_count[[ch]] <- 1\n    } else {\n      char_count[[ch]] <- char_count[[ch]] + 1\n    }\n  }\n  \n  for (ch in strsplit(string, NULL)[[1]]) {\n    if (char_count[[ch]] == 1) {\n      return(ch)\n    }\n  }\n  \n  return(NULL)\n}"
        ]
    },
    {
        "id": "396",
        "prompt": "Write a function to check whether the given string starts and ends with the same character or not.",
        "solution": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ",
        "code": [
            "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" "
        ],
        "pseudo": "# Check if the first character of the string is equal to the last character\n    # If they are equal, return True\n    # If they are not equal, return False",
        "test": [
            "assert check_char(\"abba\") == \"Valid\"",
            "assert check_char(\"a\") == \"Valid\"",
            "assert check_char(\"abcd\") == \"Invalid\""
        ],
        "draft_plan": [
            "# Extract the first and last characters from the given string\n# Check if the first and last characters are equal\n    # If true, return \"Yes\"\n    # If false, return \"No\""
        ],
        "final_plan": [
            "check_start_end <- function(string) {\n  first_char <- substr(string, 1, 1)\n  last_char <- substr(string, nchar(string), nchar(string))\n  \n  if (first_char == last_char) {\n    return(\"Yes\")\n  } else {\n    return(\"No\")\n  }\n}"
        ]
    },
    {
        "id": "397",
        "prompt": "Write a function to find the median of three numbers.",
        "solution": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median",
        "code": [
            "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median"
        ],
        "pseudo": "# Sort the three numbers in ascending order\n\n# If the middle number is an integer, return it as the median\n# Otherwise, calculate the average of the two middle numbers and return it as the median",
        "test": [
            "assert median_numbers(25,55,65)==55.0",
            "assert median_numbers(20,10,30)==20.0",
            "assert median_numbers(15,45,75)==45.0"
        ],
        "draft_plan": [
            "# Define a function to find the median of three numbers\n# Sort the three numbers in ascending order\n# If the middle number is the median, return it\n# If the first number is the median, return it\n# If the last number is the median, return it"
        ],
        "final_plan": [
            "find_median <- function(a, b, c) {\n  sorted <- sort(c(a, b, c))\n  median <- sorted[2]\n  \n  return(median)\n}"
        ]
    },
    {
        "id": "398",
        "prompt": "Write a function to compute the sum of digits of each number of a given list.",
        "solution": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
        "code": [
            "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"
        ],
        "pseudo": "# Initialize an empty list to store the sum of digits for each number\n\n# Iterate through each number in the given list\n    # Convert the number to a string\n    # Initialize a variable to store the sum of digits\n    # Iterate through each digit in the string representation of the number\n        # Convert the digit back to an integer and add it to the sum of digits\n    # Append the sum of digits to the list\n\n# Return the list of sum of digits for each number",
        "test": [
            "assert sum_of_digits([10,2,56])==14",
            "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
            "assert sum_of_digits([10,20,-4,5,-70])==19"
        ],
        "draft_plan": [
            "# Define a function to compute the sum of digits of each number in a given list.\n# Create an empty list to store the sums of digits.\n# Iterate over the input list of numbers using 'each' iterator.\n    # Convert the current number to a string and split it into individual digits.\n    # Calculate the sum of the digits using the 'sum' function.\n    # Append the sum to the list of sums.\n# Return the list of sums."
        ],
        "final_plan": [
            "compute_sum_of_digits <- function(lst) {\n  sums <- c()\n  \n  for (num in lst) {\n    digits <- strsplit(as.character(num), \"\")\n    digit_sum <- sum(as.numeric(unlist(digits)))\n    sums <- c(sums, digit_sum)\n  }\n  \n  return(sums)\n}"
        ]
    },
    {
        "id": "399",
        "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
        "solution": "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "code": [
            "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) "
        ],
        "pseudo": "# Initialize an empty list to store the result of bitwise XOR operation on each tuple\n\n# Iterate through each tuple in the input list\n    # Initialize a variable to store the result of XOR operation\n    # Iterate through each element in the tuple\n        # Perform bitwise XOR operation with the current element and the result variable\n    # Append the result of XOR operation to the result list\n\n# Return the result list",
        "test": [
            "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
            "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
            "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
        ],
        "draft_plan": [
            "# Define a function to perform bitwise xor operation on tuples.\n# Initialize an empty result list to store the results of bitwise xor operation.\n# Iterate over the input list of tuples using 'each' iterator.\n    # Extract the two elements of the current tuple.\n    # Perform bitwise xor operation on the two elements using '^' operator.\n    # Append the result to the result list.\n# Return the result list."
        ],
        "final_plan": [
            "bitwise_xor <- function(test_list) {\n  result <- list()\n  \n  for (tup in test_list) {\n    a <- tup[[1]]\n    b <- tup[[2]]\n    result <- c(result, a ^ b)\n  }\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "400",
        "prompt": "Write a function to extract the number of unique tuples in the given list.",
        "solution": "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)",
        "code": [
            "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)"
        ],
        "pseudo": "# Create an empty set to store unique tuples\n\n# Iterate through each tuple in the given list\n    # Convert the tuple to a frozenset and add it to the set of unique tuples\n\n# Return the length of the set of unique tuples",
        "test": [
            "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
            "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
            "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
        ],
        "draft_plan": [
            "# Define a function to extract the number of unique tuples in the given list.\n# Create an empty set to store unique tuples.\n# Iterate over the input list of tuples using 'each' iterator.\n    # Add each tuple to the set.\n# Return the length of the set as the number of unique tuples."
        ],
        "final_plan": [
            "count_unique_tuples <- function(test_list) {\n  unique_tuples <- set()\n  \n  for (tup in test_list) {\n    unique_tuples <- union(unique_tuples, list(tup))\n  }\n  \n  return(length(unique_tuples))\n}"
        ]
    },
    {
        "id": "401",
        "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
        "solution": "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "code": [
            "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) "
        ],
        "pseudo": "# Create an empty result tuple\n\n# Iterate through the nested tuples, getting each inner tuple\n    # Iterate through the inner tuples, getting each element and its index\n        # Check if the index is within the range of the result tuple\n            # If it is, add the element at the corresponding index to the current element\n            # Create a new tuple with the updated element and append it to the result tuple\n        # If the index is not within the range of the result tuple\n            # Create a new tuple with only the current element and append it to the result tuple\n\n# Return the result tuple",
        "test": [
            "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
            "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
            "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
        ],
        "draft_plan": [
            "# Define a function to perform index-wise addition of tuple elements.\n# Create an empty list to store the result.\n# Iterate over the tuples using a for loop and 'i' as the index.\n    # Perform element-wise addition of the corresponding elements in the two tuples using the index 'i'.\n    # Append the result to the result list.\n# Return the result list."
        ],
        "final_plan": [
            "index_wise_addition <- function(tuple1, tuple2) {\n  result <- list()\n  \n  for (i in seq_along(tuple1)) {\n    sum <- tuple1[[i]] + tuple2[[i]]\n    result <- c(result, sum)\n  }\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "404",
        "prompt": "Write a python function to find the minimum of two numbers.",
        "solution": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ",
        "code": [
            "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b "
        ],
        "pseudo": "# Define a function to find the minimum of two numbers\n    # Check if the first number is less than the second number\n        # If true, return the first number\n        # If false, return the second number\n\n# Call the function and pass two numbers as arguments",
        "test": [
            "assert minimum(1,2) == 1",
            "assert minimum(-5,-4) == -5",
            "assert minimum(0,0) == 0"
        ],
        "draft_plan": [
            "# Define a function that takes two numbers as input\n# Check if the first number is smaller than the second number\n    # If true, return the first number as the minimum\n    # If false, return the second number as the minimum"
        ],
        "final_plan": [
            "find_minimum <- function(a, b) {\n  if (a < b) {\n    return(a)\n  } else {\n    return(b)\n  }\n}"
        ]
    },
    {
        "id": "405",
        "prompt": "Write a function to check whether an element exists within a tuple.",
        "solution": "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False",
        "code": [
            "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False"
        ],
        "pseudo": "# Iterate through each element in the tuple\n    # Check if the current element is equal to the target element\n        # If the element is found, return True\n\n# If the element is not found, return False",
        "test": [
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
        ],
        "draft_plan": [
            "# Define a function to check whether an element exists within a tuple.\n# Iterate through each element in the tuple using a for loop.\n    # Check if the current element is equal to the target element.\n        # If true, return TRUE.\n# If the target element is not found after iterating through the entire tuple, return FALSE."
        ],
        "final_plan": [
            "element_exists_in_tuple <- function(tuple, target) {\n  for (elem in tuple) {\n    if (elem == target) {\n      return(TRUE)\n    }\n  }\n  \n  return(FALSE)\n}"
        ]
    },
    {
        "id": "406",
        "prompt": "Write a python function to find whether the parity of a given number is odd.",
        "solution": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False",
        "code": [
            "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False"
        ],
        "pseudo": "# Check if the number modulo 2 is equal to 1\n    # If the modulo is 1, the number is odd\n    # Return True\n\n# If the modulo is not 1, the number is even\n# Return False",
        "test": [
            "assert find_Parity(12) == False",
            "assert find_Parity(7) == True",
            "assert find_Parity(10) == False"
        ],
        "draft_plan": [
            "# Check if the given number is divisible by 2\n    # If the number is divisible by 2, return False as the parity is even\n    # If the number is not divisible by 2, return True as the parity is odd"
        ],
        "final_plan": [
            "is_odd_parity <- function(number) {\n  if (number %% 2 == 0) {\n    return(FALSE)\n  } else {\n    return(TRUE)\n  }\n}"
        ]
    },
    {
        "id": "407",
        "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "solution": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False",
        "code": [
            "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False"
        ],
        "pseudo": "# Convert the given number to a list of digits\n\n# Find the first index (from right to left) where the digit is smaller than the digit to its right\n    # If no such index is found, return \"None\" since the number is already the largest possible\n\n# Find the smallest digit to the right of the found index that is larger than the digit at the found index\n\n# Swap the found digit with the smallest larger digit to its right\n\n# Sort the digits to the right of the found index in ascending order\n\n# Concatenate the digits to form the next bigger number\n\n# Return the next bigger number",
        "test": [
            "assert rearrange_bigger(12)==21",
            "assert rearrange_bigger(10)==False",
            "assert rearrange_bigger(102)==120"
        ],
        "draft_plan": [
            "# Convert the given number into a character vector and store it in a variable 'digits'\n# Find the index 'i' where the decreasing sequence of digits starts from the right side of 'digits'\n    # Start from the second last digit and iterate towards the first digit\n    # Compare each digit with its next digit\n    # Break the loop when a digit is found that is greater than its next digit\n# If 'i' is 0, return -1 to indicate that a next bigger number is not possible\n# Find the smallest digit in 'digits[i+1:]' that is greater than 'digits[i]'\n    # Create a sublist 'sublist' from 'digits[i+1:]'\n    # Find the smallest digit in 'sublist' that is greater than 'digits[i]'\n# Swap 'digits[i]' with the smallest digit found in 'sublist'\n# Sort the sublist 'sublist' in ascending order\n# Concatenate 'digits[1:i]' with 'sublist' to get the rearranged digits in ascending order\n# Convert the rearranged digits into a number and return it as the next bigger number"
        ],
        "final_plan": [
            "create_next_bigger_number <- function(number) {\n  digits <- as.character(number)\n  n <- length(digits)\n  i <- n - 1\n  \n  while (i >= 1 && digits[i] >= digits[i+1]) {\n    i <- i - 1\n  }\n  \n  if (i == 0) {\n    return(-1)\n  }\n  \n  sublist <- sort(digits[(i+1):n])\n  j <- 1\n  \n  while (digits[i] >= sublist[j]) {\n    j <- j + 1\n  }\n  \n  temp <- digits[i]\n  digits[i] <- sublist[j]\n  sublist[j] <- temp\n  \n  sublist <- sort(sublist)\n  \n  result <- as.numeric(paste(digits[1:i], sublist, sep = \"\"))\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "408",
        "prompt": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.",
        "solution": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs",
        "code": [
            "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs"
        ],
        "pseudo": "# Create an empty list to store the pairs\n\n# Sort both arrays in ascending order\n\n# Iterate through each element in the first array\n    # Iterate through each element in the second array\n        # Add the pair (first_array[i], second_array[j]) to the list of pairs\n\n# Sort the list of pairs based on the sum of the elements in each pair\n\n# Return the first k pairs from the sorted list",
        "test": [
            "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
        ],
        "draft_plan": [
            "# Define a function to find k number of smallest pairs\n# Sort both arrays in ascending order\n# Create an empty list to store the pairs\n# Iterate over each element in the first array\n    # Iterate over each element in the second array\n        # Create a pair with the current elements from both arrays\n        # Add the pair to the list of pairs\n# Sort the list of pairs based on their sum in ascending order\n# Return the first k number of pairs from the sorted list"
        ],
        "final_plan": [
            "find_k_smallest_pairs <- function(array1, array2, k) {\n  array1 <- sort(array1)\n  array2 <- sort(array2)\n  \n  pairs <- list()\n  \n  for (i in seq_along(array1)) {\n    for (j in seq_along(array2)) {\n      pair <- c(array1[i], array2[j])\n      pairs <- c(pairs, list(pair))\n    }\n  }\n  \n  pairs <- sort(pairs, by = function(x) sum(x))\n  \n  return(pairs[1:k])\n}"
        ]
    },
    {
        "id": "409",
        "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.",
        "solution": "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min",
        "code": [
            "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min"
        ],
        "pseudo": "# Initialize the minimum product to positive infinity\n\n# Iterate through each pair of tuples in the list\n    # Calculate the product of the two tuples\n    # Check if the product is less than the current minimum product\n        # If yes, update the minimum product\n\n# Return the minimum product",
        "test": [
            "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
            "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
            "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
        ],
        "draft_plan": [
            "# Define a function to find the minimum product from the pairs of tuples\n# Initialize a variable 'min_product' with a large value or infinity\n# Iterate over the input list of tuples using 'each' iterator\n    # Extract the two elements of the current tuple\n    # Calculate the product of the two elements\n    # Check if the calculated product is smaller than 'min_product'\n        # If true, update 'min_product' with the calculated product\n# Return the minimum product found"
        ],
        "final_plan": [
            "find_min_product <- function(lst) {\n  min_product <- Inf\n  \n  for (tup in lst) {\n    a <- tup[[1]]\n    b <- tup[[2]]\n    \n    product <- a * b\n    \n    if (product < min_product) {\n      min_product <- product\n    }\n  }\n  \n  return(min_product)\n}"
        ]
    },
    {
        "id": "410",
        "prompt": "Write a function to find the minimum value in a given heterogeneous list.",
        "solution": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val",
        "code": [
            "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val"
        ],
        "pseudo": "# Initialize the minimum value to the first element in the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the minimum value\n        # If it is, update the minimum value\n\n# Return the minimum value",
        "test": [
            "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
            "assert min_val(['Python', 15, 20, 25])==15",
            "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
        ],
        "draft_plan": [
            "# Initialize a variable 'smallest' to the first element in the input list\n# Iterate through each element in the list\n    # Check if the current element is a numeric value\n        # If true, compare the current element with 'smallest' and update 'smallest' if necessary\n# Return the smallest number found"
        ],
        "final_plan": [
            "find_minimum_value <- function(lst) {\n  smallest <- NULL\n  \n  for (element in lst) {\n    if (is.numeric(element)) {\n      if (is.null(smallest) || element < smallest) {\n        smallest <- element\n      }\n    }\n  }\n  \n  return(smallest)\n}"
        ]
    },
    {
        "id": "411",
        "prompt": "Write a function to convert the given snake case string to camel case string.",
        "solution": "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "code": [
            "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))"
        ],
        "pseudo": "# Split the snake case string into words based on the underscore\n# Initialize an empty camel case string\n\n# Iterate through each word in the snake case string\n    # Capitalize the first letter of each word except the first word\n    # Append the capitalized word to the camel case string\n\n# Return the camel case string",
        "test": [
            "assert snake_to_camel('android_tv') == 'AndroidTv'",
            "assert snake_to_camel('google_pixel') == 'GooglePixel'",
            "assert snake_to_camel('apple_watch') == 'AppleWatch'"
        ],
        "draft_plan": [
            "# Split the input snake case string into individual words using the \"_\" delimiter\n# Capitalize the first letter of each word except the first word\n# Join the words together to form the camel case string\n# Return the camel case string"
        ],
        "final_plan": [
            "snake_to_camel <- function(snake_case_string) {\n  words <- strsplit(snake_case_string, \"_\")[[1]]\n  camel_case_string <- words[1]\n  \n  for (i in 2:length(words)) {\n    camel_case_string <- paste(camel_case_string, paste0(toupper(substr(words[i], 1, 1)), substr(words[i], 2)), sep = \"\")\n  }\n  \n  return(camel_case_string)\n}"
        ]
    },
    {
        "id": "412",
        "prompt": "Write a python function to remove odd numbers from a given list.",
        "solution": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
        "code": [
            "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l"
        ],
        "pseudo": "# Create an empty list to store the even numbers\n\n# Iterate through each number in the given list\n    # Check if the number is even (number % 2 == 0)\n        # If the number is even, append it to the list of even numbers\n\n# Return the list of even numbers",
        "test": [
            "assert remove_odd([1,2,3]) == [2]",
            "assert remove_odd([2,4,6]) == [2,4,6]",
            "assert remove_odd([10,20,3]) == [10,20]"
        ],
        "draft_plan": [
            "# Initialize an empty list called 'result'\n# Iterate through each number in the input list\n    # Check if the current number is even\n        # If the number is even, append it to the 'result' list\n# Return the 'result' list containing only even numbers"
        ],
        "final_plan": [
            "remove_odd_numbers <- function(lst) {\n  result <- c()\n  \n  for (num in lst) {\n    if (num %% 2 == 0) {\n      result <- c(result, num)\n    }\n  }\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "413",
        "prompt": "Write a function to extract the nth element from a given list of tuples.",
        "solution": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result",
        "code": [
            "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result"
        ],
        "pseudo": "# Initialize an empty list to store the nth element from each tuple\n\n# Iterate through each tuple in the given list\n    # Check if the tuple has at least n elements\n        # If yes, append the nth element to the result list\n\n# Return the result list",
        "test": [
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
        ],
        "draft_plan": [
            "# Define a function to extract the nth element from a list of tuples\n# Initialize an empty list to store the extracted elements\n# Iterate over each tuple in the input list using 'each' iterator\n    # Extract the nth element from the current tuple using indexing\n    # Append the extracted element to the result list\n# Return the result list containing the extracted nth elements from each tuple"
        ],
        "final_plan": [
            "extract_nth_element <- function(lst, n) {\n  result <- list()\n  \n  for (tup in lst) {\n    element <- tup[[n]]\n    result <- c(result, element)\n  }\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "414",
        "prompt": "Write a python function to check whether any value in a sequence exists in a sequence or not.",
        "solution": "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False",
        "code": [
            "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False"
        ],
        "pseudo": "# Iterate through each value in the first sequence\n    # Check if the value exists in the second sequence\n        # If the value exists, return True\n\n# If no matching value is found, return False",
        "test": [
            "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
            "assert overlapping([1,2,3],[4,5,6]) == False",
            "assert overlapping([1,4,5],[1,4,5]) == True"
        ],
        "draft_plan": [
            "# Define a function to check whether any value in a sequence exists in another sequence.\n# Iterate through each value in the first sequence.\n    # Check if the current value exists in the second sequence.\n        # If true, return True.\n# If no value is found in the second sequence, return False."
        ],
        "final_plan": [
            "check_exists <- function(seq1, seq2) {\n  for (value in seq1) {\n    if (value %in% seq2) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}"
        ]
    },
    {
        "id": "415",
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.",
        "solution": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ",
        "code": [
            "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    "
        ],
        "pseudo": "# Initialize the maximum product to -infinity\n\n# Iterate through each pair of numbers in the array\n    # Calculate the product of the current pair\n    # Update the maximum product if the current product is greater\n\n# Return the pair with the highest product",
        "test": [
            "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
            "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
            "assert max_Product([1,2,3]) == (2,3)"
        ],
        "draft_plan": [
            "# Define a function to find a pair with the highest product from a given array of integers.\n# Initialize two variables, 'max_product' and 'pair', to keep track of the maximum product and the pair of numbers with the maximum product.\n# Iterate over the input array using two nested loops.\n    # For each pair of numbers (i, j) in the array, excluding duplicates and pairs where i >= j:\n        # Calculate the product of the pair.\n        # If the product is greater than 'max_product', update 'max_product' and 'pair'.\n# Return the 'pair' with the highest product."
        ],
        "final_plan": [
            "find_highest_product_pair <- function(arr) {\n  max_product <- 0\n  pair <- c(0, 0)\n  \n  for (i in seq_along(arr)) {\n    for (j in seq(i + 1, length(arr))) {\n      if (arr[i] != arr[j] && arr[i] < arr[j]) {\n        product <- arr[i] * arr[j]\n        if (product > max_product) {\n          max_product <- product\n          pair <- c(arr[i], arr[j])\n        }\n      }\n    }\n  }\n  \n  return(pair)\n}"
        ]
    },
    {
        "id": "417",
        "prompt": "Write a function to find common first element in given list of tuple.",
        "solution": "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] ",
        "code": [
            "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] "
        ],
        "pseudo": "# Initialize a set to store the first elements of the tuples\n# Initialize a variable to store the common first element, initially None\n\n# Iterate through each tuple in the list\n    # Check if the first element of the tuple is already in the set\n        # If it is, set the common first element to the current element\n        # Break the loop as we have found the common first element\n    # If the first element is not in the set, add it to the set\n\n# Return the common first element",
        "test": [
            "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
            "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
            "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
        ],
        "draft_plan": [
            "# Initialize a variable 'common_first' to None\n# Iterate through each tuple in the input list\n    # Check if 'common_first' is None\n        # If true, assign the first element of the current tuple to 'common_first'\n    # Check if the first element of the current tuple is equal to 'common_first'\n        # If false, return None\n# Return 'common_first'"
        ],
        "final_plan": [
            "find_common_first <- function(lst) {\n  common_first <- NULL\n  \n  for (tup in lst) {\n    if (is.null(common_first)) {\n      common_first <- tup[[1]]\n    } else {\n      if (tup[[1]] != common_first) {\n        return(NULL)\n      }\n    }\n  }\n  \n  return(common_first)\n}"
        ]
    },
    {
        "id": "418",
        "prompt": "Write a python function to find the element of a list having maximum length.",
        "solution": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList",
        "code": [
            "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList"
        ],
        "pseudo": "# Initialize a variable to store the index of the element with maximum length\n# Initialize a variable to store the maximum length, initially set to 0\n\n# Iterate through each element in the list\n    # Check if the length of the current element is greater than the maximum length\n        # If so, update the maximum length and the index of the element\n\n# Return the element at the index with maximum length",
        "test": [
            "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
            "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
            "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
        ],
        "draft_plan": [
            "# Initialize a variable 'max_length_element' to an empty list\n# Initialize a variable 'max_length' to 0\n# Iterate through each element in the input list\n    # Check if the length of the current element is greater than 'max_length'\n        # If true, update 'max_length' to the length of the current element and 'max_length_element' to the current element\n# Return 'max_length_element'"
        ],
        "final_plan": [
            "find_max_length_element <- function(lst) {\n  max_length_element <- list()\n  max_length <- 0\n  \n  for (element in lst) {\n    if (length(element) > max_length) {\n      max_length <- length(element)\n      max_length_element <- element\n    }\n  }\n  \n  return(max_length_element)\n}"
        ]
    },
    {
        "id": "419",
        "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
        "solution": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum",
        "code": [
            "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum"
        ],
        "pseudo": "# Initialize a variable to store the total sum\n# Iterate through each number in the list\n    # Round the number to the nearest integer\n    # Add the rounded number to the total sum\n\n# Calculate the total sum multiplied by the length of the list\n# Print the result",
        "test": [
            "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
            "assert round_and_sum([5,2,9,24.3,29])==345",
            "assert round_and_sum([25.0,56.7,89.2])==513"
        ],
        "draft_plan": [
            "# Define a function to round numbers in a given list and calculate the total sum multiplied by the length of the list.\n# Initialize a variable 'total_sum' to 0.\n# Iterate over the input list of numbers using a for loop.\n    # Round each number using the round() function and add it to the total sum.\n# Calculate the final result by multiplying the total sum by the length of the list.\n# Print the final result.\n"
        ],
        "final_plan": [
            "round_and_multiply <- function(numbers_list) {\n  total_sum <- 0\n  \n  for (num in numbers_list) {\n    total_sum <- total_sum + round(num)\n  }\n  \n  final_result <- total_sum * length(numbers_list)\n  \n  print(final_result)\n}"
        ]
    },
    {
        "id": "420",
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
        "solution": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
        "code": [
            "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum"
        ],
        "pseudo": "# Initialize a variable to store the sum of the cube of even numbers\n# Iterate through each even number from 2 to (2*n) with a step size of 2\n    # Calculate the cube of the current even number\n    # Add the cube to the sum\n\n# Return the sum of the cube of even numbers",
        "test": [
            "assert cube_Sum(2) == 72",
            "assert cube_Sum(3) == 288",
            "assert cube_Sum(4) == 800"
        ],
        "draft_plan": [
            "# Define a function to find the cube sum of the first n even natural numbers.\n# Initialize a variable 'sum' to store the cumulative sum of the cube of even numbers.\n# Iterate through each even number from 2 to 2n (inclusive).\n    # Calculate the cube of the current even number and add it to the 'sum' variable.\n# Return the value of 'sum' as the cube sum of the first n even natural numbers."
        ],
        "final_plan": [
            "cube_sum_of_even_numbers <- function(n) {\n  sum <- 0\n  \n  for (i in 2:(2*n) by 2) {\n    sum <- sum + i^3\n  }\n  \n  return(sum)\n}"
        ]
    },
    {
        "id": "421",
        "prompt": "Write a function to concatenate each element of tuple by the delimiter.",
        "solution": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ",
        "code": [
            "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) "
        ],
        "pseudo": "# Initialize an empty string to store the concatenated elements\n\n# Iterate through each tuple in the input list\n    # Iterate through each element in the tuple\n        # Concatenate the element to the output string\n        # If the current element is not the last element in the tuple, append the delimiter\n\n# Return the concatenated string",
        "test": [
            "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
            "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
            "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
        ],
        "draft_plan": [
            "# Define a function to concatenate each element of a tuple by the delimiter.\n# Initialize an empty string to store the concatenated result.\n# Iterate over each element in the tuple.\n    # Convert the current element to a string.\n    # Append the string representation of the current element to the result string.\n    # If the current element is not the last element, append the delimiter to the result string.\n# Return the final concatenated result."
        ],
        "final_plan": [
            "concatenate_tuple <- function(tuple, delimiter) {\n  result <- \"\"\n  \n  for (i in seq_along(tuple)) {\n    result <- paste(result, as.character(tuple[[i]]), sep = \"\")\n    \n    if (i < length(tuple)) {\n      result <- paste(result, delimiter, sep = \"\")\n    }\n  }\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "422",
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.",
        "solution": "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) ",
        "code": [
            "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) "
        ],
        "pseudo": "# Define a function to find the average of cubes of first n natural numbers\ndef average_of_cubes(n):\n    # Initialize sum of cubes to 0\n    sum_of_cubes = 0\n    \n    # Iterate through the range of 1 to n+1\n    for i in range(1, n+1):\n        # Calculate the cube of the current number and add it to the sum_of_cubes\n        sum_of_cubes += i**3\n    \n    # Calculate the average by dividing the sum_of_cubes by n\n    average = sum_of_cubes / n\n    \n    # Return the average\n    return average",
        "test": [
            "assert find_Average_Of_Cube(2) == 4.5",
            "assert find_Average_Of_Cube(3) == 12",
            "assert find_Average_Of_Cube(1) == 1"
        ],
        "draft_plan": [
            "# Define a function to find the average of cubes of first n natural numbers.\n# Initialize a variable 'sum_of_cubes' to 0.\n# Iterate from 1 to n (inclusive) using a for loop.\n    # Calculate the cube of the current number and add it to 'sum_of_cubes'.\n# Calculate the average by dividing 'sum_of_cubes' by n.\n# Return the average."
        ],
        "final_plan": [
            "average_of_cubes <- function(n) {\n  sum_of_cubes <- 0\n  \n  for (i in 1:n) {\n    sum_of_cubes <- sum_of_cubes + i^3\n  }\n  \n  average <- sum_of_cubes / n\n  \n  return(average)\n}"
        ]
    },
    {
        "id": "424",
        "prompt": "Write a function to extract only the rear index element of each string in the given tuple.",
        "solution": "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) ",
        "code": [
            "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) "
        ],
        "pseudo": "# Create an empty list to store the rear index elements\n# Iterate through each string in the given tuple\n    # Get the rear index element of the current string using indexing\n    # Append the rear index element to the list\n\n# Return the list of rear index elements",
        "test": [
            "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
            "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
            "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
        ],
        "draft_plan": [
            "# Define a function to extract the rear index element of each string in a given tuple.\n# Initialize an empty list to store the extracted elements.\n# Iterate over each string in the tuple.\n    # Get the length of the current string.\n    # Check if the length is greater than 0.\n        # If true, append the last character of the string to the list.\n# Return the list of extracted elements."
        ],
        "final_plan": [
            "extract_rear_index <- function(test_tuple) {\n  extracted_elements <- c()\n  \n  for (string in test_tuple) {\n    length_string <- nchar(string)\n    \n    if (length_string > 0) {\n      extracted_elements <- c(extracted_elements, substr(string, length_string, length_string))\n    }\n  }\n  \n  return(extracted_elements)\n}"
        ]
    },
    {
        "id": "425",
        "prompt": "Write a function to count the number of sublists containing a particular element.",
        "solution": "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr",
        "code": [
            "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr"
        ],
        "pseudo": "# Initialize a count variable to 0\n\n# Iterate through each sublist in the main list\n    # Check if the particular element is present in the sublist\n        # If yes, increment the count variable\n\n# Return the count variable",
        "test": [
            "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
            "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
            "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
        ],
        "draft_plan": [
            "# Define a function to count the number of sublists containing a particular element.\n# Initialize a counter variable to keep track of the number of sublists containing the element.\n# Iterate over the input list of sublists using 'each' iterator.\n    # Check if the particular element is present in the current sublist.\n        # If true, increment the counter variable.\n# Return the value of the counter variable, which represents the number of sublists containing the element."
        ],
        "final_plan": [
            "count_sublists_with_element <- function(lst, element) {\n  count <- 0\n  \n  for (sublist in lst) {\n    if (element %in% sublist) {\n      count <- count + 1\n    }\n  }\n  \n  return(count)\n}"
        ]
    },
    {
        "id": "426",
        "prompt": "Write a function to filter odd numbers.",
        "solution": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums",
        "code": [
            "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums"
        ],
        "pseudo": "# Initialize an empty list to store the filtered numbers\n\n# Iterate through each number in the input list\n    # Check if the number is odd\n        # If the number is odd, append it to the filtered list\n\n# Return the filtered list",
        "test": [
            "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
            "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
            "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
        ],
        "draft_plan": [
            "# Define a function to filter odd numbers.\n# Initialize an empty list to store the filtered odd numbers.\n# Iterate over the input list of numbers using 'each' iterator.\n    # Check if the current number is odd.\n        # If true, append the number to the filtered list.\n# Return the filtered list of odd numbers."
        ],
        "final_plan": [
            "filter_odd_numbers <- function(numbers) {\n  filtered <- c()\n  \n  for (num in numbers) {\n    if (num %% 2 != 0) {\n      filtered <- c(filtered, num)\n    }\n  }\n  \n  return(filtered)\n}"
        ]
    },
    {
        "id": "427",
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
        "solution": "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)",
        "code": [
            "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"
        ],
        "pseudo": "# Split the input date string by '-' to get year, month, and day\n# Create a new date string in the format of dd-mm-yyyy using day, month, and year obtained from the split\n# Return the new date string",
        "test": [
            "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
            "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
            "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
        ],
        "draft_plan": [
            "# Split the input date string by the \"-\" delimiter to obtain the year, month, and day as separate strings\n# Concatenate the day, month, and year strings in the desired order using the \"-\" delimiter\n# Return the formatted date string"
        ],
        "final_plan": [
            "convert_date_format <- function(date) {\n  date_parts <- strsplit(date, \"-\")[[1]]\n  formatted_date <- paste(date_parts[3], date_parts[2], date_parts[1], sep = \"-\")\n  return(formatted_date)\n}"
        ]
    },
    {
        "id": "428",
        "prompt": "Write a function to sort the given array by using shell sort.",
        "solution": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list",
        "code": [
            "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list"
        ],
        "pseudo": "# Define a function to perform shell sort on the given array\n    # Start with a large gap (length of array divided by 2)\n    # Iterate until the gap becomes 0\n        # Iterate through the array from the current gap to the end\n            # Compare the current element with the element at the position gap steps before it\n            # If the current element is smaller, swap them\n        # Reduce the gap by dividing it by 2\n\n# Call the shell sort function on the given array\n# Return the sorted array",
        "test": [
            "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
            "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
            "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
        ],
        "draft_plan": [
            "# Define a function to perform shell sort on the input array\n# Determine the gap size for the first iteration of the shell sort\n# Iterate while the gap size is greater than 1\n    # Divide the gap size by 2 to reduce it for the next iteration\n    # Iterate over the array from the current gap size to the end\n        # Store the current element in a temporary variable\n        # Compare the current element with the element 'gap' positions before it\n        # If the current element is smaller, swap it with the element 'gap' positions before it\n    # End inner iteration\n# End outer iteration\n# Return the sorted array"
        ],
        "final_plan": [
            "shell_sort <- function(arr) {\n  n <- length(arr)\n  gap <- floor(n/2)\n  \n  while (gap > 0) {\n    for (i in (gap+1):n) {\n      temp <- arr[i]\n      j <- i\n      \n      while (j > gap && arr[j-gap] > temp) {\n        arr[j] <- arr[j-gap]\n        j <- j - gap\n      }\n      \n      arr[j] <- temp\n    }\n    \n    gap <- floor(gap/2)\n  }\n  \n  return(arr)\n}"
        ]
    },
    {
        "id": "429",
        "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "solution": "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "code": [
            "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) "
        ],
        "pseudo": "# Initialize an empty list to store the elementwise AND tuples\n\n# Iterate through each element in the first tuple\n    # Iterate through each element in the second tuple\n        # Perform elementwise AND operation on the corresponding elements of the tuples\n        # Append the result to the list of elementwise AND tuples\n\n# Return the list of elementwise AND tuples",
        "test": [
            "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
            "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
            "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
        ],
        "draft_plan": [
            "# Define a function to extract elementwise 'and' tuples from two given tuples.\n# Initialize an empty list to store the result.\n# Iterate over the elements of the first tuple using 'each' iterator.\n    # Iterate over the elements of the second tuple using 'each' iterator.\n        # Create a tuple with the element from the first tuple and the element from the second tuple using the 'tuple()' function.\n        # Append the tuple to the result list.\n# Return the result list."
        ],
        "final_plan": [
            "extract_tuples <- function(tuple1, tuple2) {\n  result <- list()\n  \n  for (elem1 in tuple1) {\n    for (elem2 in tuple2) {\n      new_tuple <- tuple(elem1, elem2)\n      result <- append(result, new_tuple)\n    }\n  }\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "430",
        "prompt": "Write a function to find the directrix of a parabola.",
        "solution": "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix",
        "code": [
            "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix"
        ],
        "pseudo": "To find the directrix of a parabola, we can use the equation of a parabola in vertex form:\n\ny = (1 / (4 * p)) * (x - h)^2 + k\n\nwhere (h, k) is the vertex of the parabola and p is the distance from the vertex to the focus.\n\nThe directrix of the parabola is a horizontal line given by the equation:\n\ny = k - p\n\nTherefore, the logic to find the directrix of a parabola is as follows:\n\n1. Given the vertex coordinates (h, k) and the value of p, calculate the value of the directrix using the equation y = k - p.\n\n2. Return the value of the directrix.\n",
        "test": [
            "assert parabola_directrix(5,3,2)==-198",
            "assert parabola_directrix(9,8,4)==-2336",
            "assert parabola_directrix(2,4,6)==-130"
        ],
        "draft_plan": [
            "To find the directrix of a parabola, we need to determine the equation of the directrix line. The equation of a parabola in standard form is given by y = ax^2 + bx + c, where a, b, and c are constants.\n\nThe directrix of a parabola is a vertical line perpendicular to the axis of symmetry and equidistant from the vertex. The equation of the directrix line can be written as x = d, where d is the distance between the directrix line and the vertex.\n\nTo find the directrix of a parabola, we can follow these steps:\n\n1. Determine the coefficients a, b, and c of the parabola equation.\n2. Calculate the x-coordinate of the vertex using the formula x = -b / (2a).\n3. Calculate the y-coordinate of the vertex by substituting the x-coordinate into the parabola equation.\n4. Calculate the distance between the vertex and the directrix, which is the absolute value of the y-coordinate of the vertex.\n5. Determine the equation of the directrix line by setting x equal to the x-coordinate of the vertex plus or minus the distance calculated in step 4.\n\nHere is the plan for the R code implementation:\n\n1. Define a function named find_directrix that takes the coefficients a, b, and c as input.\n2. Calculate the x-coordinate of the vertex using the formula x = -b / (2a).\n3. Calculate the y-coordinate of the vertex by substituting the x-coordinate into the parabola equation.\n4. Calculate the distance between the vertex and the directrix using the absolute value of the y-coordinate of the vertex.\n5. Determine the equation of the directrix line by setting x equal to the x-coordinate of the vertex plus or minus the distance calculated in step 4.\n6. Return the equation of the directrix line."
        ],
        "final_plan": [
            "find_directrix <- function(a, b, c) {\n  # Calculate x-coordinate of the vertex\n  vertex_x <- -b / (2 * a)\n  \n  # Calculate y-coordinate of the vertex\n  vertex_y <- a * vertex_x^2 + b * vertex_x + c\n  \n  # Calculate distance between vertex and directrix\n  distance <- abs(vertex_y)\n  \n  # Determine equation of the directrix line\n  directrix <- paste0(\"x = \", vertex_x + distance)\n  \n  return(directrix)\n}"
        ]
    },
    {
        "id": "431",
        "prompt": "Write a function that takes two lists and returns true if they have at least one common element.",
        "solution": "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result",
        "code": [
            "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result"
        ],
        "pseudo": "# Iterate through each element in the first list\n    # Check if the current element is in the second list\n        # If found, return True\n\n# If no common element is found, return False",
        "test": [
            "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
            "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
            "assert common_element(['a','b','c'], ['d','b','e'])==True"
        ],
        "draft_plan": [
            "# Define a function that takes two lists as input\n# Iterate through each element in the first list\n    # Check if the current element exists in the second list\n        # If true, return True\n# If no common element is found, return False"
        ],
        "final_plan": [
            "have_common_element <- function(list1, list2) {\n  for (element1 in list1) {\n    if (element1 %in% list2) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}"
        ]
    },
    {
        "id": "432",
        "prompt": "Write a function to find the median length of a trapezium.",
        "solution": "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median",
        "code": [
            "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median"
        ],
        "pseudo": "# Define a function to calculate the median length of a trapezium\n    # Calculate the sum of the lengths of the two parallel sides of the trapezium\n    # Divide the sum by 2 to get the average length\n    # Return the average length as the median length of the trapezium",
        "test": [
            "assert median_trapezium(15,25,35)==20",
            "assert median_trapezium(10,20,30)==15",
            "assert median_trapezium(6,9,4)==7.5"
        ],
        "draft_plan": [
            "# Define a function to find the median length of a trapezium.\n# Take the lengths of the two parallel sides of the trapezium as input parameters.\n# Calculate the median length of the trapezium using the formula: (a + b) / 2, where 'a' and 'b' are the lengths of the parallel sides.\n# Return the median length of the trapezium."
        ],
        "final_plan": [
            "find_median_length <- function(a, b) {\n  median_length <- (a + b) / 2\n  return(median_length)\n}"
        ]
    },
    {
        "id": "433",
        "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "solution": "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]",
        "code": [
            "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]"
        ],
        "pseudo": "# Define a function that takes a number and an array as input\n    # Iterate through each element in the array\n        # Check if the number is greater than the current element\n            # If it is, return True\n    # If the number is not greater than any element in the array, return False",
        "test": [
            "assert check_greater([1, 2, 3, 4, 5], 4) == False",
            "assert check_greater([2, 3, 4, 5, 6], 8) == True",
            "assert check_greater([9, 7, 4, 8, 6, 1], 11) == True"
        ],
        "draft_plan": [
            "# Define a function to check whether a given number is greater than all elements in an array.\n# Initialize a variable 'greater' to be TRUE.\n# Iterate through each element in the array.\n    # Check if the given number is less than or equal to the current element.\n        # If true, update 'greater' to be FALSE and break out of the loop.\n# Return the value of 'greater'."
        ],
        "final_plan": [
            "is_greater_than_all <- function(number, array) {\n  greater <- TRUE\n  \n  for (element in array) {\n    if (number <= element) {\n      greater <- FALSE\n      break\n    }\n  }\n  \n  return(greater)\n}"
        ]
    },
    {
        "id": "434",
        "prompt": "Write a function that matches a string that has an a followed by one or more b's.",
        "solution": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n",
        "code": [
            "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n"
        ],
        "pseudo": "import re\n\ndef match_string(string):\n    pattern = r'a+b+'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False",
        "test": [
            "assert text_match_one(\"ac\")==False",
            "assert text_match_one(\"dc\")==False",
            "assert text_match_one(\"abba\")==True"
        ],
        "draft_plan": [
            "# Define a function to match a string with the pattern 'a' followed by one or more 'b's.\n# Use the 'grepl' function to check if the input string matches the pattern.\n# Return the result of the 'grepl' function."
        ],
        "final_plan": [
            "match_pattern <- function(string) {\n  pattern <- \"ab+\"\n  result <- grepl(pattern, string)\n  return(result)\n}"
        ]
    },
    {
        "id": "435",
        "prompt": "Write a python function to find the last digit of a given number.",
        "solution": "def last_Digit(n) :\n    return (n % 10) ",
        "code": [
            "def last_Digit(n) :\n    return (n % 10) "
        ],
        "pseudo": "To find the last digit of a given number, you can use the modulo operator (`%`) to get the remainder when dividing the number by 10. The remainder will be the last digit of the number.\n\nYou can then call this function by passing a number as an argument to get the last digit.",
        "test": [
            "assert last_Digit(123) == 3",
            "assert last_Digit(25) == 5",
            "assert last_Digit(30) == 0"
        ],
        "draft_plan": [
            "# Convert the given number to a string\n# Extract the last character from the string\n# Convert the last character back to an integer\n# Return the last digit as the result"
        ],
        "final_plan": [
            "find_last_digit <- function(number) {\n  number_str <- as.character(number)\n  last_digit_str <- substr(number_str, nchar(number_str), nchar(number_str))\n  last_digit <- as.integer(last_digit_str)\n  \n  return(last_digit)\n}"
        ]
    },
    {
        "id": "436",
        "prompt": "Write a python function to return the negative numbers in a list.",
        "solution": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ",
        "code": [
            "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out "
        ],
        "pseudo": "# Initialize an empty list to store the negative numbers\n\n# Iterate through each element in the input list\n    # Check if the current element is less than 0\n        # If the element is negative, append it to the list of negative numbers\n\n# Return the list of negative numbers",
        "test": [
            "assert neg_nos([-1,4,5,-6]) == [-1,-6]",
            "assert neg_nos([-1,-2,3,4]) == [-1,-2]",
            "assert neg_nos([-7,-6,8,9]) == [-7,-6]"
        ],
        "draft_plan": [
            "# Initialize an empty list called 'negatives'\n# Iterate through each number in the input list\n    # Check if the current number is less than zero\n        # If true, append the number to the 'negatives' list\n# Return the 'negatives' list"
        ],
        "final_plan": [
            "return_negatives <- function(lst) {\n  negatives <- vector(\"numeric\")\n  \n  for (num in lst) {\n    if (num < 0) {\n      negatives <- c(negatives, num)\n    }\n  }\n  \n  return(negatives)\n}"
        ]
    },
    {
        "id": "437",
        "prompt": "Write a function to remove odd characters in a string.",
        "solution": "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2",
        "code": [
            "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2"
        ],
        "pseudo": "# Initialize an empty string to store the result\n\n# Iterate through each character in the input string\n    # Check if the index of the current character is even\n        # If the index is even, append the character to the result string\n\n# Return the result string",
        "test": [
            "assert remove_odd(\"python\")==(\"yhn\")",
            "assert remove_odd(\"program\")==(\"rga\")",
            "assert remove_odd(\"language\")==(\"agae\")"
        ],
        "draft_plan": [
            "# Define a method to remove odd characters from a string.\n# Initialize an empty string to store the result.\n# Iterate over each character in the input string using 'each' iterator.\n    # Check if the index of the current character is even.\n        # If true, add the character to the result string.\n# Return the result string."
        ],
        "final_plan": [
            "remove_odd_characters <- function(string) {\n  result <- \"\"\n  \n  for (i in seq_along(strsplit(string, NULL)[[1]])) {\n    if (i %% 2 == 0) {\n      result <- paste(result, substr(string, i, i), sep = \"\")\n    }\n  }\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "438",
        "prompt": "Write a function to count bidirectional tuple pairs.",
        "solution": "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res",
        "code": [
            "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res"
        ],
        "pseudo": "# Initialize a counter variable to 0\n\n# Iterate through each pair in the array\n    # Check if the reverse of the current pair exists in the array\n        # If it does, increment the counter by 1\n\n# Return the counter value",
        "test": [
            "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3",
            "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2",
            "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4"
        ],
        "draft_plan": [
            "# Define a function to count bidirectional tuple pairs\n# Initialize a counter variable to keep track of the bidirectional pairs count\n# Create an empty list to store the unique pairs encountered\n# Iterate over each tuple in the input list\n    # Check if the reversed tuple is already in the list of unique pairs\n        # If true, increment the bidirectional pairs count\n        # Remove the reversed tuple from the list of unique pairs\n    # If the reversed tuple is not in the list of unique pairs\n        # Add the current tuple to the list of unique pairs\n# Return the count of bidirectional pairs"
        ],
        "final_plan": [
            "count_bidirectional <- function(test_list) {\n  bidirectional_count <- 0\n  unique_pairs <- list()\n  \n  for (tup in test_list) {\n    reverse_tup <- rev(tup)\n    \n    if (toString(reverse_tup) %in% unique_pairs) {\n      bidirectional_count <- bidirectional_count + 1\n      unique_pairs <- unique_pairs[unique_pairs != toString(reverse_tup)]\n    } else {\n      unique_pairs <- c(unique_pairs, toString(tup))\n    }\n  }\n  \n  return(bidirectional_count)\n}"
        ]
    },
    {
        "id": "439",
        "prompt": "Write a function to join a list of multiple integers into a single integer.",
        "solution": "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x",
        "code": [
            "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x"
        ],
        "pseudo": "# Convert each integer in the list to a string\n# Join the list of strings into a single string\n# Convert the resulting string back to an integer and return it",
        "test": [
            "assert multiple_to_single([11, 33, 50])==113350",
            "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
            "assert multiple_to_single([10,15,20,25])==10152025"
        ],
        "draft_plan": [
            "# Convert each integer in the list to a string\n# Concatenate all the strings together\n# Convert the concatenated string back to an integer\n# Return the resulting integer"
        ],
        "final_plan": [
            "join_integers <- function(lst) {\n  concatenated <- paste(lst, collapse = \"\")\n  result <- as.integer(concatenated)\n  return(result)\n}"
        ]
    },
    {
        "id": "440",
        "prompt": "Write a function to find the first adverb and their positions in a given sentence.",
        "solution": "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))",
        "code": [
            "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))"
        ],
        "pseudo": "# Split the sentence into a list of words\n\n# Iterate through each word and its index in the list\n    # Check if the word ends with \"ly\" (indicating it is an adverb)\n        # If it is an adverb, store its index and break the loop\n\n# If an adverb is found, return its index and the adverb itself\n# If no adverb is found, return None",
        "test": [
            "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
            "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
            "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
        ],
        "draft_plan": [
            "# Define a function to find the first adverb and their positions in a given sentence.\n# Split the sentence into a list of words.\n# Initialize a variable 'adverb' as an empty string.\n# Iterate over each word in the list using a for loop.\n    # Check if the current word ends with 'ly', indicating it is an adverb.\n        # If true, assign the current word to the 'adverb' variable and break the loop.\n# If an adverb is found, return the adverb and its position in the sentence.\n# If no adverb is found, return an appropriate message indicating that no adverb was found."
        ],
        "final_plan": [
            "find_first_adverb <- function(sentence) {\n  words <- strsplit(sentence, \" \")[[1]]\n  adverb <- \"\"\n  \n  for (i in seq_along(words)) {\n    if (grepl(\"ly$\", words[i])) {\n      adverb <- words[i]\n      break\n    }\n  }\n  \n  if (adverb != \"\") {\n    return(list(adverb = adverb, position = i))\n  } else {\n    return(\"No adverb found in the sentence.\")\n  }\n}"
        ]
    },
    {
        "id": "441",
        "prompt": "Write a function to find the surface area of a cube of a given size.",
        "solution": "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea",
        "code": [
            "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea"
        ],
        "pseudo": "To find the surface area of a cube, we can use the formula: surface_area = 6 * side_length^2\n\nYou can call this function with the desired `side_length` value to get the surface area of the cube.",
        "test": [
            "assert surfacearea_cube(5)==150",
            "assert surfacearea_cube(3)==54",
            "assert surfacearea_cube(10)==600"
        ],
        "draft_plan": [
            "# Define a function to calculate the surface area of a cube\n# Accept a parameter 'size' for the size of the cube\n# Calculate the surface area using the formula: 6 * (size^2)\n# Return the calculated surface area"
        ],
        "final_plan": [
            "calculate_cube_surface_area <- function(size) {\n  surface_area <- 6 * (size^2)\n  return(surface_area)\n}"
        ]
    },
    {
        "id": "442",
        "prompt": "Write a function to find the ration of positive numbers in an array of integers.",
        "solution": "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)",
        "code": [
            "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)"
        ],
        "pseudo": "# Initialize a counter for positive numbers\n# Iterate through each element in the array\n    # Check if the element is greater than 0\n        # If it is, increment the counter\n\n# Calculate the ratio of positive numbers by dividing the counter by the length of the array\n# Return the ratio",
        "test": [
            "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
            "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
            "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
        ],
        "draft_plan": [
            "# Define a function to calculate the ratio of positive numbers in an array of integers.\n# Initialize a counter variable for positive numbers and set it to 0.\n# Iterate over each element in the input array.\n    # Check if the current element is greater than 0.\n        # If true, increment the counter for positive numbers.\n# Calculate the ratio of positive numbers by dividing the counter by the length of the input array.\n# Return the ratio as the output of the function."
        ],
        "final_plan": [
            "calculate_positive_ratio <- function(arr) {\n  positive_count <- 0\n  \n  for (num in arr) {\n    if (num > 0) {\n      positive_count <- positive_count + 1\n    }\n  }\n  \n  positive_ratio <- positive_count / length(arr)\n  \n  return(positive_ratio)\n}"
        ]
    },
    {
        "id": "443",
        "prompt": "Write a python function to find the largest negative number from the given list.",
        "solution": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
        "code": [
            "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max"
        ],
        "pseudo": "# Initialize a variable 'largest_negative' to None\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If 'largest_negative' is None or the current number is greater than 'largest_negative', update 'largest_negative' to the current number\n\n# Return 'largest_negative'",
        "test": [
            "assert largest_neg([1,2,3,-4,-6]) == -6",
            "assert largest_neg([1,2,3,-8,-9]) == -9",
            "assert largest_neg([1,2,3,4,-1]) == -1"
        ],
        "draft_plan": [
            "# Initialize a variable 'largest_neg' to None\n# Iterate through each number in the list\n    # Check if the current number is negative and larger than the current 'largest_neg'\n        # If true, update the 'largest_neg' variable with the current number\n# Return the 'largest_neg' variable, which would be the largest negative number found\n"
        ],
        "final_plan": [
            "find_largest_negative <- function(lst) {\n  largest_neg <- NULL\n  \n  for (num in lst) {\n    if (num < 0 && (is.null(largest_neg) || num > largest_neg)) {\n      largest_neg <- num\n    }\n  }\n  \n  return(largest_neg)\n}"
        ]
    },
    {
        "id": "444",
        "prompt": "Write a function to trim each tuple by k in the given tuple list.",
        "solution": "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) ",
        "code": [
            "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) "
        ],
        "pseudo": "# Create an empty list to store the trimmed tuples\n\n# Iterate through each tuple in the given list\n    # Check if the length of the current tuple is greater than k\n        # If yes, trim the tuple by removing the first k elements\n        # Append the trimmed tuple to the new list\n\n# Return the new list containing the trimmed tuples",
        "test": [
            "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
            "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
            "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
        ],
        "draft_plan": [
            "# Define a function to trim each tuple by k in the given tuple list.\n# Initialize an empty list to store the trimmed tuples.\n# Iterate over the input list of tuples using 'each' iterator.\n    # Extract the two elements of the current tuple.\n    # Trim the first element of the tuple by k using the 'substring' function and store it in a variable.\n    # Trim the second element of the tuple by k using the 'substring' function and store it in a variable.\n    # Create a new tuple with the trimmed elements and append it to the trimmed list.\n# Return the trimmed list of tuples."
        ],
        "final_plan": [
            "trim_tuples <- function(tuple_list, k) {\n  trimmed_list <- list()\n  \n  for (tup in tuple_list) {\n    a <- substr(tup[[1]], k + 1, nchar(tup[[1]]))\n    b <- substr(tup[[2]], k + 1, nchar(tup[[2]]))\n    trimmed <- list(a, b)\n    trimmed_list <- c(trimmed_list, list(trimmed))\n  }\n  \n  return(trimmed_list)\n}"
        ]
    },
    {
        "id": "445",
        "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
        "solution": "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "code": [
            "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) "
        ],
        "pseudo": "# Create an empty list to store the result of multiplication\n\n# Iterate through the indexes of the tuples using the range of the length of the tuples\n    # Multiply the elements at the current index of both tuples\n    # Append the result to the list\n\n# Return the list",
        "test": [
            "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
            "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
            "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
        ],
        "draft_plan": [
            "# Define a function to perform index-wise multiplication of two tuples.\n# Create an empty list to store the multiplied values.\n# Iterate over the indices of the tuples using a for loop.\n    # Multiply the elements at the current index from both tuples.\n    # Append the multiplied value to the list.\n# Convert the list to a tuple.\n# Return the tuple of multiplied values."
        ],
        "final_plan": [
            "tuple_multiplication <- function(tuple1, tuple2) {\n  multiplied_values <- list()\n  \n  for (i in seq_along(tuple1)) {\n    multiplied_values[[i]] <- tuple1[[i]] * tuple2[[i]]\n  }\n  \n  return(as.list(multiplied_values))\n}"
        ]
    },
    {
        "id": "446",
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.",
        "solution": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ",
        "code": [
            "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  "
        ],
        "pseudo": "# Initialize an empty dictionary to store the element counts\n\n# Iterate through each element in the list\n    # Check if the element exists in the tuple\n        # If it exists, increment the count in the dictionary by 1\n        # If it doesn't exist, add the element to the dictionary with a count of 1\n\n# Return the dictionary with the element counts",
        "test": [
            "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
            "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
            "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
        ],
        "draft_plan": [
            "# Define a function to count the occurrence of elements from a list in a tuple.\n# Create an empty dictionary to store the counts of each element.\n# Iterate over the elements in the list.\n    # Check if the element exists in the tuple.\n        # If it does, increment its count in the dictionary.\n# Return the dictionary with the counts of each element."
        ],
        "final_plan": [
            "count_occurrence <- function(lst, tup) {\n  occurrence <- list()\n  \n  for (element in lst) {\n    if (element %in% tup) {\n      if (is.null(occurrence[[element]])) {\n        occurrence[[element]] <- 0\n      }\n      occurrence[[element]] <- occurrence[[element]] + 1\n    }\n  }\n  \n  return(occurrence)\n}"
        ]
    },
    {
        "id": "447",
        "prompt": "Write a function to find cubes of individual elements in a list.",
        "solution": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums",
        "code": [
            "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums"
        ],
        "pseudo": "# Create an empty list to store the cubes of individual elements\n# Iterate through each element in the input list\n    # Calculate the cube of the current element by raising it to the power of 3\n    # Append the cube to the result list\n\n# Return the result list containing the cubes of individual elements",
        "test": [
            "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
            "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
            "assert cube_nums([12,15])==([1728, 3375])"
        ],
        "draft_plan": [
            "# Define a function to find cubes of individual elements in a list.\n# Initialize an empty list to store the cube values.\n# Iterate over the input list using a loop.\n    # Calculate the cube of each element and append it to the result list.\n# Return the result list containing the cube values."
        ],
        "final_plan": [
            "find_cubes <- function(lst) {\n  result <- list()\n  \n  for (num in lst) {\n    cube <- num^3\n    result <- c(result, cube)\n  }\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "448",
        "prompt": "Write a function to calculate the sum of perrin numbers.",
        "solution": "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum",
        "code": [
            "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum"
        ],
        "pseudo": "# Define a function to calculate the sum of Perrin numbers up to a given limit\n\n# Initialize the first three Perrin numbers\n# Initialize the sum of Perrin numbers to 0\n\n# Iterate from 3 to the given limit\n    # Calculate the next Perrin number by summing the previous three Perrin numbers\n    # Add the current Perrin number to the sum\n\n# Return the sum of Perrin numbers",
        "test": [
            "assert cal_sum(9) == 49",
            "assert cal_sum(10) == 66",
            "assert cal_sum(11) == 88"
        ],
        "draft_plan": [
            "# Define a function to calculate the sum of Perrin numbers\n# Initialize variables p0, p1, and p2 with the first three Perrin numbers (3, 0, and 2)\n# Initialize a variable 'sum' to store the sum of the Perrin numbers\n# Iterate 'n' times to calculate the sum of the first 'n' Perrin numbers\n    # Calculate the next Perrin number by adding p(n-2) and p(n-3) and assign it to 'p'\n    # Update the sum by adding the current Perrin number to it\n    # Update p0, p1, and p2 by shifting their values (p(n-2), p(n-1), and p(n)) respectively\n# Return the sum of the Perrin numbers as the result"
        ],
        "final_plan": [
            "sum_perrin_numbers <- function(n) {\n  p0 <- 3\n  p1 <- 0\n  p2 <- 2\n  sum <- p0 + p1 + p2\n  \n  for (i in 4:n) {\n    p <- p2 + p1\n    sum <- sum + p\n    p0 <- p1\n    p1 <- p2\n    p2 <- p\n  }\n  \n  return(sum)\n}"
        ]
    },
    {
        "id": "450",
        "prompt": "Write a function to extract specified size of strings from a given list of string values.",
        "solution": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result",
        "code": [
            "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result"
        ],
        "pseudo": "# Initialize an empty list to store the extracted strings\n\n# Iterate through each string in the given list\n    # Check if the length of the current string is equal to the specified size\n        # If it matches, append the string to the result list\n\n# Return the list of extracted strings",
        "test": [
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
        ],
        "draft_plan": [
            "# Create a function to extract specified size of strings from a given list of string values.\n# Accept two arguments: the list of string values and the desired size of strings to extract.\n# Create an empty list to store the extracted strings.\n# Iterate over each string in the input list.\n    # Check if the length of the current string is equal to the desired size.\n        # If true, add the string to the list of extracted strings.\n# Return the list of extracted strings."
        ],
        "final_plan": [
            "extract_strings <- function(string_list, size) {\n  extracted_strings <- c()\n  \n  for (string in string_list) {\n    if (nchar(string) == size) {\n      extracted_strings <- c(extracted_strings, string)\n    }\n  }\n  \n  return(extracted_strings)\n}"
        ]
    },
    {
        "id": "451",
        "prompt": "Write a function to remove all whitespaces from the given string.",
        "solution": "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))",
        "code": [
            "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))"
        ],
        "pseudo": "# Initialize an empty string to store the modified string\n\n# Iterate through each character in the input string\n    # Check if the current character is a whitespace\n        # If it is not a whitespace, append it to the modified string\n\n# Return the modified string without whitespaces",
        "test": [
            "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
            "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
            "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
        ],
        "draft_plan": [
            "# Define a function to remove all whitespaces from a given string.\n# Initialize an empty string to store the result.\n# Iterate over each character in the input string.\n    # Check if the current character is a whitespace.\n        # If not, append the character to the result string.\n# Return the result string without whitespaces."
        ],
        "final_plan": [
            "remove_whitespaces <- function(string) {\n  result <- \"\"\n  \n  for (char in string) {\n    if (char != \" \") {\n      result <- paste(result, char, sep = \"\")\n    }\n  }\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "452",
        "prompt": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.",
        "solution": "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0",
        "code": [
            "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0"
        ],
        "pseudo": "# Define a function that takes the given amount as input\n    # Check if the given amount is less than the selling price\n        # If it is less, calculate the loss amount by subtracting the given amount from the selling price\n        # Return the loss amount\n    # If the given amount is not less than the selling price, return 0",
        "test": [
            "assert loss_amount(1500,1200)==0",
            "assert loss_amount(100,200)==100",
            "assert loss_amount(2000,5000)==3000"
        ],
        "draft_plan": [
            "# Define a function to calculate the loss amount on a sale\n# Check if the given amount is less than 0\n    # If true, calculate the absolute value of the amount and return it as the loss amount\n# If the given amount is greater than or equal to 0, return 0 as there is no loss"
        ],
        "final_plan": [
            "calculate_loss <- function(amount) {\n  if (amount < 0) {\n    return(abs(amount))\n  } else {\n    return(0)\n  }\n}"
        ]
    },
    {
        "id": "453",
        "prompt": "Write a python function to find the sum of even factors of a number.",
        "solution": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res",
        "code": [
            "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res"
        ],
        "pseudo": "# Initialize the sum of even factors to 0\n\n# Iterate from 1 to the given number (inclusive)\n    # Check if the current number is a factor of the given number\n        # Check if the current number is even\n            # If the current number is even, add it to the sum of even factors\n\n# Return the sum of even factors",
        "test": [
            "assert sumofFactors(18) == 26",
            "assert sumofFactors(30) == 48",
            "assert sumofFactors(6) == 8"
        ],
        "draft_plan": [
            "# Define a function to find the sum of even factors of a number.\n# Initialize a variable 'sum' to 0 to store the sum of even factors.\n# Iterate from 2 to the square root of the given number, as factors are found in pairs.\n    # Check if the current number is a factor of the given number.\n        # If true, check if the factor is even.\n            # If true, add the factor to the 'sum' variable.\n            # If the factor is not equal to the square root of the given number, add the pair factor to the 'sum' variable.\n# Return the 'sum' variable which will contain the sum of all even factors."
        ],
        "final_plan": [
            "sum_even_factors <- function(n) {\n  sum <- 0\n  \n  for (i in 2:sqrt(n)) {\n    if (n %% i == 0) {\n      if (i %% 2 == 0) {\n        sum <- sum + i\n      }\n      if ((n / i) %% 2 == 0 && (n / i) != i) {\n        sum <- sum + (n / i)\n      }\n    }\n  }\n  \n  return(sum)\n}"
        ]
    },
    {
        "id": "454",
        "prompt": "Write a function that matches a word containing 'z'.",
        "solution": "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
        "code": [
            "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False"
        ],
        "pseudo": "# Iterate through each word in the given list\n    # Check if the character 'z' is present in the word\n        # If 'z' is found, add the word to a new list\n\n# Return the new list containing words with 'z'",
        "test": [
            "assert text_match_wordz(\"pythonz.\")==True",
            "assert text_match_wordz(\"xyz.\")==True",
            "assert text_match_wordz(\"  lang  .\")==False"
        ],
        "draft_plan": [
            "# Define a function to match a word containing 'z'.\n# Initialize an empty list to store matching words.\n# Iterate over each word in the input list.\n    # Check if the word contains the letter 'z' using the 'grepl' function.\n    # If true, add the word to the list of matching words.\n# Return the list of matching words."
        ],
        "final_plan": [
            "match_word_with_z <- function(words_list) {\n  matching_words <- vector(\"character\")\n  \n  for (word in words_list) {\n    if (grepl(\"z\", word)) {\n      matching_words <- c(matching_words, word)\n    }\n  }\n  \n  return(matching_words)\n}"
        ]
    },
    {
        "id": "455",
        "prompt": "Write a function to check whether the given month number contains 31 days or not.",
        "solution": "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False",
        "code": [
            "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False"
        ],
        "pseudo": "# Create a list of months with 31 days\n    # Use the month numbers from 1 to 12\n\n# Check if the given month number is in the list of months with 31 days\n    # If it is, return True\n    # Otherwise, return False",
        "test": [
            "assert check_monthnumb_number(5)==True",
            "assert check_monthnumb_number(2)==False",
            "assert check_monthnumb_number(6)==False"
        ],
        "draft_plan": [
            "# Define a function to check if a given month number has 31 days or not.\n# Create a vector of month numbers that have 31 days.\n# Check if the given month number is present in the vector.\n    # If present, return TRUE.\n    # If not present, return FALSE."
        ],
        "final_plan": [
            "has_31_days <- function(month) {\n  days_31 <- c(1, 3, 5, 7, 8, 10, 12)\n  \n  if (month %in% days_31) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}"
        ]
    },
    {
        "id": "456",
        "prompt": "Write a function to reverse each string in a given list of string values.",
        "solution": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result",
        "code": [
            "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result"
        ],
        "pseudo": "# Iterate through each string in the given list\n    # Reverse the current string using string slicing\n    # Update the current string in the list with the reversed string\n\n# Return the modified list",
        "test": [
            "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
            "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
            "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
        ],
        "draft_plan": [
            "# Define a function to reverse each string in a given list of string values.\n# Initialize an empty list to store the reversed strings.\n# Iterate over each string in the input list using 'each' iterator.\n    # Reverse the current string using the 'rev' function.\n    # Append the reversed string to the result list.\n# Return the list of reversed strings."
        ],
        "final_plan": [
            "reverse_strings <- function(string_list) {\n  reversed_list <- list()\n  \n  for (string in string_list) {\n    reversed <- rev(strsplit(string, NULL)[[1]])\n    reversed_string <- paste(reversed, collapse = \"\")\n    reversed_list <- c(reversed_list, reversed_string)\n  }\n  \n  return(reversed_list)\n}"
        ]
    },
    {
        "id": "457",
        "prompt": "Write a python function to find the sublist having minimum length.",
        "solution": "def Find_Min(lst): \n    return min(lst, key=len) ",
        "code": [
            "def Find_Min(lst): \n    return min(lst, key=len) "
        ],
        "pseudo": "# If the input list is empty, return an empty list\n\n# Initialize the minimum length variable to a large value and the minimum sublist to an empty list\n\n# Iterate through each sublist in the input list\n    # If the length of the current sublist is less than the minimum length\n        # Update the minimum length and the minimum sublist\n\n# Return the minimum sublist",
        "test": [
            "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
            "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
            "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
        ],
        "draft_plan": [
            "# Initialize a variable 'min_length' to a large value\n# Initialize a variable 'min_sublist' to an empty list\n# Iterate through each sublist in the input list\n    # Check if the length of the current sublist is smaller than 'min_length'\n        # If true, update 'min_length' to the length of the current sublist and 'min_sublist' to the current sublist\n# Return 'min_sublist'"
        ],
        "final_plan": [
            "find_min_sublist <- function(lst) {\n  min_length <- Inf\n  min_sublist <- NULL\n  \n  for (sublist in lst) {\n    if (length(sublist) < min_length) {\n      min_length <- length(sublist)\n      min_sublist <- sublist\n    }\n  }\n  \n  return(min_sublist)\n}"
        ]
    },
    {
        "id": "458",
        "prompt": "Write a function to find the area of a rectangle.",
        "solution": "def rectangle_area(l,b):\n  area=l*b\n  return area",
        "code": [
            "def rectangle_area(l,b):\n  area=l*b\n  return area"
        ],
        "pseudo": "To find the area of a rectangle, we need the length and width of the rectangle. The formula to calculate the area of a rectangle is:\n\nArea = length * width\n\nYou can replace the values of `length` and `width` with your own values to find the area of a different rectangle.",
        "test": [
            "assert rectangle_area(10,20)==200",
            "assert rectangle_area(10,5)==50",
            "assert rectangle_area(4,2)==8"
        ],
        "draft_plan": [
            "# Define a function to calculate the area of a rectangle\n# Accept two parameters: length and width\n# Calculate the area by multiplying length and width\n# Return the calculated area"
        ],
        "final_plan": [
            "calculate_rectangle_area <- function(length, width) {\n  area <- length * width\n  return(area)\n}"
        ]
    },
    {
        "id": "459",
        "prompt": "Write a function to remove uppercase substrings from a given string.",
        "solution": "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)",
        "code": [
            "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)"
        ],
        "pseudo": "# Initialize an empty string to store the result\n\n# Iterate through each character in the input string\n    # Check if the current character is lowercase\n        # If it is lowercase, append it to the result string\n\n# Return the result string",
        "test": [
            "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
            "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
            "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
        ],
        "draft_plan": [
            "# Initialize an empty string 'result' to store the final result\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If not uppercase, add it to the 'result' string\n# Return the 'result' string"
        ],
        "final_plan": [
            "remove_uppercase_substrings <- function(string) {\n  result <- \"\"\n  \n  for (char in strsplit(string, NULL)[[1]]) {\n    if (!is.upper(char)) {\n      result <- paste(result, char, sep = \"\")\n    }\n  }\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "460",
        "prompt": "Write a python function to get the first element of each sublist.",
        "solution": "def Extract(lst): \n    return [item[0] for item in lst] ",
        "code": [
            "def Extract(lst): \n    return [item[0] for item in lst] "
        ],
        "pseudo": "# Create an empty list to store the first elements of each sublist\n\n# Iterate through each sublist in the input list\n    # Append the first element of the current sublist to the result list\n\n# Return the result list",
        "test": [
            "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
            "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
            "assert Extract([[9,8,1],[1,2]]) == [9,1]"
        ],
        "draft_plan": [
            "# Define a function to get the first element of each sublist\n# Initialize an empty list 'result'\n# Iterate through each sublist in the input list\n    # Append the first element of the current sublist to 'result'\n# Return 'result'"
        ],
        "final_plan": [
            "get_first_elements <- function(lst) {\n  result <- c()\n  \n  for (sublist in lst) {\n    result <- c(result, sublist[[1]])\n  }\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "461",
        "prompt": "Write a python function to count the upper case characters in a given string.",
        "solution": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
        "code": [
            "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr"
        ],
        "pseudo": "# Initialize a counter variable to keep track of the number of uppercase characters\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter variable\n\n# Return the counter variable, which represents the number of uppercase characters in the string",
        "test": [
            "assert upper_ctr('PYthon') == 1",
            "assert upper_ctr('BigData') == 1",
            "assert upper_ctr('program') == 0"
        ],
        "draft_plan": [
            "# Define a function to count the upper case characters in a given string.\n# Initialize a counter variable for upper case characters.\n# Iterate over each character in the input string using a loop.\n    # Check if the current character is an upper case letter using the is.upper() method.\n        # If true, increment the counter variable.\n# Return the counter variable containing the count of upper case characters."
        ],
        "final_plan": [
            "count_uppercase_chars <- function(string) {\n  count <- 0\n  \n  for (char in strsplit(string, NULL)[[1]]) {\n    if (char %in% LETTERS) {\n      count <- count + 1\n    }\n  }\n  \n  return(count)\n}"
        ]
    },
    {
        "id": "462",
        "prompt": "Write a function to find all possible combinations of the elements of a given list.",
        "solution": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result",
        "code": [
            "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result"
        ],
        "pseudo": "# Import the combinations function from the itertools module\n\n# Define the function to find all possible combinations\n    # Initialize an empty list to store the combinations\n    \n    # Use a for loop to iterate through different combination lengths\n        # Generate all combinations of the given list for the current combination length\n        # Append the combinations to the result list\n    \n    # Return the list of all possible combinations",
        "test": [
            "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
            "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
            "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
        ],
        "draft_plan": [
            "# Define a function to find all possible combinations of a list\n# Create an empty list to store the combinations\n# Use the combn() function to generate all combinations of the input list with specified length\n# Iterate over each combination and append it to the list of combinations\n# Return the list of combinations"
        ],
        "final_plan": [
            "find_combinations <- function(lst) {\n  combinations <- list()\n  \n  # Generate all possible combinations of length 1 to the length of the list\n  for (i in 1:length(lst)) {\n    combinations_i <- combn(lst, i)\n    for (j in 1:ncol(combinations_i)) {\n      combinations <- c(combinations, list(combinations_i[, j]))\n    }\n  }\n  \n  return(combinations)\n}"
        ]
    },
    {
        "id": "463",
        "prompt": "Write a function to find the maximum product subarray of the given array.",
        "solution": "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far",
        "code": [
            "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far"
        ],
        "pseudo": "# Initialize variables to store the maximum product, current maximum product, current minimum product, and the result\n# Set the maximum product and current maximum product to the first element of the array\n# Iterate through each element in the array starting from the second element\n    # Update the current maximum product and current minimum product by considering the current element\n    # Check if the current element is negative\n        # If it is negative, swap the current maximum product and current minimum product\n    # Check if the current maximum product is greater than the maximum product\n        # If it is, update the maximum product\n    # Check if the current element is greater than the current maximum product\n        # If it is, update the current maximum product\n    # Check if the current element is less than the current minimum product\n        # If it is, update the current minimum product\n    # Check if the maximum product is greater than the result\n        # If it is, update the result\n\n# Return the result",
        "test": [
            "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
            "assert max_subarray_product([6, -3, -10, 0, 2]) == 180",
            "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
        ],
        "draft_plan": [
            "# Initialize variables 'max_product', 'current_product', 'max_positive_product', 'max_negative_product' to the first element in the input array\n# Iterate through each element in the array starting from the second element\n    # Calculate the current product by multiplying the current element with the 'current_product'\n    # If the current element is 0, reset 'current_product' to 1 and 'max_positive_product' and 'max_negative_product' to 0\n    # If the current element is positive, update 'max_positive_product' by taking the maximum between the current element and the product of the current element and 'max_positive_product'\n    # If the current element is negative, update 'max_negative_product' by taking the maximum between the current element and the product of the current element and 'max_negative_product'\n    # Update 'max_product' by taking the maximum between 'max_product', 'current_product', 'max_positive_product', and 'max_negative_product'\n# Return 'max_product'"
        ],
        "final_plan": [
            "find_max_product_subarray <- function(arr) {\n  max_product <- arr[1]\n  current_product <- arr[1]\n  max_positive_product <- arr[1]\n  max_negative_product <- arr[1]\n  \n  for (i in 2:length(arr)) {\n    current_product <- max(arr[i], current_product * arr[i])\n    \n    if (arr[i] == 0) {\n      current_product <- 1\n      max_positive_product <- 0\n      max_negative_product <- 0\n    } else if (arr[i] > 0) {\n      max_positive_product <- max(arr[i], max_positive_product * arr[i])\n      max_negative_product <- min(arr[i], max_negative_product * arr[i])\n    } else {\n      temp <- max_positive_product\n      max_positive_product <- max(arr[i], max_negative_product * arr[i])\n      max_negative_product <- min(arr[i], temp * arr[i])\n    }\n    \n    max_product <- max(max_product, current_product, max_positive_product, max_negative_product)\n  }\n  \n  return(max_product)\n}"
        ]
    },
    {
        "id": "464",
        "prompt": "Write a function to check if all values are same in a dictionary.",
        "solution": "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result",
        "code": [
            "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result"
        ],
        "pseudo": "# Get the first value from the dictionary\n# Iterate through all the values in the dictionary\n    # Check if the current value is equal to the first value\n        # If not equal, return False\n\n# If all values are equal, return True",
        "test": [
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
        ],
        "draft_plan": [
            "# Extract all the values from the dictionary using the values() function.\n# Check if all the values in the list are the same.\n    # If all values are the same, return True\n    # If not, return False"
        ],
        "final_plan": [
            "check_all_same <- function(dictionary) {\n  values <- unlist(dictionary)\n  all_same <- all(values == values[1])\n  return(all_same)\n}"
        ]
    },
    {
        "id": "465",
        "prompt": "Write a function to drop empty items from a given dictionary.",
        "solution": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1",
        "code": [
            "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1"
        ],
        "pseudo": "# Initialize an empty dictionary to store the non-empty items\n\n# Iterate through each key-value pair in the given dictionary\n    # Check if the value is not empty\n        # If not empty, add the key-value pair to the new dictionary\n\n# Return the new dictionary",
        "test": [
            "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
            "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
            "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
        ],
        "draft_plan": [
            "# Define a function to drop empty items from a dictionary.\n# Create a new dictionary to store the non-empty items.\n# Iterate over each key-value pair in the input dictionary.\n    # Check if the value is not empty.\n        # If true, add the key-value pair to the new dictionary.\n# Return the new dictionary with non-empty items."
        ],
        "final_plan": [
            "drop_empty_items <- function(dictionary) {\n  new_dictionary <- list()\n  \n  for (key in names(dictionary)) {\n    value <- dictionary[[key]]\n    \n    if (!is.null(value) && length(value) > 0) {\n      new_dictionary[[key]] <- value\n    }\n  }\n  \n  return(new_dictionary)\n}"
        ]
    },
    {
        "id": "468",
        "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "solution": "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)",
        "code": [
            "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)"
        ],
        "pseudo": "# Initialize the maximum product as 1\n# Initialize an empty list to store the increasing subsequence\n\n# Iterate through each number in the array\n    # Initialize a temporary list to store the current increasing subsequence\n    # Iterate through each number before the current number\n        # Check if the current number is greater than the previous number and if the product of the current number and the previous maximum product is greater than the current maximum product\n            # If the condition is satisfied, update the maximum product and the temporary list with the current increasing subsequence\n    # Append the current number to the temporary list\n\n# Return the maximum product and the increasing subsequence list",
        "test": [
            "assert max_product([3, 100, 4, 5, 150, 6]) == 3000",
            "assert max_product([4, 42, 55, 68, 80]) == 50265600",
            "assert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460"
        ],
        "draft_plan": [
            "# Define a function to find the maximum product formed by multiplying numbers of an increasing subsequence of an array.\n# Create a dynamic programming table to store the maximum product values for each index of the input array, initialized with 1.\n# Initialize a variable 'max_product' to 1.\n# Iterate through each index 'i' in the input array.\n    # Iterate through each index 'j' from 0 to 'i'.\n        # Check if the current number at index 'j' is less than the number at index 'i'.\n            # If true, calculate the product of the number at index 'i' and the maximum product value at index 'j', and update the dynamic programming table at index 'i'.\n            # Update the 'max_product' variable if the product calculated is greater than 'max_product'.\n# Return the maximum product 'max_product'."
        ],
        "final_plan": [
            "find_max_product <- function(nums) {\n  n <- length(nums)\n  dp <- rep(1, n)\n  max_product <- 1\n  \n  for (i in 1:n) {\n    for (j in 1:i) {\n      if (nums[j] < nums[i]) {\n        dp[i] <- max(dp[i], dp[j] * nums[i])\n        max_product <- max(max_product, dp[i])\n      }\n    }\n  }\n  \n  return(max_product)\n}"
        ]
    },
    {
        "id": "470",
        "prompt": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.",
        "solution": "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ",
        "code": [
            "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) "
        ],
        "pseudo": "# Initialize an empty list to store the pairwise addition results\n\n# Iterate through the elements in the tuple up to the second to last element\n    # Compute the pairwise addition of the current element and its neighboring element\n    # Append the result to the list\n\n# Return the list of pairwise addition results",
        "test": [
            "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
            "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
            "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
        ],
        "draft_plan": [
            "# Define a function to find the pairwise addition of neighboring elements in a tuple.\n# Initialize an empty list to store the pairwise additions.\n# Iterate over the given tuple using 'each' iterator, starting from the second element.\n    # Add the current element and the previous element and append the result to the list.\n# Return the list of pairwise additions."
        ],
        "final_plan": [
            "pairwise_addition <- function(tuple) {\n  result <- list()\n  \n  for (i in 2:length(tuple)) {\n    addition <- tuple[i] + tuple[i-1]\n    result <- c(result, addition)\n  }\n  \n  return(result)\n}"
        ]
    },
    {
        "id": "471",
        "prompt": "Write a python function to find the product of the array multiplication modulo n.",
        "solution": "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ",
        "code": [
            "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n "
        ],
        "pseudo": "# Initialize the product to 1\n\n# Iterate through each element in the array\n    # Multiply the current element with the product\n    # Take the modulo of the product with n\n\n# Return the final product modulo n",
        "test": [
            "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9",
            "assert find_remainder([1,1,1],1) == 0",
            "assert find_remainder([1,2,1],2) == 0"
        ],
        "draft_plan": [
            "# Define a function to find the product of array multiplication modulo n.\n# Initialize a variable 'product' to 1.\n# Iterate over each element in the input array.\n    # Multiply the 'product' variable by the current element.\n    # Take the modulo n of the 'product' variable.\n# Return the 'product' variable."
        ],
        "final_plan": [
            "find_product_modulo_n <- function(array, n) {\n  product <- 1\n  \n  for (num in array) {\n    product <- (product * num) %% n\n  }\n  \n  return(product)\n}"
        ]
    },
    {
        "id": "472",
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.",
        "solution": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ",
        "code": [
            "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) "
        ],
        "pseudo": "# Sort the input list in ascending order\n\n# Iterate through each number in the sorted list, starting from the second number\n    # Check if the current number is consecutive to the previous number\n        # If not, return False\n\n# If all numbers are consecutive, return True",
        "test": [
            "assert check_Consecutive([1,2,3,4,5]) == True",
            "assert check_Consecutive([1,2,3,5,6]) == False",
            "assert check_Consecutive([1,2,1]) == False"
        ],
        "draft_plan": [
            "# Sort the input list in ascending order\n# Iterate through each number in the sorted list, except the last number\n    # Check if the next number is not equal to the current number plus 1\n        # If not, return False\n# If all numbers are consecutive, return True"
        ],
        "final_plan": [
            "check_consecutive <- function(lst) {\n  sorted_lst <- sort(lst)\n  \n  for (i in 1:(length(sorted_lst)-1)) {\n    if (sorted_lst[i+1] != sorted_lst[i] + 1) {\n      return(FALSE)\n    }\n  }\n  \n  return(TRUE)\n}"
        ]
    },
    {
        "id": "473",
        "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
        "solution": "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)",
        "code": [
            "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)"
        ],
        "pseudo": "# Initialize the intersection as the first tuple in the given tuple list\n\n# Iterate through each tuple in the given tuple list starting from the second tuple\n    # Initialize the current intersection as an empty list\n\n    # Iterate through each element in the current tuple\n        # Check if the element is present in the previous intersection\n            # If yes, append the element to the current intersection\n\n    # Update the intersection as the current intersection\n\n# Return the intersection",
        "test": [
            "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
            "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
            "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
        ],
        "draft_plan": [
            "# Define a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n# Create a set to store the unique elements of the first tuple in the list.\n# Iterate through each tuple in the list starting from the second tuple.\n    # Create a new set to store the unique elements of the current tuple.\n    # Update the set by finding the intersection between the set and the new set.\n# Convert the set to a list and return it as the tuple intersection."
        ],
        "final_plan": [
            "find_tuple_intersection <- function(tuple_list) {\n  intersection_set <- set(tuple_list[[1]])\n  \n  for (i in 2:length(tuple_list)) {\n    intersection_set <- intersect(intersection_set, set(tuple_list[[i]]))\n  }\n  \n  return(as.list(intersection_set))\n}"
        ]
    },
    {
        "id": "474",
        "prompt": "Write a function to replace characters in a string.",
        "solution": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2",
        "code": [
            "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2"
        ],
        "pseudo": "# Initialize an empty string to store the modified string\n\n# Iterate through each character in the input string\n    # Check if the character needs to be replaced\n        # If replacement is required, append the replacement character to the modified string\n        # Otherwise, append the original character to the modified string\n\n# Return the modified string",
        "test": [
            "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
            "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
            "assert replace_char(\"python\",'l','a')==(\"python\")"
        ],
        "draft_plan": [
            "# Define a function to replace characters in a string.\n# Accept three parameters - the input string, the character to be replaced, and the replacement character.\n# Initialize an empty string to store the modified string.\n# Iterate over each character in the input string.\n    # Check if the current character is equal to the character to be replaced.\n        # If true, append the replacement character to the modified string.\n        # If false, append the current character to the modified string.\n# Return the modified string."
        ],
        "final_plan": [
            "replace_characters <- function(input_string, char_to_replace, replacement_char) {\n  modified_string <- \"\"\n  \n  for (char in strsplit(input_string, NULL)[[1]]) {\n    if (char == char_to_replace) {\n      modified_string <- paste(modified_string, replacement_char, sep = \"\")\n    } else {\n      modified_string <- paste(modified_string, char, sep = \"\")\n    }\n  }\n  \n  return(modified_string)\n}"
        ]
    },
    {
        "id": "475",
        "prompt": "Write a function to sort a dictionary by value.",
        "solution": "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter",
        "code": [
            "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter"
        ],
        "pseudo": "# Use the sorted() function with a lambda function as the key parameter\n# The lambda function takes each key-value pair from the dictionary and returns the value\n# The sorted() function will sort the dictionary based on the values in ascending order\n# Pass the sorted dictionary to the dict() function to convert it back to a dictionary type\n\ndef sort_dict_by_value(dictionary):\n    sorted_dict = dict(sorted(dictionary.items(), key=lambda item: item[1]))\n    return sorted_dict",
        "test": [
            "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
            "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
            "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
        ],
        "draft_plan": [
            "# Define a function to sort a dictionary by value.\n# Convert the dictionary into a list of tuples using the `items()` method.\n# Sort the list of tuples based on the second element (value) of each tuple in ascending order.\n# Convert the sorted list of tuples back into a dictionary using the `dict()` constructor.\n# Return the sorted dictionary."
        ],
        "final_plan": [
            "sort_dictionary_by_value <- function(dictionary) {\n  sorted_list <- sort(dictionary, decreasing = FALSE, by = \"value\")\n  sorted_dict <- as.dictionary(sorted_list)\n  return(sorted_dict)\n}"
        ]
    },
    {
        "id": "476",
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.",
        "solution": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum",
        "code": [
            "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum"
        ],
        "pseudo": "# Sort the array in ascending order\n# Initialize variables for the smallest and largest values\n\n# Get the smallest value from the sorted array (first element)\n# Get the largest value from the sorted array (last element)\n\n# Calculate the sum of the smallest and largest values\n\n# Return the sum",
        "test": [
            "assert big_sum([1,2,3]) == 4",
            "assert big_sum([-1,2,3,4]) == 3",
            "assert big_sum([2,3,6]) == 8"
        ],
        "draft_plan": [
            "# Define a function to find the sum of the largest and smallest value in an array.\n# Initialize a variable 'smallest' to the first element of the array.\n# Initialize a variable 'largest' to the first element of the array.\n# Iterate over the array starting from the second element.\n    # Update 'smallest' if the current element is smaller than 'smallest'.\n    # Update 'largest' if the current element is larger than 'largest'.\n# Return the sum of 'smallest' and 'largest'."
        ],
        "final_plan": [
            "sum_smallest_largest <- function(arr) {\n  smallest <- arr[1]\n  largest <- arr[1]\n  \n  for (i in 2:length(arr)) {\n    if (arr[i] < smallest) {\n      smallest <- arr[i]\n    }\n    \n    if (arr[i] > largest) {\n      largest <- arr[i]\n    }\n  }\n  \n  return(smallest + largest)\n}"
        ]
    },
    {
        "id": "477",
        "prompt": "Write a python function to convert the given string to lower case.",
        "solution": "def is_lower(string):\n  return (string.lower())",
        "code": [
            "def is_lower(string):\n  return (string.lower())"
        ],
        "pseudo": "# Convert the input string to lower case using the lower() method\n# Return the lower case string",
        "test": [
            "assert is_lower(\"InValid\") == \"invalid\"",
            "assert is_lower(\"TruE\") == \"true\"",
            "assert is_lower(\"SenTenCE\") == \"sentence\""
        ],
        "draft_plan": [
            "# Use the built-in function tolower() to convert the given string to lower case\n# Return the lower case string"
        ],
        "final_plan": [
            "convert_to_lower <- function(string) {\n  return(tolower(string))\n}"
        ]
    },
    {
        "id": "478",
        "prompt": "Write a function to remove lowercase substrings from a given string.",
        "solution": "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)",
        "code": [
            "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)"
        ],
        "pseudo": "# Initialize an empty string to store the final result\n\n# Iterate through each character in the given string\n    # Check if the character is uppercase\n        # If the character is uppercase, append it to the final result string\n\n# Return the final result string",
        "test": [
            "assert remove_lowercase(\"PYTHon\")==('PYTH')",
            "assert remove_lowercase(\"FInD\")==('FID')",
            "assert remove_lowercase(\"STRinG\")==('STRG')"
        ],
        "draft_plan": [
            "# Define a function to remove lowercase substrings from a given string\n# Create an empty string to store the modified string\n# Iterate through each character in the input string\n    # Check if the current character is lowercase\n        # If true, continue to the next iteration\n    # If the current character is uppercase, append it to the modified string\n# Return the modified string without the lowercase substrings"
        ],
        "final_plan": [
            "remove_lowercase <- function(string) {\n  modified_string <- \"\"\n  \n  for (char in strsplit(string, NULL)[[1]]) {\n    if (char == toupper(char)) {\n      modified_string <- paste(modified_string, char, sep = \"\")\n    }\n  }\n  \n  return(modified_string)\n}"
        ]
    },
    {
        "id": "479",
        "prompt": "Write a python function to find the first digit of a given number.",
        "solution": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ",
        "code": [
            "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) "
        ],
        "pseudo": "# Convert the given number to a string\n\n# Iterate through each character in the string\n    # Check if the character is a digit\n        # If it is, return the character as the first digit\n\n# If no digit is found, return \"None\"",
        "test": [
            "assert first_Digit(123) == 1",
            "assert first_Digit(456) == 4",
            "assert first_Digit(12) == 1"
        ],
        "draft_plan": [
            "# Convert the given number to a string\n# Extract the first character from the string\n# Convert the first character back to an integer\n# Return the first digit as an integer"
        ],
        "final_plan": [
            "first_digit <- function(number) {\n  number_str <- as.character(number)\n  first_char <- substr(number_str, 1, 1)\n  first_digit <- as.integer(first_char)\n  \n  return(first_digit)\n}"
        ]
    }
]