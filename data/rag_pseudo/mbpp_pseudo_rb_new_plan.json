[
    {
        "id": "11",
        "prompt": "Write a function to remove first and last occurrence of a given character from the string.",
        "solution": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ",
        "code": [
            "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s "
        ],
        "pseudo": "# Find the index of the first occurrence of the given character in the string\n# Find the index of the last occurrence of the given character in the string\n\n# If both indices are valid\n    # Remove the first occurrence of the character from the string\n    # Decrement the index of the last occurrence by 1 to account for the removal\n    # Remove the last occurrence of the character from the string\n\n# Return the modified string",
        "test": [
            "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
            "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
            "assert remove_Occ(\"PHP\",\"P\") == \"H\""
        ],
        "draft_plan": [
            "# Define a method to remove the first and last occurrence of a given character from a string.\n# Find the index of the first occurrence of the given character in the string.\n# If the character is not found, return the original string.\n# Find the index of the last occurrence of the given character in the string.\n# If the character is not found, return the original string.\n# Remove the first occurrence of the character from the string.\n# Remove the last occurrence of the character from the string.\n# Return the modified string."
        ],
        "final_plan": [
            "def remove_first_last_occurrence(string, char)\n  first_index = string.index(char)\n  return string if first_index.nil?\n\n  last_index = string.rindex(char)\n  return string if last_index.nil?\n\n  string.slice!(first_index)\n  string.slice!(last_index - 1)\n\n  string\nend"
        ]
    },
    {
        "id": "12",
        "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "solution": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result",
        "code": [
            "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result"
        ],
        "pseudo": "# Calculate the sum of each row in the matrix\n\n# Create a list of tuples, where each tuple contains the index of the row and its corresponding sum\n\n# Sort the list of tuples based on the sum in ascending order\n\n# Create an empty sorted matrix\n\n# Iterate through the sorted list of tuples\n    # Append the corresponding row from the original matrix to the sorted matrix\n\n# Return the sorted matrix",
        "test": [
            "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
            "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
            "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
        ],
        "draft_plan": [
            "# Define a method to sort a given matrix in ascending order according to the sum of its rows.\n# Iterate over the matrix and calculate the sum of each row.\n# Create an array to store the sums of each row.\n# Sort the array in ascending order.\n# Initialize an empty matrix to store the sorted matrix.\n# Iterate over the sorted array of sums.\n    # Find the index of the current sum in the original array of sums.\n    # Append the corresponding row from the original matrix to the sorted matrix.\n# Return the sorted matrix."
        ],
        "final_plan": [
            "def sort_matrix_by_row_sum(matrix)\n  row_sums = []\n  sorted_matrix = []\n\n  matrix.each do |row|\n    row_sums << row.sum\n  end\n\n  sorted_sums = row_sums.sort\n\n  sorted_sums.each do |sum|\n    index = row_sums.index(sum)\n    sorted_matrix << matrix[index]\n  end\n\n  sorted_matrix\nend"
        ]
    },
    {
        "id": "14",
        "prompt": "Write a function to find the volume of a triangular prism.",
        "solution": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ",
        "code": [
            "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) "
        ],
        "pseudo": "# Define a function to calculate the volume of a triangular prism\n    # Accept the base length, base width, and height of the prism as input parameters\n    # Calculate the area of the base triangle by multiplying the base length and base width, and dividing by 2\n    # Calculate the volume by multiplying the area of the base triangle by the height of the prism\n    # Return the calculated volume\n\n# Example usage:\n# volume = calculate_volume_of_triangular_prism(5, 6, 10)",
        "test": [
            "assert find_Volume(10,8,6) == 240",
            "assert find_Volume(3,2,2) == 6",
            "assert find_Volume(1,2,1) == 1"
        ],
        "draft_plan": [
            "# Define a method to calculate the volume of a triangular prism.\n# Accept three parameters representing the base length, base width, and prism height.\n# Calculate the area of the base by multiplying the base length and base width, and dividing by 2.\n# Calculate the volume by multiplying the area of the base by the prism height.\n# Return the calculated volume."
        ],
        "final_plan": [
            "def calculate_volume(base_length, base_width, prism_height)\n  base_area = (base_length * base_width) / 2\n  volume = base_area * prism_height\n  volume\nend"
        ]
    },
    {
        "id": "16",
        "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
        "solution": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
        "code": [
            "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False"
        ],
        "pseudo": "# Split the input string by the underscore character to get a list of substrings\n# Iterate through each substring in the list\n    # Check if the substring consists of lowercase letters only\n        # If not, return False\n\n# If all substrings are valid, return True",
        "test": [
            "assert text_lowercase_underscore(\"aab_cbbbc\")==(True)",
            "assert text_lowercase_underscore(\"aab_Abbbc\")==(False)",
            "assert text_lowercase_underscore(\"Aaab_abbbc\")==(False)"
        ],
        "draft_plan": [
            "# Define a method to check if the input string contains sequences of lowercase letters joined with an underscore.\n# Use a regular expression to match the pattern of lowercase letters followed by an underscore, repeated one or more times.\n# Return true if the pattern is found in the input string, false otherwise."
        ],
        "final_plan": [
            "def contains_lowercase_sequence(string)\n  pattern = /[a-z]+_+[a-z]+/\n  pattern.match?(string)\nend"
        ]
    },
    {
        "id": "17",
        "prompt": "Write a function that returns the perimeter of a square given its side length as input.",
        "solution": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter",
        "code": [
            "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter"
        ],
        "pseudo": "# Define a function named \"square_perimeter\" that takes a parameter \"side_length\"\n    # Calculate the perimeter of the square by multiplying the side length by 4\n    # Return the perimeter\n\n# Call the function with a test value for the side length to verify the result",
        "test": [
            "assert square_perimeter(10)==40",
            "assert square_perimeter(5)==20",
            "assert square_perimeter(4)==16"
        ],
        "draft_plan": [
            "# Define a method to calculate the perimeter of a square.\n# Accept the side length as an input parameter.\n# Calculate the perimeter by multiplying the side length by 4.\n# Return the perimeter."
        ],
        "final_plan": [
            "def calculate_perimeter(side_length)\n  perimeter = side_length * 4\n  return perimeter\nend"
        ]
    },
    {
        "id": "18",
        "prompt": "Write a function to remove characters from the first string which are present in the second string.",
        "solution": "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) ",
        "code": [
            "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) "
        ],
        "pseudo": "# Convert the second string into a set for efficient lookup\n\n# Initialize an empty string to store the result\n\n# Iterate through each character in the first string\n    # Check if the character is not present in the second string\n        # Append the character to the result string\n\n# Return the result string",
        "test": [
            "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
            "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
            "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'"
        ],
        "draft_plan": [
            "# Define a method to remove characters from the first string that are present in the second string.\n# Create a new empty string to store the result.\n# Iterate through each character in the first string.\n    # Check if the character is not present in the second string.\n        # If true, append the character to the result string.\n# Return the result string."
        ],
        "final_plan": [
            "def remove_common_chars(first_string, second_string)\n  result = \"\"\n  first_string.each_char do |char|\n    result += char unless second_string.include?(char)\n  end\n  result\nend"
        ]
    },
    {
        "id": "19",
        "prompt": "Write a function to find whether a given array of integers contains any duplicate element.",
        "solution": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ",
        "code": [
            "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     "
        ],
        "pseudo": "# Initialize an empty set\n\n# Iterate through each element in the input array\n    # Check if the element is already present in the set\n        # If yes, return True as duplicate element found\n        # If not, add the element to the set\n\n# If no duplicate element is found, return False",
        "test": [
            "assert test_duplicate(([1,2,3,4,5]))==False",
            "assert test_duplicate(([1,2,3,4, 4]))==True",
            "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
        ],
        "draft_plan": [
            "# Define a method to check for duplicate elements in an array of integers.\n# Create an empty hash to store the occurrence of each element.\n# Iterate over the input array using 'each' iterator.\n    # Check if the current element exists in the hash.\n        # If true, return true indicating a duplicate element is found.\n        # If false, add the element as a key in the hash with an initial value of 1.\n# If no duplicate elements are found, return false."
        ],
        "final_plan": [
            "def contains_duplicate(nums)\n  occurrence = {}\n\n  nums.each do |num|\n    return true if occurrence[num]\n    occurrence[num] = 1\n  end\n\n  false\nend"
        ]
    },
    {
        "id": "20",
        "prompt": "Write a function to check if the given number is woodball or not.",
        "solution": "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False",
        "code": [
            "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False"
        ],
        "pseudo": "# Check if the given number is less than or equal to 1\n    # If it is, return False as woodball numbers must be greater than 1\n\n# Initialize a variable to keep track of the previous number in the sequence\n# Start a loop from 2 to the square root of the given number\n    # Check if the given number is divisible by the current loop variable\n        # If it is, check if the current loop variable is equal to the previous number plus 1\n            # If it is, update the previous number to the current loop variable\n            # If it is not, return False as the sequence is broken\n\n# If the loop completes without returning False, return True as the given number is a woodball number",
        "test": [
            "assert is_woodall(383) == True",
            "assert is_woodall(254) == False",
            "assert is_woodall(200) == False"
        ],
        "draft_plan": [
            "# Define a method to check if a given number is a woodball or not.\n# Convert the given number to a string.\n# Initialize a variable 'sum' to 0.\n# Iterate through each digit in the string.\n    # Convert the digit back to an integer.\n    # Add the square of the integer to 'sum'.\n# Check if 'sum' is equal to the given number.\n    # If true, return true, indicating that the number is a woodball.\n# If 'sum' is not equal to the given number, return false, indicating that the number is not a woodball."
        ],
        "final_plan": [
            "def is_woodball(number)\n  number_str = number.to_s\n  sum = 0\n  \n  number_str.each_char do |digit|\n    sum += digit.to_i ** 2\n  end\n  \n  return true if sum == number\n  \n  false\nend"
        ]
    },
    {
        "id": "56",
        "prompt": "Write a function to check if a given number is one less than twice its reverse.",
        "solution": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
        "code": [
            "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  "
        ],
        "pseudo": "# Convert the given number to a string and reverse it\n# Convert the reversed string back to an integer\n# Check if the given number is equal to twice the reversed number plus 1\n# If the condition is true, return True. Otherwise, return False.",
        "test": [
            "assert check(70) == False",
            "assert check(23) == False",
            "assert check(73) == True"
        ],
        "draft_plan": [
            "# Define a method to check if a given number is one less than twice its reverse.\n# Convert the given number to a string and reverse it.\n# Convert the reversed string back to an integer.\n# Calculate twice the reverse of the given number.\n# Check if the given number is one less than twice its reverse.\n    # If true, return true.\n    # If false, return false."
        ],
        "final_plan": [
            "def is_one_less_than_twice_reverse(number)\n  reversed = number.to_s.reverse.to_i\n  twice_reverse = 2 * reversed\n\n  return number == (twice_reverse - 1)\nend"
        ]
    },
    {
        "id": "57",
        "prompt": "Write a function to find the largest number that can be formed with the given list of digits.",
        "solution": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ",
        "code": [
            "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num "
        ],
        "pseudo": "# Sort the list of digits in descending order\n\n# Concatenate all the digits in the sorted list\n\n# Convert the concatenated string to an integer and return it",
        "test": [
            "assert find_Max_Num([1,2,3]) == 321",
            "assert find_Max_Num([4,5,6,1]) == 6541",
            "assert find_Max_Num([1,2,3,9]) == 9321"
        ],
        "draft_plan": [
            "# Define a method to find the largest number that can be formed with the given list of digits.\n# Convert the input list of digits to a string.\n# Sort the string in descending order.\n# Convert the sorted string back to an integer.\n# Return the largest number."
        ],
        "final_plan": [
            "def find_largest_number(digits)\n  digits.sort.reverse.join.to_i\nend"
        ]
    },
    {
        "id": "58",
        "prompt": "Write a function to check whether the given two integers have opposite sign or not.",
        "solution": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ",
        "code": [
            "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); "
        ],
        "pseudo": "# Check if the product of the two integers is negative\n    # If the product is negative, it means the two integers have opposite signs\n        # Return True\n\n# If the product is not negative, it means the two integers have the same sign\n    # Return False",
        "test": [
            "assert opposite_Signs(1,-2) == True",
            "assert opposite_Signs(3,2) == False",
            "assert opposite_Signs(-10,-10) == False",
            "assert opposite_Signs(-2,2) == True"
        ],
        "draft_plan": [
            "# Define a method to check if two integers have opposite signs.\n# Use the exclusive OR (XOR) operator to check if the signs of the two integers are different.\n# Return true if the signs are different, indicating opposite signs.\n# Return false if the signs are the same, indicating the integers do not have opposite signs."
        ],
        "final_plan": [
            "def opposite_signs?(num1, num2)\n  return (num1 ^ num2) < 0\nend"
        ]
    },
    {
        "id": "59",
        "prompt": "Write a function to find the nth octagonal number.",
        "solution": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ",
        "code": [
            "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n "
        ],
        "pseudo": "# Function to find the nth octagonal number\ndef find_octagonal_number(n):\n    # Calculate the nth octagonal number using the formula\n    octagonal_number = 3 * n * (n - 1) + 1\n    \n    # Return the result\n    return octagonal_number\n\n# Test the function\nn = 5\nresult = find_octagonal_number(n)\nprint(f\"The {n}th octagonal number is: {result}\")",
        "test": [
            "assert is_octagonal(5) == 65",
            "assert is_octagonal(10) == 280",
            "assert is_octagonal(15) == 645"
        ],
        "draft_plan": [
            "# Define a method to find the nth octagonal number.\n# Check if the input n is a positive integer. If not, return nil.\n# Calculate the nth octagonal number using the formula: (3 * n^2 - 2 * n).\n# Return the calculated octagonal number."
        ],
        "final_plan": [
            "def find_nth_octagonal_number(n)\n  return nil if !n.is_a?(Integer) || n <= 0\n\n  octagonal_number = 3 * n**2 - 2 * n\n\n  octagonal_number\nend"
        ]
    },
    {
        "id": "61",
        "prompt": "Write a function to count the number of substrings with the sum of digits equal to their length.",
        "solution": "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count",
        "code": [
            "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count"
        ],
        "pseudo": "# Initialize a counter variable to keep track of the number of substrings\n\n# Iterate through each starting index of the substring\n    # Iterate through each ending index of the substring\n        # Get the substring from the starting index to the ending index\n        # Compute the sum of the digits in the substring\n        # Check if the sum of the digits is equal to the length of the substring\n            # If true, increment the counter variable\n\n# Return the counter variable with the total number of substrings",
        "test": [
            "assert count_Substrings('112112') == 6",
            "assert count_Substrings('111') == 6",
            "assert count_Substrings('1101112') == 12"
        ],
        "draft_plan": [
            "# Define a method to count the number of substrings with the sum of digits equal to their length.\n# Initialize a counter for the number of valid substrings.\n# Iterate over each character index in the input string using nested loops.\n    # Extract a substring starting from the current index to the end of the string.\n    # Calculate the sum of digits in the substring.\n    # If the sum of digits is equal to the length of the substring, increment the counter.\n# Return the counter value."
        ],
        "final_plan": [
            "def count_substrings_with_sum_equal_length(string)\n  count = 0\n\n  (0...string.length).each do |i|\n    (i...string.length).each do |j|\n      substring = string[i..j]\n      sum_of_digits = substring.chars.map(&:to_i).sum\n\n      count += 1 if sum_of_digits == substring.length\n    end\n  end\n\n  count\nend"
        ]
    },
    {
        "id": "62",
        "prompt": "Write a function to find smallest number in a list.",
        "solution": "def smallest_num(xs):\n  return min(xs)\n",
        "code": [
            "def smallest_num(xs):\n  return min(xs)\n"
        ],
        "pseudo": "# Initialize the smallest number as the first element of the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the smallest number\n        # If yes, update the smallest number with the current element\n\n# Return the smallest number",
        "test": [
            "assert smallest_num([10, 20, 1, 45, 99]) == 1",
            "assert smallest_num([1, 2, 3]) == 1",
            "assert smallest_num([45, 46, 50, 60]) == 45"
        ],
        "draft_plan": [
            "This code defines a function `find_smallest_number` that takes a list `lst` as input. \n\nThe function first checks if the list is empty. If it is, it returns `None`. \n\nNext, it initializes a variable `smallest` to the first element in the list `lst`.\n\nThen, it iterates through each number in the list using a `for` loop. For each number, it checks if it is smaller than the current value of `smallest`. If it is, it updates the value of `smallest` to the current number.\n\nFinally, it returns the value of `smallest` as the smallest number found in the list."
        ],
        "final_plan": [
            "def find_smallest_number(lst)\n  return nil if lst.empty?\n\n  smallest = lst[0]\n  lst.each do |num|\n    smallest = num if num < smallest\n  end\n\n  smallest\n"
        ]
    },
    {
        "id": "63",
        "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.",
        "solution": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ",
        "code": [
            "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) "
        ],
        "pseudo": "# Initialize the maximum difference variable to 0\n\n# Iterate through each pair in the list\n    # Calculate the difference between the second element and the first element of the current pair\n    # Check if the current difference is greater than the maximum difference\n        # If it is, update the maximum difference\n\n# Return the maximum difference",
        "test": [
            "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
            "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
            "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
        ],
        "draft_plan": [
            "# Define a method to find the maximum difference between available pairs in a given tuple list.\n# Initialize a variable 'max_diff' to 0.\n# Iterate over the input list of tuples using 'each' iterator.\n    # Extract the two elements of the current tuple.\n    # Find the absolute difference between the two elements.\n    # Update 'max_diff' if the absolute difference is greater than 'max_diff'.\n# Return 'max_diff'."
        ],
        "final_plan": [
            "def find_maximum_difference(tuples)\n  max_diff = 0\n\n  tuples.each do |tup|\n    a, b = tup[0], tup[1]\n    diff = (a - b).abs\n    max_diff = diff if diff > max_diff\n  end\n\n  max_diff\nend"
        ]
    },
    {
        "id": "64",
        "prompt": "Write a function to sort a list of tuples using the second value of each tuple.",
        "solution": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks",
        "code": [
            "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks"
        ],
        "pseudo": "# Define a function to sort a list of tuples by the second value\n    # Use the sorted() function and a lambda function as the key parameter\n    # The lambda function will extract the second value from each tuple for sorting\n    \n# Call the sorted() function with the list of tuples and the custom sorting function as arguments\n# Return the sorted list of tuples",
        "test": [
            "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
            "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
            "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
        ],
        "draft_plan": [
            "# Define a method to sort a list of tuples by the second value.\n# Use the sort_by method on the input list, passing a block that extracts the second value of each tuple.\n# The sort_by method will return a new array of tuples sorted by the second value.\n# Return the sorted list of tuples."
        ],
        "final_plan": [
            "def sort_list_by_second_value(lst)\n  lst.sort_by { |tuple| tuple[1] }\nend"
        ]
    },
    {
        "id": "65",
        "prompt": "Write a function to flatten a list and sum all of its elements.",
        "solution": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total",
        "code": [
            "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total"
        ],
        "pseudo": "# Initialize a variable to store the sum of all elements\n\n# Iterate through each element in the list\n    # Check if the current element is a list\n        # If it is a list, recursively call the flatten_and_sum function on the current element and add the result to the sum\n    # If it is not a list, add the current element to the sum\n\n# Return the sum",
        "test": [
            "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
            "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
            "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
        ],
        "draft_plan": [
            "# Define a method to flatten a list and sum its elements.\n# Initialize a variable 'sum' to 0.\n# Iterate over the input list using 'each' iterator.\n    # Check if the current element is an array.\n        # If true, recursively call the method to flatten the nested list and add its sum to 'sum'.\n        # If false, add the current element to 'sum'.\n# Return the final value of 'sum'."
        ],
        "final_plan": [
            "def flatten_and_sum(lst)\n  sum = 0\n\n  lst.each do |element|\n    if element.is_a?(Array)\n      sum += flatten_and_sum(element)\n    else\n      sum += element\n    end\n  end\n\n  sum\nend"
        ]
    },
    {
        "id": "66",
        "prompt": "Write a function to count the number of positive numbers in a list.",
        "solution": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ",
        "code": [
            "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count "
        ],
        "pseudo": "# Initialize a variable count to 0\n\n# Iterate through each number in the list\n    # Check if the number is greater than 0\n        # If it is, increment the count\n\n# Return the count",
        "test": [
            "assert pos_count([1,-2,3,-4]) == 2",
            "assert pos_count([3,4,5,-1]) == 3",
            "assert pos_count([1,2,3,4]) == 4"
        ],
        "draft_plan": [
            "# Define a method to count the number of positive numbers in a list.\n# Initialize a counter variable to 0.\n# Iterate over each number in the input list using 'each' iterator.\n    # Check if the current number is greater than 0.\n        # If true, increment the counter variable.\n# Return the counter variable, which represents the count of positive numbers."
        ],
        "final_plan": [
            "def count_positive_numbers(lst)\n  count = 0\n\n  lst.each do |num|\n    count += 1 if num > 0\n  end\n\n  count\nend"
        ]
    },
    {
        "id": "67",
        "prompt": "Write a function to find the number of ways to partition a set of Bell numbers.",
        "solution": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] ",
        "code": [
            "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] "
        ],
        "pseudo": "# Import the math module to use the factorial function\nimport math\n\n# Define a function to calculate the Bell numbers\ndef calculate_bell_number(n):\n    # Create a 2D array to store the Bell numbers\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n\n    # Initialize the first Bell number as 1\n    bell[0][0] = 1\n\n    # Calculate the Bell numbers using dynamic programming\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    # Return the last Bell number\n    return bell[n][0]\n\n# Define a function to calculate the number of ways to partition a set of Bell numbers\ndef calculate_partition_ways(n):\n    # Calculate the Bell number for n\n    bell_number = calculate_bell_number(n)\n\n    # Calculate the number of ways to partition the set\n    partition_ways = math.factorial(n) * bell_number\n\n    # Return the number of ways to partition the set\n    return partition_ways",
        "test": [
            "assert bell_number(2)==2",
            "assert bell_number(10)==115975",
            "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
        ],
        "draft_plan": [
            "# Define a method to find the number of ways to partition a set of Bell numbers.\n# Create an array to store the Bell numbers, with an initial value of [1].\n# Iterate from 1 to the desired number of Bell numbers.\n    # Initialize a variable 'sum' to 0.\n    # Iterate from 0 to the current index of the outer loop.\n        # Add the product of the current inner loop index and the value at the outer loop index to 'sum'.\n    # Append 'sum' to the array of Bell numbers.\n# Return the last element in the array of Bell numbers."
        ],
        "final_plan": [
            "def partition_set_of_bell_numbers(num)\n  bell_numbers = [1]\n\n  (1..num).each do |i|\n    sum = 0\n    (0...i).each do |j|\n      sum += (j+1) * bell_numbers[j]\n    end\n    bell_numbers << sum\n  end\n\n  bell_numbers.last\nend"
        ]
    },
    {
        "id": "68",
        "prompt": "Write a function to check whether the given array is monotonic or not.",
        "solution": "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",
        "code": [
            "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "
        ],
        "pseudo": "# Check if the length of the array is less than or equal to 2\n    # If true, return True as any array with 0 or 1 element is considered monotonic\n\n# Initialize two variables to track if the array is non-increasing and non-decreasing\n    # Set both variables to True initially\n\n# Iterate through each element in the array starting from index 1\n    # Check if the current element is greater than the previous element\n        # If true, set the non-increasing variable to False\n    # Check if the current element is less than the previous element\n        # If true, set the non-decreasing variable to False\n\n# Check if either the non-increasing or non-decreasing variable is True\n    # If true, return True as the array is monotonic\n    # Otherwise, return False as the array is not monotonic",
        "test": [
            "assert is_Monotonic([6, 5, 4, 4]) == True",
            "assert is_Monotonic([1, 2, 2, 3]) == True",
            "assert is_Monotonic([1, 3, 2]) == False"
        ],
        "draft_plan": [
            "# Define a method to check whether the given array is monotonic or not.\n# Initialize two boolean variables 'is_increasing' and 'is_decreasing' to true.\n# Iterate over the input array using 'each_with_index' iterator.\n    # Check if the current element is greater than the next element.\n        # If true, set 'is_increasing' to false.\n    # Check if the current element is less than the next element.\n        # If true, set 'is_decreasing' to false.\n# Check if either 'is_increasing' or 'is_decreasing' is true.\n    # If true, return true (array is monotonic).\n# If both 'is_increasing' and 'is_decreasing' are false, return false (array is not monotonic)."
        ],
        "final_plan": [
            "def is_monotonic(array)\n  is_increasing = true\n  is_decreasing = true\n\n  array.each_with_index do |num, index|\n    if index < array.length - 1\n      if num > array[index + 1]\n        is_increasing = false\n      end\n\n      if num < array[index + 1]\n        is_decreasing = false\n      end\n    end\n  end\n\n  return is_increasing || is_decreasing\nend"
        ]
    },
    {
        "id": "69",
        "prompt": "Write a function to check whether a list contains the given sublist or not.",
        "solution": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set",
        "code": [
            "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set"
        ],
        "pseudo": "# Iterate through each index in the main list\n    # Check if the current index and the sublist length is less than or equal to the main list length\n        # Check if the sublist matches the elements starting from the current index in the main list\n\n# If the sublist is found, return True\n# Otherwise, return False",
        "test": [
            "assert is_sublist([2,4,3,5,7],[3,7])==False",
            "assert is_sublist([2,4,3,5,7],[4,3])==True",
            "assert is_sublist([2,4,3,5,7],[1,6])==False"
        ],
        "draft_plan": [
            "# Define a method to check if a list contains a given sublist.\n# Convert the input list and sublist to strings using 'join' method.\n# Use the 'include?' method to check if the sublist string is present in the list string.\n# Return true if the sublist is found, otherwise return false."
        ],
        "final_plan": [
            "def contains_sublist(list, sublist)\n  list_str = list.join(\"\")\n  sublist_str = sublist.join(\"\")\n\n  return list_str.include?(sublist_str)\nend"
        ]
    },
    {
        "id": "70",
        "prompt": "Write a function to find whether all the given tuples have equal length or not.",
        "solution": "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1",
        "code": [
            "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1"
        ],
        "pseudo": "# Get the length of the first tuple in the list\n\n# Iterate through each tuple in the list\n    # Check if the length of the current tuple is not equal to the length of the first tuple\n        # If lengths are not equal, return False\n\n# If all tuples have equal lengths, return True",
        "test": [
            "assert get_equal([(11, 22, 33), (44, 55, 66)]) == True",
            "assert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False",
            "assert get_equal([(1, 2), (3, 4)]) == True"
        ],
        "draft_plan": [
            "# Define a method to check if all tuples have equal length.\n# Initialize a variable 'length' with the length of the first tuple in the input list.\n# Iterate over the input list of tuples using 'each' iterator.\n    # If the length of the current tuple is not equal to 'length', return false.\n# If the loop completes without returning false, return true."
        ],
        "final_plan": [
            "def check_equal_length(tuples)\n  length = tuples[0].length\n\n  tuples.each do |tuple|\n    return false if tuple.length != length\n  end\n\n  true\nend"
        ]
    },
    {
        "id": "71",
        "prompt": "Write a function to sort a list of elements.",
        "solution": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums",
        "code": [
            "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums"
        ],
        "pseudo": "# Use the built-in sorted() function to sort the list in ascending order\n# Return the sorted list",
        "test": [
            "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
            "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
            "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
        ],
        "draft_plan": [
            "# Define a method to sort a list of elements.\n# Iterate over the input list using 'each' iterator.\n    # Iterate again over the input list starting from the current index using 'each_with_index' iterator.\n        # Compare the current element with each subsequent element.\n        # If the current element is greater than the subsequent element, swap their positions.\n# Return the sorted list."
        ],
        "final_plan": [
            "def sort_list(lst)\n  n = lst.length\n\n  (0...n).each do |i|\n    (i+1...n).each do |j|\n      if lst[i] > lst[j]\n        lst[i], lst[j] = lst[j], lst[i]\n      end\n    end\n  end\n\n  lst\nend"
        ]
    },
    {
        "id": "72",
        "prompt": "Write a function to check whether the given number can be represented as the difference of two squares or not.",
        "solution": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False",
        "code": [
            "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False"
        ],
        "pseudo": "# Iterate through all numbers from 1 to sqrt(n)\n    # Calculate the square of the current number\n    # Check if the difference between n and the square is a perfect square\n\n# If a perfect square difference is found, return True\n# If no perfect square difference is found, return False",
        "test": [
            "assert dif_Square(5) == True",
            "assert dif_Square(10) == False",
            "assert dif_Square(15) == True"
        ],
        "draft_plan": [
            "# Define a method to check if a number can be represented as the difference of two squares.\n# Iterate from 1 to the square root of the given number (inclusive).\n    # Calculate the square of the current number.\n    # Check if the difference between the given number and the square is a perfect square as well.\n        # If true, return true.\n# If no pair of squares is found, return false."
        ],
        "final_plan": [
            "def is_difference_of_squares(num)\n  (1..Math.sqrt(num)).each do |i|\n    square = i**2\n    if Math.sqrt(num - square) % 1 == 0\n      return true\n    end\n  end\n\n  false\nend"
        ]
    },
    {
        "id": "74",
        "prompt": "Write a function to check whether it follows the sequence given in the patterns array.",
        "solution": "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True",
        "code": [
            "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True"
        ],
        "pseudo": "# Initialize a pointer to keep track of the current position in the patterns array\n\n# Iterate through each character in the input string\n    # Check if the current character matches the character at the pointer position in the patterns array\n        # If it matches, move the pointer to the next position in the patterns array\n        # If the pointer reaches the end of the patterns array, return True as the sequence is followed\n\n# If the loop completes without returning True, return False as the sequence is not followed",
        "test": [
            "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True",
            "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False",
            "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False"
        ],
        "draft_plan": [
            "# Define a method to check whether a given sequence follows a pattern.\n# Iterate over the patterns array using 'each_with_index' iterator.\n    # Extract the current pattern from the patterns array.\n    # Check if the length of the pattern is greater than the length of the sequence.\n        # If true, return false since the pattern cannot be matched.\n    # Iterate over each character in the pattern using 'each_char' iterator.\n        # Check if the current character is equal to the corresponding character in the sequence.\n            # If true, continue to the next character in the pattern and sequence.\n            # If false, return false since the pattern is not matched.\n    # Check if all characters in the pattern are matched with the sequence.\n        # If true, return true since the pattern is matched.\n# If no pattern is matched, return false."
        ],
        "final_plan": [
            "def follows_pattern(sequence, patterns)\n  patterns.each_with_index do |pattern, index|\n    next if pattern.length > sequence.length\n\n    pattern.each_char.with_index do |char, i|\n      return false if char != sequence[i]\n    end\n\n    return true if pattern.length == sequence.length\n  end\n\n  false\nend"
        ]
    },
    {
        "id": "75",
        "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
        "solution": "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res",
        "code": [
            "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res"
        ],
        "pseudo": "# Initialize an empty list to store the resulting tuples\n\n# Iterate through each tuple in the given list of tuples\n    # Initialize a flag variable to True\n    \n    # Iterate through each element in the tuple\n        # Check if the element is not divisible by k\n            # If not divisible, set the flag variable to False and break out of the loop\n    \n    # If the flag variable is still True after checking all elements, add the tuple to the resulting list\n\n# Return the resulting list of tuples",
        "test": [
            "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]",
            "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]",
            "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]"
        ],
        "draft_plan": [
            "# Define a method to find tuples with all elements divisible by k.\n# Initialize an empty array to store the tuples that meet the condition.\n# Iterate over each tuple in the input list.\n    # Check if all elements in the tuple are divisible by k.\n        # If true, append the tuple to the result array.\n# Return the result array with tuples that meet the condition."
        ],
        "final_plan": [
            "def find_tuples_divisible_by_k(list_of_tuples, k)\n  result = []\n\n  list_of_tuples.each do |tuple|\n    if tuple.all? { |element| element % k == 0 }\n      result << tuple\n    end\n  end\n\n  result\nend"
        ]
    },
    {
        "id": "77",
        "prompt": "Write a function to find whether a number is divisible by 11.",
        "solution": "def is_Diff(n): \n    return (n % 11 == 0) ",
        "code": [
            "def is_Diff(n): \n    return (n % 11 == 0) "
        ],
        "pseudo": "To determine whether a number is divisible by 11, we can use the following logic:\n\n1. Convert the number to a string.\n2. Iterate through the digits of the number.\n3. Add the digits in odd positions (starting from the rightmost digit) and subtract the sum of the digits in even positions.\n4. If the result is divisible by 11, the original number is also divisible by 11.\n\nHere is the code implementing this logic:\n\n```python\ndef is_divisible_by_11(number):\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Iterate through the digits of the number\n    sum_odd = 0\n    sum_even = 0\n    for i in range(len(number_str)):\n        digit = int(number_str[i])\n        \n        # Add the digits in odd positions and subtract the digits in even positions\n        if i % 2 == 0:\n            sum_odd += digit\n        else:\n            sum_even += digit\n    \n    # Check if the result is divisible by 11\n    if (sum_odd - sum_even) % 11 == 0:\n        return True\n    else:\n        return False\n```\n\nYou can use this function to check if a number is divisible by 11. For example:\n\n```python\nprint(is_divisible_by_11(121))  # Output: True\nprint(is_divisible_by_11(123))  # Output: False\n```",
        "test": [
            "assert is_Diff (12345) == False",
            "assert is_Diff(1212112) == True",
            "assert is_Diff(1212) == False"
        ],
        "draft_plan": [
            "# Define a function to check if a number is divisible by 11\n# Convert the number to a string\n# Calculate the sum of the digits at even positions (starting from index 0) and the sum of the digits at odd positions\n# Subtract the sum of the digits at odd positions from the sum of the digits at even positions\n# Check if the difference is divisible by 11\n    # If true, return true (the number is divisible by 11)\n    # If false, return false (the number is not divisible by 11)"
        ],
        "final_plan": [
            "def divisible_by_11(number)\n  number = number.to_s\n  sum_even = 0\n  sum_odd = 0\n\n  number.chars.each_with_index do |digit, index|\n    if index % 2 == 0\n      sum_even += digit.to_i\n    else\n      sum_odd += digit.to_i\n    end\n  end\n\n  difference = sum_even - sum_odd\n\n  difference % 11 == 0\nend"
        ]
    },
    {
        "id": "79",
        "prompt": "Write a function to check whether the length of the word is odd or not.",
        "solution": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
        "code": [
            "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False"
        ],
        "pseudo": "# Get the length of the word\n# Check if the length of the word is odd or even\n    # If the length is odd, return True\n    # If the length is even, return False",
        "test": [
            "assert word_len(\"Hadoop\") == False",
            "assert word_len(\"great\") == True",
            "assert word_len(\"structure\") == True"
        ],
        "draft_plan": [
            "# Define a method to check if the length of a word is odd or not.\n# Get the length of the input word using the 'length' method.\n# Check if the length is divisible by 2 using the modulo operator.\n    # If the length is divisible by 2, return false.\n    # If the length is not divisible by 2, return true."
        ],
        "final_plan": [
            "def is_word_length_odd(word)\n  word.length % 2 != 0\nend"
        ]
    },
    {
        "id": "80",
        "prompt": "Write a function to find the nth tetrahedral number.",
        "solution": "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6",
        "code": [
            "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6"
        ],
        "pseudo": "# Initialize the tetrahedral number to 0\n\n# Iterate from 1 to n (inclusive)\n    # Add the current number to the tetrahedral number\n\n# Return the tetrahedral number",
        "test": [
            "assert tetrahedral_number(5) == 35",
            "assert tetrahedral_number(6) == 56",
            "assert tetrahedral_number(7) == 84"
        ],
        "draft_plan": [
            "# Define a method to find the nth tetrahedral number.\n# Initialize a variable 'sum' to 0.\n# Iterate from 1 to n (inclusive) using 'each' iterator.\n    # Add the current number to 'sum'.\n# Return 'sum'."
        ],
        "final_plan": [
            "def find_nth_tetrahedral_number(n)\n  sum = 0\n\n  (1..n).each do |num|\n    sum += (num * (num + 1) * (num + 2)) / 6\n  end\n\n  sum\nend"
        ]
    },
    {
        "id": "82",
        "prompt": "Write a function to find the volume of a sphere.",
        "solution": "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume",
        "code": [
            "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume"
        ],
        "pseudo": "# Define a function called calculate_sphere_volume that takes a single parameter, radius\n\n# Calculate the volume of the sphere using the formula: (4/3) * pi * radius^3\n# Store the result in a variable called volume\n\n# Return the calculated volume",
        "test": [
            "assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)",
            "assert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)",
            "assert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)"
        ],
        "draft_plan": [
            "# Define a method to calculate the volume of a sphere.\n# Accept the radius of the sphere as a parameter.\n# Calculate the volume using the formula: (4/3) * \u03c0 * radius^3\n# Return the calculated volume."
        ],
        "final_plan": [
            "def calculate_sphere_volume(radius)\n  volume = (4.0 / 3.0) * Math::PI * radius**3\n  return volume.round(2)\nend"
        ]
    },
    {
        "id": "83",
        "prompt": "Write a function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
        "solution": "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)",
        "code": [
            "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)"
        ],
        "pseudo": "# Define a function to calculate the character made by adding the ASCII values modulo 26\n    # Initialize a variable to store the sum of ASCII values\n    # Iterate through each character in the given string\n        # Add the ASCII value of the current character to the sum\n    # Calculate the modulo 26 of the sum\n    # Convert the result back to a character using the ASCII value\n    # Return the resulting character",
        "test": [
            "assert get_Char(\"abc\") == \"f\"",
            "assert get_Char(\"gfg\") == \"t\"",
            "assert get_Char(\"ab\") == \"c\""
        ],
        "draft_plan": [
            "# Define a method to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n# Initialize a variable 'sum' to 0.\n# Iterate over each character in the input string.\n    # Add the ASCII value of the current character to 'sum'.\n# Take 'sum' modulo 26.\n# Convert the resulting value back to a character using the ASCII value.\n# Return the resulting character."
        ],
        "final_plan": [
            "def find_character(string)\n  sum = 0\n\n  string.each_char do |char|\n    sum += char.ord\n  end\n\n  sum = sum % 26\n\n  character = (sum + 97).chr\n\n  character\nend"
        ]
    },
    {
        "id": "84",
        "prompt": "Write a function to find the nth number in the newman conway sequence.",
        "solution": "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))",
        "code": [
            "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
        ],
        "pseudo": "# Create a list to store the Newman-Conway sequence\n# Initialize the first two elements of the sequence\n# Iterate from index 3 up to the given number n\n    # Calculate the next element of the sequence using the previous elements\n# Return the nth element of the sequence",
        "test": [
            "assert sequence(10) == 6",
            "assert sequence(2) == 1",
            "assert sequence(3) == 2"
        ],
        "draft_plan": [
            "# Define a method to find the nth number in the Newman-Conway sequence.\n# Create an array to store the sequence with the first two elements [0, 1].\n# Check if the input number n is less than or equal to 2.\n    # If true, return the nth element from the sequence array.\n# Iterate from index 3 to n.\n    # Calculate the current element by accessing the previous two elements from the sequence array.\n        # The formula is sequence[n] = sequence[sequence[n-1]] + sequence[n - sequence[n-1]]\n    # Append the current element to the sequence array.\n# Return the nth element from the sequence array."
        ],
        "final_plan": [
            "def newman_conway(n)\n  sequence = [0, 1]\n\n  return sequence[n] if n <= 2\n\n  (3..n).each do |i|\n    sequence[i] = sequence[sequence[i-1]] + sequence[i - sequence[i-1]]\n  end\n\n  sequence[n]\nend"
        ]
    },
    {
        "id": "85",
        "prompt": "Write a function to find the surface area of a sphere.",
        "solution": "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea",
        "code": [
            "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea"
        ],
        "pseudo": "import math\n\ndef surface_area_of_sphere(radius):\n    # Calculate the surface area of a sphere using the formula: 4\u03c0r^2\n    surface_area = 4 * math.pi * radius**2\n    \n    return surface_area",
        "test": [
            "assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)",
            "assert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)",
            "assert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)"
        ],
        "draft_plan": [
            "# Define a method to find the surface area of a sphere.\n# Accept the radius of the sphere as an argument.\n# Calculate the surface area using the formula: 4 * \u03c0 * r^2, where r is the radius.\n# Return the calculated surface area."
        ],
        "final_plan": [
            "def surface_area_of_sphere(radius)\n  surface_area = 4 * Math::PI * radius**2\n  surface_area\nend"
        ]
    },
    {
        "id": "86",
        "prompt": "Write a function to find nth centered hexagonal number.",
        "solution": "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1",
        "code": [
            "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1"
        ],
        "pseudo": "# Initialize the centered hexagonal number formula: nth_centered_hexagonal = 3 * n * (n - 1) + 1\n\n# Define a function to calculate the nth centered hexagonal number\n    # Check if n is a positive integer, otherwise return None\n    # Calculate the nth centered hexagonal number using the formula\n    # Return the result\n\n# Call the function and provide the desired value of n to get the nth centered hexagonal number",
        "test": [
            "assert centered_hexagonal_number(10) == 271",
            "assert centered_hexagonal_number(2) == 7",
            "assert centered_hexagonal_number(9) == 217"
        ],
        "draft_plan": [
            "# Define a method to find the nth centered hexagonal number\n# Initialize a variable 'n' to 0\n# If n is 0 or 1, return 1 as the centered hexagonal number\n# Otherwise, calculate the centered hexagonal number using the formula: 3*n*(n-1) + 1\n# Return the calculated centered hexagonal number"
        ],
        "final_plan": [
            "def find_nth_centered_hexagonal_number(n)\n  if n == 0 || n == 1\n    return 1\n  else\n    return 3 * n * (n - 1) + 1\n  end\nend"
        ]
    },
    {
        "id": "87",
        "prompt": "Write a function to merge three dictionaries into a single dictionary.",
        "solution": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict",
        "code": [
            "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict"
        ],
        "pseudo": "# Initialize an empty dictionary to store the merged dictionaries\n\n# Iterate through each dictionary in the input list\n    # Iterate through each key-value pair in the current dictionary\n        # Add the key-value pair to the merged dictionary\n\n# Return the merged dictionary",
        "test": [
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
        ],
        "draft_plan": [
            "# Define a method to merge three dictionaries into a single dictionary.\n# Initialize an empty dictionary to store the merged result.\n# Iterate over each dictionary in the list of dictionaries.\n    # Iterate over each key-value pair in the current dictionary.\n        # Add the key-value pair to the merged dictionary.\n# Return the merged dictionary."
        ],
        "final_plan": [
            "def merge_dictionaries(dict1, dict2, dict3)\n  merged_dict = {}\n\n  [dict1, dict2, dict3].each do |dict|\n    dict.each do |key, value|\n      merged_dict[key] = value\n    end\n  end\n\n  merged_dict\nend"
        ]
    },
    {
        "id": "88",
        "prompt": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.",
        "solution": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count",
        "code": [
            "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count"
        ],
        "pseudo": "# Initialize an empty dictionary\n\n# Iterate through each element in the list\n    # Check if the element is already a key in the dictionary\n        # If it is, increment its value by 1\n        # If it is not, add it as a new key with value 1\n\n# Return the dictionary containing the frequency of elements",
        "test": [
            "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})",
            "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})",
            "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})"
        ],
        "draft_plan": [
            "# Define a method to get the frequency of elements in a list.\n# Create an empty hash to store the frequency of each element.\n# Iterate over the input list using 'each' iterator.\n    # Check if the current element exists as a key in the hash.\n        # If true, increment the value of the key by 1.\n        # If false, add the element as a key to the hash with an initial value of 1.\n# Return the hash containing the frequency of each element."
        ],
        "final_plan": [
            "def get_frequency(lst)\n  frequency = Hash.new(0)\n\n  lst.each do |element|\n    frequency[element] += 1\n  end\n\n  frequency\nend"
        ]
    },
    {
        "id": "89",
        "prompt": "Write a function to find the closest smaller number than n.",
        "solution": "def closest_num(N):\n  return (N - 1)",
        "code": [
            "def closest_num(N):\n  return (N - 1)"
        ],
        "pseudo": "# Initialize a variable to store the closest smaller number\n# Iterate from n-1 to 1 in descending order\n    # Check if the current number is smaller than n\n        # If yes, update the closest smaller number and break the loop\n\n# Return the closest smaller number",
        "test": [
            "assert closest_num(11) == 10",
            "assert closest_num(7) == 6",
            "assert closest_num(12) == 11"
        ],
        "draft_plan": [
            "# Define a method to find the closest smaller number than n.\n# Initialize a variable 'closest' to a value smaller than n, such as -1.\n# Iterate from n-1 to 1 in reverse order.\n    # Check if the current number is smaller than n and update 'closest' if it is.\n# Return 'closest' as the closest smaller number."
        ],
        "final_plan": [
            "def find_closest_smaller_number(n)\n  closest = -1\n\n  (n-1).downto(1) do |num|\n    if num < n\n      closest = num\n      break\n    end\n  end\n\n  closest\nend"
        ]
    },
    {
        "id": "90",
        "prompt": "Write a function to find the length of the longest word.",
        "solution": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max",
        "code": [
            "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max"
        ],
        "pseudo": "# Split the input sentence into words using the split() function\n# Initialize a variable maxLength to 0\n\n# Iterate through each word in the list of words\n    # Check if the length of the current word is greater than maxLength\n        # If it is, update maxLength with the length of the current word\n\n# Return maxLength",
        "test": [
            "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
            "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
            "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
        ],
        "draft_plan": [
            "# Define a method to find the length of the longest word.\n# Split the input string into an array of words using the 'split' method.\n# Initialize a variable 'longest_length' to 0.\n# Iterate over each word in the array.\n    # If the length of the current word is greater than 'longest_length',\n        # Update 'longest_length' with the length of the current word.\n# Return 'longest_length'."
        ],
        "final_plan": [
            "def find_longest_length(string)\n  words = string.split(\" \")\n  longest_length = 0\n\n  words.each do |word|\n    longest_length = word.length if word.length > longest_length\n  end\n\n  longest_length\nend"
        ]
    },
    {
        "id": "91",
        "prompt": "Write a function to check if a string is present as a substring in a given list of string values.",
        "solution": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False",
        "code": [
            "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False"
        ],
        "pseudo": "# Iterate through each string in the list\n    # Check if the given substring is present in the current string\n        # If found, return True\n\n# If the substring is not found in any string, return False",
        "test": [
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
        ],
        "draft_plan": [
            "# Define a method to check if a string is present as a substring in a given list of strings.\n# Iterate over each string in the input list.\n    # Check if the input string is a substring of the current string.\n        # If true, return true.\n# If the input string is not found as a substring in any of the strings in the list, return false."
        ],
        "final_plan": [
            "def substring_in_list(str, str_list)\n  str_list.each do |s|\n    return true if s.include?(str)\n  end\n  \n  false\nend"
        ]
    },
    {
        "id": "92",
        "prompt": "Write a function to check whether the given number is undulating or not.",
        "solution": "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True",
        "code": [
            "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True"
        ],
        "pseudo": "To check whether a given number is undulating or not, we can follow these steps:\n\n1. Convert the given number into a string.\n2. Check if the length of the string is less than or equal to 2. If it is, return False since a number with length less than or equal to 2 cannot be undulating.\n3. Iterate through each digit in the string starting from the second digit.\n    - Check if the current digit is equal to the previous digit. If it is, return False since an undulating number cannot have consecutive same digits.\n    - Check if the current digit is greater than the previous digit. If it is, check if the previous digit is greater than the digit before it. If it is not, return False since an undulating number should have a decreasing trend after an increasing trend.\n    - Check if the current digit is less than the previous digit. If it is, check if the previous digit is less than the digit before it. If it is not, return False since an undulating number should have an increasing trend after a decreasing trend.\n4. If all the checks pass, return True since the number is undulating.\n\nHere is the code implementation of the logic:\n\n```python\ndef is_undulating_number(num):\n    num_str = str(num)\n    if len(num_str) <= 2:\n        return False\n    for i in range(1, len(num_str)):\n        if num_str[i] == num_str[i-1]:\n            return False\n        if num_str[i] > num_str[i-1] and num_str[i-1] <= num_str[i-2]:\n            return False\n        if num_str[i] < num_str[i-1] and num_str[i-1] >= num_str[i-2]:\n            return False\n    return True\n```\n\nYou can use the above function to check if a given number is undulating or not by passing the number as an argument to the function `is_undulating_number()`. The function will return `True` if the number is undulating, and `False` otherwise.",
        "test": [
            "assert is_undulating(1212121) == True",
            "assert is_undulating(1991) == False",
            "assert is_undulating(121) == True"
        ],
        "draft_plan": [
            "# Convert the given number to a string\n# Check if the length of the string is less than or equal to 2\n    # If true, return false as a number with less than 3 digits cannot be undulating\n# Iterate through each index from 0 to the second last index of the string\n    # Check if the current digit and the next digit are the same\n        # If true, return false as undulating numbers cannot have consecutive digits that are the same\n    # Check if the absolute difference between the current digit and the next digit is not equal to 1\n        # If true, return false as undulating numbers have consecutive digits with an absolute difference of 1\n# If all checks pass, return true as the number is undulating"
        ],
        "final_plan": [
            "def is_undulating_number(num)\n  str_num = num.to_s\n\n  return false if str_num.length <= 2\n\n  (0..str_num.length - 2).each do |i|\n    return false if str_num[i] == str_num[i+1]\n    return false if (str_num[i].to_i - str_num[i+1].to_i).abs != 1\n  end\n\n  true\nend"
        ]
    },
    {
        "id": "93",
        "prompt": "Write a function to calculate the value of 'a' to the power 'b'.",
        "solution": "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)",
        "code": [
            "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)"
        ],
        "pseudo": "# Initialize the result variable to 1\n\n# If b is positive\n    # Iterate from 1 to b\n        # Multiply the result by a\n\n# If b is negative\n    # Iterate from 1 to abs(b)\n        # Divide the result by a\n\n# Return the result",
        "test": [
            "assert power(3,4) == 81",
            "assert power(2,3) == 8",
            "assert power(5,5) == 3125"
        ],
        "draft_plan": [
            "# Define a method to calculate the value of 'a' to the power 'b'.\n# If 'b' is equal to 0, return 1.\n# If 'b' is equal to 1, return 'a'.\n# If 'b' is negative, calculate the reciprocal of 'a' to the power of the absolute value of 'b'.\n# If 'b' is positive, use a loop to multiply 'a' by itself 'b' times.\n    # Initialize a variable 'result' to 1.\n    # Iterate 'b' times.\n        # Multiply 'result' by 'a'.\n# Return 'result'."
        ],
        "final_plan": [
            "def calculate_power(a, b)\n  return 1 if b == 0\n  return a if b == 1\n  return 1.0 / calculate_power(a, -b.abs) if b < 0\n\n  result = 1\n  b.times do\n    result *= a\n  end\n  result\nend"
        ]
    },
    {
        "id": "94",
        "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
        "solution": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ",
        "code": [
            "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) "
        ],
        "pseudo": "# Initialize the minimum second value as positive infinity\n# Initialize the first value of the tuple with minimum second value as None\n\n# Iterate through each tuple in the list\n    # Check if the second value of the current tuple is smaller than the current minimum second value\n        # If yes, update the minimum second value and the first value of the tuple\n\n# Return the first value of the tuple with the smallest second value",
        "test": [
            "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
            "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
            "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
        ],
        "draft_plan": [
            "# Define a method to return the first value of the tuple with the smallest second value.\n# Initialize variables 'smallest' and 'result' with nil values.\n# Iterate over the input list of tuples using 'each' iterator.\n    # Extract the second value of the current tuple.\n    # Check if 'smallest' is nil or the current second value is smaller than 'smallest'.\n        # If true, update 'smallest' with the current second value and 'result' with the first value of the current tuple.\n# Return 'result'."
        ],
        "final_plan": [
            "def get_first_smallest(tuple_list)\n  smallest = nil\n  result = nil\n\n  tuple_list.each do |tuple|\n    second_value = tuple[1]\n    \n    if smallest.nil? || second_value < smallest\n      smallest = second_value\n      result = tuple[0]\n    end\n  end\n\n  result\nend"
        ]
    },
    {
        "id": "95",
        "prompt": "Write a function to find the length of the smallest list in a list of lists.",
        "solution": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength ",
        "code": [
            "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength "
        ],
        "pseudo": "# Initialize the minimum length to a large number\n\n# Iterate through each list in the input list\n    # Check the length of the current list\n        # If the length is smaller than the current minimum length, update the minimum length\n\n# Return the minimum length",
        "test": [
            "assert Find_Min_Length([[1],[1,2]]) == 1",
            "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
            "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
        ],
        "draft_plan": [
            "# Define a method to find the length of the smallest list in a list of lists.\n# Initialize a variable 'smallest_length' to a large value, such as infinity.\n# Iterate over each list in the input list.\n    # Check the length of the current list.\n    # If the length is smaller than 'smallest_length', update 'smallest_length' with the length of the current list.\n# Return 'smallest_length'."
        ],
        "final_plan": [
            "def smallest_list_length(list_of_lists)\n  smallest_length = Float::INFINITY\n\n  list_of_lists.each do |list|\n    length = list.length\n    smallest_length = length if length < smallest_length\n  end\n\n  smallest_length\nend"
        ]
    },
    {
        "id": "96",
        "prompt": "Write a function to find the number of divisors of a given integer.",
        "solution": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x",
        "code": [
            "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x"
        ],
        "pseudo": "# Initialize a count variable to 0\n\n# Iterate through each number from 1 to the given integer\n    # Check if the current number is a divisor of the given integer\n        # If yes, increment the count variable\n\n# Return the count variable",
        "test": [
            "assert divisor(15) == 4",
            "assert divisor(12) == 6",
            "assert divisor(9) == 3"
        ],
        "draft_plan": [
            "# Define a method to find the number of divisors of a given integer.\n# Initialize a variable 'count' to 0.\n# Iterate through each number 'i' from 1 to the given integer.\n    # Check if the given integer is divisible by 'i' without remainder.\n        # If true, increment the 'count' variable by 1.\n# Return the value of 'count' as the number of divisors."
        ],
        "final_plan": [
            "def count_divisors(num)\n  count = 0\n\n  (1..num).each do |i|\n    count += 1 if num % i == 0\n  end\n\n  count\nend"
        ]
    },
    {
        "id": "97",
        "prompt": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.",
        "solution": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n",
        "code": [
            "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n"
        ],
        "pseudo": "# Create an empty dictionary to store the frequency of elements\n\n# Iterate through each sublist in the flattened list\n    # Iterate through each element in the sublist\n        # Check if the element is already in the dictionary\n            # If it is, increment its count by 1\n            # If it is not, add it to the dictionary with a count of 1\n\n# Return the dictionary containing the frequency of each element",
        "test": [
            "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
            "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
            "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
        ],
        "draft_plan": [
            "# Define a method to find the frequency of each element in a flattened list of lists.\n# Create an empty hash to store the frequencies.\n# Flatten the input list of lists.\n# Iterate over each element in the flattened list.\n    # Check if the element already exists as a key in the hash.\n        # If true, increment the value of the key by 1.\n        # If false, add the element as a new key in the hash with an initial value of 1.\n# Return the resulting hash with the frequencies of each element."
        ],
        "final_plan": [
            "def find_element_frequency(list_of_lists)\n  frequency = Hash.new(0)\n  flattened_list = list_of_lists.flatten\n\n  flattened_list.each do |element|\n    frequency[element] += 1\n  end\n\n  frequency\nend"
        ]
    },
    {
        "id": "98",
        "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
        "solution": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ",
        "code": [
            "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) "
        ],
        "pseudo": "# Initialize the product variable to 1\n\n# Iterate through each number in the list\n    # Multiply the product by the current number\n\n# Divide the product by the length of the list\n\n# Return the result",
        "test": [
            "assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)",
            "assert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)",
            "assert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)"
        ],
        "draft_plan": [
            "# Define a method to multiply all the numbers in a list and divide by the length of the list.\n# Initialize a variable 'product' to 1.\n# Iterate over the input list of numbers using 'each' iterator.\n    # Multiply the current number with the 'product' variable.\n# Divide the 'product' variable by the length of the list.\n# Return the result."
        ],
        "final_plan": [
            "def multiply_and_divide(numbers)\n  product = 1\n\n  numbers.each do |num|\n    product *= num\n  end\n\n  result = product / numbers.length.to_f\n  result\nend"
        ]
    },
    {
        "id": "99",
        "prompt": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
        "solution": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") ",
        "code": [
            "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") "
        ],
        "pseudo": "# Initialize an empty string to store the binary representation\n# Check if the input number is 0, if so return '0' as the binary representation\n# Iterate until the input number becomes 0\n    # Append the remainder of the input number divided by 2 to the binary representation string\n    # Update the input number by dividing it by 2, discarding the remainder\n\n# Reverse the binary representation string\n\n# Return the binary representation string",
        "test": [
            "assert decimal_to_binary(8) == '1000'",
            "assert decimal_to_binary(18) == '10010'",
            "assert decimal_to_binary(7) == '111'"
        ],
        "draft_plan": [
            "# Define a method to convert decimal to binary.\n# Initialize an empty string 'binary' to store the binary representation.\n# Iterate until the decimal number is greater than 0.\n    # Take the modulo of the decimal number with 2 and convert it to a string.\n    # Add the string to the beginning of 'binary'.\n    # Divide the decimal number by 2.\n# Return the 'binary' string."
        ],
        "final_plan": [
            "def decimal_to_binary(decimal)\n  binary = \"\"\n\n  while decimal > 0\n    binary = (decimal % 2).to_s + binary\n    decimal /= 2\n  end\n\n  binary\nend"
        ]
    },
    {
        "id": "100",
        "prompt": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
        "solution": "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i",
        "code": [
            "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i"
        ],
        "pseudo": "# Define a helper function to check if a number is palindrome\n    # Convert the number to a string\n    # Check if the string is equal to its reversed string representation\n\n# Start a loop from the next number after the specified integer\n    # Check if the current number is a palindrome\n        # If yes, return the current number\n\n# If no palindrome is found in the loop, return None",
        "test": [
            "assert next_smallest_palindrome(99)==101",
            "assert next_smallest_palindrome(1221)==1331",
            "assert next_smallest_palindrome(120)==121"
        ],
        "draft_plan": [
            "# Define a method to find the next smallest palindrome.\n# Increment the given integer by 1.\n# Iterate in a loop until a palindrome is found.\n    # Convert the incremented integer to a string.\n    # Check if the string is equal to its reverse (i.e., a palindrome).\n        # If true, return the integer.\n    # Otherwise, continue to the next iteration.\n# If no palindrome is found, return nil."
        ],
        "final_plan": [
            "def find_next_smallest_palindrome(num)\n  num += 1\n\n  while true\n    if num.to_s == num.to_s.reverse\n      return num\n    end\n    num += 1\n  end\n\n  return nil\nend"
        ]
    },
    {
        "id": "101",
        "prompt": "Write a function to find the kth element in the given array using 1-based indexing.",
        "solution": "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]",
        "code": [
            "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]"
        ],
        "pseudo": "# Sort the array in ascending order\n\n# Check if the kth element is within the range of the array indices\n    # If it is, return the element at index k-1\n\n# If k is out of range, return None",
        "test": [
            "assert kth_element([12,3,5,7,19], 2) == 3",
            "assert kth_element([17,24,8,23], 3) == 8",
            "assert kth_element([16,21,25,36,4], 4) == 36"
        ],
        "draft_plan": [
            "# Define a method to find the kth element in the array.\n# Check if the input array is empty or if k is outside the valid range (1 to array length).\n    # If true, return nil since there is no valid kth element.\n# Return the element at the (k-1) index in the array."
        ],
        "final_plan": [
            "def find_kth_element(array, k)\n  return nil if array.empty? || k < 1 || k > array.length\n\n  array[k - 1]\nend"
        ]
    },
    {
        "id": "102",
        "prompt": "Write a function to convert a snake case string to camel case string.",
        "solution": "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "code": [
            "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))"
        ],
        "pseudo": "# Split the snake case string by underscore to get individual words\n# Capitalize the first letter of each word except the first word\n# Join the words together to form the camel case string\n# Return the camel case string",
        "test": [
            "assert snake_to_camel('python_program')=='PythonProgram'",
            "assert snake_to_camel('python_language')==('PythonLanguage')",
            "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
        ],
        "draft_plan": [
            "# Split the snake case string into an array of words using '_' as the delimiter\n# Capitalize the first letter of each word, except for the first word\n# Join the capitalized words together to form the camel case string\n# Return the camel case string"
        ],
        "final_plan": [
            "def snake_to_camel(snake_case_string)\n  words = snake_case_string.split('_')\n  camel_case_string = words[0]\n  \n  for i in 1...words.length\n    camel_case_string += words[i].capitalize\n  end\n  \n  camel_case_string\nend"
        ]
    },
    {
        "id": "103",
        "prompt": "Write a function to find the Eulerian number a(n, m).",
        "solution": "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",
        "code": [
            "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"
        ],
        "pseudo": "To find the Eulerian number a(n, m), you can use the following code logic:\n\n1. Define a function called eulerian_number with two parameters n and m.\n2. Create a nested list called dp with n+1 rows and m+1 columns, and initialize all values to 0.\n3. Iterate through each row i from 0 to n and each column j from 0 to m.\n4. Inside the loop, check if i is equal to 0 or j is equal to 0. If true, set dp[i][j] to 1.\n5. Otherwise, set dp[i][j] to (j+1) * dp[i-1][j] + (i-j) * dp[i-1][j-1].\n6. Finally, return dp[n][m].\n\nHere is the code implementation of the above logic:\n\n```python\ndef eulerian_number(n, m):\n    dp = [[0] * (m+1) for _ in range(n+1)]\n\n    for i in range(n+1):\n        for j in range(m+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = (j+1) * dp[i-1][j] + (i-j) * dp[i-1][j-1]\n    \n    return dp[n][m]\n```\n\nYou can call the function eulerian_number(n, m) and pass the values of n and m to find the corresponding Eulerian number a(n, m).",
        "test": [
            "assert eulerian_num(3, 1) == 4",
            "assert eulerian_num(4, 1) == 11",
            "assert eulerian_num(5, 3) == 26"
        ],
        "draft_plan": [
            "# Define a method to find the Eulerian number a(n, m).\n# Create a 2D array of size (n+1) x (m+1) to store the Eulerian numbers.\n# Initialize the first row and first column of the array with 0.\n# Iterate over the rows and columns of the array.\n    # If the current row is greater than the current column, calculate the Eulerian number using the formula:\n        # Eulerian(n, m) = (m+1) * Eulerian(n-1, m) + (n-m) * Eulerian(n-1, m-1)\n    # If the current row is equal to the current column, set the Eulerian number to 1.\n# Return the Eulerian number at position (n, m), which is the last element in the array."
        ],
        "final_plan": [
            "def eulerian_number(n, m)\n  eulerian = Array.new(n+1) { Array.new(m+1) }\n\n  (0..n).each do |i|\n    (0..m).each do |j|\n      if i == 0 || j == 0\n        eulerian[i][j] = 0\n      elsif i > j\n        eulerian[i][j] = (j+1) * eulerian[i-1][j] + (i-j) * eulerian[i-1][j-1]\n      elsif i == j\n        eulerian[i][j] = 1\n      end\n    end\n  end\n\n  eulerian[n][m]\nend"
        ]
    },
    {
        "id": "104",
        "prompt": "Write a function to sort each sublist of strings in a given list of lists.",
        "solution": "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n",
        "code": [
            "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n"
        ],
        "pseudo": "# Iterate through each sublist in the given list\n    # Sort the sublist using the sorted() function and assign the sorted sublist back to the original sublist\n\n# Return the modified list with sorted sublists",
        "test": [
            "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
            "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
            "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
        ],
        "draft_plan": [
            "# Define a method to sort each sublist of strings in a given list of lists.\n# Iterate over each sublist in the input list using 'each' iterator.\n    # Sort the sublist in place using the 'sort' method.\n# Return the modified input list with sorted sublists."
        ],
        "final_plan": [
            "def sort_sublists(lists)\n  lists.each do |sublist|\n    sublist.sort!\n  end\n  lists\nend"
        ]
    },
    {
        "id": "105",
        "prompt": "Write a function to count true booleans in the given list.",
        "solution": "def count(lst):   \n    return sum(lst) ",
        "code": [
            "def count(lst):   \n    return sum(lst) "
        ],
        "pseudo": "# Initialize a count variable to 0\n\n# Iterate through each element in the list\n    # Check if the current element is True\n        # If it is, increment the count variable\n\n# Return the count variable",
        "test": [
            "assert count([True,False,True]) == 2",
            "assert count([False,False]) == 0",
            "assert count([True,True,True]) == 3"
        ],
        "draft_plan": [
            "# Define a method to count true booleans in a given list.\n# Initialize a counter for true booleans.\n# Iterate over the input list using 'each' iterator.\n    # Check if the current element is a boolean and is true.\n        # If true, increment the counter for true booleans.\n# Return the count of true booleans."
        ],
        "final_plan": [
            "def count_true_booleans(lst)\n  true_count = 0\n\n  lst.each do |element|\n    true_count += 1 if element.is_a?(TrueClass) && element\n  end\n\n  true_count\nend"
        ]
    },
    {
        "id": "106",
        "prompt": "Write a function to append the given list to the given tuples.",
        "solution": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) ",
        "code": [
            "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) "
        ],
        "pseudo": "# Create an empty list to store the modified tuples\n\n# Iterate through each tuple in the given list\n    # Convert the tuple to a list\n    # Append the given list to the current tuple\n    # Convert the modified tuple back to a tuple\n    # Append the modified tuple to the list of modified tuples\n\n# Return the list of modified tuples",
        "test": [
            "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
            "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
            "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
        ],
        "draft_plan": [
            "# Define a method to append a given list to given tuples.\n# Initialize an empty array to store the modified tuples.\n# Iterate over the input tuples using 'each' iterator.\n    # Append the given list to each tuple using the '+' operator.\n    # Add the modified tuple to the array.\n# Return the array of modified tuples."
        ],
        "final_plan": [
            "def append_list_to_tuples(given_list, tuples)\n  modified_tuples = []\n\n  tuples.each do |tuple|\n    modified_tuple = tuple + given_list\n    modified_tuples << modified_tuple\n  end\n\n  modified_tuples\nend"
        ]
    },
    {
        "id": "108",
        "prompt": "Write a function to merge three lists into a single sorted list.",
        "solution": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)",
        "code": [
            "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)"
        ],
        "pseudo": "# Concatenate all three lists into a single list\n# Sort the merged list using the sorted() function\n# Return the sorted merged list",
        "test": [
            "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
            "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
            "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
        ],
        "draft_plan": [
            "# Define a method to merge three lists into a single sorted list.\n# Initialize an empty list to store the merged and sorted elements.\n# Initialize three pointers, each pointing to the first element of the three input lists.\n# While all three pointers are within the bounds of their respective lists:\n    # Compare the elements at the three pointers and find the smallest element.\n    # Append the smallest element to the merged list.\n    # Increment the pointer of the list from which the smallest element was taken.\n# After one or more pointers have reached the end of their lists, append the remaining elements from the other lists to the merged list.\n# Return the merged and sorted list."
        ],
        "final_plan": [
            "def merge_lists(list1, list2, list3)\n  merged_list = []\n  pointer1 = 0\n  pointer2 = 0\n  pointer3 = 0\n\n  while pointer1 < list1.length && pointer2 < list2.length && pointer3 < list3.length\n    if list1[pointer1] <= list2[pointer2] && list1[pointer1] <= list3[pointer3]\n      merged_list << list1[pointer1]\n      pointer1 += 1\n    elsif list2[pointer2] <= list1[pointer1] && list2[pointer2] <= list3[pointer3]\n      merged_list << list2[pointer2]\n      pointer2 += 1\n    else\n      merged_list << list3[pointer3]\n      pointer3 += 1\n    end\n  end\n\n  while pointer1 < list1.length\n    merged_list << list1[pointer1]\n    pointer1 += 1\n  end\n\n  while pointer2 < list2.length\n    merged_list << list2[pointer2]\n    pointer2 += 1\n  end\n\n  while pointer3 < list3.length\n    merged_list << list3[pointer3]\n    pointer3 += 1\n  end\n\n  merged_list\nend"
        ]
    },
    {
        "id": "109",
        "prompt": "Write a function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
        "solution": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ",
        "code": [
            "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count "
        ],
        "pseudo": "# Convert the binary string to a list of characters\n# Initialize a counter variable to keep track of the number of odd numbers\n\n# Rotate the binary string the given number of times\n    # Remove the last character from the binary string and prepend it to the front\n\n# Convert the rotated binary string back to a string\n# Iterate through each character in the rotated binary string\n    # Convert the character to an integer\n    # Check if the integer value is odd\n        # If so, increment the counter\n\n# Return the counter value",
        "test": [
            "assert odd_Equivalent(\"011001\",6) == 3",
            "assert odd_Equivalent(\"11011\",5) == 4",
            "assert odd_Equivalent(\"1010\",4) == 2"
        ],
        "draft_plan": [
            "# Define a method to count the number of numbers with an odd value when rotating a binary string.\n# Convert the input binary string to an array of characters.\n# Create a variable 'count' to keep track of the number of odd numbers.\n# Iterate 'n' times, where 'n' is the given number of rotations.\n    # Rotate the array by removing the last element and appending it to the beginning.\n    # Convert the rotated array back to a string.\n    # Convert the rotated string to an integer.\n    # Check if the integer is odd.\n        # If true, increment the 'count' variable.\n# Return the 'count' variable."
        ],
        "final_plan": [
            "def count_odd_rotations(binary_string, n)\n  binary_array = binary_string.chars\n  count = 0\n\n  n.times do\n    binary_array.rotate!(-1)\n    rotated_string = binary_array.join('')\n    rotated_integer = rotated_string.to_i(2)\n    count += 1 if rotated_integer.odd?\n  end\n\n  count\nend"
        ]
    },
    {
        "id": "111",
        "prompt": "Write a function to find the common elements in given nested lists.",
        "solution": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result",
        "code": [
            "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result"
        ],
        "pseudo": "# Initialize a set to store the common elements\n\n# Iterate through each sublist in the nested list\n    # If it's the first sublist, add all elements to the set\n    # For subsequent sublists, update the set with the intersection of the current set and the sublist\n    \n# Return the set containing the common elements",
        "test": [
            "assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])",
            "assert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])",
            "assert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])"
        ],
        "draft_plan": [
            "# Define a method to find common elements in nested lists.\n# Initialize a variable 'common_elements' as an empty array.\n# Iterate over the first list in the input nested lists.\n    # Iterate over each element in the first list.\n        # Check if the current element exists in all other lists.\n            # If true, add the element to the 'common_elements' array.\n# Return the 'common_elements' array."
        ],
        "final_plan": [
            "def find_common_elements(nested_lists)\n  common_elements = []\n\n  nested_lists.first.each do |element|\n    if nested_lists.all? { |list| list.include?(element) }\n      common_elements << element\n    end\n  end\n\n  common_elements\nend"
        ]
    },
    {
        "id": "113",
        "prompt": "Write a function to check if a string represents an integer or not.",
        "solution": "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False",
        "code": [
            "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False"
        ],
        "pseudo": "# Check if the string is empty or None\n    # If so, return False\n\n# Check if the string starts with a '+' or '-'\n    # If so, remove the sign from the string\n\n# Check if the string consists only of digits\n    # If so, return True\n\n# If the string is non-empty and does not start with a sign, it is not a valid integer representation\n    # Return False",
        "test": [
            "assert check_integer(\"python\")==False",
            "assert check_integer(\"1\")==True",
            "assert check_integer(\"12345\")==True"
        ],
        "draft_plan": [
            "# Define a method to check if a string represents an integer or not.\n# Use the built-in Ruby method 'Integer()' to attempt to convert the string to an integer.\n    # If the conversion is successful, return true.\n    # If the conversion raises an exception, rescue the exception and return false.\n# End the method."
        ],
        "final_plan": [
            "def is_integer?(string)\n  begin\n    Integer(string)\n    return true\n  rescue ArgumentError\n    return false\n  end\nend"
        ]
    },
    {
        "id": "115",
        "prompt": "Write a function to check whether all dictionaries in a list are empty or not.",
        "solution": "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit",
        "code": [
            "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit"
        ],
        "pseudo": "# Iterate through each dictionary in the list\n    # Check if the current dictionary is empty\n        # If any dictionary is not empty, return False\n\n# If all dictionaries are empty, return True",
        "test": [
            "assert empty_dit([{},{},{}])==True",
            "assert empty_dit([{1,2},{},{}])==False",
            "assert empty_dit({})==True"
        ],
        "draft_plan": [
            "# Define a method to check whether all dictionaries in a list are empty or not.\n# Iterate over the input list using the 'all?' iterator.\n    # Check if the current element, which is a dictionary, is empty using the 'empty?' method.\n# Return true if all dictionaries are empty, and false otherwise."
        ],
        "final_plan": [
            "def check_empty_dictionaries(lst)\n  lst.all? { |dict| dict.empty? }\nend"
        ]
    },
    {
        "id": "116",
        "prompt": "Write a function to convert a given tuple of positive integers into a single integer.",
        "solution": "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result",
        "code": [
            "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result"
        ],
        "pseudo": "# Initialize an empty string to store the converted integer\n\n# Iterate through each element in the tuple\n    # Convert each element to a string and concatenate it to the existing string\n\n# Convert the string to an integer and return it",
        "test": [
            "assert tuple_to_int((1,2,3))==123",
            "assert tuple_to_int((4,5,6))==456",
            "assert tuple_to_int((5,6,7))==567"
        ],
        "draft_plan": [
            "# Define a method to convert a tuple of positive integers into a single integer.\n# Initialize an empty string to store the converted integer.\n# Iterate over each element in the tuple.\n    # Convert each element to a string and append it to the string.\n# Convert the string to an integer using the to_i method.\n# Return the converted integer."
        ],
        "final_plan": [
            "def convert_tuple_to_integer(tuple)\n  integer_string = \"\"\n  \n  tuple.each do |num|\n    integer_string += num.to_s\n  end\n  \n  integer_string.to_i\nend"
        ]
    },
    {
        "id": "117",
        "prompt": "Write a function to convert all possible convertible elements in a list of lists to floats.",
        "solution": "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res",
        "code": [
            "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res"
        ],
        "pseudo": "# Iterate through each sublist in the input list\n    # Iterate through each element in the sublist\n        # Try to convert the element to a float\n        # If successful, replace the element with the float value\n\n# Return the modified input list",
        "test": [
            "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]",
            "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]",
            "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]"
        ],
        "draft_plan": [
            "# Define a method to convert all possible convertible elements in a list of lists to floats.\n# Iterate over each sublist in the input list using nested iterators.\n    # Iterate over each element in the sublist.\n        # Check if the element can be converted to a float using the 'to_f' method.\n            # If true, replace the element with its float value using the 'to_f' method.\n# Return the modified list."
        ],
        "final_plan": [
            "def convert_to_floats(list_of_lists)\n  list_of_lists.each do |sublist|\n    sublist.each_with_index do |element, index|\n      if element.is_a?(String) && element =~ /\\A[+-]?\\d+(\\.\\d+)?\\z/\n        sublist[index] = element.to_f\n      end\n    end\n  end\n\n  list_of_lists\nend"
        ]
    },
    {
        "id": "118",
        "prompt": "Write a function to convert a string to a list of strings split on the space character.",
        "solution": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst",
        "code": [
            "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst"
        ],
        "pseudo": "# Initialize an empty list to store the split strings\n\n# Split the input string on the space character and store the result in a variable\n\n# Iterate through each element in the split result\n    # Append the element to the list\n\n# Return the list of split strings",
        "test": [
            "assert string_to_list(\"python programming\")==['python','programming']",
            "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
            "assert string_to_list(\"write a program\")==['write','a','program']"
        ],
        "draft_plan": [
            "# Define a method to convert a string to a list of strings split on the space character.\n# Use the 'split' method on the input string, passing the space character as the argument.\n# Return the resulting array of strings."
        ],
        "final_plan": [
            "def string_to_list(string)\n  string.split(\" \")\nend"
        ]
    },
    {
        "id": "119",
        "prompt": "Write a function to find the element that appears only once in a sorted array.",
        "solution": "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)",
        "code": [
            "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)"
        ],
        "pseudo": "# Initialize a variable to keep track of the unique element\n# Iterate through the sorted array\n    # Check if the current element is equal to the next element and the previous element\n        # If not, assign the current element to the unique variable\n\n# Return the unique element",
        "test": [
            "assert search([1,1,2,2,3]) == 3",
            "assert search([1,1,3,3,4,4,5,5,7,7,8]) == 8",
            "assert search([1,2,2,3,3,4,4]) == 1"
        ],
        "draft_plan": [
            "# Define a method to find the element that appears only once in a sorted array.\n# Initialize a variable 'result' to store the unique element.\n# Iterate through the input array using 'each_with_index' iterator.\n    # Check if the current element is equal to the next element and the previous element.\n        # If not equal, assign the current element to 'result' and break the loop.\n# Return the 'result' variable."
        ],
        "final_plan": [
            "def find_unique_element(arr)\n  result = nil\n\n  arr.each_with_index do |element, index|\n    if element != arr[index-1] && element != arr[index+1]\n      result = element\n      break\n    end\n  end\n\n  result\nend"
        ]
    },
    {
        "id": "120",
        "prompt": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.",
        "solution": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max",
        "code": [
            "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max"
        ],
        "pseudo": "# Initialize the maximum product to 0\n\n# Iterate through each pair of tuples in the given list\n    # Calculate the product of the absolute values of the numbers in the current pair\n    # If the calculated product is greater than the maximum product, update the maximum product\n\n# Return the maximum product",
        "test": [
            "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
            "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
            "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
        ],
        "draft_plan": [
            "# Define a method to find the maximum absolute product between numbers in pairs of tuples.\n# Initialize a variable 'max_product' to 0.\n# Iterate over the input list of tuples using 'each' iterator.\n    # Extract the two elements of the current tuple.\n    # Calculate the product of the two numbers and take the absolute value.\n    # Update 'max_product' if the calculated product is greater than 'max_product'.\n# Return 'max_product'."
        ],
        "final_plan": [
            "def max_absolute_product(list)\n  max_product = 0\n\n  list.each do |tuple|\n    a, b = tuple[0], tuple[1]\n    product = (a * b).abs\n    max_product = product if product > max_product\n  end\n\n  max_product\nend"
        ]
    },
    {
        "id": "123",
        "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "solution": "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)",
        "code": [
            "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)"
        ],
        "pseudo": "# Define a helper function to calculate the sum of proper divisors for a given number\n    # Initialize the sum to 0\n    # Iterate from 1 to the given number (excluding the number itself)\n        # Check if the current number is a proper divisor of the given number\n            # If it is, add it to the sum\n\n# Define the main function to find and sum all amicable numbers up to a specified number\n    # Initialize the sum of amicable numbers to 0\n    # Iterate from 1 to the specified number\n        # Calculate the sum of proper divisors for the current number\n        # Check if the sum of proper divisors is different from the current number\n            # If it is, calculate the sum of proper divisors for the sum of proper divisors\n            # Check if the second sum of proper divisors is equal to the current number\n                # If it is, add the current number to the sum of amicable numbers\n\n# Return the sum of amicable numbers",
        "test": [
            "assert amicable_numbers_sum(999)==504",
            "assert amicable_numbers_sum(9999)==31626",
            "assert amicable_numbers_sum(99)==0"
        ],
        "draft_plan": [
            "# Define a method to sum all amicable numbers from 1 to a specified number.\n# Initialize a variable 'sum' to 0 to store the cumulative sum of amicable numbers.\n# Iterate through each number from 1 to the specified number.\n    # Calculate the sum of proper divisors of the current number.\n    # Calculate the sum of proper divisors of the sum of proper divisors.\n    # Check if the current number is equal to the sum of proper divisors of the sum of proper divisors.\n        # If true, add the current number to the 'sum' variable.\n# Return the final 'sum' value."
        ],
        "final_plan": [
            "def sum_amicable_numbers(n)\n  sum = 0\n\n  (1..n).each do |num|\n    sum_of_divisors = find_sum_of_divisors(num)\n    sum_of_divisors_of_sum = find_sum_of_divisors(sum_of_divisors)\n\n    if num == sum_of_divisors_of_sum && num != sum_of_divisors\n      sum += num\n    end\n  end\n\n  sum\nend\n\ndef find_sum_of_divisors(num)\n  sum = 0\n\n  (1..num/2).each do |divisor|\n    sum += divisor if num % divisor == 0\n  end\n\n  sum\nend"
        ]
    },
    {
        "id": "124",
        "prompt": "Write a function to get the angle of a complex number.",
        "solution": "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle",
        "code": [
            "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle"
        ],
        "pseudo": "import math\n\ndef get_angle(complex_num):\n    # Calculate the angle using the arctan2 function from the math module\n    angle = math.atan2(complex_num.imag, complex_num.real)\n    \n    # Convert the angle from radians to degrees\n    angle_degrees = math.degrees(angle)\n    \n    # Return the angle in degrees\n    return angle_degrees",
        "test": [
            "assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)",
            "assert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)",
            "assert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)"
        ],
        "draft_plan": [
            "# Define a method to get the angle of a complex number.\n# Calculate the magnitude of the complex number using the sqrt method for the sum of squares of real and imaginary parts.\n# Calculate the angle of the complex number using the Math.atan2 method, passing the imaginary part and the real part as arguments.\n# Convert the angle from radians to degrees using the Math::PI constant and the multiplication by 180.\n# Return the angle as the result of the method."
        ],
        "final_plan": [
            "def get_angle(complex_num)\n  magnitude = Math.sqrt(complex_num.real**2 + complex_num.imaginary**2)\n  angle = Math.atan2(complex_num.imaginary, complex_num.real) * 180 / Math::PI\n  angle\nend"
        ]
    },
    {
        "id": "125",
        "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "solution": "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0",
        "code": [
            "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0"
        ],
        "pseudo": "# Initialize the maximum difference as 0\n\n# Iterate through each character in the binary string\n    # If the current character is '0', increment a count variable by 1\n    # If the current character is '1', decrement the count variable by 1\n\n    # Check if the count variable is greater than the maximum difference\n        # If so, update the maximum difference to the count variable\n\n# Return the maximum difference as the result",
        "test": [
            "assert find_length(\"11000010001\") == 6",
            "assert find_length(\"10111\") == 1",
            "assert find_length(\"11011101100101\") == 2"
        ],
        "draft_plan": [
            "# Define a method to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n# Initialize a variable 'max_diff' to 0.\n# Iterate over the binary string using 'each_char' iterator.\n    # Initialize a variable 'count_0' to 0 to store the count of 0s.\n    # Initialize a variable 'count_1' to 0 to store the count of 1s.\n    # Iterate over the remaining part of the binary string starting from the current character using 'each_char.with_index' iterator.\n        # Update 'count_0' and 'count_1' based on the current character.\n        # Calculate the difference between 'count_0' and 'count_1'.\n        # Update 'max_diff' if the difference is greater than 'max_diff'.\n# Return the 'max_diff' as the result."
        ],
        "final_plan": [
            "def max_difference(binary_string)\n  max_diff = 0\n\n  binary_string.each_char.with_index do |char, i|\n    count_0 = 0\n    count_1 = 0\n\n    binary_string[i..-1].each_char do |c|\n      if c == '0'\n        count_0 += 1\n      else\n        count_1 += 1\n      end\n\n      diff = count_0 - count_1\n      max_diff = diff if diff > max_diff\n    end\n  end\n\n  max_diff\nend"
        ]
    },
    {
        "id": "126",
        "prompt": "Write a function to find the sum of common divisors of two given numbers.",
        "solution": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum",
        "code": [
            "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum"
        ],
        "pseudo": "# Find the common divisors of the two given numbers\n    # Find the smaller number among the two\n    # Initialize an empty list to store the common divisors\n    # Iterate from 1 to the smaller number\n        # Check if the current number is a divisor of both given numbers\n            # If yes, add it to the list of common divisors\n\n# Find the sum of the common divisors\n    # Initialize a variable to store the sum\n    # Iterate through the list of common divisors\n        # Add each divisor to the sum\n\n# Return the sum of the common divisors",
        "test": [
            "assert sum(10,15) == 6",
            "assert sum(100,150) == 93",
            "assert sum(4,6) == 3"
        ],
        "draft_plan": [
            "# Define a method to find the sum of common divisors of two given numbers.\n# Find the smaller of the two numbers.\n# Initialize a variable 'common_divisors_sum' to 0.\n# Iterate from 1 to the smaller number (inclusive).\n    # Check if both numbers are divisible by the current number.\n        # If true, add the current number to 'common_divisors_sum'.\n# Return 'common_divisors_sum'."
        ],
        "final_plan": [
            "def sum_of_common_divisors(num1, num2)\n  smaller = [num1, num2].min\n  common_divisors_sum = 0\n\n  (1..smaller).each do |i|\n    if num1 % i == 0 && num2 % i == 0\n      common_divisors_sum += i\n    end\n  end\n\n  common_divisors_sum\nend"
        ]
    },
    {
        "id": "127",
        "prompt": "Write a function to multiply two integers.",
        "solution": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)",
        "code": [
            "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)"
        ],
        "pseudo": "# Initialize the result to 0\n\n# If either of the integers is 0, return 0\n\n# If both integers are negative, convert them to positive\n    # Multiply the positive integers and change the sign of the result to negative\n\n# If only one integer is negative, convert it to positive\n    # Multiply the positive integers and change the sign of the result to negative\n\n# If both integers are positive, multiply them normally\n\n# Return the result",
        "test": [
            "assert multiply_int(10,20)==200",
            "assert multiply_int(5,10)==50",
            "assert multiply_int(4,8)==32"
        ],
        "draft_plan": [
            "# Define a method to multiply two integers.\n# Multiply the two integers using the '*' operator.\n# Return the result of the multiplication."
        ],
        "final_plan": [
            "def multiply(a, b)\n  a * b\nend"
        ]
    },
    {
        "id": "128",
        "prompt": "Write a function to find words that are longer than n characters from a given list of words.",
        "solution": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t",
        "code": [
            "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t"
        ],
        "pseudo": "# Create an empty list to store the result\n\n# Iterate through each word in the given list\n    # Check if the length of the current word is greater than n\n        # If the condition is satisfied, append the word to the result list\n\n# Return the result list",
        "test": [
            "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
            "assert long_words(2,\"writing a program\")==['writing','program']",
            "assert long_words(5,\"sorting list\")==['sorting']"
        ],
        "draft_plan": [
            "# Define a method to find words longer than n characters.\n# Initialize an empty array to store the longer words.\n# Iterate over the input list of words using 'each' iterator.\n    # Check if the length of the current word is greater than n.\n        # If true, add the word to the array of longer words.\n# Return the array of longer words."
        ],
        "final_plan": [
            "def find_longer_words(word_list, n)\n  longer_words = []\n\n  word_list.each do |word|\n    longer_words << word if word.length > n\n  end\n\n  longer_words\nend"
        ]
    },
    {
        "id": "129",
        "prompt": "Write a function to calculate whether the matrix is a magic square.",
        "solution": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True",
        "code": [
            "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True"
        ],
        "pseudo": "# Calculate the sum of each row, column, and diagonal of the matrix\n    # Iterate through each row of the matrix\n        # Calculate the sum of the current row\n    # Iterate through each column of the matrix\n        # Calculate the sum of the current column\n    # Calculate the sum of the main diagonal\n    # Calculate the sum of the anti-diagonal\n\n# Check if the sums of all rows, columns, and diagonals are equal and equal to the magic sum\n    # If all sums are equal to the magic sum, return True\n    # If any sum is not equal to the magic sum, return False",
        "test": [
            "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
            "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
            "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
        ],
        "draft_plan": [
            "# Define a method to determine if the given matrix is a magic square.\n# Get the size of the matrix by getting the number of rows or columns.\n# Calculate the expected sum of each row, column, and diagonal by summing the values from 1 to the size of the matrix.\n# Iterate over each row in the matrix.\n    # Calculate the sum of the current row.\n    # If the sum of the current row is not equal to the expected sum, return false.\n# Iterate over each column in the matrix.\n    # Calculate the sum of the current column.\n    # If the sum of the current column is not equal to the expected sum, return false.\n# Calculate the sum of the main diagonal by iterating over the rows and adding the value at the current row and column index.\n# Calculate the sum of the secondary diagonal by iterating over the rows and adding the value at the current row and size of the matrix minus the current column index minus 1.\n# If the sum of either diagonal is not equal to the expected sum, return false.\n# If all the checks pass, return true as the matrix is a magic square."
        ],
        "final_plan": [
            "def magic_square?(matrix)\n  size = matrix.length\n  expected_sum = size * (size**2 + 1) / 2\n\n  # Check rows\n  matrix.each do |row|\n    return false unless row.sum == expected_sum\n  end\n\n  # Check columns\n  matrix.transpose.each do |column|\n    return false unless column.sum == expected_sum\n  end\n\n  # Check main diagonal\n  diagonal_sum = 0\n  (0...size).each do |i|\n    diagonal_sum += matrix[i][i]\n  end\n  return false unless diagonal_sum == expected_sum\n\n  # Check secondary diagonal\n  diagonal_sum = 0\n  (0...size).each do |i|\n    diagonal_sum += matrix[i][size - i - 1]\n  end\n  return false unless diagonal_sum == expected_sum\n\n  true\nend"
        ]
    },
    {
        "id": "130",
        "prompt": "Write a function to find the item with maximum frequency in a given list.",
        "solution": "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]",
        "code": [
            "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]"
        ],
        "pseudo": "# Create an empty dictionary to store the frequency count of each item\n# Iterate through each item in the given list\n    # If the item is already in the dictionary, increment its count by 1\n    # If the item is not in the dictionary, add it with count 1\n# Find the item with the maximum frequency by finding the key with the maximum value in the dictionary\n# Return the item with the maximum frequency",
        "test": [
            "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2",
            "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8",
            "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20"
        ],
        "draft_plan": [
            "# Define a method to find the item with maximum frequency in a list.\n# Create a hash to store the frequency count of each item.\n# Iterate over the input list using 'each' iterator.\n    # Check if the current item exists as a key in the hash.\n        # If true, increment the count of the item by 1.\n        # If false, initialize the count of the item to 1.\n# Find the maximum value in the hash and store it in a variable 'max_count'.\n# Iterate over the hash using 'each' iterator.\n    # Check if the value is equal to 'max_count'.\n        # If true, return the corresponding key as the item with maximum frequency.\n# If no item is found with maximum frequency, return 'nil'."
        ],
        "final_plan": [
            "def find_item_with_max_frequency(lst)\n  frequency_count = Hash.new(0)\n\n  lst.each do |item|\n    frequency_count[item] += 1\n  end\n\n  max_count = frequency_count.values.max\n\n  frequency_count.each do |item, count|\n    return item if count == max_count\n  end\n\n  nil\nend"
        ]
    },
    {
        "id": "131",
        "prompt": "Write a function to reverse only the vowels of a given string (where y is not a vowel).",
        "solution": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string",
        "code": [
            "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string"
        ],
        "pseudo": "# Create a list of vowels (including both lowercase and uppercase)\n# Convert the input string into a list of characters\n\n# Initialize two pointers: one at the start of the string and one at the end\n# Iterate while the pointers don't overlap\n    # Check if the character at the start pointer is a vowel\n        # If it is, then check if the character at the end pointer is also a vowel\n            # If it is, swap the characters at the start and end pointers\n            # Move the start pointer to the next character\n            # Move the end pointer to the previous character\n        # If the character at the end pointer is not a vowel, move the end pointer to the previous character\n    \n# Convert the modified list of characters back into a string and return it",
        "test": [
            "assert reverse_vowels(\"Python\") == \"Python\"",
            "assert reverse_vowels(\"USA\") == \"ASU\"",
            "assert reverse_vowels(\"ab\") == \"ab\""
        ],
        "draft_plan": [
            "# Define a method to reverse the vowels of a given string.\n# Convert the string into an array of characters.\n# Initialize two pointers, one pointing to the start of the array and the other pointing to the end.\n# Iterate while the pointers do not cross each other.\n    # Move the left pointer forward until a vowel is found or the pointers cross.\n    # Move the right pointer backward until a vowel is found or the pointers cross.\n    # If the pointers have not crossed, swap the vowels at the positions pointed by the left and right pointers.\n# Convert the array back to a string and return it."
        ],
        "final_plan": [
            "def reverse_vowels(string)\n  vowels = \"aeiouAEIOU\"\n  chars = string.chars\n  left = 0\n  right = chars.length - 1\n\n  while left < right\n    while left < right && !vowels.include?(chars[left])\n      left += 1\n    end\n\n    while left < right && !vowels.include?(chars[right])\n      right -= 1\n    end\n\n    if left < right\n      chars[left], chars[right] = chars[right], chars[left]\n      left += 1\n      right -= 1\n    end\n  end\n\n  chars.join(\"\")\nend"
        ]
    },
    {
        "id": "132",
        "prompt": "Write a function to convert a tuple to a string.",
        "solution": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str",
        "code": [
            "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str"
        ],
        "pseudo": "# Initialize an empty string\n\n# Iterate through each element in the tuple\n    # Convert the element to a string and append it to the result string\n    # Add a comma after each element except for the last element\n\n# Return the result string",
        "test": [
            "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
            "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
            "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
        ],
        "draft_plan": [
            "# Define a method to convert a tuple to a string.\n# Initialize an empty string to store the converted tuple.\n# Iterate over the elements in the tuple.\n    # Convert each element to a string and append it to the converted string, separated by a comma.\n# Return the converted string."
        ],
        "final_plan": [
            "def convert_tuple_to_string(tuple)\n  converted_string = \"\"\n\n  tuple.each do |element|\n    converted_string += element.to_s + \",\"\n  end\n\n  converted_string.chomp(\",\") # Remove the trailing comma\n\n  converted_string\nend"
        ]
    },
    {
        "id": "133",
        "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
        "solution": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)",
        "code": [
            "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)"
        ],
        "pseudo": "# Initialize the sum of negative numbers to 0\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If it is negative, add it to the sum\n\n# Return the sum of negative numbers",
        "test": [
            "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
            "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
            "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
        ],
        "draft_plan": [
            "# Define a method to calculate the sum of the negative numbers in a list.\n# Initialize a variable to store the sum of negative numbers.\n# Iterate over each number in the input list using 'each' iterator.\n    # Check if the current number is negative.\n        # If true, add the current number to the sum.\n# Return the sum of the negative numbers."
        ],
        "final_plan": [
            "def calculate_negative_sum(numbers)\n  negative_sum = 0\n\n  numbers.each do |num|\n    negative_sum += num if num < 0\n  end\n\n  negative_sum\nend"
        ]
    },
    {
        "id": "135",
        "prompt": "Write a function to find the nth hexagonal number.",
        "solution": "def hexagonal_num(n): \n\treturn n*(2*n - 1) ",
        "code": [
            "def hexagonal_num(n): \n\treturn n*(2*n - 1) "
        ],
        "pseudo": "# Calculate the nth hexagonal number using the formula: n * (2 * n - 1)\n\n# Return the calculated nth hexagonal number",
        "test": [
            "assert hexagonal_num(10) == 190",
            "assert hexagonal_num(5) == 45",
            "assert hexagonal_num(7) == 91"
        ],
        "draft_plan": [
            "# Define a method to find the nth hexagonal number.\n# Calculate the hexagonal number using the formula: n * (2 * n - 1)\n# Return the calculated hexagonal number."
        ],
        "final_plan": [
            "def find_nth_hexagonal(n)\n  hexagonal = n * (2 * n - 1)\n  hexagonal\nend"
        ]
    },
    {
        "id": "137",
        "prompt": "Write a function to find the ratio of zeroes to non-zeroes in an array of integers.",
        "solution": "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)",
        "code": [
            "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)"
        ],
        "pseudo": "# Initialize zero_count to 0\n# Initialize non_zero_count to 0\n\n# Iterate through each element in the array\n    # Check if the current element is zero\n        # If it is zero, increment zero_count\n        # If it is not zero, increment non_zero_count\n\n# Calculate the ratio of zeroes to non-zeroes\n# Return the ratio",
        "test": [
            "assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)",
            "assert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)",
            "assert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)"
        ],
        "draft_plan": [
            "# Define a method to find the ratio of zeroes to non-zeroes in an array.\n# Initialize counters for the number of zeroes and non-zeroes to 0.\n# Iterate over each element in the input array using 'each' iterator.\n    # Check if the current element is zero.\n        # If true, increment the zero counter.\n        # If false, increment the non-zero counter.\n# Calculate the ratio of zeroes to non-zeroes by dividing the zero counter by the non-zero counter.\n# Return the ratio."
        ],
        "final_plan": [
            "def find_zeroes_to_non_zeroes_ratio(arr)\n  zero_count = 0\n  non_zero_count = 0\n\n  arr.each do |num|\n    if num == 0\n      zero_count += 1\n    else\n      non_zero_count += 1\n    end\n  end\n\n  ratio = zero_count.to_f / non_zero_count.to_f\n\n  ratio\nend"
        ]
    },
    {
        "id": "138",
        "prompt": "Write a function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "solution": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True",
        "code": [
            "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True"
        ],
        "pseudo": "# Initialize a variable 'n' with the given number\n\n# Iterate while 'n' is greater than 0\n    # Check if 'n' is divisible by 2\n        # If 'n' is divisible by 2, divide 'n' by 2\n        # Otherwise, subtract the largest power of 2 less than 'n' from 'n'\n\n# If 'n' becomes 0, return True\n# Otherwise, return False",
        "test": [
            "assert is_Sum_Of_Powers_Of_Two(10) == True",
            "assert is_Sum_Of_Powers_Of_Two(7) == False",
            "assert is_Sum_Of_Powers_Of_Two(14) == True"
        ],
        "draft_plan": [
            "# Define a method to check if a number can be represented as a sum of non-zero powers of 2.\n# Iterate through each power of 2 starting from 1.\n    # Subtract the current power of 2 from the given number.\n    # If the number becomes 0, return true.\n    # If the number becomes negative, break the loop as it cannot be represented as a sum of non-zero powers of 2.\n# If none of the powers of 2 result in a sum equal to the given number, return false."
        ],
        "final_plan": [
            "def check_power_of_2(number)\n  power = 1\n\n  loop do\n    number -= power\n    return true if number == 0\n    break if number < 0\n    power *= 2\n  end\n\n  false\nend"
        ]
    },
    {
        "id": "139",
        "prompt": "Write a function to find the circumference of a circle.",
        "solution": "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter",
        "code": [
            "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter"
        ],
        "pseudo": "# Define a function that takes the radius of the circle as a parameter\n    # Calculate the circumference of the circle using the formula: circumference = 2 * pi * radius\n    # Return the calculated circumference\n\n# Call the function with the desired radius to find the circumference of the circle",
        "test": [
            "assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)",
            "assert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)",
            "assert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)"
        ],
        "draft_plan": [
            "# Define a method to calculate the circumference of a circle.\n# Accept the radius of the circle as an argument.\n# Calculate the circumference by multiplying the radius with 2 and pi (\u03c0).\n# Return the circumference."
        ],
        "final_plan": [
            "def find_circumference(radius)\n  circumference = 2 * Math::PI * radius\n  circumference\nend"
        ]
    },
    {
        "id": "140",
        "prompt": "Write a function to flatten the list of lists into a single set of numbers.",
        "solution": "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) ",
        "code": [
            "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) "
        ],
        "pseudo": "# Create an empty set to store the flattened numbers\n\n# Iterate through each list in the input list of lists\n    # Iterate through each number in the current list\n        # Add the number to the set\n\n# Return the flattened set of numbers",
        "test": [
            "assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])",
            "assert set(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])",
            "assert set(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12])"
        ],
        "draft_plan": [
            "# Define a method to flatten a list of lists into a single set of numbers.\n# Initialize an empty array to store the flattened numbers.\n# Iterate over the input list using 'each' iterator.\n    # Check if the current element is a list or an array.\n        # If true, recursively call the flatten_list method on the current element.\n        # Concatenate the returned array with the current flattened array.\n    # If the current element is not a list or array, add it to the flattened array.\n# Convert the flattened array to a set to remove any duplicate numbers.\n# Return the set of flattened numbers."
        ],
        "final_plan": [
            "def flatten_list(lists)\n  flattened = []\n\n  lists.each do |item|\n    if item.is_a?(Array)\n      flattened += flatten_list(item)\n    else\n      flattened << item\n    end\n  end\n\n  flattened.to_set\nend"
        ]
    },
    {
        "id": "141",
        "prompt": "Write a function to sort a list of elements.",
        "solution": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums",
        "code": [
            "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums"
        ],
        "pseudo": "# Implement a sorting algorithm such as bubble sort, insertion sort, merge sort, quick sort, etc.\n\n# Define a function to take a list of elements as input\n    # Iterate through the list to compare each element with its adjacent element(s)\n        # Swap elements if they are in the wrong order\n    # Repeat the above steps until the list is sorted\n\n# Return the sorted list",
        "test": [
            "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
            "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
            "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
        ],
        "draft_plan": [
            "# Define a method to sort a list of elements.\n# Use the built-in sort method on the input list.\n# Return the sorted list."
        ],
        "final_plan": [
            "def sort_list(lst)\n  lst.sort\nend"
        ]
    },
    {
        "id": "142",
        "prompt": "Write a function to count number items that are identical in the same position of three given lists.",
        "solution": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result",
        "code": [
            "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result"
        ],
        "pseudo": "# Initialize a counter variable to keep track of the number of identical items\n# Iterate through each index from 0 to the length of any of the given lists\n    # Check if the elements at the current index in all three lists are identical\n        # If they are, increment the counter\n\n# Return the counter variable",
        "test": [
            "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
            "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
            "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"
        ],
        "draft_plan": [
            "# Define a method to count identical items in the same position of three lists.\n# Initialize a counter for the number of identical items.\n# Iterate over the indices of the lists using 'each_index' iterator.\n    # Check if the items at the current index in all three lists are identical.\n        # If true, increment the counter by 1.\n# Return the count of identical items."
        ],
        "final_plan": [
            "def count_identical_items(list1, list2, list3)\n  count = 0\n\n  list1.each_index do |i|\n    count += 1 if list1[i] == list2[i] && list2[i] == list3[i]\n  end\n\n  count\nend"
        ]
    },
    {
        "id": "143",
        "prompt": "Write a function to find number of lists present in the given tuple.",
        "solution": "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) ",
        "code": [
            "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) "
        ],
        "pseudo": "# Initialize a variable to keep track of the count of lists\n# Iterate through each element in the tuple\n    # Check if the current element is a list\n        # If it is a list, increment the count of lists by 1\n\n# Return the count of lists",
        "test": [
            "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
            "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
            "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
        ],
        "draft_plan": [
            "# Define a method to find the number of lists in a given tuple.\n# Initialize a counter variable for the number of lists to 0.\n# Iterate over each element in the tuple.\n    # Check if the current element is a list using the 'is_a?' method.\n        # If true, increment the counter by 1.\n# Return the final value of the counter."
        ],
        "final_plan": [
            "def find_number_of_lists(tuple)\n  list_count = 0\n\n  tuple.each do |element|\n    list_count += 1 if element.is_a?(Array)\n  end\n\n  list_count\nend"
        ]
    },
    {
        "id": "145",
        "prompt": "Write a function to find the maximum difference between any two elements in a given array.",
        "solution": "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ",
        "code": [
            "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) "
        ],
        "pseudo": "# If the array is empty, return None\n# Initialize the maximum difference to zero\n\n# Iterate through each element in the array\n    # Iterate through each element after the current element\n        # Calculate the difference between the current element and the subsequent element\n        # Update the maximum difference if the calculated difference is greater than the current maximum difference\n\n# Return the maximum difference",
        "test": [
            "assert max_Abs_Diff((2,1,5,3)) == 4",
            "assert max_Abs_Diff((9,3,2,5,1)) == 8",
            "assert max_Abs_Diff((3,2,1)) == 2"
        ],
        "draft_plan": [
            "# Define a method to find the maximum difference between any two elements in an array.\n# Initialize a variable 'max_diff' to 0.\n# Iterate over the array using nested loops.\n    # For each element at index i, compare it with every element at index j > i.\n        # Calculate the difference between the two elements.\n        # If the difference is greater than 'max_diff', update 'max_diff' with the new difference.\n# Return the value of 'max_diff'."
        ],
        "final_plan": [
            "def find_max_difference(arr)\n  max_diff = 0\n  \n  (0...arr.length).each do |i|\n    (i+1...arr.length).each do |j|\n      diff = arr[j] - arr[i]\n      max_diff = diff if diff > max_diff\n    end\n  end\n  \n  max_diff\nend"
        ]
    },
    {
        "id": "160",
        "prompt": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
        "solution": "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None",
        "code": [
            "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None"
        ],
        "pseudo": "# Iterate through all possible values of x from 0 to n\n    # Calculate the value of y using the equation y = (n - ax) / b\n    # Check if y is an integer\n        # If y is an integer, return the values of x and y as a tuple\n\n# If no solution is found, return None",
        "test": [
            "assert find_solution(2, 3, 7) == (2, 1)",
            "assert find_solution(4, 2, 7) == None",
            "assert find_solution(1, 13, 17) == (4, 1)"
        ],
        "draft_plan": [
            "# Define a method to find integers x and y that satisfy ax + by = n.\n# Iterate through each possible value of x from 0 to n (inclusive).\n    # Calculate the remainder when subtracting ax from n.\n    # Check if the remainder is divisible by b.\n        # If true, calculate the value of y by dividing the remainder by b.\n        # Return the values of x and y as a tuple (x, y).\n# If no solution is found, return nil."
        ],
        "final_plan": [
            "def find_coefficients(a, b, n)\n  (0..n).each do |x|\n    remainder = n - a * x\n    if remainder % b == 0\n      y = remainder / b\n      return [x, y]\n    end\n  end\n  nil\nend"
        ]
    },
    {
        "id": "161",
        "prompt": "Write a function to remove all elements from a given list present in another list.",
        "solution": "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result",
        "code": [
            "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result"
        ],
        "pseudo": "# Initialize an empty list to store the elements not present in the other list\n\n# Iterate through each element in the given list\n    # Check if the element is not present in the other list\n        # If not present, add it to the new list\n\n# Return the new list",
        "test": [
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]",
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]",
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]"
        ],
        "draft_plan": [
            "# Define a method to remove elements from a list based on another list.\n# Iterate over each element in the second list.\n    # Use the 'delete' method to remove all occurrences of the current element from the first list.\n# Return the modified first list."
        ],
        "final_plan": [
            "def remove_elements(list1, list2)\n  list2.each do |element|\n    list1.delete(element)\n  end\n  \n  list1\nend"
        ]
    },
    {
        "id": "162",
        "prompt": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
        "solution": "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)",
        "code": [
            "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)"
        ],
        "pseudo": "# Initialize the sum to 0\n\n# Iterate from i = 0 to n // 2 (inclusive)\n    # Calculate the term (n - 2*i)\n    # Add the term to the sum\n\n# Return the sum",
        "test": [
            "assert sum_series(6) == 12",
            "assert sum_series(10) == 30",
            "assert sum_series(9) == 25"
        ],
        "draft_plan": [
            "# Define a method to calculate the sum of (n - 2*i) for i=0 to n // 2.\n# Initialize a variable 'sum' to 0.\n# Iterate from 0 to n // 2 using a for loop.\n    # Calculate the value of (n - 2*i) and add it to 'sum'.\n# Return the final value of 'sum'."
        ],
        "final_plan": [
            "def calculate_sum(n)\n  sum = 0\n\n  for i in 0..(n // 2)\n    sum += n - 2 * i\n  end\n\n  sum\nend"
        ]
    },
    {
        "id": "163",
        "prompt": "Write a function to calculate the area of a regular polygon given the length and number of its sides.",
        "solution": "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area",
        "code": [
            "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area"
        ],
        "pseudo": "# Import the math module for trigonometric functions\nimport math\n\n# Define a function to calculate the area of a regular polygon\ndef calculate_area(length, sides):\n    # Calculate the apothem (distance from center to midpoint of a side)\n    apothem = length / (2 * math.tan(math.pi / sides))\n    \n    # Calculate the area using the formula: area = (1/2) * apothem * perimeter\n    perimeter = length * sides\n    area = (1 / 2) * apothem * perimeter\n    \n    return area",
        "test": [
            "assert math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)",
            "assert math.isclose(area_polygon(10, 15), 1731.197, rel_tol=0.001)",
            "assert math.isclose(area_polygon(9, 7), 302.909, rel_tol=0.001)"
        ],
        "draft_plan": [
            "# Define a method to calculate the area of a regular polygon.\n# Take two parameters - length and sides - as inputs.\n# Calculate the apothem of the polygon using the formula: apothem = length / (2 * tan(180 / sides))\n# Calculate the area of the polygon using the formula: area = (1/2) * apothem * perimeter, where perimeter = length * sides\n# Return the calculated area."
        ],
        "final_plan": [
            "def calculate_polygon_area(length, sides)\n  apothem = length / (2 * Math.tan(Math::PI / sides))\n  perimeter = length * sides\n  area = (1/2.0) * apothem * perimeter\n\n  area\nend"
        ]
    },
    {
        "id": "164",
        "prompt": "Write a function to determine if the sum of the divisors of two integers are the same.",
        "solution": "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); ",
        "code": [
            "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); "
        ],
        "pseudo": "# Define a function to calculate the sum of divisors for a given number\n    # Initialize the sum to 0\n    # Iterate through each number from 1 to the given number\n        # Check if the current number is a divisor of the given number\n            # If it is, add it to the sum\n\n# Define a function to determine if the sum of divisors for two numbers are the same\n    # Calculate the sum of divisors for both numbers\n    # Check if the sums are equal\n        # If they are, return True\n        # Otherwise, return False",
        "test": [
            "assert are_equivalent(36, 57) == False",
            "assert are_equivalent(2, 4) == False",
            "assert are_equivalent(23, 47) == True"
        ],
        "draft_plan": [
            "# Define a method to determine if the sum of the divisors of two integers are the same.\n# Create a helper method to calculate the sum of divisors for a given number.\n    # Initialize a variable 'sum' to 0.\n    # Iterate from 1 to the square root of the given number.\n        # If the current number is a divisor, add it to 'sum' and add the quotient as well.\n    # If the given number is a perfect square, subtract the square root from 'sum' to avoid counting it twice.\n    # Return 'sum'.\n# In the main method, calculate the sum of divisors for both input integers using the helper method.\n# Return whether the sums are equal."
        ],
        "final_plan": [
            "def sum_of_divisors(n)\n  sum = 0\n\n  (1..Math.sqrt(n)).each do |i|\n    if n % i == 0\n      sum += i\n      sum += n / i unless i == n / i\n    end\n  end\n\n  sum\nend\n\ndef same_sum_of_divisors(n1, n2)\n  sum_of_divisors(n1) == sum_of_divisors(n2)\nend"
        ]
    },
    {
        "id": "165",
        "prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
        "solution": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ",
        "code": [
            "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars "
        ],
        "pseudo": "# Initialize a variable to keep track of the count of characters at the same position in the English alphabet\n# Iterate through each character in the input string\n    # Convert the character to lowercase\n    # Check if the character is an alphabet character\n        # Get the position of the character in the English alphabet by subtracting the ASCII value of 'a' or 'A'\n        # Check if the position is equal to the index of the character in the string\n            # If the condition is true, increment the count\n\n# Return the count of characters at the same position in the English alphabet",
        "test": [
            "assert count_char_position(\"xbcefg\") == 2",
            "assert count_char_position(\"ABcED\") == 3",
            "assert count_char_position(\"AbgdeF\") == 5"
        ],
        "draft_plan": [
            "# Define a method to count the number of characters that occur at the same position in the string as in the English alphabet.\n# Initialize a counter for the matching characters.\n# Convert the input string to lowercase to make the comparison case-insensitive.\n# Iterate over each character and index in the string using 'each_char.with_index' iterator.\n    # Calculate the expected position of the character in the English alphabet by subtracting the ASCII value of 'a' from the ASCII value of the character and adding 1.\n    # Check if the index plus 1 is equal to the expected position.\n        # If true, increment the counter of matching characters.\n# Return the count of matching characters."
        ],
        "final_plan": [
            "def count_matching_characters(string)\n  count = 0\n  lowercase_string = string.downcase\n\n  lowercase_string.each_char.with_index do |char, index|\n    expected_position = char.ord - 'a'.ord + 1\n    count += 1 if index + 1 == expected_position\n  end\n\n  count\nend"
        ]
    },
    {
        "id": "166",
        "prompt": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
        "solution": "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count",
        "code": [
            "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count"
        ],
        "pseudo": "# Initialize a variable to keep track of the count of pairs\n# Iterate through each element in the list\n    # Iterate through each element after the current element\n        # Check if the xor of the current pair is an even number\n            # If it is, increment the count of pairs\n\n# Return the count of pairs",
        "test": [
            "assert find_even_pair([5, 4, 7, 2, 1]) == 4",
            "assert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9",
            "assert find_even_pair([1, 2, 3]) == 1"
        ],
        "draft_plan": [
            "# Define a method to count pairs of integers that xor to an even number.\n# Initialize a counter for even xor pairs.\n# Iterate over the input list of integers using 'each' iterator.\n    # Iterate over the input list again starting from the next element using 'each_with_index' iterator.\n        # Calculate the xor of the current integer with the next integers in the list.\n        # Check if the xor result is an even number.\n            # If true, increment the counter for even xor pairs.\n# Return the count of even xor pairs."
        ],
        "final_plan": [
            "def count_even_xor_pairs(lst)\n  even_xor_count = 0\n\n  lst.each_with_index do |num1, i|\n    lst[i+1..-1].each do |num2|\n      even_xor_count += 1 if (num1 ^ num2).even?\n    end\n  end\n\n  even_xor_count\nend"
        ]
    },
    {
        "id": "167",
        "prompt": "Write a function to find the smallest power of 2 greater than or equal to n.",
        "solution": "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; ",
        "code": [
            "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; "
        ],
        "pseudo": "# Initialize a variable to store the smallest power of 2\n# Check if n is already a power of 2\n    # If it is, return n\n    \n# Iterate through powers of 2 starting from 2\n    # Check if the current power of 2 is greater than or equal to n\n        # If it is, return the current power of 2",
        "test": [
            "assert next_power_of_2(0) == 1",
            "assert next_power_of_2(5) == 8",
            "assert next_power_of_2(17) == 32"
        ],
        "draft_plan": [
            "# Define a method to find the smallest power of 2 greater than or equal to n.\n# Initialize a variable 'power' to 1.\n# Increment 'power' by 1 until it is greater than or equal to n.\n    # Multiply 'power' by 2 in each iteration.\n# Return the final value of 'power'."
        ],
        "final_plan": [
            "def find_smallest_power(n)\n  power = 1\n  power *= 2 while power < n\n  power\nend"
        ]
    },
    {
        "id": "168",
        "prompt": "Write a function to count the number of occurrences of a number in a given list.",
        "solution": "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count ",
        "code": [
            "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count "
        ],
        "pseudo": "# Initialize a count variable to 0\n\n# Iterate through each element in the list\n    # Check if the current element is equal to the given number\n        # If it is, increment the count variable\n\n# Return the count variable",
        "test": [
            "assert frequency([1,2,3], 4) == 0",
            "assert frequency([1,2,2,3,3,3,4], 3) == 3",
            "assert frequency([0,1,2,3,1,2], 1) == 2"
        ],
        "draft_plan": [
            "# Define a method to count the number of occurrences of a number in a list.\n# Initialize a counter variable to 0.\n# Iterate over each element in the list using 'each' iterator.\n    # Check if the current element is equal to the target number.\n        # If true, increment the counter by 1.\n# Return the counter variable, which represents the number of occurrences of the target number."
        ],
        "final_plan": [
            "def count_occurrences(lst, target)\n  count = 0\n\n  lst.each do |num|\n    count += 1 if num == target\n  end\n\n  count\nend"
        ]
    },
    {
        "id": "170",
        "prompt": "Write a function to find the sum of numbers in a list within a range specified by two indices.",
        "solution": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   ",
        "code": [
            "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   "
        ],
        "pseudo": "# Initialize a variable to store the sum\n\n# Iterate through each number in the list within the given range\n    # Add the current number to the sum\n\n# Return the sum",
        "test": [
            "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29",
            "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16",
            "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38"
        ],
        "draft_plan": [
            "# Define a method to find the sum of numbers in a list within a specified range.\n# Take three parameters: the list of numbers, the starting index, and the ending index.\n# Initialize a variable 'sum' to 0.\n# Iterate over the list of numbers using a range from the starting index to the ending index.\n    # Add each number in the range to the 'sum' variable.\n# Return the 'sum' variable, which will be the sum of the numbers within the specified range."
        ],
        "final_plan": [
            "def sum_within_range(lst, start_index, end_index)\n  sum = 0\n\n  (start_index..end_index).each do |index|\n    sum += lst[index]\n  end\n\n  sum\nend"
        ]
    },
    {
        "id": "171",
        "prompt": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
        "solution": "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter",
        "code": [
            "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter"
        ],
        "pseudo": "# Calculate the perimeter of a regular pentagon using the formula:\n    # perimeter = 5 * side_length\n\n# Return the calculated perimeter",
        "test": [
            "assert perimeter_pentagon(5) == 25",
            "assert perimeter_pentagon(10) == 50",
            "assert perimeter_pentagon(15) == 75"
        ],
        "draft_plan": [
            "# Define a method to calculate the perimeter of a regular pentagon.\n# The perimeter of a regular pentagon is calculated by multiplying the length of one side by 5.\n# The length of one side is given as input to the method.\n# Multiply the length of one side by 5 and return the result as the perimeter of the pentagon."
        ],
        "final_plan": [
            "def calculate_pentagon_perimeter(side_length)\n  perimeter = side_length * 5\n  return perimeter\nend"
        ]
    },
    {
        "id": "172",
        "prompt": "Write a function to count the number of occurence of the string 'std' in a given string.",
        "solution": "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count",
        "code": [
            "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count"
        ],
        "pseudo": "# Initialize a count variable to 0\n\n# Iterate through each character and its index in the input string\n    # Check if the current character and the next two characters form the string 'std'\n        # If the condition is satisfied, increment the count variable\n\n# Return the count variable",
        "test": [
            "assert count_occurance(\"letstdlenstdporstd\") == 3",
            "assert count_occurance(\"truststdsolensporsd\") == 1",
            "assert count_occurance(\"makestdsostdworthit\") == 2",
            "assert count_occurance(\"stds\") == 1",
            "assert count_occurance(\"\") == 0"
        ],
        "draft_plan": [
            "# Define a method to count the number of occurrences of the string 'std' in a given string.\n# Initialize a counter variable to keep track of the occurrences.\n# Iterate through the characters in the input string.\n    # Check if the current character and the next two characters form the string 'std'.\n        # If true, increment the counter variable.\n# Return the counter variable, which represents the number of occurrences of 'std' in the string."
        ],
        "final_plan": [
            "def count_occurrences(string)\n  count = 0\n\n  (0...string.length - 2).each do |i|\n    if string[i..i+2] == 'std'\n      count += 1\n    end\n  end\n\n  count\nend"
        ]
    },
    {
        "id": "222",
        "prompt": "Write a function to check if all the elements in tuple have same data type or not.",
        "solution": "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) ",
        "code": [
            "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) "
        ],
        "pseudo": "# Get the data type of the first element in the tuple\n# Iterate through each element in the tuple starting from the second element\n    # Check if the data type of the current element matches the data type of the first element\n        # If the data types don't match, return False\n\n# If all elements have the same data type, return True\n# Otherwise, return False",
        "test": [
            "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
            "assert check_type((1, 2, \"4\") ) == False",
            "assert check_type((3, 2, 1, 4, 5) ) == True"
        ],
        "draft_plan": [
            "# Define a method to check if all elements in a tuple have the same data type.\n# Get the data type of the first element in the tuple.\n# Iterate over the remaining elements in the tuple using 'each' iterator.\n    # Compare the data type of each element with the data type of the first element.\n    # If any data type does not match, return false.\n# If all data types match, return true."
        ],
        "final_plan": [
            "def same_data_type?(tuple)\n  first_data_type = tuple[0].class\n\n  tuple.each do |element|\n    return false if element.class != first_data_type\n  end\n\n  true\nend"
        ]
    },
    {
        "id": "223",
        "prompt": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
        "solution": "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1",
        "code": [
            "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1"
        ],
        "pseudo": "# Find the index of the middle element in the array\n# If the middle element is equal to the given element and its index plus n/2 is less than or equal to the length of the array\n    # Check if the element at index (middle index + n/2) is also equal to the given element\n        # If both conditions are true, return True\n# Otherwise, return False",
        "test": [
            "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
            "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
            "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
            "assert is_majority([1, 1, 2, 2], 5, 1) == False"
        ],
        "draft_plan": [
            "# Define a method to check if an element is the majority element in a sorted array.\n# Calculate the threshold for the majority element count: n/2\n# Initialize a counter variable to keep track of the number of occurrences of the element.\n# Iterate through the sorted array using 'each' iterator.\n    # If the current element is equal to the given element, increment the counter.\n    # If the counter is greater than the threshold, return true.\n# If the counter is greater than the threshold, return true.\n# If no majority element is found, return false."
        ],
        "final_plan": [
            "def is_majority_element(sorted_array, n, element)\n  threshold = n / 2\n  count = 0\n\n  sorted_array.each do |num|\n    if num == element\n      count += 1\n      return true if count > threshold\n    end\n  end\n\n  false\nend"
        ]
    },
    {
        "id": "224",
        "prompt": "Write a function to count the number of set bits (binary digits with value 1) in a given number.",
        "solution": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ",
        "code": [
            "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count "
        ],
        "pseudo": "# Initialize a counter variable to 0\n\n# Iterate through each bit in the binary representation of the number\n    # Check if the current bit is set (equal to 1)\n        # If yes, increment the counter variable\n\n# Return the counter variable, which represents the number of set bits",
        "test": [
            "assert count_Set_Bits(2) == 1",
            "assert count_Set_Bits(4) == 1",
            "assert count_Set_Bits(6) == 2"
        ],
        "draft_plan": [
            "# Convert the given number to binary representation using the to_s(2) method\n# Initialize a counter variable for the number of set bits to 0\n# Iterate through each character in the binary representation\n    # Check if the character is '1'\n        # If true, increment the counter variable\n# Return the counter variable as the result"
        ],
        "final_plan": [
            "def count_set_bits(number)\n  binary_representation = number.to_s(2)\n  set_bits = 0\n\n  binary_representation.each_char do |char|\n    set_bits += 1 if char == '1'\n  end\n\n  set_bits\nend"
        ]
    },
    {
        "id": "226",
        "prompt": "Write a function to remove the characters which have odd index values of a given string.",
        "solution": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result",
        "code": [
            "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result"
        ],
        "pseudo": "# Initialize an empty string to store the result\n\n# Iterate through each character and its index in the input string\n    # Check if the index of the current character is even\n        # If it is even, append the character to the result string\n\n# Return the result string",
        "test": [
            "assert odd_values_string('abcdef') == 'ace'",
            "assert odd_values_string('python') == 'pto'",
            "assert odd_values_string('data') == 'dt'",
            "assert odd_values_string('lambs') == 'lms'"
        ],
        "draft_plan": [
            "# Define a method to remove characters with odd index values from a given string.\n# Initialize an empty string to store the result.\n# Iterate over each character in the input string with index.\n    # Check if the index is even (i.e., divisible by 2).\n        # If true, append the character to the result string.\n# Return the result string."
        ],
        "final_plan": [
            "def remove_odd_index_chars(string)\n  result = \"\"\n\n  string.each_char.with_index do |char, index|\n    result << char if index.even?\n  end\n\n  result\nend"
        ]
    },
    {
        "id": "227",
        "prompt": "Write a function to find minimum of three numbers.",
        "solution": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ",
        "code": [
            "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest "
        ],
        "pseudo": "# Compare the first two numbers and assign the minimum to a variable min_num\n\n# Compare the minimum of the first two numbers with the third number\n    # If the third number is smaller, assign it to min_num\n\n# Return min_num",
        "test": [
            "assert min_of_three(10,20,0)==0",
            "assert min_of_three(19,15,18)==15",
            "assert min_of_three(-10,-20,-30)==-30"
        ],
        "draft_plan": [
            "# Define a method to find the minimum of three numbers.\n# Initialize a variable 'min' to the first number.\n# Compare the second number to 'min' and update 'min' if it is smaller.\n# Compare the third number to 'min' and update 'min' if it is smaller.\n# Return 'min' as the minimum of the three numbers."
        ],
        "final_plan": [
            "def find_minimum_of_three_numbers(num1, num2, num3)\n  min = num1\n\n  min = num2 if num2 < min\n  min = num3 if num3 < min\n\n  min\nend"
        ]
    },
    {
        "id": "228",
        "prompt": "Write a function to check whether all the bits are unset in the given range or not.",
        "solution": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False",
        "code": [
            "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False"
        ],
        "pseudo": "# Convert the range into binary representation\n# Iterate through each bit in the binary representation\n    # Check if any bit is set (1)\n        # If any bit is set, return False\n\n# If all bits are unset (0), return True",
        "test": [
            "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
            "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
            "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
        ],
        "draft_plan": [
            "# Define a method to check if all the bits are unset in a given range.\n# Accept two parameters: 'start' and 'end' to represent the range.\n# Initialize a variable 'result' to true.\n# Iterate through each number in the range from 'start' to 'end'.\n    # Check if any of the bits are set in the current number.\n        # If true, set 'result' to false and break the loop.\n# Return the value of 'result'."
        ],
        "final_plan": [
            "def all_bits_unset(start, end)\n  result = true\n\n  (start..end).each do |num|\n    if num & (num - 1) != 0\n      result = false\n      break\n    end\n  end\n\n  result\nend"
        ]
    },
    {
        "id": "229",
        "prompt": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
        "solution": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr",
        "code": [
            "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr"
        ],
        "pseudo": "# Create two empty lists, one for negative elements and one for positive elements\n\n# Iterate through the first n elements of the array\n    # Check if the element is negative\n        # If it is, append it to the negative elements list\n    # Otherwise, append it to the positive elements list\n\n# Concatenate the negative elements list with the positive elements list\n# Return the resulting list",
        "test": [
            "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
            "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
            "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
        ],
        "draft_plan": [
            "# Define a method that takes in an array and an integer n as parameters.\n# Initialize two empty arrays, one for negative elements and one for positive elements.\n# Iterate through the first n elements of the input array.\n    # If the current element is negative, append it to the negative array.\n    # If the current element is positive, append it to the positive array.\n# Return the concatenation of the negative array and the positive array."
        ],
        "final_plan": [
            "def rearrange_array(arr, n)\n  negative = []\n  positive = []\n\n  arr[0...n].each do |num|\n    if num < 0\n      negative << num\n    else\n      positive << num\n    end\n  end\n\n  negative + positive\nend"
        ]
    },
    {
        "id": "230",
        "prompt": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
        "solution": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2",
        "code": [
            "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2"
        ],
        "pseudo": "# Define a function that takes in a string and a character as arguments\n    # Convert the string into a list of characters\n    # Iterate through each character in the list\n        # Check if the character is a blank space\n            # If it is, replace it with the given character\n    # Join the list of characters back into a string\n    # Return the modified string\n\n# Example usage:\n# string = \"Hello World\"\n# character = \"-\"\n# modified_string = replace_spaces(string, character)\n# print(modified_string) --> \"Hello-World\"",
        "test": [
            "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
            "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
            "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
        ],
        "draft_plan": [
            "# Define a method that takes in a string and a character as input.\n# Use the gsub method to replace all occurrences of blank spaces in the string with the provided character.\n# Return the modified string."
        ],
        "final_plan": [
            "def replace_blank_spaces(string, character)\n  string.gsub(' ', character)\nend"
        ]
    },
    {
        "id": "232",
        "prompt": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.",
        "solution": "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest",
        "code": [
            "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest"
        ],
        "pseudo": "# Sort the list in descending order\n# Return the first n items from the sorted list",
        "test": [
            "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])",
            "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])",
            "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])"
        ],
        "draft_plan": [
            "# Define a method that takes in a list and an integer n as parameters\n# Sort the list in descending order\n# Slice the sorted list to get the first n elements\n# Return the sliced list as the result"
        ],
        "final_plan": [
            "def n_largest_items(lst, n)\n  sorted_list = lst.sort.reverse\n  largest_items = sorted_list[0, n]\n  largest_items\nend"
        ]
    },
    {
        "id": "233",
        "prompt": "Write a function to find the lateral surface area of a cylinder.",
        "solution": "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface",
        "code": [
            "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface"
        ],
        "pseudo": "# Define a function to calculate the lateral surface area of a cylinder\n    # Accept the radius and height of the cylinder as arguments\n\n    # Calculate the lateral surface area using the formula: 2 * \u03c0 * radius * height\n\n    # Return the calculated lateral surface area\n\n# Call the function with the desired radius and height values and print the result",
        "test": [
            "assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)",
            "assert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)",
            "assert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)"
        ],
        "draft_plan": [
            "# Define a method to calculate the lateral surface area of a cylinder.\n# Accept the radius and height of the cylinder as input parameters.\n# Calculate the lateral surface area using the formula: 2 * \u03c0 * radius * height\n# Return the calculated lateral surface area."
        ],
        "final_plan": [
            "def lateral_surface_area_cylinder(radius, height)\n  2 * Math::PI * radius * height\nend"
        ]
    },
    {
        "id": "234",
        "prompt": "Write a function to find the volume of a cube given its side length.",
        "solution": "def volume_cube(l):\n  volume = l * l * l\n  return volume",
        "code": [
            "def volume_cube(l):\n  volume = l * l * l\n  return volume"
        ],
        "pseudo": "# Define a function to calculate the volume of a cube\n    # Accept a parameter for the side length of the cube\n    # Calculate the volume using the formula V = side_length^3\n    # Return the calculated volume",
        "test": [
            "assert volume_cube(3)==27",
            "assert volume_cube(2)==8",
            "assert volume_cube(5)==125"
        ],
        "draft_plan": [
            "# Define a method to calculate the volume of a cube.\n# Accept a single parameter representing the side length of the cube.\n# Calculate the volume by cubing the side length.\n# Return the calculated volume."
        ],
        "final_plan": [
            "def calculate_cube_volume(side_length)\n  volume = side_length ** 3\n  volume\nend"
        ]
    },
    {
        "id": "235",
        "prompt": "Write a function to set all even bits of a given number.",
        "solution": "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) ",
        "code": [
            "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) "
        ],
        "pseudo": "# Create a mask with all even bits set to 1 and odd bits set to 0\n# Perform bitwise OR operation between the given number and the mask\n# Return the updated number",
        "test": [
            "assert even_bit_set_number(10) == 10",
            "assert even_bit_set_number(20) == 30",
            "assert even_bit_set_number(30) == 30"
        ],
        "draft_plan": [
            "# Define a method to set all even bits of a given number.\n# Convert the given number to binary representation using 'to_s(2)' method.\n# Initialize an empty string 'result' to store the modified binary representation.\n# Iterate over each character (bit) in the binary representation.\n    # Check if the index of the current bit is even.\n        # If true, set the bit to '1' and append it to the 'result' string.\n        # If false, keep the bit as it is and append it to the 'result' string.\n# Convert the 'result' string back to an integer using 'to_i(2)' method and return it."
        ],
        "final_plan": [
            "def set_even_bits(num)\n  binary = num.to_s(2)\n  result = \"\"\n\n  binary.chars.each_with_index do |bit, index|\n    if index.even?\n      result += '1'\n    else\n      result += bit\n    end\n  end\n\n  result.to_i(2)\nend"
        ]
    },
    {
        "id": "237",
        "prompt": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.",
        "solution": "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) ",
        "code": [
            "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) "
        ],
        "pseudo": "# Initialize an empty dictionary\n\n# Iterate through each tuple in the list\n    # Check if the current tuple is already a key in the dictionary\n        # If it is, increment the count by 1\n        # If it is not, add the tuple as a key with a count of 1\n\n# Return the dictionary",
        "test": [
            "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
            "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
            "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
        ],
        "draft_plan": [
            "# Define a method that takes in a list of tuples as an argument.\n# Create an empty hash to store the unique tuples and their occurrence counts.\n# Iterate over each tuple in the input list using 'each' iterator.\n    # Check if the tuple exists as a key in the hash.\n        # If true, increment the occurrence count by 1.\n        # If false, add the tuple as a key in the hash with an initial occurrence count of 1.\n# Return the hash mapping each unique tuple to its occurrence count."
        ],
        "final_plan": [
            "def count_tuples(lst)\n  tuple_counts = {}\n\n  lst.each do |tuple|\n    if tuple_counts.has_key?(tuple)\n      tuple_counts[tuple] += 1\n    else\n      tuple_counts[tuple] = 1\n    end\n  end\n\n  tuple_counts\nend"
        ]
    },
    {
        "id": "238",
        "prompt": "Write a function to count the number of non-empty substrings of a given string.",
        "solution": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ",
        "code": [
            "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); "
        ],
        "pseudo": "# Initialize a counter variable to 0\n\n# Iterate through each character and its index in the input string\n    # Iterate through each substring starting from the current character\n        # Increment the counter variable by 1 for each non-empty substring\n\n# Return the counter variable",
        "test": [
            "assert number_of_substrings(\"abc\") == 6",
            "assert number_of_substrings(\"abcd\") == 10",
            "assert number_of_substrings(\"abcde\") == 15"
        ],
        "draft_plan": [
            "# Define a method to count the number of non-empty substrings of a given string.\n# Initialize a counter for the number of substrings.\n# Iterate over the input string using nested loops.\n    # Start the inner loop from the current index of the outer loop and iterate until the end of the string.\n        # Extract the substring from the current index of the outer loop to the current index of the inner loop.\n        # Check if the substring is non-empty.\n            # If true, increment the counter for the number of substrings.\n# Return the counter for the number of substrings."
        ],
        "final_plan": [
            "def count_substrings(string)\n  count = 0\n\n  (0...string.length).each do |i|\n    (i...string.length).each do |j|\n      substring = string[i..j]\n      count += 1 if !substring.empty?\n    end\n  end\n\n  count\nend"
        ]
    },
    {
        "id": "239",
        "prompt": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
        "solution": "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]",
        "code": [
            "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]"
        ],
        "pseudo": "# Initialize a variable count to keep track of the number of possible sequences\n\n# Create a recursive function to find the number of possible sequences\n    # Base case: if n is equal to 0, return 1 (as we have found a valid sequence)\n    \n    # Initialize a variable total_count to keep track of the total number of sequences\n    \n    # Iterate through all possible values for the current element in the sequence\n        # Check if the current element is greater than or equal to twice the previous element and less than or equal to m\n            # If it is, recursively call the function with n-1 and update the total_count by adding the result\n            \n    # Return the total_count\n    \n# Call the recursive function with the given values of m and n and store the result in the variable count\n\n# Return the value of count as the final result",
        "test": [
            "assert get_total_number_of_sequences(10, 4) == 4",
            "assert get_total_number_of_sequences(5, 2) == 6",
            "assert get_total_number_of_sequences(16, 3) == 84"
        ],
        "draft_plan": [
            "# Define a method to find the number of possible sequences.\n# Initialize a variable 'count' to 0.\n# Define a recursive helper method to generate sequences.\n    # Take parameters 'prev' (previous element) and 'length' (remaining length of the sequence).\n    # If the length is 0, increment the 'count' variable.\n    # Otherwise, iterate from 'prev' to 'm'.\n        # Call the helper method recursively with the current number as 'prev' and 'length - 1' as the remaining length.\n# Call the helper method with 'prev' set to 1 (the smallest possible element) and 'length' set to 'n' (length of the sequence).\n# Return the value of 'count'."
        ],
        "final_plan": [
            "def find_possible_sequences(m, n)\n  count = 0\n\n  def helper(prev, length)\n    if length == 0\n      count += 1\n    else\n      (prev..m).each do |num|\n        helper(num, length - 1)\n      end\n    end\n  end\n\n  helper(1, n)\n\n  count\nend"
        ]
    },
    {
        "id": "240",
        "prompt": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
        "solution": "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n",
        "code": [
            "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n"
        ],
        "pseudo": "# Define a function that takes two lists as input\ndef replace_last_element(list1, list2):\n    # Replace the last element of list1 with the elements of list2\n    list1[-1:] = list2\n    # Return the modified list1\n    return list1",
        "test": [
            "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
            "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
            "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
        ],
        "draft_plan": [
            "# Define a method that takes two lists as input.\n# Remove the last element from the first list.\n# Iterate over the second list and append each element to the first list.\n# Return the modified first list."
        ],
        "final_plan": [
            "def replace_last_element(list1, list2)\n  list1.pop\n  list1.concat(list2)\n  list1\nend"
        ]
    },
    {
        "id": "242",
        "prompt": "Write a function to count the total number of characters in a string.",
        "solution": "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total",
        "code": [
            "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total"
        ],
        "pseudo": "# Initialize a variable to keep track of the character count, set it to 0\n\n# Iterate through each character in the string\n    # Increment the character count by 1\n\n# Return the character count",
        "test": [
            "assert count_charac(\"python programming\")==18",
            "assert count_charac(\"language\")==8",
            "assert count_charac(\"words\")==5"
        ],
        "draft_plan": [
            "# Define a method to count the total number of characters in a string.\n# Initialize a variable 'count' to 0.\n# Iterate over each character in the string using the 'each_char' method.\n    # Increment the 'count' variable by 1.\n# Return the 'count' variable, which represents the total number of characters in the string."
        ],
        "final_plan": [
            "def count_characters(string)\n  count = 0\n\n  string.each_char do |char|\n    count += 1\n  end\n\n  count\nend"
        ]
    },
    {
        "id": "244",
        "prompt": "Write a function to find the next perfect square greater than a given number.",
        "solution": "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN ",
        "code": [
            "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN "
        ],
        "pseudo": "# Calculate the square root of the given number using math.sqrt() function\n\n# Increment the square root by 1\n\n# Calculate the next perfect square by squaring the incremented square root\n\n# Return the next perfect square",
        "test": [
            "assert next_Perfect_Square(35) == 36",
            "assert next_Perfect_Square(6) == 9",
            "assert next_Perfect_Square(9) == 16"
        ],
        "draft_plan": [
            "# Define a method to find the next perfect square greater than a given number.\n# Initialize a variable 'n' to the input number + 1.\n# Use a loop to iterate until a perfect square is found.\n    # Check if 'n' is a perfect square using the square root function and modulo operator.\n        # If 'n' is a perfect square, return 'n'.\n    # Increment 'n' by 1.\n# Return 'nil' if no perfect square is found."
        ],
        "final_plan": [
            "def find_next_perfect_square(num)\n  n = num + 1\n\n  while true\n    if Math.sqrt(n) % 1 == 0\n      return n\n    end\n    n += 1\n  end\n\n  return nil\nend"
        ]
    },
    {
        "id": "245",
        "prompt": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.",
        "solution": "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum",
        "code": [
            "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum"
        ],
        "pseudo": "# Initialize two arrays of the same length as the input array, one to store the maximum increasing subsequence sum ending at each index, and the other to store the maximum decreasing subsequence sum starting at each index\n\n# Iterate through each index in the input array\n    # Find the maximum increasing subsequence sum ending at the current index by comparing it with all previous indices\n    # Find the maximum decreasing subsequence sum starting at the current index by comparing it with all next indices\n\n# Find the maximum bitonic subsequence sum by adding the maximum increasing subsequence sum and the maximum decreasing subsequence sum for each index, and subtracting the value of the current index from the sum\n\n# Return the maximum bitonic subsequence sum",
        "test": [
            "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194",
            "assert max_sum([80, 60, 30, 40, 20, 10]) == 210",
            "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138"
        ],
        "draft_plan": [
            "# Define a method to find the maximum sum of a bitonic subsequence.\n# Initialize an array 'increasing' to store the maximum increasing subsequence sums.\n# Initialize an array 'decreasing' to store the maximum decreasing subsequence sums.\n# Initialize a variable 'max_sum' to store the maximum sum of a bitonic subsequence.\n# Iterate over the input array using 'each' iterator.\n    # Initialize variables 'current_increasing' and 'current_decreasing' to store the current maximum sums for increasing and decreasing subsequences, respectively.\n    # Iterate over the elements before the current index using 'each_with_index' iterator.\n        # If the current element is greater than the previous element, update 'current_increasing' to the maximum between 'current_increasing' and 'increasing[i] + current_element'.\n    # Iterate over the elements after the current index using 'reverse_each' iterator.\n        # If the current element is greater than the next element, update 'current_decreasing' to the maximum between 'current_decreasing' and 'decreasing[i] + current_element'.\n    # Update 'max_sum' to the maximum between 'max_sum', 'current_increasing', 'current_decreasing', and 'current_increasing + current_decreasing - current_element'.\n    # Append 'current_increasing' to 'increasing' array.\n    # Append 'current_decreasing' to 'decreasing' array.\n# Return 'max_sum'."
        ],
        "final_plan": [
            "def max_bitonic_subsequence_sum(arr)\n  increasing = []\n  decreasing = []\n  max_sum = 0\n\n  arr.each_with_index do |current_element, i|\n    current_increasing = 0\n    current_decreasing = 0\n\n    (0...i).each do |j|\n      if arr[j] < current_element\n        current_increasing = [current_increasing, increasing[j] + current_element].max\n      end\n    end\n\n    (i+1...arr.length).reverse_each do |k|\n      if arr[k] < current_element\n        current_decreasing = [current_decreasing, decreasing[k] + current_element].max\n      end\n    end\n\n    max_sum = [max_sum, current_increasing, current_decreasing, current_increasing + current_decreasing - current_element].max\n    increasing << current_increasing\n    decreasing << current_decreasing\n  end\n\n  max_sum\nend"
        ]
    },
    {
        "id": "246",
        "prompt": "Write a function for computing square roots using the babylonian method.",
        "solution": "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;",
        "code": [
            "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;"
        ],
        "pseudo": "# Define a function to compute square root using Babylonian method\n    # Check if the input number is less than 0, if so return None\n    \n    # Initialize the guess value as the input number divided by 2\n    \n    # Iterate until the difference between the guess value and the previous guess value is less than a small threshold\n        # Compute the new guess value as the average of the previous guess value and the input number divided by the previous guess value\n        \n    # Return the final guess value as the square root\n\n# Test the function by calling it with some example inputs",
        "test": [
            "assert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)",
            "assert math.isclose(babylonian_squareroot(2), 1.414213562373095, rel_tol=0.001)",
            "assert math.isclose(babylonian_squareroot(9), 3.0, rel_tol=0.001)"
        ],
        "draft_plan": [
            "# Define a method to compute square roots using the Babylonian method.\n# Take a parameter 'n' representing the number for which we want to compute the square root.\n# Initialize variables 'guess' and 'prev_guess' to 1.0.\n# Loop until the absolute difference between 'guess' and 'prev_guess' is less than a small value (e.g., 0.0001).\n    # Update 'prev_guess' to the current value of 'guess'.\n    # Update 'guess' to the average of 'guess' and 'n/guess'.\n# Return the final value of 'guess' as the square root of 'n'."
        ],
        "final_plan": [
            "def babylonian_square_root(n)\n  guess = 1.0\n  prev_guess = 1.0\n\n  while (guess - prev_guess).abs > 0.0001\n    prev_guess = guess\n    guess = (guess + n / guess) / 2.0\n  end\n\n  guess\nend"
        ]
    },
    {
        "id": "247",
        "prompt": "Write a function to find the length of the longest palindromic subsequence in the given string.",
        "solution": "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]",
        "code": [
            "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]"
        ],
        "pseudo": "# Create a 2D array of size n x n, where n is the length of the input string\n# Fill the diagonal with 1, as each character is a palindrome of length 1\n\n# Iterate through the remaining elements of the array in a bottom-up manner\n    # If the characters at the current indices match\n        # Set the value of the current cell as 2 plus the value in the cell diagonally below and to the right (i+1, j+1)\n    # Otherwise, set the value of the current cell as the maximum of the value in the cell to the left (i, j-1) and the value in the cell below (i+1, j)\n\n# Return the value in the top-right cell of the array, which represents the length of the longest palindromic subsequence",
        "test": [
            "assert lps(\"TENS FOR TENS\") == 5",
            "assert lps(\"CARDIO FOR CARDS\") == 7",
            "assert lps(\"PART OF THE JOURNEY IS PART\") == 9"
        ],
        "draft_plan": [
            "# Define a method to find the length of the longest palindromic subsequence.\n# Initialize a 2D array 'dp' of size n x n, where n is the length of the input string.\n# Iterate over the input string from right to left using 'i' as the index.\n    # Set dp[i][i] to 1, as a single character is a palindromic subsequence of length 1.\n    # Iterate over the input string from 'i+1' to the end using 'j' as the index.\n        # If the characters at indices 'i' and 'j' are equal,\n            # Set dp[i][j] to dp[i+1][j-1] + 2, as the current characters contribute to the length of the palindromic subsequence.\n        # If the characters at indices 'i' and 'j' are not equal,\n            # Set dp[i][j] to the maximum of dp[i+1][j] and dp[i][j-1], as we need to consider both possibilities of skipping one character.\n# Return dp[0][n-1], where n is the length of the input string. This will give us the length of the longest palindromic subsequence."
        ],
        "final_plan": [
            "def longest_palindromic_subsequence_length(string)\n  n = string.length\n  dp = Array.new(n) { Array.new(n, 0) }\n\n  (0...n).each do |i|\n    dp[i][i] = 1\n\n    (i - 1).downto(0).each do |j|\n      if string[i] == string[j]\n        dp[j][i] = dp[j+1][i-1] + 2\n      else\n        dp[j][i] = [dp[j+1][i], dp[j][i-1]].max\n      end\n    end\n  end\n\n  dp[0][n-1]\nend"
        ]
    },
    {
        "id": "248",
        "prompt": "Write a function that takes in an integer n and calculates the harmonic sum of n-1.",
        "solution": "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) ",
        "code": [
            "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) "
        ],
        "pseudo": "# Initialize the sum to 0\n\n# Iterate from i = 1 to n-1\n    # Add 1/i to the sum\n\n# Return the sum",
        "test": [
            "assert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)",
            "assert math.isclose(harmonic_sum(4), 2.083333333333333, rel_tol=0.001)",
            "assert math.isclose(harmonic_sum(19), 3.547739657143682, rel_tol=0.001)"
        ],
        "draft_plan": [
            "# Define a method to calculate the harmonic sum of n-1.\n# Initialize a variable 'sum' to 0.\n# Iterate from 1 to n-1 using 'each' iterator.\n    # Add the reciprocal of the current number to 'sum'.\n# Return the value of 'sum'."
        ],
        "final_plan": [
            "def harmonic_sum(n)\n  sum = 0\n\n  (1...n).each do |num|\n    sum += 1.0 / num\n  end\n\n  sum\nend"
        ]
    },
    {
        "id": "249",
        "prompt": "Write a function to find the intersection of two arrays.",
        "solution": "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result",
        "code": [
            "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result"
        ],
        "pseudo": "# Initialize an empty result array\n\n# Iterate through each element in the first array\n    # Check if the current element is present in the second array\n        # If it is present, append it to the result array\n\n# Return the result array",
        "test": [
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
        ],
        "draft_plan": [
            "# Define a method to find the intersection of two arrays.\n# Create an empty array to store the common elements.\n# Iterate over each element in the first array.\n    # Check if the element is present in the second array.\n        # If true, add the element to the common elements array.\n# Return the common elements array."
        ],
        "final_plan": [
            "def find_intersection(arr1, arr2)\n  common_elements = []\n\n  arr1.each do |element|\n    common_elements << element if arr2.include?(element)\n  end\n\n  common_elements\nend"
        ]
    },
    {
        "id": "250",
        "prompt": "Write a function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
        "solution": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ",
        "code": [
            "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count "
        ],
        "pseudo": "# Initialize a counter variable to 0\n\n# Iterate through each element in the tuple\n    # Check if the current element is equal to the target element\n        # If it is, increment the counter by 1\n\n# Return the value of the counter variable",
        "test": [
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
        ],
        "draft_plan": [
            "# Define a method that takes a tuple and an element as parameters\n# Initialize a variable 'count' to 0 to keep track of the occurrences\n# Iterate through each element in the tuple\n    # If the current element is equal to the input element, increment 'count' by 1\n# Return the value of 'count' after the iteration is complete"
        ],
        "final_plan": [
            "def count_occurrences(tuple, element)\n  count = 0\n\n  tuple.each do |item|\n    count += 1 if item == element\n  end\n\n  count\nend"
        ]
    },
    {
        "id": "251",
        "prompt": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.",
        "solution": "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list",
        "code": [
            "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list"
        ],
        "pseudo": "# Initialize an empty list to store the modified elements\n# Iterate through each element in the original list\n    # Add the given element to the modified list\n    # Add the current element from the original list to the modified list\n\n# Return the modified list",
        "test": [
            "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']",
            "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']",
            "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']"
        ],
        "draft_plan": [
            "# Define a method that takes in a list and an element as input.\n# Initialize an empty list to store the result.\n# Iterate through each element in the input list.\n    # Append the element to the result list.\n    # Append the current element from the input list to the result list.\n# Return the result list."
        ],
        "final_plan": [
            "def insert_before_each(list, element)\n  result = []\n\n  list.each do |item|\n    result << element\n    result << item\n  end\n\n  result\nend"
        ]
    },
    {
        "id": "252",
        "prompt": "Write a function to convert complex numbers to polar coordinates.",
        "solution": "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) ",
        "code": [
            "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) "
        ],
        "pseudo": "# Import the cmath module to work with complex numbers\n\n# Define a function to convert complex numbers to polar coordinates\n    # Use the cmath.polar() method to convert the complex number to polar coordinates\n\n# Call the function with the complex number as the input",
        "test": [
            "assert convert(1) == (1.0, 0.0)",
            "assert convert(4) == (4.0,0.0)",
            "assert convert(5) == (5.0,0.0)"
        ],
        "draft_plan": [
            "# Define a method to convert complex numbers to polar coordinates.\n# Calculate the magnitude of the complex number using the formula sqrt(real^2 + imaginary^2).\n# Calculate the angle of the complex number using the formula atan2(imaginary, real).\n# Convert the angle from radians to degrees.\n# Return the magnitude and angle as a tuple or array."
        ],
        "final_plan": [
            "def complex_to_polar(complex_num)\n  magnitude = Math.sqrt(complex_num.real**2 + complex_num.imaginary**2)\n  angle = Math.atan2(complex_num.imaginary, complex_num.real) * 180 / Math::PI\n\n  [magnitude, angle]\nend"
        ]
    },
    {
        "id": "253",
        "prompt": "Write a function that returns the number of integer elements in a given list.",
        "solution": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr",
        "code": [
            "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr"
        ],
        "pseudo": "# Initialize a counter variable to 0\n\n# Iterate through each element in the given list\n    # Check if the current element is an integer\n        # If it is an integer, increment the counter variable\n\n# Return the counter variable as the number of integer elements in the list",
        "test": [
            "assert count_integer([1,2,'abc',1.2]) == 2",
            "assert count_integer([1,2,3]) == 3",
            "assert count_integer([1,1.2,4,5.1]) == 2"
        ],
        "draft_plan": [
            "# Define a method to count the number of integer elements in a given list.\n# Initialize a counter variable to 0.\n# Iterate over each element in the input list.\n    # Check if the current element is an integer using the 'is_a?' method.\n        # If true, increment the counter variable by 1.\n# Return the value of the counter variable as the count of integer elements in the list."
        ],
        "final_plan": [
            "def count_integer_elements(lst)\n  count = 0\n\n  lst.each do |element|\n    count += 1 if element.is_a?(Integer)\n  end\n\n  count\nend"
        ]
    },
    {
        "id": "255",
        "prompt": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.",
        "solution": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n",
        "code": [
            "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n"
        ],
        "pseudo": "import itertools\n\ndef generate_combinations(lst, n):\n    # Use itertools.combinations_with_replacement to generate all combinations of length n\n    combinations = list(itertools.combinations_with_replacement(lst, n))\n    \n    # Convert the combinations to a list of tuples\n    result = [tuple(comb) for comb in combinations]\n    \n    return result",
        "test": [
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
        ],
        "draft_plan": [
            "# Define a method that takes a list and a length as parameters\n# Create an empty list to store the combinations\n# Define a recursive helper function that takes the current combination, the remaining length, and the current index as parameters\n    # Base case: if the remaining length is 0, append the current combination to the list of combinations and return\n    # Recursive case:\n        # Iterate over the elements in the list, starting from the current index\n            # Call the helper function recursively with the current element added to the current combination, the remaining length decremented by 1, and the current index\n# Call the helper function initially with an empty combination, the given length, and index 0\n# Return the list of combinations"
        ],
        "final_plan": [
            "def generate_combinations(lst, n)\n  combinations = []\n\n  def helper(combination, remaining_length, current_index)\n    if remaining_length == 0\n      combinations << combination.dup\n      return\n    end\n\n    (current_index...lst.length).each do |i|\n      helper(combination + [lst[i]], remaining_length - 1, i)\n    end\n  end\n\n  helper([], n, 0)\n  combinations\nend"
        ]
    },
    {
        "id": "256",
        "prompt": "Write a function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
        "solution": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr",
        "code": [
            "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr"
        ],
        "pseudo": "# Define a function to check if a number is prime\n    # Check if the number is less than 2, return False\n    # Iterate from 2 to the square root of the number\n        # Check if the number is divisible by any number in the range\n            # If divisible, return False\n    # If the number is not divisible by any number in the range, return True\n\n# Define a function to count the number of primes less than a given number\n    # Initialize a count variable to 0\n    # Iterate from 2 to the given number\n        # Check if the current number is prime\n            # If prime, increment the count\n    # Return the count",
        "test": [
            "assert count_Primes_nums(5) == 2",
            "assert count_Primes_nums(10) == 4",
            "assert count_Primes_nums(100) == 25"
        ],
        "draft_plan": [
            "# Define a method to count prime numbers.\n# Check if the input number is less than 2, if true return 0.\n# Initialize a count variable to 0.\n# Iterate through each number from 2 to the input number - 1.\n    # Check if the current number is prime.\n        # If true, increment the count variable.\n# Return the count of prime numbers."
        ],
        "final_plan": [
            "def count_primes(n)\n  return 0 if n < 2\n\n  count = 0\n\n  (2...n).each do |num|\n    count += 1 if is_prime(num)\n  end\n\n  count\nend\n\ndef is_prime(num)\n  return false if num < 2\n\n  (2...num).each do |i|\n    return false if num % i == 0\n  end\n\n  true\nend"
        ]
    },
    {
        "id": "257",
        "prompt": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.",
        "solution": "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)",
        "code": [
            "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)"
        ],
        "pseudo": "# Define the function that takes in two numbers as input\n    # Create a tuple with the second number followed by the first number\n    # Return the tuple\n\n# Call the function with the desired numbers and store the returned tuple",
        "test": [
            "assert swap_numbers(10,20)==(20,10)",
            "assert swap_numbers(15,17)==(17,15)",
            "assert swap_numbers(100,200)==(200,100)"
        ],
        "draft_plan": [
            "# Define a method that takes two numbers as parameters.\n# Create a tuple with the second number followed by the first number.\n# Return the tuple."
        ],
        "final_plan": [
            "def swap_numbers(a, b)\n  [b, a]\nend"
        ]
    },
    {
        "id": "259",
        "prompt": "Write a function to maximize the given two tuples.",
        "solution": "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "code": [
            "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) "
        ],
        "pseudo": "# Initialize a new tuple to store the maximum values\n\n# Iterate through each element in the tuples\n    # Compare the corresponding elements of both tuples\n    # Add the maximum value to the new tuple\n\n# Return the new tuple containing the maximum values",
        "test": [
            "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
            "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
            "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
        ],
        "draft_plan": [
            "# Define a method to maximize the given two tuples.\n# Create an empty array to store the maximized tuple.\n# Iterate over the indices of the tuples using 'each_index' iterator.\n    # Compare the elements at the current index in both tuples.\n    # Select the maximum element and append it to the maximized tuple array.\n# Return the maximized tuple."
        ],
        "final_plan": [
            "def maximize_tuples(tuple1, tuple2)\n  maximized_tuple = []\n  \n  tuple1.each_index do |i|\n    maximized_tuple << [tuple1[i], tuple2[i]].max\n  end\n  \n  maximized_tuple\nend"
        ]
    },
    {
        "id": "260",
        "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "solution": "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)",
        "code": [
            "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)"
        ],
        "pseudo": "# Check if the given number n is less than or equal to 2\n    # If true, return the nth newman\u2013shanks\u2013williams prime number directly\n\n# Initialize a list to store the prime numbers\n# Add the first two newman\u2013shanks\u2013williams prime numbers (2 and 3) to the list\n\n# Start the iteration from 4\n# While the length of the list is less than n\n    # Check if the current number is prime\n        # If true, add it to the list\n\n    # Increment the current number by 1\n\n# Return the nth newman\u2013shanks\u2013williams prime number from the list",
        "test": [
            "assert newman_prime(3) == 7",
            "assert newman_prime(4) == 17",
            "assert newman_prime(5) == 41"
        ],
        "draft_plan": [
            "# Define a method to find the nth Newman-Shanks-Williams prime number.\n# Initialize a variable 'count' to 0 to keep track of the number of primes found.\n# Initialize a variable 'num' to 1 to start checking prime numbers from.\n# Create a loop that continues until 'count' is equal to 'n'.\n    # Increment 'num' by 1 in each iteration.\n    # Check if 'num' is a prime number using a helper function.\n        # If 'num' is a prime number, increment 'count' by 1.\n# Return the value of 'num' as the nth Newman-Shanks-Williams prime number.\n\n# Define a helper function to check if a number is prime.\n# The function takes an integer 'num' as input.\n# Create a loop that iterates from 2 to the square root of 'num'.\n    # Check if 'num' is divisible by any number in the loop.\n        # If 'num' is divisible by any number, return false as it is not a prime.\n# If the loop completes without finding any divisors, return true as 'num' is a prime number."
        ],
        "final_plan": [
            "def find_nth_nsw_prime(n)\n  count = 0\n  num = 1\n\n  while count < n\n    num += 1\n    count += 1 if is_prime?(num)\n  end\n\n  num\nend\n\ndef is_prime?(num)\n  return false if num <= 1\n\n  (2..Math.sqrt(num)).each do |i|\n    return false if num % i == 0\n  end\n\n  true\nend"
        ]
    },
    {
        "id": "261",
        "prompt": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
        "solution": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "code": [
            "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) "
        ],
        "pseudo": "# Create an empty list to store the result of the division operation\n\n# Iterate through the elements of the tuples\n    # Perform the division operation on the corresponding elements of the tuples\n    # Append the result to the result list\n\n# Return the result list",
        "test": [
            "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
            "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
            "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
        ],
        "draft_plan": [
            "# Define a method to perform element-wise division on two tuples.\n# Create an empty array to store the result.\n# Iterate over the elements of the tuples using the 'zip' method.\n    # Divide each element of the first tuple by the corresponding element of the second tuple.\n    # Append the result to the result array.\n# Return the result array."
        ],
        "final_plan": [
            "def element_wise_division(tuple1, tuple2)\n  result = []\n\n  tuple1.zip(tuple2) do |x, y|\n    result << x / y\n  end\n\n  result\nend"
        ]
    },
    {
        "id": "262",
        "prompt": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.",
        "solution": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]",
        "code": [
            "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]"
        ],
        "pseudo": "# Check if the given list has enough elements to split into two parts\n    # If not, return the original list as the first part and an empty list as the second part\n\n# Split the list into two parts at index L\n    # First part is from index 0 to index L-1\n    # Second part is from index L to the end of the list\n\n# Return the resulting lists as a tuple",
        "test": [
            "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
            "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
            "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
        ],
        "draft_plan": [
            "# Define a method that takes in a list and an integer L as parameters.\n# Slice the input list from index 0 to L and store it in a variable 'first_part'.\n# Slice the input list from index L to the end and store it in a variable 'second_part'.\n# Return a tuple containing 'first_part' and 'second_part'."
        ],
        "final_plan": [
            "def split_list(list, L)\n  first_part = list[0...L]\n  second_part = list[L..-1]\n  [first_part, second_part]\nend"
        ]
    },
    {
        "id": "264",
        "prompt": "Write a function to calculate a dog's age in dog's years.",
        "solution": "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age",
        "code": [
            "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age"
        ],
        "pseudo": "# Define a function called calculate_dog_age that takes in one parameter: human_age\n\n# Define a variable called dog_age and set it to 0\n\n# If human_age is less than or equal to 2, set dog_age to human_age multiplied by 10.5\n# If human_age is greater than 2, calculate the dog's age in dog's years by adding:\n    # 2 (for the first two years) multiplied by 10.5\n    # The remaining years multiplied by 4\n\n# Return the value of dog_age as the result of the function",
        "test": [
            "assert dog_age(12)==61",
            "assert dog_age(15)==73",
            "assert dog_age(24)==109"
        ],
        "draft_plan": [
            "# Define a method to calculate a dog's age in dog's years.\n# Initialize a variable 'dog_years' with a value of 0.\n# Check if the input age is less than or equal to 2.\n    # If true, calculate 'dog_years' by multiplying the input age by 10.5.\n# If the input age is greater than 2, calculate 'dog_years' as follows:\n    # Subtract 2 from the input age and multiply the result by 4.\n    # Add 21 to the result to account for the 2 years of age that were already multiplied by 10.5.\n# Return the 'dog_years' value."
        ],
        "final_plan": [
            "def calculate_dog_age(age)\n  dog_years = 0\n\n  if age <= 2\n    dog_years = age * 10.5\n  else\n    dog_years = (age - 2) * 4 + 21\n  end\n\n  dog_years\nend"
        ]
    },
    {
        "id": "265",
        "prompt": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
        "solution": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]",
        "code": [
            "def list_split(S, step):\n    return [S[i::step] for i in range(step)]"
        ],
        "pseudo": "# Create an empty list to store the resulting lists\n\n# Iterate through the range from 0 to the length of the input list with step size n\n    # Append a sublist that starts from the current index and ends at the current index + n to the resulting list\n\n# Return the resulting list",
        "test": [
            "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]",
            "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]",
            "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]"
        ],
        "draft_plan": [
            "# Define a method to split a list every nth element.\n# Create an empty array to store the resulting lists.\n# Create a temporary array to store the current sublist.\n# Iterate over the input list using 'each_with_index' iterator.\n    # Check if the current index is divisible by n.\n        # If true, add the temporary array to the resulting lists array and reset the temporary array.\n    # Add the current element to the temporary array.\n# Add the remaining elements in the temporary array to the resulting lists array.\n# Return the resulting lists array."
        ],
        "final_plan": [
            "def split_list_by_n(lst, n)\n  result = []\n  sublist = []\n\n  lst.each_with_index do |element, index|\n    if (index + 1) % n == 0\n      result << sublist\n      sublist = []\n    end\n    sublist << element\n  end\n\n  result << sublist unless sublist.empty?\n  result\nend"
        ]
    },
    {
        "id": "266",
        "prompt": "Write a function to find the lateral surface area of a cube given its side length.",
        "solution": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA",
        "code": [
            "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA"
        ],
        "pseudo": "# Calculate the lateral surface area of a cube\n    # Lateral surface area of a cube is given by 4 times the square of the side length\n    # Return the calculated lateral surface area",
        "test": [
            "assert lateralsurface_cube(5)==100",
            "assert lateralsurface_cube(9)==324",
            "assert lateralsurface_cube(10)==400"
        ],
        "draft_plan": [
            "# Define a method to calculate the lateral surface area of a cube given its side length.\n# Calculate the lateral surface area by multiplying the side length by 4.\n# Return the calculated lateral surface area."
        ],
        "final_plan": [
            "def calculate_lateral_surface_area(side_length)\n  lateral_surface_area = side_length * 4\n  return lateral_surface_area\nend"
        ]
    },
    {
        "id": "267",
        "prompt": "Write a function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "solution": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
        "code": [
            "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) "
        ],
        "pseudo": "# Initialize a variable to store the sum of squares\n# Initialize a counter variable to keep track of the odd numbers\n# Initialize a variable to store the current odd number\n\n# Iterate from 1 to n (inclusive)\n    # Check if the current number is odd\n        # If it is, square the number and add it to the sum of squares\n        # Increase the counter variable by 1\n        # Check if the counter variable is equal to n\n            # If it is, break the loop\n\n# Return the sum of squares",
        "test": [
            "assert square_Sum(2) == 10",
            "assert square_Sum(3) == 35",
            "assert square_Sum(4) == 84"
        ],
        "draft_plan": [
            "# Define a method that takes an integer n as input\n# Initialize a variable 'sum' to 0\n# Iterate from 1 to n (inclusive) using a loop\n    # Check if the current number is odd\n        # If true, add the square of the current number to the 'sum' variable\n# Return the final value of 'sum'"
        ],
        "final_plan": [
            "def sum_of_squares_of_odd_numbers(n)\n  sum = 0\n  \n  (1..n).each do |num|\n    if num.odd?\n      sum += num**2\n    end\n  end\n  \n  sum\nend"
        ]
    },
    {
        "id": "268",
        "prompt": "Write a function to find the n'th star number.",
        "solution": "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) ",
        "code": [
            "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) "
        ],
        "pseudo": "# The nth star number can be calculated using the formula: n * (n + 1) / 2\n\n# Define a function to find the nth star number\n    # Calculate the star number using the formula\n    # Return the star number",
        "test": [
            "assert find_star_num(3) == 37",
            "assert find_star_num(4) == 73",
            "assert find_star_num(5) == 121"
        ],
        "draft_plan": [
            "# Define a method to find the n'th star number.\n# Calculate the star number using the formula: star_number = 6 * n * (n - 1) + 1\n# Return the star number"
        ],
        "final_plan": [
            "def find_star_number(n)\n  star_number = 6 * n * (n - 1) + 1\n  star_number\nend"
        ]
    },
    {
        "id": "269",
        "prompt": "Write a function to find the ascii value of a character.",
        "solution": "def ascii_value(k):\n  ch=k\n  return ord(ch)",
        "code": [
            "def ascii_value(k):\n  ch=k\n  return ord(ch)"
        ],
        "pseudo": "To find the ASCII value of a character in Python, you can use the `ord()` function. Here is the code logic:\n\n1. Define a function `find_ascii_value(char)` that takes a character as input.\n2. Inside the function, use the `ord()` function to find the ASCII value of the character.\n3. Return the ASCII value.\n\nHere is the code:\n\n```python\ndef find_ascii_value(char):\n    return ord(char)\n```\n\nYou can then call this function and pass the character whose ASCII value you want to find, like this:\n\n```python\nprint(find_ascii_value('A')) # Output: 65\n```\n\nNote that the `ord()` function only works with single characters. If you pass a string with multiple characters, it will raise a `TypeError`.",
        "test": [
            "assert ascii_value('A')==65",
            "assert ascii_value('R')==82",
            "assert ascii_value('S')==83"
        ],
        "draft_plan": [
            "# Define a method to find the ASCII value of a character.\n# Convert the character to its ASCII representation using the 'ord' method.\n# Return the ASCII value."
        ],
        "final_plan": [
            "def ascii_value(character)\n  character.ord\nend"
        ]
    },
    {
        "id": "270",
        "prompt": "Write a function to find the sum of even numbers at even positions of a list.",
        "solution": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
        "code": [
            "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum"
        ],
        "pseudo": "# Initialize a variable 'sum_even' to 0\n\n# Iterate through each element and its index in the input list\n    # Check if the index is even and the element is even\n        # If both conditions are satisfied, add the element to 'sum_even'\n\n# Return the value of 'sum_even'",
        "test": [
            "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30",
            "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26",
            "assert sum_even_and_even_index([5, 6, 12, 1]) == 12"
        ],
        "draft_plan": [
            "# Define a method to find the sum of even numbers at even positions.\n# Initialize a variable 'sum' to 0 to store the sum of even numbers.\n# Iterate over the input list using 'each_with_index' iterator.\n    # Check if the current element is even and its index is also even.\n        # If true, add the current element to the 'sum' variable.\n# Return the 'sum' variable, which contains the sum of even numbers at even positions."
        ],
        "final_plan": [
            "def sum_even_numbers_even_positions(lst)\n  sum = 0\n\n  lst.each_with_index do |num, index|\n    sum += num if num.even? && index.even?\n  end\n\n  sum\nend"
        ]
    },
    {
        "id": "271",
        "prompt": "Write a function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "solution": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ",
        "code": [
            "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; "
        ],
        "pseudo": "# Initialize a variable `sum` to 0\n# Initialize a counter variable `count` to 0\n\n# Iterate through numbers starting from 1 until `count` reaches `n`\n    # Check if the current number is even\n        # Increment the `count` variable\n        # Add the current number raised to the fifth power to the `sum` variable\n\n# Return the `sum` variable",
        "test": [
            "assert even_Power_Sum(2) == 1056",
            "assert even_Power_Sum(3) == 8832",
            "assert even_Power_Sum(1) == 32"
        ],
        "draft_plan": [
            "# Define a method to find the sum of the first n even natural numbers raised to the fifth power.\n# Initialize a variable 'sum' to store the sum of the numbers.\n# Initialize a counter 'count' to keep track of the number of even natural numbers found.\n# Initialize a variable 'number' to 2, as the first even natural number.\n# Use a loop to iterate until 'count' reaches n.\n    # Compute the fifth power of 'number' and add it to 'sum'.\n    # Increment 'count' by 1.\n    # Increment 'number' by 2, as the next even natural number is 2 more than the previous one.\n# Return the value of 'sum'."
        ],
        "final_plan": [
            "def sum_of_even_powers(n)\n  sum = 0\n  count = 0\n  number = 2\n\n  while count < n\n    sum += number**5\n    count += 1\n    number += 2\n  end\n\n  sum\nend"
        ]
    },
    {
        "id": "272",
        "prompt": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.",
        "solution": "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) ",
        "code": [
            "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) "
        ],
        "pseudo": "# Create an empty list to store the rear elements\n# Iterate through each tuple in the input list\n    # Append the rear element of the current tuple to the list\n\n# Return the list containing the rear elements",
        "test": [
            "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
            "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
            "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
        ],
        "draft_plan": [
            "# Define a method that takes in a list of tuples as input.\n# Initialize an empty array to store the rear elements of each tuple.\n# Iterate over each tuple in the input list using the 'each' iterator.\n    # Access the last element of the current tuple using the negative index [-1].\n    # Append the rear element to the array.\n# Return the array of rear elements."
        ],
        "final_plan": [
            "def get_rear_elements(list_of_tuples)\n  rear_elements = []\n\n  list_of_tuples.each do |tuple|\n    rear_elements << tuple[-1]\n  end\n\n  rear_elements\nend"
        ]
    },
    {
        "id": "273",
        "prompt": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
        "solution": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) ",
        "code": [
            "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) "
        ],
        "pseudo": "# Define a function that takes in two tuples as arguments\n    # Create an empty list to store the result of the subtraction\n\n    # Iterate through the indices of the tuples\n        # Subtract the element at the current index of the first tuple from the element at the current index of the second tuple\n        # Append the result to the list\n\n    # Return the resulting list",
        "test": [
            "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
            "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
            "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
        ],
        "draft_plan": [
            "# Define a method that takes two tuples as input.\n# Initialize an empty array to store the result of subtraction.\n# Iterate over the indices of the tuples using 'each_index' iterator.\n    # Subtract the element at the current index of the first tuple from the element at the same index of the second tuple.\n    # Append the result to the array.\n# Return the resulting array."
        ],
        "final_plan": [
            "def tuple_subtraction(tuple1, tuple2)\n  result = []\n\n  tuple1.each_index do |i|\n    result << tuple1[i] - tuple2[i]\n  end\n\n  result\nend"
        ]
    },
    {
        "id": "274",
        "prompt": "Write a function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
        "solution": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ",
        "code": [
            "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) "
        ],
        "pseudo": "# Import the math module\n\n# Define a function that takes in a positive integer n\n    # Initialize a variable `sum_even` to store the sum of even index binomial coefficients\n    # Iterate from 0 to n\n        # Calculate the binomial coefficient using the math module's comb function\n        # Check if the index is even\n            # If it is even, add the binomial coefficient to `sum_even`\n    # Return `sum_even`",
        "test": [
            "assert even_binomial_Coeff_Sum(4) == 8",
            "assert even_binomial_Coeff_Sum(6) == 32",
            "assert even_binomial_Coeff_Sum(2) == 2"
        ],
        "draft_plan": [
            "# Define a method to find the sum of even index binomial coefficients.\n# Initialize a variable 'sum' to 0.\n# Iterate through each index i from 0 to n.\n    # Calculate the binomial coefficient for the current index using the formula C(n, i) = n! / (i! * (n-i)!).\n    # Check if the current index is even.\n        # If true, add the binomial coefficient to the 'sum' variable.\n# Return the 'sum' variable."
        ],
        "final_plan": [
            "def sum_even_index_binomial_coefficients(n)\n  sum = 0\n\n  (0..n).each do |i|\n    coefficient = factorial(n) / (factorial(i) * factorial(n - i))\n    sum += coefficient if i.even?\n  end\n\n  sum\nend\n\ndef factorial(n)\n  return 1 if n == 0\n  (1..n).reduce(:*)\nend"
        ]
    },
    {
        "id": "276",
        "prompt": "Write a function that takes in the radius and height of a cylinder and returns the the volume.",
        "solution": "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume",
        "code": [
            "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume"
        ],
        "pseudo": "# Define a function named \"cylinder_volume\" that takes in two parameters: radius and height\n    # Calculate the volume of the cylinder using the formula: volume = \u03c0 * radius^2 * height\n    # Return the calculated volume\n\n# Test the function by calling it with sample inputs",
        "test": [
            "assert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)",
            "assert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)",
            "assert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)"
        ],
        "draft_plan": [
            "# Define a method to calculate the volume of a cylinder.\n# The method should take two parameters, radius and height.\n# Calculate the volume of the cylinder using the formula: volume = \u03c0 * radius^2 * height\n# Return the calculated volume."
        ],
        "final_plan": [
            "def calculate_cylinder_volume(radius, height)\n  volume = Math::PI * radius**2 * height\n  volume\nend"
        ]
    },
    {
        "id": "277",
        "prompt": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.",
        "solution": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result",
        "code": [
            "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result"
        ],
        "pseudo": "# Initialize an empty dictionary to store the filtered entries\n\n# Iterate through each key-value pair in the input dictionary\n    # Check if the value is greater than or equal to n\n        # If it is, add the key-value pair to the filtered dictionary\n\n# Return the filtered dictionary",
        "test": [
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
        ],
        "draft_plan": [
            "# Define a method that takes in a dictionary and an integer n as parameters.\n# Create a new empty dictionary to store the filtered entries.\n# Iterate over each key-value pair in the input dictionary using the 'each' method.\n    # Check if the value is greater than or equal to n.\n        # If true, add the key-value pair to the new dictionary.\n# Return the new filtered dictionary."
        ],
        "final_plan": [
            "def filter_dictionary(dictionary, n)\n  filtered_dictionary = {}\n\n  dictionary.each do |key, value|\n    if value >= n\n      filtered_dictionary[key] = value\n    end\n  end\n\n  filtered_dictionary\nend"
        ]
    },
    {
        "id": "278",
        "prompt": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.",
        "solution": "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) ",
        "code": [
            "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) "
        ],
        "pseudo": "# Initialize a count variable to 0\n# Iterate through each element and its index in the given tuple\n    # Check if the current element is equal to the target element in the tuple\n        # If it is, return the count\n    # If the current element is not equal to the target element, increment the count by 1\n\n# If the target element is not found in the tuple, return -1",
        "test": [
            "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
            "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
            "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
        ],
        "draft_plan": [
            "# Define a method to find the number of elements that occur before the tuple element in the given tuple.\n# Initialize a counter variable to 0.\n# Iterate over the input tuple using 'each_with_index' iterator.\n    # Check if the current element is equal to the target tuple element.\n        # If true, return the counter variable.\n        # If false, increment the counter variable by 1.\n# If the target tuple element is not found, return -1."
        ],
        "final_plan": [
            "def elements_before_tuple_element(tuple, element)\n  counter = 0\n  \n  tuple.each_with_index do |item, index|\n    return counter if item == element\n    counter += 1\n  end\n  \n  -1\nend"
        ]
    },
    {
        "id": "279",
        "prompt": "Write a function to find the nth decagonal number.",
        "solution": "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n ",
        "code": [
            "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n "
        ],
        "pseudo": "# Formula to find the nth decagonal number is: 3n^2 - 2n\n\n# Define a function named nth_decagonal_number that takes an argument n\n    # Calculate the decagonal number using the formula: 3*n*n - 2*n\n    # Return the calculated decagonal number\n\n# Call the function nth_decagonal_number with the desired value of n to find the nth decagonal number",
        "test": [
            "assert is_num_decagonal(3) == 27",
            "assert is_num_decagonal(7) == 175",
            "assert is_num_decagonal(10) == 370"
        ],
        "draft_plan": [
            "# Define a method to find the nth decagonal number.\n# Check if the input number 'n' is a positive integer.\n    # If not, return an error message or raise an exception.\n# Calculate the nth decagonal number using the formula: n(7n-5)/2\n# Return the calculated value."
        ],
        "final_plan": [
            "def find_nth_decagonal_number(n)\n  raise ArgumentError, \"n must be a positive integer\" unless n.is_a?(Integer) && n.positive?\n\n  decagonal_number = n * (7 * n - 5) / 2\n\n  decagonal_number\nend"
        ]
    },
    {
        "id": "280",
        "prompt": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
        "solution": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos",
        "code": [
            "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos"
        ],
        "pseudo": "# Initialize a variable to store the index position of the element, initialized to -1\n# Iterate through each element in the array along with its index\n    # Check if the current element is equal to the target element\n        # If they are equal, update the index variable with the current index and break out of the loop\n\n# Check if the index variable is still equal to -1\n    # If it is, set the boolean variable to False, indicating the element is not found\n    # If it is not, set the boolean variable to True, indicating the element is found\n\n# Return a tuple with the boolean variable and the index variable",
        "test": [
            "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
            "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
            "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
        ],
        "draft_plan": [
            "# Define a method that takes an array and an element as parameters.\n# Initialize a variable 'found' to false and 'index' to -1.\n# Iterate through each index and element in the array using 'each_with_index' iterator.\n    # Check if the current element is equal to the input element.\n        # If true, set 'found' to true and update 'index' with the current index.\n        # Break out of the loop.\n# Return a tuple containing 'found' and 'index'."
        ],
        "final_plan": [
            "def find_element(array, element)\n  found = false\n  index = -1\n\n  array.each_with_index do |value, idx|\n    if value == element\n      found = true\n      index = idx\n      break\n    end\n  end\n\n  [found, index]\nend"
        ]
    },
    {
        "id": "281",
        "prompt": "Write a function to check if the elements of a given list are unique or not.",
        "solution": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True",
        "code": [
            "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True"
        ],
        "pseudo": "# Convert the input list into a set\n# Compare the length of the input list with the length of the set\n    # If they are equal, return True (all elements are unique)\n    # If they are not equal, return False (there are duplicate elements)",
        "test": [
            "assert all_unique([1,2,3]) == True",
            "assert all_unique([1,2,1,2]) == False",
            "assert all_unique([1,2,3,4,5]) == True"
        ],
        "draft_plan": [
            "# Define a method to check if the elements of a given list are unique or not.\n# Convert the input list to a set to remove duplicate elements.\n# Compare the length of the original list with the length of the set.\n# If they are equal, it means all elements are unique, so return true.\n# Otherwise, return false."
        ],
        "final_plan": [
            "def are_elements_unique(lst)\n  unique_set = lst.to_set\n  unique_set.length == lst.length\nend"
        ]
    },
    {
        "id": "282",
        "prompt": "Write a function to subtract two lists element-wise.",
        "solution": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)",
        "code": [
            "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)"
        ],
        "pseudo": "# Create an empty list to store the result\n\n# Iterate through the indices of the lists\n    # Subtract the elements at the corresponding indices of the two lists\n    # Append the result to the result list\n\n# Return the result list",
        "test": [
            "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
            "assert sub_list([1,2],[3,4])==[-2,-2]",
            "assert sub_list([90,120],[50,70])==[40,50]"
        ],
        "draft_plan": [
            "# Define a method to subtract two lists element-wise.\n# Create an empty list to store the results.\n# Iterate over the indices of the input lists using the 'each_index' method.\n    # Subtract the corresponding elements from the two lists and store the result in a variable.\n    # Append the result to the results list.\n# Return the results list."
        ],
        "final_plan": [
            "def subtract_lists(list1, list2)\n  results = []\n\n  list1.each_index do |i|\n    result = list1[i] - list2[i]\n    results << result\n  end\n\n  results\nend"
        ]
    },
    {
        "id": "283",
        "prompt": "Write a function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
        "solution": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
        "code": [
            "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True"
        ],
        "pseudo": "# Convert the input integer to a string\n# Initialize a dictionary to store the frequency of each digit\n\n# Iterate through each digit in the string\n    # Increment the frequency of the digit in the dictionary\n\n# Iterate through each digit in the string\n    # Check if the frequency of the digit is greater than the digit itself\n        # If yes, return False\n\n# If all frequencies are less than or equal to their respective digits, return True",
        "test": [
            "assert validate(1234) == True",
            "assert validate(51241) == False",
            "assert validate(321) == True"
        ],
        "draft_plan": [
            "# Define a method that takes an integer as input\n# Convert the integer to a string to iterate through each digit\n# Initialize a hash to store the frequency of each digit\n# Iterate through each digit in the string\n    # If the digit is not in the hash, add it as a key with a frequency of 1\n    # If the digit is already in the hash, increment its frequency by 1\n# Iterate through the keys and values in the hash\n    # Convert the key to an integer\n    # If the value is greater than the key, return false\n# If all frequencies are less than or equal to their corresponding digits, return true"
        ],
        "final_plan": [
            "def check_digit_frequency(integer)\n  digits = integer.to_s\n  frequency = Hash.new(0)\n\n  digits.each_char do |digit|\n    frequency[digit] += 1\n  end\n\n  frequency.each do |key, value|\n    return false if value > key.to_i\n  end\n\n  true\nend"
        ]
    },
    {
        "id": "284",
        "prompt": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
        "solution": "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element",
        "code": [
            "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element"
        ],
        "pseudo": "# Iterate through each item in the list\n    # Check if the current item is equal to the given element\n        # If not, return False\n\n# If all items in the list are equal to the given element, return True",
        "test": [
            "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
            "assert check_element([1,2,3,4],7)==False",
            "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
        ],
        "draft_plan": [
            "# Define a method that takes in a list and an element as parameters.\n# Iterate over each item in the list using the 'each' iterator.\n    # Check if the current item is not equal to the given element.\n        # If true, return false.\n# If the loop completes without returning false, return true."
        ],
        "final_plan": [
            "def all_items_equal_to_element(lst, element)\n  lst.each do |item|\n    return false if item != element\n  end\n  true\nend"
        ]
    },
    {
        "id": "285",
        "prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "solution": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
        "code": [
            "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False"
        ],
        "pseudo": "# Iterate through each character in the input string\n    # Check if the current character is 'a'\n        # If it is, check the next two characters (if they exist) to see if they are 'b'\n            # If they are, return True\n    # If the current character is not 'a', continue to the next character\n\n# If no 'a' followed by two or three 'b' characters is found, return False",
        "test": [
            "assert text_match_two_three(\"ac\")==(False)",
            "assert text_match_two_three(\"dc\")==(False)",
            "assert text_match_two_three(\"abbbba\")==(True)"
        ],
        "draft_plan": [
            "# Define a method to check whether a string contains the required pattern.\n# Iterate through each index in the input string up to the second-to-last index.\n    # Check if the current character is 'a' and the next two characters are 'b'.\n    # If true, return true.\n# If the pattern is not found, return false."
        ],
        "final_plan": [
            "def contains_a_followed_by_b(string)\n  (0...string.length-2).each do |i|\n    if string[i] == 'a' && string[i+1] == 'b' && (string[i+2] == 'b' || string[i+2] == 'b')\n      return true\n    end\n  end\n  false\nend"
        ]
    },
    {
        "id": "286",
        "prompt": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.",
        "solution": "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far",
        "code": [
            "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far"
        ],
        "pseudo": "# Initialize variables to store the maximum sum and the current sum\n# Repeat the given array k times to form the modified array\n\n# Iterate through each element in the modified array\n    # Add the current element to the current sum\n    # Check if the current sum is greater than the maximum sum\n        # If so, update the maximum sum\n    # Check if the current sum is less than 0\n        # If so, reset the current sum to 0\n\n# Return the maximum sum",
        "test": [
            "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
            "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
            "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
        ],
        "draft_plan": [
            "# Define a method to find the largest sum of a contiguous array in the modified array.\n# Create a new array by repeating the given array 'k' times.\n# Initialize variables 'max_sum' and 'current_sum' to 0.\n# Iterate over the new array using 'each' iterator.\n    # Update 'current_sum' by adding the current element.\n    # If 'current_sum' is negative, reset it to 0.\n    # If 'current_sum' is greater than 'max_sum', update 'max_sum' with 'current_sum'.\n# Return 'max_sum'."
        ],
        "final_plan": [
            "def find_largest_sum(arr, k)\n  modified_array = arr * k\n  max_sum = 0\n  current_sum = 0\n\n  modified_array.each do |num|\n    current_sum += num\n    current_sum = 0 if current_sum < 0\n    max_sum = current_sum if current_sum > max_sum\n  end\n\n  max_sum\nend"
        ]
    },
    {
        "id": "287",
        "prompt": "Write a function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "solution": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
        "code": [
            "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)"
        ],
        "pseudo": "# Initialize the sum of squares variable to 0\n\n# Iterate from 1 to n\n    # Check if the current number is even\n        # Add the square of the current number to the sum of squares variable\n\n# Return the sum of squares",
        "test": [
            "assert square_Sum(2) == 20",
            "assert square_Sum(3) == 56",
            "assert square_Sum(4) == 120"
        ],
        "draft_plan": [
            "# Define a method that takes an integer n as input\n# Initialize a variable 'sum' to 0\n# Iterate from 2 to (2 * n) with a step of 2\n    # Add the square of the current even number to 'sum'\n# Return the value of 'sum'"
        ],
        "final_plan": [
            "def sum_of_squares_of_even_numbers(n)\n  sum = 0\n\n  (2..(2 * n)).step(2) do |num|\n    sum += num ** 2\n  end\n\n  sum\nend"
        ]
    },
    {
        "id": "290",
        "prompt": "Write a function to find the list of maximum length in a list of lists.",
        "solution": "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)",
        "code": [
            "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)"
        ],
        "pseudo": "# Initialize a variable to store the maximum length and an empty list to store the list with maximum length\n\n# Iterate through each list in the input list of lists\n    # Check if the length of the current list is greater than the maximum length\n        # If so, update the maximum length and the list with maximum length\n\n# Return the list with maximum length",
        "test": [
            "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
            "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
        ],
        "draft_plan": [
            "# Define a method to find the list of maximum length in a list of lists.\n# Initialize a variable 'max_length' to 0.\n# Initialize an empty array 'result' to store the list(s) of maximum length.\n# Iterate over each list in the input list of lists.\n    # Get the length of the current list.\n    # If the length is greater than 'max_length', update 'max_length' to the length of the current list and clear the 'result' array.\n    # If the length is equal to 'max_length', add the current list to the 'result' array.\n# Return the 'result' array containing the list(s) of maximum length."
        ],
        "final_plan": [
            "def find_max_length_list(list_of_lists)\n  max_length = 0\n  result = []\n\n  list_of_lists.each do |list|\n    length = list.length\n\n    if length > max_length\n      max_length = length\n      result = [list]\n    elsif length == max_length\n      result << list\n    end\n  end\n\n  result\nend"
        ]
    },
    {
        "id": "291",
        "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "solution": "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]",
        "code": [
            "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]"
        ],
        "pseudo": "# If there are no posts or no colors, return 0\n# If there is only 1 post, return k (number of colors)\n\n# Initialize two variables to keep track of the number of ways with different colors and the number of ways with the same color for the first two posts\n# Set the number of ways with different colors to k\n# Set the number of ways with the same color to k\n\n# Iterate from the third post to the nth post\n    # Calculate the number of ways with different colors for the current post\n        # Multiply the number of ways with different colors for the previous post by (k-1)\n    # Calculate the number of ways with the same color for the current post\n        # Set it equal to the number of ways with different colors for the previous post\n\n# Return the sum of the number of ways with different colors and the number of ways with the same color for the nth post",
        "test": [
            "assert count_no_of_ways(2, 4) == 16",
            "assert count_no_of_ways(3, 2) == 6",
            "assert count_no_of_ways(4, 4) == 228"
        ],
        "draft_plan": [
            "# Define a method to calculate the number of ways of painting the fence.\n# Check if the number of posts is less than or equal to 2.\n    # If true, return the number of posts as the number of ways.\n# Initialize an array 'dp' of size n+1 to store the number of ways at each post.\n# Set dp[1] and dp[2] to k, since there are k ways to paint the first and second posts.\n# Iterate over the range from 3 to n+1.\n    # Calculate the number of ways for the current post by multiplying k-1 with the sum of the previous two elements in dp.\n    # Update dp[i] with the calculated number of ways.\n# Return dp[n], which is the number of ways to paint the fence."
        ],
        "final_plan": [
            "def count_fence_ways(n, k)\n  return n if n <= 2\n\n  dp = Array.new(n+1)\n  dp[1] = k\n  dp[2] = k\n\n  (3..n).each do |i|\n    dp[i] = (k-1) * (dp[i-1] + dp[i-2])\n  end\n\n  dp[n]\nend"
        ]
    },
    {
        "id": "292",
        "prompt": "Write a function to find quotient of two numbers (rounded down to the nearest integer).",
        "solution": "def find(n,m):  \n    q = n//m \n    return (q)",
        "code": [
            "def find(n,m):  \n    q = n//m \n    return (q)"
        ],
        "pseudo": "To find the quotient of two numbers rounded down to the nearest integer, you can use the floor division operator `//` in Python.\n\nHere is the code logic:\n\n```python\ndef quotient(a, b):\n    return a // b\n```\n\nIn this code, the function `quotient` takes two parameters `a` and `b`, representing the numbers for which we want to find the quotient. The floor division `a // b` divides `a` by `b` and returns the quotient rounded down to the nearest integer.\n\nYou can call this function with your desired values to find the quotient. For example:\n\n```python\nresult = quotient(10, 3)\nprint(result)  # Output: 3\n```",
        "test": [
            "assert find(10,3) == 3",
            "assert find(4,2) == 2",
            "assert find(20,5) == 4"
        ],
        "draft_plan": [
            "# Define a function to find the quotient of two numbers (rounded down to the nearest integer).\n# Calculate the quotient by dividing the first number by the second number.\n# Use the floor division operator '//' to ensure the quotient is rounded down to the nearest integer.\n# Return the quotient."
        ],
        "final_plan": [
            "def find_quotient(num1, num2)\n  quotient = num1 / num2\n  quotient.floor\nend"
        ]
    },
    {
        "id": "293",
        "prompt": "Write a function to find the third side of a right angled triangle.",
        "solution": "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s",
        "code": [
            "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s"
        ],
        "pseudo": "# Import the math module\n\n# Define a function to find the third side of a right-angled triangle\n    # Calculate the square of the two given sides\n    # Calculate the sum of the squares of the two given sides\n    # Take the square root of the sum to find the length of the hypotenuse\n    # Return the length of the hypotenuse\n\n# Call the function with the given sides of the triangle and print the result",
        "test": [
            "assert otherside_rightangle(7,8)==10.63014581273465",
            "assert otherside_rightangle(3,4)==5",
            "assert otherside_rightangle(7,15)==16.55294535724685"
        ],
        "draft_plan": [
            "# Define a method to find the third side of a right-angled triangle.\n# Check if the input sides are valid for a right-angled triangle.\n    # If the sum of the squares of the two smaller sides is equal to the square of the largest side, the sides are valid.\n    # If not, return 'Invalid triangle'.\n# Determine the largest side among the three given sides.\n# Find the two smaller sides by iterating over the sides and comparing with the largest side.\n# Calculate the third side using the Pythagorean theorem: the square root of the sum of the squares of the two smaller sides.\n# Round the result to 2 decimal places.\n# Return the calculated third side."
        ],
        "final_plan": [
            "def find_third_side(a, b, c)\n  sides = [a, b, c].sort\n\n  if sides[0]**2 + sides[1]**2 == sides[2]**2\n    largest_side = sides[2]\n    smaller_sides = sides[0..1]\n\n    Math.sqrt(smaller_sides[0]**2 + smaller_sides[1]**2).round(2)\n  else\n    'Invalid triangle'\n  end\nend"
        ]
    },
    {
        "id": "294",
        "prompt": "Write a function to find the maximum value in a given heterogeneous list.",
        "solution": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)",
        "code": [
            "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)"
        ],
        "pseudo": "# Initialize the maximum value with the first element in the list\n\n# Iterate through each element in the list starting from the second element\n    # Compare the current element with the maximum value\n        # If the current element is greater than the maximum value, update the maximum value\n\n# Return the maximum value",
        "test": [
            "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
            "assert max_val(['Python', 15, 20, 25])==25",
            "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
        ],
        "draft_plan": [
            "# Initialize a variable 'maximum' to nil\n# Iterate through each element in the input list\n    # Check if the element is greater than the current 'maximum' or if 'maximum' is nil\n        # If true, update 'maximum' to the current element\n# Return the maximum value found"
        ],
        "final_plan": [
            "def find_maximum_value(lst)\n  maximum = nil\n\n  lst.each do |element|\n    if maximum.nil? || element > maximum\n      maximum = element\n    end\n  end\n\n  maximum\nend"
        ]
    },
    {
        "id": "295",
        "prompt": "Write a function to return the sum of all divisors of a number.",
        "solution": "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)",
        "code": [
            "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)"
        ],
        "pseudo": "# Initialize the sum of divisors to 0\n\n# Iterate from 1 to the given number\n    # Check if the current number is a divisor of the given number\n        # If it is, add it to the sum of divisors\n\n# Return the sum of divisors",
        "test": [
            "assert sum_div(8)==7",
            "assert sum_div(12)==16",
            "assert sum_div(7)==1"
        ],
        "draft_plan": [
            "# Define a method to calculate the sum of divisors for a given number.\n# Initialize a variable 'sum' to 0.\n# Iterate from 1 to the given number (inclusive) using 'each' iterator.\n    # Check if the current number is a divisor of the given number.\n        # If true, add the current number to 'sum'.\n# Return the value of 'sum'."
        ],
        "final_plan": [
            "def sum_of_divisors(number)\n  sum = 0\n\n  (1..number).each do |num|\n    sum += num if number % num == 0\n  end\n\n  sum\nend"
        ]
    },
    {
        "id": "296",
        "prompt": "Write a function to count inversions in an array.",
        "solution": "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count ",
        "code": [
            "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count "
        ],
        "pseudo": "# Initialize a variable to count the number of inversions\n# Iterate through each element in the array\n    # For each element, iterate through the remaining elements\n        # Check if the current element is greater than any of the remaining elements\n            # If so, increment the inversion count\n\n# Return the inversion count",
        "test": [
            "assert get_Inv_Count([1,20,6,4,5]) == 5",
            "assert get_Inv_Count([1,2,1]) == 1",
            "assert get_Inv_Count([1,2,5,6,1]) == 3"
        ],
        "draft_plan": [
            "# Define a method to count inversions in an array.\n# Initialize a variable 'count' to 0 to keep track of the number of inversions.\n# Implement a merge sort algorithm to sort the array and count inversions simultaneously.\n    # If the array has only one element, return it.\n    # Divide the array into two halves.\n    # Recursively call the merge sort function on each half.\n    # Merge the two sorted halves while counting the inversions.\n        # Initialize indices i, j, and k to 0 to track the positions in the two halves and the merged array.\n        # While there are elements in both halves:\n            # If the element in the left half is smaller than or equal to the element in the right half:\n                # Add the element in the left half to the merged array and increment the left index.\n            # If the element in the left half is larger than the element in the right half:\n                # Add the element in the right half to the merged array and increment the right index.\n                # Increment the 'count' variable by the number of remaining elements in the left half.\n            # Increment the merged array index.\n        # Copy any remaining elements from the left half to the merged array.\n        # Copy any remaining elements from the right half to the merged array.\n    # Return the merged and sorted array.\n# Return the 'count' variable, which represents the number of inversions."
        ],
        "final_plan": [
            "def count_inversions(arr)\n  return [arr, 0] if arr.length <= 1\n\n  mid = arr.length / 2\n  left_arr, left_count = count_inversions(arr[0...mid])\n  right_arr, right_count = count_inversions(arr[mid..])\n\n  merged_arr, merge_count = merge_and_count(left_arr, right_arr)\n\n  total_count = left_count + right_count + merge_count\n\n  [merged_arr, total_count]\nend\n\ndef merge_and_count(left_arr, right_arr)\n  merged_arr = []\n  count = 0\n  i, j = 0, 0\n\n  while i < left_arr.length && j < right_arr.length\n    if left_arr[i] <= right_arr[j]\n      merged_arr << left_arr[i]\n      i += 1\n    else\n      merged_arr << right_arr[j]\n      j += 1\n      count += left_arr.length - i\n    end\n  end\n\n  merged_arr += left_arr[i..] if i < left_arr.length\n  merged_arr += right_arr[j..] if j < right_arr.length\n\n  [merged_arr, count]\nend"
        ]
    },
    {
        "id": "297",
        "prompt": "Write a function to flatten a given nested list structure.",
        "solution": "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list ",
        "code": [
            "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list "
        ],
        "pseudo": "# Initialize an empty list to store the flattened elements\n\n# Iterate through each element in the given list\n    # If the element is a list, recursively flatten it and append each element to the flattened list\n    # If the element is not a list, append it directly to the flattened list\n\n# Return the flattened list",
        "test": [
            "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
            "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
            "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
        ],
        "draft_plan": [
            "# Define a method to flatten a given nested list structure.\n# Initialize an empty array to store the flattened elements.\n# Iterate over each element in the input list.\n    # If the element is a list, recursively call the flatten function on the element and append the flattened elements to the result array.\n    # If the element is not a list, append it directly to the result array.\n# Return the flattened array."
        ],
        "final_plan": [
            "def flatten_list(nested_list)\n  flattened = []\n\n  nested_list.each do |element|\n    if element.is_a?(Array)\n      flattened += flatten_list(element)\n    else\n      flattened << element\n    end\n  end\n\n  flattened\nend"
        ]
    },
    {
        "id": "299",
        "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.",
        "solution": "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])",
        "code": [
            "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])"
        ],
        "pseudo": "# Sort the list of tuples in descending order based on the second element\n\n# Initialize the maximum aggregate to 0\n\n# Iterate through each tuple in the sorted list\n    # Calculate the current aggregate by adding the second element of the tuple to the maximum aggregate\n    # Update the maximum aggregate if the current aggregate is greater\n\n# Return the maximum aggregate",
        "test": [
            "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
            "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
            "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
        ],
        "draft_plan": [
            "# Define a function to calculate the maximum aggregate from a list of tuples.\n# Initialize a variable 'max_aggregate' to 0.\n# Iterate over the input list of tuples using 'each' iterator.\n    # For each tuple, calculate the sum of its elements.\n    # Update 'max_aggregate' if the calculated sum is greater than 'max_aggregate'.\n# Return 'max_aggregate' as the maximum aggregate."
        ],
        "final_plan": [
            "def calculate_max_aggregate(lst)\n  max_aggregate = 0\n\n  lst.each do |tuple|\n    aggregate = tuple[0] + tuple[1]\n    max_aggregate = aggregate if aggregate > max_aggregate\n  end\n\n  max_aggregate\nend"
        ]
    },
    {
        "id": "300",
        "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
        "solution": "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res ",
        "code": [
            "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res "
        ],
        "pseudo": "# Define a recursive function count_sequences with parameters n (length of the binary sequence), \n# curr_sum (current sum of the bits), and total_sum (the target sum of both halves)\n\n    # Base case: if n is 0, check if the current sum is equal to the target sum\n        # If so, return 1 (valid sequence)\n        # Otherwise, return 0 (invalid sequence)\n    \n    # Recursive case:\n        # Initialize a variable count to 0 (to keep track of the count of valid sequences)\n        \n        # Call the count_sequences function recursively with n-1, curr_sum+1, and total_sum\n        # Add the return value to count\n        \n        # Call the count_sequences function recursively with n-1, curr_sum-1, and total_sum\n        # Add the return value to count\n        \n        # Return the total count\n    \n# Call the count_sequences function with n as the length of the binary sequence, curr_sum as 0, and total_sum as 0 to get the count of valid sequences",
        "test": [
            "assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)",
            "assert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)",
            "assert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)"
        ],
        "draft_plan": [
            "# Define a method to count binary sequences.\n# Initialize a counter for the count of valid sequences.\n# Iterate from 0 to 2^(2n) - 1.\n    # Convert the current number to its binary representation.\n    # Pad the binary representation with leading zeros to make it of length 2n.\n    # Extract the first n bits and last n bits from the binary representation.\n    # Calculate the sum of the first n bits and the sum of the last n bits.\n    # If the sums are equal, increment the count of valid sequences.\n# Return the count of valid sequences."
        ],
        "final_plan": [
            "def count_binary_sequences(n)\n  count = 0\n\n  (0...(2**(2*n))).each do |num|\n    binary = num.to_s(2).rjust(2*n, '0')\n    first_half = binary[0, n]\n    second_half = binary[n..-1]\n\n    sum_first_half = first_half.chars.map(&:to_i).sum\n    sum_second_half = second_half.chars.map(&:to_i).sum\n\n    count += 1 if sum_first_half == sum_second_half\n  end\n\n  count\nend"
        ]
    },
    {
        "id": "301",
        "prompt": "Write a function to find the depth of a dictionary.",
        "solution": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0",
        "code": [
            "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0"
        ],
        "pseudo": "# Initialize the depth to 1\n\n# Iterate through each key-value pair in the dictionary\n    # Check if the value is a dictionary\n        # If it is, recursively find the depth of the nested dictionary and increment it by 1\n\n# Return the maximum depth",
        "test": [
            "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
            "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
            "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
        ],
        "draft_plan": [
            "# Define a method to find the depth of a dictionary.\n# Create a helper method to recursively calculate the depth of each value in the dictionary.\n    # If the value is not a dictionary, return 0.\n    # If the value is a dictionary, recursively call the helper method on the value and add 1 to the result.\n# Initialize a variable 'max_depth' to 0.\n# Iterate over each key-value pair in the dictionary using 'each' iterator.\n    # Call the helper method on the value and update 'max_depth' if the calculated depth is greater than 'max_depth'.\n# Return 'max_depth'."
        ],
        "final_plan": [
            "def find_depth(dictionary)\n  def calculate_depth(value)\n    if value.is_a?(Hash)\n      max_sub_depth = 0\n      value.each do |k, v|\n        sub_depth = calculate_depth(v)\n        max_sub_depth = sub_depth if sub_depth > max_sub_depth\n      end\n      max_sub_depth + 1\n    else\n      0\n    end\n  end\n\n  max_depth = 0\n\n  dictionary.each do |k, v|\n    sub_depth = calculate_depth(v)\n    max_depth = sub_depth if sub_depth > max_depth\n  end\n\n  max_depth\nend"
        ]
    },
    {
        "id": "304",
        "prompt": "Write a function to find element at a given index after number of rotations.",
        "solution": "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] ",
        "code": [
            "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] "
        ],
        "pseudo": "# Calculate the effective rotations by taking the remainder of the given rotations divided by the length of the array\n\n# Return the element at the given index after applying the effective rotations\n",
        "test": [
            "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
            "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
            "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
        ],
        "draft_plan": [
            "# Define a method that takes three parameters: an array, an index, and a number of rotations.\n# Calculate the length of the array.\n# Calculate the effective number of rotations by taking the modulo of the given number of rotations with the length of the array.\n# Create a new array by concatenating the last (length - effective rotations) elements with the first (effective rotations) elements.\n# Return the element at the given index in the new array."
        ],
        "final_plan": [
            "def find_element_after_rotations(arr, index, rotations)\n  length = arr.length\n  effective_rotations = rotations % length\n  new_arr = arr[-effective_rotations..-1] + arr[0...-effective_rotations]\n  new_arr[index]\nend"
        ]
    },
    {
        "id": "305",
        "prompt": "Write a function to return two words from a list of words starting with letter 'p'.",
        "solution": "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()",
        "code": [
            "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()"
        ],
        "pseudo": "# Initialize an empty list to store the words starting with 'p'\n\n# Iterate through each word in the list\n    # Check if the first letter of the word is 'p'\n        # If yes, append the word to the list\n\n# Check if the list has at least two words\n    # If yes, return the first two words from the list\n    # If no, return None or an appropriate message",
        "test": [
            "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
            "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
            "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
        ],
        "draft_plan": [
            "# Define a method to return two words starting with letter 'p' from a list of words.\n# Initialize an empty array to store the selected words.\n# Iterate over each word in the input list.\n    # Check if the current word starts with letter 'p'.\n        # If true, add the word to the selected words array.\n    # Check if the length of the selected words array is equal to 2.\n        # If true, break out of the loop.\n# Return the selected words array."
        ],
        "final_plan": [
            "def get_words_starting_with_p(word_list)\n  selected_words = []\n\n  word_list.each do |word|\n    if word[0] == 'p'\n      selected_words << word\n    end\n\n    break if selected_words.length == 2\n  end\n\n  selected_words\nend"
        ]
    },
    {
        "id": "306",
        "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .",
        "solution": "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]",
        "code": [
            "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]"
        ],
        "pseudo": "# Initialize a list to store the maximum sum of increasing subsequences for each index\n# Initialize the maximum sum to be 0\n\n# Iterate through each index i in the given list\n    # Initialize a variable to store the maximum sum of increasing subsequence until index i, including the kth element\n    # Iterate through each index k starting from i+1 to the end of the list\n        # Check if the element at index k is greater than the element at index i\n            # Update the maximum sum of increasing subsequence until index i, including the kth element\n    # Update the maximum sum if the maximum sum of increasing subsequence until index i, including the kth element, is greater than the current maximum sum\n\n# Return the maximum sum",
        "test": [
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
            "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
        ],
        "draft_plan": [
            "# Define a method to find the maximum sum of increasing subsequence.\n# Initialize a variable 'max_sum' to store the maximum sum.\n# Iterate through each index 'i' in the input list from 0 to n-1.\n    # Initialize a variable 'current_sum' to store the sum of the increasing subsequence from prefix until 'i'.\n    # Iterate through each index 'k' from 'i+1' to n-1.\n        # Check if the element at index 'k' is greater than the element at index 'i'.\n            # If true, add the element at index 'k' to 'current_sum'.\n    # Update 'max_sum' to the maximum value between 'max_sum' and 'current_sum'.\n# Return the 'max_sum'."
        ],
        "final_plan": [
            "def find_max_sum(lst)\n  max_sum = 0\n\n  (0...lst.length).each do |i|\n    current_sum = lst[i]\n    (i+1...lst.length).each do |k|\n      if lst[k] > lst[i]\n        current_sum += lst[k]\n      end\n    end\n    max_sum = [max_sum, current_sum].max\n  end\n\n  max_sum\nend"
        ]
    },
    {
        "id": "307",
        "prompt": "Write a function to get a colon of a tuple.",
        "solution": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon",
        "code": [
            "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon"
        ],
        "pseudo": "To get a colon of a tuple, we can use tuple slicing. Here is the code logic:\n\n# Define a function that takes a tuple as input\ndef get_colon(tup):\n    # Use tuple slicing to get the colon\n    colon = tup[1]\n    return colon\n\n# Test the function\ntuple_example = (1, 2, 3, 4, 5)\nresult = get_colon(tuple_example)\nprint(result)  # Output: 2",
        "test": [
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
        ],
        "draft_plan": [
            "# Define a method to get the colon of a tuple.\n# Extract the second element of the tuple using indexing and return it."
        ],
        "final_plan": [
            "def get_colon(tuple)\n  tuple[1]\nend"
        ]
    },
    {
        "id": "308",
        "prompt": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.",
        "solution": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result",
        "code": [
            "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result"
        ],
        "pseudo": "# Create an empty list to store the products\n\n# Iterate through each element in the first list\n    # Iterate through each element in the second list\n        # Calculate the product of the current elements from both lists\n        # Append the product to the list of products\n\n# Sort the list of products in descending order\n\n# Return the specified number of largest products from the list",
        "test": [
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
        ],
        "draft_plan": [
            "# Define a method to find the specified number of largest products from two given lists.\n# Create an empty array to store the products.\n# Iterate over the first list using a nested loop.\n    # Iterate over the second list.\n        # Calculate the product of the current elements from both lists.\n        # Add the product to the products array.\n# Sort the products array in descending order.\n# Return the specified number of largest products from the sorted array."
        ],
        "final_plan": [
            "def find_largest_products(list1, list2, num)\n  products = []\n\n  list1.each do |num1|\n    list2.each do |num2|\n      products << num1 * num2\n    end\n  end\n\n  products.sort.reverse.take(num)\nend"
        ]
    },
    {
        "id": "309",
        "prompt": "Write a function to find the maximum of two numbers.",
        "solution": "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b ",
        "code": [
            "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b "
        ],
        "pseudo": "# Define a function that takes two numbers as input\n\n# Check if the first number is greater than the second number\n    # If it is, return the first number as the maximum\n    # Otherwise, return the second number as the maximum",
        "test": [
            "assert maximum(5,10) == 10",
            "assert maximum(-1,-2) == -1",
            "assert maximum(9,7) == 9"
        ],
        "draft_plan": [
            "# Define a function to find the maximum of two numbers.\n# Accept two number parameters.\n# Use the ternary operator to return the larger of the two numbers.\n"
        ],
        "final_plan": [
            "def find_maximum(a, b)\n  a > b ? a : b\nend"
        ]
    },
    {
        "id": "310",
        "prompt": "Write a function to convert a given string to a tuple of characters.",
        "solution": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result",
        "code": [
            "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result"
        ],
        "pseudo": "# Initialize an empty tuple\n\n# Iterate through each character in the input string\n    # Append the character to the tuple\n\n# Return the tuple",
        "test": [
            "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
            "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
            "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
        ],
        "draft_plan": [
            "# Define a method to convert a string to a tuple of characters.\n# Initialize an empty array to store the characters.\n# Iterate over each character in the input string using 'each_char' iterator.\n    # Append each character to the array.\n# Convert the array to a tuple using the 'to_a' method.\n# Return the tuple of characters."
        ],
        "final_plan": [
            "def convert_to_tuple(string)\n  characters = []\n\n  string.each_char do |char|\n    characters << char\n  end\n\n  characters.to_a\nend"
        ]
    },
    {
        "id": "311",
        "prompt": "Write a function to set the left most unset bit.",
        "solution": "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) ",
        "code": [
            "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) "
        ],
        "pseudo": "To find the leftmost unset bit in a given number, we can use the bitwise operators in Python. Here is the code logic:\n\n1. Create a function `leftmost_unset_bit(num)` that takes a number as input.\n\n2. Initialize a variable `position` as 1, which represents the position of the leftmost bit (starting from 1 for the least significant bit).\n\n3. Iterate through each bit position from right to left using a while loop:\n     - Check if the bit is unset (0) using the bitwise AND operation of the number and a mask (1 << position).\n     - If the bit is unset, return the current position.\n     - If the bit is set (1), increment the position by 1.\n\n4. If no unset bit is found after the loop, return -1 to indicate that no unset bit is present in the number.\n\nHere is the code implementation for the above logic:\n\n```python\ndef leftmost_unset_bit(num):\n    position = 1\n    while num:\n        if not (num & (1 << position)):\n            return position\n        position += 1\n    return -1\n```\n\nYou can then call the `leftmost_unset_bit()` function with a number as input to find the position of the leftmost unset bit.",
        "test": [
            "assert set_left_most_unset_bit(10) == 14",
            "assert set_left_most_unset_bit(12) == 14",
            "assert set_left_most_unset_bit(15) == 15"
        ],
        "draft_plan": [
            "# Define a method to set the leftmost unset bit\n# Iterate through each bit position from left to right using a loop\n    # Check if the bit at the current position is unset (i.e., equal to 0)\n        # If true, set the bit to 1 and break out of the loop\n# Return the updated number with the leftmost unset bit set"
        ],
        "final_plan": [
            "def set_leftmost_unset_bit(num)\n  for i in 0...32\n    if ((num & (1 << i)) == 0)\n      num |= (1 << i)\n      break\n    end\n  end\n  num\nend"
        ]
    },
    {
        "id": "312",
        "prompt": "Write a function to find the volume of a cone.",
        "solution": "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume",
        "code": [
            "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume"
        ],
        "pseudo": "# Define a function to calculate the volume of a cone\n    # Accept the radius and height of the cone as input parameters\n    # Calculate the volume using the formula V = (1/3) * \u03c0 * r^2 * h\n    # Return the calculated volume\n\n# Test the function by calling it with appropriate values for radius and height",
        "test": [
            "assert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)",
            "assert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)",
            "assert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)"
        ],
        "draft_plan": [
            "# Define a method to calculate the volume of a cone.\n# Accept the height and radius of the cone as input parameters.\n# Calculate the volume using the formula: volume = (1/3) * \u03c0 * radius^2 * height.\n# Return the calculated volume."
        ],
        "final_plan": [
            "def calculate_cone_volume(height, radius)\n  volume = (1.0/3.0) * Math::PI * radius**2 * height\n  volume\nend"
        ]
    },
    {
        "id": "388",
        "prompt": "Write a function to find the highest power of 2 that is less than or equal to n.",
        "solution": "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res ",
        "code": [
            "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res "
        ],
        "pseudo": "# Initialize the highest power of 2 to 1\n\n# While the highest power of 2 is less than or equal to n\n    # Multiply the highest power of 2 by 2\n\n# Divide the highest power of 2 by 2 to get the result",
        "test": [
            "assert highest_Power_of_2(10) == 8",
            "assert highest_Power_of_2(19) == 16",
            "assert highest_Power_of_2(32) == 32"
        ],
        "draft_plan": [
            "# Define a method to find the highest power of 2 that is less than or equal to n.\n# Initialize a variable 'power' to 0.\n# Iterate while n is greater than 1.\n    # Divide n by 2 and update its value.\n    # Increment 'power' by 1.\n# Return 2 raised to the power of 'power'."
        ],
        "final_plan": [
            "def highest_power_of_two(n)\n  power = 0\n\n  while n > 1\n    n /= 2\n    power += 1\n  end\n\n  2 ** power\nend"
        ]
    },
    {
        "id": "389",
        "prompt": "Write a function to find the n'th lucas number.",
        "solution": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ",
        "code": [
            "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) "
        ],
        "pseudo": "# Define a function to find the n-th Lucas number\ndef lucas_number(n):\n    # Base cases for n = 0 and n = 1\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Lucas numbers\n    lucas_0 = 2\n    lucas_1 = 1\n    \n    # Iterate from 2 to n\n    for i in range(2, n+1):\n        # Calculate the current Lucas number using the formula L(n) = L(n-1) + L(n-2)\n        lucas_n = lucas_0 + lucas_1\n        \n        # Update the values of previous Lucas numbers for the next iteration\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    \n    # Return the n-th Lucas number\n    return lucas_n",
        "test": [
            "assert find_lucas(9) == 76",
            "assert find_lucas(4) == 7",
            "assert find_lucas(3) == 4"
        ],
        "draft_plan": [
            "# Define a method to find the n'th Lucas number.\n# Initialize two variables, 'l1' and 'l2', with values 2 and 1 respectively.\n# If n is less than or equal to 0, return 'l1'.\n# If n equals 1, return 'l2'.\n# Iterate from 2 to n, updating 'l1' and 'l2' at each iteration.\n    # Calculate the next Lucas number by adding 'l1' and 'l2'.\n    # Update 'l1' with the value of 'l2'.\n    # Update 'l2' with the value of the next Lucas number.\n# Return the final value of 'l2', which will be the n'th Lucas number."
        ],
        "final_plan": [
            "def nth_lucas_number(n)\n  l1 = 2\n  l2 = 1\n\n  return l1 if n <= 0\n  return l2 if n == 1\n\n  (2..n).each do |_|\n    next_lucas = l1 + l2\n    l1 = l2\n    l2 = next_lucas\n  end\n\n  l2\nend"
        ]
    },
    {
        "id": "390",
        "prompt": "Write a function to apply a given format string to all of the elements in a list.",
        "solution": "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string",
        "code": [
            "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string"
        ],
        "pseudo": "# Define a function that takes a format string and a list of elements as input\n\n# Create an empty list to store the formatted elements\n\n# Iterate through each element in the input list\n    # Apply the format string to the current element using the format() function\n    # Append the formatted element to the new list\n\n# Return the new list with all the formatted elements",
        "test": [
            "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
            "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
            "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
        ],
        "draft_plan": [
            "# Define a method to apply a format string to elements in a list.\n# Initialize an empty array to store formatted elements.\n# Iterate over the input list using 'each' iterator.\n    # Apply the format string to each element using the 'format' method.\n    # Append the formatted element to the array.\n# Return the array of formatted elements."
        ],
        "final_plan": [
            "def apply_format_string(format_string, lst)\n  formatted_lst = []\n\n  lst.each do |element|\n    formatted_lst << format(format_string, element)\n  end\n\n  formatted_lst\nend"
        ]
    },
    {
        "id": "391",
        "prompt": "Write a function to convert more than one list to nested dictionary.",
        "solution": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result",
        "code": [
            "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result"
        ],
        "pseudo": "# Initialize an empty dictionary\n\n# Iterate through each list in the input lists\n    # Get the first element of the list as the key for the nested dictionary\n    # Get the remaining elements of the list as the values for the nested dictionary\n    # Create a nested dictionary using the key and values\n\n# Return the nested dictionary",
        "test": [
            "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
            "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
            "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
        ],
        "draft_plan": [
            "# Define a method to convert multiple lists to a nested dictionary.\n# Accept multiple lists as input parameters.\n# Create an empty dictionary to store the nested dictionary.\n# Check if the number of lists is greater than 1.\n    # If true, iterate over the first list using 'zip' method.\n        # Create a nested dictionary with the elements of the first list as keys.\n        # Recursively call the method with the remaining lists as arguments, excluding the first list.\n        # Assign the nested dictionary as the value for the current key in the main dictionary.\n    # If the number of lists is 1, create a dictionary with the elements of the single list as keys and None as values.\n# Return the main dictionary containing the nested structure."
        ],
        "final_plan": [
            "def convert_to_nested_dict(*lists)\n  nested_dict = {}\n\n  if lists.length > 1\n    lists[0].zip(*lists[1..-1]).each do |keys, *values|\n      nested_dict[keys] = convert_to_nested_dict(*values)\n    end\n  else\n    nested_dict = Hash[lists[0].map { |key| [key, nil] }]\n  end\n\n  nested_dict\nend"
        ]
    },
    {
        "id": "392",
        "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "solution": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]",
        "code": [
            "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]"
        ],
        "pseudo": "# Create a dictionary to store the maximum sum for each number\n# Set the base cases for f(0) and f(1) as 0 and 1 respectively\n\n# Define a recursive function to calculate the maximum sum for a given number\n    # Check if the maximum sum for the current number has already been calculated\n        # If yes, return the stored value\n        # If no, calculate the maximum sum using the given equation\n\n# Call the recursive function to calculate the maximum sum for the given number",
        "test": [
            "assert get_max_sum(60) == 106",
            "assert get_max_sum(10) == 12",
            "assert get_max_sum(2) == 2"
        ],
        "draft_plan": [
            "# Define a method to calculate the maximum sum using the given equation.\n# Create a hash to store the calculated values for each number, with initial value as nil.\n# Define a recursive helper method to calculate the maximum sum for a given number.\n    # Check if the value for the given number is already calculated and stored in the hash.\n        # If true, return the stored value.\n    # Calculate the maximum sum using the given equation:\n        # Calculate the sum of f(n/2), f(n/3), f(n/4), and f(n/5) recursively.\n        # Calculate the maximum of the sum calculated above and n.\n    # Store the calculated value in the hash for future use.\n    # Return the calculated value.\n# Call the recursive helper method with the input number to get the maximum sum.\n# Return the maximum sum."
        ],
        "final_plan": [
            "def maximum_sum(n)\n  max_sum_cache = {}\n  \n  def calculate_maximum_sum(num, cache)\n    return num if num <= 0\n\n    return cache[num] if cache[num]\n\n    sum = calculate_maximum_sum(num / 2, cache) + \n          calculate_maximum_sum(num / 3, cache) +\n          calculate_maximum_sum(num / 4, cache) +\n          calculate_maximum_sum(num / 5, cache)\n\n    max_sum = [sum, num].max\n\n    cache[num] = max_sum\n\n    max_sum\n  end\n\n  calculate_maximum_sum(n, max_sum_cache)\nend"
        ]
    },
    {
        "id": "393",
        "prompt": "Write a function to find the list with maximum length.",
        "solution": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)",
        "code": [
            "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)"
        ],
        "pseudo": "# Initialize the maximum length and the list with maximum length to empty values\n\n# Iterate through each list in the input list of lists\n    # Check if the length of the current list is greater than the maximum length\n        # If so, update the maximum length and the list with maximum length\n\n# Return the list with maximum length",
        "test": [
            "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
            "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
        ],
        "draft_plan": [
            "# Initialize a variable 'max_length' to 0\n# Initialize a variable 'max_list' to an empty list\n# Iterate through each list in the input list\n    # Check if the length of the current list is greater than 'max_length'\n        # If true, update 'max_length' to the length of the current list\n        # Update 'max_list' to the current list\n# Return 'max_list'"
        ],
        "final_plan": [
            "def find_max_length_list(lst)\n  max_length = 0\n  max_list = []\n\n  lst.each do |sublist|\n    if sublist.length > max_length\n      max_length = sublist.length\n      max_list = sublist\n    end\n  end\n\n  max_list\nend"
        ]
    },
    {
        "id": "394",
        "prompt": "Write a function to check if given tuple contains no duplicates.",
        "solution": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res ",
        "code": [
            "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res "
        ],
        "pseudo": "# Convert the tuple to a set\n# Check if the length of the set is equal to the length of the tuple\n    # If they are equal, it means there are no duplicates\n    # Otherwise, there are duplicates",
        "test": [
            "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
            "assert check_distinct((1, 4, 5, 6)) == True",
            "assert check_distinct((2, 3, 4, 5, 6)) == True"
        ],
        "draft_plan": [
            "# Define a method to check if a given tuple contains no duplicates.\n# Convert the tuple to an array.\n# Create a new array to store unique elements.\n# Iterate over the array.\n    # Check if the current element exists in the unique array.\n        # If true, return false as there is a duplicate.\n        # If false, add the element to the unique array.\n# If the loop completes without finding any duplicates, return true."
        ],
        "final_plan": [
            "def contains_no_duplicates(tuple)\n  array = tuple.to_a\n  unique_array = []\n\n  array.each do |element|\n    return false if unique_array.include?(element)\n    unique_array << element\n  end\n\n  true\nend"
        ]
    },
    {
        "id": "395",
        "prompt": "Write a function to find the first non-repeated character in a given string.",
        "solution": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None",
        "code": [
            "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None"
        ],
        "pseudo": "# Create an empty dictionary to store the count of each character\n# Iterate through each character in the given string\n    # If the character is already in the dictionary, increase its count by 1\n    # If the character is not in the dictionary, add it with a count of 1\n\n# Iterate through each character in the given string again\n    # Check if the count of the current character in the dictionary is 1\n        # If it is, return the current character as the first non-repeated character\n\n# If no non-repeated character is found, return \"None\"",
        "test": [
            "assert first_non_repeating_character(\"abcabc\") == None",
            "assert first_non_repeating_character(\"abc\") == \"a\"",
            "assert first_non_repeating_character(\"ababc\") == \"c\""
        ],
        "draft_plan": [
            "# Define a method to find the first non-repeated character in a string.\n# Iterate through each character in the string.\n    # Check if the current character occurs only once in the string.\n        # If true, return the current character.\n# If no non-repeated character is found, return 'nil'."
        ],
        "final_plan": [
            "def first_non_repeated_char(string)\n  string.each_char do |char|\n    return char if string.count(char) == 1\n  end\n  nil\nend"
        ]
    },
    {
        "id": "396",
        "prompt": "Write a function to check whether the given string starts and ends with the same character or not.",
        "solution": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ",
        "code": [
            "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" "
        ],
        "pseudo": "# Check if the first character of the string is equal to the last character\n    # If they are equal, return True\n    # If they are not equal, return False",
        "test": [
            "assert check_char(\"abba\") == \"Valid\"",
            "assert check_char(\"a\") == \"Valid\"",
            "assert check_char(\"abcd\") == \"Invalid\""
        ],
        "draft_plan": [
            "# Define a method to check whether a given string starts and ends with the same character or not.\n# Check if the length of the string is greater than or equal to 1.\n    # If true, compare the first character with the last character of the string.\n        # If they are equal, return true.\n        # If they are not equal, return false.\n    # If the length of the string is 0, return false."
        ],
        "final_plan": [
            "def starts_and_ends_with_same_char?(string)\n  if string.length >= 1\n    string[0] == string[-1]\n  else\n    false\n  end\nend"
        ]
    },
    {
        "id": "397",
        "prompt": "Write a function to find the median of three numbers.",
        "solution": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median",
        "code": [
            "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median"
        ],
        "pseudo": "# Sort the three numbers in ascending order\n\n# If the middle number is an integer, return it as the median\n# Otherwise, calculate the average of the two middle numbers and return it as the median",
        "test": [
            "assert median_numbers(25,55,65)==55.0",
            "assert median_numbers(20,10,30)==20.0",
            "assert median_numbers(15,45,75)==45.0"
        ],
        "draft_plan": [
            "# Define a method to find the median of three numbers.\n# Sort the three numbers in ascending order.\n# Check if the middle number is an integer or a float.\n    # If it is an integer, return the middle number.\n    # If it is a float, return the average of the middle two numbers.\n# The returned value is the median of the three numbers."
        ],
        "final_plan": [
            "def find_median(num1, num2, num3)\n  sorted_nums = [num1, num2, num3].sort\n\n  middle = sorted_nums[1]\n\n  if middle.is_a?(Integer)\n    middle\n  else\n    (sorted_nums[0] + sorted_nums[2]) / 2.0\n  end\nend"
        ]
    },
    {
        "id": "398",
        "prompt": "Write a function to compute the sum of digits of each number of a given list.",
        "solution": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
        "code": [
            "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"
        ],
        "pseudo": "# Initialize an empty list to store the sum of digits for each number\n\n# Iterate through each number in the given list\n    # Convert the number to a string\n    # Initialize a variable to store the sum of digits\n    # Iterate through each digit in the string representation of the number\n        # Convert the digit back to an integer and add it to the sum of digits\n    # Append the sum of digits to the list\n\n# Return the list of sum of digits for each number",
        "test": [
            "assert sum_of_digits([10,2,56])==14",
            "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
            "assert sum_of_digits([10,20,-4,5,-70])==19"
        ],
        "draft_plan": [
            "# Define a method to compute the sum of digits of each number in a given list.\n# Initialize an empty array to store the sums.\n# Iterate over the input list of numbers using 'each' iterator.\n    # Convert each number to a string.\n    # Iterate over the characters in the string representation of the number using 'each_char' iterator.\n        # Convert each character back to an integer and add it to a running sum.\n    # Append the sum to the array of sums.\n# Return the array of sums."
        ],
        "final_plan": [
            "def sum_of_digits(numbers)\n  sums = []\n\n  numbers.each do |num|\n    digit_sum = 0\n    num.to_s.each_char do |digit|\n      digit_sum += digit.to_i\n    end\n    sums << digit_sum\n  end\n\n  sums\nend"
        ]
    },
    {
        "id": "399",
        "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
        "solution": "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "code": [
            "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) "
        ],
        "pseudo": "# Initialize an empty list to store the result of bitwise XOR operation on each tuple\n\n# Iterate through each tuple in the input list\n    # Initialize a variable to store the result of XOR operation\n    # Iterate through each element in the tuple\n        # Perform bitwise XOR operation with the current element and the result variable\n    # Append the result of XOR operation to the result list\n\n# Return the result list",
        "test": [
            "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
            "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
            "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
        ],
        "draft_plan": [
            "# Define a method to perform bitwise xor operation on given tuples.\n# Initialize a variable 'result' as an empty array to store the result of bitwise xor operation.\n# Iterate over the input list of tuples using 'each' iterator.\n    # Extract the two elements of the current tuple.\n    # Perform bitwise xor operation on the two elements and store the result in 'result' array.\n# Return the 'result' array."
        ],
        "final_plan": [
            "def bitwise_xor(tuples)\n  result = []\n\n  tuples.each do |tup|\n    a, b = tup[0], tup[1]\n    xor_result = a ^ b\n    result << xor_result\n  end\n\n  result\nend"
        ]
    },
    {
        "id": "400",
        "prompt": "Write a function to extract the number of unique tuples in the given list.",
        "solution": "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)",
        "code": [
            "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)"
        ],
        "pseudo": "# Create an empty set to store unique tuples\n\n# Iterate through each tuple in the given list\n    # Convert the tuple to a frozenset and add it to the set of unique tuples\n\n# Return the length of the set of unique tuples",
        "test": [
            "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
            "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
            "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
        ],
        "draft_plan": [
            "# Define a method to extract the number of unique tuples in a given list.\n# Create an empty hash to store the unique tuples.\n# Iterate over the input list of tuples using 'each' iterator.\n    # Convert the current tuple to a string representation.\n    # Check if the string representation of the tuple exists as a key in the hash.\n        # If false, add the string representation of the tuple as a key in the hash with a value of 1.\n        # If true, increment the value of the existing key in the hash by 1.\n# Return the number of unique tuples, which would be the size of the hash."
        ],
        "final_plan": [
            "def extract_number_of_unique_tuples(lst)\n  unique_tuples = {}\n\n  lst.each do |tuple|\n    tuple_str = tuple.to_s\n\n    if unique_tuples.key?(tuple_str)\n      unique_tuples[tuple_str] += 1\n    else\n      unique_tuples[tuple_str] = 1\n    end\n  end\n\n  unique_tuples.size\nend"
        ]
    },
    {
        "id": "401",
        "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
        "solution": "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "code": [
            "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) "
        ],
        "pseudo": "# Create an empty result tuple\n\n# Iterate through the nested tuples, getting each inner tuple\n    # Iterate through the inner tuples, getting each element and its index\n        # Check if the index is within the range of the result tuple\n            # If it is, add the element at the corresponding index to the current element\n            # Create a new tuple with the updated element and append it to the result tuple\n        # If the index is not within the range of the result tuple\n            # Create a new tuple with only the current element and append it to the result tuple\n\n# Return the result tuple",
        "test": [
            "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
            "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
            "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
        ],
        "draft_plan": [
            "# Define a method to perform index-wise addition of tuple elements.\n# Create an empty array to store the result of the addition.\n# Iterate over the tuples using the 'each_with_index' iterator.\n    # Get the elements at the current index from both tuples.\n    # Add the elements together and store the result in the result array.\n# Return the result array."
        ],
        "final_plan": [
            "def tuple_addition(tuple1, tuple2)\n  result = []\n\n  tuple1.each_with_index do |ele, index|\n    result << ele + tuple2[index]\n  end\n\n  result\nend"
        ]
    },
    {
        "id": "404",
        "prompt": "Write a function to find the minimum of two numbers.",
        "solution": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ",
        "code": [
            "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b "
        ],
        "pseudo": "# Define a function to find the minimum of two numbers\n    # Check if the first number is less than the second number\n        # If true, return the first number\n        # If false, return the second number\n\n# Call the function and pass two numbers as arguments",
        "test": [
            "assert minimum(1,2) == 1",
            "assert minimum(-5,-4) == -5",
            "assert minimum(0,0) == 0"
        ],
        "draft_plan": [
            "# Define a method to find the minimum of two numbers.\n# Check if the first number is less than or equal to the second number.\n    # If true, return the first number.\n    # If false, return the second number."
        ],
        "final_plan": [
            "def find_minimum(num1, num2)\n  if num1 <= num2\n    return num1\n  else\n    return num2\n  end\nend"
        ]
    },
    {
        "id": "405",
        "prompt": "Write a function to check whether an element exists within a tuple.",
        "solution": "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False",
        "code": [
            "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False"
        ],
        "pseudo": "# Iterate through each element in the tuple\n    # Check if the current element is equal to the target element\n        # If the element is found, return True\n\n# If the element is not found, return False",
        "test": [
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
        ],
        "draft_plan": [
            "# Define a method to check if an element exists within a tuple.\n# Iterate through each element in the tuple using 'each' iterator.\n    # Check if the current element is equal to the target element.\n        # If true, return true.\n# If the loop completes without finding the target element, return false."
        ],
        "final_plan": [
            "def element_exists_in_tuple(tuple, element)\n  tuple.each do |item|\n    return true if item == element\n  end\n\n  false\nend"
        ]
    },
    {
        "id": "406",
        "prompt": "Write a function to find whether the parity of a given number is odd.",
        "solution": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False",
        "code": [
            "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False"
        ],
        "pseudo": "# Check if the number modulo 2 is equal to 1\n    # If the modulo is 1, the number is odd\n    # Return True\n\n# If the modulo is not 1, the number is even\n# Return False",
        "test": [
            "assert find_Parity(12) == False",
            "assert find_Parity(7) == True",
            "assert find_Parity(10) == False"
        ],
        "draft_plan": [
            "# Define a method to check if the parity of a number is odd.\n# Use the modulo operator to check if the number is divisible by 2.\n    # If the remainder is 1, return true (odd parity)\n    # If the remainder is 0, return false (even parity)"
        ],
        "final_plan": [
            "def odd_parity(number)\n  number % 2 == 1\nend"
        ]
    },
    {
        "id": "407",
        "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "solution": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False",
        "code": [
            "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False"
        ],
        "pseudo": "# Convert the given number to a list of digits\n\n# Find the first index (from right to left) where the digit is smaller than the digit to its right\n    # If no such index is found, return \"None\" since the number is already the largest possible\n\n# Find the smallest digit to the right of the found index that is larger than the digit at the found index\n\n# Swap the found digit with the smallest larger digit to its right\n\n# Sort the digits to the right of the found index in ascending order\n\n# Concatenate the digits to form the next bigger number\n\n# Return the next bigger number",
        "test": [
            "assert rearrange_bigger(12)==21",
            "assert rearrange_bigger(10)==False",
            "assert rearrange_bigger(102)==120"
        ],
        "draft_plan": [
            "# Convert the given number to a string and split it into an array of individual digits\n# Find the index 'i' where the digits are no longer in ascending order from right to left\n# If 'i' is 0, return -1 as there is no bigger number possible\n# Find the smallest digit greater than the digit at index 'i' in the subarray from 'i+1' to the end\n# Swap the digit at index 'i' with the smallest greater digit found\n# Sort the subarray from 'i+1' to the end in ascending order\n# Join the digits in the array back into a string and convert it to an integer\n# Return the resulting integer as the next bigger number"
        ],
        "final_plan": [
            "def next_bigger_number(number)\n  digits = number.to_s.chars.map(&:to_i)\n  i = digits.length - 2\n\n  while i >= 0 && digits[i] >= digits[i + 1]\n    i -= 1\n  end\n\n  return -1 if i == -1\n\n  j = digits.length - 1\n  while digits[j] <= digits[i]\n    j -= 1\n  end\n\n  digits[i], digits[j] = digits[j], digits[i]\n  digits[i+1..-1] = digits[i+1..-1].sort\n\n  digits.join.to_i\nend"
        ]
    },
    {
        "id": "408",
        "prompt": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.",
        "solution": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs",
        "code": [
            "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs"
        ],
        "pseudo": "# Create an empty list to store the pairs\n\n# Sort both arrays in ascending order\n\n# Iterate through each element in the first array\n    # Iterate through each element in the second array\n        # Add the pair (first_array[i], second_array[j]) to the list of pairs\n\n# Sort the list of pairs based on the sum of the elements in each pair\n\n# Return the first k pairs from the sorted list",
        "test": [
            "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
        ],
        "draft_plan": [
            "# Define a method to find k number of smallest pairs.\n# Create an empty array to store the pairs.\n# Sort the first array and the second array in ascending order.\n# Iterate over each element in the first array.\n    # Iterate over each element in the second array.\n        # Create a pair consisting of the current element from the first array and the current element from the second array.\n        # Add the pair to the array of pairs.\n# Sort the array of pairs based on the sum of the elements.\n# Return the first k pairs from the array of pairs."
        ],
        "final_plan": [
            "def find_smallest_pairs(arr1, arr2, k)\n  pairs = []\n\n  arr1.sort!\n  arr2.sort!\n\n  arr1.each do |num1|\n    arr2.each do |num2|\n      pairs << [num1, num2]\n    end\n  end\n\n  pairs.sort_by! { |pair| pair.sum }\n\n  pairs[0...k]\nend"
        ]
    },
    {
        "id": "409",
        "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.",
        "solution": "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min",
        "code": [
            "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min"
        ],
        "pseudo": "# Initialize the minimum product to positive infinity\n\n# Iterate through each pair of tuples in the list\n    # Calculate the product of the two tuples\n    # Check if the product is less than the current minimum product\n        # If yes, update the minimum product\n\n# Return the minimum product",
        "test": [
            "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
            "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
            "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
        ],
        "draft_plan": [
            "# Define a method to find the minimum product from pairs of tuples.\n# Create a variable 'min_product' and set it to a very large number.\n# Iterate over the input list of tuples using 'each' iterator.\n    # Extract the two elements of the current tuple.\n    # Calculate the product of the two elements.\n    # Update 'min_product' if the calculated product is smaller than the current 'min_product'.\n# Return the 'min_product'."
        ],
        "final_plan": [
            "def find_minimum_product(lst)\n  min_product = Float::INFINITY\n\n  lst.each do |tuple|\n    a, b = tuple[0], tuple[1]\n    product = a * b\n    min_product = product if product < min_product\n  end\n\n  min_product\nend"
        ]
    },
    {
        "id": "410",
        "prompt": "Write a function to find the minimum value in a given heterogeneous list.",
        "solution": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val",
        "code": [
            "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val"
        ],
        "pseudo": "# Initialize the minimum value to the first element in the list\n\n# Iterate through each element in the list\n    # Check if the current element is smaller than the minimum value\n        # If it is, update the minimum value\n\n# Return the minimum value",
        "test": [
            "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
            "assert min_val(['Python', 15, 20, 25])==15",
            "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
        ],
        "draft_plan": [
            "# Define a method to find the minimum value in a given list.\n# Initialize a variable 'min_value' to the first element of the list.\n# Iterate over the remaining elements in the list.\n    # Check if the current element is smaller than the 'min_value'.\n        # If true, update the 'min_value' to the current element.\n# Return the 'min_value' as the minimum value in the list."
        ],
        "final_plan": [
            "def find_minimum_value(lst)\n  min_value = lst[0]\n\n  lst.each do |element|\n    min_value = element if element < min_value\n  end\n\n  min_value\nend"
        ]
    },
    {
        "id": "411",
        "prompt": "Write a function to convert the given snake case string to camel case string.",
        "solution": "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "code": [
            "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))"
        ],
        "pseudo": "# Split the snake case string into words based on the underscore\n# Initialize an empty camel case string\n\n# Iterate through each word in the snake case string\n    # Capitalize the first letter of each word except the first word\n    # Append the capitalized word to the camel case string\n\n# Return the camel case string",
        "test": [
            "assert snake_to_camel('android_tv') == 'AndroidTv'",
            "assert snake_to_camel('google_pixel') == 'GooglePixel'",
            "assert snake_to_camel('apple_watch') == 'AppleWatch'"
        ],
        "draft_plan": [
            "# Define a method to convert snake case string to camel case string.\n# Split the snake case string by underscore to get an array of words.\n# Capitalize the first letter of each word except the first word.\n# Join the capitalized words together to form the camel case string.\n# Return the camel case string."
        ],
        "final_plan": [
            "def snake_to_camel(snake_case_string)\n  words = snake_case_string.split(\"_\")\n  camel_case_words = words.map.with_index do |word, index|\n    index == 0 ? word : word.capitalize\n  end\n  camel_case_string = camel_case_words.join\n  camel_case_string\nend"
        ]
    },
    {
        "id": "412",
        "prompt": "Write a function to remove odd numbers from a given list.",
        "solution": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
        "code": [
            "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l"
        ],
        "pseudo": "# Create an empty list to store the even numbers\n\n# Iterate through each number in the given list\n    # Check if the number is even (number % 2 == 0)\n        # If the number is even, append it to the list of even numbers\n\n# Return the list of even numbers",
        "test": [
            "assert remove_odd([1,2,3]) == [2]",
            "assert remove_odd([2,4,6]) == [2,4,6]",
            "assert remove_odd([10,20,3]) == [10,20]"
        ],
        "draft_plan": [
            "# Define a method to remove odd numbers from a given list.\n# Iterate over the input list using 'select' method.\n    # Select only the elements that are even (i.e., not divisible by 2).\n# Return the new list with only even numbers."
        ],
        "final_plan": [
            "def remove_odd_numbers(lst)\n  lst.select { |num| num.even? }\nend"
        ]
    },
    {
        "id": "413",
        "prompt": "Write a function to extract the nth element from a given list of tuples.",
        "solution": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result",
        "code": [
            "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result"
        ],
        "pseudo": "# Initialize an empty list to store the nth element from each tuple\n\n# Iterate through each tuple in the given list\n    # Check if the tuple has at least n elements\n        # If yes, append the nth element to the result list\n\n# Return the result list",
        "test": [
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
        ],
        "draft_plan": [
            "# Define a method to extract the nth element from a list of tuples.\n# Create an empty array to store the extracted elements.\n# Iterate over each tuple in the input list using 'each' iterator.\n    # Check if the tuple has at least n elements.\n        # If true, extract the nth element from the tuple and add it to the array.\n# Return the array of extracted elements."
        ],
        "final_plan": [
            "def extract_nth_element(list_of_tuples, n)\n  extracted_elements = []\n\n  list_of_tuples.each do |tuple|\n    extracted_elements << tuple[n-1] if tuple.length >= n\n  end\n\n  extracted_elements\nend"
        ]
    },
    {
        "id": "414",
        "prompt": "Write a function to check whether any value in a sequence exists in a sequence or not.",
        "solution": "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False",
        "code": [
            "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False"
        ],
        "pseudo": "# Iterate through each value in the first sequence\n    # Check if the value exists in the second sequence\n        # If the value exists, return True\n\n# If no matching value is found, return False",
        "test": [
            "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
            "assert overlapping([1,2,3],[4,5,6]) == False",
            "assert overlapping([1,4,5],[1,4,5]) == True"
        ],
        "draft_plan": [
            "# Define a method to check if any value in a sequence exists in another sequence.\n# Iterate over each value in the first sequence.\n    # Check if the current value exists in the second sequence.\n        # If true, return true.\n# If no matching value is found, return false."
        ],
        "final_plan": [
            "def value_exists(sequence1, sequence2)\n  sequence1.each do |value|\n    return true if sequence2.include?(value)\n  end\n  false\nend"
        ]
    },
    {
        "id": "415",
        "prompt": "Write a function to find a pair with highest product from a given array of integers.",
        "solution": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ",
        "code": [
            "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    "
        ],
        "pseudo": "# Initialize the maximum product to -infinity\n\n# Iterate through each pair of numbers in the array\n    # Calculate the product of the current pair\n    # Update the maximum product if the current product is greater\n\n# Return the pair with the highest product",
        "test": [
            "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
            "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
            "assert max_Product([1,2,3]) == (2,3)"
        ],
        "draft_plan": [
            "# Define a method to find the pair with the highest product from an array of integers.\n# Initialize variables 'max_product' and 'pair' to store the maximum product and the pair of numbers that produce it.\n# Iterate through each number in the input array using 'each' iterator.\n    # Iterate through the remaining numbers in the array using a nested 'each' iterator.\n        # Calculate the product of the current number and the nested number.\n        # If the product is greater than the current 'max_product', update 'max_product' and 'pair'.\n# Return the 'pair' variable, which contains the pair with the highest product."
        ],
        "final_plan": [
            "def highest_product_pair(array)\n  max_product = 0\n  pair = []\n\n  array.each_with_index do |num1, index1|\n    array[index1+1..-1].each do |num2|\n      product = num1 * num2\n      if product > max_product\n        max_product = product\n        pair = [num1, num2]\n      end\n    end\n  end\n\n  pair\nend"
        ]
    },
    {
        "id": "417",
        "prompt": "Write a function to find common first element in given list of tuple.",
        "solution": "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] ",
        "code": [
            "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] "
        ],
        "pseudo": "# Initialize a set to store the first elements of the tuples\n# Initialize a variable to store the common first element, initially None\n\n# Iterate through each tuple in the list\n    # Check if the first element of the tuple is already in the set\n        # If it is, set the common first element to the current element\n        # Break the loop as we have found the common first element\n    # If the first element is not in the set, add it to the set\n\n# Return the common first element",
        "test": [
            "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
            "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
            "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
        ],
        "draft_plan": [
            "# Define a method to find the common first element in a given list of tuples.\n# Initialize a variable 'common' to nil.\n# Iterate over the input list of tuples using 'each' iterator.\n    # Extract the first element of the current tuple.\n    # If 'common' is nil, assign the first element to it.\n    # If the first element is not equal to 'common', return nil.\n# Return 'common' if it is not nil, indicating that it is the common first element among all tuples."
        ],
        "final_plan": [
            "def find_common_first_element(lst)\n  common = nil\n\n  lst.each do |tup|\n    first = tup[0]\n    \n    if common.nil?\n      common = first\n    elsif first != common\n      return nil\n    end\n  end\n\n  common\nend"
        ]
    },
    {
        "id": "418",
        "prompt": "Write a function to find the element of a list having maximum length.",
        "solution": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList",
        "code": [
            "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList"
        ],
        "pseudo": "# Initialize a variable to store the index of the element with maximum length\n# Initialize a variable to store the maximum length, initially set to 0\n\n# Iterate through each element in the list\n    # Check if the length of the current element is greater than the maximum length\n        # If so, update the maximum length and the index of the element\n\n# Return the element at the index with maximum length",
        "test": [
            "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
            "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
            "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
        ],
        "draft_plan": [
            "# Define a method to find the element with maximum length.\n# Initialize a variable 'max_length_element' to store the element with maximum length.\n# Iterate over each element in the input list.\n    # Check if the length of the current element is greater than the length of 'max_length_element'.\n        # If true, update 'max_length_element' with the current element.\n# Return 'max_length_element'."
        ],
        "final_plan": [
            "def find_max_length_element(lst)\n  max_length_element = lst[0]\n\n  lst.each do |element|\n    max_length_element = element if element.length > max_length_element.length\n  end\n\n  max_length_element\nend"
        ]
    },
    {
        "id": "419",
        "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
        "solution": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum",
        "code": [
            "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum"
        ],
        "pseudo": "# Initialize a variable to store the total sum\n# Iterate through each number in the list\n    # Round the number to the nearest integer\n    # Add the rounded number to the total sum\n\n# Calculate the total sum multiplied by the length of the list\n# Print the result",
        "test": [
            "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
            "assert round_and_sum([5,2,9,24.3,29])==345",
            "assert round_and_sum([25.0,56.7,89.2])==513"
        ],
        "draft_plan": [
            "# Define a method to round numbers in a given list and calculate the sum multiplied by the length of the list.\n# Initialize a variable 'total_sum' to 0.\n# Iterate through each number in the input list.\n    # Round the current number using the 'round' method.\n    # Add the rounded number to the 'total_sum'.\n# Calculate the final result by multiplying 'total_sum' with the length of the input list.\n# Print the final result."
        ],
        "final_plan": [
            "def round_and_multiply(lst)\n  total_sum = 0\n\n  lst.each do |num|\n    total_sum += num.round\n  end\n\n  result = total_sum * lst.length\n  puts result\nend"
        ]
    },
    {
        "id": "420",
        "prompt": "Write a function to find the cube sum of first n even natural numbers.",
        "solution": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
        "code": [
            "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum"
        ],
        "pseudo": "# Initialize a variable to store the sum of the cube of even numbers\n# Iterate through each even number from 2 to (2*n) with a step size of 2\n    # Calculate the cube of the current even number\n    # Add the cube to the sum\n\n# Return the sum of the cube of even numbers",
        "test": [
            "assert cube_Sum(2) == 72",
            "assert cube_Sum(3) == 288",
            "assert cube_Sum(4) == 800"
        ],
        "draft_plan": [
            "# Define a function to find the cube sum of the first n even natural numbers.\n# Initialize a variable 'sum' to 0 to store the sum of the cubes.\n# Iterate from 2 to 2n (inclusive) using 'step' to consider only even numbers.\n    # Add the cube of the current number to 'sum'.\n# Return the value of 'sum'."
        ],
        "final_plan": [
            "def cube_sum_of_even_numbers(n)\n  sum = 0\n\n  (2..2*n).step(2) do |num|\n    sum += num**3\n  end\n\n  sum\nend"
        ]
    },
    {
        "id": "421",
        "prompt": "Write a function to concatenate each element of tuple by the delimiter.",
        "solution": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ",
        "code": [
            "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) "
        ],
        "pseudo": "# Initialize an empty string to store the concatenated elements\n\n# Iterate through each tuple in the input list\n    # Iterate through each element in the tuple\n        # Concatenate the element to the output string\n        # If the current element is not the last element in the tuple, append the delimiter\n\n# Return the concatenated string",
        "test": [
            "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
            "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
            "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
        ],
        "draft_plan": [
            "# Define a method to concatenate each element of a tuple by a delimiter.\n# Initialize an empty string to store the concatenated result.\n# Iterate over each element in the tuple using 'each' iterator.\n    # Convert the element to a string and append it to the result string.\n    # Append the delimiter to the result string after each element except the last one.\n# Return the concatenated result string."
        ],
        "final_plan": [
            "def concatenate_tuple_elements(tuple, delimiter)\n  result = \"\"\n\n  tuple.each_with_index do |element, index|\n    result << element.to_s\n    result << delimiter unless index == tuple.length - 1\n  end\n\n  result\nend"
        ]
    },
    {
        "id": "422",
        "prompt": "Write a function to find the average of cubes of first n natural numbers.",
        "solution": "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) ",
        "code": [
            "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) "
        ],
        "pseudo": "# Define a function to find the average of cubes of first n natural numbers\ndef average_of_cubes(n):\n    # Initialize sum of cubes to 0\n    sum_of_cubes = 0\n    \n    # Iterate through the range of 1 to n+1\n    for i in range(1, n+1):\n        # Calculate the cube of the current number and add it to the sum_of_cubes\n        sum_of_cubes += i**3\n    \n    # Calculate the average by dividing the sum_of_cubes by n\n    average = sum_of_cubes / n\n    \n    # Return the average\n    return average",
        "test": [
            "assert find_Average_Of_Cube(2) == 4.5",
            "assert find_Average_Of_Cube(3) == 12",
            "assert find_Average_Of_Cube(1) == 1"
        ],
        "draft_plan": [
            "# Define a function to find the average of the cubes of the first n natural numbers.\n# Initialize a variable 'sum' to 0.\n# Iterate from 1 to n (inclusive) using 'each' iterator.\n    # Calculate the cube of the current number and add it to the 'sum'.\n# Calculate the average by dividing the 'sum' by n.\n# Return the average."
        ],
        "final_plan": [
            "def average_of_cubes(n)\n  sum = 0\n\n  (1..n).each do |num|\n    sum += num ** 3\n  end\n\n  average = sum / n.to_f\n\n  average\nend"
        ]
    },
    {
        "id": "424",
        "prompt": "Write a function to extract only the rear index element of each string in the given tuple.",
        "solution": "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) ",
        "code": [
            "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) "
        ],
        "pseudo": "# Create an empty list to store the rear index elements\n# Iterate through each string in the given tuple\n    # Get the rear index element of the current string using indexing\n    # Append the rear index element to the list\n\n# Return the list of rear index elements",
        "test": [
            "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
            "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
            "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
        ],
        "draft_plan": [
            "# Define a method to extract the rear index element of each string in a given tuple.\n# Create an empty array to store the extracted rear index elements.\n# Iterate over each string in the input tuple using 'each' iterator.\n    # Extract the last character of the current string using negative indexing.\n    # Add the extracted character to the array.\n# Return the array containing the extracted rear index elements."
        ],
        "final_plan": [
            "def extract_rear_index_elements(tuple)\n  rear_index_elements = []\n\n  tuple.each do |string|\n    rear_index_elements << string[-1]\n  end\n\n  rear_index_elements\nend"
        ]
    },
    {
        "id": "425",
        "prompt": "Write a function to count the number of sublists containing a particular element.",
        "solution": "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr",
        "code": [
            "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr"
        ],
        "pseudo": "# Initialize a count variable to 0\n\n# Iterate through each sublist in the main list\n    # Check if the particular element is present in the sublist\n        # If yes, increment the count variable\n\n# Return the count variable",
        "test": [
            "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
            "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
            "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
        ],
        "draft_plan": [
            "# Define a method to count the number of sublists containing a particular element.\n# Initialize a counter variable to 0.\n# Iterate over the input list of sublists using 'each' iterator.\n    # Check if the particular element exists in the current sublist.\n        # If true, increment the counter variable.\n# Return the counter variable, which represents the number of sublists containing the particular element."
        ],
        "final_plan": [
            "def count_sublists_with_element(list, element)\n  count = 0\n\n  list.each do |sublist|\n    count += 1 if sublist.include?(element)\n  end\n\n  count\nend"
        ]
    },
    {
        "id": "426",
        "prompt": "Write a function to filter odd numbers.",
        "solution": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums",
        "code": [
            "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums"
        ],
        "pseudo": "# Initialize an empty list to store the filtered numbers\n\n# Iterate through each number in the input list\n    # Check if the number is odd\n        # If the number is odd, append it to the filtered list\n\n# Return the filtered list",
        "test": [
            "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
            "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
            "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
        ],
        "draft_plan": [
            "# Define a method to filter odd numbers.\n# Initialize an empty array to store the filtered numbers.\n# Iterate over the input list of numbers using 'each' iterator.\n    # Check if the current number is odd by using the modulo operator (%).\n        # If true, add the number to the filtered array.\n# Return the filtered array containing only the odd numbers."
        ],
        "final_plan": [
            "def filter_odd_numbers(numbers)\n  filtered_numbers = []\n\n  numbers.each do |num|\n    filtered_numbers << num if num % 2 != 0\n  end\n\n  filtered_numbers\nend"
        ]
    },
    {
        "id": "427",
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
        "solution": "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)",
        "code": [
            "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"
        ],
        "pseudo": "# Split the input date string by '-' to get year, month, and day\n# Create a new date string in the format of dd-mm-yyyy using day, month, and year obtained from the split\n# Return the new date string",
        "test": [
            "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
            "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
            "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
        ],
        "draft_plan": [
            "# Define a method to convert a date from yyyy-mm-dd format to dd-mm-yyyy format.\n# Split the input date string by '-' to get an array of year, month, and day.\n# Extract the year, month, and day from the array.\n# Concatenate the day, month, and year with '-' as the separator to form the new date string.\n# Return the new date string."
        ],
        "final_plan": [
            "def convert_date(date)\n  parts = date.split('-')\n  year = parts[0]\n  month = parts[1]\n  day = parts[2]\n  new_date = \"#{day}-#{month}-#{year}\"\n  new_date\nend"
        ]
    },
    {
        "id": "428",
        "prompt": "Write a function to sort the given array by using shell sort.",
        "solution": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list",
        "code": [
            "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list"
        ],
        "pseudo": "# Define a function to perform shell sort on the given array\n    # Start with a large gap (length of array divided by 2)\n    # Iterate until the gap becomes 0\n        # Iterate through the array from the current gap to the end\n            # Compare the current element with the element at the position gap steps before it\n            # If the current element is smaller, swap them\n        # Reduce the gap by dividing it by 2\n\n# Call the shell sort function on the given array\n# Return the sorted array",
        "test": [
            "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
            "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
            "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
        ],
        "draft_plan": [
            "# Define a method to sort the array using Shell sort.\n# Initialize a variable 'gap' to half the length of the input array.\n# Loop until 'gap' becomes 0.\n    # Divide the 'gap' value by 2.\n    # Iterate over the subarrays created by the 'gap' value.\n        # Perform insertion sort on the subarray.\n# Return the sorted array.\n\n# Define a method to perform insertion sort on a subarray.\n# Iterate over the subarray starting from the second element.\n    # Assign the current element to a variable 'key'.\n    # Initialize a variable 'j' to the index of the previous element.\n    # Compare 'key' with the elements before it and shift them to the right if they are greater.\n    # Assign 'key' to the correct position in the subarray."
        ],
        "final_plan": [
            "def shell_sort(arr)\n  gap = arr.length / 2\n  while gap > 0\n    (gap...arr.length).each do |i|\n      key = arr[i]\n      j = i\n\n      while j >= gap && arr[j - gap] > key\n        arr[j] = arr[j - gap]\n        j -= gap\n      end\n\n      arr[j] = key\n    end\n\n    gap /= 2\n  end\n\n  arr\nend"
        ]
    },
    {
        "id": "429",
        "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "solution": "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "code": [
            "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) "
        ],
        "pseudo": "# Initialize an empty list to store the elementwise AND tuples\n\n# Iterate through each element in the first tuple\n    # Iterate through each element in the second tuple\n        # Perform elementwise AND operation on the corresponding elements of the tuples\n        # Append the result to the list of elementwise AND tuples\n\n# Return the list of elementwise AND tuples",
        "test": [
            "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
            "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
            "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
        ],
        "draft_plan": [
            "# Define a method to extract elementwise and tuples.\n# Initialize an empty array to store the elementwise and tuples.\n# Iterate over the indices of the input tuples using 'each_index' method.\n    # Extract the elements at the current index from both tuples.\n    # Perform bitwise AND operation on the elements.\n    # Append the result as a tuple to the array.\n# Return the array containing the elementwise and tuples."
        ],
        "final_plan": [
            "def extract_elementwise_and_tuples(tuple1, tuple2)\n  elementwise_and_tuples = []\n\n  tuple1.each_index do |i|\n    elementwise_and_tuples << [tuple1[i] & tuple2[i]]\n  end\n\n  elementwise_and_tuples\nend"
        ]
    },
    {
        "id": "430",
        "prompt": "Write a function to find the directrix of a parabola.",
        "solution": "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix",
        "code": [
            "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix"
        ],
        "pseudo": "To find the directrix of a parabola, we can use the equation of a parabola in vertex form:\n\ny = (1 / (4 * p)) * (x - h)^2 + k\n\nwhere (h, k) is the vertex of the parabola and p is the distance from the vertex to the focus.\n\nThe directrix of the parabola is a horizontal line given by the equation:\n\ny = k - p\n\nTherefore, the logic to find the directrix of a parabola is as follows:\n\n1. Given the vertex coordinates (h, k) and the value of p, calculate the value of the directrix using the equation y = k - p.\n\n2. Return the value of the directrix.\n\nHere is the code implementation:\n\n```python\ndef find_directrix(h, k, p):\n    directrix = k - p\n    return directrix\n```\n\nYou can call this function with the vertex coordinates (h, k) and the value of p to find the directrix of the parabola.",
        "test": [
            "assert parabola_directrix(5,3,2)==-198",
            "assert parabola_directrix(9,8,4)==-2336",
            "assert parabola_directrix(2,4,6)==-130"
        ],
        "draft_plan": [
            "To find the directrix of a parabola, we need to know the vertex of the parabola and the value of its focus.\n\n# Write a function to find the directrix of a parabola.\n# The function should take three parameters: a, b, and c, which represent the coefficients of the quadratic equation ax^2 + bx + c = 0.\n\n# Calculate the x-coordinate of the vertex using the formula -b/2a.\n# Calculate the y-coordinate of the vertex using the formula c - b^2/4a.\n# Calculate the distance between the vertex and the focus using the formula 1/4a.\n# If a > 0, the directrix is a horizontal line given by the equation y = y-coordinate of the vertex - distance.\n# If a < 0, the directrix is a horizontal line given by the equation y = y-coordinate of the vertex + distance.\n# Return the equation of the directrix."
        ],
        "final_plan": [
            "def find_directrix(a, b, c)\n  vertex_x = -b / (2 * a)\n  vertex_y = c - (b**2) / (4 * a)\n  distance = 1 / (4 * a)\n\n  if a > 0\n    directrix = \"y = #{vertex_y - distance}\"\n  elsif a < 0\n    directrix = \"y = #{vertex_y + distance}\"\n  else\n    directrix = \"Invalid parabola: a cannot be zero\"\n  end\n\n  directrix\nend"
        ]
    },
    {
        "id": "431",
        "prompt": "Write a function that takes two lists and returns true if they have at least one common element.",
        "solution": "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result",
        "code": [
            "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result"
        ],
        "pseudo": "# Iterate through each element in the first list\n    # Check if the current element is in the second list\n        # If found, return True\n\n# If no common element is found, return False",
        "test": [
            "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
            "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
            "assert common_element(['a','b','c'], ['d','b','e'])==True"
        ],
        "draft_plan": [
            "# Define a method that takes two lists as input.\n# Iterate over the elements in the first list.\n    # Check if the current element exists in the second list.\n        # If true, return true.\n# If no common element is found, return false."
        ],
        "final_plan": [
            "def have_common_element(list1, list2)\n  list1.each do |elem|\n    return true if list2.include?(elem)\n  end\n  false\nend"
        ]
    },
    {
        "id": "432",
        "prompt": "Write a function to find the median length of a trapezium.",
        "solution": "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median",
        "code": [
            "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median"
        ],
        "pseudo": "# Define a function to calculate the median length of a trapezium\n    # Calculate the sum of the lengths of the two parallel sides of the trapezium\n    # Divide the sum by 2 to get the average length\n    # Return the average length as the median length of the trapezium",
        "test": [
            "assert median_trapezium(15,25,35)==20",
            "assert median_trapezium(10,20,30)==15",
            "assert median_trapezium(6,9,4)==7.5"
        ],
        "draft_plan": [
            "# Define a method to find the median length of a trapezium.\n# Take four arguments as input representing the lengths of the four sides of the trapezium.\n# Calculate the sum of the lengths of the parallel sides of the trapezium.\n# Subtract the length of the shorter parallel side from the sum and divide the result by 2.\n# Return the resulting value as the median length of the trapezium."
        ],
        "final_plan": [
            "def find_median_length(side1, side2, side3, side4)\n  sum_of_sides = side1 + side2 + side3 + side4\n  median_length = (sum_of_sides - [side1, side2].min) / 2.0\n  median_length\nend"
        ]
    },
    {
        "id": "433",
        "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "solution": "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]",
        "code": [
            "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]"
        ],
        "pseudo": "# Define a function that takes a number and an array as input\n    # Iterate through each element in the array\n        # Check if the number is greater than the current element\n            # If it is, return True\n    # If the number is not greater than any element in the array, return False",
        "test": [
            "assert check_greater([1, 2, 3, 4, 5], 4) == False",
            "assert check_greater([2, 3, 4, 5, 6], 8) == True",
            "assert check_greater([9, 7, 4, 8, 6, 1], 11) == True"
        ],
        "draft_plan": [
            "# Define a method to check whether a given number is greater than the elements of an array.\n# Iterate over each element in the array using 'each' iterator.\n    # Check if the current element is less than or equal to the given number.\n        # If true, return false.\n# If the loop completes without returning false, return true."
        ],
        "final_plan": [
            "def greater_than_elements?(number, array)\n  array.each do |element|\n    return false if element <= number\n  end\n  true\nend"
        ]
    },
    {
        "id": "434",
        "prompt": "Write a function that matches a string that has an a followed by one or more b's.",
        "solution": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n",
        "code": [
            "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n"
        ],
        "pseudo": "import re\n\ndef match_string(string):\n    pattern = r'a+b+'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False",
        "test": [
            "assert text_match_one(\"ac\")==False",
            "assert text_match_one(\"dc\")==False",
            "assert text_match_one(\"abba\")==True"
        ],
        "draft_plan": [
            "# Define a method to check if a string matches the pattern 'a' followed by one or more 'b's.\n# Use regular expressions to match the pattern.\n# Use the =~ operator to check if the string matches the pattern.\n# Return true if the string matches the pattern, otherwise return false."
        ],
        "final_plan": [
            "def match_pattern(string)\n  pattern = /ab+/\n  return true if string =~ pattern\n  false\nend"
        ]
    },
    {
        "id": "435",
        "prompt": "Write a function to find the last digit of a given number.",
        "solution": "def last_Digit(n) :\n    return (n % 10) ",
        "code": [
            "def last_Digit(n) :\n    return (n % 10) "
        ],
        "pseudo": "To find the last digit of a given number, you can use the modulo operator (`%`) to get the remainder when dividing the number by 10. The remainder will be the last digit of the number.\n\nHere's the code logic:\n\n1. Define a function `find_last_digit` that takes a number as input.\n2. Inside the function, calculate the remainder of the number when divided by 10 using the modulo operator: `last_digit = number % 10`.\n3. Return the value of `last_digit`.\n\nHere's the code implementation in Python:\n\n```python\ndef find_last_digit(number):\n    last_digit = number % 10\n    return last_digit\n```\n\nYou can then call this function by passing a number as an argument to get the last digit. For example:\n\n```python\nprint(find_last_digit(12345))  # Output: 5\nprint(find_last_digit(987654321))  # Output: 1\nprint(find_last_digit(0))  # Output: 0\n```",
        "test": [
            "assert last_Digit(123) == 3",
            "assert last_Digit(25) == 5",
            "assert last_Digit(30) == 0"
        ],
        "draft_plan": [
            "# Define a method to find the last digit of a given number.\n# Convert the number to a string.\n# Extract the last character of the string, which represents the last digit.\n# Convert the last digit back to an integer.\n# Return the last digit."
        ],
        "final_plan": [
            "def find_last_digit(number)\n  last_digit = number.to_s[-1].to_i\n  last_digit\nend"
        ]
    },
    {
        "id": "436",
        "prompt": "Write a function to return the negative numbers in a list.",
        "solution": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ",
        "code": [
            "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out "
        ],
        "pseudo": "# Initialize an empty list to store the negative numbers\n\n# Iterate through each element in the input list\n    # Check if the current element is less than 0\n        # If the element is negative, append it to the list of negative numbers\n\n# Return the list of negative numbers",
        "test": [
            "assert neg_nos([-1,4,5,-6]) == [-1,-6]",
            "assert neg_nos([-1,-2,3,4]) == [-1,-2]",
            "assert neg_nos([-7,-6,8,9]) == [-7,-6]"
        ],
        "draft_plan": [
            "# Define a method to return negative numbers in a list.\n# Initialize an empty array to store the negative numbers.\n# Iterate over the input list using 'each' iterator.\n    # Check if the current number is less than 0.\n        # If true, add the number to the array of negative numbers.\n# Return the array of negative numbers."
        ],
        "final_plan": [
            "def get_negative_numbers(lst)\n  negative_numbers = []\n\n  lst.each do |num|\n    negative_numbers << num if num < 0\n  end\n\n  negative_numbers\nend"
        ]
    },
    {
        "id": "437",
        "prompt": "Write a function to remove odd characters in a string.",
        "solution": "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2",
        "code": [
            "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2"
        ],
        "pseudo": "# Initialize an empty string to store the result\n\n# Iterate through each character in the input string\n    # Check if the index of the current character is even\n        # If the index is even, append the character to the result string\n\n# Return the result string",
        "test": [
            "assert remove_odd(\"python\")==(\"yhn\")",
            "assert remove_odd(\"program\")==(\"rga\")",
            "assert remove_odd(\"language\")==(\"agae\")"
        ],
        "draft_plan": [
            "# Define a method to remove odd characters in a string.\n# Initialize an empty string to store the result.\n# Iterate over each character in the input string.\n    # Check if the index of the character is even.\n        # If true, append the character to the result string.\n# Return the result string."
        ],
        "final_plan": [
            "def remove_odd_characters(string)\n  result = \"\"\n\n  string.each_char.with_index do |char, index|\n    result += char if index.even?\n  end\n\n  result\nend"
        ]
    },
    {
        "id": "438",
        "prompt": "Write a function to count bidirectional tuple pairs.",
        "solution": "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res",
        "code": [
            "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res"
        ],
        "pseudo": "# Initialize a counter variable to 0\n\n# Iterate through each pair in the array\n    # Check if the reverse of the current pair exists in the array\n        # If it does, increment the counter by 1\n\n# Return the counter value",
        "test": [
            "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3",
            "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2",
            "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4"
        ],
        "draft_plan": [
            "# Define a method to count bidirectional tuple pairs.\n# Initialize a counter variable for bidirectional pairs.\n# Iterate over the input list of tuples using 'each' iterator.\n    # Extract the two elements of the current tuple.\n    # Create both the original pair and the reverse pair as arrays.\n    # Check if both the original pair and the reverse pair exist in the input list.\n        # If true, increment the bidirectional pair count by 1.\n# Return the count of bidirectional pairs."
        ],
        "final_plan": [
            "def count_bidirectional(test_list)\n  bidirectional_count = 0\n\n  test_list.each do |tup|\n    a, b = tup[0], tup[1]\n    original = [a, b]\n    reverse = [b, a]\n\n    if test_list.include?(original) && test_list.include?(reverse)\n      bidirectional_count += 1\n    end\n  end\n\n  bidirectional_count\nend"
        ]
    },
    {
        "id": "439",
        "prompt": "Write a function to join a list of multiple integers into a single integer.",
        "solution": "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x",
        "code": [
            "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x"
        ],
        "pseudo": "# Convert each integer in the list to a string\n# Join the list of strings into a single string\n# Convert the resulting string back to an integer and return it",
        "test": [
            "assert multiple_to_single([11, 33, 50])==113350",
            "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
            "assert multiple_to_single([10,15,20,25])==10152025"
        ],
        "draft_plan": [
            "# Join a list of multiple integers into a single integer.\n# Convert each integer in the list to a string using 'map' method.\n# Use 'join' method to concatenate the strings into a single string.\n# Convert the resulting string back to an integer using 'to_i' method.\n# Return the final integer."
        ],
        "final_plan": [
            "def join_integers(lst)\n  lst.map(&:to_s).join('').to_i\nend"
        ]
    },
    {
        "id": "440",
        "prompt": "Write a function to find the first adverb and their positions in a given sentence.",
        "solution": "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))",
        "code": [
            "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))"
        ],
        "pseudo": "# Split the sentence into a list of words\n\n# Iterate through each word and its index in the list\n    # Check if the word ends with \"ly\" (indicating it is an adverb)\n        # If it is an adverb, store its index and break the loop\n\n# If an adverb is found, return its index and the adverb itself\n# If no adverb is found, return None",
        "test": [
            "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
            "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
            "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
        ],
        "draft_plan": [
            "# Define a method to find the first adverb and their positions in a given sentence.\n# Split the input sentence into an array of words using the 'split' method.\n# Iterate over the array of words using 'each_with_index' iterator.\n    # Check if the current word ends with \"ly\" using the 'end_with?' method.\n        # If true, return the current word and its index.\n# If no adverb is found, return 'nil' for both the word and index."
        ],
        "final_plan": [
            "def find_first_adverb(sentence)\n  words = sentence.split(\" \")\n\n  words.each_with_index do |word, index|\n    if word.end_with?(\"ly\")\n      return [word, index]\n    end\n  end\n\n  return [nil, nil]\nend"
        ]
    },
    {
        "id": "441",
        "prompt": "Write a function to find the surface area of a cube of a given size.",
        "solution": "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea",
        "code": [
            "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea"
        ],
        "pseudo": "To find the surface area of a cube, we can use the formula: surface_area = 6 * side_length^2\n\nHere is the code logic to find the surface area of a cube in Python:\n\n1. Define a function named `calculate_cube_surface_area` that takes a parameter `side_length`.\n2. Calculate the surface area using the formula `surface_area = 6 * side_length^2`.\n3. Return the calculated surface area.\n\nHere is the code implementation:\n\n```python\ndef calculate_cube_surface_area(side_length):\n    surface_area = 6 * side_length**2\n    return surface_area\n```\n\nYou can call this function with the desired `side_length` value to get the surface area of the cube.",
        "test": [
            "assert surfacearea_cube(5)==150",
            "assert surfacearea_cube(3)==54",
            "assert surfacearea_cube(10)==600"
        ],
        "draft_plan": [
            "# Define a method to find the surface area of a cube.\n# Accept a parameter 'size' which represents the length of one side of the cube.\n# Calculate the surface area of the cube using the formula: 6 * size * size\n# Return the calculated surface area."
        ],
        "final_plan": [
            "def surface_area_of_cube(size)\n  surface_area = 6 * size * size\n  return surface_area\nend"
        ]
    },
    {
        "id": "442",
        "prompt": "Write a function to find the ration of positive numbers in an array of integers.",
        "solution": "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)",
        "code": [
            "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)"
        ],
        "pseudo": "# Initialize a counter for positive numbers\n# Iterate through each element in the array\n    # Check if the element is greater than 0\n        # If it is, increment the counter\n\n# Calculate the ratio of positive numbers by dividing the counter by the length of the array\n# Return the ratio",
        "test": [
            "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
            "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
            "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
        ],
        "draft_plan": [
            "# Define a method to find the ratio of positive numbers in an array.\n# Initialize a variable 'positive_count' to 0 to keep track of the number of positive numbers.\n# Iterate over each element in the input array using 'each' iterator.\n    # Check if the current element is greater than 0.\n        # If true, increment 'positive_count' by 1.\n# Calculate the ratio of positive numbers by dividing 'positive_count' by the length of the input array.\n# Return the ratio as the result."
        ],
        "final_plan": [
            "def positive_ratio(arr)\n  positive_count = 0\n\n  arr.each do |num|\n    positive_count += 1 if num > 0\n  end\n\n  ratio = positive_count.to_f / arr.length\n  ratio\nend"
        ]
    },
    {
        "id": "443",
        "prompt": "Write a function to find the largest negative number from the given list.",
        "solution": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
        "code": [
            "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max"
        ],
        "pseudo": "# Initialize a variable 'largest_negative' to None\n\n# Iterate through each number in the list\n    # Check if the number is negative\n        # If 'largest_negative' is None or the current number is greater than 'largest_negative', update 'largest_negative' to the current number\n\n# Return 'largest_negative'",
        "test": [
            "assert largest_neg([1,2,3,-4,-6]) == -6",
            "assert largest_neg([1,2,3,-8,-9]) == -9",
            "assert largest_neg([1,2,3,4,-1]) == -1"
        ],
        "draft_plan": [
            "# Define a function to find the largest negative number from a given list.\n# Initialize a variable 'largest_negative' to nil.\n# Iterate through each number in the list.\n    # Check if the current number is negative.\n        # If true, check if 'largest_negative' is nil or the current number is greater than 'largest_negative'.\n            # If true, update 'largest_negative' to the current number.\n# Return the value of 'largest_negative'."
        ],
        "final_plan": [
            "def find_largest_negative(lst)\n  largest_negative = nil\n\n  lst.each do |num|\n    if num < 0\n      if largest_negative.nil? || num > largest_negative\n        largest_negative = num\n      end\n    end\n  end\n\n  largest_negative\nend"
        ]
    },
    {
        "id": "444",
        "prompt": "Write a function to trim each tuple by k in the given tuple list.",
        "solution": "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) ",
        "code": [
            "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) "
        ],
        "pseudo": "# Create an empty list to store the trimmed tuples\n\n# Iterate through each tuple in the given list\n    # Check if the length of the current tuple is greater than k\n        # If yes, trim the tuple by removing the first k elements\n        # Append the trimmed tuple to the new list\n\n# Return the new list containing the trimmed tuples",
        "test": [
            "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
            "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
            "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
        ],
        "draft_plan": [
            "# Define a method to trim each tuple by k.\n# Iterate over the input list of tuples using 'map' iterator.\n    # Create a new tuple where each element is trimmed by k (e.g. tuple.map { |element| element[k..-1] })\n# Return the new list of trimmed tuples."
        ],
        "final_plan": [
            "def trim_tuples(tuple_list, k)\n  tuple_list.map { |tuple| tuple.map { |element| element[k..-1] } }\nend"
        ]
    },
    {
        "id": "445",
        "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
        "solution": "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "code": [
            "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) "
        ],
        "pseudo": "# Create an empty list to store the result of multiplication\n\n# Iterate through the indexes of the tuples using the range of the length of the tuples\n    # Multiply the elements at the current index of both tuples\n    # Append the result to the list\n\n# Return the list",
        "test": [
            "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
            "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
            "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
        ],
        "draft_plan": [
            "# Define a method to perform index-wise multiplication of tuple elements in two tuples.\n# Initialize an empty array to store the result of the multiplication.\n# Iterate over the indices of the tuples (assuming they have the same length).\n    # Multiply the elements at the current index in both tuples.\n    # Append the result to the array.\n# Return the resulting array."
        ],
        "final_plan": [
            "def index_wise_multiplication(tuple1, tuple2)\n  result = []\n\n  tuple1.each_index do |i|\n    result << tuple1[i] * tuple2[i]\n  end\n\n  result\nend"
        ]
    },
    {
        "id": "446",
        "prompt": "Write a function to count the occurence of all elements of list in a tuple.",
        "solution": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ",
        "code": [
            "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  "
        ],
        "pseudo": "# Initialize an empty dictionary to store the element counts\n\n# Iterate through each element in the list\n    # Check if the element exists in the tuple\n        # If it exists, increment the count in the dictionary by 1\n        # If it doesn't exist, add the element to the dictionary with a count of 1\n\n# Return the dictionary with the element counts",
        "test": [
            "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
            "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
            "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
        ],
        "draft_plan": [
            "# Define a method to count the occurrence of elements in a list in a tuple.\n# Create an empty hash to store the counts of each element.\n# Iterate over the elements of the list using 'each' iterator.\n    # Check if the current element exists as a key in the hash.\n        # If true, increment the count of the element.\n        # If false, add the element as a key to the hash and initialize its count to 1.\n# Return the hash containing the counts of each element."
        ],
        "final_plan": [
            "def count_occurrence(list, tuple)\n  counts = Hash.new(0)\n\n  list.each do |element|\n    counts[element] += 1 if tuple.include?(element)\n  end\n\n  counts\nend"
        ]
    },
    {
        "id": "447",
        "prompt": "Write a function to find cubes of individual elements in a list.",
        "solution": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums",
        "code": [
            "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums"
        ],
        "pseudo": "# Create an empty list to store the cubes of individual elements\n# Iterate through each element in the input list\n    # Calculate the cube of the current element by raising it to the power of 3\n    # Append the cube to the result list\n\n# Return the result list containing the cubes of individual elements",
        "test": [
            "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
            "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
            "assert cube_nums([12,15])==([1728, 3375])"
        ],
        "draft_plan": [
            "# Define a method to find cubes of individual elements in a list.\n# Create an empty array to store the cubes.\n# Iterate over the input list of numbers using 'each' iterator.\n    # Calculate the cube of each number and store it in the array.\n# Return the array containing the cubes."
        ],
        "final_plan": [
            "def find_cubes(lst)\n  cubes = []\n\n  lst.each do |num|\n    cubes << num ** 3\n  end\n\n  cubes\nend"
        ]
    },
    {
        "id": "448",
        "prompt": "Write a function to calculate the sum of perrin numbers.",
        "solution": "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum",
        "code": [
            "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum"
        ],
        "pseudo": "# Define a function to calculate the sum of Perrin numbers up to a given limit\n\n# Initialize the first three Perrin numbers\n# Initialize the sum of Perrin numbers to 0\n\n# Iterate from 3 to the given limit\n    # Calculate the next Perrin number by summing the previous three Perrin numbers\n    # Add the current Perrin number to the sum\n\n# Return the sum of Perrin numbers",
        "test": [
            "assert cal_sum(9) == 49",
            "assert cal_sum(10) == 66",
            "assert cal_sum(11) == 88"
        ],
        "draft_plan": [
            "# Define a method to calculate the sum of Perrin numbers.\n# Check if the input number is less than or equal to 2.\n    # If true, return 0.\n# Initialize a list to store the Perrin numbers with initial values 0, 1, and 2.\n# Initialize a variable 'sum' to store the sum of the Perrin numbers.\n# Iterate from 3 to the input number.\n    # Calculate the next Perrin number by summing the previous three numbers in the list.\n    # Append the new Perrin number to the list.\n    # Add the new Perrin number to the 'sum' variable.\n# Return the 'sum' variable as the sum of the Perrin numbers."
        ],
        "final_plan": [
            "def calculate_perrin_sum(num)\n  return 0 if num <= 2\n  \n  perrin = [0, 1, 2]\n  sum = 0\n  \n  (3..num).each do |i|\n    perrin[i] = perrin[i - 2] + perrin[i - 3]\n    sum += perrin[i]\n  end\n  \n  sum\nend"
        ]
    },
    {
        "id": "450",
        "prompt": "Write a function to extract specified size of strings from a given list of string values.",
        "solution": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result",
        "code": [
            "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result"
        ],
        "pseudo": "# Initialize an empty list to store the extracted strings\n\n# Iterate through each string in the given list\n    # Check if the length of the current string is equal to the specified size\n        # If it matches, append the string to the result list\n\n# Return the list of extracted strings",
        "test": [
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
        ],
        "draft_plan": [
            "# Define a method to extract specified size of strings from a list.\n# Initialize an empty array to store the extracted strings.\n# Iterate over each string in the input list using 'each' iterator.\n    # Check if the length of the current string is equal to the specified size.\n        # If true, add the string to the array of extracted strings.\n# Return the array of extracted strings."
        ],
        "final_plan": [
            "def extract_strings_by_size(strings, size)\n  extracted_strings = []\n\n  strings.each do |string|\n    extracted_strings << string if string.length == size\n  end\n\n  extracted_strings\nend"
        ]
    },
    {
        "id": "451",
        "prompt": "Write a function to remove all whitespaces from the given string.",
        "solution": "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))",
        "code": [
            "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))"
        ],
        "pseudo": "# Initialize an empty string to store the modified string\n\n# Iterate through each character in the input string\n    # Check if the current character is a whitespace\n        # If it is not a whitespace, append it to the modified string\n\n# Return the modified string without whitespaces",
        "test": [
            "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
            "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
            "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
        ],
        "draft_plan": [
            "# Define a method to remove all whitespaces from a given string.\n# Use the gsub method to replace all whitespaces with an empty string.\n# Return the modified string."
        ],
        "final_plan": [
            "def remove_whitespaces(string)\n  string.gsub(/\\s+/, \"\")\nend"
        ]
    },
    {
        "id": "452",
        "prompt": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.",
        "solution": "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0",
        "code": [
            "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0"
        ],
        "pseudo": "# Define a function that takes the given amount as input\n    # Check if the given amount is less than the selling price\n        # If it is less, calculate the loss amount by subtracting the given amount from the selling price\n        # Return the loss amount\n    # If the given amount is not less than the selling price, return 0",
        "test": [
            "assert loss_amount(1500,1200)==0",
            "assert loss_amount(100,200)==100",
            "assert loss_amount(2000,5000)==3000"
        ],
        "draft_plan": [
            "# Define a function to calculate the loss amount on a sale.\n# Check if the given amount is less than the cost price.\n    # If true, calculate the loss amount by subtracting the given amount from the cost price.\n    # Return the loss amount.\n# If the given amount is greater than or equal to the cost price, return 0."
        ],
        "final_plan": [
            "def calculate_loss(cost_price, given_amount)\n  if given_amount < cost_price\n    loss_amount = cost_price - given_amount\n    return loss_amount\n  end\n\n  return 0\nend"
        ]
    },
    {
        "id": "453",
        "prompt": "Write a function to find the sum of even factors of a number.",
        "solution": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res",
        "code": [
            "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res"
        ],
        "pseudo": "# Initialize the sum of even factors to 0\n\n# Iterate from 1 to the given number (inclusive)\n    # Check if the current number is a factor of the given number\n        # Check if the current number is even\n            # If the current number is even, add it to the sum of even factors\n\n# Return the sum of even factors",
        "test": [
            "assert sumofFactors(18) == 26",
            "assert sumofFactors(30) == 48",
            "assert sumofFactors(6) == 8"
        ],
        "draft_plan": [
            "# Define a method to find the sum of even factors of a number.\n# Initialize a variable 'sum' to 0 to store the sum of even factors.\n# Iterate from 1 to the square root of the input number using 'upto' iterator.\n    # Check if the current number is a factor of the input number.\n        # If true, check if the factor is even.\n            # If true, add the factor to the 'sum' variable.\n            # If false, continue to the next iteration.\n# Return the value of 'sum' as the sum of even factors."
        ],
        "final_plan": [
            "def sum_of_even_factors(number)\n  sum = 0\n\n  1.upto(Math.sqrt(number)) do |i|\n    if number % i == 0\n      if i % 2 == 0\n        sum += i\n      end\n\n      if (number / i) % 2 == 0\n        sum += (number / i)\n      end\n    end\n  end\n\n  sum\nend"
        ]
    },
    {
        "id": "454",
        "prompt": "Write a function that matches a word containing 'z'.",
        "solution": "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
        "code": [
            "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False"
        ],
        "pseudo": "# Iterate through each word in the given list\n    # Check if the character 'z' is present in the word\n        # If 'z' is found, add the word to a new list\n\n# Return the new list containing words with 'z'",
        "test": [
            "assert text_match_wordz(\"pythonz.\")==True",
            "assert text_match_wordz(\"xyz.\")==True",
            "assert text_match_wordz(\"  lang  .\")==False"
        ],
        "draft_plan": [
            "# Define a method to match a word containing 'z'.\n# Iterate over each word in the input list.\n    # Check if the word contains the letter 'z' using the 'include?' method.\n        # If true, add the word to a new list.\n# Return the new list of words that contain 'z'."
        ],
        "final_plan": [
            "def match_word_with_z(word_list)\n  words_with_z = []\n\n  word_list.each do |word|\n    words_with_z << word if word.include?('z')\n  end\n\n  words_with_z\nend"
        ]
    },
    {
        "id": "455",
        "prompt": "Write a function to check whether the given month number contains 31 days or not.",
        "solution": "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False",
        "code": [
            "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False"
        ],
        "pseudo": "# Create a list of months with 31 days\n    # Use the month numbers from 1 to 12\n\n# Check if the given month number is in the list of months with 31 days\n    # If it is, return True\n    # Otherwise, return False",
        "test": [
            "assert check_monthnumb_number(5)==True",
            "assert check_monthnumb_number(2)==False",
            "assert check_monthnumb_number(6)==False"
        ],
        "draft_plan": [
            "# Define a method to check whether a given month number contains 31 days or not.\n# Create a hash to map month numbers to the corresponding number of days.\n# Check if the given month number exists in the hash and has a value of 31.\n    # If true, return true to indicate that the month has 31 days.\n# If the given month number does not exist in the hash or has a value other than 31, return false to indicate that the month does not have 31 days."
        ],
        "final_plan": [
            "def has_31_days?(month_number)\n  days_in_month = {\n    1 => 31,  # January\n    2 => 28,  # February\n    3 => 31,  # March\n    4 => 30,  # April\n    5 => 31,  # May\n    6 => 30,  # June\n    7 => 31,  # July\n    8 => 31,  # August\n    9 => 30,  # September\n    10 => 31, # October\n    11 => 30, # November\n    12 => 31  # December\n  }\n\n  days_in_month[month_number] == 31\nend"
        ]
    },
    {
        "id": "456",
        "prompt": "Write a function to reverse each string in a given list of string values.",
        "solution": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result",
        "code": [
            "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result"
        ],
        "pseudo": "# Iterate through each string in the given list\n    # Reverse the current string using string slicing\n    # Update the current string in the list with the reversed string\n\n# Return the modified list",
        "test": [
            "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
            "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
            "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
        ],
        "draft_plan": [
            "# Define a method to reverse each string in the given list.\n# Initialize an empty array to store the reversed strings.\n# Iterate over each string in the input list using 'each' iterator.\n    # Reverse the current string using the 'reverse' method and store it in a new variable.\n    # Append the reversed string to the array.\n# Return the array of reversed strings."
        ],
        "final_plan": [
            "def reverse_strings(lst)\n  reversed = []\n\n  lst.each do |string|\n    reversed << string.reverse\n  end\n\n  reversed\nend"
        ]
    },
    {
        "id": "457",
        "prompt": "Write a function to find the sublist having minimum length.",
        "solution": "def Find_Min(lst): \n    return min(lst, key=len) ",
        "code": [
            "def Find_Min(lst): \n    return min(lst, key=len) "
        ],
        "pseudo": "# If the input list is empty, return an empty list\n\n# Initialize the minimum length variable to a large value and the minimum sublist to an empty list\n\n# Iterate through each sublist in the input list\n    # If the length of the current sublist is less than the minimum length\n        # Update the minimum length and the minimum sublist\n\n# Return the minimum sublist",
        "test": [
            "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
            "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
            "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
        ],
        "draft_plan": [
            "# Define a method to find the sublist with the minimum length.\n# Initialize a variable 'min_length' with a large value.\n# Initialize a variable 'min_sublist' to store the sublist with the minimum length.\n# Iterate through each sublist in the input list.\n    # Check if the length of the current sublist is smaller than 'min_length'.\n        # If true, update 'min_length' to the length of the current sublist and update 'min_sublist' to the current sublist.\n# Return 'min_sublist', which will be the sublist with the minimum length."
        ],
        "final_plan": [
            "def find_min_sublist(lst)\n  min_length = Float::INFINITY\n  min_sublist = []\n\n  lst.each do |sublist|\n    if sublist.length < min_length\n      min_length = sublist.length\n      min_sublist = sublist\n    end\n  end\n\n  min_sublist\nend"
        ]
    },
    {
        "id": "458",
        "prompt": "Write a function to find the area of a rectangle.",
        "solution": "def rectangle_area(l,b):\n  area=l*b\n  return area",
        "code": [
            "def rectangle_area(l,b):\n  area=l*b\n  return area"
        ],
        "pseudo": "To find the area of a rectangle, we need the length and width of the rectangle. The formula to calculate the area of a rectangle is:\n\nArea = length * width\n\nHere is the code logic to find the area of a rectangle:\n\n1. Define a function named `calculate_area` that takes two parameters, `length` and `width`.\n2. Inside the function, calculate the area by multiplying the `length` and `width` parameters.\n3. Return the calculated area from the function.\n\nHere is the code implementation in Python:\n\n```python\ndef calculate_area(length, width):\n    area = length * width\n    return area\n\n# Example usage:\nlength = 5\nwidth = 3\narea = calculate_area(length, width)\nprint(\"The area of the rectangle is:\", area)\n```\n\nThis will output:\n```\nThe area of the rectangle is: 15\n```\n\nYou can replace the values of `length` and `width` with your own values to find the area of a different rectangle.",
        "test": [
            "assert rectangle_area(10,20)==200",
            "assert rectangle_area(10,5)==50",
            "assert rectangle_area(4,2)==8"
        ],
        "draft_plan": [
            "# Define a method to calculate the area of a rectangle.\n# Take two parameters as input, length and width, representing the dimensions of the rectangle.\n# Multiply the length by the width to calculate the area.\n# Return the calculated area."
        ],
        "final_plan": [
            "def calculate_rectangle_area(length, width)\n  area = length * width\n  area\nend"
        ]
    },
    {
        "id": "459",
        "prompt": "Write a function to remove uppercase substrings from a given string.",
        "solution": "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)",
        "code": [
            "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)"
        ],
        "pseudo": "# Initialize an empty string to store the result\n\n# Iterate through each character in the input string\n    # Check if the current character is lowercase\n        # If it is lowercase, append it to the result string\n\n# Return the result string",
        "test": [
            "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
            "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
            "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
        ],
        "draft_plan": [
            "# Define a method to remove uppercase substrings from a given string.\n# Create an empty string to store the result.\n# Iterate over each character in the input string.\n    # Check if the character is uppercase.\n        # If true, continue to the next character without appending it to the result string.\n        # If false, append the character to the result string.\n# Return the result string."
        ],
        "final_plan": [
            "def remove_uppercase_substrings(string)\n  result = \"\"\n\n  string.each_char do |char|\n    next if char =~ /[A-Z]/\n    result += char\n  end\n\n  result\nend"
        ]
    },
    {
        "id": "460",
        "prompt": "Write a function to get the first element of each sublist.",
        "solution": "def Extract(lst): \n    return [item[0] for item in lst] ",
        "code": [
            "def Extract(lst): \n    return [item[0] for item in lst] "
        ],
        "pseudo": "# Create an empty list to store the first elements of each sublist\n\n# Iterate through each sublist in the input list\n    # Append the first element of the current sublist to the result list\n\n# Return the result list",
        "test": [
            "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
            "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
            "assert Extract([[9,8,1],[1,2]]) == [9,1]"
        ],
        "draft_plan": [
            "# Define a method to get the first element of each sublist.\n# Initialize an empty array to store the first elements.\n# Iterate over the input list of sublists using 'each' iterator.\n    # Get the first element of the current sublist using the index [0].\n    # Append the first element to the result array.\n# Return the result array."
        ],
        "final_plan": [
            "def get_first_elements(sublists)\n  first_elements = []\n\n  sublists.each do |sublist|\n    first_elements << sublist[0]\n  end\n\n  first_elements\nend"
        ]
    },
    {
        "id": "461",
        "prompt": "Write a function to count the upper case characters in a given string.",
        "solution": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
        "code": [
            "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr"
        ],
        "pseudo": "# Initialize a counter variable to keep track of the number of uppercase characters\n\n# Iterate through each character in the input string\n    # Check if the current character is uppercase\n        # If it is, increment the counter variable\n\n# Return the counter variable, which represents the number of uppercase characters in the string",
        "test": [
            "assert upper_ctr('PYthon') == 1",
            "assert upper_ctr('BigData') == 1",
            "assert upper_ctr('program') == 0"
        ],
        "draft_plan": [
            "# Define a method to count the upper case characters in a string.\n# Initialize a counter variable for the count of upper case characters.\n# Iterate over each character in the input string.\n    # Check if the current character is an upper case letter.\n        # If true, increment the counter by 1.\n# Return the final count of upper case characters."
        ],
        "final_plan": [
            "def count_uppercase_chars(string)\n  count = 0\n\n  string.each_char do |char|\n    count += 1 if char.match?(/[A-Z]/)\n  end\n\n  count\nend"
        ]
    },
    {
        "id": "462",
        "prompt": "Write a function to find all possible combinations of the elements of a given list.",
        "solution": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result",
        "code": [
            "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result"
        ],
        "pseudo": "# Import the combinations function from the itertools module\n\n# Define the function to find all possible combinations\n    # Initialize an empty list to store the combinations\n    \n    # Use a for loop to iterate through different combination lengths\n        # Generate all combinations of the given list for the current combination length\n        # Append the combinations to the result list\n    \n    # Return the list of all possible combinations",
        "test": [
            "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
            "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
            "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
        ],
        "draft_plan": [
            "# Define a method to find all possible combinations of a list.\n# Create an empty array to store the combinations.\n# Use nested loops to iterate through each element of the list.\n    # Use a second loop to iterate through the remaining elements of the list.\n        # Create an empty array to store the current combination.\n        # Add the current element to the combination array.\n        # Add the remaining elements to the combination array.\n        # Add the combination array to the combinations array.\n# Return the combinations array."
        ],
        "final_plan": [
            "def find_combinations(lst)\n  combinations = []\n\n  (0...lst.length).each do |i|\n    (i...lst.length).each do |j|\n      combination = []\n      combination << lst[i]\n      combination << lst[j]\n      combinations << combination\n    end\n  end\n\n  combinations\nend"
        ]
    },
    {
        "id": "463",
        "prompt": "Write a function to find the maximum product subarray of the given array.",
        "solution": "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far",
        "code": [
            "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far"
        ],
        "pseudo": "# Initialize variables to store the maximum product, current maximum product, current minimum product, and the result\n# Set the maximum product and current maximum product to the first element of the array\n# Iterate through each element in the array starting from the second element\n    # Update the current maximum product and current minimum product by considering the current element\n    # Check if the current element is negative\n        # If it is negative, swap the current maximum product and current minimum product\n    # Check if the current maximum product is greater than the maximum product\n        # If it is, update the maximum product\n    # Check if the current element is greater than the current maximum product\n        # If it is, update the current maximum product\n    # Check if the current element is less than the current minimum product\n        # If it is, update the current minimum product\n    # Check if the maximum product is greater than the result\n        # If it is, update the result\n\n# Return the result",
        "test": [
            "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
            "assert max_subarray_product([6, -3, -10, 0, 2]) == 180",
            "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
        ],
        "draft_plan": [
            "# Define a function to find the maximum product subarray.\n# Initialize variables 'max_product', 'current_max', and 'current_min' to the first element of the array.\n# Iterate over the array starting from the second element.\n    # Calculate the new 'current_max' by taking the maximum of the current element, current_max multiplied by the current element, and current_min multiplied by the current element.\n    # Calculate the new 'current_min' by taking the minimum of the current element, current_max multiplied by the current element, and current_min multiplied by the current element.\n    # Update 'max_product' by taking the maximum of 'max_product' and 'current_max'.\n# Return 'max_product'."
        ],
        "final_plan": [
            "def find_max_product_subarray(arr)\n  max_product = arr[0]\n  current_max = arr[0]\n  current_min = arr[0]\n\n  (1...arr.length).each do |i|\n    temp_max = current_max\n    current_max = [arr[i], current_max * arr[i], current_min * arr[i]].max\n    current_min = [arr[i], temp_max * arr[i], current_min * arr[i]].min\n    max_product = [max_product, current_max].max\n  end\n\n  max_product\nend"
        ]
    },
    {
        "id": "464",
        "prompt": "Write a function to check if all values are same in a dictionary.",
        "solution": "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result",
        "code": [
            "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result"
        ],
        "pseudo": "# Get the first value from the dictionary\n# Iterate through all the values in the dictionary\n    # Check if the current value is equal to the first value\n        # If not equal, return False\n\n# If all values are equal, return True",
        "test": [
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
        ],
        "draft_plan": [
            "# Define a method to check if all values are the same in a dictionary.\n# Get the values from the dictionary using the 'values' method and store them in an array.\n# Use the 'uniq' method on the array to remove duplicate values.\n# If the resulting array has a length of 1, it means all values in the dictionary are the same.\n# Return true if the length is 1, otherwise return false."
        ],
        "final_plan": [
            "def check_all_values_same(dictionary)\n  values = dictionary.values\n  unique_values = values.uniq\n  \n  unique_values.length == 1\nend"
        ]
    },
    {
        "id": "465",
        "prompt": "Write a function to drop empty items from a given dictionary.",
        "solution": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1",
        "code": [
            "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1"
        ],
        "pseudo": "# Initialize an empty dictionary to store the non-empty items\n\n# Iterate through each key-value pair in the given dictionary\n    # Check if the value is not empty\n        # If not empty, add the key-value pair to the new dictionary\n\n# Return the new dictionary",
        "test": [
            "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
            "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
            "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
        ],
        "draft_plan": [
            "# Define a method to drop empty items from a dictionary.\n# Create a new empty dictionary to store non-empty items.\n# Iterate over the key-value pairs of the input dictionary using 'each' iterator.\n    # Check if the value of the current key-value pair is not empty.\n        # If true, add the key-value pair to the new dictionary.\n# Return the new dictionary."
        ],
        "final_plan": [
            "def drop_empty_items(dictionary)\n  new_dictionary = {}\n\n  dictionary.each do |key, value|\n    unless value.nil? || value.empty?\n      new_dictionary[key] = value\n    end\n  end\n\n  new_dictionary\nend"
        ]
    },
    {
        "id": "468",
        "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "solution": "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)",
        "code": [
            "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)"
        ],
        "pseudo": "# Initialize the maximum product as 1\n# Initialize an empty list to store the increasing subsequence\n\n# Iterate through each number in the array\n    # Initialize a temporary list to store the current increasing subsequence\n    # Iterate through each number before the current number\n        # Check if the current number is greater than the previous number and if the product of the current number and the previous maximum product is greater than the current maximum product\n            # If the condition is satisfied, update the maximum product and the temporary list with the current increasing subsequence\n    # Append the current number to the temporary list\n\n# Return the maximum product and the increasing subsequence list",
        "test": [
            "assert max_product([3, 100, 4, 5, 150, 6]) == 3000",
            "assert max_product([4, 42, 55, 68, 80]) == 50265600",
            "assert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460"
        ],
        "draft_plan": [
            "# Define a method to find the maximum product of an increasing subsequence.\n# Initialize a variable 'max_product' to 0.\n# Iterate over each index in the input array using a nested loop.\n    # Initialize a variable 'current_product' to 1.\n    # Iterate over each index from the current index to the end of the array.\n        # Check if the element at the current index is greater than the element at the previous index.\n            # If true, multiply 'current_product' by the element at the current index.\n    # Update 'max_product' to the maximum value between 'max_product' and 'current_product'.\n# Return 'max_product'."
        ],
        "final_plan": [
            "def find_max_product(arr)\n  max_product = 0\n\n  arr.each_with_index do |num, i|\n    current_product = 1\n    (i...arr.length).each do |j|\n      if arr[j] > arr[j - 1]\n        current_product *= arr[j]\n      end\n    end\n    max_product = [max_product, current_product].max\n  end\n\n  max_product\nend"
        ]
    },
    {
        "id": "470",
        "prompt": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.",
        "solution": "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ",
        "code": [
            "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) "
        ],
        "pseudo": "# Initialize an empty list to store the pairwise addition results\n\n# Iterate through the elements in the tuple up to the second to last element\n    # Compute the pairwise addition of the current element and its neighboring element\n    # Append the result to the list\n\n# Return the list of pairwise addition results",
        "test": [
            "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
            "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
            "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
        ],
        "draft_plan": [
            "# Define a method to find pairwise addition of neighboring elements in a tuple.\n# Create an empty array to store the results.\n# Iterate over the input tuple using 'each_cons' iterator with a step of 2.\n    # Add the sum of the current and next elements to the results array.\n# Return the results array."
        ],
        "final_plan": [
            "def pairwise_addition(tuple)\n  results = []\n\n  tuple.each_cons(2) do |a, b|\n    results << a + b\n  end\n\n  results\nend"
        ]
    },
    {
        "id": "471",
        "prompt": "Write a function to find the product of the array multiplication modulo n.",
        "solution": "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ",
        "code": [
            "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n "
        ],
        "pseudo": "# Initialize the product to 1\n\n# Iterate through each element in the array\n    # Multiply the current element with the product\n    # Take the modulo of the product with n\n\n# Return the final product modulo n",
        "test": [
            "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9",
            "assert find_remainder([1,1,1],1) == 0",
            "assert find_remainder([1,2,1],2) == 0"
        ],
        "draft_plan": [
            "# Define a method to find the product of the array multiplication modulo n.\n# Initialize a variable 'product' to 1.\n# Iterate over each element in the input array.\n    # Multiply the current element with 'product' and assign the result back to 'product'.\n# Return the remainder of 'product' divided by n using the modulo operator %."
        ],
        "final_plan": [
            "def find_product_modulo(arr, n)\n  product = 1\n\n  arr.each do |num|\n    product = (product * num) % n\n  end\n\n  product\nend"
        ]
    },
    {
        "id": "472",
        "prompt": "Write a function to check whether the given list contains consecutive numbers or not.",
        "solution": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ",
        "code": [
            "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) "
        ],
        "pseudo": "# Sort the input list in ascending order\n\n# Iterate through each number in the sorted list, starting from the second number\n    # Check if the current number is consecutive to the previous number\n        # If not, return False\n\n# If all numbers are consecutive, return True",
        "test": [
            "assert check_Consecutive([1,2,3,4,5]) == True",
            "assert check_Consecutive([1,2,3,5,6]) == False",
            "assert check_Consecutive([1,2,1]) == False"
        ],
        "draft_plan": [
            "# Define a method to check if a given list contains consecutive numbers.\n# Sort the input list in ascending order.\n# Iterate over the sorted list from the second element.\n    # Check if the difference between the current element and the previous element is not equal to 1.\n        # If not equal to 1, return false.\n# If the iteration completes without returning false, return true."
        ],
        "final_plan": [
            "def contains_consecutive_numbers(lst)\n  sorted_lst = lst.sort\n\n  (1...sorted_lst.length).each do |i|\n    return false if sorted_lst[i] - sorted_lst[i-1] != 1\n  end\n\n  true\nend"
        ]
    },
    {
        "id": "473",
        "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
        "solution": "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)",
        "code": [
            "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)"
        ],
        "pseudo": "# Initialize the intersection as the first tuple in the given tuple list\n\n# Iterate through each tuple in the given tuple list starting from the second tuple\n    # Initialize the current intersection as an empty list\n\n    # Iterate through each element in the current tuple\n        # Check if the element is present in the previous intersection\n            # If yes, append the element to the current intersection\n\n    # Update the intersection as the current intersection\n\n# Return the intersection",
        "test": [
            "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
            "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
            "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
        ],
        "draft_plan": [
            "# Define a method to find the tuple intersection of elements in the given tuple list.\n# Initialize a variable 'intersection' with the first tuple in the list.\n# Iterate over the remaining tuples in the list.\n    # Create a new empty array 'new_intersection' to store the common elements of the current tuple and the 'intersection'.\n    # Iterate over the elements of the current tuple.\n        # Check if the element exists in the 'intersection' array.\n            # If true, add the element to the 'new_intersection' array.\n    # Update the 'intersection' array to be the 'new_intersection' array.\n# Return the 'intersection' array, which will contain the common elements among all tuples in the list."
        ],
        "final_plan": [
            "def tuple_intersection(tuple_list)\n  intersection = tuple_list[0]\n\n  tuple_list[1..].each do |tuple|\n    new_intersection = []\n    tuple.each do |element|\n      new_intersection << element if intersection.include?(element)\n    end\n    intersection = new_intersection\n  end\n\n  intersection\nend"
        ]
    },
    {
        "id": "474",
        "prompt": "Write a function to replace characters in a string.",
        "solution": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2",
        "code": [
            "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2"
        ],
        "pseudo": "# Initialize an empty string to store the modified string\n\n# Iterate through each character in the input string\n    # Check if the character needs to be replaced\n        # If replacement is required, append the replacement character to the modified string\n        # Otherwise, append the original character to the modified string\n\n# Return the modified string",
        "test": [
            "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
            "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
            "assert replace_char(\"python\",'l','a')==(\"python\")"
        ],
        "draft_plan": [
            "# Define a method to replace characters in a string.\n# Accept three parameters: the string to be modified, the character to be replaced, and the replacement character.\n# Use the gsub method to replace all occurrences of the character with the replacement character in the string.\n# Return the modified string."
        ],
        "final_plan": [
            "def replace_characters(string, char, replacement)\n  string.gsub(char, replacement)\nend"
        ]
    },
    {
        "id": "475",
        "prompt": "Write a function to sort a dictionary by value.",
        "solution": "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter",
        "code": [
            "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter"
        ],
        "pseudo": "# Use the sorted() function with a lambda function as the key parameter\n# The lambda function takes each key-value pair from the dictionary and returns the value\n# The sorted() function will sort the dictionary based on the values in ascending order\n# Pass the sorted dictionary to the dict() function to convert it back to a dictionary type\n\ndef sort_dict_by_value(dictionary):\n    sorted_dict = dict(sorted(dictionary.items(), key=lambda item: item[1]))\n    return sorted_dict",
        "test": [
            "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
            "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
            "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
        ],
        "draft_plan": [
            "# Define a method to sort a dictionary by value.\n# Use the 'sort_by' method on the dictionary to sort it by value.\n    # Pass a block to the 'sort_by' method that extracts the value of each key-value pair.\n    # Use the 'to_a' method on the dictionary to convert it into an array of key-value pairs.\n    # Sort the array based on the values using the spaceship operator ('<=>').\n# Convert the sorted array back into a dictionary using the 'to_h' method.\n# Return the sorted dictionary."
        ],
        "final_plan": [
            "def sort_dictionary_by_value(dictionary)\n  sorted_array = dictionary.sort_by { |key, value| value }\n  sorted_dictionary = sorted_array.to_h\n  sorted_dictionary\nend"
        ]
    },
    {
        "id": "476",
        "prompt": "Write a function to find the sum of the largest and smallest value in a given array.",
        "solution": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum",
        "code": [
            "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum"
        ],
        "pseudo": "# Sort the array in ascending order\n# Initialize variables for the smallest and largest values\n\n# Get the smallest value from the sorted array (first element)\n# Get the largest value from the sorted array (last element)\n\n# Calculate the sum of the smallest and largest values\n\n# Return the sum",
        "test": [
            "assert big_sum([1,2,3]) == 4",
            "assert big_sum([-1,2,3,4]) == 3",
            "assert big_sum([2,3,6]) == 8"
        ],
        "draft_plan": [
            "# Define a function to find the sum of the largest and smallest value in an array.\n# Sort the array in ascending order using the 'sort' method.\n# Assign the first element of the sorted array to a variable 'smallest' and the last element to a variable 'largest'.\n# Return the sum of 'smallest' and 'largest'."
        ],
        "final_plan": [
            "def sum_of_largest_and_smallest(arr)\n  sorted_arr = arr.sort\n  smallest = sorted_arr[0]\n  largest = sorted_arr[-1]\n  sum = smallest + largest\n  sum\nend"
        ]
    },
    {
        "id": "477",
        "prompt": "Write a function to convert the given string to lower case.",
        "solution": "def is_lower(string):\n  return (string.lower())",
        "code": [
            "def is_lower(string):\n  return (string.lower())"
        ],
        "pseudo": "# Convert the input string to lower case using the lower() method\n# Return the lower case string",
        "test": [
            "assert is_lower(\"InValid\") == \"invalid\"",
            "assert is_lower(\"TruE\") == \"true\"",
            "assert is_lower(\"SenTenCE\") == \"sentence\""
        ],
        "draft_plan": [
            "# Define a method to convert a string to lowercase.\n# Use the 'downcase' method on the input string to convert it to lowercase.\n# Return the lowercase string."
        ],
        "final_plan": [
            "def convert_to_lowercase(string)\n  string.downcase\nend"
        ]
    },
    {
        "id": "478",
        "prompt": "Write a function to remove lowercase substrings from a given string.",
        "solution": "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)",
        "code": [
            "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)"
        ],
        "pseudo": "# Initialize an empty string to store the final result\n\n# Iterate through each character in the given string\n    # Check if the character is uppercase\n        # If the character is uppercase, append it to the final result string\n\n# Return the final result string",
        "test": [
            "assert remove_lowercase(\"PYTHon\")==('PYTH')",
            "assert remove_lowercase(\"FInD\")==('FID')",
            "assert remove_lowercase(\"STRinG\")==('STRG')"
        ],
        "draft_plan": [
            "# Define a method to remove lowercase substrings from a given string.\n# Initialize an empty array to store the resulting substrings.\n# Initialize a variable to keep track of the starting index of the current substring.\n# Iterate over each character in the string using 'each_char' iterator.\n    # Check if the current character is lowercase.\n        # If true, add the substring from the starting index to the current index to the resulting array.\n        # Update the starting index to the next character.\n# Add the remaining substring from the last starting index to the end of the string to the resulting array.\n# Join the resulting array into a single string using 'join' method with an empty string as the separator.\n# Return the resulting string."
        ],
        "final_plan": [
            "def remove_lowercase_substrings(string)\n  substrings = []\n  start_index = 0\n\n  string.each_char.with_index do |char, index|\n    if char.downcase == char\n      substrings << string[start_index..index-1] unless start_index == index\n      start_index = index + 1\n    end\n  end\n\n  substrings << string[start_index..-1]\n  substrings.join('')\nend"
        ]
    },
    {
        "id": "479",
        "prompt": "Write a function to find the first digit of a given number.",
        "solution": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ",
        "code": [
            "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) "
        ],
        "pseudo": "# Convert the given number to a string\n\n# Iterate through each character in the string\n    # Check if the character is a digit\n        # If it is, return the character as the first digit\n\n# If no digit is found, return \"None\"",
        "test": [
            "assert first_Digit(123) == 1",
            "assert first_Digit(456) == 4",
            "assert first_Digit(12) == 1"
        ],
        "draft_plan": [
            "# Define a method to find the first digit of a given number.\n# Convert the number to a string.\n# Extract the first character of the string.\n# Convert the first character back to an integer.\n# Return the first digit as an integer."
        ],
        "final_plan": [
            "def find_first_digit(number)\n  first_digit = number.to_s[0].to_i\n  first_digit\nend"
        ]
    }
]